
PolluxIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c0c  0801a948  0801a948  0002a948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e554  0801e554  00030290  2**0
                  CONTENTS
  4 .ARM          00000008  0801e554  0801e554  0002e554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e55c  0801e55c  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801e55c  0801e55c  0002e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e564  0801e564  0002e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  24000000  0801e568  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045db8  24000290  0801e7f8  00030290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24046048  0801e7f8  00036048  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00134cfb  00000000  00000000  000302be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001bd67  00000000  00000000  00164fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00052fdc  00000000  00000000  00180d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004088  00000000  00000000  001d3d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b200  00000000  00000000  001d7d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0005a167  00000000  00000000  001e2f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008fe10  00000000  00000000  0023d0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f597b  00000000  00000000  002cceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  004c287a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e2a8  00000000  00000000  004c28cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000290 	.word	0x24000290
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a92c 	.word	0x0801a92c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000294 	.word	0x24000294
 80002dc:	0801a92c 	.word	0x0801a92c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9ac 	b.w	8000a98 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468e      	mov	lr, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14d      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4694      	mov	ip, r2
 80007da:	d969      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b152      	cbz	r2, 80007f8 <__udivmoddi4+0x30>
 80007e2:	fa01 f302 	lsl.w	r3, r1, r2
 80007e6:	f1c2 0120 	rsb	r1, r2, #32
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f2:	ea41 0e03 	orr.w	lr, r1, r3
 80007f6:	4094      	lsls	r4, r2
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	0c21      	lsrs	r1, r4, #16
 80007fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000802:	fa1f f78c 	uxth.w	r7, ip
 8000806:	fb08 e316 	mls	r3, r8, r6, lr
 800080a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800080e:	fb06 f107 	mul.w	r1, r6, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800081e:	f080 811f 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 811c 	bls.w	8000a60 <__udivmoddi4+0x298>
 8000828:	3e02      	subs	r6, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f0f8 	udiv	r0, r3, r8
 8000834:	fb08 3310 	mls	r3, r8, r0, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb00 f707 	mul.w	r7, r0, r7
 8000840:	42a7      	cmp	r7, r4
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x92>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800084c:	f080 810a 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000850:	42a7      	cmp	r7, r4
 8000852:	f240 8107 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800085e:	1be4      	subs	r4, r4, r7
 8000860:	2600      	movs	r6, #0
 8000862:	b11d      	cbz	r5, 800086c <__udivmoddi4+0xa4>
 8000864:	40d4      	lsrs	r4, r2
 8000866:	2300      	movs	r3, #0
 8000868:	e9c5 4300 	strd	r4, r3, [r5]
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0xc2>
 8000876:	2d00      	cmp	r5, #0
 8000878:	f000 80ef 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087c:	2600      	movs	r6, #0
 800087e:	e9c5 0100 	strd	r0, r1, [r5]
 8000882:	4630      	mov	r0, r6
 8000884:	4631      	mov	r1, r6
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f683 	clz	r6, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	428b      	cmp	r3, r1
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80f9 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb61 0303 	sbc.w	r3, r1, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	469e      	mov	lr, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d0e0      	beq.n	800086c <__udivmoddi4+0xa4>
 80008aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ae:	e7dd      	b.n	800086c <__udivmoddi4+0xa4>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8092 	bne.w	80009e2 <__udivmoddi4+0x21a>
 80008be:	eba1 010c 	sub.w	r1, r1, ip
 80008c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c6:	fa1f fe8c 	uxth.w	lr, ip
 80008ca:	2601      	movs	r6, #1
 80008cc:	0c20      	lsrs	r0, r4, #16
 80008ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80008d2:	fb07 1113 	mls	r1, r7, r3, r1
 80008d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	4288      	cmp	r0, r1
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0101 	adds.w	r1, ip, r1
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	4288      	cmp	r0, r1
 80008ee:	f200 80cb 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000904:	fb0e fe00 	mul.w	lr, lr, r0
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80bb 	bhi.w	8000a92 <__udivmoddi4+0x2ca>
 800091c:	4608      	mov	r0, r1
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79c      	b.n	8000862 <__udivmoddi4+0x9a>
 8000928:	f1c6 0720 	rsb	r7, r6, #32
 800092c:	40b3      	lsls	r3, r6
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa20 f407 	lsr.w	r4, r0, r7
 800093a:	fa01 f306 	lsl.w	r3, r1, r6
 800093e:	431c      	orrs	r4, r3
 8000940:	40f9      	lsrs	r1, r7
 8000942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000946:	fa00 f306 	lsl.w	r3, r0, r6
 800094a:	fbb1 f8f9 	udiv	r8, r1, r9
 800094e:	0c20      	lsrs	r0, r4, #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fb09 1118 	mls	r1, r9, r8, r1
 8000958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800095c:	fb08 f00e 	mul.w	r0, r8, lr
 8000960:	4288      	cmp	r0, r1
 8000962:	fa02 f206 	lsl.w	r2, r2, r6
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	4288      	cmp	r0, r1
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4461      	add	r1, ip
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f9 	udiv	r0, r1, r9
 8000988:	fb09 1110 	mls	r1, r9, r0, r1
 800098c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000990:	fb00 fe0e 	mul.w	lr, r0, lr
 8000994:	458e      	cmp	lr, r1
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	458e      	cmp	lr, r1
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4461      	add	r1, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9402 	umull	r9, r4, r0, r2
 80009b2:	eba1 010e 	sub.w	r1, r1, lr
 80009b6:	42a1      	cmp	r1, r4
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46a6      	mov	lr, r4
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	b15d      	cbz	r5, 80009da <__udivmoddi4+0x212>
 80009c2:	ebb3 0208 	subs.w	r2, r3, r8
 80009c6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ca:	fa01 f707 	lsl.w	r7, r1, r7
 80009ce:	fa22 f306 	lsr.w	r3, r2, r6
 80009d2:	40f1      	lsrs	r1, r6
 80009d4:	431f      	orrs	r7, r3
 80009d6:	e9c5 7100 	strd	r7, r1, [r5]
 80009da:	2600      	movs	r6, #0
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	f1c2 0320 	rsb	r3, r2, #32
 80009e6:	40d8      	lsrs	r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	fa21 f303 	lsr.w	r3, r1, r3
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4301      	orrs	r1, r0
 80009f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f8:	fa1f fe8c 	uxth.w	lr, ip
 80009fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a00:	fb07 3610 	mls	r6, r7, r0, r3
 8000a04:	0c0b      	lsrs	r3, r1, #16
 8000a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	429e      	cmp	r6, r3
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a30:	fb07 3316 	mls	r3, r7, r6, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb06 f30e 	mul.w	r3, r6, lr
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0101 	adds.w	r1, ip, r1
 8000a44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3e02      	subs	r6, #2
 8000a50:	4461      	add	r1, ip
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e705      	b.n	800086c <__udivmoddi4+0xa4>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e3      	b.n	800082c <__udivmoddi4+0x64>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f8      	b.n	800085a <__udivmoddi4+0x92>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4646      	mov	r6, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4640      	mov	r0, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	e732      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e709      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	e742      	b.n	800091e <__udivmoddi4+0x156>

08000a98 <__aeabi_idiv0>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a9c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a9e:	2400      	movs	r4, #0
{
 8000aa0:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	221c      	movs	r2, #28
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8000aa8:	9402      	str	r4, [sp, #8]
 8000aaa:	e9cd 4400 	strd	r4, r4, [sp]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	f015 fb6f 	bl	8016190 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ab4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ab8:	491b      	ldr	r1, [pc, #108]	; (8000b28 <MX_ADC1_Init+0x8c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aba:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abc:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000abe:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac0:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ac4:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	6103      	str	r3, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000acc:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ace:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.NbrOfConversion = 1;
 8000ad2:	6183      	str	r3, [r0, #24]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad4:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad8:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000adc:	f001 fd2e 	bl	800253c <HAL_ADC_Init>
 8000ae0:	b108      	cbz	r0, 8000ae6 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8000ae2:	f000 fc99 	bl	8001418 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae6:	4669      	mov	r1, sp
 8000ae8:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_ADC1_Init+0x88>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aea:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aec:	f001 fe32 	bl	8002754 <HAL_ADCEx_MultiModeConfigChannel>
 8000af0:	b108      	cbz	r0, 8000af6 <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 8000af2:	f000 fc91 	bl	8001418 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <MX_ADC1_Init+0x90>)
 8000af8:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afa:	a903      	add	r1, sp, #12
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_ADC1_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afe:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b08:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b0e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.Offset = 0;
 8000b12:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b16:	f001 faa9 	bl	800206c <HAL_ADC_ConfigChannel>
 8000b1a:	b108      	cbz	r0, 8000b20 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000b1c:	f000 fc7c 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	b00a      	add	sp, #40	; 0x28
 8000b22:	bd10      	pop	{r4, pc}
 8000b24:	240002b0 	.word	0x240002b0
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	14f00020 	.word	0x14f00020

08000b30 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b30:	b500      	push	{lr}
 8000b32:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b34:	221c      	movs	r2, #28
 8000b36:	2100      	movs	r1, #0
 8000b38:	a801      	add	r0, sp, #4
 8000b3a:	f015 fb29 	bl	8016190 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <MX_ADC2_Init+0x78>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b44:	4919      	ldr	r1, [pc, #100]	; (8000bac <MX_ADC2_Init+0x7c>)
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b46:	2204      	movs	r2, #4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b48:	e9c0 1300 	strd	r1, r3, [r0]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b4c:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4e:	6102      	str	r2, [r0, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 8000b50:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b52:	8283      	strh	r3, [r0, #20]
  hadc2.Init.NbrOfConversion = 1;
 8000b54:	6182      	str	r2, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b56:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b58:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b5a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b62:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b66:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6a:	f001 fce7 	bl	800253c <HAL_ADC_Init>
 8000b6e:	b108      	cbz	r0, 8000b74 <MX_ADC2_Init+0x44>
  {
    Error_Handler();
 8000b70:	f000 fc52 	bl	8001418 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <MX_ADC2_Init+0x80>)
 8000b76:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <MX_ADC2_Init+0x78>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b84:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b88:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b8a:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b8e:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.Offset = 0;
 8000b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b96:	f001 fa69 	bl	800206c <HAL_ADC_ConfigChannel>
 8000b9a:	b108      	cbz	r0, 8000ba0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f000 fc3c 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ba0:	b009      	add	sp, #36	; 0x24
 8000ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ba6:	bf00      	nop
 8000ba8:	24000314 	.word	0x24000314
 8000bac:	40022100 	.word	0x40022100
 8000bb0:	14f00020 	.word	0x14f00020

08000bb4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb8:	221c      	movs	r2, #28
 8000bba:	2100      	movs	r1, #0

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bbc:	4c1a      	ldr	r4, [pc, #104]	; (8000c28 <MX_ADC3_Init+0x74>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	a801      	add	r0, sp, #4
 8000bc0:	f015 fae6 	bl	8016190 <memset>
  hadc3.Instance = ADC3;
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <MX_ADC3_Init+0x78>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bca:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bcc:	e9c0 4300 	strd	r4, r3, [r0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bd0:	2300      	movs	r3, #0
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8000bd2:	2401      	movs	r4, #1
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd4:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bd6:	8283      	strh	r3, [r0, #20]
  hadc3.Init.NbrOfConversion = 1;
 8000bd8:	6184      	str	r4, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bdc:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000bde:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bea:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bee:	f001 fca5 	bl	800253c <HAL_ADC_Init>
 8000bf2:	b108      	cbz	r0, 8000bf8 <MX_ADC3_Init+0x44>
  {
    Error_Handler();
 8000bf4:	f000 fc10 	bl	8001418 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2206      	movs	r2, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c00:	480a      	ldr	r0, [pc, #40]	; (8000c2c <MX_ADC3_Init+0x78>)
  sConfig.Channel = ADC_CHANNEL_0;
 8000c02:	9401      	str	r4, [sp, #4]
  sConfig.Offset = 0;
 8000c04:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c06:	f88d 301d 	strb.w	r3, [sp, #29]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c0e:	2204      	movs	r2, #4
 8000c10:	e9cd 1204 	strd	r1, r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c14:	eb0d 0102 	add.w	r1, sp, r2
 8000c18:	f001 fa28 	bl	800206c <HAL_ADC_ConfigChannel>
 8000c1c:	b108      	cbz	r0, 8000c22 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 fbfb 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c22:	b008      	add	sp, #32
 8000c24:	bd10      	pop	{r4, pc}
 8000c26:	bf00      	nop
 8000c28:	58026000 	.word	0x58026000
 8000c2c:	24000378 	.word	0x24000378

08000c30 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	2214      	movs	r2, #20
 8000c38:	2100      	movs	r1, #0
 8000c3a:	a807      	add	r0, sp, #28
 8000c3c:	f015 faa8 	bl	8016190 <memset>
  if(adcHandle->Instance==ADC1)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	4a3c      	ldr	r2, [pc, #240]	; (8000d34 <HAL_ADC_MspInit+0x104>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d129      	bne.n	8000c9c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c48:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <HAL_ADC_MspInit+0x108>)
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c4e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c52:	d10c      	bne.n	8000c6e <HAL_ADC_MspInit+0x3e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <HAL_ADC_MspInit+0x10c>)
 8000c56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c5a:	f042 0220 	orr.w	r2, r2, #32
 8000c5e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	9b01      	ldr	r3, [sp, #4]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_ADC_MspInit+0x10c>)
 8000c70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c74:	f042 0202 	orr.w	r2, r2, #2
 8000c78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c88:	2202      	movs	r2, #2
 8000c8a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	a907      	add	r1, sp, #28
 8000c8e:	482c      	ldr	r0, [pc, #176]	; (8000d40 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c90:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f003 fd28 	bl	80046e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c98:	b00c      	add	sp, #48	; 0x30
 8000c9a:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <HAL_ADC_MspInit+0x114>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d120      	bne.n	8000ce4 <HAL_ADC_MspInit+0xb4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <HAL_ADC_MspInit+0x108>)
 8000ca4:	6813      	ldr	r3, [r2, #0]
 8000ca6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ca8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000caa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cac:	d10c      	bne.n	8000cc8 <HAL_ADC_MspInit+0x98>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_ADC_MspInit+0x10c>)
 8000cb0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000cb4:	f042 0220 	orr.w	r2, r2, #32
 8000cb8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000cbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	9303      	str	r3, [sp, #12]
 8000cc6:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_ADC_MspInit+0x10c>)
 8000cca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cce:	f042 0202 	orr.w	r2, r2, #2
 8000cd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	9304      	str	r3, [sp, #16]
 8000ce0:	9b04      	ldr	r3, [sp, #16]
 8000ce2:	e7d1      	b.n	8000c88 <HAL_ADC_MspInit+0x58>
  else if(adcHandle->Instance==ADC3)
 8000ce4:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_ADC_MspInit+0x118>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d1d6      	bne.n	8000c98 <HAL_ADC_MspInit+0x68>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_ADC_MspInit+0x10c>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000cec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000cf4:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cf6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000cfa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000cfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d02:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8000d06:	9205      	str	r2, [sp, #20]
 8000d08:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d0e:	f042 0204 	orr.w	r2, r2, #4
 8000d12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	9306      	str	r3, [sp, #24]
 8000d20:	9b06      	ldr	r3, [sp, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000d22:	f001 f983 	bl	800202c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000d26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	f001 f97e 	bl	800202c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000d30:	e7b2      	b.n	8000c98 <HAL_ADC_MspInit+0x68>
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000
 8000d38:	240002ac 	.word	0x240002ac
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020400 	.word	0x58020400
 8000d44:	40022100 	.word	0x40022100
 8000d48:	58026000 	.word	0x58026000

08000d4c <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_BDMA_Init+0x44>)
{
 8000d4e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000d50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000d54:	2105      	movs	r1, #5
 8000d56:	2081      	movs	r0, #129	; 0x81
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000d58:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8000d6e:	f001 fd89 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000d72:	2081      	movs	r0, #129	; 0x81
 8000d74:	f001 fdb8 	bl	80028e8 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	2082      	movs	r0, #130	; 0x82
 8000d7e:	f001 fd81 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8000d82:	2082      	movs	r0, #130	; 0x82

}
 8000d84:	b003      	add	sp, #12
 8000d86:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8000d8a:	f001 bdad 	b.w	80028e8 <HAL_NVIC_EnableIRQ>
 8000d8e:	bf00      	nop
 8000d90:	58024400 	.word	0x58024400

08000d94 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_DMA_Init+0x54>)
{
 8000d96:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d98:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000da8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000db6:	f001 fd65 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dba:	200b      	movs	r0, #11
 8000dbc:	f001 fd94 	bl	80028e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2105      	movs	r1, #5
 8000dc4:	200c      	movs	r0, #12
 8000dc6:	f001 fd5d 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f001 fd8c 	bl	80028e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	200d      	movs	r0, #13
 8000dd6:	f001 fd55 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dda:	200d      	movs	r0, #13

}
 8000ddc:	b003      	add	sp, #12
 8000dde:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000de2:	f001 bd81 	b.w	80028e8 <HAL_NVIC_EnableIRQ>
 8000de6:	bf00      	nop
 8000de8:	58024400 	.word	0x58024400

08000dec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000dec:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_FDCAN1_Init+0x54>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 1;
 8000df0:	2201      	movs	r2, #1
  hfdcan1.Instance = FDCAN1;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_FDCAN1_Init+0x58>)
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000df4:	2102      	movs	r1, #2
  hfdcan1.Instance = FDCAN1;
 8000df6:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000df8:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000dfa:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 1;
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dfe:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg1 = 1;
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e02:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e06:	2204      	movs	r2, #4
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e08:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e0a:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e0c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e10:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e14:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e18:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e1c:	e9c0 2311 	strd	r2, r3, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e20:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.TxEventsNbr = 0;
 8000e24:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  hfdcan1.Init.TxBuffersNbr = 0;
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e28:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e2c:	e9c0 3219 	strd	r3, r2, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e30:	f003 f814 	bl	8003e5c <HAL_FDCAN_Init>
 8000e34:	b118      	cbz	r0, 8000e3e <MX_FDCAN1_Init+0x52>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e3a:	f000 baed 	b.w	8001418 <Error_Handler>
}
 8000e3e:	bd08      	pop	{r3, pc}
 8000e40:	240003dc 	.word	0x240003dc
 8000e44:	4000a000 	.word	0x4000a000

08000e48 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2214      	movs	r2, #20
 8000e50:	2100      	movs	r1, #0
 8000e52:	a803      	add	r0, sp, #12
 8000e54:	f015 f99c 	bl	8016190 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e58:	6822      	ldr	r2, [r4, #0]
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_FDCAN_MspInit+0x84>)
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d133      	bne.n	8000ec8 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_FDCAN_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	a903      	add	r1, sp, #12
 8000e64:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <HAL_FDCAN_MspInit+0x8c>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e66:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e6e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000e72:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000e76:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e7a:	9201      	str	r2, [sp, #4]
 8000e7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f003 fc20 	bl	80046e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2106      	movs	r1, #6
 8000eac:	2013      	movs	r0, #19
 8000eae:	f001 fce9 	bl	8002884 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000eb2:	2013      	movs	r0, #19
 8000eb4:	f001 fd18 	bl	80028e8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8000eb8:	2015      	movs	r0, #21
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2106      	movs	r1, #6
 8000ebe:	f001 fce1 	bl	8002884 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ec2:	2015      	movs	r0, #21
 8000ec4:	f001 fd10 	bl	80028e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000ec8:	b008      	add	sp, #32
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	4000a000 	.word	0x4000a000
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58020000 	.word	0x58020000

08000ed8 <systemd_main>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_systemd_main */
void systemd_main(void const * argument)
{
 8000ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN systemd_main */
	systemd_init();
 8000eda:	f013 fadf 	bl	801449c <systemd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f008 fe31 	bl	8009b46 <osDelay>
  for(;;)
 8000ee4:	e7fb      	b.n	8000ede <systemd_main+0x6>

08000ee6 <vApplicationStackOverflowHook>:
}
 8000ee6:	4770      	bx	lr

08000ee8 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <vApplicationGetIdleTaskMemory+0x10>)
 8000eea:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <vApplicationGetIdleTaskMemory+0x14>)
 8000eee:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	24000680 	.word	0x24000680
 8000efc:	24000480 	.word	0x24000480

08000f00 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000f00:	b530      	push	{r4, r5, lr}
  osThreadDef(systemd, systemd_main, osPriorityNormal, 0, 1024);
 8000f02:	4d08      	ldr	r5, [pc, #32]	; (8000f24 <MX_FREERTOS_Init+0x24>)
void MX_FREERTOS_Init(void) {
 8000f04:	b089      	sub	sp, #36	; 0x24
  osThreadDef(systemd, systemd_main, osPriorityNormal, 0, 1024);
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	ac01      	add	r4, sp, #4
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  systemdHandle = osThreadCreate(osThread(systemd), NULL);
 8000f14:	2100      	movs	r1, #0
 8000f16:	a801      	add	r0, sp, #4
 8000f18:	f008 fded 	bl	8009af6 <osThreadCreate>
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <MX_FREERTOS_Init+0x28>)
 8000f1e:	6018      	str	r0, [r3, #0]
}
 8000f20:	b009      	add	sp, #36	; 0x24
 8000f22:	bd30      	pop	{r4, r5, pc}
 8000f24:	0801a948 	.word	0x0801a948
 8000f28:	2400047c 	.word	0x2400047c

08000f2c <MX_GPIO_Init>:
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
     PB4 (NJTRST)   ------> DEBUG_JTRST
*/
void MX_GPIO_Init(void)
{
 8000f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	2214      	movs	r2, #20
 8000f34:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000f36:	4d50      	ldr	r5, [pc, #320]	; (8001078 <MX_GPIO_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f3a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8001088 <MX_GPIO_Init+0x15c>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f015 f927 	bl	8016190 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	4b4e      	ldr	r3, [pc, #312]	; (800107c <MX_GPIO_Init+0x150>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000f44:	4628      	mov	r0, r5
 8000f46:	210c      	movs	r1, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8000f4e:	4e4c      	ldr	r6, [pc, #304]	; (8001080 <MX_GPIO_Init+0x154>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f52:	f042 0210 	orr.w	r2, r2, #16
 8000f56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f5e:	f002 0210 	and.w	r2, r2, #16
 8000f62:	9201      	str	r2, [sp, #4]
 8000f64:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f76:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f7a:	9202      	str	r2, [sp, #8]
 8000f7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f82:	f042 0204 	orr.w	r2, r2, #4
 8000f86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f8e:	f002 0204 	and.w	r2, r2, #4
 8000f92:	9203      	str	r2, [sp, #12]
 8000f94:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fa2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fa6:	f002 0201 	and.w	r2, r2, #1
 8000faa:	9204      	str	r2, [sp, #16]
 8000fac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb2:	f042 0202 	orr.w	r2, r2, #2
 8000fb6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fbe:	f002 0202 	and.w	r2, r2, #2
 8000fc2:	9205      	str	r2, [sp, #20]
 8000fc4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fca:	f042 0208 	orr.w	r2, r2, #8
 8000fce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	9306      	str	r3, [sp, #24]
 8000fde:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000fe0:	f003 fd10 	bl	8004a04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8000fec:	f003 fd0a 	bl	8004a04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	f003 fd05 	bl	8004a04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001002:	f003 fcff 	bl	8004a04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	4630      	mov	r0, r6
 800100a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800100e:	f003 fcf9 	bl	8004a04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	f640 033c 	movw	r3, #2108	; 0x83c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001016:	a907      	add	r1, sp, #28
 8001018:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	f003 fb61 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001026:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	a907      	add	r1, sp, #28
 800102a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f003 fb58 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	a907      	add	r1, sp, #28
 800103e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001046:	f003 fb4f 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800104a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	a907      	add	r1, sp, #28
 8001050:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	e9cd 3707 	strd	r3, r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f003 fb45 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	a907      	add	r1, sp, #28
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106c:	f003 fb3c 	bl	80046e8 <HAL_GPIO_Init>

}
 8001070:	b00c      	add	sp, #48	; 0x30
 8001072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001076:	bf00      	nop
 8001078:	58021000 	.word	0x58021000
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400
 8001084:	58020c00 	.word	0x58020c00
 8001088:	58020000 	.word	0x58020000

0800108c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800108c:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <MX_I2C4_Init+0x54>)
  hi2c4.Init.Timing = 0x307075B1;
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	2201      	movs	r2, #1
  hi2c4.Instance = I2C4;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_I2C4_Init+0x58>)
 8001094:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8001096:	f1a3 531e 	sub.w	r3, r3, #662700032	; 0x27800000
 800109a:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 800109e:	f2a3 634f 	subw	r3, r3, #1615	; 0x64f
 80010a2:	6043      	str	r3, [r0, #4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
 80010aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80010b4:	f003 fe07 	bl	8004cc6 <HAL_I2C_Init>
 80010b8:	b108      	cbz	r0, 80010be <MX_I2C4_Init+0x32>
  {
    Error_Handler();
 80010ba:	f000 f9ad 	bl	8001418 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_I2C4_Init+0x54>)
 80010c2:	f003 ff0d 	bl	8004ee0 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	b108      	cbz	r0, 80010cc <MX_I2C4_Init+0x40>
  {
    Error_Handler();
 80010c8:	f000 f9a6 	bl	8001418 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_I2C4_Init+0x54>)
 80010d0:	f003 ff2c 	bl	8004f2c <HAL_I2CEx_ConfigDigitalFilter>
 80010d4:	b118      	cbz	r0, 80010de <MX_I2C4_Init+0x52>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80010d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80010da:	f000 b99d 	b.w	8001418 <Error_Handler>
}
 80010de:	bd08      	pop	{r3, pc}
 80010e0:	24000734 	.word	0x24000734
 80010e4:	58001c00 	.word	0x58001c00

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b510      	push	{r4, lr}
 80010ea:	b0b6      	sub	sp, #216	; 0xd8
 80010ec:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	2214      	movs	r2, #20
 80010f0:	2100      	movs	r1, #0
 80010f2:	a802      	add	r0, sp, #8
 80010f4:	f015 f84c 	bl	8016190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	22bc      	movs	r2, #188	; 0xbc
 80010fa:	2100      	movs	r1, #0
 80010fc:	a807      	add	r0, sp, #28
 80010fe:	f015 f847 	bl	8016190 <memset>
  if(i2cHandle->Instance==I2C4)
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001106:	429a      	cmp	r2, r3
 8001108:	d12e      	bne.n	8001168 <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800110a:	2310      	movs	r3, #16
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800110e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	f005 fb2a 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	b108      	cbz	r0, 800111a <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8001116:	f000 f97f 	bl	8001418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4c15      	ldr	r4, [pc, #84]	; (8001170 <HAL_I2C_MspInit+0x88>)
    /**I2C4 GPIO Configuration
    PB6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <HAL_I2C_MspInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800112e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113a:	2312      	movs	r3, #18
 800113c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001146:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800114a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f003 facc 	bl	80046e8 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001150:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800115c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8001160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001168:	b036      	add	sp, #216	; 0xd8
 800116a:	bd10      	pop	{r4, pc}
 800116c:	58001c00 	.word	0x58001c00
 8001170:	58024400 	.word	0x58024400
 8001174:	58020400 	.word	0x58020400

08001178 <MX_JPEG_Init>:
MDMA_HandleTypeDef hmdma_jpeg_infifo_th;
MDMA_HandleTypeDef hmdma_jpeg_outfifo_th;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8001178:	b508      	push	{r3, lr}
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_JPEG_Init+0x18>)
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <MX_JPEG_Init+0x1c>)
 800117e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001180:	f004 f808 	bl	8005194 <HAL_JPEG_Init>
 8001184:	b118      	cbz	r0, 800118e <MX_JPEG_Init+0x16>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800118a:	f000 b945 	b.w	8001418 <Error_Handler>
}
 800118e:	bd08      	pop	{r3, pc}
 8001190:	24000790 	.word	0x24000790
 8001194:	52003000 	.word	0x52003000

08001198 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8001198:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(jpegHandle->Instance==JPEG)
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_JPEG_MspInit+0xcc>)
{
 800119c:	4605      	mov	r5, r0
  if(jpegHandle->Instance==JPEG)
 800119e:	6802      	ldr	r2, [r0, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d15c      	bne.n	800125e <HAL_JPEG_MspInit+0xc6>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_JPEG_MspInit+0xd0>)
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80011a6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80011aa:	4c30      	ldr	r4, [pc, #192]	; (800126c <HAL_JPEG_MspInit+0xd4>)
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011ac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80011b0:	482f      	ldr	r0, [pc, #188]	; (8001270 <HAL_JPEG_MspInit+0xd8>)
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80011ba:	2202      	movs	r2, #2
    __HAL_RCC_JPEG_CLK_ENABLE();
 80011bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80011c8:	2311      	movs	r3, #17
 80011ca:	e9c4 0300 	strd	r0, r3, [r4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80011ce:	2300      	movs	r3, #0
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80011d0:	4620      	mov	r0, r4
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80011d2:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80011d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80011da:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80011dc:	61e3      	str	r3, [r4, #28]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80011de:	63a3      	str	r3, [r4, #56]	; 0x38
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80011e0:	e9c4 c208 	strd	ip, r2, [r4, #32]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80011e4:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 80011e6:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80011ea:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80011ee:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80011f2:	f004 f909 	bl	8005408 <HAL_MDMA_Init>
 80011f6:	b108      	cbz	r0, 80011fc <HAL_JPEG_MspInit+0x64>
    {
      Error_Handler();
 80011f8:	f000 f90e 	bl	8001418 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80011fc:	2200      	movs	r2, #0
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <HAL_JPEG_MspInit+0xd4>)
 8001200:	4611      	mov	r1, r2
 8001202:	f004 f970 	bl	80054e6 <HAL_MDMA_ConfigPostRequestMask>
 8001206:	b108      	cbz	r0, 800120c <HAL_JPEG_MspInit+0x74>
    {
      Error_Handler();
 8001208:	f000 f906 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(jpegHandle,hdmain,hmdma_jpeg_infifo_th);
 800120c:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel1;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800120e:	2313      	movs	r3, #19
 8001210:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_JPEG_MspInit+0xdc>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_LOW;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001212:	2108      	movs	r1, #8
    __HAL_LINKDMA(jpegHandle,hdmain,hmdma_jpeg_infifo_th);
 8001214:	6425      	str	r5, [r4, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel1;
 8001216:	4c18      	ldr	r4, [pc, #96]	; (8001278 <HAL_JPEG_MspInit+0xe0>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001218:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800121c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800121e:	2300      	movs	r3, #0
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001220:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001222:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001224:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001228:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 800122c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001230:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001234:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001238:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 800123c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001240:	f004 f8e2 	bl	8005408 <HAL_MDMA_Init>
 8001244:	b108      	cbz	r0, 800124a <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001246:	f000 f8e7 	bl	8001418 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 800124a:	2200      	movs	r2, #0
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <HAL_JPEG_MspInit+0xe0>)
 800124e:	4611      	mov	r1, r2
 8001250:	f004 f949 	bl	80054e6 <HAL_MDMA_ConfigPostRequestMask>
 8001254:	b108      	cbz	r0, 800125a <HAL_JPEG_MspInit+0xc2>
    {
      Error_Handler();
 8001256:	f000 f8df 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(jpegHandle,hdmaout,hmdma_jpeg_outfifo_th);
 800125a:	636c      	str	r4, [r5, #52]	; 0x34
 800125c:	6425      	str	r5, [r4, #64]	; 0x40

  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 800125e:	b003      	add	sp, #12
 8001260:	bd30      	pop	{r4, r5, pc}
 8001262:	bf00      	nop
 8001264:	52003000 	.word	0x52003000
 8001268:	58024400 	.word	0x58024400
 800126c:	240007e8 	.word	0x240007e8
 8001270:	52000040 	.word	0x52000040
 8001274:	52000080 	.word	0x52000080
 8001278:	24000854 	.word	0x24000854

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b510      	push	{r4, lr}
 800127e:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001280:	224c      	movs	r2, #76	; 0x4c
 8001282:	2100      	movs	r1, #0
 8001284:	a809      	add	r0, sp, #36	; 0x24
 8001286:	f014 ff83 	bl	8016190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128a:	2220      	movs	r2, #32
 800128c:	2100      	movs	r1, #0
 800128e:	a801      	add	r0, sp, #4
 8001290:	f014 ff7e 	bl	8016190 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001294:	2002      	movs	r0, #2
 8001296:	f004 fa09 	bl	80056ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <SystemClock_Config+0xc4>)
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <SystemClock_Config+0xc8>)
 80012b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012b4:	f041 0101 	orr.w	r1, r1, #1
 80012b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80012ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012bc:	f002 0201 	and.w	r2, r2, #1
 80012c0:	9200      	str	r2, [sp, #0]
 80012c2:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	0492      	lsls	r2, r2, #18
 80012c8:	d5fc      	bpl.n	80012c4 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <SystemClock_Config+0xcc>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012cc:	2109      	movs	r1, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 64;
 80012ce:	2440      	movs	r4, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012d0:	f04f 0c0c 	mov.w	ip, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012d8:	f023 0303 	bic.w	r3, r3, #3
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012ea:	2301      	movs	r3, #1
 80012ec:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ee:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80012f4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012f6:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012fa:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012fe:	2300      	movs	r3, #0
 8001300:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001304:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f004 fc77 	bl	8005bf8 <HAL_RCC_OscConfig>
 800130a:	b108      	cbz	r0, 8001310 <SystemClock_Config+0x94>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130e:	e7fe      	b.n	800130e <SystemClock_Config+0x92>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2303      	movs	r3, #3
 8001312:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001314:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001318:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001322:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001324:	e9cd 3404 	strd	r3, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001328:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800132c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001330:	f004 ff94 	bl	800625c <HAL_RCC_ClockConfig>
 8001334:	b108      	cbz	r0, 800133a <SystemClock_Config+0xbe>
 8001336:	b672      	cpsid	i
  while (1)
 8001338:	e7fe      	b.n	8001338 <SystemClock_Config+0xbc>
}
 800133a:	b01c      	add	sp, #112	; 0x70
 800133c:	bd10      	pop	{r4, pc}
 800133e:	bf00      	nop
 8001340:	58024800 	.word	0x58024800
 8001344:	58000400 	.word	0x58000400
 8001348:	58024400 	.word	0x58024400

0800134c <PeriphCommonClock_Config>:
{
 800134c:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134e:	24a0      	movs	r4, #160	; 0xa0
{
 8001350:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001352:	2100      	movs	r1, #0
 8001354:	4622      	mov	r2, r4
 8001356:	a808      	add	r0, sp, #32
 8001358:	f014 ff1a 	bl	8016190 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <PeriphCommonClock_Config+0x58>)
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001360:	21c0      	movs	r1, #192	; 0xc0
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001362:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001364:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001366:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001368:	2180      	movs	r1, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800136a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800136e:	2210      	movs	r2, #16
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001370:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001374:	e9cd 2303 	strd	r2, r3, [sp, #12]
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001378:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001384:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001388:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800138a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800138e:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001392:	9329      	str	r3, [sp, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	f005 f9e8 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	b108      	cbz	r0, 800139e <PeriphCommonClock_Config+0x52>
 800139a:	b672      	cpsid	i
  while (1)
 800139c:	e7fe      	b.n	800139c <PeriphCommonClock_Config+0x50>
}
 800139e:	b030      	add	sp, #192	; 0xc0
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	00089200 	.word	0x00089200

080013a8 <main>:
{
 80013a8:	b508      	push	{r3, lr}
  HAL_Init();
 80013aa:	f000 fdf3 	bl	8001f94 <HAL_Init>
  SystemClock_Config();
 80013ae:	f7ff ff65 	bl	800127c <SystemClock_Config>
  PeriphCommonClock_Config();
 80013b2:	f7ff ffcb 	bl	800134c <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80013b6:	f7ff fdb9 	bl	8000f2c <MX_GPIO_Init>
  MX_ADC1_Init();
 80013ba:	f7ff fb6f 	bl	8000a9c <MX_ADC1_Init>
  MX_ADC2_Init();
 80013be:	f7ff fbb7 	bl	8000b30 <MX_ADC2_Init>
  MX_ADC3_Init();
 80013c2:	f7ff fbf7 	bl	8000bb4 <MX_ADC3_Init>
  MX_I2C4_Init();
 80013c6:	f7ff fe61 	bl	800108c <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 80013ca:	f000 fc6b 	bl	8001ca4 <MX_LPUART1_UART_Init>
  MX_BDMA_Init();
 80013ce:	f7ff fcbd 	bl	8000d4c <MX_BDMA_Init>
  MX_SAI3_Init();
 80013d2:	f000 f901 	bl	80015d8 <MX_SAI3_Init>
  MX_DMA_Init();
 80013d6:	f7ff fcdd 	bl	8000d94 <MX_DMA_Init>
  MX_MDMA_Init();
 80013da:	f000 f81f 	bl	800141c <MX_MDMA_Init>
  MX_FDCAN1_Init();
 80013de:	f7ff fd05 	bl	8000dec <MX_FDCAN1_Init>
  MX_SPI4_Init();
 80013e2:	f000 f98d 	bl	8001700 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80013e6:	f000 fc97 	bl	8001d18 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013ea:	f000 f959 	bl	80016a0 <MX_SPI1_Init>
  MX_JPEG_Init();
 80013ee:	f7ff fec3 	bl	8001178 <MX_JPEG_Init>
  MX_QUADSPI_Init();
 80013f2:	f000 f82f 	bl	8001454 <MX_QUADSPI_Init>
  MX_TIM2_Init();
 80013f6:	f000 fc0b 	bl	8001c10 <MX_TIM2_Init>
  MX_FREERTOS_Init();
 80013fa:	f7ff fd81 	bl	8000f00 <MX_FREERTOS_Init>
  osKernelStart();
 80013fe:	f008 fb75 	bl	8009aec <osKernelStart>
  while (1)
 8001402:	e7fe      	b.n	8001402 <main+0x5a>

08001404 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8001404:	6802      	ldr	r2, [r0, #0]
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001408:	429a      	cmp	r2, r3
 800140a:	d101      	bne.n	8001410 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800140c:	f000 bdf0 	b.w	8001ff0 <HAL_IncTick>
}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40010000 	.word	0x40010000

08001418 <Error_Handler>:
 8001418:	b672      	cpsid	i
  while (1)
 800141a:	e7fe      	b.n	800141a <Error_Handler+0x2>

0800141c <MX_MDMA_Init>:
  */
void MX_MDMA_Init(void)
{

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_MDMA_Init+0x34>)
{
 800141e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001420:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001424:	2105      	movs	r1, #5
 8001426:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001430:	2200      	movs	r2, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001432:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800143e:	f001 fa21 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001442:	207a      	movs	r0, #122	; 0x7a

}
 8001444:	b003      	add	sp, #12
 8001446:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800144a:	f001 ba4d 	b.w	80028e8 <HAL_NVIC_EnableIRQ>
 800144e:	bf00      	nop
 8001450:	58024400 	.word	0x58024400

08001454 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001454:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.ClockPrescaler = 255;
 8001458:	23ff      	movs	r3, #255	; 0xff
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <MX_QUADSPI_Init+0x38>)
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
  hqspi.Init.FlashSize = 29;
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800145c:	211d      	movs	r1, #29
  hqspi.Init.ClockPrescaler = 255;
 800145e:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001462:	2201      	movs	r2, #1
 8001464:	2310      	movs	r3, #16
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 8001466:	6182      	str	r2, [r0, #24]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001468:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800146c:	2300      	movs	r3, #0
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 800146e:	2280      	movs	r2, #128	; 0x80
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001470:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001474:	e9c0 2307 	strd	r2, r3, [r0, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001478:	f004 fa14 	bl	80058a4 <HAL_QSPI_Init>
 800147c:	b118      	cbz	r0, 8001486 <MX_QUADSPI_Init+0x32>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800147e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001482:	f7ff bfc9 	b.w	8001418 <Error_Handler>
}
 8001486:	bd08      	pop	{r3, pc}
 8001488:	240008c0 	.word	0x240008c0
 800148c:	52005000 	.word	0x52005000

08001490 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b0b9      	sub	sp, #228	; 0xe4
 8001494:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	2214      	movs	r2, #20
 8001498:	2100      	movs	r1, #0
 800149a:	a804      	add	r0, sp, #16
 800149c:	f014 fe78 	bl	8016190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	22bc      	movs	r2, #188	; 0xbc
 80014a2:	2100      	movs	r1, #0
 80014a4:	a809      	add	r0, sp, #36	; 0x24
 80014a6:	f014 fe73 	bl	8016190 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80014aa:	6822      	ldr	r2, [r4, #0]
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_QSPI_MspInit+0xe4>)
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d15e      	bne.n	8001570 <HAL_QSPI_MspInit+0xe0>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014b8:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ba:	f005 f955 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	b108      	cbz	r0, 80014c4 <HAL_QSPI_MspInit+0x34>
    {
      Error_Handler();
 80014c0:	f7ff ffaa 	bl	8001418 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <HAL_QSPI_MspInit+0xe8>)
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2500      	movs	r5, #0
 80014ca:	2403      	movs	r4, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014d0:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	a904      	add	r1, sp, #16
 80014d4:	4829      	ldr	r0, [pc, #164]	; (800157c <HAL_QSPI_MspInit+0xec>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80014de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80014e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014ee:	f042 0202 	orr.w	r2, r2, #2
 80014f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014fa:	f002 0202 	and.w	r2, r2, #2
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001506:	f042 0210 	orr.w	r2, r2, #16
 800150a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800150e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001512:	f002 0210 	and.w	r2, r2, #16
 8001516:	9202      	str	r2, [sp, #8]
 8001518:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800151e:	f042 0204 	orr.w	r2, r2, #4
 8001522:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800152a:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	e9cd 5406 	strd	r5, r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f003 f8d3 	bl	80046e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001542:	f44f 63f0 	mov.w	r3, #1920	; 0x780
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001546:	a904      	add	r1, sp, #16
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <HAL_QSPI_MspInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800154e:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	e9cd 5406 	strd	r5, r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001554:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f003 f8c7 	bl	80046e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800155a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	a904      	add	r1, sp, #16
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <HAL_QSPI_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001562:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f003 f8bc 	bl	80046e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001570:	b039      	add	sp, #228	; 0xe4
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	52005000 	.word	0x52005000
 8001578:	58024400 	.word	0x58024400
 800157c:	58020400 	.word	0x58020400
 8001580:	58021000 	.word	0x58021000
 8001584:	58020800 	.word	0x58020800

08001588 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
 8001588:	6802      	ldr	r2, [r0, #0]
{
 800158a:	b508      	push	{r3, lr}
  if(qspiHandle->Instance==QUADSPI)
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_QSPI_MspDeInit+0x3c>)
 800158e:	429a      	cmp	r2, r3
 8001590:	d116      	bne.n	80015c0 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001592:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HAL_QSPI_MspDeInit+0x40>)
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8001594:	2104      	movs	r1, #4
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <HAL_QSPI_MspDeInit+0x44>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001598:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800159c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80015a4:	f003 f98c 	bl	80048c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10);
 80015a8:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_QSPI_MspDeInit+0x48>)
 80015ae:	f003 f987 	bl	80048c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80015b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <HAL_QSPI_MspDeInit+0x4c>)

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80015b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80015bc:	f003 b980 	b.w	80048c0 <HAL_GPIO_DeInit>
}
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop
 80015c4:	52005000 	.word	0x52005000
 80015c8:	58024400 	.word	0x58024400
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58020800 	.word	0x58020800

080015d8 <MX_SAI3_Init>:

SAI_HandleTypeDef hsai_BlockA3;

/* SAI3 init function */
void MX_SAI3_Init(void)
{
 80015d8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI3_Init 1 */

  /* USER CODE END SAI3_Init 1 */

  hsai_BlockA3.Instance = SAI3_Block_A;
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <MX_SAI3_Init+0x5c>)
  hsai_BlockA3.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA3.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA3.Init.DataSize = SAI_DATASIZE_8;
 80015dc:	2240      	movs	r2, #64	; 0x40
  hsai_BlockA3.Instance = SAI3_Block_A;
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_SAI3_Init+0x60>)
  hsai_BlockA3.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA3.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA3.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA3.Init.PdmInit.Activation = DISABLE;
  hsai_BlockA3.Init.PdmInit.MicPairsNbr = 1;
  hsai_BlockA3.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80015e0:	f44f 7180 	mov.w	r1, #256	; 0x100
  hsai_BlockA3.Instance = SAI3_Block_A;
 80015e4:	6003      	str	r3, [r0, #0]
  hsai_BlockA3.Init.Protocol = SAI_FREE_PROTOCOL;
 80015e6:	2300      	movs	r3, #0
  hsai_BlockA3.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80015e8:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
  hsai_BlockA3.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <MX_SAI3_Init+0x64>)
  hsai_BlockA3.Init.Protocol = SAI_FREE_PROTOCOL;
 80015ee:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockA3.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80015f0:	6202      	str	r2, [r0, #32]
  hsai_BlockA3.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80015f2:	2201      	movs	r2, #1
  hsai_BlockA3.Init.AudioMode = SAI_MODEMASTER_TX;
 80015f4:	6043      	str	r3, [r0, #4]
  hsai_BlockA3.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80015f6:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA3.Init.Synchro = SAI_ASYNCHRONOUS;
 80015f8:	6083      	str	r3, [r0, #8]
  hsai_BlockA3.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80015fa:	61c3      	str	r3, [r0, #28]
  hsai_BlockA3.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80015fc:	60c3      	str	r3, [r0, #12]
  hsai_BlockA3.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80015fe:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockA3.Init.PdmInit.Activation = DISABLE;
 8001600:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockA3.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  hsai_BlockA3.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
  hsai_BlockA3.SlotInit.FirstBitOffset = 0;
  hsai_BlockA3.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockA3.SlotInit.SlotNumber = 1;
  hsai_BlockA3.SlotInit.SlotActive = 0x00000000;
 8001604:	6743      	str	r3, [r0, #116]	; 0x74
  hsai_BlockA3.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001606:	e9c0 210f 	strd	r2, r1, [r0, #60]	; 0x3c
  hsai_BlockA3.FrameInit.FrameLength = 8;
 800160a:	2108      	movs	r1, #8
  hsai_BlockA3.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800160c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hsai_BlockA3.Init.CompandingMode = SAI_NOCOMPANDING;
 8001610:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hsai_BlockA3.FrameInit.ActiveFrameLength = 1;
 8001614:	e9c0 1215 	strd	r1, r2, [r0, #84]	; 0x54
  hsai_BlockA3.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001618:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hsai_BlockA3.SlotInit.FirstBitOffset = 0;
 800161c:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
  hsai_BlockA3.SlotInit.SlotNumber = 1;
 8001620:	e9c0 321b 	strd	r3, r2, [r0, #108]	; 0x6c
  if (HAL_SAI_Init(&hsai_BlockA3) != HAL_OK)
 8001624:	f006 f8d0 	bl	80077c8 <HAL_SAI_Init>
 8001628:	b118      	cbz	r0, 8001632 <MX_SAI3_Init+0x5a>

  /* USER CODE BEGIN SAI3_Init 2 */

  /* USER CODE END SAI3_Init 2 */

}
 800162a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800162e:	f7ff bef3 	b.w	8001418 <Error_Handler>
}
 8001632:	bd08      	pop	{r3, pc}
 8001634:	24000910 	.word	0x24000910
 8001638:	40016004 	.word	0x40016004
 800163c:	0002ee00 	.word	0x0002ee00

08001640 <HAL_SAI_MspInit>:
static uint32_t SAI3_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001640:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI3 */
    if(saiHandle->Instance==SAI3_Block_A)
 8001642:	6802      	ldr	r2, [r0, #0]
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_SAI_MspInit+0x50>)
 8001646:	429a      	cmp	r2, r3
 8001648:	d11e      	bne.n	8001688 <HAL_SAI_MspInit+0x48>
    {
    /* SAI3 clock enable */
    if (SAI3_client == 0)
 800164a:	4812      	ldr	r0, [pc, #72]	; (8001694 <HAL_SAI_MspInit+0x54>)
 800164c:	6803      	ldr	r3, [r0, #0]
 800164e:	b963      	cbnz	r3, 800166a <HAL_SAI_MspInit+0x2a>
    {
       __HAL_RCC_SAI3_CLK_ENABLE();
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_SAI_MspInit+0x58>)
 8001652:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8001656:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800165a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800165e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8001662:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8001666:	9200      	str	r2, [sp, #0]
 8001668:	9a00      	ldr	r2, [sp, #0]
    }
    SAI3_client ++;
 800166a:	3301      	adds	r3, #1
    PD0     ------> SAI3_SCK_A
    PD1     ------> SAI3_SD_A
    PD4     ------> SAI3_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2213      	movs	r2, #19
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166e:	a901      	add	r1, sp, #4
    SAI3_client ++;
 8001670:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <HAL_SAI_MspInit+0x5c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 8001680:	2306      	movs	r3, #6
 8001682:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f003 f830 	bl	80046e8 <HAL_GPIO_Init>

    }
}
 8001688:	b007      	add	sp, #28
 800168a:	f85d fb04 	ldr.w	pc, [sp], #4
 800168e:	bf00      	nop
 8001690:	40016004 	.word	0x40016004
 8001694:	2400090c 	.word	0x2400090c
 8001698:	58024400 	.word	0x58024400
 800169c:	58020c00 	.word	0x58020c00

080016a0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016a0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016a2:	4815      	ldr	r0, [pc, #84]	; (80016f8 <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <MX_SPI1_Init+0x5c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016aa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ae:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	2207      	movs	r2, #7
 80016b6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016be:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016ca:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 80016ce:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016d2:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016d6:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016da:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016de:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e6:	f006 fa81 	bl	8007bec <HAL_SPI_Init>
 80016ea:	b118      	cbz	r0, 80016f4 <MX_SPI1_Init+0x54>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80016f0:	f7ff be92 	b.w	8001418 <Error_Handler>
}
 80016f4:	bd08      	pop	{r3, pc}
 80016f6:	bf00      	nop
 80016f8:	24000a98 	.word	0x24000a98
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001700:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_SPI4_Init+0x58>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001704:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <MX_SPI4_Init+0x5c>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800170a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800170e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001712:	2300      	movs	r3, #0
 8001714:	2207      	movs	r2, #7
 8001716:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800171a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800171e:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001726:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800172a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 800172e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001732:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001736:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800173a:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800173e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001742:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001746:	f006 fa51 	bl	8007bec <HAL_SPI_Init>
 800174a:	b118      	cbz	r0, 8001754 <MX_SPI4_Init+0x54>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800174c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001750:	f7ff be62 	b.w	8001418 <Error_Handler>
}
 8001754:	bd08      	pop	{r3, pc}
 8001756:	bf00      	nop
 8001758:	24000b20 	.word	0x24000b20
 800175c:	40013400 	.word	0x40013400

08001760 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b0b9      	sub	sp, #228	; 0xe4
 8001764:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	2214      	movs	r2, #20
 8001768:	2100      	movs	r1, #0
 800176a:	a804      	add	r0, sp, #16
 800176c:	f014 fd10 	bl	8016190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001770:	22bc      	movs	r2, #188	; 0xbc
 8001772:	2100      	movs	r1, #0
 8001774:	a809      	add	r0, sp, #36	; 0x24
 8001776:	f014 fd0b 	bl	8016190 <memset>
  if(spiHandle->Instance==SPI1)
 800177a:	6833      	ldr	r3, [r6, #0]
 800177c:	4a4f      	ldr	r2, [pc, #316]	; (80018bc <HAL_SPI_MspInit+0x15c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d125      	bne.n	80017ce <HAL_SPI_MspInit+0x6e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001782:	4b4f      	ldr	r3, [pc, #316]	; (80018c0 <HAL_SPI_MspInit+0x160>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	a904      	add	r1, sp, #16
 800178a:	484e      	ldr	r0, [pc, #312]	; (80018c4 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001790:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001794:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001798:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800179c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017a0:	9200      	str	r2, [sp, #0]
 80017a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	e9cd e304 	strd	lr, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c2:	2305      	movs	r3, #5
 80017c4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f002 ff8f 	bl	80046e8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80017ca:	b039      	add	sp, #228	; 0xe4
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI4)
 80017ce:	4a3e      	ldr	r2, [pc, #248]	; (80018c8 <HAL_SPI_MspInit+0x168>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d1fa      	bne.n	80017ca <HAL_SPI_MspInit+0x6a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80017da:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f004 ffc4 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	b108      	cbz	r0, 80017e6 <HAL_SPI_MspInit+0x86>
      Error_Handler();
 80017e2:	f7ff fe19 	bl	8001418 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ec:	4837      	ldr	r0, [pc, #220]	; (80018cc <HAL_SPI_MspInit+0x16c>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017ee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f2:	a904      	add	r1, sp, #16
    hdma_spi4_rx.Instance = DMA1_Stream1;
 80017f4:	4c36      	ldr	r4, [pc, #216]	; (80018d0 <HAL_SPI_MspInit+0x170>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80017fe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001802:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001806:	9202      	str	r2, [sp, #8]
 8001808:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800180e:	f042 0210 	orr.w	r2, r2, #16
 8001812:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	9303      	str	r3, [sp, #12]
 8001820:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001826:	e9cd 3704 	strd	r3, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800182a:	2305      	movs	r3, #5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	e9cd 5506 	strd	r5, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001830:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001832:	f002 ff59 	bl	80046e8 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001836:	2353      	movs	r3, #83	; 0x53
 8001838:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80018dc <HAL_SPI_MspInit+0x17c>
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800183c:	4620      	mov	r0, r4
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800183e:	6225      	str	r5, [r4, #32]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001840:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001848:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800184c:	2304      	movs	r3, #4
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184e:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001852:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_spi4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8001856:	e9c4 3709 	strd	r3, r7, [r4, #36]	; 0x24
    hdma_spi4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800185a:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800185e:	f001 fa07 	bl	8002c70 <HAL_DMA_Init>
 8001862:	b108      	cbz	r0, 8001868 <HAL_SPI_MspInit+0x108>
      Error_Handler();
 8001864:	f7ff fdd8 	bl	8001418 <Error_Handler>
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_SPI_MspInit+0x174>)
 800186a:	2354      	movs	r3, #84	; 0x54
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800186c:	67f4      	str	r4, [r6, #124]	; 0x7c
    hdma_spi4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800186e:	2004      	movs	r0, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001870:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	2140      	movs	r1, #64	; 0x40
    hdma_spi4_tx.Instance = DMA1_Stream2;
 8001874:	4c18      	ldr	r4, [pc, #96]	; (80018d8 <HAL_SPI_MspInit+0x178>)
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001876:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187a:	2300      	movs	r3, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800187c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001880:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8001884:	2202      	movs	r2, #2
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001886:	6223      	str	r3, [r4, #32]
    hdma_spi4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8001888:	e9c4 0209 	strd	r0, r2, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800188c:	4620      	mov	r0, r4
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001892:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001896:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800189a:	f001 f9e9 	bl	8002c70 <HAL_DMA_Init>
 800189e:	b108      	cbz	r0, 80018a4 <HAL_SPI_MspInit+0x144>
      Error_Handler();
 80018a0:	f7ff fdba 	bl	8001418 <Error_Handler>
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2105      	movs	r1, #5
 80018a8:	2054      	movs	r0, #84	; 0x54
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80018aa:	67b4      	str	r4, [r6, #120]	; 0x78
 80018ac:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80018ae:	f000 ffe9 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80018b2:	2054      	movs	r0, #84	; 0x54
 80018b4:	f001 f818 	bl	80028e8 <HAL_NVIC_EnableIRQ>
}
 80018b8:	e787      	b.n	80017ca <HAL_SPI_MspInit+0x6a>
 80018ba:	bf00      	nop
 80018bc:	40013000 	.word	0x40013000
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58020000 	.word	0x58020000
 80018c8:	40013400 	.word	0x40013400
 80018cc:	58021000 	.word	0x58021000
 80018d0:	240009a8 	.word	0x240009a8
 80018d4:	40020040 	.word	0x40020040
 80018d8:	24000a20 	.word	0x24000a20
 80018dc:	40020028 	.word	0x40020028

080018e0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI1)
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_SPI_MspDeInit+0x5c>)
 80018e4:	4293      	cmp	r3, r2
{
 80018e6:	b510      	push	{r4, lr}
 80018e8:	4604      	mov	r4, r0
  if(spiHandle->Instance==SPI1)
 80018ea:	d10c      	bne.n	8001906 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_SPI_MspDeInit+0x60>)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80018ee:	21e0      	movs	r1, #224	; 0xe0
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <HAL_SPI_MspDeInit+0x64>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 80018f2:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 80018f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }
}
 80018fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_SPI1_CLK_DISABLE();
 80018fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001902:	f002 bfdd 	b.w	80048c0 <HAL_GPIO_DeInit>
  else if(spiHandle->Instance==SPI4)
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_SPI_MspDeInit+0x68>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d116      	bne.n	800193a <HAL_SPI_MspDeInit+0x5a>
    __HAL_RCC_SPI4_CLK_DISABLE();
 800190c:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_SPI_MspDeInit+0x60>)
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14);
 800190e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <HAL_SPI_MspDeInit+0x6c>)
    __HAL_RCC_SPI4_CLK_DISABLE();
 8001914:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8001918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800191c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14);
 8001920:	f002 ffce 	bl	80048c0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8001924:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001926:	f001 fb65 	bl	8002ff4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800192a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800192c:	f001 fb62 	bl	8002ff4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 8001930:	2054      	movs	r0, #84	; 0x54
}
 8001932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 8001936:	f000 bfe5 	b.w	8002904 <HAL_NVIC_DisableIRQ>
}
 800193a:	bd10      	pop	{r4, pc}
 800193c:	40013000 	.word	0x40013000
 8001940:	58024400 	.word	0x58024400
 8001944:	58020000 	.word	0x58020000
 8001948:	40013400 	.word	0x40013400
 800194c:	58021000 	.word	0x58021000

08001950 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_MspInit+0x2c>)
{
 8001952:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001954:	210f      	movs	r1, #15
 8001956:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800195e:	f042 0202 	orr.w	r2, r2, #2
 8001962:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001974:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001976:	f000 bf85 	b.w	8002884 <HAL_NVIC_SetPriority>
 800197a:	bf00      	nop
 800197c:	58024400 	.word	0x58024400

08001980 <HAL_InitTick>:
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001980:	280f      	cmp	r0, #15
{
 8001982:	b510      	push	{r4, lr}
 8001984:	4604      	mov	r4, r0
 8001986:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001988:	d902      	bls.n	8001990 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800198a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800198c:	b00a      	add	sp, #40	; 0x28
 800198e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001990:	4601      	mov	r1, r0
 8001992:	2200      	movs	r2, #0
 8001994:	2019      	movs	r0, #25
 8001996:	f000 ff75 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800199a:	2019      	movs	r0, #25
 800199c:	f000 ffa4 	bl	80028e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_InitTick+0x7c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a2:	4669      	mov	r1, sp
 80019a4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80019a6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_InitTick+0x80>)
  htim1.Instance = TIM1;
 80019aa:	4c16      	ldr	r4, [pc, #88]	; (8001a04 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80019b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019c4:	f004 fdb6 	bl	8006534 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019c8:	f004 fda2 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_InitTick+0x88>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019ce:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 80019d0:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80019d6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_InitTick+0x8c>)
 80019da:	fbb0 f0f3 	udiv	r0, r0, r3
 80019de:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 80019e0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80019e2:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019e4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80019e6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019ea:	f006 fff5 	bl	80089d8 <HAL_TIM_Base_Init>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d1cb      	bne.n	800198a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim1);
 80019f2:	4620      	mov	r0, r4
 80019f4:	f006 fe98 	bl	8008728 <HAL_TIM_Base_Start_IT>
 80019f8:	e7c8      	b.n	800198c <HAL_InitTick+0xc>
 80019fa:	bf00      	nop
 80019fc:	2400000c 	.word	0x2400000c
 8001a00:	58024400 	.word	0x58024400
 8001a04:	24000ba8 	.word	0x24000ba8
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	000f4240 	.word	0x000f4240

08001a10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler>

08001a12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler>

08001a14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler>

08001a16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler>

08001a18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler>

08001a1a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	4770      	bx	lr

08001a1c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a1c:	4801      	ldr	r0, [pc, #4]	; (8001a24 <DMA1_Stream0_IRQHandler+0x8>)
 8001a1e:	f001 bf39 	b.w	8003894 <HAL_DMA_IRQHandler>
 8001a22:	bf00      	nop
 8001a24:	24000d34 	.word	0x24000d34

08001a28 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001a28:	4801      	ldr	r0, [pc, #4]	; (8001a30 <DMA1_Stream1_IRQHandler+0x8>)
 8001a2a:	f001 bf33 	b.w	8003894 <HAL_DMA_IRQHandler>
 8001a2e:	bf00      	nop
 8001a30:	240009a8 	.word	0x240009a8

08001a34 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001a34:	4801      	ldr	r0, [pc, #4]	; (8001a3c <DMA1_Stream2_IRQHandler+0x8>)
 8001a36:	f001 bf2d 	b.w	8003894 <HAL_DMA_IRQHandler>
 8001a3a:	bf00      	nop
 8001a3c:	24000a20 	.word	0x24000a20

08001a40 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a40:	4801      	ldr	r0, [pc, #4]	; (8001a48 <TIM1_UP_IRQHandler+0x8>)
 8001a42:	f006 beb3 	b.w	80087ac <HAL_TIM_IRQHandler>
 8001a46:	bf00      	nop
 8001a48:	24000ba8 	.word	0x24000ba8

08001a4c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a4c:	4801      	ldr	r0, [pc, #4]	; (8001a54 <USART2_IRQHandler+0x8>)
 8001a4e:	f007 b97d 	b.w	8008d4c <HAL_UART_IRQHandler>
 8001a52:	bf00      	nop
 8001a54:	24000e3c 	.word	0x24000e3c

08001a58 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a58:	4801      	ldr	r0, [pc, #4]	; (8001a60 <SPI4_IRQHandler+0x8>)
 8001a5a:	f006 bd3b 	b.w	80084d4 <HAL_SPI_IRQHandler>
 8001a5e:	bf00      	nop
 8001a60:	24000b20 	.word	0x24000b20

08001a64 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MDMA_IRQHandler+0x14>)
{
 8001a66:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a68:	f003 fd68 	bl	800553c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a72:	f003 bd63 	b.w	800553c <HAL_MDMA_IRQHandler>
 8001a76:	bf00      	nop
 8001a78:	240007e8 	.word	0x240007e8
 8001a7c:	24000854 	.word	0x24000854

08001a80 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001a80:	4801      	ldr	r0, [pc, #4]	; (8001a88 <BDMA_Channel0_IRQHandler+0x8>)
 8001a82:	f001 bf07 	b.w	8003894 <HAL_DMA_IRQHandler>
 8001a86:	bf00      	nop
 8001a88:	24000c44 	.word	0x24000c44

08001a8c <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <BDMA_Channel1_IRQHandler+0x8>)
 8001a8e:	f001 bf01 	b.w	8003894 <HAL_DMA_IRQHandler>
 8001a92:	bf00      	nop
 8001a94:	24000cbc 	.word	0x24000cbc

08001a98 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a98:	2001      	movs	r0, #1
 8001a9a:	4770      	bx	lr

08001a9c <_kill>:

int _kill(int pid, int sig)
{
 8001a9c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a9e:	f014 fa2b 	bl	8015ef8 <__errno>
 8001aa2:	2316      	movs	r3, #22
 8001aa4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aaa:	bd08      	pop	{r3, pc}

08001aac <_exit>:

void _exit (int status)
{
 8001aac:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001aae:	f014 fa23 	bl	8015ef8 <__errno>
 8001ab2:	2316      	movs	r3, #22
 8001ab4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ab6:	e7fe      	b.n	8001ab6 <_exit+0xa>

08001ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	460d      	mov	r5, r1
 8001abc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	460e      	mov	r6, r1
 8001ac0:	1b73      	subs	r3, r6, r5
 8001ac2:	429c      	cmp	r4, r3
 8001ac4:	dc01      	bgt.n	8001aca <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001aca:	f3af 8000 	nop.w
 8001ace:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	e7f5      	b.n	8001ac0 <_read+0x8>

08001ad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	460e      	mov	r6, r1
 8001adc:	1b73      	subs	r3, r6, r5
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	dc01      	bgt.n	8001ae6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001ae6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001aea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	e7f5      	b.n	8001adc <_write+0x8>

08001af0 <_close>:

int _close(int file)
{
	return -1;
}
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af4:	4770      	bx	lr

08001af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001afa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001afc:	604b      	str	r3, [r1, #4]
}
 8001afe:	4770      	bx	lr

08001b00 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b00:	2001      	movs	r0, #1
 8001b02:	4770      	bx	lr

08001b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b04:	2000      	movs	r0, #0
 8001b06:	4770      	bx	lr

08001b08 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <_sbrk+0x30>)
{
 8001b0a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b0c:	6811      	ldr	r1, [r2, #0]
{
 8001b0e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b10:	b909      	cbnz	r1, 8001b16 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b12:	490a      	ldr	r1, [pc, #40]	; (8001b3c <_sbrk+0x34>)
 8001b14:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	6810      	ldr	r0, [r2, #0]
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <_sbrk+0x38>)
 8001b1a:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <_sbrk+0x3c>)
 8001b1c:	4403      	add	r3, r0
 8001b1e:	1b09      	subs	r1, r1, r4
 8001b20:	428b      	cmp	r3, r1
 8001b22:	d906      	bls.n	8001b32 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b24:	f014 f9e8 	bl	8015ef8 <__errno>
 8001b28:	230c      	movs	r3, #12
 8001b2a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b30:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b32:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b34:	e7fc      	b.n	8001b30 <_sbrk+0x28>
 8001b36:	bf00      	nop
 8001b38:	24000bf4 	.word	0x24000bf4
 8001b3c:	24046048 	.word	0x24046048
 8001b40:	24080000 	.word	0x24080000
 8001b44:	00000400 	.word	0x00000400

08001b48 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <SystemInit+0xa0>)
 8001b4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <SystemInit+0xa4>)
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d805      	bhi.n	8001b6e <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	f023 030f 	bic.w	r3, r3, #15
 8001b68:	f043 0307 	orr.w	r3, r3, #7
 8001b6c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <SystemInit+0xa8>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <SystemInit+0xac>)
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b82:	491a      	ldr	r1, [pc, #104]	; (8001bec <SystemInit+0xa4>)
  RCC->CR &= 0xEAF6ED7FU;
 8001b84:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b86:	680a      	ldr	r2, [r1, #0]
 8001b88:	0712      	lsls	r2, r2, #28
 8001b8a:	d505      	bpl.n	8001b98 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b8c:	680a      	ldr	r2, [r1, #0]
 8001b8e:	f022 020f 	bic.w	r2, r2, #15
 8001b92:	f042 0207 	orr.w	r2, r2, #7
 8001b96:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b98:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b9a:	4917      	ldr	r1, [pc, #92]	; (8001bf8 <SystemInit+0xb0>)
  RCC->D1CFGR = 0x00000000;
 8001b9c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001b9e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001ba0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001ba2:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ba4:	4915      	ldr	r1, [pc, #84]	; (8001bfc <SystemInit+0xb4>)
 8001ba6:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ba8:	4915      	ldr	r1, [pc, #84]	; (8001c00 <SystemInit+0xb8>)
 8001baa:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bae:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bb2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001bbc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bbe:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <SystemInit+0xbc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bcc:	d203      	bcs.n	8001bd6 <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <SystemInit+0xc0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <SystemInit+0xc4>)
 8001bd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bdc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be2:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <SystemInit+0xa0>)
 8001be4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00
 8001bec:	52002000 	.word	0x52002000
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bf8:	02020200 	.word	0x02020200
 8001bfc:	01ff0000 	.word	0x01ff0000
 8001c00:	01010280 	.word	0x01010280
 8001c04:	5c001000 	.word	0x5c001000
 8001c08:	51008000 	.word	0x51008000
 8001c0c:	52004000 	.word	0x52004000

08001c10 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c10:	b510      	push	{r4, lr}
 8001c12:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c14:	2214      	movs	r2, #20
 8001c16:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c1a:	a803      	add	r0, sp, #12
 8001c1c:	f014 fab8 	bl	8016190 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c20:	4814      	ldr	r0, [pc, #80]	; (8001c74 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 240;
 8001c22:	23f0      	movs	r3, #240	; 0xf0
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	9402      	str	r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	6084      	str	r4, [r0, #8]
  htim2.Init.Prescaler = 240;
 8001c2c:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 4294967295;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c34:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c38:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3a:	e9cd 4400 	strd	r4, r4, [sp]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c3e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c40:	f006 feca 	bl	80089d8 <HAL_TIM_Base_Init>
 8001c44:	b108      	cbz	r0, 8001c4a <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 8001c46:	f7ff fbe7 	bl	8001418 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001c4a:	a903      	add	r1, sp, #12
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <MX_TIM2_Init+0x64>)
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001c4e:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001c52:	f006 ff8d 	bl	8008b70 <HAL_TIM_SlaveConfigSynchro>
 8001c56:	b108      	cbz	r0, 8001c5c <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f7ff fbde 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5e:	4669      	mov	r1, sp
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c66:	f006 ffab 	bl	8008bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	b108      	cbz	r0, 8001c70 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f7ff fbd4 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c70:	b008      	add	sp, #32
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	24000bf8 	.word	0x24000bf8

08001c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001c78:	6803      	ldr	r3, [r0, #0]
{
 8001c7a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c80:	d10c      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_TIM_Base_MspInit+0x28>)
 8001c84:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c9c:	b002      	add	sp, #8
 8001c9e:	4770      	bx	lr
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ca6:	481a      	ldr	r0, [pc, #104]	; (8001d10 <MX_LPUART1_UART_Init+0x6c>)
  hlpuart1.Init.BaudRate = 115200;
 8001ca8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <MX_LPUART1_UART_Init+0x70>)
 8001cae:	e9c0 2300 	strd	r2, r3, [r0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	220c      	movs	r2, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001cb6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbc:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8001cce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cd2:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cd4:	f007 fdb2 	bl	800983c <HAL_UART_Init>
 8001cd8:	b108      	cbz	r0, 8001cde <MX_LPUART1_UART_Init+0x3a>
  {
    Error_Handler();
 8001cda:	f7ff fb9d 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8001cde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ce2:	480b      	ldr	r0, [pc, #44]	; (8001d10 <MX_LPUART1_UART_Init+0x6c>)
 8001ce4:	f007 fe91 	bl	8009a0a <HAL_UARTEx_SetTxFifoThreshold>
 8001ce8:	b108      	cbz	r0, 8001cee <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001cea:	f7ff fb95 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8001cee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_LPUART1_UART_Init+0x6c>)
 8001cf4:	f007 fead 	bl	8009a52 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf8:	b108      	cbz	r0, 8001cfe <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001cfa:	f7ff fb8d 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_LPUART1_UART_Init+0x6c>)
 8001d00:	f007 fe45 	bl	800998e <HAL_UARTEx_EnableFifoMode>
 8001d04:	b118      	cbz	r0, 8001d0e <MX_LPUART1_UART_Init+0x6a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d0a:	f7ff bb85 	b.w	8001418 <Error_Handler>
}
 8001d0e:	bd08      	pop	{r3, pc}
 8001d10:	24000dac 	.word	0x24000dac
 8001d14:	58000c00 	.word	0x58000c00

08001d18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d18:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d1a:	4816      	ldr	r0, [pc, #88]	; (8001d74 <MX_USART2_UART_Init+0x5c>)
  huart2.Init.BaudRate = 115200;
 8001d1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <MX_USART2_UART_Init+0x60>)
 8001d22:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2e:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d30:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d34:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d38:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3c:	f007 fd7e 	bl	800983c <HAL_UART_Init>
 8001d40:	b108      	cbz	r0, 8001d46 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8001d42:	f7ff fb69 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <MX_USART2_UART_Init+0x5c>)
 8001d4a:	f007 fe5e 	bl	8009a0a <HAL_UARTEx_SetTxFifoThreshold>
 8001d4e:	b108      	cbz	r0, 8001d54 <MX_USART2_UART_Init+0x3c>
  {
    Error_Handler();
 8001d50:	f7ff fb62 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d54:	2100      	movs	r1, #0
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <MX_USART2_UART_Init+0x5c>)
 8001d58:	f007 fe7b 	bl	8009a52 <HAL_UARTEx_SetRxFifoThreshold>
 8001d5c:	b108      	cbz	r0, 8001d62 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001d5e:	f7ff fb5b 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <MX_USART2_UART_Init+0x5c>)
 8001d64:	f007 fe36 	bl	80099d4 <HAL_UARTEx_DisableFifoMode>
 8001d68:	b118      	cbz	r0, 8001d72 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d6e:	f7ff bb53 	b.w	8001418 <Error_Handler>
}
 8001d72:	bd08      	pop	{r3, pc}
 8001d74:	24000e3c 	.word	0x24000e3c
 8001d78:	40004400 	.word	0x40004400

08001d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	b0b8      	sub	sp, #224	; 0xe0
 8001d80:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	2214      	movs	r2, #20
 8001d84:	2100      	movs	r1, #0
 8001d86:	a804      	add	r0, sp, #16
 8001d88:	f014 fa02 	bl	8016190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d8c:	22bc      	movs	r2, #188	; 0xbc
 8001d8e:	2100      	movs	r1, #0
 8001d90:	a809      	add	r0, sp, #36	; 0x24
 8001d92:	f014 f9fd 	bl	8016190 <memset>
  if(uartHandle->Instance==LPUART1)
 8001d96:	682b      	ldr	r3, [r5, #0]
 8001d98:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <HAL_UART_MspInit+0x198>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d15f      	bne.n	8001e5e <HAL_UART_MspInit+0xe2>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d9e:	2304      	movs	r3, #4
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da0:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001da2:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f004 fce0 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	b108      	cbz	r0, 8001dae <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001daa:	f7ff fb35 	bl	8001418 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001dae:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_UART_MspInit+0x19c>)
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	4859      	ldr	r0, [pc, #356]	; (8001f1c <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001db8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8001dbc:	4c58      	ldr	r4, [pc, #352]	; (8001f20 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001dbe:	f042 0208 	orr.w	r2, r2, #8
 8001dc2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001dc6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001dca:	f002 0208 	and.w	r2, r2, #8
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001df0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001df4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	e9cd 6606 	strd	r6, r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f002 fc75 	bl	80046e8 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8001dfe:	4849      	ldr	r0, [pc, #292]	; (8001f24 <HAL_UART_MspInit+0x1a8>)
 8001e00:	2309      	movs	r3, #9
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	6226      	str	r6, [r4, #32]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8001e04:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001e0c:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0e:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001e16:	e9c4 6606 	strd	r6, r6, [r4, #24]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001e1a:	f000 ff29 	bl	8002c70 <HAL_DMA_Init>
 8001e1e:	b108      	cbz	r0, 8001e24 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001e20:	f7ff fafa 	bl	8001418 <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = BDMA_Channel1;
    hdma_lpuart1_tx.Init.Request = BDMA_REQUEST_LPUART1_TX;
 8001e24:	230a      	movs	r3, #10
 8001e26:	f8df e114 	ldr.w	lr, [pc, #276]	; 8001f3c <HAL_UART_MspInit+0x1c0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001e2a:	67ec      	str	r4, [r5, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2c:	2240      	movs	r2, #64	; 0x40
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001e2e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_lpuart1_tx.Instance = BDMA_Channel1;
 8001e30:	4c3d      	ldr	r4, [pc, #244]	; (8001f28 <HAL_UART_MspInit+0x1ac>)
    hdma_lpuart1_tx.Init.Request = BDMA_REQUEST_LPUART1_TX;
 8001e32:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001e38:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e42:	6223      	str	r3, [r4, #32]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e44:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001e48:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001e4c:	f000 ff10 	bl	8002c70 <HAL_DMA_Init>
 8001e50:	b108      	cbz	r0, 8001e56 <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8001e52:	f7ff fae1 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001e56:	67ac      	str	r4, [r5, #120]	; 0x78
 8001e58:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e5a:	b038      	add	sp, #224	; 0xe0
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8001e5e:	4a33      	ldr	r2, [pc, #204]	; (8001f2c <HAL_UART_MspInit+0x1b0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d1fa      	bne.n	8001e5a <HAL_UART_MspInit+0xde>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e64:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e66:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e68:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6a:	f004 fc7d 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	b108      	cbz	r0, 8001e74 <HAL_UART_MspInit+0xf8>
      Error_Handler();
 8001e70:	f7ff fad2 	bl	8001418 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <HAL_UART_MspInit+0x19c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e78:	a904      	add	r1, sp, #16
 8001e7a:	482d      	ldr	r0, [pc, #180]	; (8001f30 <HAL_UART_MspInit+0x1b4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001e80:	4c2c      	ldr	r4, [pc, #176]	; (8001f34 <HAL_UART_MspInit+0x1b8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e86:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001e8a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001e8e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e92:	9202      	str	r2, [sp, #8]
 8001e94:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001e9a:	f042 0208 	orr.w	r2, r2, #8
 8001e9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2260      	movs	r2, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	9303      	str	r3, [sp, #12]
 8001eae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb6:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	e9cd 6606 	strd	r6, r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebe:	f002 fc13 	bl	80046e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001ec2:	232b      	movs	r3, #43	; 0x2b
 8001ec4:	491c      	ldr	r1, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0x1bc>)
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ec6:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eca:	f04f 0c04 	mov.w	ip, #4
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ece:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001ed0:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed8:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001edc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ee0:	e9c4 0307 	strd	r0, r3, [r4, #28]
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ee4:	2303      	movs	r3, #3
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ee6:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee8:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001eec:	e9c4 c309 	strd	ip, r3, [r4, #36]	; 0x24
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ef0:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ef4:	f000 febc 	bl	8002c70 <HAL_DMA_Init>
 8001ef8:	b108      	cbz	r0, 8001efe <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001efa:	f7ff fa8d 	bl	8001418 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2105      	movs	r1, #5
 8001f02:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f04:	67ec      	str	r4, [r5, #124]	; 0x7c
 8001f06:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f08:	f000 fcbc 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0c:	2026      	movs	r0, #38	; 0x26
 8001f0e:	f000 fceb 	bl	80028e8 <HAL_NVIC_EnableIRQ>
}
 8001f12:	e7a2      	b.n	8001e5a <HAL_UART_MspInit+0xde>
 8001f14:	58000c00 	.word	0x58000c00
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58020000 	.word	0x58020000
 8001f20:	24000c44 	.word	0x24000c44
 8001f24:	58025408 	.word	0x58025408
 8001f28:	24000cbc 	.word	0x24000cbc
 8001f2c:	40004400 	.word	0x40004400
 8001f30:	58020c00 	.word	0x58020c00
 8001f34:	24000d34 	.word	0x24000d34
 8001f38:	40020010 	.word	0x40020010
 8001f3c:	5802541c 	.word	0x5802541c

08001f40 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001f44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f46:	e003      	b.n	8001f50 <LoopCopyDataInit>

08001f48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f4e:	3104      	adds	r1, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f58:	d3f6      	bcc.n	8001f48 <CopyDataInit>
  ldr  r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f5c:	e002      	b.n	8001f64 <LoopFillZerobss>

08001f5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001f5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f60:	f842 3b04 	str.w	r3, [r2], #4

08001f64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f68:	d3f9      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f6a:	f7ff fded 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f014 f8bf 	bl	80160f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7ff fa19 	bl	80013a8 <main>
  bx  lr
 8001f76:	4770      	bx	lr
Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8001f78:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f7c:	0801e568 	.word	0x0801e568
  ldr  r0, =_sdata
 8001f80:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001f84:	24000290 	.word	0x24000290
  ldr  r2, =_sbss
 8001f88:	24000290 	.word	0x24000290
  ldr  r3, = _ebss
 8001f8c:	24046048 	.word	0x24046048

08001f90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC3_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f000 fc62 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f9c:	f004 f8be 	bl	800611c <HAL_RCC_GetSysClockFreq>
 8001fa0:	490f      	ldr	r1, [pc, #60]	; (8001fe0 <HAL_Init+0x4c>)
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_Init+0x50>)
 8001fa4:	698b      	ldr	r3, [r1, #24]
 8001fa6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb2:	698b      	ldr	r3, [r1, #24]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_Init+0x54>)
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa20 f303 	lsr.w	r3, r0, r3
 8001fc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_Init+0x58>)
 8001fc8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f7ff fcd8 	bl	8001980 <HAL_InitTick>
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	b918      	cbnz	r0, 8001fdc <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fcbc 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001fd8:	4620      	mov	r0, r4
 8001fda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fdc:	2401      	movs	r4, #1
 8001fde:	e7fb      	b.n	8001fd8 <HAL_Init+0x44>
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	0801a9d8 	.word	0x0801a9d8
 8001fe8:	24000004 	.word	0x24000004
 8001fec:	24000000 	.word	0x24000000

08001ff0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001ff0:	4a03      	ldr	r2, [pc, #12]	; (8002000 <HAL_IncTick+0x10>)
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_IncTick+0x14>)
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	24000ecc 	.word	0x24000ecc
 8002004:	24000008 	.word	0x24000008

08002008 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002008:	4b01      	ldr	r3, [pc, #4]	; (8002010 <HAL_GetTick+0x8>)
 800200a:	6818      	ldr	r0, [r3, #0]
}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	24000ecc 	.word	0x24000ecc

08002014 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002014:	4b01      	ldr	r3, [pc, #4]	; (800201c <HAL_GetREVID+0x8>)
 8002016:	6818      	ldr	r0, [r3, #0]
}
 8002018:	0c00      	lsrs	r0, r0, #16
 800201a:	4770      	bx	lr
 800201c:	5c001000 	.word	0x5c001000

08002020 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
}
 8002020:	4b01      	ldr	r3, [pc, #4]	; (8002028 <HAL_GetUIDw0+0x8>)
 8002022:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
 8002026:	4770      	bx	lr
 8002028:	1ff1e000 	.word	0x1ff1e000

0800202c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 800202e:	6853      	ldr	r3, [r2, #4]
 8002030:	ea23 0000 	bic.w	r0, r3, r0
 8002034:	4301      	orrs	r1, r0
 8002036:	6051      	str	r1, [r2, #4]
}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	58000400 	.word	0x58000400

08002040 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002040:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002042:	0dcc      	lsrs	r4, r1, #23
 8002044:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8002046:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800204a:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800204c:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8002050:	408d      	lsls	r5, r1
 8002052:	fa02 f101 	lsl.w	r1, r2, r1
 8002056:	5823      	ldr	r3, [r4, r0]
 8002058:	ea23 0305 	bic.w	r3, r3, r5
 800205c:	430b      	orrs	r3, r1
 800205e:	5023      	str	r3, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002060:	bd30      	pop	{r4, r5, pc}

08002062 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002062:	6880      	ldr	r0, [r0, #8]
}
 8002064:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002068:	4770      	bx	lr
	...

0800206c <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800206c:	2300      	movs	r3, #0
{
 800206e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8002070:	9301      	str	r3, [sp, #4]
{
 8002072:	4604      	mov	r4, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002074:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002078:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800207a:	2b01      	cmp	r3, #1
 800207c:	f000 81c5 	beq.w	800240a <HAL_ADC_ConfigChannel+0x39e>
 8002080:	2301      	movs	r3, #1
 8002082:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002086:	6800      	ldr	r0, [r0, #0]
 8002088:	f7ff ffeb 	bl	8002062 <LL_ADC_REG_IsConversionOngoing>
 800208c:	2800      	cmp	r0, #0
 800208e:	f040 81b7 	bne.w	8002400 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002092:	680a      	ldr	r2, [r1, #0]
 8002094:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8002098:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800209c:	2800      	cmp	r0, #0
 800209e:	d16c      	bne.n	800217a <HAL_ADC_ConfigChannel+0x10e>
 80020a0:	408b      	lsls	r3, r1
 80020a2:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 80020a4:	271f      	movs	r7, #31
 80020a6:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020a8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80020ac:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020ae:	686a      	ldr	r2, [r5, #4]
 80020b0:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 80020b2:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020b6:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020b8:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80020bc:	4097      	lsls	r7, r2
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80020c6:	ea23 0307 	bic.w	r3, r3, r7
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f846 300c 	str.w	r3, [r6, ip]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d0:	f7ff ffc7 	bl	8002062 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d4:	6827      	ldr	r7, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	ea53 0600 	orrs.w	r6, r3, r0
 80020e0:	d141      	bne.n	8002166 <HAL_ADC_ConfigChannel+0xfa>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020e2:	68aa      	ldr	r2, [r5, #8]
 80020e4:	4638      	mov	r0, r7
 80020e6:	6829      	ldr	r1, [r5, #0]
 80020e8:	f7ff ffaa 	bl	8002040 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020ec:	4bb7      	ldr	r3, [pc, #732]	; (80023cc <HAL_ADC_ConfigChannel+0x360>)
 80020ee:	696a      	ldr	r2, [r5, #20]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80020f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	68d9      	ldr	r1, [r3, #12]
 80020fe:	d145      	bne.n	800218c <HAL_ADC_ConfigChannel+0x120>
 8002100:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8002104:	0049      	lsls	r1, r1, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002106:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800210a:	fa02 f101 	lsl.w	r1, r2, r1
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800210e:	6828      	ldr	r0, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002110:	f1bc 0f04 	cmp.w	ip, #4
 8002114:	d042      	beq.n	800219c <HAL_ADC_ConfigChannel+0x130>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002116:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 800211a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800211e:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 8002122:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002126:	4302      	orrs	r2, r0
 8002128:	430a      	orrs	r2, r1
 800212a:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800212e:	6929      	ldr	r1, [r5, #16]
 8002130:	7e6a      	ldrb	r2, [r5, #25]
 8002132:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002134:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8002138:	bf0c      	ite	eq
 800213a:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 800213e:	2000      	movne	r0, #0
 8002140:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002144:	4302      	orrs	r2, r0
 8002146:	f847 2021 	str.w	r2, [r7, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800214a:	7e29      	ldrb	r1, [r5, #24]
 800214c:	692a      	ldr	r2, [r5, #16]
 800214e:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002150:	6918      	ldr	r0, [r3, #16]
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	bf08      	it	eq
 8002158:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 800215c:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8002160:	4096      	lsls	r6, r2
 8002162:	4306      	orrs	r6, r0
 8002164:	611e      	str	r6, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002166:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002168:	6883      	ldr	r3, [r0, #8]
 800216a:	07da      	lsls	r2, r3, #31
 800216c:	d53d      	bpl.n	80021ea <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002170:	2300      	movs	r3, #0
 8002172:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002176:	b003      	add	sp, #12
 8002178:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	fa92 f3a2 	rbit	r3, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800217e:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002182:	f003 001f 	and.w	r0, r3, #31
 8002186:	2301      	movs	r3, #1
 8002188:	4083      	lsls	r3, r0
 800218a:	e78a      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x36>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800218c:	f011 0f10 	tst.w	r1, #16
 8002190:	68d9      	ldr	r1, [r3, #12]
 8002192:	d0b5      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x94>
 8002194:	0849      	lsrs	r1, r1, #1
 8002196:	f001 0108 	and.w	r1, r1, #8
 800219a:	e7b4      	b.n	8002106 <HAL_ADC_ConfigChannel+0x9a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800219c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800219e:	0681      	lsls	r1, r0, #26
 80021a0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80021a4:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80021a8:	d103      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x146>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021b4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80021b8:	4291      	cmp	r1, r2
 80021ba:	d103      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x158>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021c2:	665a      	str	r2, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021c6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80021ca:	4291      	cmp	r1, r2
 80021cc:	d103      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x16a>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021d4:	669a      	str	r2, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021d8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80021dc:	4291      	cmp	r1, r2
 80021de:	d1c2      	bne.n	8002166 <HAL_ADC_ConfigChannel+0xfa>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80021e8:	e7bd      	b.n	8002166 <HAL_ADC_ConfigChannel+0xfa>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021ea:	68ef      	ldr	r7, [r5, #12]
 80021ec:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80021ee:	f007 0c18 	and.w	ip, r7, #24
 80021f2:	4a77      	ldr	r2, [pc, #476]	; (80023d0 <HAL_ADC_ConfigChannel+0x364>)
 80021f4:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 80021f8:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80021fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8002200:	ea21 0106 	bic.w	r1, r1, r6
 8002204:	401a      	ands	r2, r3
 8002206:	430a      	orrs	r2, r1
 8002208:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800220c:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <HAL_ADC_ConfigChannel+0x368>)
 800220e:	4297      	cmp	r7, r2
 8002210:	d146      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x234>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002212:	b9de      	cbnz	r6, 800224c <HAL_ADC_ConfigChannel+0x1e0>
 8002214:	0e9a      	lsrs	r2, r3, #26
 8002216:	2101      	movs	r1, #1
 8002218:	3201      	adds	r2, #1
 800221a:	f002 071f 	and.w	r7, r2, #31
 800221e:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002220:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002222:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002226:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222a:	d92a      	bls.n	8002282 <HAL_ADC_ConfigChannel+0x216>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800222c:	430a      	orrs	r2, r1
 800222e:	2e00      	cmp	r6, #0
 8002230:	f040 808d 	bne.w	800234e <HAL_ADC_ConfigChannel+0x2e2>
 8002234:	0e9e      	lsrs	r6, r3, #26
 8002236:	3601      	adds	r6, #1
 8002238:	f006 061f 	and.w	r6, r6, #31
 800223c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8002240:	391e      	subs	r1, #30
 8002242:	0509      	lsls	r1, r1, #20
 8002244:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002248:	4311      	orrs	r1, r2
 800224a:	e026      	b.n	800229a <HAL_ADC_ConfigChannel+0x22e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002250:	b132      	cbz	r2, 8002260 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	3201      	adds	r2, #1
 8002258:	f002 021f 	and.w	r2, r2, #31
 800225c:	2a09      	cmp	r2, #9
 800225e:	d864      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x2be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002264:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002268:	3201      	adds	r2, #1
 800226a:	0692      	lsls	r2, r2, #26
 800226c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002274:	fab1 f181 	clz	r1, r1
 8002278:	3101      	adds	r1, #1
 800227a:	f001 071f 	and.w	r7, r1, #31
 800227e:	2101      	movs	r1, #1
 8002280:	40b9      	lsls	r1, r7
 8002282:	430a      	orrs	r2, r1
 8002284:	2e00      	cmp	r6, #0
 8002286:	d14b      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2b4>
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002294:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002296:	ea42 0103 	orr.w	r1, r2, r3
 800229a:	68aa      	ldr	r2, [r5, #8]
 800229c:	f7ff fed0 	bl	8002040 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022a0:	6828      	ldr	r0, [r5, #0]
 80022a2:	2800      	cmp	r0, #0
 80022a4:	f6bf af63 	bge.w	800216e <HAL_ADC_ConfigChannel+0x102>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a8:	6821      	ldr	r1, [r4, #0]
 80022aa:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_ADC_ConfigChannel+0x36c>)
 80022ac:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_ADC_ConfigChannel+0x370>)
 80022ae:	4291      	cmp	r1, r2
 80022b0:	4d4b      	ldr	r5, [pc, #300]	; (80023e0 <HAL_ADC_ConfigChannel+0x374>)
 80022b2:	d003      	beq.n	80022bc <HAL_ADC_ConfigChannel+0x250>
 80022b4:	4e4b      	ldr	r6, [pc, #300]	; (80023e4 <HAL_ADC_ConfigChannel+0x378>)
 80022b6:	42a9      	cmp	r1, r5
 80022b8:	bf18      	it	ne
 80022ba:	4633      	movne	r3, r6
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022bc:	4291      	cmp	r1, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	d001      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x25a>
 80022c2:	42a9      	cmp	r1, r5
 80022c4:	d150      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2fc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c6:	4a44      	ldr	r2, [pc, #272]	; (80023d8 <HAL_ADC_ConfigChannel+0x36c>)
 80022c8:	6896      	ldr	r6, [r2, #8]
 80022ca:	68aa      	ldr	r2, [r5, #8]
 80022cc:	4332      	orrs	r2, r6
 80022ce:	43d2      	mvns	r2, r2
 80022d0:	f002 0201 	and.w	r2, r2, #1
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d073      	beq.n	80023c0 <HAL_ADC_ConfigChannel+0x354>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022d8:	4a43      	ldr	r2, [pc, #268]	; (80023e8 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022da:	f003 75e0 	and.w	r5, r3, #29360128	; 0x1c00000
 80022de:	4290      	cmp	r0, r2
 80022e0:	d145      	bne.n	800236e <HAL_ADC_ConfigChannel+0x302>
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	f53f af43 	bmi.w	800216e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <HAL_ADC_ConfigChannel+0x380>)
 80022ea:	4299      	cmp	r1, r3
 80022ec:	f47f af3f 	bne.w	800216e <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022f0:	f8d3 2308 	ldr.w	r2, [r3, #776]	; 0x308
 80022f4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80022f8:	432a      	orrs	r2, r5
 80022fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <HAL_ADC_ConfigChannel+0x384>)
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_ADC_ConfigChannel+0x388>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fbb3 f3f2 	udiv	r3, r3, r2
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8002310:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8002312:	9b01      	ldr	r3, [sp, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f43f af2a 	beq.w	800216e <HAL_ADC_ConfigChannel+0x102>
                wait_loop_index--;
 800231a:	9b01      	ldr	r3, [sp, #4]
 800231c:	3b01      	subs	r3, #1
 800231e:	e7f7      	b.n	8002310 <HAL_ADC_ConfigChannel+0x2a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	e7af      	b.n	800228a <HAL_ADC_ConfigChannel+0x21e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800232e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002332:	3201      	adds	r2, #1
 8002334:	0692      	lsls	r2, r2, #26
 8002336:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800233e:	fab1 f181 	clz	r1, r1
 8002342:	3101      	adds	r1, #1
 8002344:	f001 071f 	and.w	r7, r1, #31
 8002348:	2101      	movs	r1, #1
 800234a:	40b9      	lsls	r1, r7
 800234c:	e76e      	b.n	800222c <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002352:	fab1 f181 	clz	r1, r1
 8002356:	f06f 061d 	mvn.w	r6, #29
 800235a:	3101      	adds	r1, #1
 800235c:	f001 031f 	and.w	r3, r1, #31
 8002360:	2103      	movs	r1, #3
 8002362:	fb11 6103 	smlabb	r1, r1, r3, r6
 8002366:	e76c      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1d6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002368:	4a20      	ldr	r2, [pc, #128]	; (80023ec <HAL_ADC_ConfigChannel+0x380>)
 800236a:	6892      	ldr	r2, [r2, #8]
 800236c:	e7af      	b.n	80022ce <HAL_ADC_ConfigChannel+0x262>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_ADC_ConfigChannel+0x38c>)
 8002370:	4290      	cmp	r0, r2
 8002372:	d111      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x32c>
 8002374:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8002378:	f47f aef9 	bne.w	800216e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_ADC_ConfigChannel+0x380>)
 800237e:	4291      	cmp	r1, r2
 8002380:	f47f aef5 	bne.w	800216e <HAL_ADC_ConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002384:	4917      	ldr	r1, [pc, #92]	; (80023e4 <HAL_ADC_ConfigChannel+0x378>)
 8002386:	688a      	ldr	r2, [r1, #8]
 8002388:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800238c:	432a      	orrs	r2, r5
 800238e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002392:	608a      	str	r2, [r1, #8]
    tmp_hal_status = HAL_ERROR;
 8002394:	4618      	mov	r0, r3
 8002396:	e6eb      	b.n	8002170 <HAL_ADC_ConfigChannel+0x104>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_ADC_ConfigChannel+0x390>)
 800239a:	4290      	cmp	r0, r2
 800239c:	f47f aee7 	bne.w	800216e <HAL_ADC_ConfigChannel+0x102>
 80023a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80023a4:	f47f aee3 	bne.w	800216e <HAL_ADC_ConfigChannel+0x102>
            if (ADC_VREFINT_INSTANCE(hadc))
 80023a8:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_ADC_ConfigChannel+0x380>)
 80023aa:	4291      	cmp	r1, r2
 80023ac:	f47f aedf 	bne.w	800216e <HAL_ADC_ConfigChannel+0x102>
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <HAL_ADC_ConfigChannel+0x378>)
 80023b2:	688a      	ldr	r2, [r1, #8]
 80023b4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80023b8:	432a      	orrs	r2, r5
 80023ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023be:	e7e8      	b.n	8002392 <HAL_ADC_ConfigChannel+0x326>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80023c2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	f043 0320 	orr.w	r3, r3, #32
 80023c8:	6563      	str	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80023ca:	e6d1      	b.n	8002170 <HAL_ADC_ConfigChannel+0x104>
 80023cc:	5c001000 	.word	0x5c001000
 80023d0:	000fffff 	.word	0x000fffff
 80023d4:	47ff0000 	.word	0x47ff0000
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40022300 	.word	0x40022300
 80023e0:	40022100 	.word	0x40022100
 80023e4:	58026300 	.word	0x58026300
 80023e8:	cb840000 	.word	0xcb840000
 80023ec:	58026000 	.word	0x58026000
 80023f0:	24000000 	.word	0x24000000
 80023f4:	00030d40 	.word	0x00030d40
 80023f8:	c7520000 	.word	0xc7520000
 80023fc:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	6562      	str	r2, [r4, #84]	; 0x54
 8002408:	e7c4      	b.n	8002394 <HAL_ADC_ConfigChannel+0x328>
  __HAL_LOCK(hadc);
 800240a:	2002      	movs	r0, #2
 800240c:	e6b3      	b.n	8002176 <HAL_ADC_ConfigChannel+0x10a>
 800240e:	bf00      	nop

08002410 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002410:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002412:	4a43      	ldr	r2, [pc, #268]	; (8002520 <ADC_ConfigureBoostMode+0x110>)
{
 8002414:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002416:	6803      	ldr	r3, [r0, #0]
 8002418:	4293      	cmp	r3, r2
 800241a:	d003      	beq.n	8002424 <ADC_ConfigureBoostMode+0x14>
 800241c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002420:	4293      	cmp	r3, r2
 8002422:	d124      	bne.n	800246e <ADC_ConfigureBoostMode+0x5e>
 8002424:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <ADC_ConfigureBoostMode+0x114>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b9f3      	cbnz	r3, 8002472 <ADC_ConfigureBoostMode+0x62>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002434:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002438:	f005 f856 	bl	80074e8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800243c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800243e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8002440:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002444:	d04a      	beq.n	80024dc <ADC_ConfigureBoostMode+0xcc>
 8002446:	d83f      	bhi.n	80024c8 <ADC_ConfigureBoostMode+0xb8>
 8002448:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800244c:	d044      	beq.n	80024d8 <ADC_ConfigureBoostMode+0xc8>
 800244e:	d836      	bhi.n	80024be <ADC_ConfigureBoostMode+0xae>
 8002450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002454:	d008      	beq.n	8002468 <ADC_ConfigureBoostMode+0x58>
 8002456:	d82c      	bhi.n	80024b2 <ADC_ConfigureBoostMode+0xa2>
 8002458:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800245c:	d004      	beq.n	8002468 <ADC_ConfigureBoostMode+0x58>
 800245e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002462:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002466:	d116      	bne.n	8002496 <ADC_ConfigureBoostMode+0x86>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	e00f      	b.n	800248e <ADC_ConfigureBoostMode+0x7e>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <ADC_ConfigureBoostMode+0x118>)
 8002470:	e7d9      	b.n	8002426 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8002472:	f004 f819 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002476:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002478:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800247a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800247e:	d005      	beq.n	800248c <ADC_ConfigureBoostMode+0x7c>
 8002480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002484:	d006      	beq.n	8002494 <ADC_ConfigureBoostMode+0x84>
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d104      	bne.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800248c:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800248e:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8002492:	e000      	b.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= 4UL;
 8002494:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002496:	f7ff fdbd 	bl	8002014 <HAL_GetREVID>
 800249a:	f241 0303 	movw	r3, #4099	; 0x1003
 800249e:	4298      	cmp	r0, r3
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	d823      	bhi.n	80024ec <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 80024a4:	4a21      	ldr	r2, [pc, #132]	; (800252c <ADC_ConfigureBoostMode+0x11c>)
 80024a6:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80024a8:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 80024aa:	d91b      	bls.n	80024e4 <ADC_ConfigureBoostMode+0xd4>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b0:	e01a      	b.n	80024e8 <ADC_ConfigureBoostMode+0xd8>
    switch (hadc->Init.ClockPrescaler)
 80024b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024b6:	d0d7      	beq.n	8002468 <ADC_ConfigureBoostMode+0x58>
 80024b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024bc:	e7d3      	b.n	8002466 <ADC_ConfigureBoostMode+0x56>
 80024be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c2:	d1e8      	bne.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= 32UL;
 80024c4:	0944      	lsrs	r4, r0, #5
        break;
 80024c6:	e7e6      	b.n	8002496 <ADC_ConfigureBoostMode+0x86>
    switch (hadc->Init.ClockPrescaler)
 80024c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024cc:	d008      	beq.n	80024e0 <ADC_ConfigureBoostMode+0xd0>
 80024ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024d2:	d1e0      	bne.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= 256UL;
 80024d4:	0a04      	lsrs	r4, r0, #8
        break;
 80024d6:	e7de      	b.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= 16UL;
 80024d8:	0904      	lsrs	r4, r0, #4
        break;
 80024da:	e7dc      	b.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= 64UL;
 80024dc:	0984      	lsrs	r4, r0, #6
        break;
 80024de:	e7da      	b.n	8002496 <ADC_ConfigureBoostMode+0x86>
        freq /= 128UL;
 80024e0:	09c4      	lsrs	r4, r0, #7
        break;
 80024e2:	e7d8      	b.n	8002496 <ADC_ConfigureBoostMode+0x86>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80024e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024e8:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80024ea:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80024ec:	4a10      	ldr	r2, [pc, #64]	; (8002530 <ADC_ConfigureBoostMode+0x120>)
 80024ee:	4294      	cmp	r4, r2
 80024f0:	d803      	bhi.n	80024fa <ADC_ConfigureBoostMode+0xea>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024f8:	e7f6      	b.n	80024e8 <ADC_ConfigureBoostMode+0xd8>
    else if (freq <= 12500000UL)
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <ADC_ConfigureBoostMode+0x124>)
 80024fc:	4294      	cmp	r4, r2
 80024fe:	d803      	bhi.n	8002508 <ADC_ConfigureBoostMode+0xf8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002506:	e7d1      	b.n	80024ac <ADC_ConfigureBoostMode+0x9c>
    else if (freq <= 25000000UL)
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <ADC_ConfigureBoostMode+0x128>)
 800250a:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	bf96      	itet	ls
 8002510:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002514:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002518:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800251c:	e7e4      	b.n	80024e8 <ADC_ConfigureBoostMode+0xd8>
 800251e:	bf00      	nop
 8002520:	40022000 	.word	0x40022000
 8002524:	40022300 	.word	0x40022300
 8002528:	58026300 	.word	0x58026300
 800252c:	01312d00 	.word	0x01312d00
 8002530:	00bebc21 	.word	0x00bebc21
 8002534:	017d7841 	.word	0x017d7841
 8002538:	02faf081 	.word	0x02faf081

0800253c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 800253c:	2300      	movs	r3, #0
{
 800253e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8002540:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002542:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002544:	2800      	cmp	r0, #0
 8002546:	f000 80ed 	beq.w	8002724 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800254a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800254c:	b925      	cbnz	r5, 8002558 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800254e:	f7fe fb6f 	bl	8000c30 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002552:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002554:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002558:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800255a:	6883      	ldr	r3, [r0, #8]
 800255c:	0099      	lsls	r1, r3, #2
 800255e:	d505      	bpl.n	800256c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002560:	6883      	ldr	r3, [r0, #8]
 8002562:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002566:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800256c:	6883      	ldr	r3, [r0, #8]
 800256e:	00da      	lsls	r2, r3, #3
 8002570:	f140 8098 	bpl.w	80026a4 <HAL_ADC_Init+0x168>
 8002574:	6883      	ldr	r3, [r0, #8]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	f100 80aa 	bmi.w	80026d0 <HAL_ADC_Init+0x194>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800257e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258e:	f7ff fd68 	bl	8002062 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002592:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	4303      	orrs	r3, r0
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259c:	f040 80bf 	bne.w	800271e <HAL_ADC_Init+0x1e2>
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a4:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ac:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ae:	07de      	lsls	r6, r3, #31
 80025b0:	d40c      	bmi.n	80025cc <HAL_ADC_Init+0x90>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <HAL_ADC_Init+0x1ec>)
 80025b4:	495d      	ldr	r1, [pc, #372]	; (800272c <HAL_ADC_Init+0x1f0>)
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d002      	beq.n	80025c0 <HAL_ADC_Init+0x84>
 80025ba:	428a      	cmp	r2, r1
 80025bc:	f040 808a 	bne.w	80026d4 <HAL_ADC_Init+0x198>
 80025c0:	689e      	ldr	r6, [r3, #8]
 80025c2:	6888      	ldr	r0, [r1, #8]
 80025c4:	4330      	orrs	r0, r6
 80025c6:	07c0      	lsls	r0, r0, #31
 80025c8:	f140 808b 	bpl.w	80026e2 <HAL_ADC_Init+0x1a6>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80025cc:	f7ff fd22 	bl	8002014 <HAL_GetREVID>
 80025d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80025d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025d6:	4298      	cmp	r0, r3
 80025d8:	7f21      	ldrb	r1, [r4, #28]
 80025da:	7d60      	ldrb	r0, [r4, #21]
 80025dc:	68a3      	ldr	r3, [r4, #8]
 80025de:	f240 8090 	bls.w	8002702 <HAL_ADC_Init+0x1c6>
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	f040 808d 	bne.w	8002702 <HAL_ADC_Init+0x1c6>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e8:	040b      	lsls	r3, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025ea:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f4:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025f6:	bf02      	ittt	eq
 80025f8:	6a22      	ldreq	r2, [r4, #32]
 80025fa:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80025fe:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002602:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002604:	b122      	cbz	r2, 8002610 <HAL_ADC_Init+0xd4>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002606:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800260a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800260c:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800260e:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	4a47      	ldr	r2, [pc, #284]	; (8002730 <HAL_ADC_Init+0x1f4>)
 8002614:	68c1      	ldr	r1, [r0, #12]
 8002616:	400a      	ands	r2, r1
 8002618:	4313      	orrs	r3, r2
 800261a:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800261c:	f7ff fd21 	bl	8002062 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002622:	6893      	ldr	r3, [r2, #8]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	4303      	orrs	r3, r0
 800262a:	d127      	bne.n	800267c <HAL_ADC_Init+0x140>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800262c:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800262e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002634:	f023 0303 	bic.w	r3, r3, #3
 8002638:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 800263c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002642:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002646:	2b01      	cmp	r3, #1
 8002648:	d161      	bne.n	800270e <HAL_ADC_Init+0x1d2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800264a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800264c:	6910      	ldr	r0, [r2, #16]
 800264e:	1e59      	subs	r1, r3, #1
 8002650:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 8002654:	4333      	orrs	r3, r6
 8002656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800265a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800265c:	430b      	orrs	r3, r1
 800265e:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_ADC_Init+0x1f8>)
 8002660:	4001      	ands	r1, r0
 8002662:	430b      	orrs	r3, r1
 8002664:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002668:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800266a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800266c:	6913      	ldr	r3, [r2, #16]
 800266e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002670:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002674:	430b      	orrs	r3, r1
 8002676:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002678:	f7ff feca 	bl	8002410 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800267c:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800267e:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002680:	2b01      	cmp	r3, #1
 8002682:	d148      	bne.n	8002716 <HAL_ADC_Init+0x1da>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002684:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002686:	69a3      	ldr	r3, [r4, #24]
 8002688:	f021 010f 	bic.w	r1, r1, #15
 800268c:	3b01      	subs	r3, #1
 800268e:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002692:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002694:	f023 0303 	bic.w	r3, r3, #3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800269e:	4628      	mov	r0, r5
 80026a0:	b002      	add	sp, #8
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80026a4:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_ADC_Init+0x1fc>)
 80026a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6083      	str	r3, [r0, #8]
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_ADC_Init+0x200>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80026be:	3301      	adds	r3, #1
      wait_loop_index--;
 80026c0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f43f af55 	beq.w	8002574 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	e7f7      	b.n	80026c0 <HAL_ADC_Init+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d0:	2500      	movs	r5, #0
 80026d2:	e75c      	b.n	800258e <HAL_ADC_Init+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_ADC_Init+0x204>)
 80026d6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d8:	07db      	lsls	r3, r3, #31
 80026da:	f53f af77 	bmi.w	80025cc <HAL_ADC_Init+0x90>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_ADC_Init+0x208>)
 80026e0:	e006      	b.n	80026f0 <HAL_ADC_Init+0x1b4>
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d00b      	beq.n	80026fe <HAL_ADC_Init+0x1c2>
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_ADC_Init+0x208>)
 80026e8:	4817      	ldr	r0, [pc, #92]	; (8002748 <HAL_ADC_Init+0x20c>)
 80026ea:	428a      	cmp	r2, r1
 80026ec:	bf08      	it	eq
 80026ee:	4603      	moveq	r3, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	6861      	ldr	r1, [r4, #4]
 80026f4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	e766      	b.n	80025cc <HAL_ADC_Init+0x90>
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_ADC_Init+0x20c>)
 8002700:	e7f6      	b.n	80026f0 <HAL_ADC_Init+0x1b4>
                  hadc->Init.Overrun                                                    |
 8002702:	4313      	orrs	r3, r2
 8002704:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800270c:	e772      	b.n	80025f4 <HAL_ADC_Init+0xb8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800270e:	6913      	ldr	r3, [r2, #16]
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	e7a8      	b.n	8002668 <HAL_ADC_Init+0x12c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002716:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002718:	f023 030f 	bic.w	r3, r3, #15
 800271c:	e7b8      	b.n	8002690 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	f043 0310 	orr.w	r3, r3, #16
 8002722:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002724:	2501      	movs	r5, #1
 8002726:	e7ba      	b.n	800269e <HAL_ADC_Init+0x162>
 8002728:	40022000 	.word	0x40022000
 800272c:	40022100 	.word	0x40022100
 8002730:	fff0c003 	.word	0xfff0c003
 8002734:	fc00f81e 	.word	0xfc00f81e
 8002738:	00030d40 	.word	0x00030d40
 800273c:	24000000 	.word	0x24000000
 8002740:	58026000 	.word	0x58026000
 8002744:	58026300 	.word	0x58026300
 8002748:	40022300 	.word	0x40022300

0800274c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800274c:	6880      	ldr	r0, [r0, #8]
}
 800274e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002752:	4770      	bx	lr

08002754 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002756:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800275a:	b09b      	sub	sp, #108	; 0x6c
 800275c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800275e:	2a01      	cmp	r2, #1
 8002760:	d072      	beq.n	8002848 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002762:	2201      	movs	r2, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002764:	4c39      	ldr	r4, [pc, #228]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
  __HAL_LOCK(hadc);
 8002766:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800276a:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800276c:	681e      	ldr	r6, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800276e:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002770:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002772:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002774:	d008      	beq.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002776:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002778:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 800277c:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277e:	f041 0120 	orr.w	r1, r1, #32
 8002782:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002784:	b01b      	add	sp, #108	; 0x6c
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002788:	4c31      	ldr	r4, [pc, #196]	; (8002850 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff ffde 	bl	800274c <LL_ADC_REG_IsConversionOngoing>
 8002790:	4605      	mov	r5, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	f7ff ffda 	bl	800274c <LL_ADC_REG_IsConversionOngoing>
 8002798:	4328      	orrs	r0, r5
 800279a:	d14f      	bne.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	42b2      	cmp	r2, r6
 80027a0:	d022      	beq.n	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80027a2:	4d2c      	ldr	r5, [pc, #176]	; (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80027a4:	482c      	ldr	r0, [pc, #176]	; (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80027a6:	42a2      	cmp	r2, r4
 80027a8:	bf18      	it	ne
 80027aa:	4628      	movne	r0, r5
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ac:	f8d1 c000 	ldr.w	ip, [r1]
 80027b0:	4f26      	ldr	r7, [pc, #152]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80027b2:	f1bc 0f00 	cmp.w	ip, #0
 80027b6:	d027      	beq.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80027b8:	6886      	ldr	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ba:	42ba      	cmp	r2, r7
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80027bc:	684d      	ldr	r5, [r1, #4]
 80027be:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
 80027c2:	ea46 0605 	orr.w	r6, r6, r5
 80027c6:	6086      	str	r6, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027c8:	d001      	beq.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x7a>
 80027ca:	42a2      	cmp	r2, r4
 80027cc:	d10e      	bne.n	80027ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80027d0:	6896      	ldr	r6, [r2, #8]
 80027d2:	68a2      	ldr	r2, [r4, #8]
 80027d4:	4332      	orrs	r2, r6
 80027d6:	43d2      	mvns	r2, r2
 80027d8:	f002 0201 	and.w	r2, r2, #1
 80027dc:	b94a      	cbnz	r2, 80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027de:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 80027e6:	e7cd      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x30>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027e8:	481b      	ldr	r0, [pc, #108]	; (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80027ea:	e7df      	b.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x58>
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80027ee:	6892      	ldr	r2, [r2, #8]
 80027f0:	e7f1      	b.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR,
 80027f2:	6882      	ldr	r2, [r0, #8]
 80027f4:	6889      	ldr	r1, [r1, #8]
 80027f6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80027fa:	ea4c 0501 	orr.w	r5, ip, r1
 80027fe:	f022 020f 	bic.w	r2, r2, #15
 8002802:	4315      	orrs	r5, r2
 8002804:	6085      	str	r5, [r0, #8]
 8002806:	e7ea      	b.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0x8a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002808:	6881      	ldr	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280a:	42ba      	cmp	r2, r7
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800280c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8002810:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002812:	d001      	beq.n	8002818 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8002814:	42a2      	cmp	r2, r4
 8002816:	d10e      	bne.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68a2      	ldr	r2, [r4, #8]
 800281c:	430a      	orrs	r2, r1
 800281e:	43d2      	mvns	r2, r2
 8002820:	f002 0201 	and.w	r2, r2, #1
 8002824:	2a00      	cmp	r2, #0
 8002826:	d0da      	beq.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0x8a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002828:	6882      	ldr	r2, [r0, #8]
 800282a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800282e:	f022 020f 	bic.w	r2, r2, #15
 8002832:	6082      	str	r2, [r0, #8]
 8002834:	e7d3      	b.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8002838:	6892      	ldr	r2, [r2, #8]
 800283a:	e7f0      	b.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	6d59      	ldr	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800283e:	4610      	mov	r0, r2
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	f041 0120 	orr.w	r1, r1, #32
 8002844:	6559      	str	r1, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002846:	e7cb      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  __HAL_LOCK(hadc);
 8002848:	2002      	movs	r0, #2
 800284a:	e79b      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 800284c:	40022000 	.word	0x40022000
 8002850:	40022100 	.word	0x40022100
 8002854:	58026300 	.word	0x58026300
 8002858:	40022300 	.word	0x40022300
 800285c:	58026000 	.word	0x58026000

08002860 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002862:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800286e:	0412      	lsls	r2, r2, #16
 8002870:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800287c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002886:	b530      	push	{r4, r5, lr}
 8002888:	68dc      	ldr	r4, [r3, #12]
 800288a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	2d04      	cmp	r5, #4
 8002896:	bf28      	it	cs
 8002898:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a0:	bf8c      	ite	hi
 80028a2:	3c03      	subhi	r4, #3
 80028a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80028aa:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	fa01 f104 	lsl.w	r1, r1, r4
 80028bc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80028c4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80028c6:	db06      	blt.n	80028d6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80028cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80028d0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028d4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	f000 000f 	and.w	r0, r0, #15
 80028da:	4a02      	ldr	r2, [pc, #8]	; (80028e4 <HAL_NVIC_SetPriority+0x60>)
 80028dc:	5413      	strb	r3, [r2, r0]
 80028de:	e7f9      	b.n	80028d4 <HAL_NVIC_SetPriority+0x50>
 80028e0:	e000ed00 	.word	0xe000ed00
 80028e4:	e000ed14 	.word	0xe000ed14

080028e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028e8:	2800      	cmp	r0, #0
 80028ea:	db08      	blt.n	80028fe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ec:	2301      	movs	r3, #1
 80028ee:	0942      	lsrs	r2, r0, #5
 80028f0:	f000 001f 	and.w	r0, r0, #31
 80028f4:	fa03 f000 	lsl.w	r0, r3, r0
 80028f8:	4b01      	ldr	r3, [pc, #4]	; (8002900 <HAL_NVIC_EnableIRQ+0x18>)
 80028fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100

08002904 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002904:	2800      	cmp	r0, #0
 8002906:	db0d      	blt.n	8002924 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002908:	0943      	lsrs	r3, r0, #5
 800290a:	2201      	movs	r2, #1
 800290c:	f000 001f 	and.w	r0, r0, #31
 8002910:	3320      	adds	r3, #32
 8002912:	fa02 f000 	lsl.w	r0, r2, r0
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_NVIC_DisableIRQ+0x24>)
 8002918:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800291c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002920:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800292c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002930:	4905      	ldr	r1, [pc, #20]	; (8002948 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002934:	68ca      	ldr	r2, [r1, #12]
 8002936:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800293a:	4313      	orrs	r3, r2
 800293c:	60cb      	str	r3, [r1, #12]
 800293e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002942:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002944:	e7fd      	b.n	8002942 <HAL_NVIC_SystemReset+0x16>
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00
 800294c:	05fa0004 	.word	0x05fa0004

08002950 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002952:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8002ad0 <DMA_SetConfig+0x180>
 8002956:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002958:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800295a:	4564      	cmp	r4, ip
 800295c:	d045      	beq.n	80029ea <DMA_SetConfig+0x9a>
 800295e:	4d59      	ldr	r5, [pc, #356]	; (8002ac4 <DMA_SetConfig+0x174>)
 8002960:	42ac      	cmp	r4, r5
 8002962:	d042      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002964:	3518      	adds	r5, #24
 8002966:	42ac      	cmp	r4, r5
 8002968:	d03f      	beq.n	80029ea <DMA_SetConfig+0x9a>
 800296a:	3518      	adds	r5, #24
 800296c:	42ac      	cmp	r4, r5
 800296e:	d03c      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002970:	3518      	adds	r5, #24
 8002972:	42ac      	cmp	r4, r5
 8002974:	d039      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002976:	3518      	adds	r5, #24
 8002978:	42ac      	cmp	r4, r5
 800297a:	d036      	beq.n	80029ea <DMA_SetConfig+0x9a>
 800297c:	3518      	adds	r5, #24
 800297e:	42ac      	cmp	r4, r5
 8002980:	d033      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002982:	3518      	adds	r5, #24
 8002984:	42ac      	cmp	r4, r5
 8002986:	d030      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002988:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800298c:	42ac      	cmp	r4, r5
 800298e:	d02c      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002990:	3518      	adds	r5, #24
 8002992:	42ac      	cmp	r4, r5
 8002994:	d029      	beq.n	80029ea <DMA_SetConfig+0x9a>
 8002996:	3518      	adds	r5, #24
 8002998:	42ac      	cmp	r4, r5
 800299a:	d026      	beq.n	80029ea <DMA_SetConfig+0x9a>
 800299c:	3518      	adds	r5, #24
 800299e:	42ac      	cmp	r4, r5
 80029a0:	d023      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029a2:	3518      	adds	r5, #24
 80029a4:	42ac      	cmp	r4, r5
 80029a6:	d020      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029a8:	3518      	adds	r5, #24
 80029aa:	42ac      	cmp	r4, r5
 80029ac:	d01d      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029ae:	3518      	adds	r5, #24
 80029b0:	42ac      	cmp	r4, r5
 80029b2:	d01a      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029b4:	3518      	adds	r5, #24
 80029b6:	42ac      	cmp	r4, r5
 80029b8:	d017      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029ba:	4d43      	ldr	r5, [pc, #268]	; (8002ac8 <DMA_SetConfig+0x178>)
 80029bc:	42ac      	cmp	r4, r5
 80029be:	d014      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029c0:	3514      	adds	r5, #20
 80029c2:	42ac      	cmp	r4, r5
 80029c4:	d011      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029c6:	3514      	adds	r5, #20
 80029c8:	42ac      	cmp	r4, r5
 80029ca:	d00e      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029cc:	3514      	adds	r5, #20
 80029ce:	42ac      	cmp	r4, r5
 80029d0:	d00b      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029d2:	3514      	adds	r5, #20
 80029d4:	42ac      	cmp	r4, r5
 80029d6:	d008      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029d8:	3514      	adds	r5, #20
 80029da:	42ac      	cmp	r4, r5
 80029dc:	d005      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029de:	3514      	adds	r5, #20
 80029e0:	42ac      	cmp	r4, r5
 80029e2:	d002      	beq.n	80029ea <DMA_SetConfig+0x9a>
 80029e4:	3514      	adds	r5, #20
 80029e6:	42ac      	cmp	r4, r5
 80029e8:	d167      	bne.n	8002aba <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ea:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 80029ee:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80029f0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 80029f2:	b115      	cbz	r5, 80029fa <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f4:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 80029f8:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029fa:	4564      	cmp	r4, ip
 80029fc:	d037      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 80029fe:	4d31      	ldr	r5, [pc, #196]	; (8002ac4 <DMA_SetConfig+0x174>)
 8002a00:	42ac      	cmp	r4, r5
 8002a02:	d034      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a04:	3518      	adds	r5, #24
 8002a06:	42ac      	cmp	r4, r5
 8002a08:	d031      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a0a:	3518      	adds	r5, #24
 8002a0c:	42ac      	cmp	r4, r5
 8002a0e:	d02e      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a10:	3518      	adds	r5, #24
 8002a12:	42ac      	cmp	r4, r5
 8002a14:	d02b      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a16:	3518      	adds	r5, #24
 8002a18:	42ac      	cmp	r4, r5
 8002a1a:	d028      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a1c:	3518      	adds	r5, #24
 8002a1e:	42ac      	cmp	r4, r5
 8002a20:	d025      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a22:	3518      	adds	r5, #24
 8002a24:	42ac      	cmp	r4, r5
 8002a26:	d022      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a28:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8002a2c:	42ac      	cmp	r4, r5
 8002a2e:	d01e      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a30:	3518      	adds	r5, #24
 8002a32:	42ac      	cmp	r4, r5
 8002a34:	d01b      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a36:	3518      	adds	r5, #24
 8002a38:	42ac      	cmp	r4, r5
 8002a3a:	d018      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a3c:	3518      	adds	r5, #24
 8002a3e:	42ac      	cmp	r4, r5
 8002a40:	d015      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a42:	3518      	adds	r5, #24
 8002a44:	42ac      	cmp	r4, r5
 8002a46:	d012      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a48:	3518      	adds	r5, #24
 8002a4a:	42ac      	cmp	r4, r5
 8002a4c:	d00f      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a4e:	3518      	adds	r5, #24
 8002a50:	42ac      	cmp	r4, r5
 8002a52:	d00c      	beq.n	8002a6e <DMA_SetConfig+0x11e>
 8002a54:	3518      	adds	r5, #24
 8002a56:	42ac      	cmp	r4, r5
 8002a58:	d009      	beq.n	8002a6e <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a5a:	4d1b      	ldr	r5, [pc, #108]	; (8002ac8 <DMA_SetConfig+0x178>)
 8002a5c:	42ac      	cmp	r4, r5
 8002a5e:	d117      	bne.n	8002a90 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002a60:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002a62:	f005 061f 	and.w	r6, r5, #31
 8002a66:	2501      	movs	r5, #1
 8002a68:	40b5      	lsls	r5, r6
 8002a6a:	607d      	str	r5, [r7, #4]
 8002a6c:	e009      	b.n	8002a82 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a6e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002a70:	f005 061f 	and.w	r6, r5, #31
 8002a74:	253f      	movs	r5, #63	; 0x3f
 8002a76:	40b5      	lsls	r5, r6
 8002a78:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a7a:	6825      	ldr	r5, [r4, #0]
 8002a7c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002a80:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002a82:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a84:	6883      	ldr	r3, [r0, #8]
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d118      	bne.n	8002abc <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002a8a:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002a8c:	60e1      	str	r1, [r4, #12]
 8002a8e:	e014      	b.n	8002aba <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a90:	4d0e      	ldr	r5, [pc, #56]	; (8002acc <DMA_SetConfig+0x17c>)
 8002a92:	42ac      	cmp	r4, r5
 8002a94:	d0e4      	beq.n	8002a60 <DMA_SetConfig+0x110>
 8002a96:	3514      	adds	r5, #20
 8002a98:	42ac      	cmp	r4, r5
 8002a9a:	d0e1      	beq.n	8002a60 <DMA_SetConfig+0x110>
 8002a9c:	3514      	adds	r5, #20
 8002a9e:	42ac      	cmp	r4, r5
 8002aa0:	d0de      	beq.n	8002a60 <DMA_SetConfig+0x110>
 8002aa2:	3514      	adds	r5, #20
 8002aa4:	42ac      	cmp	r4, r5
 8002aa6:	d0db      	beq.n	8002a60 <DMA_SetConfig+0x110>
 8002aa8:	3514      	adds	r5, #20
 8002aaa:	42ac      	cmp	r4, r5
 8002aac:	d0d8      	beq.n	8002a60 <DMA_SetConfig+0x110>
 8002aae:	3514      	adds	r5, #20
 8002ab0:	42ac      	cmp	r4, r5
 8002ab2:	d0d5      	beq.n	8002a60 <DMA_SetConfig+0x110>
 8002ab4:	3514      	adds	r5, #20
 8002ab6:	42ac      	cmp	r4, r5
 8002ab8:	d0d2      	beq.n	8002a60 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002abc:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002abe:	60e2      	str	r2, [r4, #12]
}
 8002ac0:	e7fb      	b.n	8002aba <DMA_SetConfig+0x16a>
 8002ac2:	bf00      	nop
 8002ac4:	40020028 	.word	0x40020028
 8002ac8:	58025408 	.word	0x58025408
 8002acc:	5802541c 	.word	0x5802541c
 8002ad0:	40020010 	.word	0x40020010

08002ad4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <DMA_CalcBaseAndBitshift+0x94>)
 8002ad8:	4293      	cmp	r3, r2
{
 8002ada:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002adc:	d032      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002ade:	3218      	adds	r2, #24
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d02f      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002ae4:	3218      	adds	r2, #24
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d02c      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002aea:	3218      	adds	r2, #24
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d029      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002af0:	3218      	adds	r2, #24
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d026      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002af6:	3218      	adds	r2, #24
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d023      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002afc:	3218      	adds	r2, #24
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d020      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b02:	3218      	adds	r2, #24
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d01d      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b08:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d019      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b10:	3218      	adds	r2, #24
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d016      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b16:	3218      	adds	r2, #24
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b1c:	3218      	adds	r2, #24
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d010      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b22:	3218      	adds	r2, #24
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00d      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b28:	3218      	adds	r2, #24
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00a      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b2e:	3218      	adds	r2, #24
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
 8002b34:	3218      	adds	r2, #24
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b3e:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8002b40:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002b42:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	2218      	movs	r2, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b48:	4c08      	ldr	r4, [pc, #32]	; (8002b6c <DMA_CalcBaseAndBitshift+0x98>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b4e:	3910      	subs	r1, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b50:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 8002b54:	295f      	cmp	r1, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b56:	fbb1 f2f2 	udiv	r2, r1, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b5a:	f002 0207 	and.w	r2, r2, #7
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b5e:	bf88      	it	hi
 8002b60:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b62:	5ca2      	ldrb	r2, [r4, r2]
 8002b64:	65c2      	str	r2, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002b66:	e7ea      	b.n	8002b3e <DMA_CalcBaseAndBitshift+0x6a>
 8002b68:	40020010 	.word	0x40020010
 8002b6c:	0801a9e8 	.word	0x0801a9e8

08002b70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b70:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b72:	491f      	ldr	r1, [pc, #124]	; (8002bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b74:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b76:	428a      	cmp	r2, r1
 8002b78:	d024      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b7a:	3114      	adds	r1, #20
 8002b7c:	428a      	cmp	r2, r1
 8002b7e:	d021      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b80:	3114      	adds	r1, #20
 8002b82:	428a      	cmp	r2, r1
 8002b84:	d01e      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b86:	3114      	adds	r1, #20
 8002b88:	428a      	cmp	r2, r1
 8002b8a:	d01b      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b8c:	3114      	adds	r1, #20
 8002b8e:	428a      	cmp	r2, r1
 8002b90:	d018      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b92:	3114      	adds	r1, #20
 8002b94:	428a      	cmp	r2, r1
 8002b96:	d015      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b98:	3114      	adds	r1, #20
 8002b9a:	428a      	cmp	r2, r1
 8002b9c:	d012      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8002b9e:	3114      	adds	r1, #20
 8002ba0:	428a      	cmp	r2, r1
 8002ba2:	d00f      	beq.n	8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ba4:	2118      	movs	r1, #24
 8002ba6:	3b10      	subs	r3, #16
 8002ba8:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002bac:	4911      	ldr	r1, [pc, #68]	; (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002bae:	4411      	add	r1, r2
 8002bb0:	29a8      	cmp	r1, #168	; 0xa8
 8002bb2:	d91a      	bls.n	8002bea <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002bb4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8002bb8:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002bc2:	e00a      	b.n	8002bda <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bc4:	2214      	movs	r2, #20
 8002bc6:	3b08      	subs	r3, #8
 8002bc8:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bcc:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8002bd0:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002bd8:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bda:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bde:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002be0:	2201      	movs	r2, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8002be8:	4770      	bx	lr
      stream_number += 8U;
 8002bea:	3308      	adds	r3, #8
 8002bec:	e7e2      	b.n	8002bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8002bee:	bf00      	nop
 8002bf0:	58025408 	.word	0x58025408
 8002bf4:	bffdfbf0 	.word	0xbffdfbf0
 8002bf8:	40020880 	.word	0x40020880
 8002bfc:	58025880 	.word	0x58025880

08002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c00:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c02:	1e51      	subs	r1, r2, #1
 8002c04:	2907      	cmp	r1, #7
{
 8002c06:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c08:	d821      	bhi.n	8002c4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c0a:	6803      	ldr	r3, [r0, #0]
 8002c0c:	4c13      	ldr	r4, [pc, #76]	; (8002c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	d01e      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c12:	3414      	adds	r4, #20
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	d01b      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c18:	3414      	adds	r4, #20
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	d018      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c1e:	3414      	adds	r4, #20
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d015      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c24:	3414      	adds	r4, #20
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	d012      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c2a:	3414      	adds	r4, #20
 8002c2c:	42a3      	cmp	r3, r4
 8002c2e:	d00f      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c30:	3414      	adds	r4, #20
 8002c32:	42a3      	cmp	r3, r4
 8002c34:	d00c      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8002c36:	3414      	adds	r4, #20
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d009      	beq.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c46:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002c48:	2301      	movs	r3, #1
 8002c4a:	408b      	lsls	r3, r1
 8002c4c:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8002c4e:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8002c5a:	e7f4      	b.n	8002c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 8002c5c:	58025408 	.word	0x58025408
 8002c60:	1000823f 	.word	0x1000823f
 8002c64:	40020940 	.word	0x40020940
 8002c68:	1600963f 	.word	0x1600963f
 8002c6c:	58025940 	.word	0x58025940

08002c70 <HAL_DMA_Init>:
{
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff f9c8 	bl	8002008 <HAL_GetTick>
 8002c78:	4606      	mov	r6, r0
  if(hdma == NULL)
 8002c7a:	2c00      	cmp	r4, #0
 8002c7c:	f000 80e6 	beq.w	8002e4c <HAL_DMA_Init+0x1dc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	4d84      	ldr	r5, [pc, #528]	; (8002e94 <HAL_DMA_Init+0x224>)
 8002c84:	42ab      	cmp	r3, r5
 8002c86:	d06a      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002c88:	4a83      	ldr	r2, [pc, #524]	; (8002e98 <HAL_DMA_Init+0x228>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d067      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002c8e:	3218      	adds	r2, #24
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d064      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002c94:	3218      	adds	r2, #24
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d061      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002c9a:	3218      	adds	r2, #24
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002ca0:	3218      	adds	r2, #24
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d05b      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002ca6:	3218      	adds	r2, #24
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cac:	3218      	adds	r2, #24
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d055      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cb2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d051      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cba:	3218      	adds	r2, #24
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d04e      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cc0:	3218      	adds	r2, #24
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d04b      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cc6:	3218      	adds	r2, #24
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d048      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002ccc:	3218      	adds	r2, #24
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d045      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cd2:	3218      	adds	r2, #24
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d042      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cd8:	3218      	adds	r2, #24
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d03f      	beq.n	8002d5e <HAL_DMA_Init+0xee>
 8002cde:	3218      	adds	r2, #24
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d03c      	beq.n	8002d5e <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ce4:	4a6d      	ldr	r2, [pc, #436]	; (8002e9c <HAL_DMA_Init+0x22c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f040 8159 	bne.w	8002f9e <HAL_DMA_Init+0x32e>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cec:	2202      	movs	r2, #2
 8002cee:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cf8:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002cfa:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cfc:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002cfe:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 8002d02:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d06:	f000 8168 	beq.w	8002fda <HAL_DMA_Init+0x36a>
 8002d0a:	2a80      	cmp	r2, #128	; 0x80
 8002d0c:	bf0c      	ite	eq
 8002d0e:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8002d12:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d14:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8002d18:	08d2      	lsrs	r2, r2, #3
 8002d1a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d1e:	6966      	ldr	r6, [r4, #20]
 8002d20:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d24:	69a6      	ldr	r6, [r4, #24]
 8002d26:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d2a:	69e6      	ldr	r6, [r4, #28]
 8002d2c:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d30:	6a26      	ldr	r6, [r4, #32]
 8002d32:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8002d36:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d38:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d3a:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d3c:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d3e:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_DMA_Init+0x230>)
 8002d40:	441a      	add	r2, r3
 8002d42:	2314      	movs	r3, #20
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d4c:	f7ff fec2 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d52:	f003 021f 	and.w	r2, r3, #31
 8002d56:	2301      	movs	r3, #1
 8002d58:	4093      	lsls	r3, r2
 8002d5a:	6043      	str	r3, [r0, #4]
 8002d5c:	e0b6      	b.n	8002ecc <HAL_DMA_Init+0x25c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d5e:	2202      	movs	r2, #2
    __HAL_DMA_DISABLE(hdma);
 8002d60:	42ab      	cmp	r3, r5
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d62:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	d01e      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d70:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <HAL_DMA_Init+0x228>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01b      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d76:	3218      	adds	r2, #24
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d7c:	3218      	adds	r2, #24
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d015      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d82:	3218      	adds	r2, #24
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d012      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d88:	3218      	adds	r2, #24
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d8e:	3218      	adds	r2, #24
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00c      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d94:	3218      	adds	r2, #24
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002d9a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d005      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002da2:	3218      	adds	r2, #24
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d002      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002da8:	3218      	adds	r2, #24
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d0ff      	beq.n	8002dae <HAL_DMA_Init+0x13e>
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002db6:	6821      	ldr	r1, [r4, #0]
 8002db8:	680b      	ldr	r3, [r1, #0]
 8002dba:	07db      	lsls	r3, r3, #31
 8002dbc:	d43c      	bmi.n	8002e38 <HAL_DMA_Init+0x1c8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002dbe:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dc0:	4e38      	ldr	r6, [pc, #224]	; (8002ea4 <HAL_DMA_Init+0x234>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dc4:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 8002dc6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002dca:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dcc:	6922      	ldr	r2, [r4, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	6962      	ldr	r2, [r4, #20]
 8002dd2:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd4:	69e2      	ldr	r2, [r4, #28]
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8002dda:	6a22      	ldr	r2, [r4, #32]
 8002ddc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002dde:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002de2:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de4:	bf02      	ittt	eq
 8002de6:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8002dea:	433a      	orreq	r2, r7
 8002dec:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002dee:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <HAL_DMA_Init+0x238>)
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	0c12      	lsrs	r2, r2, #16
 8002df4:	0412      	lsls	r2, r2, #16
 8002df6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002dfa:	d307      	bcc.n	8002e0c <HAL_DMA_Init+0x19c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	f1a2 0729 	sub.w	r7, r2, #41	; 0x29
 8002e02:	2f1f      	cmp	r7, #31
 8002e04:	d924      	bls.n	8002e50 <HAL_DMA_Init+0x1e0>
 8002e06:	3a4f      	subs	r2, #79	; 0x4f
 8002e08:	2a03      	cmp	r2, #3
 8002e0a:	d925      	bls.n	8002e58 <HAL_DMA_Init+0x1e8>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e0c:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0e:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e10:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e12:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e16:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1a:	d14d      	bne.n	8002eb8 <HAL_DMA_Init+0x248>
      registerValue |= hdma->Init.FIFOThreshold;
 8002e1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002e20:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e22:	2e00      	cmp	r6, #0
 8002e24:	d048      	beq.n	8002eb8 <HAL_DMA_Init+0x248>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e26:	b9d0      	cbnz	r0, 8002e5e <HAL_DMA_Init+0x1ee>
    switch (hdma->Init.FIFOThreshold)
 8002e28:	2a01      	cmp	r2, #1
 8002e2a:	d029      	beq.n	8002e80 <HAL_DMA_Init+0x210>
 8002e2c:	f032 0202 	bics.w	r2, r2, #2
 8002e30:	d142      	bne.n	8002eb8 <HAL_DMA_Init+0x248>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e32:	01f2      	lsls	r2, r6, #7
 8002e34:	d540      	bpl.n	8002eb8 <HAL_DMA_Init+0x248>
 8002e36:	e026      	b.n	8002e86 <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e38:	f7ff f8e6 	bl	8002008 <HAL_GetTick>
 8002e3c:	1b80      	subs	r0, r0, r6
 8002e3e:	2805      	cmp	r0, #5
 8002e40:	d9b9      	bls.n	8002db6 <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e42:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e44:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	e01f      	b.n	8002e90 <HAL_DMA_Init+0x220>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_DMA_Init+0x23c>)
 8002e52:	40fa      	lsrs	r2, r7
 8002e54:	07d7      	lsls	r7, r2, #31
 8002e56:	d5d9      	bpl.n	8002e0c <HAL_DMA_Init+0x19c>
        registerValue |= DMA_SxCR_TRBUFF;
 8002e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5c:	e7d6      	b.n	8002e0c <HAL_DMA_Init+0x19c>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e5e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002e62:	d125      	bne.n	8002eb0 <HAL_DMA_Init+0x240>
    switch (hdma->Init.FIFOThreshold)
 8002e64:	2a03      	cmp	r2, #3
 8002e66:	d827      	bhi.n	8002eb8 <HAL_DMA_Init+0x248>
 8002e68:	a001      	add	r0, pc, #4	; (adr r0, 8002e70 <HAL_DMA_Init+0x200>)
 8002e6a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e87 	.word	0x08002e87
 8002e74:	08002e33 	.word	0x08002e33
 8002e78:	08002e87 	.word	0x08002e87
 8002e7c:	08002e81 	.word	0x08002e81
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e80:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8002e84:	d118      	bne.n	8002eb8 <HAL_DMA_Init+0x248>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e86:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002e88:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40020010 	.word	0x40020010
 8002e98:	40020028 	.word	0x40020028
 8002e9c:	58025408 	.word	0x58025408
 8002ea0:	a7fdabf8 	.word	0xa7fdabf8
 8002ea4:	fe10803f 	.word	0xfe10803f
 8002ea8:	5c001000 	.word	0x5c001000
 8002eac:	c3c0003f 	.word	0xc3c0003f
    switch (hdma->Init.FIFOThreshold)
 8002eb0:	2a02      	cmp	r2, #2
 8002eb2:	d9e8      	bls.n	8002e86 <HAL_DMA_Init+0x216>
 8002eb4:	2a03      	cmp	r2, #3
 8002eb6:	d0bc      	beq.n	8002e32 <HAL_DMA_Init+0x1c2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002eb8:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff fe0a 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ec0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	233f      	movs	r3, #63	; 0x3f
 8002ec8:	4093      	lsls	r3, r2
 8002eca:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	42ab      	cmp	r3, r5
 8002ed0:	d045      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002ed2:	4a45      	ldr	r2, [pc, #276]	; (8002fe8 <HAL_DMA_Init+0x378>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d042      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002ed8:	3218      	adds	r2, #24
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03f      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002ede:	3218      	adds	r2, #24
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d03c      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002ee4:	3218      	adds	r2, #24
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d039      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002eea:	3218      	adds	r2, #24
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002ef0:	3218      	adds	r2, #24
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d033      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002ef6:	3218      	adds	r2, #24
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d030      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002efc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d02c      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f04:	3218      	adds	r2, #24
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d029      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f0a:	3218      	adds	r2, #24
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d026      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f10:	3218      	adds	r2, #24
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d023      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f16:	3218      	adds	r2, #24
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d020      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f1c:	3218      	adds	r2, #24
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f22:	3218      	adds	r2, #24
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01a      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f28:	3218      	adds	r2, #24
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d017      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f2e:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_DMA_Init+0x37c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d014      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f34:	3214      	adds	r2, #20
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d011      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f3a:	3214      	adds	r2, #20
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f40:	3214      	adds	r2, #20
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f46:	3214      	adds	r2, #20
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d008      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f4c:	3214      	adds	r2, #20
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d005      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f52:	3214      	adds	r2, #20
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d002      	beq.n	8002f5e <HAL_DMA_Init+0x2ee>
 8002f58:	3214      	adds	r2, #20
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d119      	bne.n	8002f92 <HAL_DMA_Init+0x322>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f5e:	4620      	mov	r0, r4
 8002f60:	2500      	movs	r5, #0
 8002f62:	f7ff fe05 	bl	8002b70 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f66:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f68:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f6a:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f6c:	bf04      	itt	eq
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f76:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f78:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f7a:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7c:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 8002f80:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f82:	d82c      	bhi.n	8002fde <HAL_DMA_Init+0x36e>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f84:	f7ff fe3c 	bl	8002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002f8a:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8c:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8002f90:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f92:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002f94:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002f98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002f9c:	e778      	b.n	8002e90 <HAL_DMA_Init+0x220>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_DMA_Init+0x380>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f43f aea3 	beq.w	8002cec <HAL_DMA_Init+0x7c>
 8002fa6:	3214      	adds	r2, #20
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	f43f ae9f 	beq.w	8002cec <HAL_DMA_Init+0x7c>
 8002fae:	3214      	adds	r2, #20
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	f43f ae9b 	beq.w	8002cec <HAL_DMA_Init+0x7c>
 8002fb6:	3214      	adds	r2, #20
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	f43f ae97 	beq.w	8002cec <HAL_DMA_Init+0x7c>
 8002fbe:	3214      	adds	r2, #20
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f43f ae93 	beq.w	8002cec <HAL_DMA_Init+0x7c>
 8002fc6:	3214      	adds	r2, #20
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f43f ae8f 	beq.w	8002cec <HAL_DMA_Init+0x7c>
 8002fce:	3214      	adds	r2, #20
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	f43f ae8b 	beq.w	8002cec <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fd6:	2340      	movs	r3, #64	; 0x40
 8002fd8:	e734      	b.n	8002e44 <HAL_DMA_Init+0x1d4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fda:	2010      	movs	r0, #16
 8002fdc:	e69a      	b.n	8002d14 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8002fde:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fe2:	6765      	str	r5, [r4, #116]	; 0x74
 8002fe4:	e7d5      	b.n	8002f92 <HAL_DMA_Init+0x322>
 8002fe6:	bf00      	nop
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	58025408 	.word	0x58025408
 8002ff0:	5802541c 	.word	0x5802541c

08002ff4 <HAL_DMA_DeInit>:
{
 8002ff4:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	b908      	cbnz	r0, 8002ffe <HAL_DMA_DeInit+0xa>
    return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
}
 8002ffc:	bd10      	pop	{r4, pc}
  __HAL_DMA_DISABLE(hdma);
 8002ffe:	6803      	ldr	r3, [r0, #0]
 8003000:	4965      	ldr	r1, [pc, #404]	; (8003198 <HAL_DMA_DeInit+0x1a4>)
 8003002:	428b      	cmp	r3, r1
 8003004:	d02d      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003006:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_DMA_DeInit+0x1a8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d02a      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 800300c:	3218      	adds	r2, #24
 800300e:	4293      	cmp	r3, r2
 8003010:	d027      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003012:	3218      	adds	r2, #24
 8003014:	4293      	cmp	r3, r2
 8003016:	d024      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003018:	3218      	adds	r2, #24
 800301a:	4293      	cmp	r3, r2
 800301c:	d021      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 800301e:	3218      	adds	r2, #24
 8003020:	4293      	cmp	r3, r2
 8003022:	d01e      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003024:	3218      	adds	r2, #24
 8003026:	4293      	cmp	r3, r2
 8003028:	d01b      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 800302a:	3218      	adds	r2, #24
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003030:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003034:	4293      	cmp	r3, r2
 8003036:	d014      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003038:	3218      	adds	r2, #24
 800303a:	4293      	cmp	r3, r2
 800303c:	d011      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 800303e:	3218      	adds	r2, #24
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003044:	3218      	adds	r2, #24
 8003046:	4293      	cmp	r3, r2
 8003048:	d00b      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 800304a:	3218      	adds	r2, #24
 800304c:	4293      	cmp	r3, r2
 800304e:	d008      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003050:	3218      	adds	r2, #24
 8003052:	4293      	cmp	r3, r2
 8003054:	d005      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 8003056:	3218      	adds	r2, #24
 8003058:	4293      	cmp	r3, r2
 800305a:	d002      	beq.n	8003062 <HAL_DMA_DeInit+0x6e>
 800305c:	3218      	adds	r2, #24
 800305e:	4293      	cmp	r3, r2
 8003060:	d13d      	bne.n	80030de <HAL_DMA_DeInit+0xea>
 8003062:	681a      	ldr	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003064:	428b      	cmp	r3, r1
  __HAL_DMA_DISABLE(hdma);
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800306c:	d14e      	bne.n	800310c <HAL_DMA_DeInit+0x118>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800306e:	2200      	movs	r2, #0
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003070:	4620      	mov	r0, r4
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8003072:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8003074:	605a      	str	r2, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8003076:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8003078:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800307a:	611a      	str	r2, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800307c:	2221      	movs	r2, #33	; 0x21
 800307e:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003080:	f7ff fd28 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003084:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003086:	f003 021f 	and.w	r2, r3, #31
 800308a:	233f      	movs	r3, #63	; 0x3f
 800308c:	4093      	lsls	r3, r2
 800308e:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff fd6d 	bl	8002b70 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 8003096:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003098:	b123      	cbz	r3, 80030a4 <HAL_DMA_DeInit+0xb0>
      hdma->DMAmuxChannel->CCR = 0U;
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800309e:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80030a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	2b07      	cmp	r3, #7
 80030aa:	d808      	bhi.n	80030be <HAL_DMA_DeInit+0xca>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7ff fda7 	bl	8002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80030bc:	605a      	str	r2, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80030be:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030c2:	6760      	str	r0, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 80030c4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80030c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 80030cc:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 80030d0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80030d4:	e9c4 0011 	strd	r0, r0, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 80030d8:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  return HAL_OK;
 80030dc:	e78e      	b.n	8002ffc <HAL_DMA_DeInit+0x8>
  __HAL_DMA_DISABLE(hdma);
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030e6:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_DMA_DeInit+0x1ac>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d13e      	bne.n	800316a <HAL_DMA_DeInit+0x176>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80030ec:	2200      	movs	r2, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ee:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80030f0:	601a      	str	r2, [r3, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80030f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80030f4:	609a      	str	r2, [r3, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80030f6:	60da      	str	r2, [r3, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80030f8:	611a      	str	r2, [r3, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fa:	f7ff fceb 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	2301      	movs	r3, #1
 8003106:	4093      	lsls	r3, r2
 8003108:	6043      	str	r3, [r0, #4]
 800310a:	e7c1      	b.n	8003090 <HAL_DMA_DeInit+0x9c>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_DMA_DeInit+0x1a8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d0ad      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003112:	3218      	adds	r2, #24
 8003114:	4293      	cmp	r3, r2
 8003116:	d0aa      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003118:	3218      	adds	r2, #24
 800311a:	4293      	cmp	r3, r2
 800311c:	d0a7      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 800311e:	3218      	adds	r2, #24
 8003120:	4293      	cmp	r3, r2
 8003122:	d0a4      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003124:	3218      	adds	r2, #24
 8003126:	4293      	cmp	r3, r2
 8003128:	d0a1      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 800312a:	3218      	adds	r2, #24
 800312c:	4293      	cmp	r3, r2
 800312e:	d09e      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003130:	3218      	adds	r2, #24
 8003132:	4293      	cmp	r3, r2
 8003134:	d09b      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003136:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800313a:	4293      	cmp	r3, r2
 800313c:	d097      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 800313e:	3218      	adds	r2, #24
 8003140:	4293      	cmp	r3, r2
 8003142:	d094      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003144:	3218      	adds	r2, #24
 8003146:	4293      	cmp	r3, r2
 8003148:	d091      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 800314a:	3218      	adds	r2, #24
 800314c:	4293      	cmp	r3, r2
 800314e:	d08e      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003150:	3218      	adds	r2, #24
 8003152:	4293      	cmp	r3, r2
 8003154:	d08b      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003156:	3218      	adds	r2, #24
 8003158:	4293      	cmp	r3, r2
 800315a:	d088      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 800315c:	3218      	adds	r2, #24
 800315e:	4293      	cmp	r3, r2
 8003160:	d085      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003162:	3218      	adds	r2, #24
 8003164:	4293      	cmp	r3, r2
 8003166:	d082      	beq.n	800306e <HAL_DMA_DeInit+0x7a>
 8003168:	e7bd      	b.n	80030e6 <HAL_DMA_DeInit+0xf2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_DMA_DeInit+0x1b0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d0bd      	beq.n	80030ec <HAL_DMA_DeInit+0xf8>
 8003170:	3214      	adds	r2, #20
 8003172:	4293      	cmp	r3, r2
 8003174:	d0ba      	beq.n	80030ec <HAL_DMA_DeInit+0xf8>
 8003176:	3214      	adds	r2, #20
 8003178:	4293      	cmp	r3, r2
 800317a:	d0b7      	beq.n	80030ec <HAL_DMA_DeInit+0xf8>
 800317c:	3214      	adds	r2, #20
 800317e:	4293      	cmp	r3, r2
 8003180:	d0b4      	beq.n	80030ec <HAL_DMA_DeInit+0xf8>
 8003182:	3214      	adds	r2, #20
 8003184:	4293      	cmp	r3, r2
 8003186:	d0b1      	beq.n	80030ec <HAL_DMA_DeInit+0xf8>
 8003188:	3214      	adds	r2, #20
 800318a:	4293      	cmp	r3, r2
 800318c:	d0ae      	beq.n	80030ec <HAL_DMA_DeInit+0xf8>
 800318e:	3214      	adds	r2, #20
 8003190:	4293      	cmp	r3, r2
 8003192:	f47f af32 	bne.w	8002ffa <HAL_DMA_DeInit+0x6>
 8003196:	e7a9      	b.n	80030ec <HAL_DMA_DeInit+0xf8>
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	58025408 	.word	0x58025408
 80031a4:	5802541c 	.word	0x5802541c

080031a8 <HAL_DMA_Start_IT>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 80031aa:	2800      	cmp	r0, #0
 80031ac:	f000 810b 	beq.w	80033c6 <HAL_DMA_Start_IT+0x21e>
  __HAL_LOCK(hdma);
 80031b0:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80031b4:	2c01      	cmp	r4, #1
 80031b6:	f000 8108 	beq.w	80033ca <HAL_DMA_Start_IT+0x222>
 80031ba:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80031bc:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 80031c0:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80031c2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80031c6:	f04f 0500 	mov.w	r5, #0
 80031ca:	f040 80f7 	bne.w	80033bc <HAL_DMA_Start_IT+0x214>
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ce:	2402      	movs	r4, #2
 80031d0:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80031d4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d6:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80031d8:	4d7d      	ldr	r5, [pc, #500]	; (80033d0 <HAL_DMA_Start_IT+0x228>)
 80031da:	42ac      	cmp	r4, r5
 80031dc:	d01e      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 80031de:	4e7d      	ldr	r6, [pc, #500]	; (80033d4 <HAL_DMA_Start_IT+0x22c>)
 80031e0:	42b4      	cmp	r4, r6
 80031e2:	d01b      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 80031e4:	3618      	adds	r6, #24
 80031e6:	42b4      	cmp	r4, r6
 80031e8:	d018      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 80031ea:	3618      	adds	r6, #24
 80031ec:	42b4      	cmp	r4, r6
 80031ee:	d015      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 80031f0:	3618      	adds	r6, #24
 80031f2:	42b4      	cmp	r4, r6
 80031f4:	d012      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 80031f6:	3618      	adds	r6, #24
 80031f8:	42b4      	cmp	r4, r6
 80031fa:	d00f      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 80031fc:	3618      	adds	r6, #24
 80031fe:	42b4      	cmp	r4, r6
 8003200:	d00c      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 8003202:	3618      	adds	r6, #24
 8003204:	42b4      	cmp	r4, r6
 8003206:	d009      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 8003208:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800320c:	42b4      	cmp	r4, r6
 800320e:	d005      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 8003210:	3618      	adds	r6, #24
 8003212:	42b4      	cmp	r4, r6
 8003214:	d002      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 8003216:	3618      	adds	r6, #24
 8003218:	42b4      	cmp	r4, r6
 800321a:	d0ff      	beq.n	800321c <HAL_DMA_Start_IT+0x74>
 800321c:	6826      	ldr	r6, [r4, #0]
 800321e:	f026 0601 	bic.w	r6, r6, #1
 8003222:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003224:	f7ff fb94 	bl	8002950 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003228:	6803      	ldr	r3, [r0, #0]
 800322a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800322c:	42ab      	cmp	r3, r5
 800322e:	d053      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003230:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <HAL_DMA_Start_IT+0x22c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d050      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003236:	3218      	adds	r2, #24
 8003238:	4293      	cmp	r3, r2
 800323a:	d04d      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 800323c:	3218      	adds	r2, #24
 800323e:	4293      	cmp	r3, r2
 8003240:	d04a      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003242:	3218      	adds	r2, #24
 8003244:	4293      	cmp	r3, r2
 8003246:	d047      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003248:	3218      	adds	r2, #24
 800324a:	4293      	cmp	r3, r2
 800324c:	d044      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 800324e:	3218      	adds	r2, #24
 8003250:	4293      	cmp	r3, r2
 8003252:	d041      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003254:	3218      	adds	r2, #24
 8003256:	4293      	cmp	r3, r2
 8003258:	d03e      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 800325a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800325e:	4293      	cmp	r3, r2
 8003260:	d03a      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003262:	3218      	adds	r2, #24
 8003264:	4293      	cmp	r3, r2
 8003266:	d037      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003268:	3218      	adds	r2, #24
 800326a:	4293      	cmp	r3, r2
 800326c:	d034      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 800326e:	3218      	adds	r2, #24
 8003270:	4293      	cmp	r3, r2
 8003272:	d031      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003274:	3218      	adds	r2, #24
 8003276:	4293      	cmp	r3, r2
 8003278:	d02e      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 800327a:	3218      	adds	r2, #24
 800327c:	4293      	cmp	r3, r2
 800327e:	d02b      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003280:	3218      	adds	r2, #24
 8003282:	4293      	cmp	r3, r2
 8003284:	d028      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
 8003286:	3218      	adds	r2, #24
 8003288:	4293      	cmp	r3, r2
 800328a:	d025      	beq.n	80032d8 <HAL_DMA_Start_IT+0x130>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f022 020e 	bic.w	r2, r2, #14
 8003292:	f042 020a 	orr.w	r2, r2, #10
 8003296:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003298:	2900      	cmp	r1, #0
 800329a:	d156      	bne.n	800334a <HAL_DMA_Start_IT+0x1a2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800329c:	4a4e      	ldr	r2, [pc, #312]	; (80033d8 <HAL_DMA_Start_IT+0x230>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d027      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032a2:	4a4e      	ldr	r2, [pc, #312]	; (80033dc <HAL_DMA_Start_IT+0x234>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d024      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032a8:	3214      	adds	r2, #20
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d021      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032ae:	3214      	adds	r2, #20
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01e      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032b4:	3214      	adds	r2, #20
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01b      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032ba:	3214      	adds	r2, #20
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032c0:	3214      	adds	r2, #20
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d015      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80032c6:	3214      	adds	r2, #20
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d012      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
    __HAL_DMA_ENABLE(hdma);
 80032cc:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	f022 021e 	bic.w	r2, r2, #30
 80032de:	f042 0216 	orr.w	r2, r2, #22
 80032e2:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80032e4:	b119      	cbz	r1, 80032ee <HAL_DMA_Start_IT+0x146>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	f042 0208 	orr.w	r2, r2, #8
 80032ec:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ee:	42ab      	cmp	r3, r5
 80032f0:	d130      	bne.n	8003354 <HAL_DMA_Start_IT+0x1ac>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032f2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	03c9      	lsls	r1, r1, #15
 80032f8:	d45b      	bmi.n	80033b2 <HAL_DMA_Start_IT+0x20a>
      if(hdma->DMAmuxRequestGen != 0U)
 80032fa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80032fc:	b11a      	cbz	r2, 8003306 <HAL_DMA_Start_IT+0x15e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003304:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003306:	42ab      	cmp	r3, r5
 8003308:	d0e0      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 800330a:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_DMA_Start_IT+0x22c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d0dd      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003310:	3218      	adds	r2, #24
 8003312:	4293      	cmp	r3, r2
 8003314:	d0da      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003316:	3218      	adds	r2, #24
 8003318:	4293      	cmp	r3, r2
 800331a:	d0d7      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 800331c:	3218      	adds	r2, #24
 800331e:	4293      	cmp	r3, r2
 8003320:	d0d4      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003322:	3218      	adds	r2, #24
 8003324:	4293      	cmp	r3, r2
 8003326:	d0d1      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003328:	3218      	adds	r2, #24
 800332a:	4293      	cmp	r3, r2
 800332c:	d0ce      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 800332e:	3218      	adds	r2, #24
 8003330:	4293      	cmp	r3, r2
 8003332:	d0cb      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003334:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003338:	4293      	cmp	r3, r2
 800333a:	d0c7      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 800333c:	3218      	adds	r2, #24
 800333e:	4293      	cmp	r3, r2
 8003340:	d0c4      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003342:	3218      	adds	r2, #24
 8003344:	4293      	cmp	r3, r2
 8003346:	d0c1      	beq.n	80032cc <HAL_DMA_Start_IT+0x124>
 8003348:	e7c0      	b.n	80032cc <HAL_DMA_Start_IT+0x124>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	f042 0204 	orr.w	r2, r2, #4
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e7a3      	b.n	800329c <HAL_DMA_Start_IT+0xf4>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003354:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <HAL_DMA_Start_IT+0x22c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d0cb      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 800335a:	3218      	adds	r2, #24
 800335c:	4293      	cmp	r3, r2
 800335e:	d0c8      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003360:	3218      	adds	r2, #24
 8003362:	4293      	cmp	r3, r2
 8003364:	d0c5      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003366:	3218      	adds	r2, #24
 8003368:	4293      	cmp	r3, r2
 800336a:	d0c2      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 800336c:	3218      	adds	r2, #24
 800336e:	4293      	cmp	r3, r2
 8003370:	d0bf      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003372:	3218      	adds	r2, #24
 8003374:	4293      	cmp	r3, r2
 8003376:	d0bc      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003378:	3218      	adds	r2, #24
 800337a:	4293      	cmp	r3, r2
 800337c:	d0b9      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 800337e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003382:	4293      	cmp	r3, r2
 8003384:	d0b5      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003386:	3218      	adds	r2, #24
 8003388:	4293      	cmp	r3, r2
 800338a:	d0b2      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 800338c:	3218      	adds	r2, #24
 800338e:	4293      	cmp	r3, r2
 8003390:	d0af      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003392:	3218      	adds	r2, #24
 8003394:	4293      	cmp	r3, r2
 8003396:	d0ac      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 8003398:	3218      	adds	r2, #24
 800339a:	4293      	cmp	r3, r2
 800339c:	d0a9      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 800339e:	3218      	adds	r2, #24
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d0a6      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80033a4:	3218      	adds	r2, #24
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d0a3      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80033aa:	3218      	adds	r2, #24
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d0a0      	beq.n	80032f2 <HAL_DMA_Start_IT+0x14a>
 80033b0:	e774      	b.n	800329c <HAL_DMA_Start_IT+0xf4>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033b2:	6811      	ldr	r1, [r2, #0]
 80033b4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	e79e      	b.n	80032fa <HAL_DMA_Start_IT+0x152>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80033c0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033c4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	e785      	b.n	80032d6 <HAL_DMA_Start_IT+0x12e>
  __HAL_LOCK(hdma);
 80033ca:	2002      	movs	r0, #2
 80033cc:	e783      	b.n	80032d6 <HAL_DMA_Start_IT+0x12e>
 80033ce:	bf00      	nop
 80033d0:	40020010 	.word	0x40020010
 80033d4:	40020028 	.word	0x40020028
 80033d8:	58025408 	.word	0x58025408
 80033dc:	5802541c 	.word	0x5802541c

080033e0 <HAL_DMA_Abort>:
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7fe fe10 	bl	8002008 <HAL_GetTick>
 80033e8:	4607      	mov	r7, r0
  if(hdma == NULL)
 80033ea:	b145      	cbz	r5, 80033fe <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ec:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d006      	beq.n	8003402 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80033f8:	2300      	movs	r3, #0
 80033fa:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
 8003400:	e153      	b.n	80036aa <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003402:	682c      	ldr	r4, [r5, #0]
 8003404:	4ea9      	ldr	r6, [pc, #676]	; (80036ac <HAL_DMA_Abort+0x2cc>)
 8003406:	42b4      	cmp	r4, r6
 8003408:	d04a      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 800340a:	4ba9      	ldr	r3, [pc, #676]	; (80036b0 <HAL_DMA_Abort+0x2d0>)
 800340c:	429c      	cmp	r4, r3
 800340e:	d047      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003410:	3318      	adds	r3, #24
 8003412:	429c      	cmp	r4, r3
 8003414:	d044      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003416:	3318      	adds	r3, #24
 8003418:	429c      	cmp	r4, r3
 800341a:	d041      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 800341c:	3318      	adds	r3, #24
 800341e:	429c      	cmp	r4, r3
 8003420:	d03e      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003422:	3318      	adds	r3, #24
 8003424:	429c      	cmp	r4, r3
 8003426:	d03b      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003428:	3318      	adds	r3, #24
 800342a:	429c      	cmp	r4, r3
 800342c:	d038      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 800342e:	3318      	adds	r3, #24
 8003430:	429c      	cmp	r4, r3
 8003432:	d035      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003434:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003438:	429c      	cmp	r4, r3
 800343a:	d031      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 800343c:	3318      	adds	r3, #24
 800343e:	429c      	cmp	r4, r3
 8003440:	d02e      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003442:	3318      	adds	r3, #24
 8003444:	429c      	cmp	r4, r3
 8003446:	d02b      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003448:	3318      	adds	r3, #24
 800344a:	429c      	cmp	r4, r3
 800344c:	d028      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 800344e:	3318      	adds	r3, #24
 8003450:	429c      	cmp	r4, r3
 8003452:	d025      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003454:	3318      	adds	r3, #24
 8003456:	429c      	cmp	r4, r3
 8003458:	d022      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 800345a:	3318      	adds	r3, #24
 800345c:	429c      	cmp	r4, r3
 800345e:	d01f      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
 8003460:	3318      	adds	r3, #24
 8003462:	429c      	cmp	r4, r3
 8003464:	d01c      	beq.n	80034a0 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f023 030e 	bic.w	r3, r3, #14
 800346c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800346e:	4b91      	ldr	r3, [pc, #580]	; (80036b4 <HAL_DMA_Abort+0x2d4>)
 8003470:	429c      	cmp	r4, r3
 8003472:	d01f      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 8003474:	3314      	adds	r3, #20
 8003476:	429c      	cmp	r4, r3
 8003478:	d01c      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 800347a:	3314      	adds	r3, #20
 800347c:	429c      	cmp	r4, r3
 800347e:	d019      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 8003480:	3314      	adds	r3, #20
 8003482:	429c      	cmp	r4, r3
 8003484:	d016      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 8003486:	3314      	adds	r3, #20
 8003488:	429c      	cmp	r4, r3
 800348a:	d013      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 800348c:	3314      	adds	r3, #20
 800348e:	429c      	cmp	r4, r3
 8003490:	d010      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 8003492:	3314      	adds	r3, #20
 8003494:	429c      	cmp	r4, r3
 8003496:	d00d      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 8003498:	3314      	adds	r3, #20
 800349a:	429c      	cmp	r4, r3
 800349c:	d112      	bne.n	80034c4 <HAL_DMA_Abort+0xe4>
 800349e:	e009      	b.n	80034b4 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034a0:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034a2:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034a4:	f023 031e 	bic.w	r3, r3, #30
 80034a8:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034aa:	6963      	ldr	r3, [r4, #20]
 80034ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b0:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034b2:	d176      	bne.n	80035a2 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034b4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 80034b6:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034b8:	6813      	ldr	r3, [r2, #0]
 80034ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034c0:	f040 80ab 	bne.w	800361a <HAL_DMA_Abort+0x23a>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	07db      	lsls	r3, r3, #31
 80034d0:	f100 80cd 	bmi.w	800366e <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034d4:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034d8:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034da:	6da8      	ldr	r0, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034dc:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034e0:	f000 80d1 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 80034e4:	4972      	ldr	r1, [pc, #456]	; (80036b0 <HAL_DMA_Abort+0x2d0>)
 80034e6:	428b      	cmp	r3, r1
 80034e8:	f000 80cd 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 80034ec:	3118      	adds	r1, #24
 80034ee:	428b      	cmp	r3, r1
 80034f0:	f000 80c9 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 80034f4:	3118      	adds	r1, #24
 80034f6:	428b      	cmp	r3, r1
 80034f8:	f000 80c5 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 80034fc:	3118      	adds	r1, #24
 80034fe:	428b      	cmp	r3, r1
 8003500:	f000 80c1 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 8003504:	3118      	adds	r1, #24
 8003506:	428b      	cmp	r3, r1
 8003508:	f000 80bd 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 800350c:	3118      	adds	r1, #24
 800350e:	428b      	cmp	r3, r1
 8003510:	f000 80b9 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 8003514:	3118      	adds	r1, #24
 8003516:	428b      	cmp	r3, r1
 8003518:	f000 80b5 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 800351c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003520:	428b      	cmp	r3, r1
 8003522:	f000 80b0 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 8003526:	3118      	adds	r1, #24
 8003528:	428b      	cmp	r3, r1
 800352a:	f000 80ac 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 800352e:	3118      	adds	r1, #24
 8003530:	428b      	cmp	r3, r1
 8003532:	f000 80a8 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 8003536:	3118      	adds	r1, #24
 8003538:	428b      	cmp	r3, r1
 800353a:	f000 80a4 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 800353e:	3118      	adds	r1, #24
 8003540:	428b      	cmp	r3, r1
 8003542:	f000 80a0 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 8003546:	3118      	adds	r1, #24
 8003548:	428b      	cmp	r3, r1
 800354a:	f000 809c 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 800354e:	3118      	adds	r1, #24
 8003550:	428b      	cmp	r3, r1
 8003552:	f000 8098 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
 8003556:	3118      	adds	r1, #24
 8003558:	428b      	cmp	r3, r1
 800355a:	f000 8094 	beq.w	8003686 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003566:	4a53      	ldr	r2, [pc, #332]	; (80036b4 <HAL_DMA_Abort+0x2d4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f000 8092 	beq.w	8003692 <HAL_DMA_Abort+0x2b2>
 800356e:	3214      	adds	r2, #20
 8003570:	4293      	cmp	r3, r2
 8003572:	f000 808e 	beq.w	8003692 <HAL_DMA_Abort+0x2b2>
 8003576:	3214      	adds	r2, #20
 8003578:	4293      	cmp	r3, r2
 800357a:	f000 808a 	beq.w	8003692 <HAL_DMA_Abort+0x2b2>
 800357e:	3214      	adds	r2, #20
 8003580:	4293      	cmp	r3, r2
 8003582:	f000 8086 	beq.w	8003692 <HAL_DMA_Abort+0x2b2>
 8003586:	3214      	adds	r2, #20
 8003588:	4293      	cmp	r3, r2
 800358a:	f000 8082 	beq.w	8003692 <HAL_DMA_Abort+0x2b2>
 800358e:	3214      	adds	r2, #20
 8003590:	4293      	cmp	r3, r2
 8003592:	d07e      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 8003594:	3214      	adds	r2, #20
 8003596:	4293      	cmp	r3, r2
 8003598:	d07b      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 800359a:	3214      	adds	r2, #20
 800359c:	4293      	cmp	r3, r2
 800359e:	d17e      	bne.n	800369e <HAL_DMA_Abort+0x2be>
 80035a0:	e077      	b.n	8003692 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035a2:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_DMA_Abort+0x2d0>)
 80035a4:	429c      	cmp	r4, r3
 80035a6:	d085      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 80035a8:	3318      	adds	r3, #24
 80035aa:	429c      	cmp	r4, r3
 80035ac:	d082      	beq.n	80034b4 <HAL_DMA_Abort+0xd4>
 80035ae:	3318      	adds	r3, #24
 80035b0:	429c      	cmp	r4, r3
 80035b2:	f43f af7f 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035b6:	3318      	adds	r3, #24
 80035b8:	429c      	cmp	r4, r3
 80035ba:	f43f af7b 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035be:	3318      	adds	r3, #24
 80035c0:	429c      	cmp	r4, r3
 80035c2:	f43f af77 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035c6:	3318      	adds	r3, #24
 80035c8:	429c      	cmp	r4, r3
 80035ca:	f43f af73 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035ce:	3318      	adds	r3, #24
 80035d0:	429c      	cmp	r4, r3
 80035d2:	f43f af6f 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80035da:	429c      	cmp	r4, r3
 80035dc:	f43f af6a 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035e0:	3318      	adds	r3, #24
 80035e2:	429c      	cmp	r4, r3
 80035e4:	f43f af66 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035e8:	3318      	adds	r3, #24
 80035ea:	429c      	cmp	r4, r3
 80035ec:	f43f af62 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035f0:	3318      	adds	r3, #24
 80035f2:	429c      	cmp	r4, r3
 80035f4:	f43f af5e 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 80035f8:	3318      	adds	r3, #24
 80035fa:	429c      	cmp	r4, r3
 80035fc:	f43f af5a 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 8003600:	3318      	adds	r3, #24
 8003602:	429c      	cmp	r4, r3
 8003604:	f43f af56 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 8003608:	3318      	adds	r3, #24
 800360a:	429c      	cmp	r4, r3
 800360c:	f43f af52 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 8003610:	3318      	adds	r3, #24
 8003612:	429c      	cmp	r4, r3
 8003614:	f43f af4e 	beq.w	80034b4 <HAL_DMA_Abort+0xd4>
 8003618:	e729      	b.n	800346e <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_DMA_Abort+0x2d0>)
 800361c:	429c      	cmp	r4, r3
 800361e:	f43f af51 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 8003622:	3318      	adds	r3, #24
 8003624:	429c      	cmp	r4, r3
 8003626:	f43f af4d 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 800362a:	3318      	adds	r3, #24
 800362c:	429c      	cmp	r4, r3
 800362e:	f43f af49 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 8003632:	3318      	adds	r3, #24
 8003634:	429c      	cmp	r4, r3
 8003636:	f43f af45 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 800363a:	3318      	adds	r3, #24
 800363c:	429c      	cmp	r4, r3
 800363e:	f43f af41 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 8003642:	3318      	adds	r3, #24
 8003644:	429c      	cmp	r4, r3
 8003646:	f43f af3d 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 800364a:	3318      	adds	r3, #24
 800364c:	429c      	cmp	r4, r3
 800364e:	f43f af39 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 8003652:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003656:	429c      	cmp	r4, r3
 8003658:	f43f af34 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 800365c:	3318      	adds	r3, #24
 800365e:	429c      	cmp	r4, r3
 8003660:	f43f af30 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 8003664:	3318      	adds	r3, #24
 8003666:	429c      	cmp	r4, r3
 8003668:	f43f af2c 	beq.w	80034c4 <HAL_DMA_Abort+0xe4>
 800366c:	e72a      	b.n	80034c4 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800366e:	f7fe fccb 	bl	8002008 <HAL_GetTick>
 8003672:	1bc0      	subs	r0, r0, r7
 8003674:	2805      	cmp	r0, #5
 8003676:	f67f af29 	bls.w	80034cc <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800367a:	2320      	movs	r3, #32
 800367c:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800367e:	2303      	movs	r3, #3
 8003680:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8003684:	e6b8      	b.n	80033f8 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003686:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003688:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800368a:	fa01 f202 	lsl.w	r2, r1, r2
 800368e:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003690:	d112      	bne.n	80036b8 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003692:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8003696:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003698:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d13b      	bne.n	8003716 <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 800369e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80036a0:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80036a2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80036a6:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ac:	40020010 	.word	0x40020010
 80036b0:	40020028 	.word	0x40020028
 80036b4:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_DMA_Abort+0x348>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d0e9      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036be:	3218      	adds	r2, #24
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d0e6      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036c4:	3218      	adds	r2, #24
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d0e3      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036ca:	3218      	adds	r2, #24
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d0e0      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036d0:	3218      	adds	r2, #24
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d0dd      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036d6:	3218      	adds	r2, #24
 80036d8:	4293      	cmp	r3, r2
 80036da:	d0da      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036dc:	3218      	adds	r2, #24
 80036de:	4293      	cmp	r3, r2
 80036e0:	d0d7      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d0d3      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036ea:	3218      	adds	r2, #24
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d0d0      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036f0:	3218      	adds	r2, #24
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d0cd      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036f6:	3218      	adds	r2, #24
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d0ca      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 80036fc:	3218      	adds	r2, #24
 80036fe:	4293      	cmp	r3, r2
 8003700:	d0c7      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 8003702:	3218      	adds	r2, #24
 8003704:	4293      	cmp	r3, r2
 8003706:	d0c4      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 8003708:	3218      	adds	r2, #24
 800370a:	4293      	cmp	r3, r2
 800370c:	d0c1      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 800370e:	3218      	adds	r2, #24
 8003710:	4293      	cmp	r3, r2
 8003712:	d0be      	beq.n	8003692 <HAL_DMA_Abort+0x2b2>
 8003714:	e727      	b.n	8003566 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800371e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	e7bb      	b.n	800369e <HAL_DMA_Abort+0x2be>
 8003726:	bf00      	nop
 8003728:	40020028 	.word	0x40020028

0800372c <HAL_DMA_Abort_IT>:
{
 800372c:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800372e:	b128      	cbz	r0, 800373c <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003730:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003734:	2b02      	cmp	r3, #2
 8003736:	d003      	beq.n	8003740 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
 800373e:	e07f      	b.n	8003840 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	4a50      	ldr	r2, [pc, #320]	; (8003884 <HAL_DMA_Abort_IT+0x158>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d052      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003748:	494f      	ldr	r1, [pc, #316]	; (8003888 <HAL_DMA_Abort_IT+0x15c>)
 800374a:	428b      	cmp	r3, r1
 800374c:	d04f      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 800374e:	3118      	adds	r1, #24
 8003750:	428b      	cmp	r3, r1
 8003752:	d04c      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003754:	3118      	adds	r1, #24
 8003756:	428b      	cmp	r3, r1
 8003758:	d049      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 800375a:	3118      	adds	r1, #24
 800375c:	428b      	cmp	r3, r1
 800375e:	d046      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003760:	3118      	adds	r1, #24
 8003762:	428b      	cmp	r3, r1
 8003764:	d043      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003766:	3118      	adds	r1, #24
 8003768:	428b      	cmp	r3, r1
 800376a:	d040      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 800376c:	3118      	adds	r1, #24
 800376e:	428b      	cmp	r3, r1
 8003770:	d03d      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003772:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003776:	428b      	cmp	r3, r1
 8003778:	d039      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 800377a:	3118      	adds	r1, #24
 800377c:	428b      	cmp	r3, r1
 800377e:	d036      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003780:	3118      	adds	r1, #24
 8003782:	428b      	cmp	r3, r1
 8003784:	d033      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003786:	3118      	adds	r1, #24
 8003788:	428b      	cmp	r3, r1
 800378a:	d030      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 800378c:	3118      	adds	r1, #24
 800378e:	428b      	cmp	r3, r1
 8003790:	d02d      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003792:	3118      	adds	r1, #24
 8003794:	428b      	cmp	r3, r1
 8003796:	d02a      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 8003798:	3118      	adds	r1, #24
 800379a:	428b      	cmp	r3, r1
 800379c:	d027      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
 800379e:	3118      	adds	r1, #24
 80037a0:	428b      	cmp	r3, r1
 80037a2:	d024      	beq.n	80037ee <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f022 020e 	bic.w	r2, r2, #14
 80037aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b4:	4a35      	ldr	r2, [pc, #212]	; (800388c <HAL_DMA_Abort_IT+0x160>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d143      	bne.n	8003842 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ba:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037c4:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	2301      	movs	r3, #1
 80037ce:	4093      	lsls	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d2:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 80037d6:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80037d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d046      	beq.n	800386c <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e6:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	e03e      	b.n	800386c <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ee:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 80037f0:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 80037f2:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80037f6:	d01e      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 80037f8:	4a23      	ldr	r2, [pc, #140]	; (8003888 <HAL_DMA_Abort_IT+0x15c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01b      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 80037fe:	3218      	adds	r2, #24
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 8003804:	3218      	adds	r2, #24
 8003806:	4293      	cmp	r3, r2
 8003808:	d015      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 800380a:	3218      	adds	r2, #24
 800380c:	4293      	cmp	r3, r2
 800380e:	d012      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 8003810:	3218      	adds	r2, #24
 8003812:	4293      	cmp	r3, r2
 8003814:	d00f      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 8003816:	3218      	adds	r2, #24
 8003818:	4293      	cmp	r3, r2
 800381a:	d00c      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 800381c:	3218      	adds	r2, #24
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 8003822:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003826:	4293      	cmp	r3, r2
 8003828:	d005      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 800382a:	3218      	adds	r2, #24
 800382c:	4293      	cmp	r3, r2
 800382e:	d002      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 8003830:	3218      	adds	r2, #24
 8003832:	4293      	cmp	r3, r2
 8003834:	d0ff      	beq.n	8003836 <HAL_DMA_Abort_IT+0x10a>
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800383e:	2000      	movs	r0, #0
}
 8003840:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_DMA_Abort_IT+0x164>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d0b8      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
 8003848:	3214      	adds	r2, #20
 800384a:	4293      	cmp	r3, r2
 800384c:	d0b5      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
 800384e:	3214      	adds	r2, #20
 8003850:	4293      	cmp	r3, r2
 8003852:	d0b2      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
 8003854:	3214      	adds	r2, #20
 8003856:	4293      	cmp	r3, r2
 8003858:	d0af      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
 800385a:	3214      	adds	r2, #20
 800385c:	4293      	cmp	r3, r2
 800385e:	d0ac      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
 8003860:	3214      	adds	r2, #20
 8003862:	4293      	cmp	r3, r2
 8003864:	d0a9      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
 8003866:	3214      	adds	r2, #20
 8003868:	4293      	cmp	r3, r2
 800386a:	d0a6      	beq.n	80037ba <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 800386c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800386e:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003870:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8003874:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8003876:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800387a:	b10b      	cbz	r3, 8003880 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 800387c:	4798      	blx	r3
 800387e:	e7de      	b.n	800383e <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8003880:	4618      	mov	r0, r3
 8003882:	e7dd      	b.n	8003840 <HAL_DMA_Abort_IT+0x114>
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	58025408 	.word	0x58025408
 8003890:	5802541c 	.word	0x5802541c

08003894 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8003894:	2300      	movs	r3, #0
{
 8003896:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800389a:	9301      	str	r3, [sp, #4]
{
 800389c:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800389e:	4b29      	ldr	r3, [pc, #164]	; (8003944 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a0:	4e29      	ldr	r6, [pc, #164]	; (8003948 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a2:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a4:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a8:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 80038aa:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 80038ae:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038b2:	d04f      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <HAL_DMA_IRQHandler+0xb8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04c      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038ba:	3218      	adds	r2, #24
 80038bc:	4293      	cmp	r3, r2
 80038be:	d049      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038c0:	3218      	adds	r2, #24
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d046      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038c6:	3218      	adds	r2, #24
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d043      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038cc:	3218      	adds	r2, #24
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d040      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038d2:	3218      	adds	r2, #24
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03d      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038d8:	3218      	adds	r2, #24
 80038da:	4293      	cmp	r3, r2
 80038dc:	d03a      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038de:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d036      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038e6:	3218      	adds	r2, #24
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d033      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038ec:	3218      	adds	r2, #24
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d030      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038f2:	3218      	adds	r2, #24
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d02d      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038f8:	3218      	adds	r2, #24
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02a      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 80038fe:	3218      	adds	r2, #24
 8003900:	4293      	cmp	r3, r2
 8003902:	d027      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 8003904:	3218      	adds	r2, #24
 8003906:	4293      	cmp	r3, r2
 8003908:	d024      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
 800390a:	3218      	adds	r2, #24
 800390c:	4293      	cmp	r3, r2
 800390e:	d021      	beq.n	8003954 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <HAL_DMA_IRQHandler+0xbc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	f040 820c 	bne.w	8003d30 <HAL_DMA_IRQHandler+0x49c>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003918:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800391a:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800391c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800391e:	f001 011f 	and.w	r1, r1, #31
 8003922:	4088      	lsls	r0, r1
 8003924:	ea10 0f0c 	tst.w	r0, ip
 8003928:	f000 8229 	beq.w	8003d7e <HAL_DMA_IRQHandler+0x4ea>
 800392c:	0756      	lsls	r6, r2, #29
 800392e:	f140 8226 	bpl.w	8003d7e <HAL_DMA_IRQHandler+0x4ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003932:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003934:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003936:	f140 821a 	bpl.w	8003d6e <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800393a:	03d3      	lsls	r3, r2, #15
 800393c:	f100 821d 	bmi.w	8003d7a <HAL_DMA_IRQHandler+0x4e6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003940:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003942:	e180      	b.n	8003c46 <HAL_DMA_IRQHandler+0x3b2>
 8003944:	24000000 	.word	0x24000000
 8003948:	40020010 	.word	0x40020010
 800394c:	40020028 	.word	0x40020028
 8003950:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003954:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003956:	2008      	movs	r0, #8
 8003958:	f002 021f 	and.w	r2, r2, #31
 800395c:	4090      	lsls	r0, r2
 800395e:	ea10 0f08 	tst.w	r0, r8
 8003962:	d03d      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003964:	42b3      	cmp	r3, r6
 8003966:	d02e      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 8003968:	4985      	ldr	r1, [pc, #532]	; (8003b80 <HAL_DMA_IRQHandler+0x2ec>)
 800396a:	428b      	cmp	r3, r1
 800396c:	d02b      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 800396e:	3118      	adds	r1, #24
 8003970:	428b      	cmp	r3, r1
 8003972:	d028      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 8003974:	3118      	adds	r1, #24
 8003976:	428b      	cmp	r3, r1
 8003978:	d025      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 800397a:	3118      	adds	r1, #24
 800397c:	428b      	cmp	r3, r1
 800397e:	d022      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 8003980:	3118      	adds	r1, #24
 8003982:	428b      	cmp	r3, r1
 8003984:	d01f      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 8003986:	3118      	adds	r1, #24
 8003988:	428b      	cmp	r3, r1
 800398a:	d01c      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 800398c:	3118      	adds	r1, #24
 800398e:	428b      	cmp	r3, r1
 8003990:	d019      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 8003992:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003996:	428b      	cmp	r3, r1
 8003998:	d015      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 800399a:	3118      	adds	r1, #24
 800399c:	428b      	cmp	r3, r1
 800399e:	d012      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 80039a0:	3118      	adds	r1, #24
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d00f      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 80039a6:	3118      	adds	r1, #24
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d00c      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 80039ac:	3118      	adds	r1, #24
 80039ae:	428b      	cmp	r3, r1
 80039b0:	d009      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 80039b2:	3118      	adds	r1, #24
 80039b4:	428b      	cmp	r3, r1
 80039b6:	d006      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 80039b8:	3118      	adds	r1, #24
 80039ba:	428b      	cmp	r3, r1
 80039bc:	d003      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x132>
 80039be:	3118      	adds	r1, #24
 80039c0:	428b      	cmp	r3, r1
 80039c2:	f040 80c2 	bne.w	8003b4a <HAL_DMA_IRQHandler+0x2b6>
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80039cc:	b141      	cbz	r1, 80039e0 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	f021 0104 	bic.w	r1, r1, #4
 80039d4:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d6:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80039da:	f041 0101 	orr.w	r1, r1, #1
 80039de:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039e0:	fa28 f102 	lsr.w	r1, r8, r2
 80039e4:	07c8      	lsls	r0, r1, #31
 80039e6:	d534      	bpl.n	8003a52 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039e8:	42b3      	cmp	r3, r6
 80039ea:	d02e      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 80039ec:	4964      	ldr	r1, [pc, #400]	; (8003b80 <HAL_DMA_IRQHandler+0x2ec>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d02b      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 80039f2:	3118      	adds	r1, #24
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d028      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 80039f8:	3118      	adds	r1, #24
 80039fa:	428b      	cmp	r3, r1
 80039fc:	d025      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 80039fe:	3118      	adds	r1, #24
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d022      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a04:	3118      	adds	r1, #24
 8003a06:	428b      	cmp	r3, r1
 8003a08:	d01f      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a0a:	3118      	adds	r1, #24
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d01c      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a10:	3118      	adds	r1, #24
 8003a12:	428b      	cmp	r3, r1
 8003a14:	d019      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a16:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003a1a:	428b      	cmp	r3, r1
 8003a1c:	d015      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a1e:	3118      	adds	r1, #24
 8003a20:	428b      	cmp	r3, r1
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a24:	3118      	adds	r1, #24
 8003a26:	428b      	cmp	r3, r1
 8003a28:	d00f      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a2a:	3118      	adds	r1, #24
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d00c      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a30:	3118      	adds	r1, #24
 8003a32:	428b      	cmp	r3, r1
 8003a34:	d009      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a36:	3118      	adds	r1, #24
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d006      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a3c:	3118      	adds	r1, #24
 8003a3e:	428b      	cmp	r3, r1
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x1b6>
 8003a42:	3118      	adds	r1, #24
 8003a44:	428b      	cmp	r3, r1
 8003a46:	f040 8084 	bne.w	8003b52 <HAL_DMA_IRQHandler+0x2be>
 8003a4a:	6959      	ldr	r1, [r3, #20]
 8003a4c:	0609      	lsls	r1, r1, #24
 8003a4e:	f100 8082 	bmi.w	8003b56 <HAL_DMA_IRQHandler+0x2c2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a52:	2104      	movs	r1, #4
 8003a54:	4091      	lsls	r1, r2
 8003a56:	ea11 0f08 	tst.w	r1, r8
 8003a5a:	d032      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a5c:	42b3      	cmp	r3, r6
 8003a5e:	d02d      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a60:	4847      	ldr	r0, [pc, #284]	; (8003b80 <HAL_DMA_IRQHandler+0x2ec>)
 8003a62:	4283      	cmp	r3, r0
 8003a64:	d02a      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a66:	3018      	adds	r0, #24
 8003a68:	4283      	cmp	r3, r0
 8003a6a:	d027      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a6c:	3018      	adds	r0, #24
 8003a6e:	4283      	cmp	r3, r0
 8003a70:	d024      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a72:	3018      	adds	r0, #24
 8003a74:	4283      	cmp	r3, r0
 8003a76:	d021      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a78:	3018      	adds	r0, #24
 8003a7a:	4283      	cmp	r3, r0
 8003a7c:	d01e      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a7e:	3018      	adds	r0, #24
 8003a80:	4283      	cmp	r3, r0
 8003a82:	d01b      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a84:	3018      	adds	r0, #24
 8003a86:	4283      	cmp	r3, r0
 8003a88:	d018      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a8a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003a8e:	4283      	cmp	r3, r0
 8003a90:	d014      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a92:	3018      	adds	r0, #24
 8003a94:	4283      	cmp	r3, r0
 8003a96:	d011      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a98:	3018      	adds	r0, #24
 8003a9a:	4283      	cmp	r3, r0
 8003a9c:	d00e      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003a9e:	3018      	adds	r0, #24
 8003aa0:	4283      	cmp	r3, r0
 8003aa2:	d00b      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003aa4:	3018      	adds	r0, #24
 8003aa6:	4283      	cmp	r3, r0
 8003aa8:	d008      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003aaa:	3018      	adds	r0, #24
 8003aac:	4283      	cmp	r3, r0
 8003aae:	d005      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003ab0:	3018      	adds	r0, #24
 8003ab2:	4283      	cmp	r3, r0
 8003ab4:	d002      	beq.n	8003abc <HAL_DMA_IRQHandler+0x228>
 8003ab6:	3018      	adds	r0, #24
 8003ab8:	4283      	cmp	r3, r0
 8003aba:	d154      	bne.n	8003b66 <HAL_DMA_IRQHandler+0x2d2>
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	0780      	lsls	r0, r0, #30
 8003ac0:	d453      	bmi.n	8003b6a <HAL_DMA_IRQHandler+0x2d6>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac8:	ea12 0f08 	tst.w	r2, r8
 8003acc:	d05e      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x2f8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ace:	42b3      	cmp	r3, r6
 8003ad0:	d02d      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003ad2:	492b      	ldr	r1, [pc, #172]	; (8003b80 <HAL_DMA_IRQHandler+0x2ec>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d02a      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003ad8:	3118      	adds	r1, #24
 8003ada:	428b      	cmp	r3, r1
 8003adc:	d027      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003ade:	3118      	adds	r1, #24
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	d024      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003ae4:	3118      	adds	r1, #24
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	d021      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003aea:	3118      	adds	r1, #24
 8003aec:	428b      	cmp	r3, r1
 8003aee:	d01e      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003af0:	3118      	adds	r1, #24
 8003af2:	428b      	cmp	r3, r1
 8003af4:	d01b      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003af6:	3118      	adds	r1, #24
 8003af8:	428b      	cmp	r3, r1
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003afc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d014      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b04:	3118      	adds	r1, #24
 8003b06:	428b      	cmp	r3, r1
 8003b08:	d011      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b0a:	3118      	adds	r1, #24
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d00e      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b10:	3118      	adds	r1, #24
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d00b      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b16:	3118      	adds	r1, #24
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	d008      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b1c:	3118      	adds	r1, #24
 8003b1e:	428b      	cmp	r3, r1
 8003b20:	d005      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b22:	3118      	adds	r1, #24
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d002      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x29a>
 8003b28:	3118      	adds	r1, #24
 8003b2a:	428b      	cmp	r3, r1
 8003b2c:	d123      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x2e2>
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	f011 0f08 	tst.w	r1, #8
 8003b34:	d02a      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x2f8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b36:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	0350      	lsls	r0, r2, #13
 8003b3c:	f140 808b 	bpl.w	8003c56 <HAL_DMA_IRQHandler+0x3c2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	0319      	lsls	r1, r3, #12
 8003b44:	d41e      	bmi.n	8003b84 <HAL_DMA_IRQHandler+0x2f0>
          if(hdma->XferHalfCpltCallback != NULL)
 8003b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b48:	e01d      	b.n	8003b86 <HAL_DMA_IRQHandler+0x2f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8003b50:	e73c      	b.n	80039cc <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	e77d      	b.n	8003a52 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b56:	2101      	movs	r1, #1
 8003b58:	4091      	lsls	r1, r2
 8003b5a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b5c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003b5e:	f041 0102 	orr.w	r1, r1, #2
 8003b62:	6561      	str	r1, [r4, #84]	; 0x54
 8003b64:	e775      	b.n	8003a52 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	e7ab      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b6a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003b6e:	f041 0104 	orr.w	r1, r1, #4
 8003b72:	6561      	str	r1, [r4, #84]	; 0x54
 8003b74:	e7a5      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	f011 0f04 	tst.w	r1, #4
 8003b7c:	e7da      	b.n	8003b34 <HAL_DMA_IRQHandler+0x2a0>
 8003b7e:	bf00      	nop
 8003b80:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8003b86:	b10b      	cbz	r3, 8003b8c <HAL_DMA_IRQHandler+0x2f8>
            hdma->XferHalfCpltCallback(hdma);
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b8c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b8e:	2120      	movs	r1, #32
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	4091      	lsls	r1, r2
 8003b96:	ea11 0f08 	tst.w	r1, r8
 8003b9a:	d073      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x3f0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	42b3      	cmp	r3, r6
 8003ba0:	d02d      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003ba2:	488d      	ldr	r0, [pc, #564]	; (8003dd8 <HAL_DMA_IRQHandler+0x544>)
 8003ba4:	4283      	cmp	r3, r0
 8003ba6:	d02a      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003ba8:	3018      	adds	r0, #24
 8003baa:	4283      	cmp	r3, r0
 8003bac:	d027      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bae:	3018      	adds	r0, #24
 8003bb0:	4283      	cmp	r3, r0
 8003bb2:	d024      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bb4:	3018      	adds	r0, #24
 8003bb6:	4283      	cmp	r3, r0
 8003bb8:	d021      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bba:	3018      	adds	r0, #24
 8003bbc:	4283      	cmp	r3, r0
 8003bbe:	d01e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bc0:	3018      	adds	r0, #24
 8003bc2:	4283      	cmp	r3, r0
 8003bc4:	d01b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bc6:	3018      	adds	r0, #24
 8003bc8:	4283      	cmp	r3, r0
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bcc:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	d014      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bd4:	3018      	adds	r0, #24
 8003bd6:	4283      	cmp	r3, r0
 8003bd8:	d011      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bda:	3018      	adds	r0, #24
 8003bdc:	4283      	cmp	r3, r0
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003be0:	3018      	adds	r0, #24
 8003be2:	4283      	cmp	r3, r0
 8003be4:	d00b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003be6:	3018      	adds	r0, #24
 8003be8:	4283      	cmp	r3, r0
 8003bea:	d008      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bec:	3018      	adds	r0, #24
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	d005      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bf2:	3018      	adds	r0, #24
 8003bf4:	4283      	cmp	r3, r0
 8003bf6:	d002      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x36a>
 8003bf8:	3018      	adds	r0, #24
 8003bfa:	4283      	cmp	r3, r0
 8003bfc:	d134      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x3d4>
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	f010 0f10 	tst.w	r0, #16
 8003c04:	d03e      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x3f0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c06:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c08:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8003c0c:	2904      	cmp	r1, #4
 8003c0e:	d12f      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x3dc>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	f021 0116 	bic.w	r1, r1, #22
 8003c16:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c18:	6959      	ldr	r1, [r3, #20]
 8003c1a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003c1e:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c22:	b909      	cbnz	r1, 8003c28 <HAL_DMA_IRQHandler+0x394>
 8003c24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003c26:	b119      	cbz	r1, 8003c30 <HAL_DMA_IRQHandler+0x39c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	f021 0108 	bic.w	r1, r1, #8
 8003c2e:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c30:	233f      	movs	r3, #63	; 0x3f
 8003c32:	fa03 f202 	lsl.w	r2, r3, r2
          hdma->State = HAL_DMA_STATE_READY;
 8003c36:	2301      	movs	r3, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c38:	60aa      	str	r2, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003c44:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 808e 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x4d4>
        hdma->XferErrorCallback(hdma);
 8003c4c:	4620      	mov	r0, r4
}
 8003c4e:	b002      	add	sp, #8
 8003c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8003c54:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	05d2      	lsls	r2, r2, #23
 8003c5a:	f53f af74 	bmi.w	8003b46 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f022 0208 	bic.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e76e      	b.n	8003b46 <HAL_DMA_IRQHandler+0x2b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f010 0f02 	tst.w	r0, #2
 8003c6e:	e7c9      	b.n	8003c04 <HAL_DMA_IRQHandler+0x370>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	0355      	lsls	r5, r2, #13
 8003c74:	d54d      	bpl.n	8003d12 <HAL_DMA_IRQHandler+0x47e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0318      	lsls	r0, r3, #12
 8003c7a:	d457      	bmi.n	8003d2c <HAL_DMA_IRQHandler+0x498>
            if(hdma->XferM1CpltCallback != NULL)
 8003c7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8003c7e:	b10b      	cbz	r3, 8003c84 <HAL_DMA_IRQHandler+0x3f0>
            hdma->XferCpltCallback(hdma);
 8003c80:	4620      	mov	r0, r4
 8003c82:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d06e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x4d4>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c8c:	07d9      	lsls	r1, r3, #31
 8003c8e:	d53e      	bpl.n	8003d0e <HAL_DMA_IRQHandler+0x47a>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c90:	2304      	movs	r3, #4
 8003c92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	42b3      	cmp	r3, r6
 8003c9a:	d01e      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_DMA_IRQHandler+0x544>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01b      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003ca2:	3218      	adds	r2, #24
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003ca8:	3218      	adds	r2, #24
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d015      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cae:	3218      	adds	r2, #24
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d012      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cb4:	3218      	adds	r2, #24
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cba:	3218      	adds	r2, #24
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00c      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cc0:	3218      	adds	r2, #24
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cc6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d005      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cce:	3218      	adds	r2, #24
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d002      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cd4:	3218      	adds	r2, #24
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d0ff      	beq.n	8003cda <HAL_DMA_IRQHandler+0x446>
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ce2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ce6:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 8003cea:	9a01      	ldr	r2, [sp, #4]
 8003cec:	3201      	adds	r2, #1
 8003cee:	42ba      	cmp	r2, r7
 8003cf0:	9201      	str	r2, [sp, #4]
 8003cf2:	d802      	bhi.n	8003cfa <HAL_DMA_IRQHandler+0x466>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	07d2      	lsls	r2, r2, #31
 8003cf8:	d4f7      	bmi.n	8003cea <HAL_DMA_IRQHandler+0x456>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003cfe:	bf4c      	ite	mi
 8003d00:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003d02:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8003d04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8003d0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d10:	e799      	b.n	8003c46 <HAL_DMA_IRQHandler+0x3b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003d18:	d108      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x498>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	f021 0110 	bic.w	r1, r1, #16
 8003d20:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003d22:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003d24:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003d28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8003d2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d2e:	e7a6      	b.n	8003c7e <HAL_DMA_IRQHandler+0x3ea>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_DMA_IRQHandler+0x548>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f43f adf0 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
 8003d38:	3214      	adds	r2, #20
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f43f adec 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
 8003d40:	3214      	adds	r2, #20
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f43f ade8 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
 8003d48:	3214      	adds	r2, #20
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f43f ade4 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
 8003d50:	3214      	adds	r2, #20
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f43f ade0 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
 8003d58:	3214      	adds	r2, #20
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	f43f addc 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
 8003d60:	3214      	adds	r2, #20
 8003d62:	4293      	cmp	r3, r2
 8003d64:	f43f add8 	beq.w	8003918 <HAL_DMA_IRQHandler+0x84>
}
 8003d68:	b002      	add	sp, #8
 8003d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d6e:	0697      	lsls	r7, r2, #26
 8003d70:	d403      	bmi.n	8003d7a <HAL_DMA_IRQHandler+0x4e6>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	f022 0204 	bic.w	r2, r2, #4
 8003d78:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d7c:	e763      	b.n	8003c46 <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d7e:	2002      	movs	r0, #2
 8003d80:	4088      	lsls	r0, r1
 8003d82:	ea10 0f0c 	tst.w	r0, ip
 8003d86:	d016      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x522>
 8003d88:	0796      	lsls	r6, r2, #30
 8003d8a:	d514      	bpl.n	8003db6 <HAL_DMA_IRQHandler+0x522>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d8c:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d8e:	0410      	lsls	r0, r2, #16
 8003d90:	d503      	bpl.n	8003d9a <HAL_DMA_IRQHandler+0x506>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d92:	03d1      	lsls	r1, r2, #15
 8003d94:	d40d      	bmi.n	8003db2 <HAL_DMA_IRQHandler+0x51e>
          if(hdma->XferM1CpltCallback != NULL)
 8003d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d98:	e755      	b.n	8003c46 <HAL_DMA_IRQHandler+0x3b2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d9a:	f012 0220 	ands.w	r2, r2, #32
 8003d9e:	d108      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x51e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	f021 010a 	bic.w	r1, r1, #10
 8003da6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003da8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8003daa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003dae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003db4:	e747      	b.n	8003c46 <HAL_DMA_IRQHandler+0x3b2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003db6:	2008      	movs	r0, #8
 8003db8:	4088      	lsls	r0, r1
 8003dba:	ea10 0f0c 	tst.w	r0, ip
 8003dbe:	d0d3      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x4d4>
 8003dc0:	0712      	lsls	r2, r2, #28
 8003dc2:	d5d1      	bpl.n	8003d68 <HAL_DMA_IRQHandler+0x4d4>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dcc:	2301      	movs	r3, #1
 8003dce:	fa03 f101 	lsl.w	r1, r3, r1
 8003dd2:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd4:	6563      	str	r3, [r4, #84]	; 0x54
 8003dd6:	e795      	b.n	8003d04 <HAL_DMA_IRQHandler+0x470>
 8003dd8:	40020028 	.word	0x40020028
 8003ddc:	5802541c 	.word	0x5802541c

08003de0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003de2:	e9d1 4700 	ldrd	r4, r7, [r1]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003de6:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003de8:	688e      	ldr	r6, [r1, #8]
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003dea:	b9f7      	cbnz	r7, 8003e2a <FDCAN_CopyMessageToRAM+0x4a>
                   FDCAN_STANDARD_ID |
 8003dec:	4335      	orrs	r5, r6
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dee:	ea45 4484 	orr.w	r4, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003df2:	e9d1 6506 	ldrd	r6, r5, [r1, #24]
 8003df6:	4335      	orrs	r5, r6
 8003df8:	694e      	ldr	r6, [r1, #20]
 8003dfa:	4335      	orrs	r5, r6
 8003dfc:	68ce      	ldr	r6, [r1, #12]
 8003dfe:	4335      	orrs	r5, r6
 8003e00:	6a0e      	ldr	r6, [r1, #32]
 8003e02:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003e06:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8003e08:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8003e0c:	4373      	muls	r3, r6
 8003e0e:	eb00 0683 	add.w	r6, r0, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003e12:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003e16:	2000      	movs	r0, #0
 8003e18:	4c0f      	ldr	r4, [pc, #60]	; (8003e58 <FDCAN_CopyMessageToRAM+0x78>)
  *TxAddress = TxElementW2;
 8003e1a:	6075      	str	r5, [r6, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003e1c:	3608      	adds	r6, #8
 8003e1e:	89cb      	ldrh	r3, [r1, #14]
 8003e20:	3204      	adds	r2, #4
 8003e22:	5ce3      	ldrb	r3, [r4, r3]
 8003e24:	4283      	cmp	r3, r0
 8003e26:	d805      	bhi.n	8003e34 <FDCAN_CopyMessageToRAM+0x54>
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
                  (uint32_t)pTxData[ByteCounter]);
    TxAddress++;
  }
}
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8003e2a:	432c      	orrs	r4, r5
 8003e2c:	4334      	orrs	r4, r6
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e2e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8003e32:	e7de      	b.n	8003df2 <FDCAN_CopyMessageToRAM+0x12>
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003e34:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003e38:	f812 5c01 	ldrb.w	r5, [r2, #-1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003e3c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003e3e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
                  (uint32_t)pTxData[ByteCounter]);
 8003e42:	f812 5c04 	ldrb.w	r5, [r2, #-4]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003e46:	432b      	orrs	r3, r5
 8003e48:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8003e4c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003e50:	5033      	str	r3, [r6, r0]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003e52:	3004      	adds	r0, #4
 8003e54:	e7e3      	b.n	8003e1e <FDCAN_CopyMessageToRAM+0x3e>
 8003e56:	bf00      	nop
 8003e58:	0801a9f0 	.word	0x0801a9f0

08003e5c <HAL_FDCAN_Init>:
{
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	b099      	sub	sp, #100	; 0x64
 8003e62:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003e64:	224c      	movs	r2, #76	; 0x4c
 8003e66:	49c8      	ldr	r1, [pc, #800]	; (8004188 <HAL_FDCAN_Init+0x32c>)
 8003e68:	a805      	add	r0, sp, #20
 8003e6a:	f012 f969 	bl	8016140 <memcpy>
  if (hfdcan == NULL)
 8003e6e:	2c00      	cmp	r4, #0
 8003e70:	f000 81b6 	beq.w	80041e0 <HAL_FDCAN_Init+0x384>
  if (hfdcan->Instance == FDCAN1)
 8003e74:	4bc5      	ldr	r3, [pc, #788]	; (800418c <HAL_FDCAN_Init+0x330>)
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	429a      	cmp	r2, r3
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003e7a:	bf04      	itt	eq
 8003e7c:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8003e80:	6063      	streq	r3, [r4, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e82:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8003e86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e8a:	b923      	cbnz	r3, 8003e96 <HAL_FDCAN_Init+0x3a>
    HAL_FDCAN_MspInit(hfdcan);
 8003e8c:	4620      	mov	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
 8003e8e:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8003e92:	f7fc ffd9 	bl	8000e48 <HAL_FDCAN_MspInit>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	6993      	ldr	r3, [r2, #24]
 8003e9a:	f023 0310 	bic.w	r3, r3, #16
 8003e9e:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8003ea0:	f7fe f8b2 	bl	8002008 <HAL_GetTick>
 8003ea4:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	0711      	lsls	r1, r2, #28
 8003eac:	f100 8189 	bmi.w	80041c2 <HAL_FDCAN_Init+0x366>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8003eb8:	f7fe f8a6 	bl	8002008 <HAL_GetTick>
 8003ebc:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	07d2      	lsls	r2, r2, #31
 8003ec4:	f140 818e 	bpl.w	80041e4 <HAL_FDCAN_Init+0x388>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	f042 0202 	orr.w	r2, r2, #2
 8003ece:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003ed0:	7c22      	ldrb	r2, [r4, #16]
 8003ed2:	2a01      	cmp	r2, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	bf0c      	ite	eq
 8003ed8:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003edc:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8003ee0:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ee2:	7c62      	ldrb	r2, [r4, #17]
 8003ee4:	2a01      	cmp	r2, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	bf0c      	ite	eq
 8003eea:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003eee:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8003ef2:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ef4:	7ca2      	ldrb	r2, [r4, #18]
 8003ef6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	bf0c      	ite	eq
 8003efc:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f00:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8003f04:	619a      	str	r2, [r3, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	68a0      	ldr	r0, [r4, #8]
 8003f0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f0e:	4302      	orrs	r2, r0
 8003f10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003f18:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	f022 0210 	bic.w	r2, r2, #16
 8003f20:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f22:	68e2      	ldr	r2, [r4, #12]
 8003f24:	2a01      	cmp	r2, #1
 8003f26:	f040 8164 	bne.w	80041f2 <HAL_FDCAN_Init+0x396>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	f042 0204 	orr.w	r2, r2, #4
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f30:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f32:	69a2      	ldr	r2, [r4, #24]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003f34:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f38:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f3c:	69e2      	ldr	r2, [r4, #28]
 8003f3e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003f42:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f46:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f4a:	6a21      	ldr	r1, [r4, #32]
 8003f4c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f50:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003f54:	6961      	ldr	r1, [r4, #20]
 8003f56:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f5e:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003f60:	d10e      	bne.n	8003f80 <HAL_FDCAN_Init+0x124>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003f62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f64:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003f66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003f6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003f70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f72:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003f74:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003f76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f78:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003f7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003f7e:	60da      	str	r2, [r3, #12]
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003f80:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003f82:	b12d      	cbz	r5, 8003f90 <HAL_FDCAN_Init+0x134>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003f84:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f88:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f90:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f94:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f98:	eb15 0f0a 	cmn.w	r5, sl
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_FDCAN_Init+0x15a>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f9e:	a918      	add	r1, sp, #96	; 0x60
 8003fa0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fa4:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8003fa8:	f022 0207 	bic.w	r2, r2, #7
 8003fac:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003fb6:	e9d4 7210 	ldrd	r7, r2, [r4, #64]	; 0x40
 8003fba:	9203      	str	r2, [sp, #12]
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003fbc:	b167      	cbz	r7, 8003fd8 <HAL_FDCAN_Init+0x17c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003fbe:	a818      	add	r0, sp, #96	; 0x60
 8003fc0:	9903      	ldr	r1, [sp, #12]
 8003fc2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003fc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003fca:	f022 0207 	bic.w	r2, r2, #7
 8003fce:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003fd8:	e9d4 6c12 	ldrd	r6, ip, [r4, #72]	; 0x48
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003fdc:	b166      	cbz	r6, 8003ff8 <HAL_FDCAN_Init+0x19c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003fde:	a918      	add	r1, sp, #96	; 0x60
 8003fe0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003fe4:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8003fe8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fec:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8003ff0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003ff4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003ff8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003ffa:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003ffe:	9202      	str	r2, [sp, #8]
 8004000:	b162      	cbz	r2, 800401c <HAL_FDCAN_Init+0x1c0>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004002:	a918      	add	r1, sp, #96	; 0x60
 8004004:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004008:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 800400c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004010:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8004014:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004018:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  if (hfdcan->Instance == FDCAN1)
 800401c:	4a5b      	ldr	r2, [pc, #364]	; (800418c <HAL_FDCAN_Init+0x330>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d104      	bne.n	800402c <HAL_FDCAN_Init+0x1d0>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004022:	6861      	ldr	r1, [r4, #4]
 8004024:	688a      	ldr	r2, [r1, #8]
 8004026:	f022 0203 	bic.w	r2, r2, #3
 800402a:	608a      	str	r2, [r1, #8]
  hfdcan->LatestTxFifoQRequest = 0U;
 800402c:	2200      	movs	r2, #0
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800402e:	4858      	ldr	r0, [pc, #352]	; (8004190 <HAL_FDCAN_Init+0x334>)
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004030:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004034:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  hfdcan->LatestTxFifoQRequest = 0U;
 8004038:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800403c:	f04f 0201 	mov.w	r2, #1
 8004040:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004044:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004046:	9200      	str	r2, [sp, #0]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004048:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800404c:	9900      	ldr	r1, [sp, #0]
 800404e:	4002      	ands	r2, r0
 8004050:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8004054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004058:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800405c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800405e:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8004062:	9201      	str	r2, [sp, #4]
 8004064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004068:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800406c:	9900      	ldr	r1, [sp, #0]
 800406e:	eb01 0e02 	add.w	lr, r1, r2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004072:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004076:	9a03      	ldr	r2, [sp, #12]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004078:	4001      	ands	r1, r0
 800407a:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
 800407e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004082:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004086:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800408a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800408e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004092:	eb0e 0148 	add.w	r1, lr, r8, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004096:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 800409a:	ea0e 0e00 	and.w	lr, lr, r0
 800409e:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 80040a2:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80040a6:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 80040aa:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 80040ae:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80040b2:	4357      	muls	r7, r2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80040b4:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80040b6:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80040ba:	4439      	add	r1, r7
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80040bc:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 80040c0:	ea0e 0e00 	and.w	lr, lr, r0
 80040c4:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 80040c8:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80040cc:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 80040d0:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 80040d4:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80040d8:	fb0c f606 	mul.w	r6, ip, r6
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80040dc:	fb09 fc02 	mul.w	ip, r9, r2
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80040e0:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80040e4:	4431      	add	r1, r6
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80040e6:	f8d3 e0ac 	ldr.w	lr, [r3, #172]	; 0xac
 80040ea:	ea0e 0e00 	and.w	lr, lr, r0
 80040ee:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80040f2:	4461      	add	r1, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80040f4:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80040f8:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 80040fc:	ea0e 0e00 	and.w	lr, lr, r0
 8004100:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 8004104:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004108:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 800410c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004110:	f42e 1e7c 	bic.w	lr, lr, #4128768	; 0x3f0000
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004114:	9a01      	ldr	r2, [sp, #4]
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004116:	eb01 0149 	add.w	r1, r1, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800411a:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 800411e:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004122:	f8d3 e0c0 	ldr.w	lr, [r3, #192]	; 0xc0
 8004126:	ea0e 0000 	and.w	r0, lr, r0
 800412a:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
 800412e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004132:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004136:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 800413a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800413e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004142:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004146:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 800414a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800414e:	fb0b f505 	mul.w	r5, fp, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004152:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800415c:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8004160:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004162:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004166:	66e3      	str	r3, [r4, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004168:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800416a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800416e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004172:	6762      	str	r2, [r4, #116]	; 0x74
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004174:	4a07      	ldr	r2, [pc, #28]	; (8004194 <HAL_FDCAN_Init+0x338>)
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004176:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800417a:	67a7      	str	r7, [r4, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800417c:	67e6      	str	r6, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800417e:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8004182:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8004186:	e007      	b.n	8004198 <HAL_FDCAN_Init+0x33c>
 8004188:	0801a964 	.word	0x0801a964
 800418c:	4000a000 	.word	0x4000a000
 8004190:	ffff0003 	.word	0xffff0003
 8004194:	4000d3fc 	.word	0x4000d3fc
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004198:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800419c:	fb0b f90a 	mul.w	r9, fp, sl
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80041a0:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80041a4:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80041a8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80041ac:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80041b0:	4295      	cmp	r5, r2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80041b2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80041b6:	d933      	bls.n	8004220 <HAL_FDCAN_Init+0x3c4>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80041b8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80041bc:	f043 0320 	orr.w	r3, r3, #32
 80041c0:	e009      	b.n	80041d6 <HAL_FDCAN_Init+0x37a>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041c2:	f7fd ff21 	bl	8002008 <HAL_GetTick>
 80041c6:	1b40      	subs	r0, r0, r5
 80041c8:	280a      	cmp	r0, #10
 80041ca:	f67f ae6c 	bls.w	8003ea6 <HAL_FDCAN_Init+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041ce:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80041d2:	f043 0301 	orr.w	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80041d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041da:	2303      	movs	r3, #3
 80041dc:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
    return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
 80041e2:	e022      	b.n	800422a <HAL_FDCAN_Init+0x3ce>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041e4:	f7fd ff10 	bl	8002008 <HAL_GetTick>
 80041e8:	1b40      	subs	r0, r0, r5
 80041ea:	280a      	cmp	r0, #10
 80041ec:	f67f ae67 	bls.w	8003ebe <HAL_FDCAN_Init+0x62>
 80041f0:	e7ed      	b.n	80041ce <HAL_FDCAN_Init+0x372>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	f43f ae9d 	beq.w	8003f32 <HAL_FDCAN_Init+0xd6>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80041f8:	2a02      	cmp	r2, #2
 80041fa:	d00a      	beq.n	8004212 <HAL_FDCAN_Init+0x3b6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80041fc:	6999      	ldr	r1, [r3, #24]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80041fe:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004200:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004204:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004206:	6919      	ldr	r1, [r3, #16]
 8004208:	f041 0110 	orr.w	r1, r1, #16
 800420c:	6119      	str	r1, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800420e:	f47f ae90 	bne.w	8003f32 <HAL_FDCAN_Init+0xd6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	e68a      	b.n	8003f30 <HAL_FDCAN_Init+0xd4>
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800421a:	2200      	movs	r2, #0
 800421c:	f843 2b04 	str.w	r2, [r3], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004220:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004224:	4293      	cmp	r3, r2
 8004226:	d3f8      	bcc.n	800421a <HAL_FDCAN_Init+0x3be>
  return HAL_OK;
 8004228:	2000      	movs	r0, #0
}
 800422a:	b019      	add	sp, #100	; 0x64
 800422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004230 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8004230:	b570      	push	{r4, r5, r6, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004232:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
{
 8004236:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004238:	2b02      	cmp	r3, #2
 800423a:	d127      	bne.n	800428c <HAL_FDCAN_AddMessageToTxFifoQ+0x5c>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800423c:	6806      	ldr	r6, [r0, #0]
 800423e:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
 8004242:	f013 5f7c 	tst.w	r3, #1056964608	; 0x3f000000
 8004246:	d107      	bne.n	8004258 <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004248:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800424c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_ERROR;
 8004250:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004252:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    return HAL_ERROR;
 8004256:	e018      	b.n	800428a <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004258:	f8d6 50c4 	ldr.w	r5, [r6, #196]	; 0xc4
 800425c:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004260:	d004      	beq.n	800426c <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004262:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8004266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800426a:	e7f1      	b.n	8004250 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800426c:	f8d6 60c4 	ldr.w	r6, [r6, #196]	; 0xc4
 8004270:	f3c6 4604 	ubfx	r6, r6, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004274:	4633      	mov	r3, r6
 8004276:	f7ff fdb3 	bl	8003de0 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800427a:	2201      	movs	r2, #1
 800427c:	6821      	ldr	r1, [r4, #0]
    return HAL_OK;
 800427e:	4628      	mov	r0, r5
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004280:	40b2      	lsls	r2, r6
 8004282:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004286:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
}
 800428a:	bd70      	pop	{r4, r5, r6, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800428c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	e7dc      	b.n	8004250 <HAL_FDCAN_AddMessageToTxFifoQ+0x20>
	...

08004298 <HAL_FDCAN_GetRxMessage>:
{
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800429a:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
  if (state == HAL_FDCAN_STATE_BUSY)
 800429e:	2c02      	cmp	r4, #2
 80042a0:	f040 80a8 	bne.w	80043f4 <HAL_FDCAN_GetRxMessage+0x15c>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80042a4:	2940      	cmp	r1, #64	; 0x40
 80042a6:	d164      	bne.n	8004372 <HAL_FDCAN_GetRxMessage+0xda>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80042a8:	6804      	ldr	r4, [r0, #0]
 80042aa:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80042ae:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 80042b2:	d104      	bne.n	80042be <HAL_FDCAN_GetRxMessage+0x26>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80042b4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	e007      	b.n	80042ce <HAL_FDCAN_GetRxMessage+0x36>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80042be:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 80042c2:	066d      	lsls	r5, r5, #25
 80042c4:	d107      	bne.n	80042d6 <HAL_FDCAN_GetRxMessage+0x3e>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80042c6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042ce:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 80042d2:	2001      	movs	r0, #1
 80042d4:	e04c      	b.n	8004370 <HAL_FDCAN_GetRxMessage+0xd8>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80042d6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 80042da:	01ef      	lsls	r7, r5, #7
 80042dc:	d501      	bpl.n	80042e2 <HAL_FDCAN_GetRxMessage+0x4a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80042de:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80042e2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80042e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80042e8:	f3c5 2505 	ubfx	r5, r5, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80042ec:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80042ee:	436c      	muls	r4, r5
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80042f0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80042f4:	6827      	ldr	r7, [r4, #0]
 80042f6:	f007 4780 	and.w	r7, r7, #1073741824	; 0x40000000
 80042fa:	6057      	str	r7, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80042fc:	6826      	ldr	r6, [r4, #0]
 80042fe:	2f00      	cmp	r7, #0
 8004300:	d15b      	bne.n	80043ba <HAL_FDCAN_GetRxMessage+0x122>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004302:	f3c6 468a 	ubfx	r6, r6, #18, #11
 8004306:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004308:	3408      	adds	r4, #8
 800430a:	f854 6c08 	ldr.w	r6, [r4, #-8]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800430e:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8004400 <HAL_FDCAN_GetRxMessage+0x168>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004312:	f006 5600 	and.w	r6, r6, #536870912	; 0x20000000
 8004316:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004318:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800431c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004320:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004322:	f834 6c04 	ldrh.w	r6, [r4, #-4]
 8004326:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004328:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800432c:	f406 2670 	and.w	r6, r6, #983040	; 0xf0000
 8004330:	60d6      	str	r6, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004332:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004336:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 800433a:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800433c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004340:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8004344:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004346:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800434a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800434e:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004350:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004354:	0ff6      	lsrs	r6, r6, #31
 8004356:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004358:	2600      	movs	r6, #0
 800435a:	89d7      	ldrh	r7, [r2, #14]
 800435c:	f81c 7007 	ldrb.w	r7, [ip, r7]
 8004360:	42b7      	cmp	r7, r6
 8004362:	d82d      	bhi.n	80043c0 <HAL_FDCAN_GetRxMessage+0x128>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004364:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8004366:	6802      	ldr	r2, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004368:	d12f      	bne.n	80043ca <HAL_FDCAN_GetRxMessage+0x132>
      hfdcan->Instance->RXF0A = GetIndex;
 800436a:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8
    return HAL_OK;
 800436e:	2000      	movs	r0, #0
}
 8004370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004372:	2941      	cmp	r1, #65	; 0x41
 8004374:	d117      	bne.n	80043a6 <HAL_FDCAN_GetRxMessage+0x10e>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004376:	6804      	ldr	r4, [r0, #0]
 8004378:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 800437c:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 8004380:	d098      	beq.n	80042b4 <HAL_FDCAN_GetRxMessage+0x1c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004382:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8004386:	066e      	lsls	r6, r5, #25
 8004388:	d09d      	beq.n	80042c6 <HAL_FDCAN_GetRxMessage+0x2e>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800438a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800438e:	01ed      	lsls	r5, r5, #7
 8004390:	d501      	bpl.n	8004396 <HAL_FDCAN_GetRxMessage+0xfe>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004392:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004396:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800439a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800439c:	f3c5 2505 	ubfx	r5, r5, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80043a0:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80043a2:	436c      	muls	r4, r5
 80043a4:	e7a4      	b.n	80042f0 <HAL_FDCAN_GetRxMessage+0x58>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80043a6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80043a8:	428c      	cmp	r4, r1
 80043aa:	d983      	bls.n	80042b4 <HAL_FDCAN_GetRxMessage+0x1c>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80043ac:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80043ae:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 80043b0:	434c      	muls	r4, r1
 80043b2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 80043b6:	2500      	movs	r5, #0
 80043b8:	e79c      	b.n	80042f4 <HAL_FDCAN_GetRxMessage+0x5c>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80043ba:	f026 4660 	bic.w	r6, r6, #3758096384	; 0xe0000000
 80043be:	e7a2      	b.n	8004306 <HAL_FDCAN_GetRxMessage+0x6e>
      pRxData[ByteCounter] = pData[ByteCounter];
 80043c0:	f814 7b01 	ldrb.w	r7, [r4], #1
 80043c4:	559f      	strb	r7, [r3, r6]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7c7      	b.n	800435a <HAL_FDCAN_GetRxMessage+0xc2>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80043ca:	2941      	cmp	r1, #65	; 0x41
 80043cc:	d102      	bne.n	80043d4 <HAL_FDCAN_GetRxMessage+0x13c>
      hfdcan->Instance->RXF1A = GetIndex;
 80043ce:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
 80043d2:	e7cc      	b.n	800436e <HAL_FDCAN_GetRxMessage+0xd6>
      if (RxLocation < FDCAN_RX_BUFFER32)
 80043d4:	291f      	cmp	r1, #31
 80043d6:	f04f 0301 	mov.w	r3, #1
 80043da:	d804      	bhi.n	80043e6 <HAL_FDCAN_GetRxMessage+0x14e>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80043dc:	fa03 f101 	lsl.w	r1, r3, r1
 80043e0:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 80043e4:	e7c3      	b.n	800436e <HAL_FDCAN_GetRxMessage+0xd6>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80043e6:	f001 011f 	and.w	r1, r1, #31
 80043ea:	fa03 f101 	lsl.w	r1, r3, r1
 80043ee:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 80043f2:	e7bc      	b.n	800436e <HAL_FDCAN_GetRxMessage+0xd6>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80043f4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	e767      	b.n	80042ce <HAL_FDCAN_GetRxMessage+0x36>
 80043fe:	bf00      	nop
 8004400:	0801a9f0 	.word	0x0801a9f0

08004404 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004404:	6803      	ldr	r3, [r0, #0]
 8004406:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 800440a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800440e:	4770      	bx	lr

08004410 <HAL_FDCAN_ClockCalibrationCallback>:
}
 8004410:	4770      	bx	lr

08004412 <HAL_FDCAN_TxEventFifoCallback>:
 8004412:	4770      	bx	lr

08004414 <HAL_FDCAN_TxFifoEmptyCallback>:
 8004414:	4770      	bx	lr

08004416 <HAL_FDCAN_TxBufferAbortCallback>:
 8004416:	4770      	bx	lr

08004418 <HAL_FDCAN_RxBufferNewMessageCallback>:
 8004418:	4770      	bx	lr

0800441a <HAL_FDCAN_TimestampWraparoundCallback>:
 800441a:	4770      	bx	lr

0800441c <HAL_FDCAN_TimeoutOccurredCallback>:
 800441c:	4770      	bx	lr

0800441e <HAL_FDCAN_HighPriorityMessageCallback>:
 800441e:	4770      	bx	lr

08004420 <HAL_FDCAN_ErrorCallback>:
 8004420:	4770      	bx	lr

08004422 <HAL_FDCAN_ErrorStatusCallback>:
 8004422:	4770      	bx	lr

08004424 <HAL_FDCAN_TT_ScheduleSyncCallback>:
 8004424:	4770      	bx	lr

08004426 <HAL_FDCAN_TT_TimeMarkCallback>:
 8004426:	4770      	bx	lr

08004428 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8004428:	4770      	bx	lr

0800442a <HAL_FDCAN_TT_GlobalTimeCallback>:
 800442a:	4770      	bx	lr

0800442c <HAL_FDCAN_IRQHandler>:
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800442c:	4aa0      	ldr	r2, [pc, #640]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
{
 800442e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004432:	6913      	ldr	r3, [r2, #16]
{
 8004434:	4604      	mov	r4, r0
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004436:	6955      	ldr	r5, [r2, #20]
 8004438:	07ad      	lsls	r5, r5, #30
 800443a:	ea05 7583 	and.w	r5, r5, r3, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800443e:	6803      	ldr	r3, [r0, #0]
 8004440:	6d19      	ldr	r1, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004442:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8004444:	ea01 0a06 	and.w	sl, r1, r6
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004448:	6d19      	ldr	r1, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800444a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  TxEventFifoITs &= hfdcan->Instance->IE;
 800444c:	f40a 4a70 	and.w	sl, sl, #61440	; 0xf000
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004450:	ea01 0906 	and.w	r9, r1, r6
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004454:	6d19      	ldr	r1, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004456:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004458:	f009 090f 	and.w	r9, r9, #15
  RxFifo1ITs &= hfdcan->Instance->IE;
 800445c:	ea01 0806 	and.w	r8, r1, r6
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004460:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8004462:	6d59      	ldr	r1, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004464:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004466:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
  Errors &= hfdcan->Instance->IE;
 800446a:	400e      	ands	r6, r1
  ErrorStatusITs &= hfdcan->Instance->IE;
 800446c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800446e:	400f      	ands	r7, r1
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004470:	6d59      	ldr	r1, [r3, #84]	; 0x54
  Errors &= hfdcan->Instance->IE;
 8004472:	f006 5671 	and.w	r6, r6, #1010827264	; 0x3c400000
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004476:	05c9      	lsls	r1, r1, #23
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004478:	f007 7760 	and.w	r7, r7, #58720256	; 0x3800000
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800447c:	d509      	bpl.n	8004492 <HAL_FDCAN_IRQHandler+0x66>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800447e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004480:	05c9      	lsls	r1, r1, #23
 8004482:	d506      	bpl.n	8004492 <HAL_FDCAN_IRQHandler+0x66>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004488:	6519      	str	r1, [r3, #80]	; 0x50
 800448a:	2300      	movs	r3, #0
 800448c:	6113      	str	r3, [r2, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800448e:	f7ff ffc6 	bl	800441e <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004496:	0551      	lsls	r1, r2, #21
 8004498:	d510      	bpl.n	80044bc <HAL_FDCAN_IRQHandler+0x90>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800449a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800449c:	0552      	lsls	r2, r2, #21
 800449e:	d50d      	bpl.n	80044bc <HAL_FDCAN_IRQHandler+0x90>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80044a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80044a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80044a8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80044ac:	6518      	str	r0, [r3, #80]	; 0x50
 80044ae:	2000      	movs	r0, #0
 80044b0:	4b7f      	ldr	r3, [pc, #508]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80044b2:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80044b4:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff ffad 	bl	8004416 <HAL_FDCAN_TxBufferAbortCallback>
  if (ClkCalibrationITs != 0U)
 80044bc:	b14d      	cbz	r5, 80044d2 <HAL_FDCAN_IRQHandler+0xa6>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	2200      	movs	r2, #0
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80044c2:	4629      	mov	r1, r5
 80044c4:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80044c6:	651a      	str	r2, [r3, #80]	; 0x50
 80044c8:	0faa      	lsrs	r2, r5, #30
 80044ca:	4b79      	ldr	r3, [pc, #484]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 80044cc:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80044ce:	f7ff ff9f 	bl	8004410 <HAL_FDCAN_ClockCalibrationCallback>
  if (TxEventFifoITs != 0U)
 80044d2:	f1ba 0f00 	cmp.w	sl, #0
 80044d6:	d009      	beq.n	80044ec <HAL_FDCAN_IRQHandler+0xc0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	2200      	movs	r2, #0
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80044dc:	4651      	mov	r1, sl
 80044de:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80044e0:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
 80044e4:	4b72      	ldr	r3, [pc, #456]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 80044e6:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80044e8:	f7ff ff93 	bl	8004412 <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 80044ec:	f1b9 0f00 	cmp.w	r9, #0
 80044f0:	d009      	beq.n	8004506 <HAL_FDCAN_IRQHandler+0xda>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	2200      	movs	r2, #0
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80044f6:	4649      	mov	r1, r9
 80044f8:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80044fa:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 8004500:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004502:	f009 f8ff 	bl	800d704 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 8004506:	f1b8 0f00 	cmp.w	r8, #0
 800450a:	d009      	beq.n	8004520 <HAL_FDCAN_IRQHandler+0xf4>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	2200      	movs	r2, #0
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004510:	4641      	mov	r1, r8
 8004512:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004514:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8004518:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 800451a:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800451c:	f009 f8f8 	bl	800d710 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004524:	0510      	lsls	r0, r2, #20
 8004526:	d50b      	bpl.n	8004540 <HAL_FDCAN_IRQHandler+0x114>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800452a:	0511      	lsls	r1, r2, #20
 800452c:	d508      	bpl.n	8004540 <HAL_FDCAN_IRQHandler+0x114>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800452e:	f44f 6200 	mov.w	r2, #2048	; 0x800
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004532:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
 8004536:	2200      	movs	r2, #0
 8004538:	4b5d      	ldr	r3, [pc, #372]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 800453a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800453c:	f7ff ff6a 	bl	8004414 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004544:	0592      	lsls	r2, r2, #22
 8004546:	d510      	bpl.n	800456a <HAL_FDCAN_IRQHandler+0x13e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800454a:	0595      	lsls	r5, r2, #22
 800454c:	d50d      	bpl.n	800456a <HAL_FDCAN_IRQHandler+0x13e>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800454e:	f44f 7000 	mov.w	r0, #512	; 0x200
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004552:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004556:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800455a:	6518      	str	r0, [r3, #80]	; 0x50
 800455c:	2000      	movs	r0, #0
 800455e:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004560:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004562:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004564:	4620      	mov	r0, r4
 8004566:	f009 f8d9 	bl	800d71c <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456e:	0310      	lsls	r0, r2, #12
 8004570:	d50b      	bpl.n	800458a <HAL_FDCAN_IRQHandler+0x15e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004574:	0311      	lsls	r1, r2, #12
 8004576:	d508      	bpl.n	800458a <HAL_FDCAN_IRQHandler+0x15e>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004578:	f44f 2200 	mov.w	r2, #524288	; 0x80000
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800457c:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800457e:	651a      	str	r2, [r3, #80]	; 0x50
 8004580:	2200      	movs	r2, #0
 8004582:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 8004584:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004586:	f7ff ff47 	bl	8004418 <HAL_FDCAN_RxBufferNewMessageCallback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458e:	03d2      	lsls	r2, r2, #15
 8004590:	d50b      	bpl.n	80045aa <HAL_FDCAN_IRQHandler+0x17e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004594:	03d5      	lsls	r5, r2, #15
 8004596:	d508      	bpl.n	80045aa <HAL_FDCAN_IRQHandler+0x17e>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800459c:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800459e:	651a      	str	r2, [r3, #80]	; 0x50
 80045a0:	2200      	movs	r2, #0
 80045a2:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 80045a4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80045a6:	f7ff ff38 	bl	800441a <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ae:	0350      	lsls	r0, r2, #13
 80045b0:	d50b      	bpl.n	80045ca <HAL_FDCAN_IRQHandler+0x19e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80045b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b4:	0351      	lsls	r1, r2, #13
 80045b6:	d508      	bpl.n	80045ca <HAL_FDCAN_IRQHandler+0x19e>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80045b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80045bc:	4620      	mov	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80045be:	651a      	str	r2, [r3, #80]	; 0x50
 80045c0:	2200      	movs	r2, #0
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 80045c4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80045c6:	f7ff ff29 	bl	800441c <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ce:	0392      	lsls	r2, r2, #14
 80045d0:	d50e      	bpl.n	80045f0 <HAL_FDCAN_IRQHandler+0x1c4>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80045d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d4:	0395      	lsls	r5, r2, #14
 80045d6:	d50b      	bpl.n	80045f0 <HAL_FDCAN_IRQHandler+0x1c4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80045d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045dc:	2100      	movs	r1, #0
 80045de:	651a      	str	r2, [r3, #80]	; 0x50
 80045e0:	4a33      	ldr	r2, [pc, #204]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 80045e2:	6111      	str	r1, [r2, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80045e4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80045e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045ec:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  if (ErrorStatusITs != 0U)
 80045f0:	b13f      	cbz	r7, 8004602 <HAL_FDCAN_IRQHandler+0x1d6>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80045f2:	651f      	str	r7, [r3, #80]	; 0x50
 80045f4:	2200      	movs	r2, #0
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80045f8:	4639      	mov	r1, r7
 80045fa:	4620      	mov	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80045fc:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80045fe:	f7ff ff10 	bl	8004422 <HAL_FDCAN_ErrorStatusCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004602:	6822      	ldr	r2, [r4, #0]
  if (Errors != 0U)
 8004604:	b146      	cbz	r6, 8004618 <HAL_FDCAN_IRQHandler+0x1ec>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <HAL_FDCAN_IRQHandler+0x284>)
 8004608:	2100      	movs	r1, #0
 800460a:	6516      	str	r6, [r2, #80]	; 0x50
 800460c:	6119      	str	r1, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 800460e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004612:	431e      	orrs	r6, r3
 8004614:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  if (hfdcan->Instance == FDCAN1)
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <HAL_FDCAN_IRQHandler+0x288>)
 800461a:	429a      	cmp	r2, r3
 800461c:	d15c      	bne.n	80046d8 <HAL_FDCAN_IRQHandler+0x2ac>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	0790      	lsls	r0, r2, #30
 8004624:	d058      	beq.n	80046d8 <HAL_FDCAN_IRQHandler+0x2ac>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004626:	6a1a      	ldr	r2, [r3, #32]
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004628:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800462a:	4011      	ands	r1, r2
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800462c:	6a1a      	ldr	r2, [r3, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800462e:	6a58      	ldr	r0, [r3, #36]	; 0x24
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004630:	6a1f      	ldr	r7, [r3, #32]
      if (TTSchedSyncITs != 0U)
 8004632:	f011 010f 	ands.w	r1, r1, #15
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004636:	ea02 0800 	and.w	r8, r2, r0
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800463a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800463c:	6a1e      	ldr	r6, [r3, #32]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800463e:	ea07 0702 	and.w	r7, r7, r2
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004644:	6a1d      	ldr	r5, [r3, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004646:	f008 0830 	and.w	r8, r8, #48	; 0x30
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800464a:	ea06 0602 	and.w	r6, r6, r2
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800464e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004650:	f407 77c0 	and.w	r7, r7, #384	; 0x180
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004654:	ea05 0502 	and.w	r5, r5, r2
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004658:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800465c:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
      if (TTSchedSyncITs != 0U)
 8004660:	d003      	beq.n	800466a <HAL_FDCAN_IRQHandler+0x23e>
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004662:	4620      	mov	r0, r4
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004664:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004666:	f7ff fedd 	bl	8004424 <HAL_FDCAN_TT_ScheduleSyncCallback>
      if (TTTimeMarkITs != 0U)
 800466a:	f1b8 0f00 	cmp.w	r8, #0
 800466e:	d006      	beq.n	800467e <HAL_FDCAN_IRQHandler+0x252>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004670:	6863      	ldr	r3, [r4, #4]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004672:	4641      	mov	r1, r8
 8004674:	4620      	mov	r0, r4
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004676:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800467a:	f7ff fed4 	bl	8004426 <HAL_FDCAN_TT_TimeMarkCallback>
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004682:	0651      	lsls	r1, r2, #25
 8004684:	d50c      	bpl.n	80046a0 <HAL_FDCAN_IRQHandler+0x274>
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	0652      	lsls	r2, r2, #25
 800468a:	d509      	bpl.n	80046a0 <HAL_FDCAN_IRQHandler+0x274>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800468c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800468e:	2040      	movs	r0, #64	; 0x40
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004692:	0c09      	lsrs	r1, r1, #16
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004694:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004696:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff fec4 	bl	8004428 <HAL_FDCAN_TT_StopWatchCallback>
      if (TTGlobTimeITs != 0U)
 80046a0:	b157      	cbz	r7, 80046b8 <HAL_FDCAN_IRQHandler+0x28c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80046a2:	6863      	ldr	r3, [r4, #4]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80046a4:	4639      	mov	r1, r7
 80046a6:	4620      	mov	r0, r4
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80046a8:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80046aa:	f7ff febe 	bl	800442a <HAL_FDCAN_TT_GlobalTimeCallback>
 80046ae:	e003      	b.n	80046b8 <HAL_FDCAN_IRQHandler+0x28c>
 80046b0:	4000a800 	.word	0x4000a800
 80046b4:	4000a000 	.word	0x4000a000
      if (TTDistErrors != 0U)
 80046b8:	b136      	cbz	r6, 80046c8 <HAL_FDCAN_IRQHandler+0x29c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 80046be:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80046c2:	431e      	orrs	r6, r3
 80046c4:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
      if (TTFatalErrors != 0U)
 80046c8:	b135      	cbz	r5, 80046d8 <HAL_FDCAN_IRQHandler+0x2ac>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80046ca:	6863      	ldr	r3, [r4, #4]
 80046cc:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 80046ce:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80046d2:	431d      	orrs	r5, r3
 80046d4:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80046d8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80046dc:	b113      	cbz	r3, 80046e4 <HAL_FDCAN_IRQHandler+0x2b8>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80046de:	4620      	mov	r0, r4
 80046e0:	f7ff fe9e 	bl	8004420 <HAL_FDCAN_ErrorCallback>
}
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80046ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ee:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80048bc <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046f6:	680a      	ldr	r2, [r1, #0]
 80046f8:	fa32 f503 	lsrs.w	r5, r2, r3
 80046fc:	d102      	bne.n	8004704 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80046fe:	b003      	add	sp, #12
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004704:	f04f 0e01 	mov.w	lr, #1
 8004708:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800470c:	ea1e 0202 	ands.w	r2, lr, r2
 8004710:	f000 80bd 	beq.w	800488e <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004714:	684e      	ldr	r6, [r1, #4]
 8004716:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800471a:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800471e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004722:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004726:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004728:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800472c:	2f01      	cmp	r7, #1
 800472e:	d834      	bhi.n	800479a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8004730:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004732:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004736:	68cf      	ldr	r7, [r1, #12]
 8004738:	fa07 f708 	lsl.w	r7, r7, r8
 800473c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004740:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004742:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004744:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004748:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800474c:	409f      	lsls	r7, r3
 800474e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004752:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004754:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004756:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004758:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800475c:	688f      	ldr	r7, [r1, #8]
 800475e:	fa07 f708 	lsl.w	r7, r7, r8
 8004762:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8004766:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004768:	d119      	bne.n	800479e <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800476a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800476e:	f003 0b07 	and.w	fp, r3, #7
 8004772:	f04f 0e0f 	mov.w	lr, #15
 8004776:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800477a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800477e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004782:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004786:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800478a:	690f      	ldr	r7, [r1, #16]
 800478c:	fa07 f70b 	lsl.w	r7, r7, fp
 8004790:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004794:	f8ca 7020 	str.w	r7, [sl, #32]
 8004798:	e001      	b.n	800479e <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800479a:	2d03      	cmp	r5, #3
 800479c:	d1da      	bne.n	8004754 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800479e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a0:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a4:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047a8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ac:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 80047b0:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b2:	d06c      	beq.n	800488e <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80047b8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047bc:	f003 0c03 	and.w	ip, r3, #3
 80047c0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c4:	f045 0502 	orr.w	r5, r5, #2
 80047c8:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d0:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80047d4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80047d8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80047dc:	f005 0502 	and.w	r5, r5, #2
 80047e0:	9501      	str	r5, [sp, #4]
 80047e2:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047e4:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80047e8:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047ec:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047f0:	4d31      	ldr	r5, [pc, #196]	; (80048b8 <HAL_GPIO_Init+0x1d0>)
 80047f2:	42a8      	cmp	r0, r5
 80047f4:	d04d      	beq.n	8004892 <HAL_GPIO_Init+0x1aa>
 80047f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047fa:	42a8      	cmp	r0, r5
 80047fc:	d04b      	beq.n	8004896 <HAL_GPIO_Init+0x1ae>
 80047fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004802:	42a8      	cmp	r0, r5
 8004804:	d049      	beq.n	800489a <HAL_GPIO_Init+0x1b2>
 8004806:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800480a:	42a8      	cmp	r0, r5
 800480c:	d047      	beq.n	800489e <HAL_GPIO_Init+0x1b6>
 800480e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004812:	42a8      	cmp	r0, r5
 8004814:	d045      	beq.n	80048a2 <HAL_GPIO_Init+0x1ba>
 8004816:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800481a:	42a8      	cmp	r0, r5
 800481c:	d043      	beq.n	80048a6 <HAL_GPIO_Init+0x1be>
 800481e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004822:	42a8      	cmp	r0, r5
 8004824:	d041      	beq.n	80048aa <HAL_GPIO_Init+0x1c2>
 8004826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800482a:	42a8      	cmp	r0, r5
 800482c:	d03f      	beq.n	80048ae <HAL_GPIO_Init+0x1c6>
 800482e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004832:	42a8      	cmp	r0, r5
 8004834:	d03d      	beq.n	80048b2 <HAL_GPIO_Init+0x1ca>
 8004836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800483a:	42a8      	cmp	r0, r5
 800483c:	bf0c      	ite	eq
 800483e:	2509      	moveq	r5, #9
 8004840:	250a      	movne	r5, #10
 8004842:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004846:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800484a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8004850:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8004854:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004856:	bf0c      	ite	eq
 8004858:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800485a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800485c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8004860:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8004862:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8004864:	bf0c      	ite	eq
 8004866:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004868:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800486a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800486e:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004870:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8004874:	bf0c      	ite	eq
 8004876:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004878:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800487a:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800487c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004880:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8004884:	bf54      	ite	pl
 8004886:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8004888:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800488a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800488e:	3301      	adds	r3, #1
 8004890:	e731      	b.n	80046f6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004892:	2500      	movs	r5, #0
 8004894:	e7d5      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 8004896:	2501      	movs	r5, #1
 8004898:	e7d3      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 800489a:	2502      	movs	r5, #2
 800489c:	e7d1      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 800489e:	2503      	movs	r5, #3
 80048a0:	e7cf      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 80048a2:	2504      	movs	r5, #4
 80048a4:	e7cd      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 80048a6:	2505      	movs	r5, #5
 80048a8:	e7cb      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 80048aa:	2506      	movs	r5, #6
 80048ac:	e7c9      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 80048ae:	2507      	movs	r5, #7
 80048b0:	e7c7      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 80048b2:	2508      	movs	r5, #8
 80048b4:	e7c5      	b.n	8004842 <HAL_GPIO_Init+0x15a>
 80048b6:	bf00      	nop
 80048b8:	58020000 	.word	0x58020000
 80048bc:	58024400 	.word	0x58024400

080048c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80048c4:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80048c6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80049f4 <HAL_GPIO_DeInit+0x134>
 80048ca:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80049f8 <HAL_GPIO_DeInit+0x138>
 80048ce:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80049fc <HAL_GPIO_DeInit+0x13c>
 80048d2:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004a00 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 80048d6:	fa31 f302 	lsrs.w	r3, r1, r2
 80048da:	d101      	bne.n	80048e0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80048dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80048e0:	2301      	movs	r3, #1
 80048e2:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 80048e6:	ea1c 0601 	ands.w	r6, ip, r1
 80048ea:	d06d      	beq.n	80049c8 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80048ec:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80048f0:	f002 0703 	and.w	r7, r2, #3
 80048f4:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_GPIO_DeInit+0x130>)
 80048f8:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80048fc:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80048fe:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004900:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004904:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004908:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800490c:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004910:	d05c      	beq.n	80049cc <HAL_GPIO_DeInit+0x10c>
 8004912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004916:	4298      	cmp	r0, r3
 8004918:	d05a      	beq.n	80049d0 <HAL_GPIO_DeInit+0x110>
 800491a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800491e:	4298      	cmp	r0, r3
 8004920:	d058      	beq.n	80049d4 <HAL_GPIO_DeInit+0x114>
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	4298      	cmp	r0, r3
 8004928:	d056      	beq.n	80049d8 <HAL_GPIO_DeInit+0x118>
 800492a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800492e:	4298      	cmp	r0, r3
 8004930:	d054      	beq.n	80049dc <HAL_GPIO_DeInit+0x11c>
 8004932:	4540      	cmp	r0, r8
 8004934:	d054      	beq.n	80049e0 <HAL_GPIO_DeInit+0x120>
 8004936:	4548      	cmp	r0, r9
 8004938:	d054      	beq.n	80049e4 <HAL_GPIO_DeInit+0x124>
 800493a:	4550      	cmp	r0, sl
 800493c:	d054      	beq.n	80049e8 <HAL_GPIO_DeInit+0x128>
 800493e:	4558      	cmp	r0, fp
 8004940:	d054      	beq.n	80049ec <HAL_GPIO_DeInit+0x12c>
 8004942:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004946:	4298      	cmp	r0, r3
 8004948:	bf0c      	ite	eq
 800494a:	2309      	moveq	r3, #9
 800494c:	230a      	movne	r3, #10
 800494e:	40bb      	lsls	r3, r7
 8004950:	4573      	cmp	r3, lr
 8004952:	d119      	bne.n	8004988 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 800495c:	ea27 0706 	bic.w	r7, r7, r6
 8004960:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004964:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8004968:	ea27 0706 	bic.w	r7, r7, r6
 800496c:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8004970:	685f      	ldr	r7, [r3, #4]
 8004972:	ea27 0706 	bic.w	r7, r7, r6
 8004976:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004978:	681f      	ldr	r7, [r3, #0]
 800497a:	ea27 0606 	bic.w	r6, r7, r6
 800497e:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004980:	68a3      	ldr	r3, [r4, #8]
 8004982:	ea23 0305 	bic.w	r3, r3, r5
 8004986:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004988:	2503      	movs	r5, #3
 800498a:	0053      	lsls	r3, r2, #1
 800498c:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800498e:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004992:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004996:	260f      	movs	r6, #15
 8004998:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800499a:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800499c:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800499e:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80049a0:	fa22 f405 	lsr.w	r4, r2, r5
 80049a4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80049a8:	6a25      	ldr	r5, [r4, #32]
 80049aa:	ea25 0606 	bic.w	r6, r5, r6
 80049ae:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b0:	68c4      	ldr	r4, [r0, #12]
 80049b2:	ea24 0403 	bic.w	r4, r4, r3
 80049b6:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80049b8:	6844      	ldr	r4, [r0, #4]
 80049ba:	ea24 040c 	bic.w	r4, r4, ip
 80049be:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049c0:	6884      	ldr	r4, [r0, #8]
 80049c2:	ea24 0303 	bic.w	r3, r4, r3
 80049c6:	6083      	str	r3, [r0, #8]
    position++;
 80049c8:	3201      	adds	r2, #1
 80049ca:	e784      	b.n	80048d6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049cc:	2300      	movs	r3, #0
 80049ce:	e7be      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e7bc      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e7ba      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049d8:	2303      	movs	r3, #3
 80049da:	e7b8      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049dc:	2304      	movs	r3, #4
 80049de:	e7b6      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049e0:	2305      	movs	r3, #5
 80049e2:	e7b4      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049e4:	2306      	movs	r3, #6
 80049e6:	e7b2      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049e8:	2307      	movs	r3, #7
 80049ea:	e7b0      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049ec:	2308      	movs	r3, #8
 80049ee:	e7ae      	b.n	800494e <HAL_GPIO_DeInit+0x8e>
 80049f0:	58020000 	.word	0x58020000
 80049f4:	58021400 	.word	0x58021400
 80049f8:	58021800 	.word	0x58021800
 80049fc:	58021c00 	.word	0x58021c00
 8004a00:	58022000 	.word	0x58022000

08004a04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a04:	b10a      	cbz	r2, 8004a0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a06:	6181      	str	r1, [r0, #24]
  }
}
 8004a08:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a0a:	0409      	lsls	r1, r1, #16
 8004a0c:	e7fb      	b.n	8004a06 <HAL_GPIO_WritePin+0x2>

08004a0e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a0e:	6803      	ldr	r3, [r0, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	0791      	lsls	r1, r2, #30
 8004a14:	d501      	bpl.n	8004a1a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a16:	2200      	movs	r2, #0
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	07d2      	lsls	r2, r2, #31
 8004a1e:	d403      	bmi.n	8004a28 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	619a      	str	r2, [r3, #24]
  }
}
 8004a28:	4770      	bx	lr
	...

08004a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a2c:	b530      	push	{r4, r5, lr}
 8004a2e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a30:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a34:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a36:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a38:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a40:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a42:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a4a:	ea20 0002 	bic.w	r0, r0, r2
 8004a4e:	4303      	orrs	r3, r0
 8004a50:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a52:	bd30      	pop	{r4, r5, pc}
 8004a54:	03ff63ff 	.word	0x03ff63ff

08004a58 <I2C_IsErrorOccurred>:
{
 8004a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a5c:	6803      	ldr	r3, [r0, #0]
{
 8004a5e:	4605      	mov	r5, r0
 8004a60:	4688      	mov	r8, r1
 8004a62:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a64:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a66:	f014 0410 	ands.w	r4, r4, #16
 8004a6a:	d079      	beq.n	8004b60 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6c:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a74:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	0694      	lsls	r4, r2, #26
 8004a7c:	d436      	bmi.n	8004aec <I2C_IsErrorOccurred+0x94>
 8004a7e:	b10e      	cbz	r6, 8004a84 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8004a80:	2404      	movs	r4, #4
 8004a82:	e039      	b.n	8004af8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8004a84:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a88:	d0f6      	beq.n	8004a78 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a8a:	f7fd fabd 	bl	8002008 <HAL_GetTick>
 8004a8e:	1bc0      	subs	r0, r0, r7
 8004a90:	4540      	cmp	r0, r8
 8004a92:	d802      	bhi.n	8004a9a <I2C_IsErrorOccurred+0x42>
 8004a94:	f1b8 0f00 	cmp.w	r8, #0
 8004a98:	d1ed      	bne.n	8004a76 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004a9e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004aa2:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8004aa4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004aa6:	0400      	lsls	r0, r0, #16
 8004aa8:	d50a      	bpl.n	8004ac0 <I2C_IsErrorOccurred+0x68>
 8004aaa:	0449      	lsls	r1, r1, #17
 8004aac:	d408      	bmi.n	8004ac0 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8004aae:	2a20      	cmp	r2, #32
 8004ab0:	d006      	beq.n	8004ac0 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004aba:	f7fd faa5 	bl	8002008 <HAL_GetTick>
 8004abe:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	699c      	ldr	r4, [r3, #24]
 8004ac4:	f014 0420 	ands.w	r4, r4, #32
 8004ac8:	d1d5      	bne.n	8004a76 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004aca:	f7fd fa9d 	bl	8002008 <HAL_GetTick>
 8004ace:	1bc0      	subs	r0, r0, r7
 8004ad0:	2819      	cmp	r0, #25
 8004ad2:	d9f5      	bls.n	8004ac0 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8004ad6:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8004ad8:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004adc:	f043 0320 	orr.w	r3, r3, #32
 8004ae0:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8004aea:	e7e9      	b.n	8004ac0 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8004aec:	2e00      	cmp	r6, #0
 8004aee:	d1c7      	bne.n	8004a80 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af0:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8004af2:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8004af4:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004afc:	05d0      	lsls	r0, r2, #23
 8004afe:	d505      	bpl.n	8004b0c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b00:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004b04:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8004b08:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b0a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b0c:	0551      	lsls	r1, r2, #21
 8004b0e:	d505      	bpl.n	8004b1c <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004b14:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8004b18:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b1a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b1c:	0592      	lsls	r2, r2, #22
 8004b1e:	d521      	bpl.n	8004b64 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b20:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b24:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b28:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004b2a:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8004b2c:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8004b2e:	f7ff ff6e 	bl	8004a0e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004b32:	682a      	ldr	r2, [r5, #0]
 8004b34:	6853      	ldr	r3, [r2, #4]
 8004b36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004b3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004b3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004b48:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004b4a:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8004b4c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8004b4e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004b5a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004b5e:	e003      	b.n	8004b68 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	4626      	mov	r6, r4
 8004b62:	e7c9      	b.n	8004af8 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8004b64:	2e00      	cmp	r6, #0
 8004b66:	d1e0      	bne.n	8004b2a <I2C_IsErrorOccurred+0xd2>
}
 8004b68:	4630      	mov	r0, r6
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004b6e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004b6e:	b570      	push	{r4, r5, r6, lr}
 8004b70:	4604      	mov	r4, r0
 8004b72:	460d      	mov	r5, r1
 8004b74:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	079b      	lsls	r3, r3, #30
 8004b7c:	d501      	bpl.n	8004b82 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004b7e:	2000      	movs	r0, #0
}
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	4632      	mov	r2, r6
 8004b84:	4629      	mov	r1, r5
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7ff ff66 	bl	8004a58 <I2C_IsErrorOccurred>
 8004b8c:	b9a0      	cbnz	r0, 8004bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	1c6a      	adds	r2, r5, #1
 8004b90:	d0f1      	beq.n	8004b76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fd fa39 	bl	8002008 <HAL_GetTick>
 8004b96:	1b80      	subs	r0, r0, r6
 8004b98:	42a8      	cmp	r0, r5
 8004b9a:	d801      	bhi.n	8004ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004b9c:	2d00      	cmp	r5, #0
 8004b9e:	d1ea      	bne.n	8004b76 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004bb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004bb8:	2001      	movs	r0, #1
 8004bba:	e7e1      	b.n	8004b80 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004bbc <I2C_WaitOnFlagUntilTimeout>:
{
 8004bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc0:	9f06      	ldr	r7, [sp, #24]
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4688      	mov	r8, r1
 8004bc6:	4616      	mov	r6, r2
 8004bc8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	6993      	ldr	r3, [r2, #24]
 8004bce:	ea38 0303 	bics.w	r3, r8, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	42b3      	cmp	r3, r6
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e015      	b.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004be0:	1c6b      	adds	r3, r5, #1
 8004be2:	d0f3      	beq.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be4:	f7fd fa10 	bl	8002008 <HAL_GetTick>
 8004be8:	1bc0      	subs	r0, r0, r7
 8004bea:	42a8      	cmp	r0, r5
 8004bec:	d801      	bhi.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	d1eb      	bne.n	8004bca <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004bf4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf6:	f043 0320 	orr.w	r3, r3, #32
 8004bfa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004c08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c10 <I2C_RequestMemoryRead>:
{
 8004c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c14:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <I2C_RequestMemoryRead+0x68>)
{
 8004c18:	4605      	mov	r5, r0
 8004c1a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	b2f2      	uxtb	r2, r6
 8004c20:	2300      	movs	r3, #0
{
 8004c22:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c26:	f7ff ff01 	bl	8004a2c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	4639      	mov	r1, r7
 8004c30:	f7ff ff9d 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c34:	b118      	cbz	r0, 8004c3e <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8004c36:	2001      	movs	r0, #1
}
 8004c38:	b002      	add	sp, #8
 8004c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c3e:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c40:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c42:	d10d      	bne.n	8004c60 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c44:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c46:	2200      	movs	r2, #0
 8004c48:	2140      	movs	r1, #64	; 0x40
 8004c4a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4e:	463b      	mov	r3, r7
 8004c50:	f8cd 8000 	str.w	r8, [sp]
 8004c54:	f7ff ffb2 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004c58:	3800      	subs	r0, #0
 8004c5a:	bf18      	it	ne
 8004c5c:	2001      	movne	r0, #1
 8004c5e:	e7eb      	b.n	8004c38 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c60:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c62:	4639      	mov	r1, r7
 8004c64:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c68:	4642      	mov	r2, r8
 8004c6a:	f7ff ff80 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d1e1      	bne.n	8004c36 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	e7e6      	b.n	8004c44 <I2C_RequestMemoryRead+0x34>
 8004c76:	bf00      	nop
 8004c78:	80002000 	.word	0x80002000

08004c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4604      	mov	r4, r0
 8004c80:	460d      	mov	r5, r1
 8004c82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	069b      	lsls	r3, r3, #26
 8004c8a:	d501      	bpl.n	8004c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004c8c:	2000      	movs	r0, #0
}
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c90:	4632      	mov	r2, r6
 8004c92:	4629      	mov	r1, r5
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7ff fedf 	bl	8004a58 <I2C_IsErrorOccurred>
 8004c9a:	b990      	cbnz	r0, 8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fd f9b4 	bl	8002008 <HAL_GetTick>
 8004ca0:	1b80      	subs	r0, r0, r6
 8004ca2:	42a8      	cmp	r0, r5
 8004ca4:	d801      	bhi.n	8004caa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	d1ec      	bne.n	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004cbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	e7e3      	b.n	8004c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004cc6 <HAL_I2C_Init>:
{
 8004cc6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004cc8:	4604      	mov	r4, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d04a      	beq.n	8004d64 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004cd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004cd6:	b91b      	cbnz	r3, 8004ce0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004cd8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004cdc:	f7fc fa04 	bl	80010e8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce0:	2324      	movs	r3, #36	; 0x24
 8004ce2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cf6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cfe:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d04:	2901      	cmp	r1, #1
 8004d06:	d124      	bne.n	8004d52 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d0e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d10:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d12:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d1a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d22:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d24:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004d28:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d2a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d30:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d32:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d4a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004d50:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d56:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d58:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d5a:	d1d8      	bne.n	8004d0e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	e7d4      	b.n	8004d0e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004d64:	2001      	movs	r0, #1
 8004d66:	e7f3      	b.n	8004d50 <HAL_I2C_Init+0x8a>

08004d68 <HAL_I2C_Mem_Read>:
{
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	469b      	mov	fp, r3
 8004d70:	4604      	mov	r4, r0
 8004d72:	460f      	mov	r7, r1
 8004d74:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004d78:	4692      	mov	sl, r2
 8004d7a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8004d7e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	f040 80a7 	bne.w	8004ed8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8004d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d8c:	b10b      	cbz	r3, 8004d92 <HAL_I2C_Mem_Read+0x2a>
 8004d8e:	9b03      	ldr	r3, [sp, #12]
 8004d90:	b933      	cbnz	r3, 8004da0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d96:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	b005      	add	sp, #20
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004da0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f000 8097 	beq.w	8004ed8 <HAL_I2C_Mem_Read+0x170>
 8004daa:	2501      	movs	r5, #1
 8004dac:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004db0:	f7fd f92a 	bl	8002008 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004db4:	2319      	movs	r3, #25
 8004db6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004db8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dba:	462a      	mov	r2, r5
 8004dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7ff fefb 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d1e5      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dcc:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8004dce:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dd0:	4652      	mov	r2, sl
 8004dd2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004de2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004de4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004de6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004de8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8004dec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dee:	465b      	mov	r3, fp
 8004df0:	f7ff ff0e 	bl	8004c10 <I2C_RequestMemoryRead>
 8004df4:	b110      	cbz	r0, 8004dfc <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8004df6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004dfa:	e7cd      	b.n	8004d98 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2bff      	cmp	r3, #255	; 0xff
 8004e02:	4b36      	ldr	r3, [pc, #216]	; (8004edc <HAL_I2C_Mem_Read+0x174>)
 8004e04:	d958      	bls.n	8004eb8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e06:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e0e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e10:	4639      	mov	r1, r7
 8004e12:	4620      	mov	r0, r4
 8004e14:	f7ff fe0a 	bl	8004a2c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e18:	464b      	mov	r3, r9
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2104      	movs	r1, #4
 8004e1e:	4620      	mov	r0, r4
 8004e20:	9600      	str	r6, [sp, #0]
 8004e22:	f7ff fecb 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d1b6      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e30:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004e34:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004e36:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004e38:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004e3a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004e3e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004e40:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004e42:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	b1ab      	cbz	r3, 8004e7a <HAL_I2C_Mem_Read+0x112>
 8004e4e:	b9a2      	cbnz	r2, 8004e7a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e50:	464b      	mov	r3, r9
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	4620      	mov	r0, r4
 8004e56:	9600      	str	r6, [sp, #0]
 8004e58:	f7ff feb0 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d19b      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2bff      	cmp	r3, #255	; 0xff
 8004e66:	d92f      	bls.n	8004ec8 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e68:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e6e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e72:	4639      	mov	r1, r7
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff fdd9 	bl	8004a2c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004e7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ca      	bne.n	8004e18 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e82:	4632      	mov	r2, r6
 8004e84:	4649      	mov	r1, r9
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff fef8 	bl	8004c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d183      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	2120      	movs	r1, #32
 8004e94:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004e9c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004ea0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004eae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eb2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004eb6:	e770      	b.n	8004d9a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8004eb8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	e7a3      	b.n	8004e10 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8004ec8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ece:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	e7cc      	b.n	8004e72 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8004ed8:	2002      	movs	r0, #2
 8004eda:	e75e      	b.n	8004d9a <HAL_I2C_Mem_Read+0x32>
 8004edc:	80002400 	.word	0x80002400

08004ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ee0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	b2dc      	uxtb	r4, r3
 8004eea:	d11d      	bne.n	8004f28 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d019      	beq.n	8004f28 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef4:	2324      	movs	r3, #36	; 0x24
 8004ef6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004efa:	6803      	ldr	r3, [r0, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4311      	orrs	r1, r2
 8004f10:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004f20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004f24:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004f26:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004f28:	2002      	movs	r0, #2
 8004f2a:	e7fc      	b.n	8004f26 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f2c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	b2dc      	uxtb	r4, r3
 8004f36:	d11c      	bne.n	8004f72 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d018      	beq.n	8004f72 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	2324      	movs	r3, #36	; 0x24
 8004f42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f46:	6803      	ldr	r3, [r0, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f50:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f52:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f56:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f5a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f64:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004f6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004f6e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004f70:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004f72:	2002      	movs	r0, #2
 8004f74:	e7fc      	b.n	8004f70 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08004f76 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f76:	6803      	ldr	r3, [r0, #0]
 8004f78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8004f7c:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	4770      	bx	lr

08004f82 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f84:	3801      	subs	r0, #1
 8004f86:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8004f88:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8004f8a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 8004f8e:	462f      	mov	r7, r5
 8004f90:	4425      	add	r5, r4
 8004f92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004f96:	d822      	bhi.n	8004fde <JPEG_Bits_To_SizeCodes+0x5c>
 8004f98:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8004f9a:	b954      	cbnz	r4, 8004fb2 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	2e11      	cmp	r6, #17
 8004fa0:	d1f3      	bne.n	8004f8a <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8004fa2:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004fa4:	2601      	movs	r6, #1
  *LastK = p;
 8004fa6:	601d      	str	r5, [r3, #0]
  code = 0;
 8004fa8:	4623      	mov	r3, r4
  si = Huffsize[0];
 8004faa:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8004fac:	5d08      	ldrb	r0, [r1, r4]
 8004fae:	b9a0      	cbnz	r0, 8004fda <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8004fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 8004fb2:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 8004fb4:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 8004fb8:	e7ef      	b.n	8004f9a <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 8004fba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 8004fbe:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 8004fc0:	5d08      	ldrb	r0, [r1, r4]
 8004fc2:	193b      	adds	r3, r7, r4
 8004fc4:	42a8      	cmp	r0, r5
 8004fc6:	d0f8      	beq.n	8004fba <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 8004fc8:	2d1f      	cmp	r5, #31
 8004fca:	d808      	bhi.n	8004fde <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004fcc:	fa06 f005 	lsl.w	r0, r6, r5
 8004fd0:	4298      	cmp	r0, r3
 8004fd2:	d904      	bls.n	8004fde <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 8004fd4:	005b      	lsls	r3, r3, #1
    si++;
 8004fd6:	3501      	adds	r5, #1
 8004fd8:	e7e8      	b.n	8004fac <JPEG_Bits_To_SizeCodes+0x2a>
 8004fda:	1b1f      	subs	r7, r3, r4
 8004fdc:	e7f0      	b.n	8004fc0 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 8004fde:	2001      	movs	r0, #1
 8004fe0:	e7e6      	b.n	8004fb0 <JPEG_Bits_To_SizeCodes+0x2e>

08004fe2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe4:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8004fe8:	460d      	mov	r5, r1
 8004fea:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004fec:	ab01      	add	r3, sp, #4
 8004fee:	aa43      	add	r2, sp, #268	; 0x10c
 8004ff0:	a902      	add	r1, sp, #8
 8004ff2:	f7ff ffc6 	bl	8004f82 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8004ff6:	b938      	cbnz	r0, 8005008 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8004ff8:	9e01      	ldr	r6, [sp, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	f104 0110 	add.w	r1, r4, #16
 8005000:	3610      	adds	r6, #16
 8005002:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8005004:	42a1      	cmp	r1, r4
 8005006:	d102      	bne.n	800500e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005008:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800500e:	f811 6b01 	ldrb.w	r6, [r1], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005012:	2e0b      	cmp	r6, #11
 8005014:	d80a      	bhi.n	800502c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005016:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800501a:	f852 cb04 	ldr.w	ip, [r2], #4
 800501e:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005022:	f813 7b01 	ldrb.w	r7, [r3], #1
 8005026:	3f01      	subs	r7, #1
 8005028:	55af      	strb	r7, [r5, r6]
      k++;
 800502a:	e7eb      	b.n	8005004 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800502c:	2001      	movs	r0, #1
 800502e:	e7eb      	b.n	8005008 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08005030 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005030:	4603      	mov	r3, r0
 8005032:	4608      	mov	r0, r1
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8005036:	681c      	ldr	r4, [r3, #0]
{
 8005038:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800503a:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 800503e:	429a      	cmp	r2, r3
 8005040:	d125      	bne.n	800508e <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8005042:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8005046:	a901      	add	r1, sp, #4
 8005048:	f7ff ffcb 	bl	8004fe2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800504c:	b9e8      	cbnz	r0, 800508a <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800504e:	aa01      	add	r2, sp, #4
 8005050:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8005054:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8005058:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800505a:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800505c:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800505e:	7ad3      	ldrb	r3, [r2, #11]
    while (i > 1UL)
 8005060:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005062:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    while (i > 1UL)
 8005066:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005068:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800506a:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800506e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005072:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005074:	7b13      	ldrb	r3, [r2, #12]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800507c:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800507e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005082:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8005086:	42b4      	cmp	r4, r6
 8005088:	d1e9      	bne.n	800505e <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800508a:	b011      	add	sp, #68	; 0x44
 800508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800508e:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 8005092:	429a      	cmp	r2, r3
 8005094:	d102      	bne.n	800509c <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8005096:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 800509a:	e7d4      	b.n	8005046 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800509c:	2001      	movs	r0, #1
 800509e:	e7f4      	b.n	800508a <JPEG_Set_HuffDC_Mem+0x5a>

080050a0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80050a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80050a4:	6804      	ldr	r4, [r0, #0]
{
 80050a6:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 80050aa:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80050ac:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d115      	bne.n	80050e0 <JPEG_Set_HuffAC_Mem+0x40>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80050b4:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80050b8:	466b      	mov	r3, sp
 80050ba:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 80050be:	a901      	add	r1, sp, #4
 80050c0:	4628      	mov	r0, r5
 80050c2:	f7ff ff5e 	bl	8004f82 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d15d      	bne.n	8005186 <JPEG_Set_HuffAC_Mem+0xe6>
 80050ca:	9b00      	ldr	r3, [sp, #0]
 80050cc:	460e      	mov	r6, r1
 80050ce:	f105 0c10 	add.w	ip, r5, #16
 80050d2:	4617      	mov	r7, r2
 80050d4:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 80050d6:	f04f 0e0a 	mov.w	lr, #10
 80050da:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80050dc:	ad42      	add	r5, sp, #264	; 0x108
 80050de:	e021      	b.n	8005124 <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80050e0:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d110      	bne.n	800510a <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80050e8:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 80050ec:	e7e4      	b.n	80050b8 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80050ee:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 80050f2:	b163      	cbz	r3, 800510e <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80050f4:	2bf0      	cmp	r3, #240	; 0xf0
 80050f6:	d04a      	beq.n	800518e <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 80050f8:	ea4f 1813 	mov.w	r8, r3, lsr #4
      lsb = (l & 0x0FUL);
 80050fc:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8005100:	3b01      	subs	r3, #1
 8005102:	fb0e 3308 	mla	r3, lr, r8, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005106:	2ba1      	cmp	r3, #161	; 0xa1
 8005108:	d902      	bls.n	8005110 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800510a:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 800510c:	e03b      	b.n	8005186 <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 800510e:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005110:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005114:	f857 8b04 	ldr.w	r8, [r7], #4
 8005118:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800511c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005120:	3a01      	subs	r2, #1
 8005122:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8005124:	4561      	cmp	r1, ip
 8005126:	d1e2      	bne.n	80050ee <JPEG_Set_HuffAC_Mem+0x4e>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8005128:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800512c:	a942      	add	r1, sp, #264	; 0x108
 800512e:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 8005132:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8005134:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8005136:	6063      	str	r3, [r4, #4]
 8005138:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800513a:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 800513e:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8005142:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8005144:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8005148:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800514a:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800514e:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8005150:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8005154:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005156:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
    while (i > 1UL)
 800515a:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800515c:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
    while (i > 1UL)
 8005160:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005162:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005164:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005168:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800516c:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800516e:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005178:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800517a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800517e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8005182:	42b4      	cmp	r4, r6
 8005184:	d1e7      	bne.n	8005156 <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005186:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 800518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 800518e:	23a1      	movs	r3, #161	; 0xa1
 8005190:	e7be      	b.n	8005110 <JPEG_Set_HuffAC_Mem+0x70>
	...

08005194 <HAL_JPEG_Init>:
{
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8005196:	4604      	mov	r4, r0
 8005198:	2800      	cmp	r0, #0
 800519a:	f000 811b 	beq.w	80053d4 <HAL_JPEG_Init+0x240>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800519e:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80051a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051a6:	b91b      	cbnz	r3, 80051b0 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 80051a8:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 80051ac:	f7fb fff4 	bl	8001198 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 80051b0:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	4988      	ldr	r1, [pc, #544]	; (80053d8 <HAL_JPEG_Init+0x244>)
 80051b6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80051ba:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 80051be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80051c0:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80051d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80051d4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80051d8:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80051da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80051dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80051e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80051e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051e8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80051ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80051ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051f0:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80051f2:	4b7a      	ldr	r3, [pc, #488]	; (80053dc <HAL_JPEG_Init+0x248>)
 80051f4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80051f6:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <HAL_JPEG_Init+0x24c>)
 80051f8:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 80051fa:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 80051fc:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  index = 16;
  while (index > 3UL)
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005200:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 8005202:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005204:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005206:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005208:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800520c:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800520e:	4333      	orrs	r3, r6
 8005210:	7c4e      	ldrb	r6, [r1, #17]
 8005212:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005216:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800521a:	42a8      	cmp	r0, r5
 800521c:	d1f0      	bne.n	8005200 <HAL_JPEG_Init+0x6c>
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
  index = 12;
  while (index > 3UL)
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800521e:	4b71      	ldr	r3, [pc, #452]	; (80053e4 <HAL_JPEG_Init+0x250>)
    index -= 4UL;
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005220:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8005224:	4970      	ldr	r1, [pc, #448]	; (80053e8 <HAL_JPEG_Init+0x254>)
 8005226:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800522a:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 800522e:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005232:	460d      	mov	r5, r1
 8005234:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005236:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 800523a:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800523e:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
  index = 16;
  while (index > 3UL)
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005242:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 8005244:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005246:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800524a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800524c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005250:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005254:	ea43 030c 	orr.w	r3, r3, ip
 8005258:	f895 c011 	ldrb.w	ip, [r5, #17]
 800525c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005260:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8005264:	42be      	cmp	r6, r7
 8005266:	d1ec      	bne.n	8005242 <HAL_JPEG_Init+0xae>
  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
  value = *address & 0xFFFF0000U;
 8005268:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
  *address = value;

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800526c:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005274:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 8005278:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 800527c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  index = 160;
  while (index > 3UL)
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005280:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 8005284:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005286:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800528a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800528c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005290:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005294:	4333      	orrs	r3, r6
 8005296:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800529a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800529e:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 80052a2:	4285      	cmp	r5, r0
 80052a4:	d1ec      	bne.n	8005280 <HAL_JPEG_Init+0xec>

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
  value = *address & 0x0000FFFFU;
 80052a6:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80052aa:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  *address = value;

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
  value = *address & 0xFFFF0000U;
 80052ae:	484f      	ldr	r0, [pc, #316]	; (80053ec <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFU;
 80052b0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80052b2:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 80052b6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 80052ba:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 80052be:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
  *address = value;
 80052c0:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  address--;
  index = 12;
  while (index > 3UL)
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80052c4:	2301      	movs	r3, #1
 80052c6:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 80052ca:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80052ce:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 80052d2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
  value = *address & 0x0000FFFFUL;
 80052d6:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
  index = 8;
  while (index > 3UL)
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80052da:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <HAL_JPEG_Init+0x25c>)
  value = *address & 0x0000FFFFUL;
 80052dc:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80052de:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 80052e2:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 80052e6:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 80052ea:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80052ec:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 80052f0:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 80052f4:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80052f8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 80052fc:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8005300:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
  value = *address & 0x0000FFFFU;
 8005304:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8005308:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800530a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 800530e:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
  value = *address & 0xFFFF0000U;
 8005312:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8005316:	4937      	ldr	r1, [pc, #220]	; (80053f4 <HAL_JPEG_Init+0x260>)
 8005318:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
                                                                         16);
  *address = value;

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800531a:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800531e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005322:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8005326:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800532a:	4b33      	ldr	r3, [pc, #204]	; (80053f8 <HAL_JPEG_Init+0x264>)
 800532c:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8005330:	4b32      	ldr	r3, [pc, #200]	; (80053fc <HAL_JPEG_Init+0x268>)
 8005332:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_JPEG_Init+0x26c>)
 8005338:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 800533c:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8005340:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 8005346:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
  index = 160;
  while (index > 3UL)
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800534a:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 800534e:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005350:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005354:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005356:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800535a:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800535e:	4333      	orrs	r3, r6
 8005360:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 8005364:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005368:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800536c:	42a8      	cmp	r0, r5
 800536e:	d1ec      	bne.n	800534a <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8005370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005374:	491c      	ldr	r1, [pc, #112]	; (80053e8 <HAL_JPEG_Init+0x254>)
 8005376:	4620      	mov	r0, r4
 8005378:	f7ff fe92 	bl	80050a0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800537c:	b110      	cbz	r0, 8005384 <HAL_JPEG_Init+0x1f0>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800537e:	2001      	movs	r0, #1
 8005380:	6520      	str	r0, [r4, #80]	; 0x50
}
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 8005384:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8005386:	4620      	mov	r0, r4
 8005388:	491a      	ldr	r1, [pc, #104]	; (80053f4 <HAL_JPEG_Init+0x260>)
 800538a:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 800538e:	f7ff fe87 	bl	80050a0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8005392:	2800      	cmp	r0, #0
 8005394:	d1f3      	bne.n	800537e <HAL_JPEG_Init+0x1ea>
                              hjpeg->Instance->HUFFENC_DC0);
 8005396:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005398:	4620      	mov	r0, r4
 800539a:	490f      	ldr	r1, [pc, #60]	; (80053d8 <HAL_JPEG_Init+0x244>)
 800539c:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80053a0:	f7ff fe46 	bl	8005030 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1ea      	bne.n	800537e <HAL_JPEG_Init+0x1ea>
                              hjpeg->Instance->HUFFENC_DC1);
 80053a8:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80053aa:	4620      	mov	r0, r4
 80053ac:	4915      	ldr	r1, [pc, #84]	; (8005404 <HAL_JPEG_Init+0x270>)
 80053ae:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 80053b2:	f7ff fe3d 	bl	8005030 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d1e1      	bne.n	800537e <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	6853      	ldr	r3, [r2, #4]
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 80053c4:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 80053c6:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 80053c8:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 80053ca:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80053ce:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 80053d0:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 80053d2:	e7d6      	b.n	8005382 <HAL_JPEG_Init+0x1ee>
    return HAL_ERROR;
 80053d4:	2001      	movs	r0, #1
 80053d6:	e7d4      	b.n	8005382 <HAL_JPEG_Init+0x1ee>
 80053d8:	0801abc0 	.word	0x0801abc0
 80053dc:	0801abdc 	.word	0x0801abdc
 80053e0:	0801ab64 	.word	0x0801ab64
 80053e4:	0b0a0908 	.word	0x0b0a0908
 80053e8:	0801aab2 	.word	0x0801aab2
 80053ec:	ffff0000 	.word	0xffff0000
 80053f0:	09080706 	.word	0x09080706
 80053f4:	0801aa00 	.word	0x0801aa00
 80053f8:	01000404 	.word	0x01000404
 80053fc:	05070403 	.word	0x05070403
 8005400:	04040201 	.word	0x04040201
 8005404:	0801aba4 	.word	0x0801aba4

08005408 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7fc fdfc 	bl	8002008 <HAL_GetTick>
 8005410:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005412:	2c00      	cmp	r4, #0
 8005414:	d061      	beq.n	80054da <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8005416:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005418:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800541a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800541e:	2302      	movs	r3, #2
 8005420:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8005424:	68d3      	ldr	r3, [r2, #12]
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	07d2      	lsls	r2, r2, #31
 8005432:	d448      	bmi.n	80054c6 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005434:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8005438:	430a      	orrs	r2, r1
 800543a:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800543c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8005440:	430a      	orrs	r2, r1
 8005442:	69e1      	ldr	r1, [r4, #28]
 8005444:	430a      	orrs	r2, r1
 8005446:	6a21      	ldr	r1, [r4, #32]
 8005448:	430a      	orrs	r2, r1
 800544a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800544c:	430a      	orrs	r2, r1
 800544e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005450:	430a      	orrs	r2, r1
 8005452:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005454:	430a      	orrs	r2, r1
 8005456:	68a1      	ldr	r1, [r4, #8]
 8005458:	430a      	orrs	r2, r1
 800545a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800545c:	3901      	subs	r1, #1
 800545e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005462:	6861      	ldr	r1, [r4, #4]
 8005464:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005468:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800546a:	d103      	bne.n	8005474 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8005472:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8005474:	2200      	movs	r2, #0
 8005476:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005478:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800547a:	2a00      	cmp	r2, #0
 800547c:	da04      	bge.n	8005488 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800547e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8005480:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005482:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005486:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8005488:	b292      	uxth	r2, r2
 800548a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800548c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800548e:	2a00      	cmp	r2, #0
 8005490:	da25      	bge.n	80054de <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005492:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8005494:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005496:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800549a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800549c:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800549e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80054a2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80054a6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	d019      	beq.n	80054e2 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80054ae:	b2c9      	uxtb	r1, r1
 80054b0:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 80054b4:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80054b6:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80054b8:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80054ba:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80054bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80054c0:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80054c6:	f7fc fd9f 	bl	8002008 <HAL_GetTick>
 80054ca:	1b40      	subs	r0, r0, r5
 80054cc:	2805      	cmp	r0, #5
 80054ce:	d9ad      	bls.n	800542c <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80054d4:	2303      	movs	r3, #3
 80054d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80054da:	2001      	movs	r0, #1
 80054dc:	e7f2      	b.n	80054c4 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80054de:	6a18      	ldr	r0, [r3, #32]
 80054e0:	e7dd      	b.n	800549e <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
 80054e4:	e7e5      	b.n	80054b2 <HAL_MDMA_Init+0xaa>

080054e6 <HAL_MDMA_ConfigPostRequestMask>:
{
 80054e6:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 80054e8:	b320      	cbz	r0, 8005534 <HAL_MDMA_ConfigPostRequestMask+0x4e>
  __HAL_LOCK(hmdma);
 80054ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d022      	beq.n	8005538 <HAL_MDMA_ConfigPostRequestMask+0x52>
 80054f2:	2301      	movs	r3, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80054f4:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80054f8:	429d      	cmp	r5, r3
 80054fa:	b2ec      	uxtb	r4, r5
  __HAL_LOCK(hmdma);
 80054fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005500:	d116      	bne.n	8005530 <HAL_MDMA_ConfigPostRequestMask+0x4a>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8005502:	6803      	ldr	r3, [r0, #0]
 8005504:	691d      	ldr	r5, [r3, #16]
 8005506:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 800550a:	d107      	bne.n	800551c <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800550c:	6319      	str	r1, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 800550e:	635a      	str	r2, [r3, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8005510:	691a      	ldr	r2, [r3, #16]
      if(MaskAddress == 0U)
 8005512:	b941      	cbnz	r1, 8005526 <HAL_MDMA_ConfigPostRequestMask+0x40>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8005514:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8005518:	460c      	mov	r4, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800551a:	611a      	str	r2, [r3, #16]
  __HAL_UNLOCK(hmdma);
 800551c:	2300      	movs	r3, #0
 800551e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8005522:	4620      	mov	r0, r4
 8005524:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8005526:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800552a:	462c      	mov	r4, r5
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800552c:	611a      	str	r2, [r3, #16]
 800552e:	e7f5      	b.n	800551c <HAL_MDMA_ConfigPostRequestMask+0x36>
    status =  HAL_ERROR;
 8005530:	461c      	mov	r4, r3
 8005532:	e7f3      	b.n	800551c <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8005534:	2401      	movs	r4, #1
 8005536:	e7f4      	b.n	8005522 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8005538:	2402      	movs	r4, #2
 800553a:	e7f2      	b.n	8005522 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800553c <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800553c:	2300      	movs	r3, #0
{
 800553e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005540:	f04f 42a4 	mov.w	r2, #1375731712	; 0x52000000
  __IO uint32_t count = 0;
 8005544:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005546:	6803      	ldr	r3, [r0, #0]
{
 8005548:	4604      	mov	r4, r0
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800554a:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800554c:	2101      	movs	r1, #1
 800554e:	f103 422e 	add.w	r2, r3, #2919235584	; 0xae000000
 8005552:	3a40      	subs	r2, #64	; 0x40
 8005554:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8005558:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800555c:	4202      	tst	r2, r0
 800555e:	f000 80a0 	beq.w	80056a2 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8005562:	4a51      	ldr	r2, [pc, #324]	; (80056a8 <HAL_MDMA_IRQHandler+0x16c>)
 8005564:	6815      	ldr	r5, [r2, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	07d1      	lsls	r1, r2, #31
 800556a:	d529      	bpl.n	80055c0 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	0792      	lsls	r2, r2, #30
 8005570:	d526      	bpl.n	80055c0 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	f022 0202 	bic.w	r2, r2, #2
 8005578:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800557a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800557c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800557e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005580:	bf54      	ite	pl
 8005582:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005586:	f041 0102 	orrmi.w	r1, r1, #2
 800558a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800558c:	0591      	lsls	r1, r2, #22
 800558e:	d503      	bpl.n	8005598 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005590:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005592:	f041 0104 	orr.w	r1, r1, #4
 8005596:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005598:	05d0      	lsls	r0, r2, #23
 800559a:	d503      	bpl.n	80055a4 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800559c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800559e:	f041 0108 	orr.w	r1, r1, #8
 80055a2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80055a4:	0551      	lsls	r1, r2, #21
 80055a6:	d503      	bpl.n	80055b0 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80055a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80055aa:	f041 0110 	orr.w	r1, r1, #16
 80055ae:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80055b0:	0512      	lsls	r2, r2, #20
 80055b2:	d503      	bpl.n	80055bc <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80055b4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80055b6:	f042 0220 	orr.w	r2, r2, #32
 80055ba:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80055bc:	2201      	movs	r2, #1
 80055be:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	06d0      	lsls	r0, r2, #27
 80055c4:	d508      	bpl.n	80055d8 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	0691      	lsls	r1, r2, #26
 80055ca:	d505      	bpl.n	80055d8 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80055cc:	2210      	movs	r2, #16
 80055ce:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 80055d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055d2:	b10b      	cbz	r3, 80055d8 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 80055d4:	4620      	mov	r0, r4
 80055d6:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	0712      	lsls	r2, r2, #28
 80055de:	d508      	bpl.n	80055f2 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	06d0      	lsls	r0, r2, #27
 80055e4:	d505      	bpl.n	80055f2 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80055e6:	2208      	movs	r2, #8
 80055e8:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 80055ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80055ec:	b10b      	cbz	r3, 80055f2 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 80055ee:	4620      	mov	r0, r4
 80055f0:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	0751      	lsls	r1, r2, #29
 80055f8:	d508      	bpl.n	800560c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	0712      	lsls	r2, r2, #28
 80055fe:	d505      	bpl.n	800560c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005600:	2204      	movs	r2, #4
 8005602:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005604:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005606:	b10b      	cbz	r3, 800560c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8005608:	4620      	mov	r0, r4
 800560a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	0790      	lsls	r0, r2, #30
 8005612:	d524      	bpl.n	800565e <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	0751      	lsls	r1, r2, #29
 8005618:	d521      	bpl.n	800565e <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8005620:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8005622:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005626:	2a04      	cmp	r2, #4
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	d10c      	bne.n	8005648 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800562e:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8005630:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8005634:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8005638:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if (hmdma->XferErrorCallback != NULL)
 800563a:	2b00      	cmp	r3, #0
 800563c:	d031      	beq.n	80056a2 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800563e:	4620      	mov	r0, r4
}
 8005640:	b003      	add	sp, #12
 8005642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8005646:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005648:	2102      	movs	r1, #2
 800564a:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800564c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800564e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8005652:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8005656:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005658:	b10b      	cbz	r3, 800565e <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800565a:	4620      	mov	r0, r4
 800565c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800565e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005660:	b1fb      	cbz	r3, 80056a2 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8005662:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005666:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800566a:	2304      	movs	r3, #4
 800566c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800567a:	9a01      	ldr	r2, [sp, #4]
 800567c:	3201      	adds	r2, #1
 800567e:	42aa      	cmp	r2, r5
 8005680:	9201      	str	r2, [sp, #4]
 8005682:	d802      	bhi.n	800568a <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	07d2      	lsls	r2, r2, #31
 8005688:	d4f7      	bmi.n	800567a <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800568a:	2200      	movs	r2, #0
 800568c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005694:	bf4c      	ite	mi
 8005696:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8005698:	2301      	movpl	r3, #1
 800569a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800569e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056a0:	e7cb      	b.n	800563a <HAL_MDMA_IRQHandler+0xfe>
}
 80056a2:	b003      	add	sp, #12
 80056a4:	bd30      	pop	{r4, r5, pc}
 80056a6:	bf00      	nop
 80056a8:	24000000 	.word	0x24000000

080056ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056ac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056ae:	4c10      	ldr	r4, [pc, #64]	; (80056f0 <HAL_PWREx_ConfigSupply+0x44>)
 80056b0:	68e3      	ldr	r3, [r4, #12]
 80056b2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056b6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056b8:	d105      	bne.n	80056c6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056ba:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056be:	1a18      	subs	r0, r3, r0
 80056c0:	bf18      	it	ne
 80056c2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	4318      	orrs	r0, r3
 80056cc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80056ce:	f7fc fc9b 	bl	8002008 <HAL_GetTick>
 80056d2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056d4:	6863      	ldr	r3, [r4, #4]
 80056d6:	049b      	lsls	r3, r3, #18
 80056d8:	d501      	bpl.n	80056de <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80056da:	2000      	movs	r0, #0
 80056dc:	e7f2      	b.n	80056c4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056de:	f7fc fc93 	bl	8002008 <HAL_GetTick>
 80056e2:	1b40      	subs	r0, r0, r5
 80056e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80056e8:	d9f4      	bls.n	80056d4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80056ea:	2001      	movs	r0, #1
 80056ec:	e7ea      	b.n	80056c4 <HAL_PWREx_ConfigSupply+0x18>
 80056ee:	bf00      	nop
 80056f0:	58024800 	.word	0x58024800

080056f4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80056f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80056f8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80056fa:	b136      	cbz	r6, 800570a <QSPI_Config+0x16>
 80056fc:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005700:	d003      	beq.n	800570a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005702:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005704:	6804      	ldr	r4, [r0, #0]
 8005706:	3b01      	subs	r3, #1
 8005708:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800570a:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800570e:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005712:	f1b9 0f00 	cmp.w	r9, #0
 8005716:	d04f      	beq.n	80057b8 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005718:	694b      	ldr	r3, [r1, #20]
 800571a:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800571e:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005720:	f8d1 a000 	ldr.w	sl, [r1]
 8005724:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8005728:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800572c:	ea49 0902 	orr.w	r9, r9, r2
 8005730:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005734:	b335      	cbz	r5, 8005784 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005736:	688b      	ldr	r3, [r1, #8]
 8005738:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800573c:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800573e:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005740:	b19f      	cbz	r7, 800576a <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005742:	ea4a 0307 	orr.w	r3, sl, r7
 8005746:	4323      	orrs	r3, r4
 8005748:	68cc      	ldr	r4, [r1, #12]
 800574a:	ea43 0308 	orr.w	r3, r3, r8
 800574e:	ea43 030e 	orr.w	r3, r3, lr
 8005752:	4333      	orrs	r3, r6
 8005754:	4323      	orrs	r3, r4
 8005756:	ea43 030c 	orr.w	r3, r3, ip
 800575a:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800575c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005760:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005762:	d00d      	beq.n	8005780 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005764:	684b      	ldr	r3, [r1, #4]
 8005766:	6183      	str	r3, [r0, #24]
 8005768:	e00a      	b.n	8005780 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800576a:	ea4a 0304 	orr.w	r3, sl, r4
 800576e:	ea43 0308 	orr.w	r3, r3, r8
 8005772:	ea43 030e 	orr.w	r3, r3, lr
 8005776:	4333      	orrs	r3, r6
 8005778:	ea43 030c 	orr.w	r3, r3, ip
 800577c:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800577e:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005784:	b16f      	cbz	r7, 80057a2 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005786:	ea4a 0307 	orr.w	r3, sl, r7
 800578a:	4323      	orrs	r3, r4
 800578c:	68cc      	ldr	r4, [r1, #12]
 800578e:	ea43 0308 	orr.w	r3, r3, r8
 8005792:	ea43 030e 	orr.w	r3, r3, lr
 8005796:	4323      	orrs	r3, r4
 8005798:	ea43 030c 	orr.w	r3, r3, ip
 800579c:	ea43 0309 	orr.w	r3, r3, r9
 80057a0:	e7dc      	b.n	800575c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057a2:	ea4a 0304 	orr.w	r3, sl, r4
 80057a6:	ea43 0308 	orr.w	r3, r3, r8
 80057aa:	ea43 030e 	orr.w	r3, r3, lr
 80057ae:	ea43 030c 	orr.w	r3, r3, ip
 80057b2:	ea43 0309 	orr.w	r3, r3, r9
 80057b6:	e7e2      	b.n	800577e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80057b8:	b365      	cbz	r5, 8005814 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80057ba:	6804      	ldr	r4, [r0, #0]
 80057bc:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057be:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80057c0:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80057c2:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057c6:	694e      	ldr	r6, [r1, #20]
 80057c8:	ea43 0502 	orr.w	r5, r3, r2
 80057cc:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80057d0:	04b6      	lsls	r6, r6, #18
 80057d2:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80057d6:	b1a7      	cbz	r7, 8005802 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057d8:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057da:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057de:	ea40 0008 	orr.w	r0, r0, r8
 80057e2:	ea43 0300 	orr.w	r3, r3, r0
 80057e6:	68c8      	ldr	r0, [r1, #12]
 80057e8:	ea43 030c 	orr.w	r3, r3, ip
 80057ec:	ea43 0300 	orr.w	r3, r3, r0
 80057f0:	ea43 0306 	orr.w	r3, r3, r6
 80057f4:	ea43 0305 	orr.w	r3, r3, r5
 80057f8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057fa:	d0c1      	beq.n	8005780 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80057fc:	684b      	ldr	r3, [r1, #4]
 80057fe:	61a3      	str	r3, [r4, #24]
 8005800:	e7be      	b.n	8005780 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005802:	ea40 0008 	orr.w	r0, r0, r8
 8005806:	4303      	orrs	r3, r0
 8005808:	ea43 030c 	orr.w	r3, r3, ip
 800580c:	4333      	orrs	r3, r6
 800580e:	432b      	orrs	r3, r5
 8005810:	6163      	str	r3, [r4, #20]
 8005812:	e7b5      	b.n	8005780 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005814:	b17f      	cbz	r7, 8005836 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005816:	ea46 0307 	orr.w	r3, r6, r7
 800581a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800581c:	6800      	ldr	r0, [r0, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	4323      	orrs	r3, r4
 8005822:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005824:	4323      	orrs	r3, r4
 8005826:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005828:	4323      	orrs	r3, r4
 800582a:	68cc      	ldr	r4, [r1, #12]
 800582c:	4323      	orrs	r3, r4
 800582e:	694c      	ldr	r4, [r1, #20]
 8005830:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005834:	e792      	b.n	800575c <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005836:	2e00      	cmp	r6, #0
 8005838:	d0a2      	beq.n	8005780 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800583a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	4333      	orrs	r3, r6
 8005840:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005842:	431a      	orrs	r2, r3
 8005844:	694b      	ldr	r3, [r1, #20]
 8005846:	4332      	orrs	r2, r6
 8005848:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800584a:	4332      	orrs	r2, r6
 800584c:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8005850:	6142      	str	r2, [r0, #20]
}
 8005852:	e795      	b.n	8005780 <QSPI_Config+0x8c>

08005854 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800585c:	4604      	mov	r4, r0
 800585e:	460e      	mov	r6, r1
 8005860:	4615      	mov	r5, r2
 8005862:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005864:	6822      	ldr	r2, [r4, #0]
 8005866:	6893      	ldr	r3, [r2, #8]
 8005868:	4233      	tst	r3, r6
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	42ab      	cmp	r3, r5
 8005872:	d101      	bne.n	8005878 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005874:	2000      	movs	r0, #0
 8005876:	e012      	b.n	800589e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005878:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800587c:	d0f3      	beq.n	8005866 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fc fbc3 	bl	8002008 <HAL_GetTick>
 8005882:	1bc0      	subs	r0, r0, r7
 8005884:	4540      	cmp	r0, r8
 8005886:	d802      	bhi.n	800588e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005888:	f1b8 0f00 	cmp.w	r8, #0
 800588c:	d1ea      	bne.n	8005864 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800588e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005890:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005892:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005896:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080058a4 <HAL_QSPI_Init>:
{
 80058a4:	b530      	push	{r4, r5, lr}
 80058a6:	4604      	mov	r4, r0
 80058a8:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80058aa:	f7fc fbad 	bl	8002008 <HAL_GetTick>
 80058ae:	4603      	mov	r3, r0
  if(hqspi == NULL)
 80058b0:	2c00      	cmp	r4, #0
 80058b2:	d040      	beq.n	8005936 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80058b4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80058b8:	b93a      	cbnz	r2, 80058ca <HAL_QSPI_Init+0x26>
 80058ba:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 80058bc:	4620      	mov	r0, r4
 80058be:	f7fb fde7 	bl	8001490 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	68a1      	ldr	r1, [r4, #8]
 80058ce:	6802      	ldr	r2, [r0, #0]
 80058d0:	3901      	subs	r1, #1
 80058d2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80058d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058da:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80058dc:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058de:	4620      	mov	r0, r4
 80058e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80058e2:	9200      	str	r2, [sp, #0]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f7ff ffb5 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80058ea:	bb10      	cbnz	r0, 8005932 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	69e5      	ldr	r5, [r4, #28]
 80058f0:	68e3      	ldr	r3, [r4, #12]
 80058f2:	6811      	ldr	r1, [r2, #0]
 80058f4:	432b      	orrs	r3, r5
 80058f6:	6a25      	ldr	r5, [r4, #32]
 80058f8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80058fc:	432b      	orrs	r3, r5
 80058fe:	6865      	ldr	r5, [r4, #4]
 8005900:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005904:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005908:	430b      	orrs	r3, r1
 800590a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800590c:	6855      	ldr	r5, [r2, #4]
 800590e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005912:	430b      	orrs	r3, r1
 8005914:	6921      	ldr	r1, [r4, #16]
 8005916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800591a:	4908      	ldr	r1, [pc, #32]	; (800593c <HAL_QSPI_Init+0x98>)
 800591c:	4029      	ands	r1, r5
 800591e:	430b      	orrs	r3, r1
 8005920:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800592a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800592c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800592e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005932:	b005      	add	sp, #20
 8005934:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005936:	2001      	movs	r0, #1
 8005938:	e7fb      	b.n	8005932 <HAL_QSPI_Init+0x8e>
 800593a:	bf00      	nop
 800593c:	ffe0f8fe 	.word	0xffe0f8fe

08005940 <HAL_QSPI_DeInit>:
{
 8005940:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005942:	4604      	mov	r4, r0
 8005944:	b158      	cbz	r0, 800595e <HAL_QSPI_DeInit+0x1e>
  __HAL_QSPI_DISABLE(hqspi);
 8005946:	6802      	ldr	r2, [r0, #0]
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005950:	f7fb fe1a 	bl	8001588 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005954:	2000      	movs	r0, #0
 8005956:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005958:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 800595c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800595e:	2001      	movs	r0, #1
 8005960:	e7fc      	b.n	800595c <HAL_QSPI_DeInit+0x1c>

08005962 <HAL_QSPI_Command>:
{
 8005962:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005966:	4604      	mov	r4, r0
 8005968:	b085      	sub	sp, #20
 800596a:	4617      	mov	r7, r2
 800596c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800596e:	f7fc fb4b 	bl	8002008 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005972:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005976:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005978:	2a01      	cmp	r2, #1
 800597a:	d033      	beq.n	80059e4 <HAL_QSPI_Command+0x82>
 800597c:	2201      	movs	r2, #1
 800597e:	2602      	movs	r6, #2
 8005980:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005984:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005988:	2a01      	cmp	r2, #1
 800598a:	fa5f f882 	uxtb.w	r8, r2
 800598e:	d127      	bne.n	80059e0 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005990:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005992:	9003      	str	r0, [sp, #12]
 8005994:	2120      	movs	r1, #32
 8005996:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005998:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800599a:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800599c:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80059a0:	f7ff ff58 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80059a4:	4605      	mov	r5, r0
 80059a6:	b9a0      	cbnz	r0, 80059d2 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80059a8:	4602      	mov	r2, r0
 80059aa:	4649      	mov	r1, r9
 80059ac:	4620      	mov	r0, r4
 80059ae:	f7ff fea1 	bl	80056f4 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80059b2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	b94a      	cbnz	r2, 80059ce <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80059ba:	4642      	mov	r2, r8
 80059bc:	4631      	mov	r1, r6
 80059be:	4620      	mov	r0, r4
 80059c0:	9700      	str	r7, [sp, #0]
 80059c2:	f7ff ff47 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80059c6:	4605      	mov	r5, r0
 80059c8:	b918      	cbnz	r0, 80059d2 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80059ce:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80059d2:	2300      	movs	r3, #0
 80059d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80059d8:	4628      	mov	r0, r5
 80059da:	b005      	add	sp, #20
 80059dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80059e0:	4635      	mov	r5, r6
 80059e2:	e7f6      	b.n	80059d2 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80059e4:	2502      	movs	r5, #2
 80059e6:	e7f7      	b.n	80059d8 <HAL_QSPI_Command+0x76>

080059e8 <HAL_QSPI_Transmit>:
{
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	4604      	mov	r4, r0
 80059ec:	b085      	sub	sp, #20
 80059ee:	4616      	mov	r6, r2
 80059f0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80059f2:	f7fc fb09 	bl	8002008 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80059f6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80059fa:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80059fc:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80059fe:	2a01      	cmp	r2, #1
 8005a00:	d049      	beq.n	8005a96 <HAL_QSPI_Transmit+0xae>
 8005a02:	2201      	movs	r2, #1
 8005a04:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005a08:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	b2d0      	uxtb	r0, r2
 8005a10:	d13f      	bne.n	8005a92 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a12:	2200      	movs	r2, #0
 8005a14:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	d036      	beq.n	8005a88 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005a1a:	2212      	movs	r2, #18
 8005a1c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a20:	692a      	ldr	r2, [r5, #16]
 8005a22:	3201      	adds	r2, #1
 8005a24:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a26:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005a28:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005a2a:	3201      	adds	r2, #1
 8005a2c:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005a2e:	696a      	ldr	r2, [r5, #20]
 8005a30:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005a34:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8005a36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a38:	b98a      	cbnz	r2, 8005a5e <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	4620      	mov	r0, r4
 8005a40:	9600      	str	r6, [sp, #0]
 8005a42:	f7ff ff07 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005a46:	b910      	cbnz	r0, 8005a4e <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005a54:	2300      	movs	r3, #0
 8005a56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005a5a:	b005      	add	sp, #20
 8005a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005a5e:	2201      	movs	r2, #1
 8005a60:	2104      	movs	r1, #4
 8005a62:	4620      	mov	r0, r4
 8005a64:	9600      	str	r6, [sp, #0]
 8005a66:	9303      	str	r3, [sp, #12]
 8005a68:	f7ff fef4 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1ee      	bne.n	8005a4e <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005a70:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005a72:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005a7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a7c:	3201      	adds	r2, #1
 8005a7e:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005a80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a82:	3a01      	subs	r2, #1
 8005a84:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005a86:	e7d6      	b.n	8005a36 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005a88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a8a:	f043 0308 	orr.w	r3, r3, #8
 8005a8e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005a90:	e7e0      	b.n	8005a54 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8005a92:	2002      	movs	r0, #2
 8005a94:	e7de      	b.n	8005a54 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8005a96:	2002      	movs	r0, #2
 8005a98:	e7df      	b.n	8005a5a <HAL_QSPI_Transmit+0x72>

08005a9a <HAL_QSPI_Receive>:
{
 8005a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005aa4:	f7fc fab0 	bl	8002008 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005aa8:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005aaa:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005aac:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8005ab0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005ab4:	2a01      	cmp	r2, #1
 8005ab6:	d04d      	beq.n	8005b54 <HAL_QSPI_Receive+0xba>
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005abe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005ac2:	2a01      	cmp	r2, #1
 8005ac4:	b2d0      	uxtb	r0, r2
 8005ac6:	d143      	bne.n	8005b50 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ac8:	2200      	movs	r2, #0
 8005aca:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	d03a      	beq.n	8005b46 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005ad0:	2222      	movs	r2, #34	; 0x22
 8005ad2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ad6:	692a      	ldr	r2, [r5, #16]
 8005ad8:	3201      	adds	r2, #1
 8005ada:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005adc:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8005ade:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ae0:	3201      	adds	r2, #1
 8005ae2:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005ae4:	6969      	ldr	r1, [r5, #20]
 8005ae6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8005aea:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005aee:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005af0:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8005af4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005af6:	b98a      	cbnz	r2, 8005b1c <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005af8:	2201      	movs	r2, #1
 8005afa:	2102      	movs	r1, #2
 8005afc:	4620      	mov	r0, r4
 8005afe:	9600      	str	r6, [sp, #0]
 8005b00:	f7ff fea8 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8005b04:	b910      	cbnz	r0, 8005b0c <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005b12:	2300      	movs	r3, #0
 8005b14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005b18:	b005      	add	sp, #20
 8005b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2106      	movs	r1, #6
 8005b20:	4620      	mov	r0, r4
 8005b22:	9600      	str	r6, [sp, #0]
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	f7ff fe95 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d1ee      	bne.n	8005b0c <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005b2e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8005b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005b34:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005b36:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8005b38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005b3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b40:	3a01      	subs	r2, #1
 8005b42:	63a2      	str	r2, [r4, #56]	; 0x38
 8005b44:	e7d6      	b.n	8005af4 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b48:	f043 0308 	orr.w	r3, r3, #8
 8005b4c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005b4e:	e7e0      	b.n	8005b12 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8005b50:	2002      	movs	r0, #2
 8005b52:	e7de      	b.n	8005b12 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8005b54:	2002      	movs	r0, #2
 8005b56:	e7df      	b.n	8005b18 <HAL_QSPI_Receive+0x7e>

08005b58 <HAL_QSPI_AutoPolling>:
{
 8005b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	4615      	mov	r5, r2
 8005b60:	461e      	mov	r6, r3
 8005b62:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005b64:	f7fc fa50 	bl	8002008 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005b68:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005b6c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005b6e:	2a01      	cmp	r2, #1
 8005b70:	d040      	beq.n	8005bf4 <HAL_QSPI_AutoPolling+0x9c>
 8005b72:	2201      	movs	r2, #1
 8005b74:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005b78:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005b7c:	2a01      	cmp	r2, #1
 8005b7e:	b2d7      	uxtb	r7, r2
 8005b80:	d136      	bne.n	8005bf0 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005b82:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b84:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005b86:	9003      	str	r0, [sp, #12]
 8005b88:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005b8a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005b8c:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005b8e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005b92:	2120      	movs	r1, #32
 8005b94:	f7ff fe5e 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005b98:	bb20      	cbnz	r0, 8005be4 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005b9e:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005ba0:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005ba2:	686a      	ldr	r2, [r5, #4]
 8005ba4:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005ba6:	68aa      	ldr	r2, [r5, #8]
 8005ba8:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005baa:	680a      	ldr	r2, [r1, #0]
 8005bac:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005bb0:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005bb2:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005bb4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005bb8:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005bba:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005bbc:	68ea      	ldr	r2, [r5, #12]
 8005bbe:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bc6:	f7ff fd95 	bl	80056f4 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	463a      	mov	r2, r7
 8005bce:	2108      	movs	r1, #8
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	9600      	str	r6, [sp, #0]
 8005bd4:	f7ff fe3e 	bl	8005854 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005bd8:	b920      	cbnz	r0, 8005be4 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005be0:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005be4:	2300      	movs	r3, #0
 8005be6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005bea:	b004      	add	sp, #16
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005bf0:	2002      	movs	r0, #2
 8005bf2:	e7f7      	b.n	8005be4 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	e7f8      	b.n	8005bea <HAL_QSPI_AutoPolling+0x92>

08005bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	b908      	cbnz	r0, 8005c02 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8005bfe:	2001      	movs	r0, #1
 8005c00:	e08b      	b.n	8005d1a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	07df      	lsls	r7, r3, #31
 8005c06:	d45e      	bmi.n	8005cc6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	079e      	lsls	r6, r3, #30
 8005c0c:	f100 80af 	bmi.w	8005d6e <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	06da      	lsls	r2, r3, #27
 8005c14:	d527      	bpl.n	8005c66 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c16:	4b9e      	ldr	r3, [pc, #632]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005c18:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c1c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c20:	2a08      	cmp	r2, #8
 8005c22:	d007      	beq.n	8005c34 <HAL_RCC_OscConfig+0x3c>
 8005c24:	2a18      	cmp	r2, #24
 8005c26:	f040 8107 	bne.w	8005e38 <HAL_RCC_OscConfig+0x240>
 8005c2a:	f001 0203 	and.w	r2, r1, #3
 8005c2e:	2a01      	cmp	r2, #1
 8005c30:	f040 8102 	bne.w	8005e38 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	05db      	lsls	r3, r3, #23
 8005c38:	d502      	bpl.n	8005c40 <HAL_RCC_OscConfig+0x48>
 8005c3a:	69e3      	ldr	r3, [r4, #28]
 8005c3c:	2b80      	cmp	r3, #128	; 0x80
 8005c3e:	d1de      	bne.n	8005bfe <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c40:	f7fc f9e8 	bl	8002014 <HAL_GetREVID>
 8005c44:	f241 0303 	movw	r3, #4099	; 0x1003
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	4298      	cmp	r0, r3
 8005c4c:	4b90      	ldr	r3, [pc, #576]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005c4e:	f200 80ec 	bhi.w	8005e2a <HAL_RCC_OscConfig+0x232>
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	2920      	cmp	r1, #32
 8005c56:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8005c5a:	bf0c      	ite	eq
 8005c5c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8005c60:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8005c64:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	0719      	lsls	r1, r3, #28
 8005c6a:	f100 8127 	bmi.w	8005ebc <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	069a      	lsls	r2, r3, #26
 8005c72:	f100 8148 	bmi.w	8005f06 <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	075d      	lsls	r5, r3, #29
 8005c7a:	d51e      	bpl.n	8005cba <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8005c7c:	4d85      	ldr	r5, [pc, #532]	; (8005e94 <HAL_RCC_OscConfig+0x29c>)
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005c86:	f7fc f9bf 	bl	8002008 <HAL_GetTick>
 8005c8a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	05da      	lsls	r2, r3, #23
 8005c90:	f140 815e 	bpl.w	8005f50 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c94:	68a3      	ldr	r3, [r4, #8]
 8005c96:	4d7e      	ldr	r5, [pc, #504]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f040 8160 	bne.w	8005f5e <HAL_RCC_OscConfig+0x366>
 8005c9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005caa:	f7fc f9ad 	bl	8002008 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cae:	4e78      	ldr	r6, [pc, #480]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8005cb0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cb2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005cb4:	079b      	lsls	r3, r3, #30
 8005cb6:	f140 8178 	bpl.w	8005faa <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f040 817b 	bne.w	8005fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e029      	b.n	8005d1a <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc6:	4b72      	ldr	r3, [pc, #456]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005cc8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ccc:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cd0:	2a10      	cmp	r2, #16
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xe8>
 8005cd4:	2a18      	cmp	r2, #24
 8005cd6:	d10a      	bne.n	8005cee <HAL_RCC_OscConfig+0xf6>
 8005cd8:	f001 0203 	and.w	r2, r1, #3
 8005cdc:	2a02      	cmp	r2, #2
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	039d      	lsls	r5, r3, #14
 8005ce4:	d590      	bpl.n	8005c08 <HAL_RCC_OscConfig+0x10>
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d18d      	bne.n	8005c08 <HAL_RCC_OscConfig+0x10>
 8005cec:	e787      	b.n	8005bfe <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005cf4:	d112      	bne.n	8005d1c <HAL_RCC_OscConfig+0x124>
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005cfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005cfe:	f7fc f983 	bl	8002008 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d02:	4e63      	ldr	r6, [pc, #396]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8005d04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d06:	6833      	ldr	r3, [r6, #0]
 8005d08:	0398      	lsls	r0, r3, #14
 8005d0a:	f53f af7d 	bmi.w	8005c08 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d0e:	f7fc f97b 	bl	8002008 <HAL_GetTick>
 8005d12:	1b40      	subs	r0, r0, r5
 8005d14:	2864      	cmp	r0, #100	; 0x64
 8005d16:	d9f6      	bls.n	8005d06 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8005d18:	2003      	movs	r0, #3
}
 8005d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d1c:	4d5c      	ldr	r5, [pc, #368]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	b99a      	cbnz	r2, 8005d4a <HAL_RCC_OscConfig+0x152>
 8005d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d26:	602b      	str	r3, [r5, #0]
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d30:	f7fc f96a 	bl	8002008 <HAL_GetTick>
 8005d34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	0399      	lsls	r1, r3, #14
 8005d3a:	f57f af65 	bpl.w	8005c08 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d3e:	f7fc f963 	bl	8002008 <HAL_GetTick>
 8005d42:	1b80      	subs	r0, r0, r6
 8005d44:	2864      	cmp	r0, #100	; 0x64
 8005d46:	d9f6      	bls.n	8005d36 <HAL_RCC_OscConfig+0x13e>
 8005d48:	e7e6      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCC_OscConfig+0x168>
 8005d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	e7ce      	b.n	8005cfe <HAL_RCC_OscConfig+0x106>
 8005d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d6c:	e7f6      	b.n	8005d5c <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6e:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005d70:	68e1      	ldr	r1, [r4, #12]
 8005d72:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d74:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d76:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8005d7a:	d003      	beq.n	8005d84 <HAL_RCC_OscConfig+0x18c>
 8005d7c:	2a18      	cmp	r2, #24
 8005d7e:	d12b      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x1e0>
 8005d80:	0782      	lsls	r2, r0, #30
 8005d82:	d129      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	075b      	lsls	r3, r3, #29
 8005d88:	d502      	bpl.n	8005d90 <HAL_RCC_OscConfig+0x198>
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	f43f af37 	beq.w	8005bfe <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d90:	4d3f      	ldr	r5, [pc, #252]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
 8005d92:	682a      	ldr	r2, [r5, #0]
 8005d94:	f022 0219 	bic.w	r2, r2, #25
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8005d9c:	f7fc f934 	bl	8002008 <HAL_GetTick>
 8005da0:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	075f      	lsls	r7, r3, #29
 8005da6:	d511      	bpl.n	8005dcc <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da8:	f7fc f934 	bl	8002014 <HAL_GetREVID>
 8005dac:	f241 0303 	movw	r3, #4099	; 0x1003
 8005db0:	6922      	ldr	r2, [r4, #16]
 8005db2:	4298      	cmp	r0, r3
 8005db4:	686b      	ldr	r3, [r5, #4]
 8005db6:	d822      	bhi.n	8005dfe <HAL_RCC_OscConfig+0x206>
 8005db8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005dbc:	2a40      	cmp	r2, #64	; 0x40
 8005dbe:	bf0c      	ite	eq
 8005dc0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8005dc4:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8005dc8:	606b      	str	r3, [r5, #4]
 8005dca:	e721      	b.n	8005c10 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dcc:	f7fc f91c 	bl	8002008 <HAL_GetTick>
 8005dd0:	1b80      	subs	r0, r0, r6
 8005dd2:	2802      	cmp	r0, #2
 8005dd4:	d9e5      	bls.n	8005da2 <HAL_RCC_OscConfig+0x1aa>
 8005dd6:	e79f      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dd8:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dda:	b1a9      	cbz	r1, 8005e08 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ddc:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de0:	4d2b      	ldr	r5, [pc, #172]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005de2:	430a      	orrs	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005de6:	f7fc f90f 	bl	8002008 <HAL_GetTick>
 8005dea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	0758      	lsls	r0, r3, #29
 8005df0:	d4da      	bmi.n	8005da8 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df2:	f7fc f909 	bl	8002008 <HAL_GetTick>
 8005df6:	1b80      	subs	r0, r0, r6
 8005df8:	2802      	cmp	r0, #2
 8005dfa:	d9f7      	bls.n	8005dec <HAL_RCC_OscConfig+0x1f4>
 8005dfc:	e78c      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e06:	e7df      	b.n	8005dc8 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8005e08:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e0c:	4e20      	ldr	r6, [pc, #128]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 8005e0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e10:	f7fc f8fa 	bl	8002008 <HAL_GetTick>
 8005e14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e16:	6833      	ldr	r3, [r6, #0]
 8005e18:	0759      	lsls	r1, r3, #29
 8005e1a:	f57f aef9 	bpl.w	8005c10 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e1e:	f7fc f8f3 	bl	8002008 <HAL_GetTick>
 8005e22:	1b40      	subs	r0, r0, r5
 8005e24:	2802      	cmp	r0, #2
 8005e26:	d9f6      	bls.n	8005e16 <HAL_RCC_OscConfig+0x21e>
 8005e28:	e776      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8005e30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	e716      	b.n	8005c66 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e38:	69e2      	ldr	r2, [r4, #28]
 8005e3a:	b36a      	cbz	r2, 8005e98 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 8005e3c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e3e:	4d14      	ldr	r5, [pc, #80]	; (8005e90 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8005e40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e46:	f7fc f8df 	bl	8002008 <HAL_GetTick>
 8005e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	05df      	lsls	r7, r3, #23
 8005e50:	d511      	bpl.n	8005e76 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e52:	f7fc f8df 	bl	8002014 <HAL_GetREVID>
 8005e56:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e5a:	6a22      	ldr	r2, [r4, #32]
 8005e5c:	4298      	cmp	r0, r3
 8005e5e:	d810      	bhi.n	8005e82 <HAL_RCC_OscConfig+0x28a>
 8005e60:	686b      	ldr	r3, [r5, #4]
 8005e62:	2a20      	cmp	r2, #32
 8005e64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e68:	bf0c      	ite	eq
 8005e6a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8005e6e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8005e72:	606b      	str	r3, [r5, #4]
 8005e74:	e6f7      	b.n	8005c66 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e76:	f7fc f8c7 	bl	8002008 <HAL_GetTick>
 8005e7a:	1b80      	subs	r0, r0, r6
 8005e7c:	2802      	cmp	r0, #2
 8005e7e:	d9e5      	bls.n	8005e4c <HAL_RCC_OscConfig+0x254>
 8005e80:	e74a      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e82:	68eb      	ldr	r3, [r5, #12]
 8005e84:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005e88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e8c:	60eb      	str	r3, [r5, #12]
 8005e8e:	e6ea      	b.n	8005c66 <HAL_RCC_OscConfig+0x6e>
 8005e90:	58024400 	.word	0x58024400
 8005e94:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8005e98:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e9a:	4e9f      	ldr	r6, [pc, #636]	; (8006118 <HAL_RCC_OscConfig+0x520>)
        __HAL_RCC_CSI_DISABLE();
 8005e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ea2:	f7fc f8b1 	bl	8002008 <HAL_GetTick>
 8005ea6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ea8:	6833      	ldr	r3, [r6, #0]
 8005eaa:	05d8      	lsls	r0, r3, #23
 8005eac:	f57f aedb 	bpl.w	8005c66 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005eb0:	f7fc f8aa 	bl	8002008 <HAL_GetTick>
 8005eb4:	1b40      	subs	r0, r0, r5
 8005eb6:	2802      	cmp	r0, #2
 8005eb8:	d9f6      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x2b0>
 8005eba:	e72d      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ebc:	6963      	ldr	r3, [r4, #20]
 8005ebe:	4d96      	ldr	r5, [pc, #600]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005ec0:	b183      	cbz	r3, 8005ee4 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8005ec2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005eca:	f7fc f89d 	bl	8002008 <HAL_GetTick>
 8005ece:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ed0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005ed2:	079b      	lsls	r3, r3, #30
 8005ed4:	f53f aecb 	bmi.w	8005c6e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ed8:	f7fc f896 	bl	8002008 <HAL_GetTick>
 8005edc:	1b80      	subs	r0, r0, r6
 8005ede:	2802      	cmp	r0, #2
 8005ee0:	d9f6      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x2d8>
 8005ee2:	e719      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8005ee4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005eec:	f7fc f88c 	bl	8002008 <HAL_GetTick>
 8005ef0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ef2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005ef4:	079f      	lsls	r7, r3, #30
 8005ef6:	f57f aeba 	bpl.w	8005c6e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fc f885 	bl	8002008 <HAL_GetTick>
 8005efe:	1b80      	subs	r0, r0, r6
 8005f00:	2802      	cmp	r0, #2
 8005f02:	d9f6      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x2fa>
 8005f04:	e708      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005f06:	69a3      	ldr	r3, [r4, #24]
 8005f08:	4d83      	ldr	r5, [pc, #524]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005f0a:	b183      	cbz	r3, 8005f2e <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005f14:	f7fc f878 	bl	8002008 <HAL_GetTick>
 8005f18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	0498      	lsls	r0, r3, #18
 8005f1e:	f53f aeaa 	bmi.w	8005c76 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f22:	f7fc f871 	bl	8002008 <HAL_GetTick>
 8005f26:	1b80      	subs	r0, r0, r6
 8005f28:	2802      	cmp	r0, #2
 8005f2a:	d9f6      	bls.n	8005f1a <HAL_RCC_OscConfig+0x322>
 8005f2c:	e6f4      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f34:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005f36:	f7fc f867 	bl	8002008 <HAL_GetTick>
 8005f3a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	0499      	lsls	r1, r3, #18
 8005f40:	f57f ae99 	bpl.w	8005c76 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f44:	f7fc f860 	bl	8002008 <HAL_GetTick>
 8005f48:	1b80      	subs	r0, r0, r6
 8005f4a:	2802      	cmp	r0, #2
 8005f4c:	d9f6      	bls.n	8005f3c <HAL_RCC_OscConfig+0x344>
 8005f4e:	e6e3      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f50:	f7fc f85a 	bl	8002008 <HAL_GetTick>
 8005f54:	1b80      	subs	r0, r0, r6
 8005f56:	2864      	cmp	r0, #100	; 0x64
 8005f58:	f67f ae98 	bls.w	8005c8c <HAL_RCC_OscConfig+0x94>
 8005f5c:	e6dc      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f5e:	b9b3      	cbnz	r3, 8005f8e <HAL_RCC_OscConfig+0x396>
 8005f60:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f62:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	672b      	str	r3, [r5, #112]	; 0x70
 8005f6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005f6e:	f023 0304 	bic.w	r3, r3, #4
 8005f72:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005f74:	f7fc f848 	bl	8002008 <HAL_GetTick>
 8005f78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005f7c:	0798      	lsls	r0, r3, #30
 8005f7e:	f57f ae9c 	bpl.w	8005cba <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fc f841 	bl	8002008 <HAL_GetTick>
 8005f86:	1b80      	subs	r0, r0, r6
 8005f88:	42b8      	cmp	r0, r7
 8005f8a:	d9f6      	bls.n	8005f7a <HAL_RCC_OscConfig+0x382>
 8005f8c:	e6c4      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005f92:	d103      	bne.n	8005f9c <HAL_RCC_OscConfig+0x3a4>
 8005f94:	f043 0304 	orr.w	r3, r3, #4
 8005f98:	672b      	str	r3, [r5, #112]	; 0x70
 8005f9a:	e680      	b.n	8005c9e <HAL_RCC_OscConfig+0xa6>
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	672b      	str	r3, [r5, #112]	; 0x70
 8005fa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	e67c      	b.n	8005ca4 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005faa:	f7fc f82d 	bl	8002008 <HAL_GetTick>
 8005fae:	1b40      	subs	r0, r0, r5
 8005fb0:	42b8      	cmp	r0, r7
 8005fb2:	f67f ae7e 	bls.w	8005cb2 <HAL_RCC_OscConfig+0xba>
 8005fb6:	e6af      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fb8:	4d57      	ldr	r5, [pc, #348]	; (8006118 <HAL_RCC_OscConfig+0x520>)
 8005fba:	692b      	ldr	r3, [r5, #16]
 8005fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc0:	2b18      	cmp	r3, #24
 8005fc2:	d07a      	beq.n	80060ba <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 8005fc4:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fc6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fce:	d167      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 8005fd0:	f7fc f81a 	bl	8002008 <HAL_GetTick>
 8005fd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	0199      	lsls	r1, r3, #6
 8005fda:	d45b      	bmi.n	8006094 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005fde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005fe0:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005ff0:	62ab      	str	r3, [r5, #40]	; 0x28
 8005ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ff4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	025b      	lsls	r3, r3, #9
 8005ffc:	0412      	lsls	r2, r2, #16
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006004:	4313      	orrs	r3, r2
 8006006:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006008:	3a01      	subs	r2, #1
 800600a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800600e:	4313      	orrs	r3, r2
 8006010:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006012:	3a01      	subs	r2, #1
 8006014:	0612      	lsls	r2, r2, #24
 8006016:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800601a:	4313      	orrs	r3, r2
 800601c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800601e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006026:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006028:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800602a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800602e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006032:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006036:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006038:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800603a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800603c:	f023 030c 	bic.w	r3, r3, #12
 8006040:	4313      	orrs	r3, r2
 8006042:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006044:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006046:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006048:	f023 0302 	bic.w	r3, r3, #2
 800604c:	4313      	orrs	r3, r2
 800604e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006050:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006056:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800605a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006060:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006066:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006068:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006076:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006078:	f7fb ffc6 	bl	8002008 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800607c:	4d26      	ldr	r5, [pc, #152]	; (8006118 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 800607e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	019a      	lsls	r2, r3, #6
 8006084:	f53f ae1d 	bmi.w	8005cc2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006088:	f7fb ffbe 	bl	8002008 <HAL_GetTick>
 800608c:	1b00      	subs	r0, r0, r4
 800608e:	2802      	cmp	r0, #2
 8006090:	d9f6      	bls.n	8006080 <HAL_RCC_OscConfig+0x488>
 8006092:	e641      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006094:	f7fb ffb8 	bl	8002008 <HAL_GetTick>
 8006098:	1b80      	subs	r0, r0, r6
 800609a:	2802      	cmp	r0, #2
 800609c:	d99b      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x3de>
 800609e:	e63b      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80060a0:	f7fb ffb2 	bl	8002008 <HAL_GetTick>
 80060a4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	019b      	lsls	r3, r3, #6
 80060aa:	f57f ae0a 	bpl.w	8005cc2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ae:	f7fb ffab 	bl	8002008 <HAL_GetTick>
 80060b2:	1b00      	subs	r0, r0, r4
 80060b4:	2802      	cmp	r0, #2
 80060b6:	d9f6      	bls.n	80060a6 <HAL_RCC_OscConfig+0x4ae>
 80060b8:	e62e      	b.n	8005d18 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ba:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80060be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c0:	f43f ae2b 	beq.w	8005d1a <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c4:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80060ca:	4281      	cmp	r1, r0
 80060cc:	f47f ad97 	bne.w	8005bfe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060d0:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060d6:	428a      	cmp	r2, r1
 80060d8:	f47f ad91 	bne.w	8005bfe <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060de:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80060e2:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060e4:	4291      	cmp	r1, r2
 80060e6:	f47f ad8a 	bne.w	8005bfe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80060ec:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80060f0:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060f2:	4291      	cmp	r1, r2
 80060f4:	f47f ad83 	bne.w	8005bfe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060fa:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80060fe:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006100:	4291      	cmp	r1, r2
 8006102:	f47f ad7c 	bne.w	8005bfe <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006106:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006108:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800610c:	3801      	subs	r0, #1
  return HAL_OK;
 800610e:	1a18      	subs	r0, r3, r0
 8006110:	bf18      	it	ne
 8006112:	2001      	movne	r0, #1
 8006114:	e601      	b.n	8005d1a <HAL_RCC_OscConfig+0x122>
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400

0800611c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800611c:	4b48      	ldr	r3, [pc, #288]	; (8006240 <HAL_RCC_GetSysClockFreq+0x124>)
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006124:	2a10      	cmp	r2, #16
{
 8006126:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006128:	f000 8086 	beq.w	8006238 <HAL_RCC_GetSysClockFreq+0x11c>
 800612c:	2a18      	cmp	r2, #24
 800612e:	d00c      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0x2e>
 8006130:	2a00      	cmp	r2, #0
 8006132:	f040 8083 	bne.w	800623c <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4842      	ldr	r0, [pc, #264]	; (8006244 <HAL_RCC_GetSysClockFreq+0x128>)
 800613a:	f012 0f20 	tst.w	r2, #32
 800613e:	d003      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006146:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8006148:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800614a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800614c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800614e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8006150:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006154:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 800615a:	d0f5      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800615c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006160:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006164:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006168:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800616c:	4362      	muls	r2, r4
 800616e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006172:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006176:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006178:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800617c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8006180:	d04c      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x100>
 8006182:	2902      	cmp	r1, #2
 8006184:	d03c      	beq.n	8006200 <HAL_RCC_GetSysClockFreq+0xe4>
 8006186:	2900      	cmp	r1, #0
 8006188:	d148      	bne.n	800621c <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	0692      	lsls	r2, r2, #26
 800618e:	d527      	bpl.n	80061e0 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006190:	6819      	ldr	r1, [r3, #0]
 8006192:	4a2c      	ldr	r2, [pc, #176]	; (8006244 <HAL_RCC_GetSysClockFreq+0x128>)
 8006194:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800619a:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	ee07 2a10 	vmov	s14, r2
 80061a4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80061a8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80061ac:	ee06 3a90 	vmov	s13, r3
 80061b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80061b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061bc:	4b20      	ldr	r3, [pc, #128]	; (8006240 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061be:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80061c8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061ca:	ee07 3a10 	vmov	s14, r3
 80061ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061d6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80061da:	ee17 0a90 	vmov	r0, s15
 80061de:	e7b3      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a10 	vmov	s14, r3
 80061ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80061f6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006248 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061fa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80061fe:	e7dd      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006206:	ee07 3a10 	vmov	s14, r3
 800620a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800620e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006212:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006216:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800624c <HAL_RCC_GetSysClockFreq+0x130>
 800621a:	e7ee      	b.n	80061fa <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006222:	ee07 3a10 	vmov	s14, r3
 8006226:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800622a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006232:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8006250 <HAL_RCC_GetSysClockFreq+0x134>
 8006236:	e7e0      	b.n	80061fa <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006238:	4806      	ldr	r0, [pc, #24]	; (8006254 <HAL_RCC_GetSysClockFreq+0x138>)
 800623a:	e785      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 800623c:	4806      	ldr	r0, [pc, #24]	; (8006258 <HAL_RCC_GetSysClockFreq+0x13c>)
 800623e:	e783      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x2c>
 8006240:	58024400 	.word	0x58024400
 8006244:	03d09000 	.word	0x03d09000
 8006248:	4c742400 	.word	0x4c742400
 800624c:	4be4e1c0 	.word	0x4be4e1c0
 8006250:	4a742400 	.word	0x4a742400
 8006254:	01c9c380 	.word	0x01c9c380
 8006258:	003d0900 	.word	0x003d0900

0800625c <HAL_RCC_ClockConfig>:
{
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006262:	4604      	mov	r4, r0
 8006264:	b910      	cbnz	r0, 800626c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006266:	2001      	movs	r0, #1
}
 8006268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4a88      	ldr	r2, [pc, #544]	; (8006490 <HAL_RCC_ClockConfig+0x234>)
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	428b      	cmp	r3, r1
 8006276:	f0c0 8093 	bcc.w	80063a0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	075f      	lsls	r7, r3, #29
 800627e:	f100 809b 	bmi.w	80063b8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006282:	071e      	lsls	r6, r3, #28
 8006284:	d50b      	bpl.n	800629e <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006286:	4983      	ldr	r1, [pc, #524]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 8006288:	6966      	ldr	r6, [r4, #20]
 800628a:	69c8      	ldr	r0, [r1, #28]
 800628c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006290:	4286      	cmp	r6, r0
 8006292:	d904      	bls.n	800629e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006294:	69ca      	ldr	r2, [r1, #28]
 8006296:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800629a:	4332      	orrs	r2, r6
 800629c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629e:	06d8      	lsls	r0, r3, #27
 80062a0:	d50b      	bpl.n	80062ba <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062a2:	497c      	ldr	r1, [pc, #496]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 80062a4:	69a6      	ldr	r6, [r4, #24]
 80062a6:	69c8      	ldr	r0, [r1, #28]
 80062a8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80062ac:	4286      	cmp	r6, r0
 80062ae:	d904      	bls.n	80062ba <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062b0:	69ca      	ldr	r2, [r1, #28]
 80062b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062b6:	4332      	orrs	r2, r6
 80062b8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ba:	0699      	lsls	r1, r3, #26
 80062bc:	d50b      	bpl.n	80062d6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062be:	4975      	ldr	r1, [pc, #468]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 80062c0:	69e6      	ldr	r6, [r4, #28]
 80062c2:	6a08      	ldr	r0, [r1, #32]
 80062c4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80062c8:	4286      	cmp	r6, r0
 80062ca:	d904      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062cc:	6a0a      	ldr	r2, [r1, #32]
 80062ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062d2:	4332      	orrs	r2, r6
 80062d4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d6:	079a      	lsls	r2, r3, #30
 80062d8:	d50b      	bpl.n	80062f2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062da:	496e      	ldr	r1, [pc, #440]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 80062dc:	68e6      	ldr	r6, [r4, #12]
 80062de:	6988      	ldr	r0, [r1, #24]
 80062e0:	f000 000f 	and.w	r0, r0, #15
 80062e4:	4286      	cmp	r6, r0
 80062e6:	d904      	bls.n	80062f2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e8:	698a      	ldr	r2, [r1, #24]
 80062ea:	f022 020f 	bic.w	r2, r2, #15
 80062ee:	4332      	orrs	r2, r6
 80062f0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f2:	07df      	lsls	r7, r3, #31
 80062f4:	d46e      	bmi.n	80063d4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	079e      	lsls	r6, r3, #30
 80062fa:	f100 80a1 	bmi.w	8006440 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062fe:	4964      	ldr	r1, [pc, #400]	; (8006490 <HAL_RCC_ClockConfig+0x234>)
 8006300:	680a      	ldr	r2, [r1, #0]
 8006302:	f002 020f 	and.w	r2, r2, #15
 8006306:	42aa      	cmp	r2, r5
 8006308:	f200 80a8 	bhi.w	800645c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800630c:	0758      	lsls	r0, r3, #29
 800630e:	f100 80b1 	bmi.w	8006474 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006312:	0719      	lsls	r1, r3, #28
 8006314:	d50b      	bpl.n	800632e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006316:	495f      	ldr	r1, [pc, #380]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 8006318:	6965      	ldr	r5, [r4, #20]
 800631a:	69c8      	ldr	r0, [r1, #28]
 800631c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006320:	4285      	cmp	r5, r0
 8006322:	d204      	bcs.n	800632e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006324:	69ca      	ldr	r2, [r1, #28]
 8006326:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800632a:	432a      	orrs	r2, r5
 800632c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632e:	06da      	lsls	r2, r3, #27
 8006330:	d50b      	bpl.n	800634a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006332:	4958      	ldr	r1, [pc, #352]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 8006334:	69a5      	ldr	r5, [r4, #24]
 8006336:	69c8      	ldr	r0, [r1, #28]
 8006338:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800633c:	4285      	cmp	r5, r0
 800633e:	d204      	bcs.n	800634a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006340:	69ca      	ldr	r2, [r1, #28]
 8006342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006346:	432a      	orrs	r2, r5
 8006348:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800634a:	069b      	lsls	r3, r3, #26
 800634c:	d50b      	bpl.n	8006366 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800634e:	4a51      	ldr	r2, [pc, #324]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 8006350:	69e0      	ldr	r0, [r4, #28]
 8006352:	6a11      	ldr	r1, [r2, #32]
 8006354:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8006358:	4288      	cmp	r0, r1
 800635a:	d204      	bcs.n	8006366 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800635c:	6a13      	ldr	r3, [r2, #32]
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	4303      	orrs	r3, r0
 8006364:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006366:	f7ff fed9 	bl	800611c <HAL_RCC_GetSysClockFreq>
 800636a:	494a      	ldr	r1, [pc, #296]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 800636c:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <HAL_RCC_ClockConfig+0x23c>)
 800636e:	698b      	ldr	r3, [r1, #24]
 8006370:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006374:	5cd3      	ldrb	r3, [r2, r3]
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800637c:	698b      	ldr	r3, [r1, #24]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	5cd3      	ldrb	r3, [r2, r3]
 8006384:	4a45      	ldr	r2, [pc, #276]	; (800649c <HAL_RCC_ClockConfig+0x240>)
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	fa20 f303 	lsr.w	r3, r0, r3
 800638e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8006390:	4b43      	ldr	r3, [pc, #268]	; (80064a0 <HAL_RCC_ClockConfig+0x244>)
 8006392:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8006394:	4b43      	ldr	r3, [pc, #268]	; (80064a4 <HAL_RCC_ClockConfig+0x248>)
}
 8006396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	f7fb baf0 	b.w	8001980 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	f023 030f 	bic.w	r3, r3, #15
 80063a6:	430b      	orrs	r3, r1
 80063a8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	428b      	cmp	r3, r1
 80063b2:	f47f af58 	bne.w	8006266 <HAL_RCC_ClockConfig+0xa>
 80063b6:	e760      	b.n	800627a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063b8:	4936      	ldr	r1, [pc, #216]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 80063ba:	6926      	ldr	r6, [r4, #16]
 80063bc:	6988      	ldr	r0, [r1, #24]
 80063be:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80063c2:	4286      	cmp	r6, r0
 80063c4:	f67f af5d 	bls.w	8006282 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063c8:	698a      	ldr	r2, [r1, #24]
 80063ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063ce:	4332      	orrs	r2, r6
 80063d0:	618a      	str	r2, [r1, #24]
 80063d2:	e756      	b.n	8006282 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063d4:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 80063d6:	68a1      	ldr	r1, [r4, #8]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80063de:	430a      	orrs	r2, r1
 80063e0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e2:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063e4:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e6:	2a02      	cmp	r2, #2
 80063e8:	d11d      	bne.n	8006426 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ee:	f43f af3a 	beq.w	8006266 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063f2:	4e28      	ldr	r6, [pc, #160]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063f8:	6933      	ldr	r3, [r6, #16]
 80063fa:	f023 0307 	bic.w	r3, r3, #7
 80063fe:	4313      	orrs	r3, r2
 8006400:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8006402:	f7fb fe01 	bl	8002008 <HAL_GetTick>
 8006406:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006408:	6933      	ldr	r3, [r6, #16]
 800640a:	6862      	ldr	r2, [r4, #4]
 800640c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006410:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006414:	f43f af6f 	beq.w	80062f6 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f7fb fdf6 	bl	8002008 <HAL_GetTick>
 800641c:	1bc0      	subs	r0, r0, r7
 800641e:	4540      	cmp	r0, r8
 8006420:	d9f2      	bls.n	8006408 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8006422:	2003      	movs	r0, #3
 8006424:	e720      	b.n	8006268 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006426:	2a03      	cmp	r2, #3
 8006428:	d102      	bne.n	8006430 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800642a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800642e:	e7de      	b.n	80063ee <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006430:	2a01      	cmp	r2, #1
 8006432:	d102      	bne.n	800643a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006434:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006438:	e7d9      	b.n	80063ee <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800643a:	f013 0f04 	tst.w	r3, #4
 800643e:	e7d6      	b.n	80063ee <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006440:	4914      	ldr	r1, [pc, #80]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 8006442:	68e6      	ldr	r6, [r4, #12]
 8006444:	6988      	ldr	r0, [r1, #24]
 8006446:	f000 000f 	and.w	r0, r0, #15
 800644a:	4286      	cmp	r6, r0
 800644c:	f4bf af57 	bcs.w	80062fe <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006450:	698a      	ldr	r2, [r1, #24]
 8006452:	f022 020f 	bic.w	r2, r2, #15
 8006456:	4332      	orrs	r2, r6
 8006458:	618a      	str	r2, [r1, #24]
 800645a:	e750      	b.n	80062fe <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645c:	680a      	ldr	r2, [r1, #0]
 800645e:	f022 020f 	bic.w	r2, r2, #15
 8006462:	432a      	orrs	r2, r5
 8006464:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	680a      	ldr	r2, [r1, #0]
 8006468:	f002 020f 	and.w	r2, r2, #15
 800646c:	42aa      	cmp	r2, r5
 800646e:	f47f aefa 	bne.w	8006266 <HAL_RCC_ClockConfig+0xa>
 8006472:	e74b      	b.n	800630c <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006474:	4907      	ldr	r1, [pc, #28]	; (8006494 <HAL_RCC_ClockConfig+0x238>)
 8006476:	6925      	ldr	r5, [r4, #16]
 8006478:	6988      	ldr	r0, [r1, #24]
 800647a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800647e:	4285      	cmp	r5, r0
 8006480:	f4bf af47 	bcs.w	8006312 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006484:	698a      	ldr	r2, [r1, #24]
 8006486:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800648a:	432a      	orrs	r2, r5
 800648c:	618a      	str	r2, [r1, #24]
 800648e:	e740      	b.n	8006312 <HAL_RCC_ClockConfig+0xb6>
 8006490:	52002000 	.word	0x52002000
 8006494:	58024400 	.word	0x58024400
 8006498:	0801a9d8 	.word	0x0801a9d8
 800649c:	24000004 	.word	0x24000004
 80064a0:	24000000 	.word	0x24000000
 80064a4:	2400000c 	.word	0x2400000c

080064a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a8:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064aa:	4c0c      	ldr	r4, [pc, #48]	; (80064dc <HAL_RCC_GetHCLKFreq+0x34>)
 80064ac:	f7ff fe36 	bl	800611c <HAL_RCC_GetSysClockFreq>
 80064b0:	490b      	ldr	r1, [pc, #44]	; (80064e0 <HAL_RCC_GetHCLKFreq+0x38>)
 80064b2:	69a3      	ldr	r3, [r4, #24]
 80064b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80064b8:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064ba:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064bc:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064c0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064c4:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064c8:	5ccb      	ldrb	r3, [r1, r3]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	fa22 f003 	lsr.w	r0, r2, r3
 80064d2:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x3c>)
 80064d4:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064d6:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x40>)
 80064d8:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	58024400 	.word	0x58024400
 80064e0:	0801a9d8 	.word	0x0801a9d8
 80064e4:	24000004 	.word	0x24000004
 80064e8:	24000000 	.word	0x24000000

080064ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ec:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064ee:	f7ff ffdb 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80064f4:	4a05      	ldr	r2, [pc, #20]	; (800650c <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80064fc:	5cd3      	ldrb	r3, [r2, r3]
 80064fe:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006502:	40d8      	lsrs	r0, r3
 8006504:	bd08      	pop	{r3, pc}
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
 800650c:	0801a9d8 	.word	0x0801a9d8

08006510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006510:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006512:	f7ff ffc9 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006518:	4a05      	ldr	r2, [pc, #20]	; (8006530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006520:	5cd3      	ldrb	r3, [r2, r3]
 8006522:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006526:	40d8      	lsrs	r0, r3
 8006528:	bd08      	pop	{r3, pc}
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	0801a9d8 	.word	0x0801a9d8

08006534 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006534:	233f      	movs	r3, #63	; 0x3f
 8006536:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCC_GetClockConfig+0x4c>)
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	f002 0207 	and.w	r2, r2, #7
 8006540:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006548:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	f002 020f 	and.w	r2, r2, #15
 8006550:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006558:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006560:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006568:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006570:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <HAL_RCC_GetClockConfig+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	600b      	str	r3, [r1, #0]
}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	52002000 	.word	0x52002000

08006588 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800658a:	4c3a      	ldr	r4, [pc, #232]	; (8006674 <RCCEx_PLL2_Config+0xec>)
{
 800658c:	4606      	mov	r6, r0
 800658e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b03      	cmp	r3, #3
 8006598:	d069      	beq.n	800666e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a2:	f7fb fd31 	bl	8002008 <HAL_GetTick>
 80065a6:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	d44b      	bmi.n	8006646 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065b6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80065ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80065bc:	68b3      	ldr	r3, [r6, #8]
 80065be:	68f2      	ldr	r2, [r6, #12]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	3a01      	subs	r2, #1
 80065c4:	025b      	lsls	r3, r3, #9
 80065c6:	0412      	lsls	r2, r2, #16
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80065ce:	4313      	orrs	r3, r2
 80065d0:	6872      	ldr	r2, [r6, #4]
 80065d2:	3a01      	subs	r2, #1
 80065d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d8:	4313      	orrs	r3, r2
 80065da:	6932      	ldr	r2, [r6, #16]
 80065dc:	3a01      	subs	r2, #1
 80065de:	0612      	lsls	r2, r2, #24
 80065e0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80065e4:	4313      	orrs	r3, r2
 80065e6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065ea:	6972      	ldr	r2, [r6, #20]
 80065ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065f0:	4313      	orrs	r3, r2
 80065f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065f6:	69b2      	ldr	r2, [r6, #24]
 80065f8:	f023 0320 	bic.w	r3, r3, #32
 80065fc:	4313      	orrs	r3, r2
 80065fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006602:	f023 0310 	bic.w	r3, r3, #16
 8006606:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006608:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800660a:	69f2      	ldr	r2, [r6, #28]
 800660c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006610:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006614:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006618:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800661a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800661c:	f043 0310 	orr.w	r3, r3, #16
 8006620:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006624:	b9b5      	cbnz	r5, 8006654 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800662a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800662c:	4c11      	ldr	r4, [pc, #68]	; (8006674 <RCCEx_PLL2_Config+0xec>)
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006634:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006636:	f7fb fce7 	bl	8002008 <HAL_GetTick>
 800663a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	d50f      	bpl.n	8006662 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8006642:	2000      	movs	r0, #0
 8006644:	e005      	b.n	8006652 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006646:	f7fb fcdf 	bl	8002008 <HAL_GetTick>
 800664a:	1bc0      	subs	r0, r0, r7
 800664c:	2802      	cmp	r0, #2
 800664e:	d9ab      	bls.n	80065a8 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8006650:	2003      	movs	r0, #3
}
 8006652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8006654:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006656:	bf0c      	ite	eq
 8006658:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800665c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006660:	e7e3      	b.n	800662a <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006662:	f7fb fcd1 	bl	8002008 <HAL_GetTick>
 8006666:	1b40      	subs	r0, r0, r5
 8006668:	2802      	cmp	r0, #2
 800666a:	d9e7      	bls.n	800663c <RCCEx_PLL2_Config+0xb4>
 800666c:	e7f0      	b.n	8006650 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800666e:	2001      	movs	r0, #1
 8006670:	e7ef      	b.n	8006652 <RCCEx_PLL2_Config+0xca>
 8006672:	bf00      	nop
 8006674:	58024400 	.word	0x58024400

08006678 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800667a:	4c3a      	ldr	r4, [pc, #232]	; (8006764 <RCCEx_PLL3_Config+0xec>)
{
 800667c:	4606      	mov	r6, r0
 800667e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d069      	beq.n	800675e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006690:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006692:	f7fb fcb9 	bl	8002008 <HAL_GetTick>
 8006696:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	009a      	lsls	r2, r3, #2
 800669c:	d44b      	bmi.n	8006736 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800669e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066a0:	6832      	ldr	r2, [r6, #0]
 80066a2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80066a6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80066aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ac:	68b3      	ldr	r3, [r6, #8]
 80066ae:	68f2      	ldr	r2, [r6, #12]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	3a01      	subs	r2, #1
 80066b4:	025b      	lsls	r3, r3, #9
 80066b6:	0412      	lsls	r2, r2, #16
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80066be:	4313      	orrs	r3, r2
 80066c0:	6872      	ldr	r2, [r6, #4]
 80066c2:	3a01      	subs	r2, #1
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	4313      	orrs	r3, r2
 80066ca:	6932      	ldr	r2, [r6, #16]
 80066cc:	3a01      	subs	r2, #1
 80066ce:	0612      	lsls	r2, r2, #24
 80066d0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80066d4:	4313      	orrs	r3, r2
 80066d6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066da:	6972      	ldr	r2, [r6, #20]
 80066dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066e0:	4313      	orrs	r3, r2
 80066e2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066e6:	69b2      	ldr	r2, [r6, #24]
 80066e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066ec:	4313      	orrs	r3, r2
 80066ee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80066fa:	69f2      	ldr	r2, [r6, #28]
 80066fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006704:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006708:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800670a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800670c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006710:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006714:	b9b5      	cbnz	r5, 8006744 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800671a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800671c:	4c11      	ldr	r4, [pc, #68]	; (8006764 <RCCEx_PLL3_Config+0xec>)
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006724:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006726:	f7fb fc6f 	bl	8002008 <HAL_GetTick>
 800672a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	d50f      	bpl.n	8006752 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8006732:	2000      	movs	r0, #0
 8006734:	e005      	b.n	8006742 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006736:	f7fb fc67 	bl	8002008 <HAL_GetTick>
 800673a:	1bc0      	subs	r0, r0, r7
 800673c:	2802      	cmp	r0, #2
 800673e:	d9ab      	bls.n	8006698 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8006740:	2003      	movs	r0, #3
}
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8006744:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006746:	bf0c      	ite	eq
 8006748:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800674c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006750:	e7e3      	b.n	800671a <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006752:	f7fb fc59 	bl	8002008 <HAL_GetTick>
 8006756:	1b40      	subs	r0, r0, r5
 8006758:	2802      	cmp	r0, #2
 800675a:	d9e7      	bls.n	800672c <RCCEx_PLL3_Config+0xb4>
 800675c:	e7f0      	b.n	8006740 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800675e:	2001      	movs	r0, #1
 8006760:	e7ef      	b.n	8006742 <RCCEx_PLL3_Config+0xca>
 8006762:	bf00      	nop
 8006764:	58024400 	.word	0x58024400

08006768 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800676c:	6806      	ldr	r6, [r0, #0]
{
 800676e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006770:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8006774:	d009      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006776:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800677c:	d02e      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800677e:	d813      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006780:	b1f3      	cbz	r3, 80067c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006786:	d021      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006788:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800678a:	682b      	ldr	r3, [r5, #0]
 800678c:	05dc      	lsls	r4, r3, #23
 800678e:	f140 80ea 	bpl.w	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006792:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006794:	2b04      	cmp	r3, #4
 8006796:	f200 80e5 	bhi.w	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800679a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800679e:	0024      	.short	0x0024
 80067a0:	00dd002b 	.word	0x00dd002b
 80067a4:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 80067a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067ac:	d1ec      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067ae:	4aa6      	ldr	r2, [pc, #664]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80067b0:	2600      	movs	r6, #0
 80067b2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80067b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80067b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067ba:	430b      	orrs	r3, r1
 80067bc:	6513      	str	r3, [r2, #80]	; 0x50
 80067be:	e7e4      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c0:	4aa1      	ldr	r2, [pc, #644]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80067c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80067c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80067ca:	e7f0      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067cc:	2102      	movs	r1, #2
 80067ce:	3004      	adds	r0, #4
 80067d0:	f7ff feda 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067d4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d1d7      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x22>
 80067da:	e7e8      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067dc:	2102      	movs	r1, #2
 80067de:	3024      	adds	r0, #36	; 0x24
 80067e0:	f7ff ff4a 	bl	8006678 <RCCEx_PLL3_Config>
 80067e4:	e7f6      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e6:	4a98      	ldr	r2, [pc, #608]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80067e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80067ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 80067f0:	4634      	mov	r4, r6
 80067f2:	e004      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067f4:	2100      	movs	r1, #0
 80067f6:	1d28      	adds	r0, r5, #4
 80067f8:	f7ff fec6 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067fc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80067fe:	2c00      	cmp	r4, #0
 8006800:	f040 80b3 	bne.w	800696a <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006804:	4a90      	ldr	r2, [pc, #576]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006806:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8006808:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	430b      	orrs	r3, r1
 8006810:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006812:	682b      	ldr	r3, [r5, #0]
 8006814:	0598      	lsls	r0, r3, #22
 8006816:	d50d      	bpl.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006818:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	f000 80c2 	beq.w	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8006820:	f200 80a5 	bhi.w	800696e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80b1 	beq.w	800698c <HAL_RCCEx_PeriphCLKConfig+0x224>
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	f000 80b4 	beq.w	8006998 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006830:	2601      	movs	r6, #1
 8006832:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	0559      	lsls	r1, r3, #21
 8006838:	d510      	bpl.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 800683a:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800683e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006842:	f000 80d4 	beq.w	80069ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006846:	f200 80b5 	bhi.w	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80c3 	beq.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006854:	f000 80c5 	beq.w	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006858:	2601      	movs	r6, #1
 800685a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	051a      	lsls	r2, r3, #20
 8006860:	d510      	bpl.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006862:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8006866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800686a:	f000 80e5 	beq.w	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800686e:	f200 80c6 	bhi.w	80069fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80d4 	beq.w	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800687c:	f000 80d6 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8006880:	2601      	movs	r6, #1
 8006882:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	019b      	lsls	r3, r3, #6
 8006888:	d50d      	bpl.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 800688a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800688c:	2b20      	cmp	r3, #32
 800688e:	f000 80ef 	beq.w	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006892:	f200 80db 	bhi.w	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80db 	beq.w	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 800689c:	2b10      	cmp	r3, #16
 800689e:	f000 80e1 	beq.w	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80068a2:	2601      	movs	r6, #1
 80068a4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	04df      	lsls	r7, r3, #19
 80068aa:	d50f      	bpl.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 80068ac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	f000 8101 	beq.w	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80068b6:	f200 80e3 	bhi.w	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80f0 	beq.w	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c4:	f000 80f2 	beq.w	8006aac <HAL_RCCEx_PeriphCLKConfig+0x344>
 80068c8:	2601      	movs	r6, #1
 80068ca:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	0498      	lsls	r0, r3, #18
 80068d0:	d50f      	bpl.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 80068d2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80068d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d8:	f000 810e 	beq.w	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80068dc:	f200 80f4 	bhi.w	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80fa 	beq.w	8006ada <HAL_RCCEx_PeriphCLKConfig+0x372>
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	f000 80ff 	beq.w	8006aec <HAL_RCCEx_PeriphCLKConfig+0x384>
 80068ee:	2601      	movs	r6, #1
 80068f0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	0459      	lsls	r1, r3, #17
 80068f6:	d510      	bpl.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 80068f8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006900:	f000 811b 	beq.w	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006904:	f200 8100 	bhi.w	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8106 	beq.w	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800690e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006912:	f000 810c 	beq.w	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006916:	2601      	movs	r6, #1
 8006918:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	041a      	lsls	r2, r3, #16
 800691e:	d50d      	bpl.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8006920:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006926:	f000 8110 	beq.w	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692e:	f000 811a 	beq.w	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 810e 	beq.w	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006938:	2601      	movs	r6, #1
 800693a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	f140 8127 	bpl.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8006944:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006946:	2b03      	cmp	r3, #3
 8006948:	f200 8167 	bhi.w	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800694c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006950:	01130118 	.word	0x01130118
 8006954:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006958:	2100      	movs	r1, #0
 800695a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800695e:	f7ff fe8b 	bl	8006678 <RCCEx_PLL3_Config>
 8006962:	e74b      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006964:	2601      	movs	r6, #1
 8006966:	4634      	mov	r4, r6
 8006968:	e753      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800696a:	4626      	mov	r6, r4
 800696c:	e751      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 800696e:	2bc0      	cmp	r3, #192	; 0xc0
 8006970:	d003      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006976:	f47f af5b 	bne.w	8006830 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 800697a:	b9cc      	cbnz	r4, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800697c:	4a32      	ldr	r2, [pc, #200]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800697e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8006980:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006982:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8006986:	430b      	orrs	r3, r1
 8006988:	6513      	str	r3, [r2, #80]	; 0x50
 800698a:	e753      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698c:	4a2e      	ldr	r2, [pc, #184]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800698e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006994:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006996:	e7f0      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006998:	2100      	movs	r1, #0
 800699a:	1d28      	adds	r0, r5, #4
 800699c:	f7ff fdf4 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069a0:	4604      	mov	r4, r0
      break;
 80069a2:	e7ea      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069a4:	2100      	movs	r1, #0
 80069a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80069aa:	f7ff fe65 	bl	8006678 <RCCEx_PLL3_Config>
 80069ae:	e7f7      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80069b0:	4626      	mov	r6, r4
 80069b2:	e73f      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 80069b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80069ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069be:	f47f af4b 	bne.w	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 80069c2:	b9d4      	cbnz	r4, 80069fa <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069c4:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069c6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80069ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80069cc:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6593      	str	r3, [r2, #88]	; 0x58
 80069d4:	e742      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80069e0:	e7ef      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069e2:	2100      	movs	r1, #0
 80069e4:	1d28      	adds	r0, r5, #4
 80069e6:	f7ff fdcf 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069ea:	4604      	mov	r4, r0
      break;
 80069ec:	e7e9      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069ee:	2100      	movs	r1, #0
 80069f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80069f4:	f7ff fe40 	bl	8006678 <RCCEx_PLL3_Config>
 80069f8:	e7f7      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x282>
 80069fa:	4626      	mov	r6, r4
 80069fc:	e72e      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80069fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a02:	d003      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8006a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a08:	f47f af3a 	bne.w	8006880 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8006a0c:	b9d4      	cbnz	r4, 8006a44 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a0e:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006a10:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8006a14:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a1e:	e731      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006a22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a28:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006a2a:	e7ef      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	1d28      	adds	r0, r5, #4
 8006a30:	f7ff fdaa 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a34:	4604      	mov	r4, r0
      break;
 8006a36:	e7e9      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006a3e:	f7ff fe1b 	bl	8006678 <RCCEx_PLL3_Config>
 8006a42:	e7f7      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006a44:	4626      	mov	r6, r4
 8006a46:	e71d      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8006a48:	58024400 	.word	0x58024400
    switch(PeriphClkInit->QspiClockSelection)
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	f47f af28 	bne.w	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8006a52:	b99c      	cbnz	r4, 8006a7c <HAL_RCCEx_PeriphCLKConfig+0x314>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a54:	4a9d      	ldr	r2, [pc, #628]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006a56:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8006a58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006a5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a62:	e720      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a64:	4a99      	ldr	r2, [pc, #612]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006a66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006a6e:	e7f0      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a70:	2102      	movs	r1, #2
 8006a72:	1d28      	adds	r0, r5, #4
 8006a74:	f7ff fd88 	bl	8006588 <RCCEx_PLL2_Config>
 8006a78:	4604      	mov	r4, r0
      break;
 8006a7a:	e7ea      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006a7c:	4626      	mov	r6, r4
 8006a7e:	e712      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a84:	d003      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8a:	f47f af1d 	bne.w	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8006a8e:	b9cc      	cbnz	r4, 8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a90:	4a8e      	ldr	r2, [pc, #568]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006a92:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8006a94:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	6513      	str	r3, [r2, #80]	; 0x50
 8006a9e:	e715      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4a8a      	ldr	r2, [pc, #552]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006aa2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8006aaa:	e7f0      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aac:	2100      	movs	r1, #0
 8006aae:	1d28      	adds	r0, r5, #4
 8006ab0:	f7ff fd6a 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ab4:	4604      	mov	r4, r0
      break;
 8006ab6:	e7ea      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ab8:	2100      	movs	r1, #0
 8006aba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006abe:	f7ff fddb 	bl	8006678 <RCCEx_PLL3_Config>
 8006ac2:	e7f7      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006ac4:	4626      	mov	r6, r4
 8006ac6:	e701      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006acc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006ad0:	d003      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad6:	f47f af0a 	bne.w	80068ee <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8006ada:	b99c      	cbnz	r4, 8006b04 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006adc:	4a7b      	ldr	r2, [pc, #492]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006ade:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006ae0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ae2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	6513      	str	r3, [r2, #80]	; 0x50
 8006aea:	e702      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aec:	2101      	movs	r1, #1
 8006aee:	1d28      	adds	r0, r5, #4
 8006af0:	f7ff fd4a 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006af4:	4604      	mov	r4, r0
      break;
 8006af6:	e7f0      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006af8:	2101      	movs	r1, #1
 8006afa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006afe:	f7ff fdbb 	bl	8006678 <RCCEx_PLL3_Config>
 8006b02:	e7f7      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006b04:	4626      	mov	r6, r4
 8006b06:	e6f4      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b08:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b0c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006b10:	d003      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8006b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b16:	f47f aefe 	bne.w	8006916 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8006b1a:	b9a4      	cbnz	r4, 8006b46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b1c:	4a6b      	ldr	r2, [pc, #428]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006b1e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8006b22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006b24:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b2c:	e6f5      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b2e:	2101      	movs	r1, #1
 8006b30:	1d28      	adds	r0, r5, #4
 8006b32:	f7ff fd29 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b36:	4604      	mov	r4, r0
      break;
 8006b38:	e7ef      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006b40:	f7ff fd9a 	bl	8006678 <RCCEx_PLL3_Config>
 8006b44:	e7f7      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006b46:	4626      	mov	r6, r4
 8006b48:	e6e7      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4a:	4a60      	ldr	r2, [pc, #384]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006b4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006b54:	b96c      	cbnz	r4, 8006b72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b56:	4a5d      	ldr	r2, [pc, #372]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006b58:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8006b5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006b5c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6513      	str	r3, [r2, #80]	; 0x50
 8006b64:	e6ea      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b66:	2101      	movs	r1, #1
 8006b68:	1d28      	adds	r0, r5, #4
 8006b6a:	f7ff fd0d 	bl	8006588 <RCCEx_PLL2_Config>
 8006b6e:	4604      	mov	r4, r0
      break;
 8006b70:	e7f0      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006b72:	4626      	mov	r6, r4
 8006b74:	e6e2      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b76:	4a55      	ldr	r2, [pc, #340]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006b78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006b80:	2c00      	cmp	r4, #0
 8006b82:	d14d      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b84:	4a51      	ldr	r2, [pc, #324]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006b86:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8006b88:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b92:	682b      	ldr	r3, [r5, #0]
 8006b94:	025f      	lsls	r7, r3, #9
 8006b96:	d54d      	bpl.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b98:	4f4d      	ldr	r7, [pc, #308]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8006ba2:	f7fb fa31 	bl	8002008 <HAL_GetTick>
 8006ba6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	05d8      	lsls	r0, r3, #23
 8006bac:	d53a      	bpl.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	d16c      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bb2:	4b46      	ldr	r3, [pc, #280]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006bb4:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8006bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bba:	4042      	eors	r2, r0
 8006bbc:	f412 7f40 	tst.w	r2, #768	; 0x300
 8006bc0:	d00b      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006bce:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006bd2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006bd6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8006bd8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bda:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006bde:	d040      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8006be4:	4939      	ldr	r1, [pc, #228]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006be6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006bea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006bee:	d149      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006bf0:	6908      	ldr	r0, [r1, #16]
 8006bf2:	4a38      	ldr	r2, [pc, #224]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8006bf4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8006bf8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8006bfc:	4302      	orrs	r2, r0
 8006bfe:	610a      	str	r2, [r1, #16]
 8006c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c04:	4a31      	ldr	r2, [pc, #196]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006c06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0c:	e012      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c0e:	2102      	movs	r1, #2
 8006c10:	1d28      	adds	r0, r5, #4
 8006c12:	f7ff fcb9 	bl	8006588 <RCCEx_PLL2_Config>
 8006c16:	4604      	mov	r4, r0
      break;
 8006c18:	e7b2      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8006c1a:	2601      	movs	r6, #1
 8006c1c:	4634      	mov	r4, r6
 8006c1e:	e7b8      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006c20:	4626      	mov	r6, r4
 8006c22:	e7b6      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c24:	f7fb f9f0 	bl	8002008 <HAL_GetTick>
 8006c28:	eba0 0008 	sub.w	r0, r0, r8
 8006c2c:	2864      	cmp	r0, #100	; 0x64
 8006c2e:	d9bb      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 8006c30:	2603      	movs	r6, #3
 8006c32:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	d508      	bpl.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c3a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d03c      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x552>
 8006c40:	d826      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006c42:	b35b      	cbz	r3, 8006c9c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d032      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x546>
 8006c48:	2601      	movs	r6, #1
 8006c4a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	079b      	lsls	r3, r3, #30
 8006c50:	d54f      	bpl.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006c52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006c54:	2b05      	cmp	r3, #5
 8006c56:	d862      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8006c58:	e8df f003 	tbb	[pc, r3]
 8006c5c:	435b3e43 	.word	0x435b3e43
 8006c60:	4343      	.short	0x4343
        tickstart = HAL_GetTick();
 8006c62:	f7fb f9d1 	bl	8002008 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c66:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 8006c6a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c70:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006c74:	0799      	lsls	r1, r3, #30
 8006c76:	d4b3      	bmi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c78:	f7fb f9c6 	bl	8002008 <HAL_GetTick>
 8006c7c:	1bc0      	subs	r0, r0, r7
 8006c7e:	4548      	cmp	r0, r9
 8006c80:	d9f6      	bls.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006c82:	e7d5      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c84:	690a      	ldr	r2, [r1, #16]
 8006c86:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8006c8a:	e7b8      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006c8c:	4626      	mov	r6, r4
 8006c8e:	e7d1      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c90:	f023 0208 	bic.w	r2, r3, #8
 8006c94:	2a20      	cmp	r2, #32
 8006c96:	d001      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006c98:	2b18      	cmp	r3, #24
 8006c9a:	d1d5      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 8006c9c:	b99c      	cbnz	r4, 8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c9e:	4a0b      	ldr	r2, [pc, #44]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8006ca0:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8006ca2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006ca4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6553      	str	r3, [r2, #84]	; 0x54
 8006cac:	e7ce      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cae:	2101      	movs	r1, #1
 8006cb0:	1d28      	adds	r0, r5, #4
 8006cb2:	f7ff fc69 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cb6:	4604      	mov	r4, r0
      break;
 8006cb8:	e7f0      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cba:	2101      	movs	r1, #1
 8006cbc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006cc0:	f7ff fcda 	bl	8006678 <RCCEx_PLL3_Config>
 8006cc4:	e7f7      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8006cc6:	4626      	mov	r6, r4
 8006cc8:	e7c0      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006cca:	bf00      	nop
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	58024800 	.word	0x58024800
 8006cd4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cd8:	2101      	movs	r1, #1
 8006cda:	1d28      	adds	r0, r5, #4
 8006cdc:	f7ff fc54 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ce0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8006ce2:	b9fc      	cbnz	r4, 8006d24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ce4:	4aa6      	ldr	r2, [pc, #664]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006ce6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8006ce8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	075f      	lsls	r7, r3, #29
 8006cf6:	d527      	bpl.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006cf8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	f200 8139 	bhi.w	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8006d02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d06:	0016      	.short	0x0016
 8006d08:	01310011 	.word	0x01310011
 8006d0c:	00160016 	.word	0x00160016
 8006d10:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d12:	2101      	movs	r1, #1
 8006d14:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006d18:	f7ff fcae 	bl	8006678 <RCCEx_PLL3_Config>
 8006d1c:	e7e0      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d1e:	2601      	movs	r6, #1
 8006d20:	4634      	mov	r4, r6
 8006d22:	e7e6      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8006d24:	4626      	mov	r6, r4
 8006d26:	e7e4      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d28:	2101      	movs	r1, #1
 8006d2a:	1d28      	adds	r0, r5, #4
 8006d2c:	f7ff fc2c 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d30:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8006d32:	2c00      	cmp	r4, #0
 8006d34:	f040 8121 	bne.w	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d38:	4a91      	ldr	r2, [pc, #580]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006d3a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8006d3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	0698      	lsls	r0, r3, #26
 8006d4c:	d510      	bpl.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006d4e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d56:	f000 812e 	beq.w	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8006d5a:	f200 8113 	bhi.w	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8119 	beq.w	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d68:	f000 811f 	beq.w	8006faa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006d6c:	2601      	movs	r6, #1
 8006d6e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	0659      	lsls	r1, r3, #25
 8006d74:	d510      	bpl.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d76:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7e:	f000 813b 	beq.w	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8006d82:	f200 8120 	bhi.w	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8126 	beq.w	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8006d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d90:	f000 812c 	beq.w	8006fec <HAL_RCCEx_PeriphCLKConfig+0x884>
 8006d94:	2601      	movs	r6, #1
 8006d96:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	061a      	lsls	r2, r3, #24
 8006d9c:	d510      	bpl.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d9e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006da6:	f000 8148 	beq.w	800703a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8006daa:	f200 812d 	bhi.w	8007008 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 8133 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db8:	f000 8139 	beq.w	800702e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8006dbc:	2601      	movs	r6, #1
 8006dbe:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	071b      	lsls	r3, r3, #28
 8006dc4:	d514      	bpl.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006dc6:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	d107      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006dd6:	f7ff fc4f 	bl	8006678 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	bf18      	it	ne
 8006dde:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006de0:	4a67      	ldr	r2, [pc, #412]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006de2:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8006de6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	06df      	lsls	r7, r3, #27
 8006df4:	d514      	bpl.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006df6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e00:	2102      	movs	r1, #2
 8006e02:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006e06:	f7ff fc37 	bl	8006678 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	bf18      	it	ne
 8006e0e:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e10:	4a5b      	ldr	r2, [pc, #364]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006e12:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8006e16:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	0318      	lsls	r0, r3, #12
 8006e24:	d51a      	bpl.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 8006e26:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8006e2a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006e2e:	f000 810c 	beq.w	800704a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006e32:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006e36:	d006      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	f040 810c 	bne.w	8007056 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e3e:	1d28      	adds	r0, r5, #4
 8006e40:	f7ff fba2 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e44:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	f040 8108 	bne.w	800705c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e4c:	4a4c      	ldr	r2, [pc, #304]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006e4e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8006e52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006e54:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	0359      	lsls	r1, r3, #13
 8006e60:	d51c      	bpl.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 8006e62:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8006e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e6a:	f000 80f9 	beq.w	8007060 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006e6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e72:	d008      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e78:	f040 80f9 	bne.w	800706e <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4a40      	ldr	r2, [pc, #256]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006e7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	f040 80f4 	bne.w	8007074 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e8c:	4a3c      	ldr	r2, [pc, #240]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006e8e:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8006e92:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006e94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	03da      	lsls	r2, r3, #15
 8006ea0:	d509      	bpl.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 8006ea2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80e7 	beq.w	8007078 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eae:	f000 80f1 	beq.w	8007094 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8006eb2:	2601      	movs	r6, #1
 8006eb4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eb6:	682b      	ldr	r3, [r5, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	d507      	bpl.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006ec2:	f7ff fbd9 	bl	8006678 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	bf18      	it	ne
 8006eca:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	039f      	lsls	r7, r3, #14
 8006ed0:	d50a      	bpl.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 8006ed2:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8006ed4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006ed8:	f000 80f2 	beq.w	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8006edc:	f200 80e2 	bhi.w	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	f000 80e5 	beq.w	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8006ee6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ee8:	02dc      	lsls	r4, r3, #11
 8006eea:	d506      	bpl.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006eec:	4924      	ldr	r1, [pc, #144]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006eee:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8006ef0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006ef2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ef6:	4302      	orrs	r2, r0
 8006ef8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006efa:	00d8      	lsls	r0, r3, #3
 8006efc:	d507      	bpl.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006efe:	4920      	ldr	r1, [pc, #128]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006f00:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8006f04:	690a      	ldr	r2, [r1, #16]
 8006f06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f0a:	4302      	orrs	r2, r0
 8006f0c:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f0e:	0299      	lsls	r1, r3, #10
 8006f10:	d506      	bpl.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f12:	491b      	ldr	r1, [pc, #108]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006f14:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006f16:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006f18:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f1c:	4302      	orrs	r2, r0
 8006f1e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f20:	005a      	lsls	r2, r3, #1
 8006f22:	d509      	bpl.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f24:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006f26:	6911      	ldr	r1, [r2, #16]
 8006f28:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006f2c:	6111      	str	r1, [r2, #16]
 8006f2e:	6911      	ldr	r1, [r2, #16]
 8006f30:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8006f34:	4301      	orrs	r1, r0
 8006f36:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	da06      	bge.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f3c:	4910      	ldr	r1, [pc, #64]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006f3e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006f40:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006f42:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f46:	4302      	orrs	r2, r0
 8006f48:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	d507      	bpl.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f4e:	4a0c      	ldr	r2, [pc, #48]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006f50:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8006f54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006f56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	6553      	str	r3, [r2, #84]	; 0x54
}
 8006f5e:	1e30      	subs	r0, r6, #0
 8006f60:	bf18      	it	ne
 8006f62:	2001      	movne	r0, #1
 8006f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006f6e:	f7ff fb83 	bl	8006678 <RCCEx_PLL3_Config>
 8006f72:	e6dd      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f74:	2601      	movs	r6, #1
 8006f76:	4634      	mov	r4, r6
 8006f78:	e6e6      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8006f7a:	4626      	mov	r6, r4
 8006f7c:	e6e4      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f92:	f47f aeeb 	bne.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8006f96:	b9a4      	cbnz	r4, 8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f98:	4a4d      	ldr	r2, [pc, #308]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8006f9a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8006f9e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006fa0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6553      	str	r3, [r2, #84]	; 0x54
 8006fa8:	e6e2      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006faa:	2100      	movs	r1, #0
 8006fac:	1d28      	adds	r0, r5, #4
 8006fae:	f7ff faeb 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fb2:	4604      	mov	r4, r0
      break;
 8006fb4:	e7ef      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fb6:	2102      	movs	r1, #2
 8006fb8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006fbc:	f7ff fb5c 	bl	8006678 <RCCEx_PLL3_Config>
 8006fc0:	e7f7      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8006fc2:	4626      	mov	r6, r4
 8006fc4:	e6d4      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006fc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8006fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd4:	f47f aede 	bne.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 8006fd8:	b9a4      	cbnz	r4, 8007004 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fda:	4a3d      	ldr	r2, [pc, #244]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8006fdc:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8006fe0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006fe2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8006fea:	e6d5      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fec:	2100      	movs	r1, #0
 8006fee:	1d28      	adds	r0, r5, #4
 8006ff0:	f7ff faca 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ff4:	4604      	mov	r4, r0
      break;
 8006ff6:	e7ef      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006ffe:	f7ff fb3b 	bl	8006678 <RCCEx_PLL3_Config>
 8007002:	e7f7      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8007004:	4626      	mov	r6, r4
 8007006:	e6c7      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800700c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007010:	d003      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8007012:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007016:	f47f aed1 	bne.w	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 800701a:	b9a4      	cbnz	r4, 8007046 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800701c:	4a2c      	ldr	r2, [pc, #176]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800701e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8007022:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007024:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007028:	430b      	orrs	r3, r1
 800702a:	6593      	str	r3, [r2, #88]	; 0x58
 800702c:	e6c8      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702e:	2100      	movs	r1, #0
 8007030:	1d28      	adds	r0, r5, #4
 8007032:	f7ff faa9 	bl	8006588 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007036:	4604      	mov	r4, r0
      break;
 8007038:	e7ef      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800703a:	2102      	movs	r1, #2
 800703c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007040:	f7ff fb1a 	bl	8006678 <RCCEx_PLL3_Config>
 8007044:	e7f7      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007046:	4626      	mov	r6, r4
 8007048:	e6ba      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800704a:	2102      	movs	r1, #2
 800704c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007050:	f7ff fb12 	bl	8006678 <RCCEx_PLL3_Config>
 8007054:	e6f6      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 8007056:	2601      	movs	r6, #1
 8007058:	4634      	mov	r4, r6
 800705a:	e6ff      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800705c:	4626      	mov	r6, r4
 800705e:	e6fd      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007060:	2101      	movs	r1, #1
 8007062:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007066:	f7ff fb07 	bl	8006678 <RCCEx_PLL3_Config>
 800706a:	4604      	mov	r4, r0
      break;
 800706c:	e70b      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 800706e:	2601      	movs	r6, #1
 8007070:	4634      	mov	r4, r6
 8007072:	e713      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8007074:	4626      	mov	r6, r4
 8007076:	e711      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007078:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800707a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800707c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007080:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007082:	b96c      	cbnz	r4, 80070a0 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007084:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8007086:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8007088:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800708a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708e:	430b      	orrs	r3, r1
 8007090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007092:	e710      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007094:	2102      	movs	r1, #2
 8007096:	1d28      	adds	r0, r5, #4
 8007098:	f7ff fa76 	bl	8006588 <RCCEx_PLL2_Config>
 800709c:	4604      	mov	r4, r0
      break;
 800709e:	e7f0      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 80070a0:	4626      	mov	r6, r4
 80070a2:	e708      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 80070a4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80070a8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80070ac:	f47f af1b 	bne.w	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 80070b0:	b964      	cbnz	r4, 80070cc <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070b2:	4807      	ldr	r0, [pc, #28]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80070b4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80070b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070ba:	430a      	orrs	r2, r1
 80070bc:	6542      	str	r2, [r0, #84]	; 0x54
 80070be:	e713      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c0:	4803      	ldr	r0, [pc, #12]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80070c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80070c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80070c8:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80070ca:	e7f1      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80070cc:	4626      	mov	r6, r4
 80070ce:	e70b      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80070d0:	58024400 	.word	0x58024400

080070d4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80070d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070d6:	f7ff f9e7 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
 80070da:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80070dc:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80070e4:	5cd3      	ldrb	r3, [r2, r3]
 80070e6:	f003 031f 	and.w	r3, r3, #31
}
 80070ea:	40d8      	lsrs	r0, r3
 80070ec:	bd08      	pop	{r3, pc}
 80070ee:	bf00      	nop
 80070f0:	58024400 	.word	0x58024400
 80070f4:	0801a9d8 	.word	0x0801a9d8

080070f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f8:	4a4e      	ldr	r2, [pc, #312]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 80070fa:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070fe:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007100:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8007102:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007106:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800710a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800710c:	f000 808d 	beq.w	800722a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007110:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007114:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007118:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800711c:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007120:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007124:	434b      	muls	r3, r1
    switch (pllsource)
 8007126:	2c01      	cmp	r4, #1
 8007128:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800712c:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007130:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8007134:	d06b      	beq.n	800720e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 8007136:	2c02      	cmp	r4, #2
 8007138:	d05b      	beq.n	80071f2 <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 800713a:	2c00      	cmp	r4, #0
 800713c:	d167      	bne.n	800720e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	069b      	lsls	r3, r3, #26
 8007142:	d546      	bpl.n	80071d2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007144:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007146:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007148:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800714c:	4a3a      	ldr	r2, [pc, #232]	; (8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007152:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007154:	ee07 2a10 	vmov	s14, r2
 8007158:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800715c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007160:	ee06 3a90 	vmov	s13, r3
 8007164:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007170:	4a30      	ldr	r2, [pc, #192]	; (8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007172:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007176:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007178:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800717c:	ee07 3a10 	vmov	s14, r3
 8007180:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007184:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007188:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800718c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007190:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007194:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007196:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800719a:	ee07 3a10 	vmov	s14, r3
 800719e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071a2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80071a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80071aa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80071ae:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80071b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80071b4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80071b8:	ee07 3a10 	vmov	s14, r3
 80071bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071c0:	ee37 6a06 	vadd.f32	s12, s14, s12
 80071c4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80071c8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80071cc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071d2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80071d4:	eddf 5a19 	vldr	s11, [pc, #100]	; 800723c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80071d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071dc:	ee07 3a10 	vmov	s14, r3
 80071e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80071e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071e8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ec:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80071f0:	e7be      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80071f4:	eddf 5a12 	vldr	s11, [pc, #72]	; 8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	ee07 3a10 	vmov	s14, r3
 8007200:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007208:	ee77 7a86 	vadd.f32	s15, s15, s12
 800720c:	e7ee      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800720e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007210:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8007214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007218:	ee07 3a10 	vmov	s14, r3
 800721c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007224:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007228:	e7e0      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800722a:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800722e:	6081      	str	r1, [r0, #8]
}
 8007230:	e7ce      	b.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8007232:	bf00      	nop
 8007234:	58024400 	.word	0x58024400
 8007238:	03d09000 	.word	0x03d09000
 800723c:	4c742400 	.word	0x4c742400
 8007240:	4be4e1c0 	.word	0x4be4e1c0
 8007244:	4a742400 	.word	0x4a742400

08007248 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007248:	4a4e      	ldr	r2, [pc, #312]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 800724a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800724c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800724e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007250:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8007252:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007256:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800725a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800725c:	f000 808d 	beq.w	800737a <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007260:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007264:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007268:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800726c:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007270:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007274:	434b      	muls	r3, r1
    switch (pllsource)
 8007276:	2c01      	cmp	r4, #1
 8007278:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800727c:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007280:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8007284:	d06b      	beq.n	800735e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8007286:	2c02      	cmp	r4, #2
 8007288:	d05b      	beq.n	8007342 <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 800728a:	2c00      	cmp	r4, #0
 800728c:	d167      	bne.n	800735e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800728e:	6813      	ldr	r3, [r2, #0]
 8007290:	069b      	lsls	r3, r3, #26
 8007292:	d546      	bpl.n	8007322 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007294:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007296:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007298:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800729c:	4a3a      	ldr	r2, [pc, #232]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072a2:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072a4:	ee07 2a10 	vmov	s14, r2
 80072a8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80072ac:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80072b0:	ee06 3a90 	vmov	s13, r3
 80072b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80072b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072bc:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072c0:	4a30      	ldr	r2, [pc, #192]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80072c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80072cc:	ee07 3a10 	vmov	s14, r3
 80072d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80072d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072dc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80072e0:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80072e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80072e6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80072ea:	ee07 3a10 	vmov	s14, r3
 80072ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80072f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80072fe:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007302:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007304:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007308:	ee07 3a10 	vmov	s14, r3
 800730c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007310:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007314:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007318:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800731c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8007320:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007322:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007324:	eddf 5a19 	vldr	s11, [pc, #100]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732c:	ee07 3a10 	vmov	s14, r3
 8007330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007338:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800733c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007340:	e7be      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007342:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007344:	eddf 5a12 	vldr	s11, [pc, #72]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8007348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734c:	ee07 3a10 	vmov	s14, r3
 8007350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007358:	ee77 7a86 	vadd.f32	s15, s15, s12
 800735c:	e7ee      	b.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800735e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007360:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	ee07 3a10 	vmov	s14, r3
 800736c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007374:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007378:	e7e0      	b.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800737a:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800737e:	6081      	str	r1, [r0, #8]
}
 8007380:	e7ce      	b.n	8007320 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8007382:	bf00      	nop
 8007384:	58024400 	.word	0x58024400
 8007388:	03d09000 	.word	0x03d09000
 800738c:	4c742400 	.word	0x4c742400
 8007390:	4be4e1c0 	.word	0x4be4e1c0
 8007394:	4a742400 	.word	0x4a742400

08007398 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007398:	4a4e      	ldr	r2, [pc, #312]	; (80074d4 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 800739a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800739c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800739e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073a0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 80073a2:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073a6:	f3c6 1105 	ubfx	r1, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80073ac:	f000 808d 	beq.w	80074ca <HAL_RCCEx_GetPLL1ClockFreq+0x132>
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073b0:	ee07 1a90 	vmov	s15, r1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073b4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073b8:	f005 0101 	and.w	r1, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073bc:	f004 0403 	and.w	r4, r4, #3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073c4:	434b      	muls	r3, r1
    switch (pllsource)
 80073c6:	2c01      	cmp	r4, #1
 80073c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073cc:	ee07 3a90 	vmov	s15, r3
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073d0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80073d4:	d04d      	beq.n	8007472 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
 80073d6:	2c02      	cmp	r4, #2
 80073d8:	d05b      	beq.n	8007492 <HAL_RCCEx_GetPLL1ClockFreq+0xfa>
 80073da:	2c00      	cmp	r4, #0
 80073dc:	d167      	bne.n	80074ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073de:	6813      	ldr	r3, [r2, #0]
 80073e0:	069b      	lsls	r3, r3, #26
 80073e2:	d564      	bpl.n	80074ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e4:	6811      	ldr	r1, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80073ec:	4a3a      	ldr	r2, [pc, #232]	; (80074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073f2:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073f4:	ee07 2a10 	vmov	s14, r2
 80073f8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80073fc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007400:	ee06 3a90 	vmov	s13, r3
 8007404:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007410:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007412:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007416:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007418:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800741c:	ee07 3a10 	vmov	s14, r3
 8007420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007424:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007428:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800742c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007430:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007434:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007436:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800743a:	ee07 3a10 	vmov	s14, r3
 800743e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007442:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007446:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800744a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800744e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007452:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007454:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007458:	ee07 3a10 	vmov	s14, r3
 800745c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007460:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007464:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007468:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800746c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8007470:	bd70      	pop	{r4, r5, r6, pc}
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007472:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007474:	eddf 5a19 	vldr	s11, [pc, #100]	; 80074dc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747c:	ee07 3a10 	vmov	s14, r3
 8007480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007488:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800748c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007490:	e7be      	b.n	8007410 <HAL_RCCEx_GetPLL1ClockFreq+0x78>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007492:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007494:	eddf 5a12 	vldr	s11, [pc, #72]	; 80074e0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	ee07 3a10 	vmov	s14, r3
 80074a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80074ac:	e7ee      	b.n	800748c <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80074b0:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80074e4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	ee07 3a10 	vmov	s14, r3
 80074bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80074c8:	e7e0      	b.n	800748c <HAL_RCCEx_GetPLL1ClockFreq+0xf4>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80074ca:	e9c0 1100 	strd	r1, r1, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80074ce:	6081      	str	r1, [r0, #8]
}
 80074d0:	e7ce      	b.n	8007470 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80074d2:	bf00      	nop
 80074d4:	58024400 	.word	0x58024400
 80074d8:	03d09000 	.word	0x03d09000
 80074dc:	4a742400 	.word	0x4a742400
 80074e0:	4be4e1c0 	.word	0x4be4e1c0
 80074e4:	4c742400 	.word	0x4c742400

080074e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074e8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80074ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074ee:	d131      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80074f0:	4b95      	ldr	r3, [pc, #596]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80074f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074f4:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 80074f8:	2a04      	cmp	r2, #4
 80074fa:	d84b      	bhi.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80074fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007500:	003900cc 	.word	0x003900cc
 8007504:	01400005 	.word	0x01400005
 8007508:	000d      	.short	0x000d
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007510:	d037      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007512:	a801      	add	r0, sp, #4
 8007514:	f7ff fe98 	bl	8007248 <HAL_RCCEx_GetPLL3ClockFreq>
 8007518:	e032      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800751a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800751c:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800751e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007522:	681b      	ldr	r3, [r3, #0]
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007524:	0749      	lsls	r1, r1, #29
 8007526:	d505      	bpl.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8007528:	b922      	cbnz	r2, 8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800752a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800752e:	4887      	ldr	r0, [pc, #540]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007530:	40d8      	lsrs	r0, r3
 8007532:	e026      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007534:	05d8      	lsls	r0, r3, #23
 8007536:	d502      	bpl.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8007538:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800753c:	d053      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800753e:	4b82      	ldr	r3, [pc, #520]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007546:	d01c      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            frequency = HSE_VALUE;
 8007548:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800754c:	4880      	ldr	r0, [pc, #512]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800754e:	bf18      	it	ne
 8007550:	2000      	movne	r0, #0
 8007552:	e016      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007554:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007558:	d127      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800755a:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800755c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800755e:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
      switch (saiclocksource)
 8007562:	2a80      	cmp	r2, #128	; 0x80
 8007564:	d0d1      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8007566:	d80f      	bhi.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8007568:	2a00      	cmp	r2, #0
 800756a:	f000 8095 	beq.w	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800756e:	2a40      	cmp	r2, #64	; 0x40
      switch (srcclk)
 8007570:	d110      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007578:	d003      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	a801      	add	r0, sp, #4
 800757c:	f7ff fdbc 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007580:	9801      	ldr	r0, [sp, #4]
}
 8007582:	b005      	add	sp, #20
 8007584:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8007588:	2ac0      	cmp	r2, #192	; 0xc0
 800758a:	f000 80f9 	beq.w	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800758e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      switch (saiclocksource)
 8007592:	d001      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      switch (srcclk)
 8007594:	2000      	movs	r0, #0
  return frequency;
 8007596:	e7f4      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800759a:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800759c:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075a0:	0749      	lsls	r1, r1, #29
 80075a2:	d519      	bpl.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80075a4:	b9c2      	cbnz	r2, 80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	e7bf      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80075aa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80075ae:	d11c      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80075b0:	4b65      	ldr	r3, [pc, #404]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80075b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075b4:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
      switch (saiclocksource)
 80075b8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80075bc:	d0a5      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 80075be:	d804      	bhi.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	d069      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80075c4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80075c8:	e7d2      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 80075ca:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80075ce:	f000 80d7 	beq.w	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 80075d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80075d6:	e7dc      	b.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075d8:	4b5b      	ldr	r3, [pc, #364]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075da:	6819      	ldr	r1, [r3, #0]
 80075dc:	05c9      	lsls	r1, r1, #23
 80075de:	d5af      	bpl.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80075e0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80075e4:	d1ac      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
            frequency = CSI_VALUE;
 80075e6:	485b      	ldr	r0, [pc, #364]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80075e8:	e7cb      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80075ea:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80075ee:	d11c      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80075f0:	4b55      	ldr	r3, [pc, #340]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80075f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075f4:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
      switch (saiclocksource)
 80075f8:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80075fc:	d085      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 80075fe:	d804      	bhi.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007600:	2a00      	cmp	r2, #0
 8007602:	d049      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8007604:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007608:	e7b2      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800760a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800760e:	f000 80b7 	beq.w	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8007612:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      switch (srcclk)
 8007616:	d1bd      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800761a:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800761c:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007620:	0748      	lsls	r0, r1, #29
 8007622:	d5da      	bpl.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8007624:	2a00      	cmp	r2, #0
 8007626:	d1d8      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8007628:	e7bd      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800762a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800762e:	d113      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007630:	4b45      	ldr	r3, [pc, #276]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007634:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
      switch (srcclk)
 8007638:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800763c:	f43f af65 	beq.w	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8007640:	d803      	bhi.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8007642:	b34a      	cbz	r2, 8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8007644:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007648:	e792      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800764a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800764e:	f000 8097 	beq.w	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8007652:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007656:	e7de      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007658:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800765c:	d115      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800765e:	4b3a      	ldr	r3, [pc, #232]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007662:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      switch (srcclk)
 8007666:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800766a:	d005      	beq.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800766c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8007670:	d0d2      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007672:	2a00      	cmp	r2, #0
 8007674:	d18e      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007676:	e77c      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800767e:	d080      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007680:	a801      	add	r0, sp, #4
 8007682:	f7ff fde1 	bl	8007248 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007686:	9803      	ldr	r0, [sp, #12]
 8007688:	e77b      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800768a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800768e:	d116      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007690:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8007694:	03d2      	lsls	r2, r2, #15
 8007696:	d409      	bmi.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800769e:	f43f af70 	beq.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a2:	a801      	add	r0, sp, #4
 80076a4:	f7ff fe78 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076a8:	9802      	ldr	r0, [sp, #8]
 80076aa:	e76a      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80076b2:	f43f af66 	beq.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b6:	a801      	add	r0, sp, #4
 80076b8:	f7ff fd1e 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
 80076bc:	e7e3      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076be:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80076c2:	d149      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80076c4:	4a20      	ldr	r2, [pc, #128]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80076c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80076c8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80076cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076d0:	d02c      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80076d2:	d80d      	bhi.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80076d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076d8:	d016      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 80076da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076de:	d01c      	beq.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f47f af57 	bne.w	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
}
 80076e6:	b005      	add	sp, #20
 80076e8:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80076ec:	f7ff bcf2 	b.w	80070d4 <HAL_RCCEx_GetD3PCLK1Freq>
      switch (srcclk)
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f4:	d021      	beq.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80076f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076fa:	f47f af4b 	bne.w	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076fe:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007702:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007706:	e01c      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007708:	6810      	ldr	r0, [r2, #0]
 800770a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800770e:	f43f af38 	beq.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007712:	a801      	add	r0, sp, #4
 8007714:	f7ff fcf0 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007718:	e7c6      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800771a:	6810      	ldr	r0, [r2, #0]
 800771c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007720:	f43f af2f 	beq.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007724:	a801      	add	r0, sp, #4
 8007726:	f7ff fd8f 	bl	8007248 <HAL_RCCEx_GetPLL3ClockFreq>
 800772a:	e7bd      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800772c:	6810      	ldr	r0, [r2, #0]
 800772e:	f010 0004 	ands.w	r0, r0, #4
 8007732:	f43f af26 	beq.w	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	e6f7      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800773a:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800773e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
            frequency = HSE_VALUE;
 8007742:	bf18      	it	ne
 8007744:	4618      	movne	r0, r3
 8007746:	e71c      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007748:	58024400 	.word	0x58024400
 800774c:	03d09000 	.word	0x03d09000
 8007750:	01c9c380 	.word	0x01c9c380
 8007754:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007758:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800775c:	f47f af1a 	bne.w	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007760:	4a08      	ldr	r2, [pc, #32]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007762:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8007768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800776c:	d006      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 800776e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007772:	d0c9      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8007774:	2b00      	cmp	r3, #0
 8007776:	f47f af0d 	bne.w	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800777a:	e7c0      	b.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800777c:	6810      	ldr	r0, [r2, #0]
 800777e:	e78c      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007780:	4801      	ldr	r0, [pc, #4]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007782:	e6fe      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007784:	58024400 	.word	0x58024400
 8007788:	00bb8000 	.word	0x00bb8000

0800778c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <SAI_Disable+0x38>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800778e:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	f641 3358 	movw	r3, #7000	; 0x1b58
 8007796:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800779a:	680b      	ldr	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800779c:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 800779e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a2:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80077a4:	b93a      	cbnz	r2, 80077b6 <SAI_Disable+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80077a6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80077aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ae:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 80077b2:	2003      	movs	r0, #3
      break;
 80077b4:	4770      	bx	lr
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80077b6:	680b      	ldr	r3, [r1, #0]
    count--;
 80077b8:	3a01      	subs	r2, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80077ba:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80077be:	d1f1      	bne.n	80077a4 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80077c0:	4618      	mov	r0, r3

  return status;
}
 80077c2:	4770      	bx	lr
 80077c4:	24000000 	.word	0x24000000

080077c8 <HAL_SAI_Init>:
{
 80077c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hsai == NULL)
 80077cc:	4604      	mov	r4, r0
 80077ce:	b920      	cbnz	r0, 80077da <HAL_SAI_Init+0x12>
    return HAL_ERROR;
 80077d0:	f04f 0801 	mov.w	r8, #1
}
 80077d4:	4640      	mov	r0, r8
 80077d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80077da:	f7fa fc1b 	bl	8002014 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80077de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80077e2:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8007ad8 <HAL_SAI_Init+0x310>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	d10a      	bne.n	8007802 <HAL_SAI_Init+0x3a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80077ec:	454b      	cmp	r3, r9
 80077ee:	d002      	beq.n	80077f6 <HAL_SAI_Init+0x2e>
 80077f0:	4aaf      	ldr	r2, [pc, #700]	; (8007ab0 <HAL_SAI_Init+0x2e8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d1ec      	bne.n	80077d0 <HAL_SAI_Init+0x8>
 80077f6:	6862      	ldr	r2, [r4, #4]
 80077f8:	2a01      	cmp	r2, #1
 80077fa:	d1e9      	bne.n	80077d0 <HAL_SAI_Init+0x8>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80077fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80077fe:	2a00      	cmp	r2, #0
 8007800:	d1e6      	bne.n	80077d0 <HAL_SAI_Init+0x8>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007802:	454b      	cmp	r3, r9
 8007804:	d018      	beq.n	8007838 <HAL_SAI_Init+0x70>
 8007806:	4aab      	ldr	r2, [pc, #684]	; (8007ab4 <HAL_SAI_Init+0x2ec>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d015      	beq.n	8007838 <HAL_SAI_Init+0x70>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800780c:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8007810:	4293      	cmp	r3, r2
 8007812:	d038      	beq.n	8007886 <HAL_SAI_Init+0xbe>
 8007814:	3220      	adds	r2, #32
 8007816:	4293      	cmp	r3, r2
 8007818:	d035      	beq.n	8007886 <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800781a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800781e:	4293      	cmp	r3, r2
 8007820:	d033      	beq.n	800788a <HAL_SAI_Init+0xc2>
 8007822:	3220      	adds	r2, #32
 8007824:	4293      	cmp	r3, r2
 8007826:	d030      	beq.n	800788a <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007828:	4aa1      	ldr	r2, [pc, #644]	; (8007ab0 <HAL_SAI_Init+0x2e8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d002      	beq.n	8007834 <HAL_SAI_Init+0x6c>
 800782e:	3220      	adds	r2, #32
 8007830:	4293      	cmp	r3, r2
 8007832:	d1cd      	bne.n	80077d0 <HAL_SAI_Init+0x8>
    SaiBaseAddress = SAI4;
 8007834:	4da0      	ldr	r5, [pc, #640]	; (8007ab8 <HAL_SAI_Init+0x2f0>)
 8007836:	e000      	b.n	800783a <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI1;
 8007838:	4da0      	ldr	r5, [pc, #640]	; (8007abc <HAL_SAI_Init+0x2f4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800783a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800783e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007842:	b923      	cbnz	r3, 800784e <HAL_SAI_Init+0x86>
    HAL_SAI_MspInit(hsai);
 8007844:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 8007846:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800784a:	f7f9 fef9 	bl	8001640 <HAL_SAI_MspInit>
  if(SAI_Disable(hsai) != HAL_OK)
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff ff9c 	bl	800778c <SAI_Disable>
 8007854:	4680      	mov	r8, r0
 8007856:	2800      	cmp	r0, #0
 8007858:	d1ba      	bne.n	80077d0 <HAL_SAI_Init+0x8>
  hsai->State = HAL_SAI_STATE_BUSY;
 800785a:	2302      	movs	r3, #2
 800785c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8007860:	68e3      	ldr	r3, [r4, #12]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d013      	beq.n	800788e <HAL_SAI_Init+0xc6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007866:	2b02      	cmp	r3, #2
 8007868:	bf14      	ite	ne
 800786a:	2300      	movne	r3, #0
 800786c:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 800786e:	68a2      	ldr	r2, [r4, #8]
 8007870:	3a01      	subs	r2, #1
 8007872:	2a04      	cmp	r2, #4
 8007874:	f200 8112 	bhi.w	8007a9c <HAL_SAI_Init+0x2d4>
 8007878:	e8df f012 	tbh	[pc, r2, lsl #1]
 800787c:	0107000b 	.word	0x0107000b
 8007880:	010a0105 	.word	0x010a0105
 8007884:	010d      	.short	0x010d
    SaiBaseAddress = SAI2;
 8007886:	4d8e      	ldr	r5, [pc, #568]	; (8007ac0 <HAL_SAI_Init+0x2f8>)
 8007888:	e7d7      	b.n	800783a <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI3;
 800788a:	4d8e      	ldr	r5, [pc, #568]	; (8007ac4 <HAL_SAI_Init+0x2fc>)
 800788c:	e7d5      	b.n	800783a <HAL_SAI_Init+0x72>
  switch (hsai->Init.SynchroExt)
 800788e:	2310      	movs	r3, #16
 8007890:	e7ed      	b.n	800786e <HAL_SAI_Init+0xa6>
  switch (hsai->Init.Synchro)
 8007892:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007896:	602b      	str	r3, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007898:	6a23      	ldr	r3, [r4, #32]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d053      	beq.n	8007946 <HAL_SAI_Init+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	454b      	cmp	r3, r9
 80078a2:	d003      	beq.n	80078ac <HAL_SAI_Init+0xe4>
 80078a4:	4a83      	ldr	r2, [pc, #524]	; (8007ab4 <HAL_SAI_Init+0x2ec>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	f040 80fa 	bne.w	8007aa0 <HAL_SAI_Init+0x2d8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078b0:	f7ff fe1a 	bl	80074e8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	4a84      	ldr	r2, [pc, #528]	; (8007ac8 <HAL_SAI_Init+0x300>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d002      	beq.n	80078c2 <HAL_SAI_Init+0xfa>
 80078bc:	3220      	adds	r2, #32
 80078be:	4293      	cmp	r3, r2
 80078c0:	d103      	bne.n	80078ca <HAL_SAI_Init+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078c6:	f7ff fe0f 	bl	80074e8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4a7f      	ldr	r2, [pc, #508]	; (8007acc <HAL_SAI_Init+0x304>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d002      	beq.n	80078d8 <HAL_SAI_Init+0x110>
 80078d2:	3220      	adds	r2, #32
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d103      	bne.n	80078e0 <HAL_SAI_Init+0x118>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80078d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078dc:	f7ff fe04 	bl	80074e8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	4b73      	ldr	r3, [pc, #460]	; (8007ab0 <HAL_SAI_Init+0x2e8>)
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d103      	bne.n	80078f0 <HAL_SAI_Init+0x128>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80078e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80078ec:	f7ff fdfc 	bl	80074e8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	4b77      	ldr	r3, [pc, #476]	; (8007ad0 <HAL_SAI_Init+0x308>)
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d103      	bne.n	8007900 <HAL_SAI_Init+0x138>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80078f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80078fc:	f7ff fdf4 	bl	80074e8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007900:	69a3      	ldr	r3, [r4, #24]
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007902:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007908:	f8d4 c020 	ldr.w	ip, [r4, #32]
 800790c:	f040 80e8 	bne.w	8007ae0 <HAL_SAI_Init+0x318>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007910:	2a04      	cmp	r2, #4
 8007912:	f000 80c7 	beq.w	8007aa4 <HAL_SAI_Init+0x2dc>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007916:	2a08      	cmp	r2, #8
 8007918:	f000 80c6 	beq.w	8007aa8 <HAL_SAI_Init+0x2e0>
        tmpframelength = hsai->FrameInit.FrameLength;
 800791c:	6d61      	ldr	r1, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800791e:	260a      	movs	r6, #10
 8007920:	4346      	muls	r6, r0
 8007922:	fb0c f001 	mul.w	r0, ip, r1
 8007926:	fbb6 f0f0 	udiv	r0, r6, r0
    hsai->Init.Mckdiv = tmpval / 10U;
 800792a:	210a      	movs	r1, #10
 800792c:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 8007930:	fb01 0013 	mls	r0, r1, r3, r0
 8007934:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8007936:	bf08      	it	eq
 8007938:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800793a:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv += 1U;
 800793c:	6263      	str	r3, [r4, #36]	; 0x24
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800793e:	bf02      	ittt	eq
 8007940:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 8007942:	085b      	lsreq	r3, r3, #1
 8007944:	6263      	streq	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007946:	6866      	ldr	r6, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007948:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800794a:	f036 0602 	bics.w	r6, r6, #2
 800794e:	f040 80d6 	bne.w	8007afe <HAL_SAI_Init+0x336>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007952:	2b01      	cmp	r3, #1
 8007954:	bf18      	it	ne
 8007956:	f44f 7600 	movne.w	r6, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800795a:	f7fa fb5b 	bl	8002014 <HAL_GetREVID>
 800795e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8007962:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007964:	69a1      	ldr	r1, [r4, #24]
 8007966:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007968:	e9d4 3e00 	ldrd	r3, lr, [r4]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800796c:	f8d3 a000 	ldr.w	sl, [r3]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007970:	f0c0 80cb 	bcc.w	8007b0a <HAL_SAI_Init+0x342>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007974:	ea4e 0e02 	orr.w	lr, lr, r2
 8007978:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800797a:	f8df c160 	ldr.w	ip, [pc, #352]	; 8007adc <HAL_SAI_Init+0x314>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800797e:	ea4e 0e02 	orr.w	lr, lr, r2
 8007982:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007984:	ea0a 0c0c 	and.w	ip, sl, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007988:	ea4e 0e02 	orr.w	lr, lr, r2
 800798c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800798e:	f8c3 c000 	str.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007992:	ea4e 0e02 	orr.w	lr, lr, r2
 8007996:	6962      	ldr	r2, [r4, #20]
 8007998:	f8d3 c000 	ldr.w	ip, [r3]
 800799c:	ea4e 0202 	orr.w	r2, lr, r2
 80079a0:	4311      	orrs	r1, r2
 80079a2:	6922      	ldr	r2, [r4, #16]
 80079a4:	4308      	orrs	r0, r1
 80079a6:	4310      	orrs	r0, r2
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079aa:	ea40 0c0c 	orr.w	ip, r0, ip
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80079ae:	454b      	cmp	r3, r9
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079b0:	ea4c 5c02 	orr.w	ip, ip, r2, lsl #20
 80079b4:	ea4c 0707 	orr.w	r7, ip, r7
 80079b8:	ea46 0607 	orr.w	r6, r6, r7
 80079bc:	601e      	str	r6, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079be:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80079c6:	f022 020f 	bic.w	r2, r2, #15
 80079ca:	605a      	str	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079cc:	69e2      	ldr	r2, [r4, #28]
 80079ce:	6859      	ldr	r1, [r3, #4]
 80079d0:	ea42 0200 	orr.w	r2, r2, r0
 80079d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80079d6:	ea42 0200 	orr.w	r2, r2, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079dc:	ea42 0201 	orr.w	r2, r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80079e2:	4a3c      	ldr	r2, [pc, #240]	; (8007ad4 <HAL_SAI_Init+0x30c>)
 80079e4:	6899      	ldr	r1, [r3, #8]
 80079e6:	ea02 0201 	and.w	r2, r2, r1
 80079ea:	609a      	str	r2, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079ee:	6899      	ldr	r1, [r3, #8]
 80079f0:	ea42 0200 	orr.w	r2, r2, r0
 80079f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80079f6:	ea42 0200 	orr.w	r2, r2, r0
 80079fa:	ea42 0201 	orr.w	r2, r2, r1
 80079fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007a00:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8007a04:	ea42 0201 	orr.w	r2, r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007a08:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a0a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007a12:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	f422 627d 	bic.w	r2, r2, #4048	; 0xfd0
 8007a1a:	f022 020f 	bic.w	r2, r2, #15
 8007a1e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8007a22:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007a26:	60da      	str	r2, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a28:	68d9      	ldr	r1, [r3, #12]
 8007a2a:	e9d4 201a 	ldrd	r2, r0, [r4, #104]	; 0x68
 8007a2e:	ea42 0200 	orr.w	r2, r2, r0
 8007a32:	ea42 0201 	orr.w	r2, r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a36:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a3c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007a3e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007a46:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007a48:	d002      	beq.n	8007a50 <HAL_SAI_Init+0x288>
 8007a4a:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <HAL_SAI_Init+0x2e8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d111      	bne.n	8007a74 <HAL_SAI_Init+0x2ac>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007a50:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007a58:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d109      	bne.n	8007a74 <HAL_SAI_Init+0x2ac>
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a62:	1e5a      	subs	r2, r3, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a66:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007a6a:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007a6c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	646b      	str	r3, [r5, #68]	; 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a74:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8007a76:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a78:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 8007a7c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8007a80:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  return HAL_OK;
 8007a84:	e6a6      	b.n	80077d4 <HAL_SAI_Init+0xc>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007a86:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a8a:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8007a8e:	e702      	b.n	8007896 <HAL_SAI_Init+0xce>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8007a90:	f043 0302 	orr.w	r3, r3, #2
      break;
 8007a94:	e7f9      	b.n	8007a8a <HAL_SAI_Init+0x2c2>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007a96:	f043 0303 	orr.w	r3, r3, #3
 8007a9a:	e7f6      	b.n	8007a8a <HAL_SAI_Init+0x2c2>
      syncen_bits = 0;
 8007a9c:	2700      	movs	r7, #0
 8007a9e:	e6fa      	b.n	8007896 <HAL_SAI_Init+0xce>
    uint32_t freq = 0;
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e707      	b.n	80078b4 <HAL_SAI_Init+0xec>
        tmpframelength = 64U;
 8007aa4:	2140      	movs	r1, #64	; 0x40
 8007aa6:	e73a      	b.n	800791e <HAL_SAI_Init+0x156>
        tmpframelength = 256U;
 8007aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aac:	e737      	b.n	800791e <HAL_SAI_Init+0x156>
 8007aae:	bf00      	nop
 8007ab0:	58005404 	.word	0x58005404
 8007ab4:	40015824 	.word	0x40015824
 8007ab8:	58005400 	.word	0x58005400
 8007abc:	40015800 	.word	0x40015800
 8007ac0:	40015c00 	.word	0x40015c00
 8007ac4:	40016000 	.word	0x40016000
 8007ac8:	40015c04 	.word	0x40015c04
 8007acc:	40016004 	.word	0x40016004
 8007ad0:	58005424 	.word	0x58005424
 8007ad4:	fff88000 	.word	0xfff88000
 8007ad8:	40015804 	.word	0x40015804
 8007adc:	f005c010 	.word	0xf005c010
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007ae0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007ae2:	210a      	movs	r1, #10
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007ae4:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007ae8:	fb01 f000 	mul.w	r0, r1, r0
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007aec:	bf0c      	ite	eq
 8007aee:	2302      	moveq	r3, #2
 8007af0:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007af2:	fb0c f303 	mul.w	r3, ip, r3
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	fbb0 f0f3 	udiv	r0, r0, r3
 8007afc:	e715      	b.n	800792a <HAL_SAI_Init+0x162>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	bf14      	ite	ne
 8007b02:	2600      	movne	r6, #0
 8007b04:	f44f 7600 	moveq.w	r6, #512	; 0x200
 8007b08:	e727      	b.n	800795a <HAL_SAI_Init+0x192>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b0a:	ea4e 0e02 	orr.w	lr, lr, r2
 8007b0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b10:	f8df c028 	ldr.w	ip, [pc, #40]	; 8007b3c <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b14:	ea4e 0e02 	orr.w	lr, lr, r2
 8007b18:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b1a:	ea0a 0c0c 	and.w	ip, sl, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b1e:	ea4e 0e02 	orr.w	lr, lr, r2
 8007b22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b24:	f8c3 c000 	str.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b28:	ea4e 0e02 	orr.w	lr, lr, r2
 8007b2c:	6962      	ldr	r2, [r4, #20]
 8007b2e:	f8d3 c000 	ldr.w	ip, [r3]
 8007b32:	ea4e 0202 	orr.w	r2, lr, r2
 8007b36:	4311      	orrs	r1, r2
 8007b38:	4308      	orrs	r0, r1
 8007b3a:	e735      	b.n	80079a8 <HAL_SAI_Init+0x1e0>
 8007b3c:	f805c010 	.word	0xf805c010

08007b40 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8007b40:	6803      	ldr	r3, [r0, #0]
 8007b42:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	f042 0208 	orr.w	r2, r2, #8
 8007b4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	f042 0210 	orr.w	r2, r2, #16
 8007b52:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 8007b62:	f022 0203 	bic.w	r2, r2, #3
 8007b66:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007b6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b70:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8007b74:	2a04      	cmp	r2, #4
 8007b76:	d00b      	beq.n	8007b90 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007b78:	068a      	lsls	r2, r1, #26
 8007b7a:	d509      	bpl.n	8007b90 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b7c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8007b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b84:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	f042 0220 	orr.w	r2, r2, #32
 8007b8e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b90:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8007b94:	2a03      	cmp	r2, #3
 8007b96:	d00b      	beq.n	8007bb0 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b98:	064a      	lsls	r2, r1, #25
 8007b9a:	d509      	bpl.n	8007bb0 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b9c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8007ba0:	f042 0204 	orr.w	r2, r2, #4
 8007ba4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007bb0:	058a      	lsls	r2, r1, #22
 8007bb2:	d509      	bpl.n	8007bc8 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bb4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007bc8:	05ca      	lsls	r2, r1, #23
 8007bca:	d509      	bpl.n	8007be0 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bcc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8007bd0:	f042 0208 	orr.w	r2, r2, #8
 8007bd4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007be6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8007bea:	4770      	bx	lr

08007bec <HAL_SPI_Init>:
{
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8007bee:	4604      	mov	r4, r0
 8007bf0:	b908      	cbnz	r0, 8007bf6 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 8007bf2:	2001      	movs	r0, #1
}
 8007bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007bf6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bf8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007bfa:	4946      	ldr	r1, [pc, #280]	; (8007d14 <HAL_SPI_Init+0x128>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bfc:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007bfe:	428a      	cmp	r2, r1
 8007c00:	68c3      	ldr	r3, [r0, #12]
 8007c02:	d009      	beq.n	8007c18 <HAL_SPI_Init+0x2c>
 8007c04:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8007c08:	428a      	cmp	r2, r1
 8007c0a:	d005      	beq.n	8007c18 <HAL_SPI_Init+0x2c>
 8007c0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c10:	428a      	cmp	r2, r1
 8007c12:	d001      	beq.n	8007c18 <HAL_SPI_Init+0x2c>
 8007c14:	2b0f      	cmp	r3, #15
 8007c16:	d8ec      	bhi.n	8007bf2 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c1a:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c1c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8007c1e:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8007c20:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c24:	493b      	ldr	r1, [pc, #236]	; (8007d14 <HAL_SPI_Init+0x128>)
 8007c26:	428a      	cmp	r2, r1
 8007c28:	d067      	beq.n	8007cfa <HAL_SPI_Init+0x10e>
 8007c2a:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 8007c2e:	428a      	cmp	r2, r1
 8007c30:	d063      	beq.n	8007cfa <HAL_SPI_Init+0x10e>
 8007c32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c36:	428a      	cmp	r2, r1
 8007c38:	d05f      	beq.n	8007cfa <HAL_SPI_Init+0x10e>
 8007c3a:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c3c:	d8d9      	bhi.n	8007bf2 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c3e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8007c42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c46:	b923      	cbnz	r3, 8007c52 <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8007c48:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007c4a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8007c4e:	f7f9 fd87 	bl	8001760 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8007c52:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007c54:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c56:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007c58:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8007c5c:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c5e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c66:	69a3      	ldr	r3, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c68:	6896      	ldr	r6, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c6e:	f406 16f8 	and.w	r6, r6, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c72:	d104      	bne.n	8007c7e <HAL_SPI_Init+0x92>
 8007c74:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007c78:	d141      	bne.n	8007cfe <HAL_SPI_Init+0x112>
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	d044      	beq.n	8007d08 <HAL_SPI_Init+0x11c>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c7e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c80:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c82:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c84:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c86:	4338      	orrs	r0, r7
 8007c88:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8007c8a:	4338      	orrs	r0, r7
 8007c8c:	68e7      	ldr	r7, [r4, #12]
 8007c8e:	4338      	orrs	r0, r7
 8007c90:	4330      	orrs	r0, r6
 8007c92:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c94:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007c96:	4303      	orrs	r3, r0
 8007c98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007c9a:	4303      	orrs	r3, r0
 8007c9c:	6920      	ldr	r0, [r4, #16]
 8007c9e:	4303      	orrs	r3, r0
 8007ca0:	6960      	ldr	r0, [r4, #20]
 8007ca2:	4303      	orrs	r3, r0
 8007ca4:	6a20      	ldr	r0, [r4, #32]
 8007ca6:	4303      	orrs	r3, r0
 8007ca8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007caa:	4303      	orrs	r3, r0
 8007cac:	68a0      	ldr	r0, [r4, #8]
 8007cae:	4303      	orrs	r3, r0
 8007cb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007cb2:	4303      	orrs	r3, r0
 8007cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb6:	4303      	orrs	r3, r0
 8007cb8:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007cba:	b959      	cbnz	r1, 8007cd4 <HAL_SPI_Init+0xe8>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007cbc:	6893      	ldr	r3, [r2, #8]
 8007cbe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8007cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007cc6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007cc8:	6893      	ldr	r3, [r2, #8]
 8007cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cd2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cd4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007cdc:	024b      	lsls	r3, r1, #9
 8007cde:	d505      	bpl.n	8007cec <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ce0:	68d3      	ldr	r3, [r2, #12]
 8007ce2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cec:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8007cee:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cf0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007cf4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 8007cf8:	e77c      	b.n	8007bf4 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cfa:	2b10      	cmp	r3, #16
 8007cfc:	e79e      	b.n	8007c3c <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	d1bd      	bne.n	8007c7e <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d02:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8007d06:	d1ba      	bne.n	8007c7e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d08:	6810      	ldr	r0, [r2, #0]
 8007d0a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8007d0e:	6010      	str	r0, [r2, #0]
 8007d10:	e7b5      	b.n	8007c7e <HAL_SPI_Init+0x92>
 8007d12:	bf00      	nop
 8007d14:	40013000 	.word	0x40013000

08007d18 <HAL_SPI_DeInit>:
{
 8007d18:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	b188      	cbz	r0, 8007d42 <HAL_SPI_DeInit+0x2a>
  __HAL_SPI_DISABLE(hspi);
 8007d1e:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007d20:	2302      	movs	r3, #2
 8007d22:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	f023 0301 	bic.w	r3, r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8007d2e:	f7f9 fdd7 	bl	80018e0 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d32:	2000      	movs	r0, #0
 8007d34:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8007d38:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_RESET;
 8007d3c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
}
 8007d40:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007d42:	2001      	movs	r0, #1
 8007d44:	e7fc      	b.n	8007d40 <HAL_SPI_DeInit+0x28>

08007d46 <HAL_SPI_Transmit>:
{
 8007d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8007d4c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8007d50:	4604      	mov	r4, r0
 8007d52:	4689      	mov	r9, r1
  __HAL_LOCK(hspi);
 8007d54:	2b01      	cmp	r3, #1
{
 8007d56:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8007d58:	d00f      	beq.n	8007d7a <HAL_SPI_Transmit+0x34>
 8007d5a:	2301      	movs	r3, #1
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007d5c:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hspi);
 8007d5e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8007d62:	f7fa f951 	bl	8002008 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8007d66:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8007d6a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	b2d8      	uxtb	r0, r3
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_SPI_Transmit+0x38>
    __HAL_UNLOCK(hspi);
 8007d76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8007d7a:	2002      	movs	r0, #2
 8007d7c:	e007      	b.n	8007d8e <HAL_SPI_Transmit+0x48>
  if ((pData == NULL) || (Size == 0UL))
 8007d7e:	f1b9 0f00 	cmp.w	r9, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_SPI_Transmit+0x44>
 8007d84:	f1b8 0f00 	cmp.w	r8, #0
 8007d88:	d103      	bne.n	8007d92 <HAL_SPI_Transmit+0x4c>
    __HAL_UNLOCK(hspi);
 8007d8a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8007d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d92:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 8007d94:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007d96:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d9a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d9e:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007da0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da4:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->TxXferCount = Size;
 8007da8:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007dac:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->RxXferCount = (uint16_t) 0UL;
 8007db0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8007db4:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8007db8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
    SPI_1LINE_TX(hspi);
 8007dbc:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dbe:	d103      	bne.n	8007dc8 <HAL_SPI_Transmit+0x82>
    SPI_1LINE_TX(hspi);
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dc6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007dc8:	6859      	ldr	r1, [r3, #4]
 8007dca:	0c09      	lsrs	r1, r1, #16
 8007dcc:	0409      	lsls	r1, r1, #16
 8007dce:	ea41 0108 	orr.w	r1, r1, r8
 8007dd2:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ddc:	6862      	ldr	r2, [r4, #4]
 8007dde:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8007de2:	d103      	bne.n	8007dec <HAL_SPI_Transmit+0xa6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dea:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007dec:	68e3      	ldr	r3, [r4, #12]
 8007dee:	2b0f      	cmp	r3, #15
 8007df0:	d82c      	bhi.n	8007e4c <HAL_SPI_Transmit+0x106>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007df2:	2b07      	cmp	r3, #7
 8007df4:	d873      	bhi.n	8007ede <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0UL)
 8007df6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007dfa:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	b35b      	cbz	r3, 8007e58 <HAL_SPI_Transmit+0x112>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e00:	6953      	ldr	r3, [r2, #20]
 8007e02:	0798      	lsls	r0, r3, #30
 8007e04:	f140 809e 	bpl.w	8007f44 <HAL_SPI_Transmit+0x1fe>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e08:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e0e:	b289      	uxth	r1, r1
 8007e10:	2903      	cmp	r1, #3
 8007e12:	d97e      	bls.n	8007f12 <HAL_SPI_Transmit+0x1cc>
 8007e14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e16:	2940      	cmp	r1, #64	; 0x40
 8007e18:	d97b      	bls.n	8007f12 <HAL_SPI_Transmit+0x1cc>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e1e:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e20:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007e22:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007e26:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8007e2e:	e7e2      	b.n	8007df6 <HAL_SPI_Transmit+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e30:	6953      	ldr	r3, [r2, #20]
 8007e32:	0798      	lsls	r0, r3, #30
 8007e34:	d523      	bpl.n	8007e7e <HAL_SPI_Transmit+0x138>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007e38:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e3c:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e3e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8007e40:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8007e4c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e50:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1eb      	bne.n	8007e30 <HAL_SPI_Transmit+0xea>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	071b      	lsls	r3, r3, #28
 8007e5e:	d57e      	bpl.n	8007f5e <HAL_SPI_Transmit+0x218>
  SPI_CloseTransfer(hspi);
 8007e60:	4620      	mov	r0, r4
 8007e62:	f7ff fe6d 	bl	8007b40 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8007e66:	2300      	movs	r3, #0
 8007e68:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e72:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 8007e76:	3800      	subs	r0, #0
 8007e78:	bf18      	it	ne
 8007e7a:	2001      	movne	r0, #1
 8007e7c:	e787      	b.n	8007d8e <HAL_SPI_Transmit+0x48>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e7e:	f7fa f8c3 	bl	8002008 <HAL_GetTick>
 8007e82:	1b80      	subs	r0, r0, r6
 8007e84:	42a8      	cmp	r0, r5
 8007e86:	d312      	bcc.n	8007eae <HAL_SPI_Transmit+0x168>
 8007e88:	1c69      	adds	r1, r5, #1
 8007e8a:	d0df      	beq.n	8007e4c <HAL_SPI_Transmit+0x106>
          SPI_CloseTransfer(hspi);
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f7ff fe57 	bl	8007b40 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 8007e92:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8007e94:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8007e96:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 8007eac:	e76f      	b.n	8007d8e <HAL_SPI_Transmit+0x48>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	d1cc      	bne.n	8007e4c <HAL_SPI_Transmit+0x106>
 8007eb2:	e7eb      	b.n	8007e8c <HAL_SPI_Transmit+0x146>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007eb4:	694b      	ldr	r3, [r1, #20]
 8007eb6:	079a      	lsls	r2, r3, #30
 8007eb8:	d520      	bpl.n	8007efc <HAL_SPI_Transmit+0x1b6>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007eba:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007ebe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	2a01      	cmp	r2, #1
 8007ec4:	d912      	bls.n	8007eec <HAL_SPI_Transmit+0x1a6>
 8007ec6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007ec8:	b182      	cbz	r2, 8007eec <HAL_SPI_Transmit+0x1a6>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ece:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ed0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ed2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007ed6:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8007ede:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ee2:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e4      	bne.n	8007eb4 <HAL_SPI_Transmit+0x16e>
 8007eea:	e7b5      	b.n	8007e58 <HAL_SPI_Transmit+0x112>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007eec:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007ef0:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef2:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8007ef4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	e7ed      	b.n	8007ed8 <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007efc:	f7fa f884 	bl	8002008 <HAL_GetTick>
 8007f00:	1b80      	subs	r0, r0, r6
 8007f02:	42a8      	cmp	r0, r5
 8007f04:	d302      	bcc.n	8007f0c <HAL_SPI_Transmit+0x1c6>
 8007f06:	1c6b      	adds	r3, r5, #1
 8007f08:	d0e9      	beq.n	8007ede <HAL_SPI_Transmit+0x198>
 8007f0a:	e7bf      	b.n	8007e8c <HAL_SPI_Transmit+0x146>
 8007f0c:	2d00      	cmp	r5, #0
 8007f0e:	d1e6      	bne.n	8007ede <HAL_SPI_Transmit+0x198>
 8007f10:	e7bc      	b.n	8007e8c <HAL_SPI_Transmit+0x146>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f12:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8007f16:	b289      	uxth	r1, r1
 8007f18:	2901      	cmp	r1, #1
 8007f1a:	d909      	bls.n	8007f30 <HAL_SPI_Transmit+0x1ea>
 8007f1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f1e:	b139      	cbz	r1, 8007f30 <HAL_SPI_Transmit+0x1ea>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007f20:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007f24:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f26:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007f28:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007f2c:	3b02      	subs	r3, #2
 8007f2e:	e77b      	b.n	8007e28 <HAL_SPI_Transmit+0xe2>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007f38:	3301      	adds	r3, #1
 8007f3a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8007f3c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007f40:	3b01      	subs	r3, #1
 8007f42:	e771      	b.n	8007e28 <HAL_SPI_Transmit+0xe2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f44:	f7fa f860 	bl	8002008 <HAL_GetTick>
 8007f48:	1b80      	subs	r0, r0, r6
 8007f4a:	42a8      	cmp	r0, r5
 8007f4c:	d303      	bcc.n	8007f56 <HAL_SPI_Transmit+0x210>
 8007f4e:	1c69      	adds	r1, r5, #1
 8007f50:	f43f af51 	beq.w	8007df6 <HAL_SPI_Transmit+0xb0>
 8007f54:	e79a      	b.n	8007e8c <HAL_SPI_Transmit+0x146>
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	f47f af4d 	bne.w	8007df6 <HAL_SPI_Transmit+0xb0>
 8007f5c:	e796      	b.n	8007e8c <HAL_SPI_Transmit+0x146>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f5e:	f7fa f853 	bl	8002008 <HAL_GetTick>
 8007f62:	1b80      	subs	r0, r0, r6
 8007f64:	4285      	cmp	r5, r0
 8007f66:	d809      	bhi.n	8007f7c <HAL_SPI_Transmit+0x236>
 8007f68:	1c6a      	adds	r2, r5, #1
 8007f6a:	f43f af75 	beq.w	8007e58 <HAL_SPI_Transmit+0x112>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007f72:	f043 0320 	orr.w	r3, r3, #32
 8007f76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007f7a:	e771      	b.n	8007e60 <HAL_SPI_Transmit+0x11a>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	f47f af6b 	bne.w	8007e58 <HAL_SPI_Transmit+0x112>
 8007f82:	e7f4      	b.n	8007f6e <HAL_SPI_Transmit+0x228>

08007f84 <HAL_SPI_TransmitReceive>:
{
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8007f8a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8007f8e:	4604      	mov	r4, r0
 8007f90:	460f      	mov	r7, r1
  __HAL_LOCK(hspi);
 8007f92:	2b01      	cmp	r3, #1
{
 8007f94:	4692      	mov	sl, r2
 8007f96:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8007f98:	d017      	beq.n	8007fca <HAL_SPI_TransmitReceive+0x46>
 8007f9a:	2301      	movs	r3, #1
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007f9c:	f8d0 9000 	ldr.w	r9, [r0]
  __HAL_LOCK(hspi);
 8007fa0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8007fa4:	f7fa f830 	bl	8002008 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007fa8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 8007fac:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8007fae:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fb0:	2b01      	cmp	r3, #1
  tmp_state           = hspi->State;
 8007fb2:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fb4:	d00b      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x4a>
 8007fb6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007fba:	d103      	bne.n	8007fc4 <HAL_SPI_TransmitReceive+0x40>
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007fbc:	68a3      	ldr	r3, [r4, #8]
 8007fbe:	b90b      	cbnz	r3, 8007fc4 <HAL_SPI_TransmitReceive+0x40>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007fc0:	2a04      	cmp	r2, #4
 8007fc2:	d004      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x4a>
    __HAL_UNLOCK(hspi);
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8007fca:	2002      	movs	r0, #2
 8007fcc:	e008      	b.n	8007fe0 <HAL_SPI_TransmitReceive+0x5c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007fce:	b11f      	cbz	r7, 8007fd8 <HAL_SPI_TransmitReceive+0x54>
 8007fd0:	f1ba 0f00 	cmp.w	sl, #0
 8007fd4:	d000      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x54>
 8007fd6:	b92d      	cbnz	r5, 8007fe4 <HAL_SPI_TransmitReceive+0x60>
    __HAL_UNLOCK(hspi);
 8007fd8:	2300      	movs	r3, #0
    return errorcode;
 8007fda:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8007fdc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8007fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fe4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d002      	beq.n	8007ff2 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fec:	2305      	movs	r3, #5
 8007fee:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ff2:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff4:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ff6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ffa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ffe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8008002:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8008006:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferSize  = Size;
 800800a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800800e:	65e7      	str	r7, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008010:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8008014:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008018:	6853      	ldr	r3, [r2, #4]
 800801a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800801e:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008022:	ea43 0305 	orr.w	r3, r3, r5
 8008026:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008030:	d103      	bne.n	800803a <HAL_SPI_TransmitReceive+0xb6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008038:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800803a:	68e3      	ldr	r3, [r4, #12]
 800803c:	462f      	mov	r7, r5
 800803e:	2b0f      	cmp	r3, #15
 8008040:	d95b      	bls.n	80080fa <HAL_SPI_TransmitReceive+0x176>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008042:	f248 0908 	movw	r9, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	6953      	ldr	r3, [r2, #20]
 800804a:	0799      	lsls	r1, r3, #30
 800804c:	d50e      	bpl.n	800806c <HAL_SPI_TransmitReceive+0xe8>
 800804e:	b16d      	cbz	r5, 800806c <HAL_SPI_TransmitReceive+0xe8>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008050:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008052:	f853 1b04 	ldr.w	r1, [r3], #4
 8008056:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008058:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800805a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800805e:	3b01      	subs	r3, #1
 8008060:	b29b      	uxth	r3, r3
 8008062:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008066:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800806a:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800806c:	6953      	ldr	r3, [r2, #20]
 800806e:	ea13 0f09 	tst.w	r3, r9
 8008072:	d00e      	beq.n	8008092 <HAL_SPI_TransmitReceive+0x10e>
 8008074:	b16f      	cbz	r7, 8008092 <HAL_SPI_TransmitReceive+0x10e>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008076:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800807a:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800807e:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8008080:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008084:	3b01      	subs	r3, #1
 8008086:	b29b      	uxth	r3, r3
 8008088:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800808c:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
 8008090:	b2bf      	uxth	r7, r7
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008092:	f7f9 ffb9 	bl	8002008 <HAL_GetTick>
 8008096:	eba0 0008 	sub.w	r0, r0, r8
 800809a:	42b0      	cmp	r0, r6
 800809c:	d312      	bcc.n	80080c4 <HAL_SPI_TransmitReceive+0x140>
 800809e:	1c73      	adds	r3, r6, #1
 80080a0:	d012      	beq.n	80080c8 <HAL_SPI_TransmitReceive+0x144>
        SPI_CloseTransfer(hspi);
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7ff fd4c 	bl	8007b40 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 80080a8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80080aa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80080ac:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80080b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80080bc:	2301      	movs	r3, #1
 80080be:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 80080c2:	e78d      	b.n	8007fe0 <HAL_SPI_TransmitReceive+0x5c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c4:	2e00      	cmp	r6, #0
 80080c6:	d0ec      	beq.n	80080a2 <HAL_SPI_TransmitReceive+0x11e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80080c8:	ea45 0307 	orr.w	r3, r5, r7
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1b9      	bne.n	8008046 <HAL_SPI_TransmitReceive+0xc2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	071b      	lsls	r3, r3, #28
 80080d8:	f140 80d3 	bpl.w	8008282 <HAL_SPI_TransmitReceive+0x2fe>
  SPI_CloseTransfer(hspi);
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff fd2f 	bl	8007b40 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 80080e2:	2300      	movs	r3, #0
 80080e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080ee:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 80080f2:	3800      	subs	r0, #0
 80080f4:	bf18      	it	ne
 80080f6:	2001      	movne	r0, #1
 80080f8:	e772      	b.n	8007fe0 <HAL_SPI_TransmitReceive+0x5c>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080fa:	2b07      	cmp	r3, #7
 80080fc:	d950      	bls.n	80081a0 <HAL_SPI_TransmitReceive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80080fe:	6822      	ldr	r2, [r4, #0]
 8008100:	6953      	ldr	r3, [r2, #20]
 8008102:	0798      	lsls	r0, r3, #30
 8008104:	d513      	bpl.n	800812e <HAL_SPI_TransmitReceive+0x1aa>
 8008106:	b195      	cbz	r5, 800812e <HAL_SPI_TransmitReceive+0x1aa>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008108:	2d01      	cmp	r5, #1
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800810a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800810c:	d033      	beq.n	8008176 <HAL_SPI_TransmitReceive+0x1f2>
 800810e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008110:	2900      	cmp	r1, #0
 8008112:	d030      	beq.n	8008176 <HAL_SPI_TransmitReceive+0x1f2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008114:	f853 1b04 	ldr.w	r1, [r3], #4
 8008118:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800811a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800811c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008120:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8008122:	b29b      	uxth	r3, r3
 8008124:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8008128:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800812c:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800812e:	6953      	ldr	r3, [r2, #20]
 8008130:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8008134:	d011      	beq.n	800815a <HAL_SPI_TransmitReceive+0x1d6>
 8008136:	b187      	cbz	r7, 800815a <HAL_SPI_TransmitReceive+0x1d6>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008138:	6951      	ldr	r1, [r2, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800813a:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800813c:	0409      	lsls	r1, r1, #16
 800813e:	d523      	bpl.n	8008188 <HAL_SPI_TransmitReceive+0x204>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008142:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008146:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008148:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800814c:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800814e:	b29b      	uxth	r3, r3
 8008150:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008154:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
 8008158:	b2bf      	uxth	r7, r7
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800815a:	f7f9 ff55 	bl	8002008 <HAL_GetTick>
 800815e:	eba0 0008 	sub.w	r0, r0, r8
 8008162:	42b0      	cmp	r0, r6
 8008164:	d319      	bcc.n	800819a <HAL_SPI_TransmitReceive+0x216>
 8008166:	1c72      	adds	r2, r6, #1
 8008168:	d19b      	bne.n	80080a2 <HAL_SPI_TransmitReceive+0x11e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800816a:	ea45 0307 	orr.w	r3, r5, r7
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1c4      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x17a>
 8008174:	e7ad      	b.n	80080d2 <HAL_SPI_TransmitReceive+0x14e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008176:	f833 1b02 	ldrh.w	r1, [r3], #2
 800817a:	f8a9 1020 	strh.w	r1, [r9, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800817e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8008180:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008184:	3b01      	subs	r3, #1
 8008186:	e7cc      	b.n	8008122 <HAL_SPI_TransmitReceive+0x19e>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008188:	f8b9 2030 	ldrh.w	r2, [r9, #48]	; 0x30
 800818c:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008190:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8008192:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008196:	3b01      	subs	r3, #1
 8008198:	e7d9      	b.n	800814e <HAL_SPI_TransmitReceive+0x1ca>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800819a:	2e00      	cmp	r6, #0
 800819c:	d1e5      	bne.n	800816a <HAL_SPI_TransmitReceive+0x1e6>
 800819e:	e780      	b.n	80080a2 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80081a0:	6822      	ldr	r2, [r4, #0]
 80081a2:	6953      	ldr	r3, [r2, #20]
 80081a4:	079b      	lsls	r3, r3, #30
 80081a6:	d513      	bpl.n	80081d0 <HAL_SPI_TransmitReceive+0x24c>
 80081a8:	b195      	cbz	r5, 80081d0 <HAL_SPI_TransmitReceive+0x24c>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80081aa:	2d03      	cmp	r5, #3
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80081ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80081ae:	d935      	bls.n	800821c <HAL_SPI_TransmitReceive+0x298>
 80081b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80081b2:	2940      	cmp	r1, #64	; 0x40
 80081b4:	d934      	bls.n	8008220 <HAL_SPI_TransmitReceive+0x29c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80081b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80081ba:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80081bc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80081be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80081c2:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80081ca:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 80081ce:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	6953      	ldr	r3, [r2, #20]
 80081d4:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80081d8:	d011      	beq.n	80081fe <HAL_SPI_TransmitReceive+0x27a>
 80081da:	b187      	cbz	r7, 80081fe <HAL_SPI_TransmitReceive+0x27a>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80081dc:	6951      	ldr	r1, [r2, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081de:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80081e0:	0408      	lsls	r0, r1, #16
 80081e2:	d532      	bpl.n	800824a <HAL_SPI_TransmitReceive+0x2c6>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081e6:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80081ea:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80081ec:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80081f0:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80081f8:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
 80081fc:	b2bf      	uxth	r7, r7
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081fe:	f7f9 ff03 	bl	8002008 <HAL_GetTick>
 8008202:	eba0 0008 	sub.w	r0, r0, r8
 8008206:	42b0      	cmp	r0, r6
 8008208:	d338      	bcc.n	800827c <HAL_SPI_TransmitReceive+0x2f8>
 800820a:	1c71      	adds	r1, r6, #1
 800820c:	f47f af49 	bne.w	80080a2 <HAL_SPI_TransmitReceive+0x11e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008210:	ea45 0307 	orr.w	r3, r5, r7
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1c2      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x21c>
 800821a:	e75a      	b.n	80080d2 <HAL_SPI_TransmitReceive+0x14e>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800821c:	2d01      	cmp	r5, #1
 800821e:	d00a      	beq.n	8008236 <HAL_SPI_TransmitReceive+0x2b2>
 8008220:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008222:	b141      	cbz	r1, 8008236 <HAL_SPI_TransmitReceive+0x2b2>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008224:	f833 2b02 	ldrh.w	r2, [r3], #2
 8008228:	f8a9 2020 	strh.w	r2, [r9, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800822c:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800822e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008232:	3b02      	subs	r3, #2
 8008234:	e7c6      	b.n	80081c4 <HAL_SPI_TransmitReceive+0x240>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800823c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800823e:	3301      	adds	r3, #1
 8008240:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8008242:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008246:	3b01      	subs	r3, #1
 8008248:	e7bc      	b.n	80081c4 <HAL_SPI_TransmitReceive+0x240>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800824a:	6951      	ldr	r1, [r2, #20]
 800824c:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 8008250:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8008254:	d908      	bls.n	8008268 <HAL_SPI_TransmitReceive+0x2e4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008256:	f8b9 2030 	ldrh.w	r2, [r9, #48]	; 0x30
 800825a:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800825e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008260:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008264:	3b02      	subs	r3, #2
 8008266:	e7c4      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x26e>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008268:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800826c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800826e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008270:	3301      	adds	r3, #1
 8008272:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8008274:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008278:	3b01      	subs	r3, #1
 800827a:	e7ba      	b.n	80081f2 <HAL_SPI_TransmitReceive+0x26e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800827c:	2e00      	cmp	r6, #0
 800827e:	d1c7      	bne.n	8008210 <HAL_SPI_TransmitReceive+0x28c>
 8008280:	e70f      	b.n	80080a2 <HAL_SPI_TransmitReceive+0x11e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008282:	f7f9 fec1 	bl	8002008 <HAL_GetTick>
 8008286:	eba0 0008 	sub.w	r0, r0, r8
 800828a:	4286      	cmp	r6, r0
 800828c:	d809      	bhi.n	80082a2 <HAL_SPI_TransmitReceive+0x31e>
 800828e:	1c72      	adds	r2, r6, #1
 8008290:	f43f af1f 	beq.w	80080d2 <HAL_SPI_TransmitReceive+0x14e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008294:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008298:	f043 0320 	orr.w	r3, r3, #32
 800829c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80082a0:	e71c      	b.n	80080dc <HAL_SPI_TransmitReceive+0x158>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f47f af15 	bne.w	80080d2 <HAL_SPI_TransmitReceive+0x14e>
 80082a8:	e7f4      	b.n	8008294 <HAL_SPI_TransmitReceive+0x310>

080082aa <HAL_SPI_Receive>:
{
 80082aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082ae:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082b0:	6843      	ldr	r3, [r0, #4]
{
 80082b2:	4604      	mov	r4, r0
 80082b4:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 80082ba:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80082bc:	d10c      	bne.n	80082d8 <HAL_SPI_Receive+0x2e>
 80082be:	6883      	ldr	r3, [r0, #8]
 80082c0:	b953      	cbnz	r3, 80082d8 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80082c2:	2304      	movs	r3, #4
 80082c4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082c8:	4613      	mov	r3, r2
 80082ca:	9500      	str	r5, [sp, #0]
 80082cc:	460a      	mov	r2, r1
 80082ce:	f7ff fe59 	bl	8007f84 <HAL_SPI_TransmitReceive>
}
 80082d2:	b003      	add	sp, #12
 80082d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80082d8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d00f      	beq.n	8008300 <HAL_SPI_Receive+0x56>
 80082e0:	2301      	movs	r3, #1
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80082e2:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hspi);
 80082e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 80082e8:	f7f9 fe8e 	bl	8002008 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80082ec:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 80082f0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	b2d8      	uxtb	r0, r3
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_SPI_Receive+0x5a>
    __HAL_UNLOCK(hspi);
 80082fc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 8008300:	2002      	movs	r0, #2
 8008302:	e7e6      	b.n	80082d2 <HAL_SPI_Receive+0x28>
  if ((pData == NULL) || (Size == 0UL))
 8008304:	f1b9 0f00 	cmp.w	r9, #0
 8008308:	d002      	beq.n	8008310 <HAL_SPI_Receive+0x66>
 800830a:	f1b8 0f00 	cmp.w	r8, #0
 800830e:	d102      	bne.n	8008316 <HAL_SPI_Receive+0x6c>
    __HAL_UNLOCK(hspi);
 8008310:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8008314:	e7dd      	b.n	80082d2 <HAL_SPI_Receive+0x28>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008316:	2204      	movs	r2, #4
  hspi->pTxBuffPtr  = NULL;
 8008318:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800831a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800831e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008322:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8008326:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800832a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    SPI_1LINE_RX(hspi);
 800832e:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008330:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008334:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 8008338:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008342:	d103      	bne.n	800834c <HAL_SPI_Receive+0xa2>
    SPI_1LINE_RX(hspi);
 8008344:	680b      	ldr	r3, [r1, #0]
 8008346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800834a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800834c:	6848      	ldr	r0, [r1, #4]
 800834e:	0c00      	lsrs	r0, r0, #16
 8008350:	0400      	lsls	r0, r0, #16
 8008352:	ea40 0008 	orr.w	r0, r0, r8
 8008356:	6048      	str	r0, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8008358:	680b      	ldr	r3, [r1, #0]
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008366:	d103      	bne.n	8008370 <HAL_SPI_Receive+0xc6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008368:	680b      	ldr	r3, [r1, #0]
 800836a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800836e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008370:	68e3      	ldr	r3, [r4, #12]
 8008372:	2b0f      	cmp	r3, #15
 8008374:	d93f      	bls.n	80083f6 <HAL_SPI_Receive+0x14c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008376:	f248 0708 	movw	r7, #32776	; 0x8008
    while (hspi->RxXferCount > 0UL)
 800837a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800837e:	b29b      	uxth	r3, r3
 8008380:	b973      	cbnz	r3, 80083a0 <HAL_SPI_Receive+0xf6>
  SPI_CloseTransfer(hspi);
 8008382:	4620      	mov	r0, r4
 8008384:	f7ff fbdc 	bl	8007b40 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8008388:	2300      	movs	r3, #0
 800838a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800838e:	2301      	movs	r3, #1
 8008390:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008394:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008398:	3800      	subs	r0, #0
 800839a:	bf18      	it	ne
 800839c:	2001      	movne	r0, #1
 800839e:	e798      	b.n	80082d2 <HAL_SPI_Receive+0x28>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	423a      	tst	r2, r7
 80083a6:	d00b      	beq.n	80083c0 <HAL_SPI_Receive+0x116>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80083a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ac:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80083b0:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 80083b2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80083b6:	3b01      	subs	r3, #1
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80083be:	e7dc      	b.n	800837a <HAL_SPI_Receive+0xd0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083c0:	f7f9 fe22 	bl	8002008 <HAL_GetTick>
 80083c4:	1b80      	subs	r0, r0, r6
 80083c6:	42a8      	cmp	r0, r5
 80083c8:	d312      	bcc.n	80083f0 <HAL_SPI_Receive+0x146>
 80083ca:	1c68      	adds	r0, r5, #1
 80083cc:	d0d5      	beq.n	800837a <HAL_SPI_Receive+0xd0>
          SPI_CloseTransfer(hspi);
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff fbb6 	bl	8007b40 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 80083d4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80083d6:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 80083d8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80083e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 80083ee:	e770      	b.n	80082d2 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	d1c2      	bne.n	800837a <HAL_SPI_Receive+0xd0>
 80083f4:	e7eb      	b.n	80083ce <HAL_SPI_Receive+0x124>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083f6:	2b07      	cmp	r3, #7
 80083f8:	d82b      	bhi.n	8008452 <HAL_SPI_Receive+0x1a8>
    while (hspi->RxXferCount > 0UL)
 80083fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0be      	beq.n	8008382 <HAL_SPI_Receive+0xd8>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008404:	6822      	ldr	r2, [r4, #0]
 8008406:	6953      	ldr	r3, [r2, #20]
 8008408:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800840c:	d052      	beq.n	80084b4 <HAL_SPI_Receive+0x20a>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800840e:	6951      	ldr	r1, [r2, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008410:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008412:	0409      	lsls	r1, r1, #16
 8008414:	d536      	bpl.n	8008484 <HAL_SPI_Receive+0x1da>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008416:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008418:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800841c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800841e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008422:	3b04      	subs	r3, #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8008424:	b29b      	uxth	r3, r3
 8008426:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800842a:	e7e6      	b.n	80083fa <HAL_SPI_Receive+0x150>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	6953      	ldr	r3, [r2, #20]
 8008430:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8008434:	d01b      	beq.n	800846e <HAL_SPI_Receive+0x1c4>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008436:	6951      	ldr	r1, [r2, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008438:	6e63      	ldr	r3, [r4, #100]	; 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800843a:	0409      	lsls	r1, r1, #16
 800843c:	d50f      	bpl.n	800845e <HAL_SPI_Receive+0x1b4>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800843e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008440:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008444:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008446:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800844a:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800844c:	b29b      	uxth	r3, r3
 800844e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8008452:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e7      	bne.n	800842c <HAL_SPI_Receive+0x182>
 800845c:	e791      	b.n	8008382 <HAL_SPI_Receive+0xd8>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800845e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008460:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008464:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8008466:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800846a:	3b01      	subs	r3, #1
 800846c:	e7ee      	b.n	800844c <HAL_SPI_Receive+0x1a2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800846e:	f7f9 fdcb 	bl	8002008 <HAL_GetTick>
 8008472:	1b80      	subs	r0, r0, r6
 8008474:	42a8      	cmp	r0, r5
 8008476:	d302      	bcc.n	800847e <HAL_SPI_Receive+0x1d4>
 8008478:	1c68      	adds	r0, r5, #1
 800847a:	d0ea      	beq.n	8008452 <HAL_SPI_Receive+0x1a8>
 800847c:	e7a7      	b.n	80083ce <HAL_SPI_Receive+0x124>
 800847e:	2d00      	cmp	r5, #0
 8008480:	d1e7      	bne.n	8008452 <HAL_SPI_Receive+0x1a8>
 8008482:	e7a4      	b.n	80083ce <HAL_SPI_Receive+0x124>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008484:	6951      	ldr	r1, [r2, #20]
 8008486:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800848a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800848e:	d907      	bls.n	80084a0 <HAL_SPI_Receive+0x1f6>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008490:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008492:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008496:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008498:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800849c:	3b02      	subs	r3, #2
 800849e:	e7c1      	b.n	8008424 <HAL_SPI_Receive+0x17a>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084a0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80084a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80084a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084a8:	3301      	adds	r3, #1
 80084aa:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80084ac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80084b0:	3b01      	subs	r3, #1
 80084b2:	e7b7      	b.n	8008424 <HAL_SPI_Receive+0x17a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084b4:	f7f9 fda8 	bl	8002008 <HAL_GetTick>
 80084b8:	1b80      	subs	r0, r0, r6
 80084ba:	42a8      	cmp	r0, r5
 80084bc:	d302      	bcc.n	80084c4 <HAL_SPI_Receive+0x21a>
 80084be:	1c6b      	adds	r3, r5, #1
 80084c0:	d09b      	beq.n	80083fa <HAL_SPI_Receive+0x150>
 80084c2:	e784      	b.n	80083ce <HAL_SPI_Receive+0x124>
 80084c4:	2d00      	cmp	r5, #0
 80084c6:	d198      	bne.n	80083fa <HAL_SPI_Receive+0x150>
 80084c8:	e781      	b.n	80083ce <HAL_SPI_Receive+0x124>

080084ca <HAL_SPI_TxCpltCallback>:
 80084ca:	4770      	bx	lr

080084cc <HAL_SPI_RxCpltCallback>:
 80084cc:	4770      	bx	lr

080084ce <HAL_SPI_TxRxCpltCallback>:
 80084ce:	4770      	bx	lr

080084d0 <HAL_SPI_ErrorCallback>:
 80084d0:	4770      	bx	lr
	...

080084d4 <HAL_SPI_IRQHandler>:
{
 80084d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t itsource = hspi->Instance->IER;
 80084d8:	6807      	ldr	r7, [r0, #0]
{
 80084da:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 80084dc:	f8d7 8010 	ldr.w	r8, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
 80084e0:	f8d7 9014 	ldr.w	r9, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80084e4:	68be      	ldr	r6, [r7, #8]
  uint32_t trigger  = itsource & itflag;
 80084e6:	ea08 0a09 	and.w	sl, r8, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 80084ea:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80084ee:	f00a 0364 	and.w	r3, sl, #100	; 0x64
  HAL_SPI_StateTypeDef State = hspi->State;
 80084f2:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d118      	bne.n	800852a <HAL_SPI_IRQHandler+0x56>
    hspi->TxISR(hspi);
 80084f8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80084fa:	4798      	blx	r3
    hspi->RxISR(hspi);
 80084fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80084fe:	4620      	mov	r0, r4
 8008500:	4798      	blx	r3
    handled = 1UL;
 8008502:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008504:	f00a 0b45 	and.w	fp, sl, #69	; 0x45
 8008508:	f1bb 0f01 	cmp.w	fp, #1
 800850c:	d103      	bne.n	8008516 <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 800850e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008510:	4620      	mov	r0, r4
 8008512:	4798      	blx	r3
    handled = 1UL;
 8008514:	465b      	mov	r3, fp
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008516:	f00a 0226 	and.w	r2, sl, #38	; 0x26
 800851a:	2a02      	cmp	r2, #2
 800851c:	d107      	bne.n	800852e <HAL_SPI_IRQHandler+0x5a>
    hspi->TxISR(hspi);
 800851e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008520:	4620      	mov	r0, r4
}
 8008522:	b001      	add	sp, #4
 8008524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hspi->TxISR(hspi);
 8008528:	4718      	bx	r3
  uint32_t handled  = 0UL;
 800852a:	2300      	movs	r3, #0
 800852c:	e7ea      	b.n	8008504 <HAL_SPI_IRQHandler+0x30>
  if (handled != 0UL)
 800852e:	bb03      	cbnz	r3, 8008572 <HAL_SPI_IRQHandler+0x9e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008530:	f01a 0f08 	tst.w	sl, #8
 8008534:	d064      	beq.n	8008600 <HAL_SPI_IRQHandler+0x12c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008536:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8008538:	f416 4f40 	tst.w	r6, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	f042 0208 	orr.w	r2, r2, #8
 8008542:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	f042 0210 	orr.w	r2, r2, #16
 800854a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008552:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	f022 0208 	bic.w	r2, r2, #8
 800855a:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800855c:	d00f      	beq.n	800857e <HAL_SPI_IRQHandler+0xaa>
 800855e:	2d04      	cmp	r5, #4
 8008560:	d00a      	beq.n	8008578 <HAL_SPI_IRQHandler+0xa4>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8008562:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008564:	69d2      	ldr	r2, [r2, #28]
 8008566:	b152      	cbz	r2, 800857e <HAL_SPI_IRQHandler+0xaa>
 8008568:	2d03      	cmp	r5, #3
 800856a:	d105      	bne.n	8008578 <HAL_SPI_IRQHandler+0xa4>
      HAL_SPI_TxCpltCallback(hspi);
 800856c:	4620      	mov	r0, r4
 800856e:	f7ff ffac 	bl	80084ca <HAL_SPI_TxCpltCallback>
}
 8008572:	b001      	add	sp, #4
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8008578:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800857a:	69d2      	ldr	r2, [r2, #28]
 800857c:	bb8a      	cbnz	r2, 80085e2 <HAL_SPI_IRQHandler+0x10e>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8008584:	d01a      	beq.n	80085bc <HAL_SPI_IRQHandler+0xe8>
      SPI_CloseTransfer(hspi);
 8008586:	4620      	mov	r0, r4
 8008588:	f7ff fada 	bl	8007b40 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800858c:	2301      	movs	r3, #1
 800858e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008592:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008596:	b323      	cbz	r3, 80085e2 <HAL_SPI_IRQHandler+0x10e>
        HAL_SPI_ErrorCallback(hspi);
 8008598:	f7ff ff9a 	bl	80084d0 <HAL_SPI_ErrorCallback>
 800859c:	e7e9      	b.n	8008572 <HAL_SPI_IRQHandler+0x9e>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800859e:	68e2      	ldr	r2, [r4, #12]
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80085a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80085a2:	2a0f      	cmp	r2, #15
 80085a4:	d910      	bls.n	80085c8 <HAL_SPI_IRQHandler+0xf4>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085aa:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80085ae:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80085b0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80085bc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1eb      	bne.n	800859e <HAL_SPI_IRQHandler+0xca>
 80085c6:	e7de      	b.n	8008586 <HAL_SPI_IRQHandler+0xb2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085c8:	2a07      	cmp	r2, #7
 80085ca:	d903      	bls.n	80085d4 <HAL_SPI_IRQHandler+0x100>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80085cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80085ce:	f823 2b02 	strh.w	r2, [r3], #2
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80085d2:	e7ec      	b.n	80085ae <HAL_SPI_IRQHandler+0xda>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80085d4:	6822      	ldr	r2, [r4, #0]
 80085d6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80085da:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80085dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085de:	3301      	adds	r3, #1
 80085e0:	e7e5      	b.n	80085ae <HAL_SPI_IRQHandler+0xda>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80085e2:	2d05      	cmp	r5, #5
 80085e4:	d103      	bne.n	80085ee <HAL_SPI_IRQHandler+0x11a>
      HAL_SPI_TxRxCpltCallback(hspi);
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff ff71 	bl	80084ce <HAL_SPI_TxRxCpltCallback>
 80085ec:	e7c1      	b.n	8008572 <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80085ee:	2d04      	cmp	r5, #4
 80085f0:	d103      	bne.n	80085fa <HAL_SPI_IRQHandler+0x126>
      HAL_SPI_RxCpltCallback(hspi);
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff ff6a 	bl	80084cc <HAL_SPI_RxCpltCallback>
 80085f8:	e7bb      	b.n	8008572 <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80085fa:	2d03      	cmp	r5, #3
 80085fc:	d1b9      	bne.n	8008572 <HAL_SPI_IRQHandler+0x9e>
 80085fe:	e7b5      	b.n	800856c <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008600:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8008604:	d008      	beq.n	8008618 <HAL_SPI_IRQHandler+0x144>
 8008606:	f018 0f08 	tst.w	r8, #8
 800860a:	d005      	beq.n	8008618 <HAL_SPI_IRQHandler+0x144>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800860c:	6822      	ldr	r2, [r4, #0]
 800860e:	6993      	ldr	r3, [r2, #24]
 8008610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008614:	6193      	str	r3, [r2, #24]
    return;
 8008616:	e7ac      	b.n	8008572 <HAL_SPI_IRQHandler+0x9e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008618:	f41a 7f58 	tst.w	sl, #864	; 0x360
 800861c:	d0a9      	beq.n	8008572 <HAL_SPI_IRQHandler+0x9e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800861e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008622:	d00a      	beq.n	800863a <HAL_SPI_IRQHandler+0x166>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008624:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008628:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800862a:	f043 0304 	orr.w	r3, r3, #4
 800862e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008632:	6993      	ldr	r3, [r2, #24]
 8008634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008638:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800863a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800863e:	d00a      	beq.n	8008656 <HAL_SPI_IRQHandler+0x182>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008640:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008644:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800864e:	6993      	ldr	r3, [r2, #24]
 8008650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008654:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008656:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800865a:	d00a      	beq.n	8008672 <HAL_SPI_IRQHandler+0x19e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800865c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008660:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008662:	f043 0308 	orr.w	r3, r3, #8
 8008666:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800866a:	6993      	ldr	r3, [r2, #24]
 800866c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008670:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008672:	f01a 0f20 	tst.w	sl, #32
 8008676:	d00a      	beq.n	800868e <HAL_SPI_IRQHandler+0x1ba>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008678:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800867c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800867e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008682:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008686:	6993      	ldr	r3, [r2, #24]
 8008688:	f043 0320 	orr.w	r3, r3, #32
 800868c:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800868e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008692:	2b00      	cmp	r3, #0
 8008694:	f43f af6d 	beq.w	8008572 <HAL_SPI_IRQHandler+0x9e>
      __HAL_SPI_DISABLE(hspi);
 8008698:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800869a:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800869e:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80086a0:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80086a4:	f022 0201 	bic.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 80086b0:	f022 0203 	bic.w	r2, r2, #3
 80086b4:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80086b6:	d122      	bne.n	80086fe <HAL_SPI_IRQHandler+0x22a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80086b8:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80086ba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80086bc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80086c0:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80086c2:	b150      	cbz	r0, 80086da <HAL_SPI_IRQHandler+0x206>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80086c4:	4b10      	ldr	r3, [pc, #64]	; (8008708 <HAL_SPI_IRQHandler+0x234>)
 80086c6:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80086c8:	f7fb f830 	bl	800372c <HAL_DMA_Abort_IT>
 80086cc:	b128      	cbz	r0, 80086da <HAL_SPI_IRQHandler+0x206>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80086ce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80086d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80086da:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80086dc:	2800      	cmp	r0, #0
 80086de:	f43f af48 	beq.w	8008572 <HAL_SPI_IRQHandler+0x9e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <HAL_SPI_IRQHandler+0x234>)
 80086e4:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80086e6:	f7fb f821 	bl	800372c <HAL_DMA_Abort_IT>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f43f af41 	beq.w	8008572 <HAL_SPI_IRQHandler+0x9e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80086f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80086f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80086fc:	e739      	b.n	8008572 <HAL_SPI_IRQHandler+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 80086fe:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8008700:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8008702:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008706:	e747      	b.n	8008598 <HAL_SPI_IRQHandler+0xc4>
 8008708:	0800870d 	.word	0x0800870d

0800870c <SPI_DMAAbortOnError>:
{
 800870c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800870e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8008710:	2300      	movs	r3, #0
 8008712:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008716:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800871a:	2301      	movs	r3, #1
 800871c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8008720:	f7ff fed6 	bl	80084d0 <HAL_SPI_ErrorCallback>
}
 8008724:	bd08      	pop	{r3, pc}
	...

08008728 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008728:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800872c:	2b01      	cmp	r3, #1
 800872e:	d133      	bne.n	8008798 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	2302      	movs	r3, #2
 8008732:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008736:	6803      	ldr	r3, [r0, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008740:	4a16      	ldr	r2, [pc, #88]	; (800879c <HAL_TIM_Base_Start_IT+0x74>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d01a      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 8008746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874a:	d017      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 800874c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008750:	4293      	cmp	r3, r2
 8008752:	d013      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 8008754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008758:	4293      	cmp	r3, r2
 800875a:	d00f      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 800875c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008760:	4293      	cmp	r3, r2
 8008762:	d00b      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 8008764:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008768:	4293      	cmp	r3, r2
 800876a:	d007      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 800876c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008770:	4293      	cmp	r3, r2
 8008772:	d003      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x54>
 8008774:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008778:	4293      	cmp	r3, r2
 800877a:	d107      	bne.n	800878c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800877c:	6899      	ldr	r1, [r3, #8]
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <HAL_TIM_Base_Start_IT+0x78>)
 8008780:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008782:	2a06      	cmp	r2, #6
 8008784:	d006      	beq.n	8008794 <HAL_TIM_Base_Start_IT+0x6c>
 8008786:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800878a:	d003      	beq.n	8008794 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	f042 0201 	orr.w	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008794:	2000      	movs	r0, #0
}
 8008796:	4770      	bx	lr
    return HAL_ERROR;
 8008798:	2001      	movs	r0, #1
 800879a:	4770      	bx	lr
 800879c:	40010000 	.word	0x40010000
 80087a0:	00010007 	.word	0x00010007

080087a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80087a4:	4770      	bx	lr

080087a6 <HAL_TIM_IC_CaptureCallback>:
 80087a6:	4770      	bx	lr

080087a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80087a8:	4770      	bx	lr

080087aa <HAL_TIM_TriggerCallback>:
 80087aa:	4770      	bx	lr

080087ac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087ac:	6803      	ldr	r3, [r0, #0]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	0791      	lsls	r1, r2, #30
{
 80087b2:	b510      	push	{r4, lr}
 80087b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087b6:	d50f      	bpl.n	80087d8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	0792      	lsls	r2, r2, #30
 80087bc:	d50c      	bpl.n	80087d8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087be:	f06f 0202 	mvn.w	r2, #2
 80087c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087c4:	2201      	movs	r2, #1
 80087c6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	0799      	lsls	r1, r3, #30
 80087cc:	f000 8085 	beq.w	80088da <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087d0:	f7ff ffe9 	bl	80087a6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d4:	2300      	movs	r3, #0
 80087d6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	0752      	lsls	r2, r2, #29
 80087de:	d510      	bpl.n	8008802 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	0750      	lsls	r0, r2, #29
 80087e4:	d50d      	bpl.n	8008802 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087e6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ee:	2202      	movs	r2, #2
 80087f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80087f8:	d075      	beq.n	80088e6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80087fa:	f7ff ffd4 	bl	80087a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fe:	2300      	movs	r3, #0
 8008800:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	691a      	ldr	r2, [r3, #16]
 8008806:	0711      	lsls	r1, r2, #28
 8008808:	d50f      	bpl.n	800882a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	0712      	lsls	r2, r2, #28
 800880e:	d50c      	bpl.n	800882a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008810:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008814:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008818:	2204      	movs	r2, #4
 800881a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	079b      	lsls	r3, r3, #30
 8008820:	d067      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008822:	f7ff ffc0 	bl	80087a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008826:	2300      	movs	r3, #0
 8008828:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	06d0      	lsls	r0, r2, #27
 8008830:	d510      	bpl.n	8008854 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	06d1      	lsls	r1, r2, #27
 8008836:	d50d      	bpl.n	8008854 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008838:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800883e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008840:	2208      	movs	r2, #8
 8008842:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f413 7f40 	tst.w	r3, #768	; 0x300
 800884a:	d058      	beq.n	80088fe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800884c:	f7ff ffab 	bl	80087a6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008850:	2300      	movs	r3, #0
 8008852:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	07d2      	lsls	r2, r2, #31
 800885a:	d508      	bpl.n	800886e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	07d0      	lsls	r0, r2, #31
 8008860:	d505      	bpl.n	800886e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008862:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008866:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008868:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800886a:	f7f8 fdcb 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	0611      	lsls	r1, r2, #24
 8008874:	d508      	bpl.n	8008888 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	0612      	lsls	r2, r2, #24
 800887a:	d505      	bpl.n	8008888 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800887c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008880:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008882:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008884:	f000 f9e7 	bl	8008c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	05d0      	lsls	r0, r2, #23
 800888e:	d508      	bpl.n	80088a2 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	0611      	lsls	r1, r2, #24
 8008894:	d505      	bpl.n	80088a2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008896:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800889a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800889c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800889e:	f000 f9db 	bl	8008c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	0652      	lsls	r2, r2, #25
 80088a8:	d508      	bpl.n	80088bc <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088aa:	68da      	ldr	r2, [r3, #12]
 80088ac:	0650      	lsls	r0, r2, #25
 80088ae:	d505      	bpl.n	80088bc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80088b8:	f7ff ff77 	bl	80087aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	691a      	ldr	r2, [r3, #16]
 80088c0:	0691      	lsls	r1, r2, #26
 80088c2:	d522      	bpl.n	800890a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	0692      	lsls	r2, r2, #26
 80088c8:	d51f      	bpl.n	800890a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088ca:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088d0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80088d6:	f000 b9bd 	b.w	8008c54 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088da:	f7ff ff63 	bl	80087a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088de:	4620      	mov	r0, r4
 80088e0:	f7ff ff62 	bl	80087a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80088e4:	e776      	b.n	80087d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e6:	f7ff ff5d 	bl	80087a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ea:	4620      	mov	r0, r4
 80088ec:	f7ff ff5c 	bl	80087a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80088f0:	e785      	b.n	80087fe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f2:	f7ff ff57 	bl	80087a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff ff56 	bl	80087a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80088fc:	e793      	b.n	8008826 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fe:	f7ff ff51 	bl	80087a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff ff50 	bl	80087a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8008908:	e7a2      	b.n	8008850 <HAL_TIM_IRQHandler+0xa4>
}
 800890a:	bd10      	pop	{r4, pc}

0800890c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800890c:	4a30      	ldr	r2, [pc, #192]	; (80089d0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800890e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008910:	4290      	cmp	r0, r2
 8008912:	d012      	beq.n	800893a <TIM_Base_SetConfig+0x2e>
 8008914:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008918:	d00f      	beq.n	800893a <TIM_Base_SetConfig+0x2e>
 800891a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800891e:	4290      	cmp	r0, r2
 8008920:	d00b      	beq.n	800893a <TIM_Base_SetConfig+0x2e>
 8008922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008926:	4290      	cmp	r0, r2
 8008928:	d007      	beq.n	800893a <TIM_Base_SetConfig+0x2e>
 800892a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800892e:	4290      	cmp	r0, r2
 8008930:	d003      	beq.n	800893a <TIM_Base_SetConfig+0x2e>
 8008932:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008936:	4290      	cmp	r0, r2
 8008938:	d119      	bne.n	800896e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800893a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800893c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008940:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008942:	4a23      	ldr	r2, [pc, #140]	; (80089d0 <TIM_Base_SetConfig+0xc4>)
 8008944:	4290      	cmp	r0, r2
 8008946:	d01d      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 8008948:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800894c:	d01a      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 800894e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008952:	4290      	cmp	r0, r2
 8008954:	d016      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 8008956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800895a:	4290      	cmp	r0, r2
 800895c:	d012      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 800895e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008962:	4290      	cmp	r0, r2
 8008964:	d00e      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 8008966:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800896a:	4290      	cmp	r0, r2
 800896c:	d00a      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 800896e:	4a19      	ldr	r2, [pc, #100]	; (80089d4 <TIM_Base_SetConfig+0xc8>)
 8008970:	4290      	cmp	r0, r2
 8008972:	d007      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 8008974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008978:	4290      	cmp	r0, r2
 800897a:	d003      	beq.n	8008984 <TIM_Base_SetConfig+0x78>
 800897c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008980:	4290      	cmp	r0, r2
 8008982:	d103      	bne.n	800898c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008988:	68ca      	ldr	r2, [r1, #12]
 800898a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800898c:	694a      	ldr	r2, [r1, #20]
 800898e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008992:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008994:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008996:	688b      	ldr	r3, [r1, #8]
 8008998:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800899a:	680b      	ldr	r3, [r1, #0]
 800899c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <TIM_Base_SetConfig+0xc4>)
 80089a0:	4298      	cmp	r0, r3
 80089a2:	d00f      	beq.n	80089c4 <TIM_Base_SetConfig+0xb8>
 80089a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a8:	4298      	cmp	r0, r3
 80089aa:	d00b      	beq.n	80089c4 <TIM_Base_SetConfig+0xb8>
 80089ac:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80089b0:	4298      	cmp	r0, r3
 80089b2:	d007      	beq.n	80089c4 <TIM_Base_SetConfig+0xb8>
 80089b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b8:	4298      	cmp	r0, r3
 80089ba:	d003      	beq.n	80089c4 <TIM_Base_SetConfig+0xb8>
 80089bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c0:	4298      	cmp	r0, r3
 80089c2:	d101      	bne.n	80089c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089c4:	690b      	ldr	r3, [r1, #16]
 80089c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089c8:	2301      	movs	r3, #1
 80089ca:	6143      	str	r3, [r0, #20]
}
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40010000 	.word	0x40010000
 80089d4:	40014000 	.word	0x40014000

080089d8 <HAL_TIM_Base_Init>:
{
 80089d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80089da:	4604      	mov	r4, r0
 80089dc:	b350      	cbz	r0, 8008a34 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80089de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80089e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089e6:	b91b      	cbnz	r3, 80089f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80089e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80089ec:	f7f9 f944 	bl	8001c78 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089f2:	6820      	ldr	r0, [r4, #0]
 80089f4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80089f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fa:	f7ff ff87 	bl	800890c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089fe:	2301      	movs	r3, #1
  return HAL_OK;
 8008a00:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a02:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008a0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008a0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008a12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008a16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a26:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008a2a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008a34:	2001      	movs	r0, #1
 8008a36:	e7fc      	b.n	8008a32 <HAL_TIM_Base_Init+0x5a>

08008a38 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a38:	4311      	orrs	r1, r2
{
 8008a3a:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8008a3c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a3e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a46:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a48:	6083      	str	r3, [r0, #8]
}
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a50:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
{
 8008a54:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a5a:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a5c:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a5e:	431a      	orrs	r2, r3
  switch (sSlaveConfig->InputTrigger)
 8008a60:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a66:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a6a:	ea42 0204 	orr.w	r2, r2, r4
  htim->Instance->SMCR = tmpsmcr;
 8008a6e:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8008a70:	d060      	beq.n	8008b34 <TIM_SlaveTimer_SetConfig+0xe8>
 8008a72:	d814      	bhi.n	8008a9e <TIM_SlaveTimer_SetConfig+0x52>
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d03d      	beq.n	8008af4 <TIM_SlaveTimer_SetConfig+0xa8>
 8008a78:	d80d      	bhi.n	8008a96 <TIM_SlaveTimer_SetConfig+0x4a>
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d038      	beq.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
 8008a7e:	d805      	bhi.n	8008a8c <TIM_SlaveTimer_SetConfig+0x40>
 8008a80:	f033 0310 	bics.w	r3, r3, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008a84:	bf14      	ite	ne
 8008a86:	2001      	movne	r0, #1
 8008a88:	2000      	moveq	r0, #0
}
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8008a8c:	f1b3 0030 	subs.w	r0, r3, #48	; 0x30
 8008a90:	bf18      	it	ne
 8008a92:	2001      	movne	r0, #1
 8008a94:	e7f9      	b.n	8008a8a <TIM_SlaveTimer_SetConfig+0x3e>
  switch (sSlaveConfig->InputTrigger)
 8008a96:	2b50      	cmp	r3, #80	; 0x50
 8008a98:	d03c      	beq.n	8008b14 <TIM_SlaveTimer_SetConfig+0xc8>
        return HAL_ERROR;
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	e7f5      	b.n	8008a8a <TIM_SlaveTimer_SetConfig+0x3e>
  switch (sSlaveConfig->InputTrigger)
 8008a9e:	2b70      	cmp	r3, #112	; 0x70
 8008aa0:	d021      	beq.n	8008ae6 <TIM_SlaveTimer_SetConfig+0x9a>
 8008aa2:	2b6f      	cmp	r3, #111	; 0x6f
 8008aa4:	d9f9      	bls.n	8008a9a <TIM_SlaveTimer_SetConfig+0x4e>
 8008aa6:	4a2d      	ldr	r2, [pc, #180]	; (8008b5c <TIM_SlaveTimer_SetConfig+0x110>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d021      	beq.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
 8008aac:	d80e      	bhi.n	8008acc <TIM_SlaveTimer_SetConfig+0x80>
 8008aae:	3a30      	subs	r2, #48	; 0x30
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d01d      	beq.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
 8008ab4:	d804      	bhi.n	8008ac0 <TIM_SlaveTimer_SetConfig+0x74>
 8008ab6:	f023 0010 	bic.w	r0, r3, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008aba:	f5b0 1080 	subs.w	r0, r0, #1048576	; 0x100000
 8008abe:	e7e7      	b.n	8008a90 <TIM_SlaveTimer_SetConfig+0x44>
  switch (sSlaveConfig->InputTrigger)
 8008ac0:	4a27      	ldr	r2, [pc, #156]	; (8008b60 <TIM_SlaveTimer_SetConfig+0x114>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d014      	beq.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8008ac6:	4827      	ldr	r0, [pc, #156]	; (8008b64 <TIM_SlaveTimer_SetConfig+0x118>)
 8008ac8:	1a18      	subs	r0, r3, r0
 8008aca:	e007      	b.n	8008adc <TIM_SlaveTimer_SetConfig+0x90>
  switch (sSlaveConfig->InputTrigger)
 8008acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ad0:	d00e      	beq.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
 8008ad2:	d806      	bhi.n	8008ae2 <TIM_SlaveTimer_SetConfig+0x96>
 8008ad4:	f023 0010 	bic.w	r0, r3, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008ad8:	4b23      	ldr	r3, [pc, #140]	; (8008b68 <TIM_SlaveTimer_SetConfig+0x11c>)
 8008ada:	1ac0      	subs	r0, r0, r3
 8008adc:	bf18      	it	ne
 8008ade:	2001      	movne	r0, #1
 8008ae0:	e7d3      	b.n	8008a8a <TIM_SlaveTimer_SetConfig+0x3e>
 8008ae2:	4822      	ldr	r0, [pc, #136]	; (8008b6c <TIM_SlaveTimer_SetConfig+0x120>)
 8008ae4:	e7f0      	b.n	8008ac8 <TIM_SlaveTimer_SetConfig+0x7c>
      TIM_ETR_SetConfig(htim->Instance,
 8008ae6:	690b      	ldr	r3, [r1, #16]
 8008ae8:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8008aec:	f7ff ffa4 	bl	8008a38 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008af0:	2000      	movs	r0, #0
 8008af2:	e7ca      	b.n	8008a8a <TIM_SlaveTimer_SetConfig+0x3e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008af4:	2c05      	cmp	r4, #5
 8008af6:	d0d0      	beq.n	8008a9a <TIM_SlaveTimer_SetConfig+0x4e>
      tmpccer = htim->Instance->CCER;
 8008af8:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008afa:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008afc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008b04:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008b0a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008b0e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008b10:	6202      	str	r2, [r0, #32]
 8008b12:	e7ed      	b.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b14:	688a      	ldr	r2, [r1, #8]
 8008b16:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8008b18:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1a:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b1c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b20:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8008b24:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b26:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b28:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008b32:	e7ec      	b.n	8008b0e <TIM_SlaveTimer_SetConfig+0xc2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b34:	688c      	ldr	r4, [r1, #8]
 8008b36:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b38:	6a01      	ldr	r1, [r0, #32]
 8008b3a:	f021 0110 	bic.w	r1, r1, #16
 8008b3e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b40:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8008b42:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b44:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b4c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b50:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008b54:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008b56:	6203      	str	r3, [r0, #32]
 8008b58:	e7ca      	b.n	8008af0 <TIM_SlaveTimer_SetConfig+0xa4>
 8008b5a:	bf00      	nop
 8008b5c:	00100050 	.word	0x00100050
 8008b60:	00100030 	.word	0x00100030
 8008b64:	00100040 	.word	0x00100040
 8008b68:	00100060 	.word	0x00100060
 8008b6c:	00200010 	.word	0x00200010

08008b70 <HAL_TIM_SlaveConfigSynchro>:
{
 8008b70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008b72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008b76:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	f04f 0302 	mov.w	r3, #2
 8008b7e:	d01c      	beq.n	8008bba <HAL_TIM_SlaveConfigSynchro+0x4a>
 8008b80:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008b82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8008b86:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008b8a:	f7ff ff5f 	bl	8008a4c <TIM_SlaveTimer_SetConfig>
 8008b8e:	b130      	cbz	r0, 8008b9e <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8008b90:	2300      	movs	r3, #0
    return HAL_ERROR;
 8008b92:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 8008b94:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008b98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ba6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bae:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8008bb0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008bb4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8008bb8:	e7f0      	b.n	8008b9c <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 8008bba:	4618      	mov	r0, r3
 8008bbc:	e7ee      	b.n	8008b9c <HAL_TIM_SlaveConfigSynchro+0x2c>
	...

08008bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bc0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	f04f 0302 	mov.w	r3, #2
 8008bcc:	d03d      	beq.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bd2:	4d1f      	ldr	r5, [pc, #124]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 8008bd4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bd6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008bd8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008bda:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bdc:	d003      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008bde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008be2:	42ab      	cmp	r3, r5
 8008be4:	d103      	bne.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bea:	684d      	ldr	r5, [r1, #4]
 8008bec:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bee:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bf0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bf4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf8:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d01a      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c02:	d017      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008c04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d013      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00f      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00b      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008c1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d007      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008c24:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d003      	beq.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8008c2c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d104      	bne.n	8008c3e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c34:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c36:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c3a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c44:	2300      	movs	r3, #0
 8008c46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008c4a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8008c4c:	bd30      	pop	{r4, r5, pc}
 8008c4e:	bf00      	nop
 8008c50:	40010000 	.word	0x40010000

08008c54 <HAL_TIMEx_CommutCallback>:
 8008c54:	4770      	bx	lr

08008c56 <HAL_TIMEx_BreakCallback>:
 8008c56:	4770      	bx	lr

08008c58 <HAL_TIMEx_Break2Callback>:
 8008c58:	4770      	bx	lr

08008c5a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c5a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	e852 3f00 	ldrex	r3, [r2]
 8008c60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008c68:	6802      	ldr	r2, [r0, #0]
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	d1f5      	bne.n	8008c5a <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	f102 0308 	add.w	r3, r2, #8
 8008c72:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	f102 0c08 	add.w	ip, r2, #8
 8008c7e:	e84c 3100 	strex	r1, r3, [ip]
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d1f3      	bne.n	8008c6e <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c86:	2320      	movs	r3, #32
 8008c88:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8008c8c:	4770      	bx	lr
	...

08008c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c90:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	e852 3f00 	ldrex	r3, [r2]
 8008c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008ca0:	6802      	ldr	r2, [r0, #0]
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d1f5      	bne.n	8008c92 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ca6:	4c0f      	ldr	r4, [pc, #60]	; (8008ce4 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	f102 0308 	add.w	r3, r2, #8
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	f102 0c08 	add.w	ip, r2, #8
 8008cb6:	e84c 3100 	strex	r1, r3, [ip]
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d1f4      	bne.n	8008ca8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d107      	bne.n	8008cd4 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	e842 3100 	strex	r1, r3, [r2]
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d1f7      	bne.n	8008cc4 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cde:	6703      	str	r3, [r0, #112]	; 0x70
}
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	effffffe 	.word	0xeffffffe

08008ce8 <HAL_UART_TxCpltCallback>:
 8008ce8:	4770      	bx	lr

08008cea <HAL_UART_RxCpltCallback>:
 8008cea:	4770      	bx	lr

08008cec <HAL_UART_RxHalfCpltCallback>:
 8008cec:	4770      	bx	lr

08008cee <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cee:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008cf0:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008cf2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8008cf6:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008cf8:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008cfc:	6892      	ldr	r2, [r2, #8]
 8008cfe:	0612      	lsls	r2, r2, #24
 8008d00:	d506      	bpl.n	8008d10 <UART_DMAError+0x22>
 8008d02:	2b21      	cmp	r3, #33	; 0x21
 8008d04:	d104      	bne.n	8008d10 <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008d0c:	f7ff ffa5 	bl	8008c5a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d10:	6803      	ldr	r3, [r0, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	065b      	lsls	r3, r3, #25
 8008d16:	d506      	bpl.n	8008d26 <UART_DMAError+0x38>
 8008d18:	2c22      	cmp	r4, #34	; 0x22
 8008d1a:	d104      	bne.n	8008d26 <UART_DMAError+0x38>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d22:	f7ff ffb5 	bl	8008c90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d26:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008d2a:	f043 0310 	orr.w	r3, r3, #16
 8008d2e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d32:	f009 fd71 	bl	8012818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d36:	bd10      	pop	{r4, pc}

08008d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d38:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d42:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d46:	f009 fd67 	bl	8012818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4a:	bd08      	pop	{r3, pc}

08008d4c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d4c:	6803      	ldr	r3, [r0, #0]
{
 8008d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d52:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8008d54:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d58:	6819      	ldr	r1, [r3, #0]
{
 8008d5a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008d5c:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d5e:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8008d60:	d110      	bne.n	8008d84 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d62:	0696      	lsls	r6, r2, #26
 8008d64:	f140 8096 	bpl.w	8008e94 <HAL_UART_IRQHandler+0x148>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d68:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d6c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8008d70:	433e      	orrs	r6, r7
 8008d72:	f000 808f 	beq.w	8008e94 <HAL_UART_IRQHandler+0x148>
      if (huart->RxISR != NULL)
 8008d76:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 8084 	beq.w	8008e86 <HAL_UART_IRQHandler+0x13a>
}
 8008d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d82:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d84:	4ea6      	ldr	r6, [pc, #664]	; (8009020 <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d86:	48a7      	ldr	r0, [pc, #668]	; (8009024 <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d88:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d8a:	4008      	ands	r0, r1
 8008d8c:	4330      	orrs	r0, r6
 8008d8e:	f000 8081 	beq.w	8008e94 <HAL_UART_IRQHandler+0x148>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d92:	07d7      	lsls	r7, r2, #31
 8008d94:	d509      	bpl.n	8008daa <HAL_UART_IRQHandler+0x5e>
 8008d96:	05c8      	lsls	r0, r1, #23
 8008d98:	d507      	bpl.n	8008daa <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d9e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008da2:	f040 0001 	orr.w	r0, r0, #1
 8008da6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008daa:	0797      	lsls	r7, r2, #30
 8008dac:	d509      	bpl.n	8008dc2 <HAL_UART_IRQHandler+0x76>
 8008dae:	07e8      	lsls	r0, r5, #31
 8008db0:	d507      	bpl.n	8008dc2 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008db2:	2002      	movs	r0, #2
 8008db4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008db6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008dba:	f040 0004 	orr.w	r0, r0, #4
 8008dbe:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc2:	0757      	lsls	r7, r2, #29
 8008dc4:	d509      	bpl.n	8008dda <HAL_UART_IRQHandler+0x8e>
 8008dc6:	07e8      	lsls	r0, r5, #31
 8008dc8:	d507      	bpl.n	8008dda <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dca:	2004      	movs	r0, #4
 8008dcc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008dd2:	f040 0002 	orr.w	r0, r0, #2
 8008dd6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dda:	0717      	lsls	r7, r2, #28
 8008ddc:	d50b      	bpl.n	8008df6 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dde:	f001 0020 	and.w	r0, r1, #32
 8008de2:	4330      	orrs	r0, r6
 8008de4:	d007      	beq.n	8008df6 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008de6:	2008      	movs	r0, #8
 8008de8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dea:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008dee:	f040 0008 	orr.w	r0, r0, #8
 8008df2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008df6:	0516      	lsls	r6, r2, #20
 8008df8:	d50a      	bpl.n	8008e10 <HAL_UART_IRQHandler+0xc4>
 8008dfa:	0148      	lsls	r0, r1, #5
 8008dfc:	d508      	bpl.n	8008e10 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dfe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008e02:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e08:	f043 0320 	orr.w	r3, r3, #32
 8008e0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e10:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d036      	beq.n	8008e86 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e18:	0693      	lsls	r3, r2, #26
 8008e1a:	d50a      	bpl.n	8008e32 <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e1c:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e20:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8008e24:	ea51 0305 	orrs.w	r3, r1, r5
 8008e28:	d003      	beq.n	8008e32 <HAL_UART_IRQHandler+0xe6>
        if (huart->RxISR != NULL)
 8008e2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008e2c:	b10b      	cbz	r3, 8008e32 <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e32:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8008e34:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 8008e36:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e3a:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e3c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	431d      	orrs	r5, r3
 8008e46:	d020      	beq.n	8008e8a <HAL_UART_IRQHandler+0x13e>
        UART_EndRxTransfer(huart);
 8008e48:	f7ff ff22 	bl	8008c90 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e4c:	6822      	ldr	r2, [r4, #0]
 8008e4e:	6893      	ldr	r3, [r2, #8]
 8008e50:	065f      	lsls	r7, r3, #25
 8008e52:	d515      	bpl.n	8008e80 <HAL_UART_IRQHandler+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	f102 0308 	add.w	r3, r2, #8
 8008e58:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	f102 0008 	add.w	r0, r2, #8
 8008e64:	e840 3100 	strex	r1, r3, [r0]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d1f3      	bne.n	8008e54 <HAL_UART_IRQHandler+0x108>
          if (huart->hdmarx != NULL)
 8008e6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008e6e:	b138      	cbz	r0, 8008e80 <HAL_UART_IRQHandler+0x134>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e70:	4b6d      	ldr	r3, [pc, #436]	; (8009028 <HAL_UART_IRQHandler+0x2dc>)
 8008e72:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e74:	f7fa fc5a 	bl	800372c <HAL_DMA_Abort_IT>
 8008e78:	b128      	cbz	r0, 8008e86 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e7a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008e7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008e7e:	e77e      	b.n	8008d7e <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8008e80:	4620      	mov	r0, r4
 8008e82:	f009 fcc9 	bl	8012818 <HAL_UART_ErrorCallback>
}
 8008e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8008e8a:	f009 fcc5 	bl	8012818 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e8e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008e92:	e7f8      	b.n	8008e86 <HAL_UART_IRQHandler+0x13a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008e96:	2801      	cmp	r0, #1
 8008e98:	f040 80a8 	bne.w	8008fec <HAL_UART_IRQHandler+0x2a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e9c:	06d6      	lsls	r6, r2, #27
 8008e9e:	f140 80a5 	bpl.w	8008fec <HAL_UART_IRQHandler+0x2a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ea2:	06c8      	lsls	r0, r1, #27
 8008ea4:	f140 80a2 	bpl.w	8008fec <HAL_UART_IRQHandler+0x2a0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	0652      	lsls	r2, r2, #25
 8008eb0:	d56a      	bpl.n	8008f88 <HAL_UART_IRQHandler+0x23c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eb2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008eb4:	485d      	ldr	r0, [pc, #372]	; (800902c <HAL_UART_IRQHandler+0x2e0>)
 8008eb6:	680a      	ldr	r2, [r1, #0]
 8008eb8:	4282      	cmp	r2, r0
 8008eba:	d01e      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ebc:	3018      	adds	r0, #24
 8008ebe:	4282      	cmp	r2, r0
 8008ec0:	d01b      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ec2:	3018      	adds	r0, #24
 8008ec4:	4282      	cmp	r2, r0
 8008ec6:	d018      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ec8:	3018      	adds	r0, #24
 8008eca:	4282      	cmp	r2, r0
 8008ecc:	d015      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ece:	3018      	adds	r0, #24
 8008ed0:	4282      	cmp	r2, r0
 8008ed2:	d012      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ed4:	3018      	adds	r0, #24
 8008ed6:	4282      	cmp	r2, r0
 8008ed8:	d00f      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008eda:	3018      	adds	r0, #24
 8008edc:	4282      	cmp	r2, r0
 8008ede:	d00c      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ee0:	3018      	adds	r0, #24
 8008ee2:	4282      	cmp	r2, r0
 8008ee4:	d009      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ee6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008eea:	4282      	cmp	r2, r0
 8008eec:	d005      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008eee:	3018      	adds	r0, #24
 8008ef0:	4282      	cmp	r2, r0
 8008ef2:	d002      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008ef4:	3018      	adds	r0, #24
 8008ef6:	4282      	cmp	r2, r0
 8008ef8:	d0ff      	beq.n	8008efa <HAL_UART_IRQHandler+0x1ae>
 8008efa:	6852      	ldr	r2, [r2, #4]
 8008efc:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d0c1      	beq.n	8008e86 <HAL_UART_IRQHandler+0x13a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f02:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8008f06:	4290      	cmp	r0, r2
 8008f08:	d9bd      	bls.n	8008e86 <HAL_UART_IRQHandler+0x13a>
        huart->RxXferCount = nb_remaining_rx_data;
 8008f0a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f0e:	69ca      	ldr	r2, [r1, #28]
 8008f10:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008f14:	d02e      	beq.n	8008f74 <HAL_UART_IRQHandler+0x228>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	e843 2100 	strex	r1, r2, [r3]
 8008f22:	2900      	cmp	r1, #0
 8008f24:	d1f7      	bne.n	8008f16 <HAL_UART_IRQHandler+0x1ca>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	f103 0208 	add.w	r2, r3, #8
 8008f2a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	f103 0008 	add.w	r0, r3, #8
 8008f36:	e840 2100 	strex	r1, r2, [r0]
 8008f3a:	2900      	cmp	r1, #0
 8008f3c:	d1f3      	bne.n	8008f26 <HAL_UART_IRQHandler+0x1da>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	f103 0208 	add.w	r2, r3, #8
 8008f42:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	f103 0008 	add.w	r0, r3, #8
 8008f4e:	e840 2100 	strex	r1, r2, [r0]
 8008f52:	2900      	cmp	r1, #0
 8008f54:	d1f3      	bne.n	8008f3e <HAL_UART_IRQHandler+0x1f2>
          huart->RxState = HAL_UART_STATE_READY;
 8008f56:	2220      	movs	r2, #32
 8008f58:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5c:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	e843 2100 	strex	r1, r2, [r3]
 8008f6a:	2900      	cmp	r1, #0
 8008f6c:	d1f7      	bne.n	8008f5e <HAL_UART_IRQHandler+0x212>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f6e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008f70:	f7fa fa36 	bl	80033e0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f74:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008f78:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f7c:	1ac9      	subs	r1, r1, r3
 8008f7e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f80:	4620      	mov	r0, r4
 8008f82:	f009 fc65 	bl	8012850 <HAL_UARTEx_RxEventCallback>
 8008f86:	e77e      	b.n	8008e86 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f88:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008f8c:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8008f8e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008f92:	b289      	uxth	r1, r1
 8008f94:	2900      	cmp	r1, #0
 8008f96:	f43f af76 	beq.w	8008e86 <HAL_UART_IRQHandler+0x13a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f9a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008f9e:	1a89      	subs	r1, r1, r2
 8008fa0:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008fa2:	2900      	cmp	r1, #0
 8008fa4:	f43f af6f 	beq.w	8008e86 <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	e843 2000 	strex	r0, r2, [r3]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1f7      	bne.n	8008fa8 <HAL_UART_IRQHandler+0x25c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fb8:	4d1d      	ldr	r5, [pc, #116]	; (8009030 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	f103 0208 	add.w	r2, r3, #8
 8008fbe:	e852 2f00 	ldrex	r2, [r2]
 8008fc2:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	f103 0608 	add.w	r6, r3, #8
 8008fc8:	e846 2000 	strex	r0, r2, [r6]
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d1f4      	bne.n	8008fba <HAL_UART_IRQHandler+0x26e>
        huart->RxState = HAL_UART_STATE_READY;
 8008fd0:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8008fd2:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd8:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fde:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	e843 2000 	strex	r0, r2, [r3]
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d1f7      	bne.n	8008fda <HAL_UART_IRQHandler+0x28e>
 8008fea:	e7c9      	b.n	8008f80 <HAL_UART_IRQHandler+0x234>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fec:	02d7      	lsls	r7, r2, #11
 8008fee:	d509      	bpl.n	8009004 <HAL_UART_IRQHandler+0x2b8>
 8008ff0:	026e      	lsls	r6, r5, #9
 8008ff2:	d507      	bpl.n	8009004 <HAL_UART_IRQHandler+0x2b8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ff4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008ff8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ffa:	621a      	str	r2, [r3, #32]
}
 8008ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8009000:	f000 bcc2 	b.w	8009988 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009004:	0610      	lsls	r0, r2, #24
 8009006:	d515      	bpl.n	8009034 <HAL_UART_IRQHandler+0x2e8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009008:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800900c:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8009010:	4328      	orrs	r0, r5
 8009012:	d00f      	beq.n	8009034 <HAL_UART_IRQHandler+0x2e8>
    if (huart->TxISR != NULL)
 8009014:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009016:	2b00      	cmp	r3, #0
 8009018:	f43f af35 	beq.w	8008e86 <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 800901c:	4620      	mov	r0, r4
 800901e:	e6ae      	b.n	8008d7e <HAL_UART_IRQHandler+0x32>
 8009020:	10000001 	.word	0x10000001
 8009024:	04000120 	.word	0x04000120
 8009028:	08008d39 	.word	0x08008d39
 800902c:	40020010 	.word	0x40020010
 8009030:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009034:	0657      	lsls	r7, r2, #25
 8009036:	d511      	bpl.n	800905c <HAL_UART_IRQHandler+0x310>
 8009038:	064e      	lsls	r6, r1, #25
 800903a:	d50f      	bpl.n	800905c <HAL_UART_IRQHandler+0x310>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	e843 2100 	strex	r1, r2, [r3]
 8009048:	2900      	cmp	r1, #0
 800904a:	d1f7      	bne.n	800903c <HAL_UART_IRQHandler+0x2f0>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800904c:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800904e:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8009050:	6761      	str	r1, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8009052:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  HAL_UART_TxCpltCallback(huart);
 8009056:	f7ff fe47 	bl	8008ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800905a:	e714      	b.n	8008e86 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800905c:	0215      	lsls	r5, r2, #8
 800905e:	d506      	bpl.n	800906e <HAL_UART_IRQHandler+0x322>
 8009060:	0048      	lsls	r0, r1, #1
 8009062:	d504      	bpl.n	800906e <HAL_UART_IRQHandler+0x322>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009064:	4620      	mov	r0, r4
}
 8009066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800906a:	f000 bc8f 	b.w	800998c <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800906e:	01d3      	lsls	r3, r2, #7
 8009070:	f57f af09 	bpl.w	8008e86 <HAL_UART_IRQHandler+0x13a>
 8009074:	2900      	cmp	r1, #0
 8009076:	f6bf af06 	bge.w	8008e86 <HAL_UART_IRQHandler+0x13a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800907a:	4620      	mov	r0, r4
}
 800907c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009080:	f000 bc83 	b.w	800998a <HAL_UARTEx_RxFifoFullCallback>

08009084 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009084:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8009086:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009088:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800908a:	2b01      	cmp	r3, #1
 800908c:	d105      	bne.n	800909a <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800908e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009092:	0849      	lsrs	r1, r1, #1
 8009094:	f009 fbdc 	bl	8012850 <HAL_UARTEx_RxEventCallback>
}
 8009098:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800909a:	f7ff fe27 	bl	8008cec <HAL_UART_RxHalfCpltCallback>
}
 800909e:	e7fb      	b.n	8009098 <UART_DMARxHalfCplt+0x14>

080090a0 <UART_DMAReceiveCplt>:
{
 80090a0:	b508      	push	{r3, lr}
 80090a2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ac:	d032      	beq.n	8009114 <UART_DMAReceiveCplt+0x74>
    huart->RxXferCount = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	e852 3f00 	ldrex	r3, [r2]
 80090ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80090c2:	6803      	ldr	r3, [r0, #0]
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d1f5      	bne.n	80090b4 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	f103 0208 	add.w	r2, r3, #8
 80090cc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	f103 0c08 	add.w	ip, r3, #8
 80090d8:	e84c 2100 	strex	r1, r2, [ip]
 80090dc:	2900      	cmp	r1, #0
 80090de:	d1f3      	bne.n	80090c8 <UART_DMAReceiveCplt+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	f103 0208 	add.w	r2, r3, #8
 80090e4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	f103 0c08 	add.w	ip, r3, #8
 80090f0:	e84c 2100 	strex	r1, r2, [ip]
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d1f3      	bne.n	80090e0 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 80090f8:	2220      	movs	r2, #32
 80090fa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fe:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8009100:	2a01      	cmp	r2, #1
 8009102:	d107      	bne.n	8009114 <UART_DMAReceiveCplt+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009108:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	e843 2100 	strex	r1, r2, [r3]
 8009110:	2900      	cmp	r1, #0
 8009112:	d1f7      	bne.n	8009104 <UART_DMAReceiveCplt+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d104      	bne.n	8009124 <UART_DMAReceiveCplt+0x84>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800911a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800911e:	f009 fb97 	bl	8012850 <HAL_UARTEx_RxEventCallback>
}
 8009122:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8009124:	f7ff fde1 	bl	8008cea <HAL_UART_RxCpltCallback>
}
 8009128:	e7fb      	b.n	8009122 <UART_DMAReceiveCplt+0x82>
	...

0800912c <UART_SetConfig>:
{
 800912c:	b530      	push	{r4, r5, lr}
 800912e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009130:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009132:	69c0      	ldr	r0, [r0, #28]
{
 8009134:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009136:	6921      	ldr	r1, [r4, #16]
 8009138:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800913a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800913c:	430a      	orrs	r2, r1
 800913e:	6961      	ldr	r1, [r4, #20]
 8009140:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009142:	4997      	ldr	r1, [pc, #604]	; (80093a0 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009144:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009146:	4029      	ands	r1, r5
 8009148:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800914a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800914c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009154:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009156:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009158:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800915a:	4a92      	ldr	r2, [pc, #584]	; (80093a4 <UART_SetConfig+0x278>)
 800915c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800915e:	bf1c      	itt	ne
 8009160:	6a22      	ldrne	r2, [r4, #32]
 8009162:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800916a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800916e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009170:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009172:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	f022 020f 	bic.w	r2, r2, #15
 800917a:	430a      	orrs	r2, r1
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800917e:	4a8a      	ldr	r2, [pc, #552]	; (80093a8 <UART_SetConfig+0x27c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d11b      	bne.n	80091bc <UART_SetConfig+0x90>
 8009184:	4b89      	ldr	r3, [pc, #548]	; (80093ac <UART_SetConfig+0x280>)
 8009186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800918c:	2b28      	cmp	r3, #40	; 0x28
 800918e:	d86c      	bhi.n	800926a <UART_SetConfig+0x13e>
 8009190:	4a87      	ldr	r2, [pc, #540]	; (80093b0 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009192:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009196:	5cd3      	ldrb	r3, [r2, r3]
 8009198:	f040 8132 	bne.w	8009400 <UART_SetConfig+0x2d4>
    switch (clocksource)
 800919c:	2b08      	cmp	r3, #8
 800919e:	f200 80c0 	bhi.w	8009322 <UART_SetConfig+0x1f6>
 80091a2:	2b08      	cmp	r3, #8
 80091a4:	d861      	bhi.n	800926a <UART_SetConfig+0x13e>
 80091a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80091aa:	00e7      	.short	0x00e7
 80091ac:	006000ec 	.word	0x006000ec
 80091b0:	00ef0060 	.word	0x00ef0060
 80091b4:	00600060 	.word	0x00600060
 80091b8:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091bc:	4a7d      	ldr	r2, [pc, #500]	; (80093b4 <UART_SetConfig+0x288>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d107      	bne.n	80091d2 <UART_SetConfig+0xa6>
 80091c2:	4b7a      	ldr	r3, [pc, #488]	; (80093ac <UART_SetConfig+0x280>)
 80091c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	d84d      	bhi.n	800926a <UART_SetConfig+0x13e>
 80091ce:	4a7a      	ldr	r2, [pc, #488]	; (80093b8 <UART_SetConfig+0x28c>)
 80091d0:	e7df      	b.n	8009192 <UART_SetConfig+0x66>
 80091d2:	4a7a      	ldr	r2, [pc, #488]	; (80093bc <UART_SetConfig+0x290>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d107      	bne.n	80091e8 <UART_SetConfig+0xbc>
 80091d8:	4b74      	ldr	r3, [pc, #464]	; (80093ac <UART_SetConfig+0x280>)
 80091da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	2b05      	cmp	r3, #5
 80091e2:	d842      	bhi.n	800926a <UART_SetConfig+0x13e>
 80091e4:	4a76      	ldr	r2, [pc, #472]	; (80093c0 <UART_SetConfig+0x294>)
 80091e6:	e7d4      	b.n	8009192 <UART_SetConfig+0x66>
 80091e8:	4a76      	ldr	r2, [pc, #472]	; (80093c4 <UART_SetConfig+0x298>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d107      	bne.n	80091fe <UART_SetConfig+0xd2>
 80091ee:	4b6f      	ldr	r3, [pc, #444]	; (80093ac <UART_SetConfig+0x280>)
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	2b05      	cmp	r3, #5
 80091f8:	d837      	bhi.n	800926a <UART_SetConfig+0x13e>
 80091fa:	4a73      	ldr	r2, [pc, #460]	; (80093c8 <UART_SetConfig+0x29c>)
 80091fc:	e7c9      	b.n	8009192 <UART_SetConfig+0x66>
 80091fe:	4a73      	ldr	r2, [pc, #460]	; (80093cc <UART_SetConfig+0x2a0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d107      	bne.n	8009214 <UART_SetConfig+0xe8>
 8009204:	4b69      	ldr	r3, [pc, #420]	; (80093ac <UART_SetConfig+0x280>)
 8009206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	2b05      	cmp	r3, #5
 800920e:	d82c      	bhi.n	800926a <UART_SetConfig+0x13e>
 8009210:	4a6f      	ldr	r2, [pc, #444]	; (80093d0 <UART_SetConfig+0x2a4>)
 8009212:	e7be      	b.n	8009192 <UART_SetConfig+0x66>
 8009214:	4a6f      	ldr	r2, [pc, #444]	; (80093d4 <UART_SetConfig+0x2a8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d107      	bne.n	800922a <UART_SetConfig+0xfe>
 800921a:	4b64      	ldr	r3, [pc, #400]	; (80093ac <UART_SetConfig+0x280>)
 800921c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009222:	2b28      	cmp	r3, #40	; 0x28
 8009224:	d821      	bhi.n	800926a <UART_SetConfig+0x13e>
 8009226:	4a6c      	ldr	r2, [pc, #432]	; (80093d8 <UART_SetConfig+0x2ac>)
 8009228:	e7b3      	b.n	8009192 <UART_SetConfig+0x66>
 800922a:	4a6c      	ldr	r2, [pc, #432]	; (80093dc <UART_SetConfig+0x2b0>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d107      	bne.n	8009240 <UART_SetConfig+0x114>
 8009230:	4b5e      	ldr	r3, [pc, #376]	; (80093ac <UART_SetConfig+0x280>)
 8009232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	2b05      	cmp	r3, #5
 800923a:	d816      	bhi.n	800926a <UART_SetConfig+0x13e>
 800923c:	4a68      	ldr	r2, [pc, #416]	; (80093e0 <UART_SetConfig+0x2b4>)
 800923e:	e7a8      	b.n	8009192 <UART_SetConfig+0x66>
 8009240:	4a68      	ldr	r2, [pc, #416]	; (80093e4 <UART_SetConfig+0x2b8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d107      	bne.n	8009256 <UART_SetConfig+0x12a>
 8009246:	4b59      	ldr	r3, [pc, #356]	; (80093ac <UART_SetConfig+0x280>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b05      	cmp	r3, #5
 8009250:	d80b      	bhi.n	800926a <UART_SetConfig+0x13e>
 8009252:	4a65      	ldr	r2, [pc, #404]	; (80093e8 <UART_SetConfig+0x2bc>)
 8009254:	e79d      	b.n	8009192 <UART_SetConfig+0x66>
 8009256:	4a53      	ldr	r2, [pc, #332]	; (80093a4 <UART_SetConfig+0x278>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d106      	bne.n	800926a <UART_SetConfig+0x13e>
 800925c:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8009260:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b05      	cmp	r3, #5
 8009268:	d901      	bls.n	800926e <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800926a:	2001      	movs	r0, #1
 800926c:	e00e      	b.n	800928c <UART_SetConfig+0x160>
 800926e:	495f      	ldr	r1, [pc, #380]	; (80093ec <UART_SetConfig+0x2c0>)
 8009270:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8009272:	2b10      	cmp	r3, #16
 8009274:	d023      	beq.n	80092be <UART_SetConfig+0x192>
 8009276:	d811      	bhi.n	800929c <UART_SetConfig+0x170>
 8009278:	2b04      	cmp	r3, #4
 800927a:	d016      	beq.n	80092aa <UART_SetConfig+0x17e>
 800927c:	2b08      	cmp	r3, #8
 800927e:	d019      	beq.n	80092b4 <UART_SetConfig+0x188>
 8009280:	2b02      	cmp	r3, #2
 8009282:	d1f2      	bne.n	800926a <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009284:	f7fd ff26 	bl	80070d4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8009288:	bb10      	cbnz	r0, 80092d0 <UART_SetConfig+0x1a4>
 800928a:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800928c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009290:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8009292:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8009294:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8009298:	b007      	add	sp, #28
 800929a:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 800929c:	2b20      	cmp	r3, #32
 800929e:	d03e      	beq.n	800931e <UART_SetConfig+0x1f2>
 80092a0:	2b40      	cmp	r3, #64	; 0x40
 80092a2:	d1e2      	bne.n	800926a <UART_SetConfig+0x13e>
 80092a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80092a8:	e012      	b.n	80092d0 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092aa:	4668      	mov	r0, sp
 80092ac:	f7fd ff24 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092b0:	9801      	ldr	r0, [sp, #4]
        break;
 80092b2:	e7e9      	b.n	8009288 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092b4:	a803      	add	r0, sp, #12
 80092b6:	f7fd ffc7 	bl	8007248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092ba:	9804      	ldr	r0, [sp, #16]
        break;
 80092bc:	e7e4      	b.n	8009288 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092be:	6813      	ldr	r3, [r2, #0]
 80092c0:	484b      	ldr	r0, [pc, #300]	; (80093f0 <UART_SetConfig+0x2c4>)
 80092c2:	f013 0f20 	tst.w	r3, #32
 80092c6:	d003      	beq.n	80092d0 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092c8:	6813      	ldr	r3, [r2, #0]
 80092ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092ce:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092d0:	4b48      	ldr	r3, [pc, #288]	; (80093f4 <UART_SetConfig+0x2c8>)
 80092d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092d4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092d6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092de:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092e2:	4299      	cmp	r1, r3
 80092e4:	d8c1      	bhi.n	800926a <UART_SetConfig+0x13e>
 80092e6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80092ea:	d8be      	bhi.n	800926a <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ec:	2300      	movs	r3, #0
 80092ee:	4619      	mov	r1, r3
 80092f0:	f7f7 fa1a 	bl	8000728 <__aeabi_uldivmod>
 80092f4:	462a      	mov	r2, r5
 80092f6:	0209      	lsls	r1, r1, #8
 80092f8:	086b      	lsrs	r3, r5, #1
 80092fa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80092fe:	0200      	lsls	r0, r0, #8
 8009300:	18c0      	adds	r0, r0, r3
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	f141 0100 	adc.w	r1, r1, #0
 800930a:	f7f7 fa0d 	bl	8000728 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800930e:	4b3a      	ldr	r3, [pc, #232]	; (80093f8 <UART_SetConfig+0x2cc>)
 8009310:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009314:	429a      	cmp	r2, r3
 8009316:	d8a8      	bhi.n	800926a <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	60d8      	str	r0, [r3, #12]
 800931c:	e7b5      	b.n	800928a <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 800931e:	4837      	ldr	r0, [pc, #220]	; (80093fc <UART_SetConfig+0x2d0>)
 8009320:	e7d6      	b.n	80092d0 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8009322:	2b20      	cmp	r3, #32
 8009324:	d03a      	beq.n	800939c <UART_SetConfig+0x270>
 8009326:	2b40      	cmp	r3, #64	; 0x40
 8009328:	d00b      	beq.n	8009342 <UART_SetConfig+0x216>
 800932a:	2b10      	cmp	r3, #16
 800932c:	d19d      	bne.n	800926a <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800932e:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <UART_SetConfig+0x280>)
 8009330:	482f      	ldr	r0, [pc, #188]	; (80093f0 <UART_SetConfig+0x2c4>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	f012 0f20 	tst.w	r2, #32
 8009338:	d003      	beq.n	8009342 <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009340:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009342:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009344:	4b2b      	ldr	r3, [pc, #172]	; (80093f4 <UART_SetConfig+0x2c8>)
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800934c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009350:	0850      	lsrs	r0, r2, #1
 8009352:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009356:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800935a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800935e:	f1a0 0210 	sub.w	r2, r0, #16
 8009362:	429a      	cmp	r2, r3
 8009364:	d881      	bhi.n	800926a <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009366:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800936a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800936e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009370:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8009372:	4318      	orrs	r0, r3
 8009374:	60d0      	str	r0, [r2, #12]
 8009376:	e788      	b.n	800928a <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009378:	f7fd f8b8 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800937c:	2800      	cmp	r0, #0
 800937e:	d084      	beq.n	800928a <UART_SetConfig+0x15e>
 8009380:	e7df      	b.n	8009342 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009382:	f7fd f8c5 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
        break;
 8009386:	e7f9      	b.n	800937c <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009388:	4668      	mov	r0, sp
 800938a:	f7fd feb5 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800938e:	9801      	ldr	r0, [sp, #4]
        break;
 8009390:	e7f4      	b.n	800937c <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009392:	a803      	add	r0, sp, #12
 8009394:	f7fd ff58 	bl	8007248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009398:	9804      	ldr	r0, [sp, #16]
        break;
 800939a:	e7ef      	b.n	800937c <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 800939c:	4817      	ldr	r0, [pc, #92]	; (80093fc <UART_SetConfig+0x2d0>)
 800939e:	e7d0      	b.n	8009342 <UART_SetConfig+0x216>
 80093a0:	cfff69f3 	.word	0xcfff69f3
 80093a4:	58000c00 	.word	0x58000c00
 80093a8:	40011000 	.word	0x40011000
 80093ac:	58024400 	.word	0x58024400
 80093b0:	0801ac1c 	.word	0x0801ac1c
 80093b4:	40004400 	.word	0x40004400
 80093b8:	0801ac45 	.word	0x0801ac45
 80093bc:	40004800 	.word	0x40004800
 80093c0:	0801ac45 	.word	0x0801ac45
 80093c4:	40004c00 	.word	0x40004c00
 80093c8:	0801ac45 	.word	0x0801ac45
 80093cc:	40005000 	.word	0x40005000
 80093d0:	0801ac45 	.word	0x0801ac45
 80093d4:	40011400 	.word	0x40011400
 80093d8:	0801ac1c 	.word	0x0801ac1c
 80093dc:	40007800 	.word	0x40007800
 80093e0:	0801ac45 	.word	0x0801ac45
 80093e4:	40007c00 	.word	0x40007c00
 80093e8:	0801ac45 	.word	0x0801ac45
 80093ec:	0801ac4b 	.word	0x0801ac4b
 80093f0:	03d09000 	.word	0x03d09000
 80093f4:	0801ac52 	.word	0x0801ac52
 80093f8:	000ffcff 	.word	0x000ffcff
 80093fc:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8009400:	2b08      	cmp	r3, #8
 8009402:	d817      	bhi.n	8009434 <UART_SetConfig+0x308>
 8009404:	2b08      	cmp	r3, #8
 8009406:	f63f af30 	bhi.w	800926a <UART_SetConfig+0x13e>
 800940a:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <UART_SetConfig+0x2e4>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009477 	.word	0x08009477
 8009414:	08009483 	.word	0x08009483
 8009418:	0800926b 	.word	0x0800926b
 800941c:	0800926b 	.word	0x0800926b
 8009420:	08009489 	.word	0x08009489
 8009424:	0800926b 	.word	0x0800926b
 8009428:	0800926b 	.word	0x0800926b
 800942c:	0800926b 	.word	0x0800926b
 8009430:	08009493 	.word	0x08009493
 8009434:	2b20      	cmp	r3, #32
 8009436:	d031      	beq.n	800949c <UART_SetConfig+0x370>
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	d031      	beq.n	80094a0 <UART_SetConfig+0x374>
 800943c:	2b10      	cmp	r3, #16
 800943e:	f47f af14 	bne.w	800926a <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009442:	4b19      	ldr	r3, [pc, #100]	; (80094a8 <UART_SetConfig+0x37c>)
 8009444:	4819      	ldr	r0, [pc, #100]	; (80094ac <UART_SetConfig+0x380>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	f012 0f20 	tst.w	r2, #32
 800944c:	d003      	beq.n	8009456 <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009454:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009456:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009458:	4a15      	ldr	r2, [pc, #84]	; (80094b0 <UART_SetConfig+0x384>)
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009460:	fbb0 f0f2 	udiv	r0, r0, r2
 8009464:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009468:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800946c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009470:	f1a0 0210 	sub.w	r2, r0, #16
 8009474:	e74e      	b.n	8009314 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009476:	f7fd f839 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800947a:	2800      	cmp	r0, #0
 800947c:	f43f af05 	beq.w	800928a <UART_SetConfig+0x15e>
 8009480:	e7e9      	b.n	8009456 <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009482:	f7fd f845 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
        break;
 8009486:	e7f8      	b.n	800947a <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009488:	4668      	mov	r0, sp
 800948a:	f7fd fe35 	bl	80070f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800948e:	9801      	ldr	r0, [sp, #4]
        break;
 8009490:	e7f3      	b.n	800947a <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009492:	a803      	add	r0, sp, #12
 8009494:	f7fd fed8 	bl	8007248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009498:	9804      	ldr	r0, [sp, #16]
        break;
 800949a:	e7ee      	b.n	800947a <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 800949c:	4805      	ldr	r0, [pc, #20]	; (80094b4 <UART_SetConfig+0x388>)
 800949e:	e7da      	b.n	8009456 <UART_SetConfig+0x32a>
    switch (clocksource)
 80094a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80094a4:	e7d7      	b.n	8009456 <UART_SetConfig+0x32a>
 80094a6:	bf00      	nop
 80094a8:	58024400 	.word	0x58024400
 80094ac:	03d09000 	.word	0x03d09000
 80094b0:	0801ac52 	.word	0x0801ac52
 80094b4:	003d0900 	.word	0x003d0900

080094b8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80094ba:	07da      	lsls	r2, r3, #31
{
 80094bc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094be:	d506      	bpl.n	80094ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094c0:	6801      	ldr	r1, [r0, #0]
 80094c2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80094c4:	684a      	ldr	r2, [r1, #4]
 80094c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80094ca:	4322      	orrs	r2, r4
 80094cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094ce:	079c      	lsls	r4, r3, #30
 80094d0:	d506      	bpl.n	80094e0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094d2:	6801      	ldr	r1, [r0, #0]
 80094d4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80094d6:	684a      	ldr	r2, [r1, #4]
 80094d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094dc:	4322      	orrs	r2, r4
 80094de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094e0:	0759      	lsls	r1, r3, #29
 80094e2:	d506      	bpl.n	80094f2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094e4:	6801      	ldr	r1, [r0, #0]
 80094e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80094e8:	684a      	ldr	r2, [r1, #4]
 80094ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094ee:	4322      	orrs	r2, r4
 80094f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094f2:	071a      	lsls	r2, r3, #28
 80094f4:	d506      	bpl.n	8009504 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094f6:	6801      	ldr	r1, [r0, #0]
 80094f8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80094fa:	684a      	ldr	r2, [r1, #4]
 80094fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009500:	4322      	orrs	r2, r4
 8009502:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009504:	06dc      	lsls	r4, r3, #27
 8009506:	d506      	bpl.n	8009516 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009508:	6801      	ldr	r1, [r0, #0]
 800950a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800950c:	688a      	ldr	r2, [r1, #8]
 800950e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009512:	4322      	orrs	r2, r4
 8009514:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009516:	0699      	lsls	r1, r3, #26
 8009518:	d506      	bpl.n	8009528 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800951a:	6801      	ldr	r1, [r0, #0]
 800951c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800951e:	688a      	ldr	r2, [r1, #8]
 8009520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009524:	4322      	orrs	r2, r4
 8009526:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009528:	065a      	lsls	r2, r3, #25
 800952a:	d510      	bpl.n	800954e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800952c:	6801      	ldr	r1, [r0, #0]
 800952e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009530:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009532:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009536:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800953a:	ea42 0204 	orr.w	r2, r2, r4
 800953e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009540:	d105      	bne.n	800954e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009542:	684a      	ldr	r2, [r1, #4]
 8009544:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009546:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800954a:	4322      	orrs	r2, r4
 800954c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800954e:	061b      	lsls	r3, r3, #24
 8009550:	d506      	bpl.n	8009560 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009552:	6802      	ldr	r2, [r0, #0]
 8009554:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009556:	6853      	ldr	r3, [r2, #4]
 8009558:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800955c:	430b      	orrs	r3, r1
 800955e:	6053      	str	r3, [r2, #4]
}
 8009560:	bd10      	pop	{r4, pc}

08009562 <UART_WaitOnFlagUntilTimeout>:
{
 8009562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009566:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800956a:	4604      	mov	r4, r0
 800956c:	460e      	mov	r6, r1
 800956e:	4615      	mov	r5, r2
 8009570:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	69d3      	ldr	r3, [r2, #28]
 8009576:	ea36 0303 	bics.w	r3, r6, r3
 800957a:	bf0c      	ite	eq
 800957c:	2301      	moveq	r3, #1
 800957e:	2300      	movne	r3, #0
 8009580:	42ab      	cmp	r3, r5
 8009582:	d001      	beq.n	8009588 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8009584:	2000      	movs	r0, #0
 8009586:	e027      	b.n	80095d8 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8009588:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800958c:	d0f2      	beq.n	8009574 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800958e:	f7f8 fd3b 	bl	8002008 <HAL_GetTick>
 8009592:	1bc0      	subs	r0, r0, r7
 8009594:	4540      	cmp	r0, r8
 8009596:	6820      	ldr	r0, [r4, #0]
 8009598:	d802      	bhi.n	80095a0 <UART_WaitOnFlagUntilTimeout+0x3e>
 800959a:	f1b8 0f00 	cmp.w	r8, #0
 800959e:	d11d      	bne.n	80095dc <UART_WaitOnFlagUntilTimeout+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	e840 3200 	strex	r2, r3, [r0]
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	d1f7      	bne.n	80095a0 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	f100 0308 	add.w	r3, r0, #8
 80095b4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	f100 0108 	add.w	r1, r0, #8
 80095c0:	e841 3200 	strex	r2, r3, [r1]
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	d1f3      	bne.n	80095b0 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80095c8:	2320      	movs	r3, #32
 80095ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80095ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 80095d2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80095d4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095dc:	6803      	ldr	r3, [r0, #0]
 80095de:	075a      	lsls	r2, r3, #29
 80095e0:	d5c7      	bpl.n	8009572 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095e2:	69c3      	ldr	r3, [r0, #28]
 80095e4:	051b      	lsls	r3, r3, #20
 80095e6:	d5c4      	bpl.n	8009572 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095ec:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	e840 3200 	strex	r2, r3, [r0]
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d1f7      	bne.n	80095ee <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	f100 0308 	add.w	r3, r0, #8
 8009602:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	f100 0108 	add.w	r1, r0, #8
 800960e:	e841 3200 	strex	r2, r3, [r1]
 8009612:	2a00      	cmp	r2, #0
 8009614:	d1f3      	bne.n	80095fe <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8009616:	2320      	movs	r3, #32
 8009618:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800961c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009620:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009624:	e7d5      	b.n	80095d2 <UART_WaitOnFlagUntilTimeout+0x70>

08009626 <HAL_UART_Transmit>:
{
 8009626:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800962a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800962c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009630:	4604      	mov	r4, r0
 8009632:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8009634:	2b20      	cmp	r3, #32
{
 8009636:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009638:	d150      	bne.n	80096dc <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800963a:	2900      	cmp	r1, #0
 800963c:	d04c      	beq.n	80096d8 <HAL_UART_Transmit+0xb2>
 800963e:	2a00      	cmp	r2, #0
 8009640:	d04a      	beq.n	80096d8 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8009642:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009646:	2b01      	cmp	r3, #1
 8009648:	d048      	beq.n	80096dc <HAL_UART_Transmit+0xb6>
 800964a:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800964e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009652:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009654:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009658:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800965c:	f7f8 fcd4 	bl	8002008 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009660:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8009662:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8009664:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009668:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800966c:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009670:	d103      	bne.n	800967a <HAL_UART_Transmit+0x54>
 8009672:	6922      	ldr	r2, [r4, #16]
 8009674:	b90a      	cbnz	r2, 800967a <HAL_UART_Transmit+0x54>
 8009676:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8009678:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 800967a:	2200      	movs	r2, #0
 800967c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009680:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009684:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8009688:	b292      	uxth	r2, r2
 800968a:	b942      	cbnz	r2, 800969e <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800968c:	2140      	movs	r1, #64	; 0x40
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff ff67 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 8009694:	b958      	cbnz	r0, 80096ae <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8009696:	2320      	movs	r3, #32
 8009698:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800969c:	e008      	b.n	80096b0 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800969e:	2200      	movs	r2, #0
 80096a0:	2180      	movs	r1, #128	; 0x80
 80096a2:	4620      	mov	r0, r4
 80096a4:	9303      	str	r3, [sp, #12]
 80096a6:	f7ff ff5c 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	b118      	cbz	r0, 80096b6 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 80096ae:	2003      	movs	r0, #3
}
 80096b0:	b004      	add	sp, #16
 80096b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096b6:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80096b8:	b95e      	cbnz	r6, 80096d2 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096ba:	f835 2b02 	ldrh.w	r2, [r5], #2
 80096be:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096c2:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80096c4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 80096c8:	3a01      	subs	r2, #1
 80096ca:	b292      	uxth	r2, r2
 80096cc:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 80096d0:	e7d6      	b.n	8009680 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096d2:	f816 2b01 	ldrb.w	r2, [r6], #1
 80096d6:	e7f4      	b.n	80096c2 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 80096d8:	2001      	movs	r0, #1
 80096da:	e7e9      	b.n	80096b0 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80096dc:	2002      	movs	r0, #2
 80096de:	e7e7      	b.n	80096b0 <HAL_UART_Transmit+0x8a>

080096e0 <HAL_UART_Receive>:
{
 80096e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80096e6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80096ea:	4604      	mov	r4, r0
 80096ec:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ee:	2b20      	cmp	r3, #32
{
 80096f0:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80096f2:	d16a      	bne.n	80097ca <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d066      	beq.n	80097c6 <HAL_UART_Receive+0xe6>
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	d064      	beq.n	80097c6 <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 80096fc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009700:	2b01      	cmp	r3, #1
 8009702:	d062      	beq.n	80097ca <HAL_UART_Receive+0xea>
 8009704:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009706:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 800970a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800970e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009710:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009714:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800971c:	f7f8 fc74 	bl	8002008 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8009720:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8009722:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8009724:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800972c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8009730:	d11d      	bne.n	800976e <HAL_UART_Receive+0x8e>
 8009732:	6922      	ldr	r2, [r4, #16]
 8009734:	b9ca      	cbnz	r2, 800976a <HAL_UART_Receive+0x8a>
 8009736:	f240 12ff 	movw	r2, #511	; 0x1ff
 800973a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800973e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8009742:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009746:	d123      	bne.n	8009790 <HAL_UART_Receive+0xb0>
 8009748:	6923      	ldr	r3, [r4, #16]
 800974a:	bb0b      	cbnz	r3, 8009790 <HAL_UART_Receive+0xb0>
 800974c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800974e:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8009750:	2300      	movs	r3, #0
 8009752:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8009756:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800975a:	b290      	uxth	r0, r2
 800975c:	b9d0      	cbnz	r0, 8009794 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 800975e:	2320      	movs	r3, #32
 8009760:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8009764:	b003      	add	sp, #12
 8009766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 800976a:	22ff      	movs	r2, #255	; 0xff
 800976c:	e7e5      	b.n	800973a <HAL_UART_Receive+0x5a>
 800976e:	b923      	cbnz	r3, 800977a <HAL_UART_Receive+0x9a>
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	2a00      	cmp	r2, #0
 8009774:	d0f9      	beq.n	800976a <HAL_UART_Receive+0x8a>
 8009776:	227f      	movs	r2, #127	; 0x7f
 8009778:	e7df      	b.n	800973a <HAL_UART_Receive+0x5a>
 800977a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800977e:	d104      	bne.n	800978a <HAL_UART_Receive+0xaa>
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	2a00      	cmp	r2, #0
 8009784:	d0f7      	beq.n	8009776 <HAL_UART_Receive+0x96>
 8009786:	223f      	movs	r2, #63	; 0x3f
 8009788:	e7d7      	b.n	800973a <HAL_UART_Receive+0x5a>
 800978a:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 800978e:	e7d6      	b.n	800973e <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 8009790:	2600      	movs	r6, #0
 8009792:	e7dd      	b.n	8009750 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009794:	464b      	mov	r3, r9
 8009796:	2200      	movs	r2, #0
 8009798:	2120      	movs	r1, #32
 800979a:	4620      	mov	r0, r4
 800979c:	9700      	str	r7, [sp, #0]
 800979e:	f7ff fee0 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 80097a2:	b9a0      	cbnz	r0, 80097ce <HAL_UART_Receive+0xee>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 80097ac:	b945      	cbnz	r5, 80097c0 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80097ae:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80097b2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80097b6:	3a01      	subs	r2, #1
 80097b8:	b292      	uxth	r2, r2
 80097ba:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80097be:	e7ca      	b.n	8009756 <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80097c0:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 80097c4:	e7f5      	b.n	80097b2 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 80097c6:	2001      	movs	r0, #1
 80097c8:	e7cc      	b.n	8009764 <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 80097ca:	2002      	movs	r0, #2
 80097cc:	e7ca      	b.n	8009764 <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 80097ce:	2003      	movs	r0, #3
 80097d0:	e7c8      	b.n	8009764 <HAL_UART_Receive+0x84>

080097d2 <UART_CheckIdleState>:
{
 80097d2:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d4:	2500      	movs	r5, #0
{
 80097d6:	4604      	mov	r4, r0
 80097d8:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097da:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80097de:	f7f8 fc13 	bl	8002008 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097e2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80097e4:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	0711      	lsls	r1, r2, #28
 80097ea:	d417      	bmi.n	800981c <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097ec:	6822      	ldr	r2, [r4, #0]
 80097ee:	6812      	ldr	r2, [r2, #0]
 80097f0:	0752      	lsls	r2, r2, #29
 80097f2:	d509      	bpl.n	8009808 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097f4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80097f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097fc:	4620      	mov	r0, r4
 80097fe:	9200      	str	r2, [sp, #0]
 8009800:	2200      	movs	r2, #0
 8009802:	f7ff feae 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 8009806:	b9b0      	cbnz	r0, 8009836 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8009808:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800980c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009810:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009814:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009818:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 800981a:	e00d      	b.n	8009838 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800981c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8009820:	9003      	str	r0, [sp, #12]
 8009822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009826:	4620      	mov	r0, r4
 8009828:	9200      	str	r2, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	f7ff fe99 	bl	8009562 <UART_WaitOnFlagUntilTimeout>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	2800      	cmp	r0, #0
 8009834:	d0da      	beq.n	80097ec <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8009836:	2003      	movs	r0, #3
}
 8009838:	b005      	add	sp, #20
 800983a:	bd30      	pop	{r4, r5, pc}

0800983c <HAL_UART_Init>:
{
 800983c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800983e:	4604      	mov	r4, r0
 8009840:	b350      	cbz	r0, 8009898 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009842:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009846:	b91b      	cbnz	r3, 8009850 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8009848:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800984c:	f7f8 fa96 	bl	8001d7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8009850:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009852:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009854:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8009856:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009862:	f7ff fc63 	bl	800912c <UART_SetConfig>
 8009866:	2801      	cmp	r0, #1
 8009868:	d016      	beq.n	8009898 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800986a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800986c:	b113      	cbz	r3, 8009874 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff fe22 	bl	80094b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009874:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8009876:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800987e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009886:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
}
 800988e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8009892:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009894:	f7ff bf9d 	b.w	80097d2 <UART_CheckIdleState>
}
 8009898:	2001      	movs	r0, #1
 800989a:	bd10      	pop	{r4, pc}

0800989c <UART_Start_Receive_DMA>:
{
 800989c:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800989e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a0:	2500      	movs	r5, #0
{
 80098a2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80098a4:	6581      	str	r1, [r0, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a6:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  huart->RxXferSize = Size;
 80098aa:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098ae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 80098b2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80098b4:	b1c0      	cbz	r0, 80098e8 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098b6:	4b20      	ldr	r3, [pc, #128]	; (8009938 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80098b8:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098ba:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098bc:	4b1f      	ldr	r3, [pc, #124]	; (800993c <UART_Start_Receive_DMA+0xa0>)
 80098be:	6403      	str	r3, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098c0:	4b1f      	ldr	r3, [pc, #124]	; (8009940 <UART_Start_Receive_DMA+0xa4>)
    huart->hdmarx->XferAbortCallback = NULL;
 80098c2:	e9c0 3513 	strd	r3, r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80098c6:	4613      	mov	r3, r2
 80098c8:	460a      	mov	r2, r1
 80098ca:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80098ce:	f7f9 fc6b 	bl	80031a8 <HAL_DMA_Start_IT>
 80098d2:	b148      	cbz	r0, 80098e8 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098d4:	2310      	movs	r3, #16
      return HAL_ERROR;
 80098d6:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 80098d8:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      huart->RxState = HAL_UART_STATE_READY;
 80098e0:	2320      	movs	r3, #32
 80098e2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UNLOCK(huart);
 80098e8:	2300      	movs	r3, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80098ea:	6922      	ldr	r2, [r4, #16]
  __HAL_UNLOCK(huart);
 80098ec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	b13a      	cbz	r2, 8009904 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	e843 2100 	strex	r1, r2, [r3]
 8009900:	2900      	cmp	r1, #0
 8009902:	d1f7      	bne.n	80098f4 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	f103 0208 	add.w	r2, r3, #8
 8009908:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	f103 0008 	add.w	r0, r3, #8
 8009914:	e840 2100 	strex	r1, r2, [r0]
 8009918:	2900      	cmp	r1, #0
 800991a:	d1f3      	bne.n	8009904 <UART_Start_Receive_DMA+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	f103 0208 	add.w	r2, r3, #8
 8009920:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	f103 0108 	add.w	r1, r3, #8
 800992c:	e841 2000 	strex	r0, r2, [r1]
 8009930:	2800      	cmp	r0, #0
 8009932:	d1f3      	bne.n	800991c <UART_Start_Receive_DMA+0x80>
 8009934:	e7d7      	b.n	80098e6 <UART_Start_Receive_DMA+0x4a>
 8009936:	bf00      	nop
 8009938:	080090a1 	.word	0x080090a1
 800993c:	08009085 	.word	0x08009085
 8009940:	08008cef 	.word	0x08008cef

08009944 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009944:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8009946:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009948:	b91b      	cbnz	r3, 8009952 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800994a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800994e:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009950:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009952:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009954:	4d0a      	ldr	r5, [pc, #40]	; (8009980 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009956:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009958:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800995a:	4c0a      	ldr	r4, [pc, #40]	; (8009984 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800995c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009960:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009962:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009964:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	fbb3 f3f1 	udiv	r3, r3, r1
 800996c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009970:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009972:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	fbb3 f3f2 	udiv	r3, r3, r2
 800997a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800997e:	e7e7      	b.n	8009950 <UARTEx_SetNbDataToProcess+0xc>
 8009980:	0801ac72 	.word	0x0801ac72
 8009984:	0801ac6a 	.word	0x0801ac6a

08009988 <HAL_UARTEx_WakeupCallback>:
}
 8009988:	4770      	bx	lr

0800998a <HAL_UARTEx_RxFifoFullCallback>:
 800998a:	4770      	bx	lr

0800998c <HAL_UARTEx_TxFifoEmptyCallback>:
 800998c:	4770      	bx	lr

0800998e <HAL_UARTEx_EnableFifoMode>:
{
 800998e:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8009990:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8009994:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8009996:	2b01      	cmp	r3, #1
 8009998:	d01a      	beq.n	80099d0 <HAL_UARTEx_EnableFifoMode+0x42>
 800999a:	2301      	movs	r3, #1
 800999c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80099a0:	2324      	movs	r3, #36	; 0x24
 80099a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a6:	6803      	ldr	r3, [r0, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80099aa:	6819      	ldr	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80099b0:	f021 0101 	bic.w	r1, r1, #1
 80099b4:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80099b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80099ba:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099bc:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 80099be:	f7ff ffc1 	bl	8009944 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80099c2:	2320      	movs	r3, #32
 80099c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80099c8:	2000      	movs	r0, #0
 80099ca:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80099ce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80099d0:	2002      	movs	r0, #2
 80099d2:	e7fc      	b.n	80099ce <HAL_UARTEx_EnableFifoMode+0x40>

080099d4 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80099d4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d014      	beq.n	8009a06 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099dc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80099de:	2324      	movs	r3, #36	; 0x24
 80099e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099e4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80099e6:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099e8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099f6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80099f8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80099fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80099fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8009a02:	4618      	mov	r0, r3
 8009a04:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009a06:	2002      	movs	r0, #2
}
 8009a08:	4770      	bx	lr

08009a0a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009a0a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009a0c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8009a10:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d01b      	beq.n	8009a4e <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8009a16:	2301      	movs	r3, #1
 8009a18:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009a1c:	2324      	movs	r3, #36	; 0x24
 8009a1e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a22:	6803      	ldr	r3, [r0, #0]
 8009a24:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	f022 0201 	bic.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8009a34:	4311      	orrs	r1, r2
 8009a36:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009a38:	f7ff ff84 	bl	8009944 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a3c:	6803      	ldr	r3, [r0, #0]
 8009a3e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009a40:	2320      	movs	r3, #32
 8009a42:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009a46:	2000      	movs	r0, #0
 8009a48:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009a4e:	2002      	movs	r0, #2
 8009a50:	e7fc      	b.n	8009a4c <HAL_UARTEx_SetTxFifoThreshold+0x42>

08009a52 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009a52:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009a54:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8009a58:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d01b      	beq.n	8009a96 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8009a64:	2324      	movs	r3, #36	; 0x24
 8009a66:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a6a:	6803      	ldr	r3, [r0, #0]
 8009a6c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	f022 0201 	bic.w	r2, r2, #1
 8009a74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8009a7c:	4311      	orrs	r1, r2
 8009a7e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009a80:	f7ff ff60 	bl	8009944 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a84:	6803      	ldr	r3, [r0, #0]
 8009a86:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8009a94:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009a96:	2002      	movs	r0, #2
 8009a98:	e7fc      	b.n	8009a94 <HAL_UARTEx_SetRxFifoThreshold+0x42>

08009a9a <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8009a9a:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a9c:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
{
 8009aa0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8009aa2:	2e20      	cmp	r6, #32
 8009aa4:	d120      	bne.n	8009ae8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
    if ((pData == NULL) || (Size == 0U))
 8009aa6:	b909      	cbnz	r1, 8009aac <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
      return HAL_ERROR;
 8009aa8:	2001      	movs	r0, #1
}
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	d0fb      	beq.n	8009aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
    __HAL_LOCK(huart);
 8009ab0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d017      	beq.n	8009ae8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009abe:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009ac0:	f7ff feec 	bl	800989c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d1f0      	bne.n	8009aaa <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d1ec      	bne.n	8009aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ace:	2210      	movs	r2, #16
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	621a      	str	r2, [r3, #32]
 8009ad4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ada:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	e842 3100 	strex	r1, r3, [r2]
 8009ae2:	2900      	cmp	r1, #0
 8009ae4:	d1f7      	bne.n	8009ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x3c>
 8009ae6:	e7e0      	b.n	8009aaa <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    return HAL_BUSY;
 8009ae8:	2002      	movs	r0, #2
 8009aea:	e7de      	b.n	8009aaa <HAL_UARTEx_ReceiveToIdle_DMA+0x10>

08009aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009aec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8009aee:	f000 ff5b 	bl	800a9a8 <vTaskStartScheduler>
  
  return osOK;
}
 8009af2:	2000      	movs	r0, #0
 8009af4:	bd08      	pop	{r3, pc}

08009af6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009af6:	b570      	push	{r4, r5, r6, lr}
 8009af8:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009afa:	6946      	ldr	r6, [r0, #20]
{
 8009afc:	460b      	mov	r3, r1
 8009afe:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b00:	692a      	ldr	r2, [r5, #16]
 8009b02:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8009b06:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b0a:	b176      	cbz	r6, 8009b2a <osThreadCreate+0x34>
 8009b0c:	69ad      	ldr	r5, [r5, #24]
 8009b0e:	b165      	cbz	r5, 8009b2a <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8009b10:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8009b12:	bf14      	ite	ne
 8009b14:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b16:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b18:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8009b1c:	9400      	str	r4, [sp, #0]
 8009b1e:	f000 fe73 	bl	800a808 <xTaskCreateStatic>
 8009b22:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b24:	9805      	ldr	r0, [sp, #20]
}
 8009b26:	b006      	add	sp, #24
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8009b2a:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b2c:	ad05      	add	r5, sp, #20
 8009b2e:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 8009b30:	bf14      	ite	ne
 8009b32:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b34:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b36:	e9cd 4500 	strd	r4, r5, [sp]
 8009b3a:	f000 fe9d 	bl	800a878 <xTaskCreate>
 8009b3e:	2801      	cmp	r0, #1
 8009b40:	d0f0      	beq.n	8009b24 <osThreadCreate+0x2e>
      return NULL;
 8009b42:	2000      	movs	r0, #0
 8009b44:	e7ef      	b.n	8009b26 <osThreadCreate+0x30>

08009b46 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009b46:	2801      	cmp	r0, #1
{
 8009b48:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009b4a:	bf38      	it	cc
 8009b4c:	2001      	movcc	r0, #1
 8009b4e:	f001 f883 	bl	800ac58 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009b52:	2000      	movs	r0, #0
 8009b54:	bd08      	pop	{r3, pc}

08009b56 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009b56:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009b58:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8009b5a:	b109      	cbz	r1, 8009b60 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009b5c:	f000 bb15 	b.w	800a18a <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009b60:	f000 bb28 	b.w	800a1b4 <xQueueCreateMutex>

08009b64 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009b64:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009b66:	2400      	movs	r4, #0
 8009b68:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8009b6a:	b1f0      	cbz	r0, 8009baa <osMutexWait+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b6c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8009b70:	b1ab      	cbz	r3, 8009b9e <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b72:	aa01      	add	r2, sp, #4
 8009b74:	4621      	mov	r1, r4
 8009b76:	f000 fc4e 	bl	800a416 <xQueueReceiveFromISR>
 8009b7a:	2801      	cmp	r0, #1
 8009b7c:	d113      	bne.n	8009ba6 <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009b7e:	9b01      	ldr	r3, [sp, #4]
 8009b80:	b913      	cbnz	r3, 8009b88 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8009b82:	2000      	movs	r0, #0
}
 8009b84:	b002      	add	sp, #8
 8009b86:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8009b88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	e7f1      	b.n	8009b82 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009b9e:	f000 fb77 	bl	800a290 <xQueueSemaphoreTake>
 8009ba2:	2801      	cmp	r0, #1
 8009ba4:	d0ed      	beq.n	8009b82 <osMutexWait+0x1e>
    return osErrorOS;
 8009ba6:	20ff      	movs	r0, #255	; 0xff
 8009ba8:	e7ec      	b.n	8009b84 <osMutexWait+0x20>
    return osErrorParameter;
 8009baa:	2080      	movs	r0, #128	; 0x80
 8009bac:	e7ea      	b.n	8009b84 <osMutexWait+0x20>

08009bae <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009bae:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8009bb0:	2400      	movs	r4, #0
 8009bb2:	9401      	str	r4, [sp, #4]
 8009bb4:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8009bb8:	b1a3      	cbz	r3, 8009be4 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009bba:	a901      	add	r1, sp, #4
 8009bbc:	f000 fb14 	bl	800a1e8 <xQueueGiveFromISR>
 8009bc0:	2801      	cmp	r0, #1
 8009bc2:	d115      	bne.n	8009bf0 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	b913      	cbnz	r3, 8009bce <osMutexRelease+0x20>
  osStatus result = osOK;
 8009bc8:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8009bca:	b002      	add	sp, #8
 8009bcc:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8009bce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	e7f1      	b.n	8009bc8 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009be4:	461a      	mov	r2, r3
 8009be6:	4619      	mov	r1, r3
 8009be8:	f000 fa1c 	bl	800a024 <xQueueGenericSend>
 8009bec:	2801      	cmp	r0, #1
 8009bee:	d0eb      	beq.n	8009bc8 <osMutexRelease+0x1a>
    result = osErrorOS;
 8009bf0:	20ff      	movs	r0, #255	; 0xff
 8009bf2:	e7ea      	b.n	8009bca <osMutexRelease+0x1c>

08009bf4 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8009bfa:	b91c      	cbnz	r4, 8009c04 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8009bfc:	f000 fc6e 	bl	800a4dc <vQueueDelete>

  return osOK;
}
 8009c00:	4620      	mov	r0, r4
 8009c02:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8009c04:	2482      	movs	r4, #130	; 0x82
 8009c06:	e7fb      	b.n	8009c00 <osMutexDelete+0xc>

08009c08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4608      	mov	r0, r1
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	b18b      	cbz	r3, 8009c36 <osSemaphoreCreate+0x2e>
    if (count == 1) {
 8009c12:	2901      	cmp	r1, #1
 8009c14:	d109      	bne.n	8009c2a <osSemaphoreCreate+0x22>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009c16:	2203      	movs	r2, #3
 8009c18:	9200      	str	r2, [sp, #0]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	f000 f953 	bl	8009ec8 <xQueueGenericCreateStatic>
 8009c22:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8009c24:	4620      	mov	r0, r4
 8009c26:	b004      	add	sp, #16
 8009c28:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8009c2a:	461a      	mov	r2, r3
}
 8009c2c:	b004      	add	sp, #16
 8009c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8009c32:	f000 b9b7 	b.w	8009fa4 <xQueueCreateCountingSemaphoreStatic>
    if (count == 1) {
 8009c36:	2901      	cmp	r1, #1
 8009c38:	d10d      	bne.n	8009c56 <osSemaphoreCreate+0x4e>
      vSemaphoreCreateBinary(sema);
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	9303      	str	r3, [sp, #12]
 8009c40:	f000 f98c 	bl	8009f5c <xQueueGenericCreate>
 8009c44:	4604      	mov	r4, r0
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0ec      	beq.n	8009c24 <osSemaphoreCreate+0x1c>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f000 f9e8 	bl	800a024 <xQueueGenericSend>
 8009c54:	e7e6      	b.n	8009c24 <osSemaphoreCreate+0x1c>
}
 8009c56:	b004      	add	sp, #16
 8009c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return xSemaphoreCreateCounting(count, count);
 8009c5c:	f000 b9c4 	b.w	8009fe8 <xQueueCreateCountingSemaphore>

08009c60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009c60:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c62:	2400      	movs	r4, #0
 8009c64:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8009c66:	b1f0      	cbz	r0, 8009ca6 <osSemaphoreWait+0x46>
 8009c68:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8009c6c:	b1ab      	cbz	r3, 8009c9a <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c6e:	aa01      	add	r2, sp, #4
 8009c70:	4621      	mov	r1, r4
 8009c72:	f000 fbd0 	bl	800a416 <xQueueReceiveFromISR>
 8009c76:	2801      	cmp	r0, #1
 8009c78:	d113      	bne.n	8009ca2 <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	b913      	cbnz	r3, 8009c84 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8009c7e:	2000      	movs	r0, #0
}
 8009c80:	b002      	add	sp, #8
 8009c82:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8009c84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	e7f1      	b.n	8009c7e <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009c9a:	f000 faf9 	bl	800a290 <xQueueSemaphoreTake>
 8009c9e:	2801      	cmp	r0, #1
 8009ca0:	d0ed      	beq.n	8009c7e <osSemaphoreWait+0x1e>
    return osErrorOS;
 8009ca2:	20ff      	movs	r0, #255	; 0xff
 8009ca4:	e7ec      	b.n	8009c80 <osSemaphoreWait+0x20>
    return osErrorParameter;
 8009ca6:	2080      	movs	r0, #128	; 0x80
 8009ca8:	e7ea      	b.n	8009c80 <osSemaphoreWait+0x20>

08009caa <osSemaphoreRelease>:
 8009caa:	f7ff bf80 	b.w	8009bae <osMutexRelease>

08009cae <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cae:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb8:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cba:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cc2:	4770      	bx	lr

08009cc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cc8:	4770      	bx	lr

08009cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cca:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ccc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009cce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cd0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cd6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009cd8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009cda:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009cdc:	3301      	adds	r3, #1
 8009cde:	6003      	str	r3, [r0, #0]
}
 8009ce0:	4770      	bx	lr

08009ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ce2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ce4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ce6:	1c63      	adds	r3, r4, #1
 8009ce8:	d10a      	bne.n	8009d00 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cea:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cf0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cf2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cf4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009cf6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009cf8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	6003      	str	r3, [r0, #0]
}
 8009cfe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d00:	f100 0208 	add.w	r2, r0, #8
 8009d04:	4613      	mov	r3, r2
 8009d06:	6852      	ldr	r2, [r2, #4]
 8009d08:	6815      	ldr	r5, [r2, #0]
 8009d0a:	42a5      	cmp	r5, r4
 8009d0c:	d9fa      	bls.n	8009d04 <vListInsert+0x22>
 8009d0e:	e7ed      	b.n	8009cec <vListInsert+0xa>

08009d10 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d10:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d12:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009d16:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d18:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d1a:	6859      	ldr	r1, [r3, #4]
 8009d1c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d1e:	bf08      	it	eq
 8009d20:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d22:	2200      	movs	r2, #0
 8009d24:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	3a01      	subs	r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d2c:	6818      	ldr	r0, [r3, #0]
}
 8009d2e:	4770      	bx	lr

08009d30 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d34:	f001 fa26 	bl	800b184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d38:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009d3a:	f001 fa43 	bl	800b1c4 <vPortExitCritical>

	return xReturn;
}
 8009d3e:	fab4 f084 	clz	r0, r4
 8009d42:	0940      	lsrs	r0, r0, #5
 8009d44:	bd10      	pop	{r4, pc}

08009d46 <prvCopyDataToQueue>:
{
 8009d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d48:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009d4c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d4e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d50:	b952      	cbnz	r2, 8009d68 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d52:	6807      	ldr	r7, [r0, #0]
 8009d54:	bb47      	cbnz	r7, 8009da8 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d56:	6880      	ldr	r0, [r0, #8]
 8009d58:	f001 f8f8 	bl	800af4c <xTaskPriorityDisinherit>
 8009d5c:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d5e:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d60:	3601      	adds	r6, #1
}
 8009d62:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d64:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009d68:	b965      	cbnz	r5, 8009d84 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d6a:	6840      	ldr	r0, [r0, #4]
 8009d6c:	f00c f9e8 	bl	8016140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009d74:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d76:	68a2      	ldr	r2, [r4, #8]
 8009d78:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d7a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d7c:	d3f0      	bcc.n	8009d60 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	6063      	str	r3, [r4, #4]
 8009d82:	e7ed      	b.n	8009d60 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d84:	68c0      	ldr	r0, [r0, #12]
 8009d86:	f00c f9db 	bl	8016140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009d8c:	68e3      	ldr	r3, [r4, #12]
 8009d8e:	4251      	negs	r1, r2
 8009d90:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d92:	6822      	ldr	r2, [r4, #0]
 8009d94:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d96:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d98:	bf3e      	ittt	cc
 8009d9a:	68a3      	ldrcc	r3, [r4, #8]
 8009d9c:	185b      	addcc	r3, r3, r1
 8009d9e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009da0:	2d02      	cmp	r5, #2
 8009da2:	d101      	bne.n	8009da8 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009da4:	b116      	cbz	r6, 8009dac <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8009da6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009da8:	2500      	movs	r5, #0
 8009daa:	e7d9      	b.n	8009d60 <prvCopyDataToQueue+0x1a>
 8009dac:	4635      	mov	r5, r6
 8009dae:	e7d7      	b.n	8009d60 <prvCopyDataToQueue+0x1a>

08009db0 <prvCopyDataFromQueue>:
{
 8009db0:	4603      	mov	r3, r0
 8009db2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009db6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009db8:	b162      	cbz	r2, 8009dd4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dbc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dbe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dc2:	60dc      	str	r4, [r3, #12]
}
 8009dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dc8:	bf24      	itt	cs
 8009dca:	6819      	ldrcs	r1, [r3, #0]
 8009dcc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dce:	68d9      	ldr	r1, [r3, #12]
 8009dd0:	f00c b9b6 	b.w	8016140 <memcpy>
}
 8009dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <prvUnlockQueue>:
{
 8009dda:	b570      	push	{r4, r5, r6, lr}
 8009ddc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009dde:	f001 f9d1 	bl	800b184 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009de2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009de6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009dea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dec:	2d00      	cmp	r5, #0
 8009dee:	dc14      	bgt.n	8009e1a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009df0:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009df2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009dfa:	f001 f9e3 	bl	800b1c4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009dfe:	f001 f9c1 	bl	800b184 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009e02:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009e06:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e08:	2d00      	cmp	r5, #0
 8009e0a:	dc12      	bgt.n	8009e32 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8009e0c:	23ff      	movs	r3, #255	; 0xff
 8009e0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009e16:	f001 b9d5 	b.w	800b1c4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0e7      	beq.n	8009df0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e20:	4630      	mov	r0, r6
 8009e22:	f000 ffa3 	bl	800ad6c <xTaskRemoveFromEventList>
 8009e26:	b108      	cbz	r0, 8009e2c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009e28:	f001 f82e 	bl	800ae88 <vTaskMissedYield>
			--cTxLock;
 8009e2c:	3d01      	subs	r5, #1
 8009e2e:	b26d      	sxtb	r5, r5
 8009e30:	e7dc      	b.n	8009dec <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0e9      	beq.n	8009e0c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 ff97 	bl	800ad6c <xTaskRemoveFromEventList>
 8009e3e:	b108      	cbz	r0, 8009e44 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009e40:	f001 f822 	bl	800ae88 <vTaskMissedYield>
				--cRxLock;
 8009e44:	3d01      	subs	r5, #1
 8009e46:	b26d      	sxtb	r5, r5
 8009e48:	e7de      	b.n	8009e08 <prvUnlockQueue+0x2e>

08009e4a <xQueueGenericReset>:
{
 8009e4a:	b538      	push	{r3, r4, r5, lr}
 8009e4c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009e4e:	4604      	mov	r4, r0
 8009e50:	b940      	cbnz	r0, 8009e64 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	e7fe      	b.n	8009e62 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009e64:	f001 f98e 	bl	800b184 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e6e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e70:	434b      	muls	r3, r1
 8009e72:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e74:	1a5b      	subs	r3, r3, r1
 8009e76:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e78:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e7a:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e7e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e80:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009e82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009e8a:	b9a5      	cbnz	r5, 8009eb6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	b173      	cbz	r3, 8009eae <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e90:	f104 0010 	add.w	r0, r4, #16
 8009e94:	f000 ff6a 	bl	800ad6c <xTaskRemoveFromEventList>
 8009e98:	b148      	cbz	r0, 8009eae <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8009e9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009eae:	f001 f989 	bl	800b1c4 <vPortExitCritical>
}
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009eb6:	f104 0010 	add.w	r0, r4, #16
 8009eba:	f7ff fef8 	bl	8009cae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ebe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ec2:	f7ff fef4 	bl	8009cae <vListInitialise>
 8009ec6:	e7f2      	b.n	8009eae <xQueueGenericReset+0x64>

08009ec8 <xQueueGenericCreateStatic>:
	{
 8009ec8:	b513      	push	{r0, r1, r4, lr}
 8009eca:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ecc:	b940      	cbnz	r0, 8009ee0 <xQueueGenericCreateStatic+0x18>
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	e7fe      	b.n	8009ede <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8009ee0:	b943      	cbnz	r3, 8009ef4 <xQueueGenericCreateStatic+0x2c>
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	e7fe      	b.n	8009ef2 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ef4:	b14a      	cbz	r2, 8009f0a <xQueueGenericCreateStatic+0x42>
 8009ef6:	b991      	cbnz	r1, 8009f1e <xQueueGenericCreateStatic+0x56>
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	e7fe      	b.n	8009f08 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f0a:	b141      	cbz	r1, 8009f1e <xQueueGenericCreateStatic+0x56>
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	e7fe      	b.n	8009f1c <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f1e:	2348      	movs	r3, #72	; 0x48
 8009f20:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	2b48      	cmp	r3, #72	; 0x48
 8009f26:	d008      	beq.n	8009f3a <xQueueGenericCreateStatic+0x72>
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	e7fe      	b.n	8009f38 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	bf08      	it	eq
 8009f3e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f40:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f42:	2301      	movs	r3, #1
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009f4a:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4620      	mov	r0, r4
 8009f52:	f7ff ff7a 	bl	8009e4a <xQueueGenericReset>
	}
 8009f56:	4620      	mov	r0, r4
 8009f58:	b002      	add	sp, #8
 8009f5a:	bd10      	pop	{r4, pc}

08009f5c <xQueueGenericCreate>:
	{
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f60:	4606      	mov	r6, r0
 8009f62:	b940      	cbnz	r0, 8009f76 <xQueueGenericCreate+0x1a>
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	e7fe      	b.n	8009f74 <xQueueGenericCreate+0x18>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f76:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f78:	3048      	adds	r0, #72	; 0x48
 8009f7a:	f001 fa6b 	bl	800b454 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009f7e:	4604      	mov	r4, r0
 8009f80:	b160      	cbz	r0, 8009f9c <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f88:	b155      	cbz	r5, 8009fa0 <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f8a:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4620      	mov	r0, r4
 8009f92:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009f94:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f98:	f7ff ff57 	bl	8009e4a <xQueueGenericReset>
	}
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	e7f4      	b.n	8009f8e <xQueueGenericCreate+0x32>

08009fa4 <xQueueCreateCountingSemaphoreStatic>:
	{
 8009fa4:	b513      	push	{r0, r1, r4, lr}
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009faa:	b940      	cbnz	r0, 8009fbe <xQueueCreateCountingSemaphoreStatic+0x1a>
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	e7fe      	b.n	8009fbc <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fbe:	4288      	cmp	r0, r1
 8009fc0:	d208      	bcs.n	8009fd4 <xQueueCreateCountingSemaphoreStatic+0x30>
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	e7fe      	b.n	8009fd2 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	9200      	str	r2, [sp, #0]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4611      	mov	r1, r2
 8009fdc:	f7ff ff74 	bl	8009ec8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009fe0:	b100      	cbz	r0, 8009fe4 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009fe2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd10      	pop	{r4, pc}

08009fe8 <xQueueCreateCountingSemaphore>:
	{
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009fec:	b940      	cbnz	r0, 800a000 <xQueueCreateCountingSemaphore+0x18>
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	e7fe      	b.n	8009ffe <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a000:	4288      	cmp	r0, r1
 800a002:	d208      	bcs.n	800a016 <xQueueCreateCountingSemaphore+0x2e>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	e7fe      	b.n	800a014 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a016:	2202      	movs	r2, #2
 800a018:	2100      	movs	r1, #0
 800a01a:	f7ff ff9f 	bl	8009f5c <xQueueGenericCreate>
		if( xHandle != NULL )
 800a01e:	b100      	cbz	r0, 800a022 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a020:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a022:	bd10      	pop	{r4, pc}

0800a024 <xQueueGenericSend>:
{
 800a024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a028:	b085      	sub	sp, #20
 800a02a:	4688      	mov	r8, r1
 800a02c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a02e:	4604      	mov	r4, r0
{
 800a030:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a032:	b940      	cbnz	r0, 800a046 <xQueueGenericSend+0x22>
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	e7fe      	b.n	800a044 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a046:	b951      	cbnz	r1, 800a05e <xQueueGenericSend+0x3a>
 800a048:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a04a:	b143      	cbz	r3, 800a05e <xQueueGenericSend+0x3a>
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a05e:	2f02      	cmp	r7, #2
 800a060:	d10b      	bne.n	800a07a <xQueueGenericSend+0x56>
 800a062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a064:	2b01      	cmp	r3, #1
 800a066:	d008      	beq.n	800a07a <xQueueGenericSend+0x56>
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	e7fe      	b.n	800a078 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a07a:	f000 ff0b 	bl	800ae94 <xTaskGetSchedulerState>
 800a07e:	4606      	mov	r6, r0
 800a080:	b950      	cbnz	r0, 800a098 <xQueueGenericSend+0x74>
 800a082:	9b01      	ldr	r3, [sp, #4]
 800a084:	b14b      	cbz	r3, 800a09a <xQueueGenericSend+0x76>
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	e7fe      	b.n	800a096 <xQueueGenericSend+0x72>
 800a098:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	e037      	b.n	800a110 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a0:	9d01      	ldr	r5, [sp, #4]
 800a0a2:	b91d      	cbnz	r5, 800a0ac <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800a0a4:	f001 f88e 	bl	800b1c4 <vPortExitCritical>
			return errQUEUE_FULL;
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	e052      	b.n	800a152 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800a0ac:	b916      	cbnz	r6, 800a0b4 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ae:	a802      	add	r0, sp, #8
 800a0b0:	f000 fea2 	bl	800adf8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a0b4:	f001 f886 	bl	800b1c4 <vPortExitCritical>
		vTaskSuspendAll();
 800a0b8:	f000 fcb8 	bl	800aa2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0bc:	f001 f862 	bl	800b184 <vPortEnterCritical>
 800a0c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0c4:	2bff      	cmp	r3, #255	; 0xff
 800a0c6:	d101      	bne.n	800a0cc <xQueueGenericSend+0xa8>
 800a0c8:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800a0cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a0d0:	2bff      	cmp	r3, #255	; 0xff
 800a0d2:	d101      	bne.n	800a0d8 <xQueueGenericSend+0xb4>
 800a0d4:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800a0d8:	f001 f874 	bl	800b1c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0dc:	a901      	add	r1, sp, #4
 800a0de:	a802      	add	r0, sp, #8
 800a0e0:	f000 fe96 	bl	800ae10 <xTaskCheckForTimeOut>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d14a      	bne.n	800a17e <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0e8:	f001 f84c 	bl	800b184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a0ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d131      	bne.n	800a158 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a0f4:	f001 f866 	bl	800b1c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0f8:	9901      	ldr	r1, [sp, #4]
 800a0fa:	f104 0010 	add.w	r0, r4, #16
 800a0fe:	f000 fe1b 	bl	800ad38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a102:	4620      	mov	r0, r4
 800a104:	f7ff fe69 	bl	8009dda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a108:	f000 fd2e 	bl	800ab68 <xTaskResumeAll>
 800a10c:	b360      	cbz	r0, 800a168 <xQueueGenericSend+0x144>
 800a10e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a110:	f001 f838 	bl	800b184 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a114:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a118:	429a      	cmp	r2, r3
 800a11a:	d301      	bcc.n	800a120 <xQueueGenericSend+0xfc>
 800a11c:	2f02      	cmp	r7, #2
 800a11e:	d1bf      	bne.n	800a0a0 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a120:	463a      	mov	r2, r7
 800a122:	4641      	mov	r1, r8
 800a124:	4620      	mov	r0, r4
 800a126:	f7ff fe0e 	bl	8009d46 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a12c:	b11b      	cbz	r3, 800a136 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a12e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a132:	f000 fe1b 	bl	800ad6c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800a136:	b148      	cbz	r0, 800a14c <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800a138:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a14c:	f001 f83a 	bl	800b1c4 <vPortExitCritical>
				return pdPASS;
 800a150:	2001      	movs	r0, #1
}
 800a152:	b005      	add	sp, #20
 800a154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800a158:	f001 f834 	bl	800b1c4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fe3c 	bl	8009dda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a162:	f000 fd01 	bl	800ab68 <xTaskResumeAll>
 800a166:	e7d2      	b.n	800a10e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800a168:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a16c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a170:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	e7c7      	b.n	800a10e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800a17e:	4620      	mov	r0, r4
 800a180:	f7ff fe2b 	bl	8009dda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a184:	f000 fcf0 	bl	800ab68 <xTaskResumeAll>
 800a188:	e78e      	b.n	800a0a8 <xQueueGenericSend+0x84>

0800a18a <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a18a:	2200      	movs	r2, #0
	{
 800a18c:	460b      	mov	r3, r1
 800a18e:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a190:	4611      	mov	r1, r2
 800a192:	9000      	str	r0, [sp, #0]
 800a194:	2001      	movs	r0, #1
 800a196:	f7ff fe97 	bl	8009ec8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800a19a:	4604      	mov	r4, r0
 800a19c:	b138      	cbz	r0, 800a1ae <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a19e:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1a4:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1a6:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1a8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1aa:	f7ff ff3b 	bl	800a024 <xQueueGenericSend>
	}
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	b002      	add	sp, #8
 800a1b2:	bd10      	pop	{r4, pc}

0800a1b4 <xQueueCreateMutex>:
	{
 800a1b4:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1b6:	2048      	movs	r0, #72	; 0x48
 800a1b8:	f001 f94c 	bl	800b454 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a1bc:	4604      	mov	r4, r0
 800a1be:	b188      	cbz	r0, 800a1e4 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1c0:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800a1c2:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1c4:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1c6:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800a1ca:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ce:	f7ff fe3c 	bl	8009e4a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1da:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1dc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1de:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1e0:	f7ff ff20 	bl	800a024 <xQueueGenericSend>
	}
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}

0800a1e8 <xQueueGiveFromISR>:
{
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	b940      	cbnz	r0, 800a202 <xQueueGiveFromISR+0x1a>
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	e7fe      	b.n	800a200 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a202:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a204:	b143      	cbz	r3, 800a218 <xQueueGiveFromISR+0x30>
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	e7fe      	b.n	800a216 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a218:	6803      	ldr	r3, [r0, #0]
 800a21a:	b953      	cbnz	r3, 800a232 <xQueueGiveFromISR+0x4a>
 800a21c:	6883      	ldr	r3, [r0, #8]
 800a21e:	b143      	cbz	r3, 800a232 <xQueueGiveFromISR+0x4a>
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	e7fe      	b.n	800a230 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a232:	f001 f8bd 	bl	800b3b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a236:	f3ef 8611 	mrs	r6, BASEPRI
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a24a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a24c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a24e:	4293      	cmp	r3, r2
 800a250:	d91c      	bls.n	800a28c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a252:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a256:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800a258:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800a25a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a25c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a25e:	d110      	bne.n	800a282 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a262:	b90b      	cbnz	r3, 800a268 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800a264:	2001      	movs	r0, #1
 800a266:	e009      	b.n	800a27c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a268:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a26c:	f000 fd7e 	bl	800ad6c <xTaskRemoveFromEventList>
 800a270:	2800      	cmp	r0, #0
 800a272:	d0f7      	beq.n	800a264 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800a274:	2d00      	cmp	r5, #0
 800a276:	d0f5      	beq.n	800a264 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a278:	2001      	movs	r0, #1
 800a27a:	6028      	str	r0, [r5, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a27c:	f386 8811 	msr	BASEPRI, r6
}
 800a280:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a282:	3301      	adds	r3, #1
 800a284:	b25b      	sxtb	r3, r3
 800a286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a28a:	e7eb      	b.n	800a264 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800a28c:	2000      	movs	r0, #0
 800a28e:	e7f5      	b.n	800a27c <xQueueGiveFromISR+0x94>

0800a290 <xQueueSemaphoreTake>:
{
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800a294:	4604      	mov	r4, r0
{
 800a296:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a298:	b940      	cbnz	r0, 800a2ac <xQueueSemaphoreTake+0x1c>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	e7fe      	b.n	800a2aa <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2ac:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a2ae:	b145      	cbz	r5, 800a2c2 <xQueueSemaphoreTake+0x32>
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	e7fe      	b.n	800a2c0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2c2:	f000 fde7 	bl	800ae94 <xTaskGetSchedulerState>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	b950      	cbnz	r0, 800a2e0 <xQueueSemaphoreTake+0x50>
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	b15b      	cbz	r3, 800a2e6 <xQueueSemaphoreTake+0x56>
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	e7fe      	b.n	800a2de <xQueueSemaphoreTake+0x4e>
 800a2e0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a2e2:	2700      	movs	r7, #0
 800a2e4:	e053      	b.n	800a38e <xQueueSemaphoreTake+0xfe>
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	e7fb      	b.n	800a2e2 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2ea:	9b01      	ldr	r3, [sp, #4]
 800a2ec:	b963      	cbnz	r3, 800a308 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2ee:	b145      	cbz	r5, 800a302 <xQueueSemaphoreTake+0x72>
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	e7fe      	b.n	800a300 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800a302:	f000 ff5f 	bl	800b1c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a306:	e062      	b.n	800a3ce <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800a308:	b916      	cbnz	r6, 800a310 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a30a:	a802      	add	r0, sp, #8
 800a30c:	f000 fd74 	bl	800adf8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a310:	f000 ff58 	bl	800b1c4 <vPortExitCritical>
		vTaskSuspendAll();
 800a314:	f000 fb8a 	bl	800aa2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a318:	f000 ff34 	bl	800b184 <vPortEnterCritical>
 800a31c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a320:	2bff      	cmp	r3, #255	; 0xff
 800a322:	d101      	bne.n	800a328 <xQueueSemaphoreTake+0x98>
 800a324:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a32c:	2bff      	cmp	r3, #255	; 0xff
 800a32e:	d101      	bne.n	800a334 <xQueueSemaphoreTake+0xa4>
 800a330:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a334:	f000 ff46 	bl	800b1c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a338:	a901      	add	r1, sp, #4
 800a33a:	a802      	add	r0, sp, #8
 800a33c:	f000 fd68 	bl	800ae10 <xTaskCheckForTimeOut>
 800a340:	2800      	cmp	r0, #0
 800a342:	d14d      	bne.n	800a3e0 <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a344:	4620      	mov	r0, r4
 800a346:	f7ff fcf3 	bl	8009d30 <prvIsQueueEmpty>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d042      	beq.n	800a3d4 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	b93b      	cbnz	r3, 800a362 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800a352:	f000 ff17 	bl	800b184 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a356:	68a0      	ldr	r0, [r4, #8]
 800a358:	f000 fdac 	bl	800aeb4 <xTaskPriorityInherit>
 800a35c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a35e:	f000 ff31 	bl	800b1c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a362:	9901      	ldr	r1, [sp, #4]
 800a364:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a368:	f000 fce6 	bl	800ad38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a36c:	4620      	mov	r0, r4
 800a36e:	f7ff fd34 	bl	8009dda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a372:	f000 fbf9 	bl	800ab68 <xTaskResumeAll>
 800a376:	b948      	cbnz	r0, 800a38c <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800a378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a380:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a38e:	f000 fef9 	bl	800b184 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0a8      	beq.n	800a2ea <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a398:	3b01      	subs	r3, #1
 800a39a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	b913      	cbnz	r3, 800a3a6 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a3a0:	f000 fe80 	bl	800b0a4 <pvTaskIncrementMutexHeldCount>
 800a3a4:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	b173      	cbz	r3, 800a3c8 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3aa:	f104 0010 	add.w	r0, r4, #16
 800a3ae:	f000 fcdd 	bl	800ad6c <xTaskRemoveFromEventList>
 800a3b2:	b148      	cbz	r0, 800a3c8 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800a3b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800a3c8:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800a3ca:	f000 fefb 	bl	800b1c4 <vPortExitCritical>
}
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	b005      	add	sp, #20
 800a3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7ff fd00 	bl	8009dda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3da:	f000 fbc5 	bl	800ab68 <xTaskResumeAll>
 800a3de:	e7d5      	b.n	800a38c <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f7ff fcfa 	bl	8009dda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3e6:	f000 fbbf 	bl	800ab68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f7ff fca0 	bl	8009d30 <prvIsQueueEmpty>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d0cb      	beq.n	800a38c <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	d0ea      	beq.n	800a3ce <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800a3f8:	f000 fec4 	bl	800b184 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a3fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3fe:	b119      	cbz	r1, 800a408 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a400:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a408:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800a40a:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a40c:	f000 fdf0 	bl	800aff0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a410:	f000 fed8 	bl	800b1c4 <vPortExitCritical>
 800a414:	e7db      	b.n	800a3ce <xQueueSemaphoreTake+0x13e>

0800a416 <xQueueReceiveFromISR>:
{
 800a416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41a:	4689      	mov	r9, r1
 800a41c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a41e:	4605      	mov	r5, r0
 800a420:	b940      	cbnz	r0, 800a434 <xQueueReceiveFromISR+0x1e>
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	e7fe      	b.n	800a432 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a434:	b951      	cbnz	r1, 800a44c <xQueueReceiveFromISR+0x36>
 800a436:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a438:	b143      	cbz	r3, 800a44c <xQueueReceiveFromISR+0x36>
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	e7fe      	b.n	800a44a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a44c:	f000 ffb0 	bl	800b3b0 <vPortValidateInterruptPriority>
	__asm volatile
 800a450:	f3ef 8711 	mrs	r7, BASEPRI
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a464:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a466:	b31c      	cbz	r4, 800a4b0 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a468:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a46c:	4649      	mov	r1, r9
 800a46e:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a470:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a472:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a474:	f7ff fc9c 	bl	8009db0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a478:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a47a:	1c73      	adds	r3, r6, #1
 800a47c:	d113      	bne.n	800a4a6 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a47e:	692b      	ldr	r3, [r5, #16]
 800a480:	b90b      	cbnz	r3, 800a486 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800a482:	2001      	movs	r0, #1
 800a484:	e00b      	b.n	800a49e <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a486:	f105 0010 	add.w	r0, r5, #16
 800a48a:	f000 fc6f 	bl	800ad6c <xTaskRemoveFromEventList>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d0f7      	beq.n	800a482 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800a492:	f1b8 0f00 	cmp.w	r8, #0
 800a496:	d0f4      	beq.n	800a482 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a498:	2001      	movs	r0, #1
 800a49a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a49e:	f387 8811 	msr	BASEPRI, r7
}
 800a4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4a6:	3601      	adds	r6, #1
 800a4a8:	b276      	sxtb	r6, r6
 800a4aa:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a4ae:	e7e8      	b.n	800a482 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	e7f4      	b.n	800a49e <xQueueReceiveFromISR+0x88>

0800a4b4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4b4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a4b6:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <vQueueUnregisterQueue+0x24>)
	{
 800a4b8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a4ba:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a4be:	684c      	ldr	r4, [r1, #4]
 800a4c0:	4284      	cmp	r4, r0
 800a4c2:	d104      	bne.n	800a4ce <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a4ca:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a4cc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d1f2      	bne.n	800a4ba <vQueueUnregisterQueue+0x6>
 800a4d4:	e7fa      	b.n	800a4cc <vQueueUnregisterQueue+0x18>
 800a4d6:	bf00      	nop
 800a4d8:	24000ed0 	.word	0x24000ed0

0800a4dc <vQueueDelete>:
{
 800a4dc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a4de:	4604      	mov	r4, r0
 800a4e0:	b940      	cbnz	r0, 800a4f4 <vQueueDelete+0x18>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	e7fe      	b.n	800a4f2 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800a4f4:	f7ff ffde 	bl	800a4b4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a4f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a4fc:	b923      	cbnz	r3, 800a508 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800a4fe:	4620      	mov	r0, r4
}
 800a500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a504:	f001 b83e 	b.w	800b584 <vPortFree>
}
 800a508:	bd10      	pop	{r4, pc}
	...

0800a50c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a512:	f000 fe37 	bl	800b184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a516:	4b2f      	ldr	r3, [pc, #188]	; (800a5d4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800a518:	4e2f      	ldr	r6, [pc, #188]	; (800a5d8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	4f2f      	ldr	r7, [pc, #188]	; (800a5dc <prvAddNewTaskToReadyList+0xd0>)
 800a51e:	3201      	adds	r2, #1
 800a520:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a522:	6835      	ldr	r5, [r6, #0]
 800a524:	2d00      	cmp	r5, #0
 800a526:	d14a      	bne.n	800a5be <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a528:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d11f      	bne.n	800a570 <prvAddNewTaskToReadyList+0x64>
 800a530:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a532:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a534:	4640      	mov	r0, r8
 800a536:	f7ff fbba 	bl	8009cae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a53a:	f108 0814 	add.w	r8, r8, #20
 800a53e:	2d07      	cmp	r5, #7
 800a540:	d1f7      	bne.n	800a532 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a542:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a604 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800a546:	4d26      	ldr	r5, [pc, #152]	; (800a5e0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800a548:	4640      	mov	r0, r8
 800a54a:	f7ff fbb0 	bl	8009cae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a54e:	4628      	mov	r0, r5
 800a550:	f7ff fbad 	bl	8009cae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a554:	4823      	ldr	r0, [pc, #140]	; (800a5e4 <prvAddNewTaskToReadyList+0xd8>)
 800a556:	f7ff fbaa 	bl	8009cae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a55a:	4823      	ldr	r0, [pc, #140]	; (800a5e8 <prvAddNewTaskToReadyList+0xdc>)
 800a55c:	f7ff fba7 	bl	8009cae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a560:	4822      	ldr	r0, [pc, #136]	; (800a5ec <prvAddNewTaskToReadyList+0xe0>)
 800a562:	f7ff fba4 	bl	8009cae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a566:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <prvAddNewTaskToReadyList+0xe4>)
 800a568:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a56c:	4b21      	ldr	r3, [pc, #132]	; (800a5f4 <prvAddNewTaskToReadyList+0xe8>)
 800a56e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800a570:	4a21      	ldr	r2, [pc, #132]	; (800a5f8 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800a572:	4922      	ldr	r1, [pc, #136]	; (800a5fc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 800a574:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a576:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800a578:	3301      	adds	r3, #1
 800a57a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a57c:	2301      	movs	r3, #1
 800a57e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a580:	4093      	lsls	r3, r2
 800a582:	4303      	orrs	r3, r0
 800a584:	2014      	movs	r0, #20
 800a586:	600b      	str	r3, [r1, #0]
 800a588:	1d21      	adds	r1, r4, #4
 800a58a:	fb00 7002 	mla	r0, r0, r2, r7
 800a58e:	f7ff fb9c 	bl	8009cca <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a592:	f000 fe17 	bl	800b1c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a596:	4b1a      	ldr	r3, [pc, #104]	; (800a600 <prvAddNewTaskToReadyList+0xf4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	b173      	cbz	r3, 800a5ba <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d209      	bcs.n	800a5ba <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800a5a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
}
 800a5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800a5be:	4b10      	ldr	r3, [pc, #64]	; (800a600 <prvAddNewTaskToReadyList+0xf4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1d4      	bne.n	800a570 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5c6:	6833      	ldr	r3, [r6, #0]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d8cf      	bhi.n	800a570 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800a5d0:	6034      	str	r4, [r6, #0]
 800a5d2:	e7cd      	b.n	800a570 <prvAddNewTaskToReadyList+0x64>
 800a5d4:	24000fa8 	.word	0x24000fa8
 800a5d8:	24000f10 	.word	0x24000f10
 800a5dc:	24000f1c 	.word	0x24000f1c
 800a5e0:	24000fd0 	.word	0x24000fd0
 800a5e4:	24000ff0 	.word	0x24000ff0
 800a5e8:	2400101c 	.word	0x2400101c
 800a5ec:	24001008 	.word	0x24001008
 800a5f0:	24000f14 	.word	0x24000f14
 800a5f4:	24000f18 	.word	0x24000f18
 800a5f8:	24000fb4 	.word	0x24000fb4
 800a5fc:	24000fb8 	.word	0x24000fb8
 800a600:	24001004 	.word	0x24001004
 800a604:	24000fbc 	.word	0x24000fbc

0800a608 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a60a:	4b1a      	ldr	r3, [pc, #104]	; (800a674 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 800a60c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a60e:	4e1a      	ldr	r6, [pc, #104]	; (800a678 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800a610:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800a612:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a614:	6830      	ldr	r0, [r6, #0]
 800a616:	3004      	adds	r0, #4
 800a618:	f7ff fb7a 	bl	8009d10 <uxListRemove>
 800a61c:	b940      	cbnz	r0, 800a630 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a61e:	6832      	ldr	r2, [r6, #0]
 800a620:	4916      	ldr	r1, [pc, #88]	; (800a67c <prvAddCurrentTaskToDelayedList+0x74>)
 800a622:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a624:	2201      	movs	r2, #1
 800a626:	680b      	ldr	r3, [r1, #0]
 800a628:	4082      	lsls	r2, r0
 800a62a:	ea23 0302 	bic.w	r3, r3, r2
 800a62e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a630:	1c63      	adds	r3, r4, #1
 800a632:	d107      	bne.n	800a644 <prvAddCurrentTaskToDelayedList+0x3c>
 800a634:	b137      	cbz	r7, 800a644 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a636:	6831      	ldr	r1, [r6, #0]
 800a638:	4811      	ldr	r0, [pc, #68]	; (800a680 <prvAddCurrentTaskToDelayedList+0x78>)
 800a63a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a63c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a640:	f7ff bb43 	b.w	8009cca <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a644:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a646:	6833      	ldr	r3, [r6, #0]
 800a648:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a64a:	d307      	bcc.n	800a65c <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a64c:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <prvAddCurrentTaskToDelayedList+0x7c>)
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	6831      	ldr	r1, [r6, #0]
}
 800a652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a656:	3104      	adds	r1, #4
 800a658:	f7ff bb43 	b.w	8009ce2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <prvAddCurrentTaskToDelayedList+0x80>)
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	6831      	ldr	r1, [r6, #0]
 800a662:	3104      	adds	r1, #4
 800a664:	f7ff fb3d 	bl	8009ce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a668:	4b08      	ldr	r3, [pc, #32]	; (800a68c <prvAddCurrentTaskToDelayedList+0x84>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	42a2      	cmp	r2, r4
 800a66e:	d900      	bls.n	800a672 <prvAddCurrentTaskToDelayedList+0x6a>
					xNextTaskUnblockTime = xTimeToWake;
 800a670:	601c      	str	r4, [r3, #0]
}
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	24001030 	.word	0x24001030
 800a678:	24000f10 	.word	0x24000f10
 800a67c:	24000fb8 	.word	0x24000fb8
 800a680:	24001008 	.word	0x24001008
 800a684:	24000f18 	.word	0x24000f18
 800a688:	24000f14 	.word	0x24000f14
 800a68c:	24000fe4 	.word	0x24000fe4

0800a690 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a690:	4a06      	ldr	r2, [pc, #24]	; (800a6ac <prvResetNextTaskUnblockTime+0x1c>)
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	6819      	ldr	r1, [r3, #0]
 800a696:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <prvResetNextTaskUnblockTime+0x20>)
 800a698:	b919      	cbnz	r1, 800a6a2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a69a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a69e:	601a      	str	r2, [r3, #0]
}
 800a6a0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a2:	6812      	ldr	r2, [r2, #0]
 800a6a4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6a6:	68d2      	ldr	r2, [r2, #12]
 800a6a8:	6852      	ldr	r2, [r2, #4]
 800a6aa:	e7f8      	b.n	800a69e <prvResetNextTaskUnblockTime+0xe>
 800a6ac:	24000f14 	.word	0x24000f14
 800a6b0:	24000fe4 	.word	0x24000fe4

0800a6b4 <prvDeleteTCB>:
	{
 800a6b4:	b510      	push	{r4, lr}
 800a6b6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6b8:	304c      	adds	r0, #76	; 0x4c
 800a6ba:	f00c fc5b 	bl	8016f74 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6be:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800a6c2:	b93b      	cbnz	r3, 800a6d4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800a6c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a6c6:	f000 ff5d 	bl	800b584 <vPortFree>
				vPortFree( pxTCB );
 800a6ca:	4620      	mov	r0, r4
	}
 800a6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a6d0:	f000 bf58 	b.w	800b584 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d0f8      	beq.n	800a6ca <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d008      	beq.n	800a6ee <prvDeleteTCB+0x3a>
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	e7fe      	b.n	800a6ec <prvDeleteTCB+0x38>
	}
 800a6ee:	bd10      	pop	{r4, pc}

0800a6f0 <prvIdleTask>:
{
 800a6f0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6f2:	4c13      	ldr	r4, [pc, #76]	; (800a740 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f4:	4f13      	ldr	r7, [pc, #76]	; (800a744 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800a6f6:	4d14      	ldr	r5, [pc, #80]	; (800a748 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	b973      	cbnz	r3, 800a71a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6fc:	4b13      	ldr	r3, [pc, #76]	; (800a74c <prvIdleTask+0x5c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d9f8      	bls.n	800a6f6 <prvIdleTask+0x6>
				taskYIELD();
 800a704:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	e7ed      	b.n	800a6f6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800a71a:	f000 fd33 	bl	800b184 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a722:	1d30      	adds	r0, r6, #4
 800a724:	f7ff faf4 	bl	8009d10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	3b01      	subs	r3, #1
 800a732:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a734:	f000 fd46 	bl	800b1c4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a738:	4630      	mov	r0, r6
 800a73a:	f7ff ffbb 	bl	800a6b4 <prvDeleteTCB>
 800a73e:	e7db      	b.n	800a6f8 <prvIdleTask+0x8>
 800a740:	24000fac 	.word	0x24000fac
 800a744:	2400101c 	.word	0x2400101c
 800a748:	24000fa8 	.word	0x24000fa8
 800a74c:	24000f1c 	.word	0x24000f1c

0800a750 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a754:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a758:	4607      	mov	r7, r0
 800a75a:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a75c:	3a01      	subs	r2, #1
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a75e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a762:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800a764:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a768:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800a76c:	2900      	cmp	r1, #0
 800a76e:	d041      	beq.n	800a7f4 <prvInitialiseNewTask.constprop.0+0xa4>
 800a770:	1e4b      	subs	r3, r1, #1
 800a772:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800a776:	f101 050f 	add.w	r5, r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a77a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a77e:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800a782:	b109      	cbz	r1, 800a788 <prvInitialiseNewTask.constprop.0+0x38>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a784:	42ab      	cmp	r3, r5
 800a786:	d1f8      	bne.n	800a77a <prvInitialiseNewTask.constprop.0+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a788:	2300      	movs	r3, #0
 800a78a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a78e:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800a790:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a794:	1d20      	adds	r0, r4, #4
 800a796:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800a798:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 800a79c:	bf28      	it	cs
 800a79e:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800a7a0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a7a2:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7a8:	f7ff fa8c 	bl	8009cc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7ac:	f104 0018 	add.w	r0, r4, #24
 800a7b0:	f7ff fa88 	bl	8009cc4 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7b4:	2260      	movs	r2, #96	; 0x60
 800a7b6:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800a7b8:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7bc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7c0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7c6:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7ca:	f00b fce1 	bl	8016190 <memset>
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7d0:	464a      	mov	r2, r9
 800a7d2:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7d4:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7d6:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7d8:	4b09      	ldr	r3, [pc, #36]	; (800a800 <prvInitialiseNewTask.constprop.0+0xb0>)
 800a7da:	6563      	str	r3, [r4, #84]	; 0x54
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <prvInitialiseNewTask.constprop.0+0xb4>)
 800a7de:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7e0:	f000 fcaa 	bl	800b138 <pxPortInitialiseStack>
 800a7e4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	d001      	beq.n	800a7f0 <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7ec:	f8c8 4000 	str.w	r4, [r8]
}
 800a7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7f4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800a7f8:	e7c9      	b.n	800a78e <prvInitialiseNewTask.constprop.0+0x3e>
 800a7fa:	bf00      	nop
 800a7fc:	0801e0cc 	.word	0x0801e0cc
 800a800:	0801e0ec 	.word	0x0801e0ec
 800a804:	0801e0ac 	.word	0x0801e0ac

0800a808 <xTaskCreateStatic>:
	{
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a810:	b945      	cbnz	r5, 800a824 <xTaskCreateStatic+0x1c>
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	e7fe      	b.n	800a822 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a824:	b944      	cbnz	r4, 800a838 <xTaskCreateStatic+0x30>
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	e7fe      	b.n	800a836 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a838:	26b4      	movs	r6, #180	; 0xb4
 800a83a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a83c:	9e05      	ldr	r6, [sp, #20]
 800a83e:	2eb4      	cmp	r6, #180	; 0xb4
 800a840:	d008      	beq.n	800a854 <xTaskCreateStatic+0x4c>
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	e7fe      	b.n	800a852 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a854:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a856:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a858:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a85a:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a85e:	ad04      	add	r5, sp, #16
 800a860:	9402      	str	r4, [sp, #8]
 800a862:	9501      	str	r5, [sp, #4]
 800a864:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a866:	9500      	str	r5, [sp, #0]
 800a868:	f7ff ff72 	bl	800a750 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7ff fe4d 	bl	800a50c <prvAddNewTaskToReadyList>
	}
 800a872:	9804      	ldr	r0, [sp, #16]
 800a874:	b006      	add	sp, #24
 800a876:	bd70      	pop	{r4, r5, r6, pc}

0800a878 <xTaskCreate>:
	{
 800a878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a87c:	4607      	mov	r7, r0
 800a87e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a880:	0090      	lsls	r0, r2, #2
	{
 800a882:	4688      	mov	r8, r1
 800a884:	4616      	mov	r6, r2
 800a886:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a888:	f000 fde4 	bl	800b454 <pvPortMalloc>
			if( pxStack != NULL )
 800a88c:	4605      	mov	r5, r0
 800a88e:	b1e8      	cbz	r0, 800a8cc <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a890:	20b4      	movs	r0, #180	; 0xb4
 800a892:	f000 fddf 	bl	800b454 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a896:	4604      	mov	r4, r0
 800a898:	b1a8      	cbz	r0, 800a8c6 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a89a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800a89c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a89e:	4632      	mov	r2, r6
 800a8a0:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8a2:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8a8:	9002      	str	r0, [sp, #8]
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	f7ff ff4c 	bl	800a750 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7ff fe27 	bl	800a50c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8be:	2001      	movs	r0, #1
	}
 800a8c0:	b005      	add	sp, #20
 800a8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 fe5c 	bl	800b584 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800a8d0:	e7f6      	b.n	800a8c0 <xTaskCreate+0x48>
	...

0800a8d4 <vTaskDelete>:
	{
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4d2a      	ldr	r5, [pc, #168]	; (800a984 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 800a8da:	f000 fc53 	bl	800b184 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a8de:	b904      	cbnz	r4, 800a8e2 <vTaskDelete+0xe>
 800a8e0:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8e2:	1d26      	adds	r6, r4, #4
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f7ff fa13 	bl	8009d10 <uxListRemove>
 800a8ea:	b960      	cbnz	r0, 800a906 <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a8ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a8ee:	2014      	movs	r0, #20
 800a8f0:	4b25      	ldr	r3, [pc, #148]	; (800a988 <vTaskDelete+0xb4>)
 800a8f2:	4378      	muls	r0, r7
 800a8f4:	581b      	ldr	r3, [r3, r0]
 800a8f6:	b933      	cbnz	r3, 800a906 <vTaskDelete+0x32>
 800a8f8:	4924      	ldr	r1, [pc, #144]	; (800a98c <vTaskDelete+0xb8>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	680b      	ldr	r3, [r1, #0]
 800a8fe:	40ba      	lsls	r2, r7
 800a900:	ea23 0302 	bic.w	r3, r3, r2
 800a904:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a908:	b11b      	cbz	r3, 800a912 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a90a:	f104 0018 	add.w	r0, r4, #24
 800a90e:	f7ff f9ff 	bl	8009d10 <uxListRemove>
			uxTaskNumber++;
 800a912:	4a1f      	ldr	r2, [pc, #124]	; (800a990 <vTaskDelete+0xbc>)
 800a914:	6813      	ldr	r3, [r2, #0]
 800a916:	3301      	adds	r3, #1
 800a918:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d11b      	bne.n	800a958 <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a920:	4631      	mov	r1, r6
 800a922:	481c      	ldr	r0, [pc, #112]	; (800a994 <vTaskDelete+0xc0>)
 800a924:	f7ff f9d1 	bl	8009cca <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800a928:	4a1b      	ldr	r2, [pc, #108]	; (800a998 <vTaskDelete+0xc4>)
 800a92a:	6813      	ldr	r3, [r2, #0]
 800a92c:	3301      	adds	r3, #1
 800a92e:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 800a930:	f000 fc48 	bl	800b1c4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800a934:	4b19      	ldr	r3, [pc, #100]	; (800a99c <vTaskDelete+0xc8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	b313      	cbz	r3, 800a980 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	d11f      	bne.n	800a980 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 800a940:	4b17      	ldr	r3, [pc, #92]	; (800a9a0 <vTaskDelete+0xcc>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	b193      	cbz	r3, 800a96c <vTaskDelete+0x98>
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	e7fe      	b.n	800a956 <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 800a958:	4a12      	ldr	r2, [pc, #72]	; (800a9a4 <vTaskDelete+0xd0>)
				prvDeleteTCB( pxTCB );
 800a95a:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 800a95c:	6813      	ldr	r3, [r2, #0]
 800a95e:	3b01      	subs	r3, #1
 800a960:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a962:	f7ff fea7 	bl	800a6b4 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800a966:	f7ff fe93 	bl	800a690 <prvResetNextTaskUnblockTime>
 800a96a:	e7e1      	b.n	800a930 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 800a96c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a974:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
	}
 800a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a982:	bf00      	nop
 800a984:	24000f10 	.word	0x24000f10
 800a988:	24000f1c 	.word	0x24000f1c
 800a98c:	24000fb8 	.word	0x24000fb8
 800a990:	24000fb4 	.word	0x24000fb4
 800a994:	2400101c 	.word	0x2400101c
 800a998:	24000fac 	.word	0x24000fac
 800a99c:	24001004 	.word	0x24001004
 800a9a0:	24000fb0 	.word	0x24000fb0
 800a9a4:	24000fa8 	.word	0x24000fa8

0800a9a8 <vTaskStartScheduler>:
{
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9ac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ae:	aa07      	add	r2, sp, #28
 800a9b0:	a906      	add	r1, sp, #24
 800a9b2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9b8:	f7f6 fa96 	bl	8000ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9bc:	9b05      	ldr	r3, [sp, #20]
 800a9be:	9a07      	ldr	r2, [sp, #28]
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	9b06      	ldr	r3, [sp, #24]
 800a9c4:	4912      	ldr	r1, [pc, #72]	; (800aa10 <vTaskStartScheduler+0x68>)
 800a9c6:	4813      	ldr	r0, [pc, #76]	; (800aa14 <vTaskStartScheduler+0x6c>)
 800a9c8:	e9cd 4300 	strd	r4, r3, [sp]
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	f7ff ff1b 	bl	800a808 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a9d2:	b1d0      	cbz	r0, 800aa0a <vTaskStartScheduler+0x62>
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <vTaskStartScheduler+0x70>)
 800a9e6:	4a0d      	ldr	r2, [pc, #52]	; (800aa1c <vTaskStartScheduler+0x74>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	334c      	adds	r3, #76	; 0x4c
 800a9ec:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <vTaskStartScheduler+0x78>)
 800a9f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <vTaskStartScheduler+0x7c>)
 800a9fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <vTaskStartScheduler+0x80>)
 800a9fe:	601c      	str	r4, [r3, #0]
}
 800aa00:	b008      	add	sp, #32
 800aa02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800aa06:	f000 bc4d 	b.w	800b2a4 <xPortStartScheduler>
}
 800aa0a:	b008      	add	sp, #32
 800aa0c:	bd10      	pop	{r4, pc}
 800aa0e:	bf00      	nop
 800aa10:	0801ac7a 	.word	0x0801ac7a
 800aa14:	0800a6f1 	.word	0x0800a6f1
 800aa18:	24000f10 	.word	0x24000f10
 800aa1c:	240000b8 	.word	0x240000b8
 800aa20:	24000fe4 	.word	0x24000fe4
 800aa24:	24001004 	.word	0x24001004
 800aa28:	24001030 	.word	0x24001030

0800aa2c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800aa2c:	4a02      	ldr	r2, [pc, #8]	; (800aa38 <vTaskSuspendAll+0xc>)
 800aa2e:	6813      	ldr	r3, [r2, #0]
 800aa30:	3301      	adds	r3, #1
 800aa32:	6013      	str	r3, [r2, #0]
}
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	24000fb0 	.word	0x24000fb0

0800aa3c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa3c:	4b3f      	ldr	r3, [pc, #252]	; (800ab3c <xTaskIncrementTick+0x100>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
{
 800aa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d173      	bne.n	800ab30 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa48:	4b3d      	ldr	r3, [pc, #244]	; (800ab40 <xTaskIncrementTick+0x104>)
 800aa4a:	681d      	ldr	r5, [r3, #0]
 800aa4c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800aa4e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa50:	b9bd      	cbnz	r5, 800aa82 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800aa52:	4b3c      	ldr	r3, [pc, #240]	; (800ab44 <xTaskIncrementTick+0x108>)
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	6812      	ldr	r2, [r2, #0]
 800aa58:	b142      	cbz	r2, 800aa6c <xTaskIncrementTick+0x30>
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	e7fe      	b.n	800aa6a <xTaskIncrementTick+0x2e>
 800aa6c:	4a36      	ldr	r2, [pc, #216]	; (800ab48 <xTaskIncrementTick+0x10c>)
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	6810      	ldr	r0, [r2, #0]
 800aa72:	6018      	str	r0, [r3, #0]
 800aa74:	6011      	str	r1, [r2, #0]
 800aa76:	4a35      	ldr	r2, [pc, #212]	; (800ab4c <xTaskIncrementTick+0x110>)
 800aa78:	6813      	ldr	r3, [r2, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	f7ff fe07 	bl	800a690 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa82:	4e33      	ldr	r6, [pc, #204]	; (800ab50 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800aa84:	2400      	movs	r4, #0
 800aa86:	4f33      	ldr	r7, [pc, #204]	; (800ab54 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa88:	6833      	ldr	r3, [r6, #0]
 800aa8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800ab60 <xTaskIncrementTick+0x124>
 800aa8e:	429d      	cmp	r5, r3
 800aa90:	d211      	bcs.n	800aab6 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa92:	f8d8 3000 	ldr.w	r3, [r8]
 800aa96:	2214      	movs	r2, #20
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	4353      	muls	r3, r2
 800aa9c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800aa9e:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800aaa0:	4b2d      	ldr	r3, [pc, #180]	; (800ab58 <xTaskIncrementTick+0x11c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800aaa4:	bf28      	it	cs
 800aaa6:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bf18      	it	ne
 800aaac:	2401      	movne	r4, #1
}
 800aaae:	4620      	mov	r0, r4
 800aab0:	b003      	add	sp, #12
 800aab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aab6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800ab44 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800aaba:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800ab64 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aabe:	f8da 3000 	ldr.w	r3, [sl]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	b91b      	cbnz	r3, 800aace <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaca:	6033      	str	r3, [r6, #0]
					break;
 800aacc:	e7e1      	b.n	800aa92 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aace:	f8da 3000 	ldr.w	r3, [sl]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aad8:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800aadc:	4295      	cmp	r5, r2
 800aade:	d201      	bcs.n	800aae4 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800aae0:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aae2:	e7d6      	b.n	800aa92 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aae4:	f10b 0104 	add.w	r1, fp, #4
 800aae8:	4608      	mov	r0, r1
 800aaea:	9101      	str	r1, [sp, #4]
 800aaec:	f7ff f910 	bl	8009d10 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aaf0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800aaf4:	9901      	ldr	r1, [sp, #4]
 800aaf6:	b122      	cbz	r2, 800ab02 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaf8:	f10b 0018 	add.w	r0, fp, #24
 800aafc:	f7ff f908 	bl	8009d10 <uxListRemove>
 800ab00:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800ab02:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800ab06:	2201      	movs	r2, #1
 800ab08:	f8d9 3000 	ldr.w	r3, [r9]
 800ab0c:	4082      	lsls	r2, r0
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	f8c9 2000 	str.w	r2, [r9]
 800ab14:	2214      	movs	r2, #20
 800ab16:	fb02 7000 	mla	r0, r2, r0, r7
 800ab1a:	f7ff f8d6 	bl	8009cca <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab1e:	f8d8 1000 	ldr.w	r1, [r8]
 800ab22:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ab26:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	bf28      	it	cs
 800ab2c:	2401      	movcs	r4, #1
 800ab2e:	e7c6      	b.n	800aabe <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800ab30:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800ab32:	2400      	movs	r4, #0
		++xPendedTicks;
 800ab34:	6813      	ldr	r3, [r2, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800ab3a:	e7b8      	b.n	800aaae <xTaskIncrementTick+0x72>
 800ab3c:	24000fb0 	.word	0x24000fb0
 800ab40:	24001030 	.word	0x24001030
 800ab44:	24000f14 	.word	0x24000f14
 800ab48:	24000f18 	.word	0x24000f18
 800ab4c:	24000fe8 	.word	0x24000fe8
 800ab50:	24000fe4 	.word	0x24000fe4
 800ab54:	24000f1c 	.word	0x24000f1c
 800ab58:	24001034 	.word	0x24001034
 800ab5c:	24000fec 	.word	0x24000fec
 800ab60:	24000f10 	.word	0x24000f10
 800ab64:	24000fb8 	.word	0x24000fb8

0800ab68 <xTaskResumeAll>:
{
 800ab68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800ab6c:	4c32      	ldr	r4, [pc, #200]	; (800ac38 <xTaskResumeAll+0xd0>)
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	b943      	cbnz	r3, 800ab84 <xTaskResumeAll+0x1c>
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	e7fe      	b.n	800ab82 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800ab84:	f000 fafe 	bl	800b184 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab8e:	6824      	ldr	r4, [r4, #0]
 800ab90:	b134      	cbz	r4, 800aba0 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800ab92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ab94:	f000 fb16 	bl	800b1c4 <vPortExitCritical>
}
 800ab98:	4620      	mov	r0, r4
 800ab9a:	b002      	add	sp, #8
 800ab9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aba0:	4b26      	ldr	r3, [pc, #152]	; (800ac3c <xTaskResumeAll+0xd4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f4      	beq.n	800ab92 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aba8:	4d25      	ldr	r5, [pc, #148]	; (800ac40 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 800abaa:	4e26      	ldr	r6, [pc, #152]	; (800ac44 <xTaskResumeAll+0xdc>)
 800abac:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ac54 <xTaskResumeAll+0xec>
 800abb0:	e01f      	b.n	800abf2 <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb2:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800abb4:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abb8:	f104 0018 	add.w	r0, r4, #24
 800abbc:	f7ff f8a8 	bl	8009d10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abc0:	1d21      	adds	r1, r4, #4
 800abc2:	4608      	mov	r0, r1
 800abc4:	9101      	str	r1, [sp, #4]
 800abc6:	f7ff f8a3 	bl	8009d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800abca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800abcc:	6830      	ldr	r0, [r6, #0]
 800abce:	fa07 f302 	lsl.w	r3, r7, r2
 800abd2:	9901      	ldr	r1, [sp, #4]
 800abd4:	4303      	orrs	r3, r0
 800abd6:	2014      	movs	r0, #20
 800abd8:	fb00 8002 	mla	r0, r0, r2, r8
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	f7ff f874 	bl	8009cca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abe2:	4b19      	ldr	r3, [pc, #100]	; (800ac48 <xTaskResumeAll+0xe0>)
 800abe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abea:	429a      	cmp	r2, r3
 800abec:	d301      	bcc.n	800abf2 <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 800abee:	4b17      	ldr	r3, [pc, #92]	; (800ac4c <xTaskResumeAll+0xe4>)
 800abf0:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1dc      	bne.n	800abb2 <xTaskResumeAll+0x4a>
				if( pxTCB != NULL )
 800abf8:	b10c      	cbz	r4, 800abfe <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 800abfa:	f7ff fd49 	bl	800a690 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abfe:	4d14      	ldr	r5, [pc, #80]	; (800ac50 <xTaskResumeAll+0xe8>)
 800ac00:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800ac02:	b144      	cbz	r4, 800ac16 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 800ac04:	4e11      	ldr	r6, [pc, #68]	; (800ac4c <xTaskResumeAll+0xe4>)
 800ac06:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ac08:	f7ff ff18 	bl	800aa3c <xTaskIncrementTick>
 800ac0c:	b100      	cbz	r0, 800ac10 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800ac0e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac10:	3c01      	subs	r4, #1
 800ac12:	d1f9      	bne.n	800ac08 <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 800ac14:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ac16:	4b0d      	ldr	r3, [pc, #52]	; (800ac4c <xTaskResumeAll+0xe4>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0b9      	beq.n	800ab92 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800ac1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ac22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ac32:	2401      	movs	r4, #1
 800ac34:	e7ae      	b.n	800ab94 <xTaskResumeAll+0x2c>
 800ac36:	bf00      	nop
 800ac38:	24000fb0 	.word	0x24000fb0
 800ac3c:	24000fa8 	.word	0x24000fa8
 800ac40:	24000ff0 	.word	0x24000ff0
 800ac44:	24000fb8 	.word	0x24000fb8
 800ac48:	24000f10 	.word	0x24000f10
 800ac4c:	24001034 	.word	0x24001034
 800ac50:	24000fec 	.word	0x24000fec
 800ac54:	24000f1c 	.word	0x24000f1c

0800ac58 <vTaskDelay>:
	{
 800ac58:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac5a:	b950      	cbnz	r0, 800ac72 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800ac5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ac60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	f3bf 8f6f 	isb	sy
	}
 800ac70:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800ac72:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <vTaskDelay+0x44>)
 800ac74:	6819      	ldr	r1, [r3, #0]
 800ac76:	b141      	cbz	r1, 800ac8a <vTaskDelay+0x32>
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	e7fe      	b.n	800ac88 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800ac8a:	f7ff fecf 	bl	800aa2c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac8e:	f7ff fcbb 	bl	800a608 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ac92:	f7ff ff69 	bl	800ab68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d0e0      	beq.n	800ac5c <vTaskDelay+0x4>
 800ac9a:	e7e9      	b.n	800ac70 <vTaskDelay+0x18>
 800ac9c:	24000fb0 	.word	0x24000fb0

0800aca0 <vTaskSwitchContext>:
{
 800aca0:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aca2:	4b1f      	ldr	r3, [pc, #124]	; (800ad20 <vTaskSwitchContext+0x80>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	4b1f      	ldr	r3, [pc, #124]	; (800ad24 <vTaskSwitchContext+0x84>)
 800aca8:	b112      	cbz	r2, 800acb0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]
}
 800acae:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800acb0:	4c1d      	ldr	r4, [pc, #116]	; (800ad28 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 800acb2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800acb4:	6822      	ldr	r2, [r4, #0]
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	6812      	ldr	r2, [r2, #0]
 800acba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d804      	bhi.n	800acca <vTaskSwitchContext+0x2a>
 800acc0:	6820      	ldr	r0, [r4, #0]
 800acc2:	6821      	ldr	r1, [r4, #0]
 800acc4:	3134      	adds	r1, #52	; 0x34
 800acc6:	f7f6 f90e 	bl	8000ee6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acca:	4b18      	ldr	r3, [pc, #96]	; (800ad2c <vTaskSwitchContext+0x8c>)
 800accc:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800acce:	fab2 f282 	clz	r2, r2
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	2314      	movs	r3, #20
 800acd6:	4916      	ldr	r1, [pc, #88]	; (800ad30 <vTaskSwitchContext+0x90>)
 800acd8:	f1c2 021f 	rsb	r2, r2, #31
 800acdc:	4353      	muls	r3, r2
 800acde:	58cd      	ldr	r5, [r1, r3]
 800ace0:	18c8      	adds	r0, r1, r3
 800ace2:	b945      	cbnz	r5, 800acf6 <vTaskSwitchContext+0x56>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	e7fe      	b.n	800acf4 <vTaskSwitchContext+0x54>
 800acf6:	6845      	ldr	r5, [r0, #4]
 800acf8:	3308      	adds	r3, #8
 800acfa:	686d      	ldr	r5, [r5, #4]
 800acfc:	440b      	add	r3, r1
 800acfe:	429d      	cmp	r5, r3
 800ad00:	6045      	str	r5, [r0, #4]
 800ad02:	bf04      	itt	eq
 800ad04:	686b      	ldreq	r3, [r5, #4]
 800ad06:	6043      	streq	r3, [r0, #4]
 800ad08:	2314      	movs	r3, #20
 800ad0a:	fb03 1202 	mla	r2, r3, r2, r1
 800ad0e:	6853      	ldr	r3, [r2, #4]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad10:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <vTaskSwitchContext+0x94>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	334c      	adds	r3, #76	; 0x4c
 800ad1a:	6013      	str	r3, [r2, #0]
}
 800ad1c:	e7c7      	b.n	800acae <vTaskSwitchContext+0xe>
 800ad1e:	bf00      	nop
 800ad20:	24000fb0 	.word	0x24000fb0
 800ad24:	24001034 	.word	0x24001034
 800ad28:	24000f10 	.word	0x24000f10
 800ad2c:	24000fb8 	.word	0x24000fb8
 800ad30:	24000f1c 	.word	0x24000f1c
 800ad34:	240000b8 	.word	0x240000b8

0800ad38 <vTaskPlaceOnEventList>:
{
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ad3c:	b940      	cbnz	r0, 800ad50 <vTaskPlaceOnEventList+0x18>
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	e7fe      	b.n	800ad4e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad50:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <vTaskPlaceOnEventList+0x30>)
 800ad52:	6819      	ldr	r1, [r3, #0]
 800ad54:	3118      	adds	r1, #24
 800ad56:	f7fe ffc4 	bl	8009ce2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	2101      	movs	r1, #1
}
 800ad5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad62:	f7ff bc51 	b.w	800a608 <prvAddCurrentTaskToDelayedList>
 800ad66:	bf00      	nop
 800ad68:	24000f10 	.word	0x24000f10

0800ad6c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6c:	68c3      	ldr	r3, [r0, #12]
{
 800ad6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad70:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ad72:	b944      	cbnz	r4, 800ad86 <xTaskRemoveFromEventList+0x1a>
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	e7fe      	b.n	800ad84 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad86:	f104 0118 	add.w	r1, r4, #24
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	9101      	str	r1, [sp, #4]
 800ad8e:	f7fe ffbf 	bl	8009d10 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad92:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <xTaskRemoveFromEventList+0x74>)
 800ad94:	9901      	ldr	r1, [sp, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	b9eb      	cbnz	r3, 800add6 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad9a:	1d21      	adds	r1, r4, #4
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	9101      	str	r1, [sp, #4]
 800ada0:	f7fe ffb6 	bl	8009d10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ada4:	480f      	ldr	r0, [pc, #60]	; (800ade4 <xTaskRemoveFromEventList+0x78>)
 800ada6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ada8:	2301      	movs	r3, #1
 800adaa:	6805      	ldr	r5, [r0, #0]
 800adac:	4093      	lsls	r3, r2
 800adae:	9901      	ldr	r1, [sp, #4]
 800adb0:	432b      	orrs	r3, r5
 800adb2:	6003      	str	r3, [r0, #0]
 800adb4:	2014      	movs	r0, #20
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <xTaskRemoveFromEventList+0x7c>)
 800adb8:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adbc:	f7fe ff85 	bl	8009cca <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <xTaskRemoveFromEventList+0x80>)
 800adc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d906      	bls.n	800adda <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800adcc:	2001      	movs	r0, #1
 800adce:	4b08      	ldr	r3, [pc, #32]	; (800adf0 <xTaskRemoveFromEventList+0x84>)
 800add0:	6018      	str	r0, [r3, #0]
}
 800add2:	b003      	add	sp, #12
 800add4:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800add6:	4807      	ldr	r0, [pc, #28]	; (800adf4 <xTaskRemoveFromEventList+0x88>)
 800add8:	e7f0      	b.n	800adbc <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800adda:	2000      	movs	r0, #0
	return xReturn;
 800addc:	e7f9      	b.n	800add2 <xTaskRemoveFromEventList+0x66>
 800adde:	bf00      	nop
 800ade0:	24000fb0 	.word	0x24000fb0
 800ade4:	24000fb8 	.word	0x24000fb8
 800ade8:	24000f1c 	.word	0x24000f1c
 800adec:	24000f10 	.word	0x24000f10
 800adf0:	24001034 	.word	0x24001034
 800adf4:	24000ff0 	.word	0x24000ff0

0800adf8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf8:	4b03      	ldr	r3, [pc, #12]	; (800ae08 <vTaskInternalSetTimeOutState+0x10>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adfe:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <vTaskInternalSetTimeOutState+0x14>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6043      	str	r3, [r0, #4]
}
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	24000fe8 	.word	0x24000fe8
 800ae0c:	24001030 	.word	0x24001030

0800ae10 <xTaskCheckForTimeOut>:
{
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ae14:	4605      	mov	r5, r0
 800ae16:	b940      	cbnz	r0, 800ae2a <xTaskCheckForTimeOut+0x1a>
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	e7fe      	b.n	800ae28 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ae2a:	b941      	cbnz	r1, 800ae3e <xTaskCheckForTimeOut+0x2e>
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	e7fe      	b.n	800ae3c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ae3e:	f000 f9a1 	bl	800b184 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ae42:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <xTaskCheckForTimeOut+0x70>)
 800ae44:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	d010      	beq.n	800ae6e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae4c:	480d      	ldr	r0, [pc, #52]	; (800ae84 <xTaskCheckForTimeOut+0x74>)
 800ae4e:	682e      	ldr	r6, [r5, #0]
 800ae50:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae52:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae54:	4286      	cmp	r6, r0
 800ae56:	d001      	beq.n	800ae5c <xTaskCheckForTimeOut+0x4c>
 800ae58:	428a      	cmp	r2, r1
 800ae5a:	d90f      	bls.n	800ae7c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae5c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae5e:	4283      	cmp	r3, r0
 800ae60:	d90a      	bls.n	800ae78 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ae62:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae64:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ae66:	4413      	add	r3, r2
 800ae68:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae6a:	f7ff ffc5 	bl	800adf8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ae6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ae70:	f000 f9a8 	bl	800b1c4 <vPortExitCritical>
}
 800ae74:	4620      	mov	r0, r4
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ae7c:	2401      	movs	r4, #1
 800ae7e:	e7f7      	b.n	800ae70 <xTaskCheckForTimeOut+0x60>
 800ae80:	24001030 	.word	0x24001030
 800ae84:	24000fe8 	.word	0x24000fe8

0800ae88 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ae88:	4b01      	ldr	r3, [pc, #4]	; (800ae90 <vTaskMissedYield+0x8>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	601a      	str	r2, [r3, #0]
}
 800ae8e:	4770      	bx	lr
 800ae90:	24001034 	.word	0x24001034

0800ae94 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <xTaskGetSchedulerState+0x18>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	b133      	cbz	r3, 800aea8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <xTaskGetSchedulerState+0x1c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bf0c      	ite	eq
 800aea2:	2002      	moveq	r0, #2
 800aea4:	2000      	movne	r0, #0
 800aea6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aea8:	2001      	movs	r0, #1
	}
 800aeaa:	4770      	bx	lr
 800aeac:	24001004 	.word	0x24001004
 800aeb0:	24000fb0 	.word	0x24000fb0

0800aeb4 <xTaskPriorityInherit>:
	{
 800aeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d031      	beq.n	800af20 <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aebc:	4d20      	ldr	r5, [pc, #128]	; (800af40 <xTaskPriorityInherit+0x8c>)
 800aebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800aec0:	682a      	ldr	r2, [r5, #0]
 800aec2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d233      	bcs.n	800af30 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aec8:	6982      	ldr	r2, [r0, #24]
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	db04      	blt.n	800aed8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aece:	682a      	ldr	r2, [r5, #0]
 800aed0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aed2:	f1c2 0207 	rsb	r2, r2, #7
 800aed6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aed8:	2214      	movs	r2, #20
 800aeda:	4e1a      	ldr	r6, [pc, #104]	; (800af44 <xTaskPriorityInherit+0x90>)
 800aedc:	fb02 6303 	mla	r3, r2, r3, r6
 800aee0:	6962      	ldr	r2, [r4, #20]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d11e      	bne.n	800af24 <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aee6:	1d21      	adds	r1, r4, #4
 800aee8:	4608      	mov	r0, r1
 800aeea:	9101      	str	r1, [sp, #4]
 800aeec:	f7fe ff10 	bl	8009d10 <uxListRemove>
 800aef0:	4b15      	ldr	r3, [pc, #84]	; (800af48 <xTaskPriorityInherit+0x94>)
 800aef2:	9901      	ldr	r1, [sp, #4]
 800aef4:	b930      	cbnz	r0, 800af04 <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800aef6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800aef8:	2001      	movs	r0, #1
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	40b8      	lsls	r0, r7
 800aefe:	ea22 0200 	bic.w	r2, r2, r0
 800af02:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af04:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af06:	681d      	ldr	r5, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af0a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af0c:	2401      	movs	r4, #1
 800af0e:	fa04 f002 	lsl.w	r0, r4, r2
 800af12:	4328      	orrs	r0, r5
 800af14:	6018      	str	r0, [r3, #0]
 800af16:	2014      	movs	r0, #20
 800af18:	fb00 6002 	mla	r0, r0, r2, r6
 800af1c:	f7fe fed5 	bl	8009cca <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800af20:	4620      	mov	r0, r4
		return xReturn;
 800af22:	e003      	b.n	800af2c <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af24:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 800af26:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800af2c:	b003      	add	sp, #12
 800af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800af34:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800af36:	42a0      	cmp	r0, r4
 800af38:	bf2c      	ite	cs
 800af3a:	2000      	movcs	r0, #0
 800af3c:	2001      	movcc	r0, #1
 800af3e:	e7f5      	b.n	800af2c <xTaskPriorityInherit+0x78>
 800af40:	24000f10 	.word	0x24000f10
 800af44:	24000f1c 	.word	0x24000f1c
 800af48:	24000fb8 	.word	0x24000fb8

0800af4c <xTaskPriorityDisinherit>:
	{
 800af4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800af4e:	4604      	mov	r4, r0
 800af50:	b910      	cbnz	r0, 800af58 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 800af52:	2000      	movs	r0, #0
	}
 800af54:	b003      	add	sp, #12
 800af56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800af58:	4b22      	ldr	r3, [pc, #136]	; (800afe4 <xTaskPriorityDisinherit+0x98>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4283      	cmp	r3, r0
 800af5e:	d008      	beq.n	800af72 <xTaskPriorityDisinherit+0x26>
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	e7fe      	b.n	800af70 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800af72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af74:	b943      	cbnz	r3, 800af88 <xTaskPriorityDisinherit+0x3c>
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	e7fe      	b.n	800af86 <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af88:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800af8a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800af8e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af90:	4291      	cmp	r1, r2
 800af92:	d0de      	beq.n	800af52 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1dc      	bne.n	800af52 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af98:	1d01      	adds	r1, r0, #4
 800af9a:	4f13      	ldr	r7, [pc, #76]	; (800afe8 <xTaskPriorityDisinherit+0x9c>)
 800af9c:	4608      	mov	r0, r1
 800af9e:	9101      	str	r1, [sp, #4]
 800afa0:	f7fe feb6 	bl	8009d10 <uxListRemove>
 800afa4:	4a11      	ldr	r2, [pc, #68]	; (800afec <xTaskPriorityDisinherit+0xa0>)
 800afa6:	9901      	ldr	r1, [sp, #4]
 800afa8:	b950      	cbnz	r0, 800afc0 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800afaa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800afac:	2614      	movs	r6, #20
 800afae:	4346      	muls	r6, r0
 800afb0:	59bb      	ldr	r3, [r7, r6]
 800afb2:	b92b      	cbnz	r3, 800afc0 <xTaskPriorityDisinherit+0x74>
 800afb4:	2501      	movs	r5, #1
 800afb6:	6813      	ldr	r3, [r2, #0]
 800afb8:	4085      	lsls	r5, r0
 800afba:	ea23 0305 	bic.w	r3, r3, r5
 800afbe:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc2:	f1c3 0007 	rsb	r0, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afc6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc8:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800afca:	2401      	movs	r4, #1
 800afcc:	6810      	ldr	r0, [r2, #0]
 800afce:	fa04 f503 	lsl.w	r5, r4, r3
 800afd2:	4305      	orrs	r5, r0
 800afd4:	2014      	movs	r0, #20
 800afd6:	fb00 7003 	mla	r0, r0, r3, r7
 800afda:	6015      	str	r5, [r2, #0]
 800afdc:	f7fe fe75 	bl	8009cca <vListInsertEnd>
					xReturn = pdTRUE;
 800afe0:	4620      	mov	r0, r4
		return xReturn;
 800afe2:	e7b7      	b.n	800af54 <xTaskPriorityDisinherit+0x8>
 800afe4:	24000f10 	.word	0x24000f10
 800afe8:	24000f1c 	.word	0x24000f1c
 800afec:	24000fb8 	.word	0x24000fb8

0800aff0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800aff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800aff2:	4604      	mov	r4, r0
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d04c      	beq.n	800b092 <vTaskPriorityDisinheritAfterTimeout+0xa2>
			configASSERT( pxTCB->uxMutexesHeld );
 800aff8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800affa:	b942      	cbnz	r2, 800b00e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	e7fe      	b.n	800b00c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b00e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b010:	4299      	cmp	r1, r3
 800b012:	bf38      	it	cc
 800b014:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b016:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b018:	428b      	cmp	r3, r1
 800b01a:	d03a      	beq.n	800b092 <vTaskPriorityDisinheritAfterTimeout+0xa2>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b01c:	2a01      	cmp	r2, #1
 800b01e:	d138      	bne.n	800b092 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					configASSERT( pxTCB != pxCurrentTCB );
 800b020:	4a1d      	ldr	r2, [pc, #116]	; (800b098 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800b022:	6812      	ldr	r2, [r2, #0]
 800b024:	4282      	cmp	r2, r0
 800b026:	d108      	bne.n	800b03a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	e7fe      	b.n	800b038 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b03a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b03c:	4d17      	ldr	r5, [pc, #92]	; (800b09c <vTaskPriorityDisinheritAfterTimeout+0xac>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b03e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b040:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800b044:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b046:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b04a:	bfa8      	it	ge
 800b04c:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b050:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	bfa8      	it	ge
 800b054:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b056:	429a      	cmp	r2, r3
 800b058:	d11b      	bne.n	800b092 <vTaskPriorityDisinheritAfterTimeout+0xa2>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b05a:	1d01      	adds	r1, r0, #4
 800b05c:	4608      	mov	r0, r1
 800b05e:	9101      	str	r1, [sp, #4]
 800b060:	f7fe fe56 	bl	8009d10 <uxListRemove>
 800b064:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800b066:	4a0e      	ldr	r2, [pc, #56]	; (800b0a0 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800b068:	9901      	ldr	r1, [sp, #4]
 800b06a:	b928      	cbnz	r0, 800b078 <vTaskPriorityDisinheritAfterTimeout+0x88>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b06c:	2001      	movs	r0, #1
 800b06e:	6813      	ldr	r3, [r2, #0]
 800b070:	40a0      	lsls	r0, r4
 800b072:	ea23 0300 	bic.w	r3, r3, r0
 800b076:	6013      	str	r3, [r2, #0]
						prvAddTaskToReadyList( pxTCB );
 800b078:	2301      	movs	r3, #1
 800b07a:	6810      	ldr	r0, [r2, #0]
 800b07c:	40a3      	lsls	r3, r4
 800b07e:	4303      	orrs	r3, r0
 800b080:	2014      	movs	r0, #20
 800b082:	fb00 5004 	mla	r0, r0, r4, r5
 800b086:	6013      	str	r3, [r2, #0]
	}
 800b088:	b003      	add	sp, #12
 800b08a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800b08e:	f7fe be1c 	b.w	8009cca <vListInsertEnd>
	}
 800b092:	b003      	add	sp, #12
 800b094:	bd30      	pop	{r4, r5, pc}
 800b096:	bf00      	nop
 800b098:	24000f10 	.word	0x24000f10
 800b09c:	24000f1c 	.word	0x24000f1c
 800b0a0:	24000fb8 	.word	0x24000fb8

0800b0a4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b0a4:	4b04      	ldr	r3, [pc, #16]	; (800b0b8 <pvTaskIncrementMutexHeldCount+0x14>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	b11a      	cbz	r2, 800b0b2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b0aa:	6819      	ldr	r1, [r3, #0]
 800b0ac:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800b0ae:	3201      	adds	r2, #1
 800b0b0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800b0b2:	6818      	ldr	r0, [r3, #0]
	}
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	24000f10 	.word	0x24000f10

0800b0bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0bc:	4808      	ldr	r0, [pc, #32]	; (800b0e0 <prvPortStartFirstTask+0x24>)
 800b0be:	6800      	ldr	r0, [r0, #0]
 800b0c0:	6800      	ldr	r0, [r0, #0]
 800b0c2:	f380 8808 	msr	MSP, r0
 800b0c6:	f04f 0000 	mov.w	r0, #0
 800b0ca:	f380 8814 	msr	CONTROL, r0
 800b0ce:	b662      	cpsie	i
 800b0d0:	b661      	cpsie	f
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	df00      	svc	0
 800b0dc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0de:	0000      	.short	0x0000
 800b0e0:	e000ed08 	.word	0xe000ed08

0800b0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0f4 <vPortEnableVFP+0x10>
 800b0e8:	6801      	ldr	r1, [r0, #0]
 800b0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0ee:	6001      	str	r1, [r0, #0]
 800b0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0f2:	0000      	.short	0x0000
 800b0f4:	e000ed88 	.word	0xe000ed88

0800b0f8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b0f8:	2300      	movs	r3, #0
{
 800b0fa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b0fc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <prvTaskExitError+0x3c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	d008      	beq.n	800b118 <prvTaskExitError+0x20>
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	e7fe      	b.n	800b116 <prvTaskExitError+0x1e>
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b128:	9b01      	ldr	r3, [sp, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0fc      	beq.n	800b128 <prvTaskExitError+0x30>
}
 800b12e:	b002      	add	sp, #8
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	24000010 	.word	0x24000010

0800b138 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b13c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b140:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b144:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b146:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b148:	4b03      	ldr	r3, [pc, #12]	; (800b158 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b14a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b14c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b14e:	f06f 0302 	mvn.w	r3, #2
 800b152:	6203      	str	r3, [r0, #32]
}
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	0800b0f9 	.word	0x0800b0f9
 800b15c:	00000000 	.word	0x00000000

0800b160 <SVC_Handler>:
	__asm volatile (
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <pxCurrentTCBConst2>)
 800b162:	6819      	ldr	r1, [r3, #0]
 800b164:	6808      	ldr	r0, [r1, #0]
 800b166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16a:	f380 8809 	msr	PSP, r0
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f380 8811 	msr	BASEPRI, r0
 800b17a:	4770      	bx	lr
 800b17c:	f3af 8000 	nop.w

0800b180 <pxCurrentTCBConst2>:
 800b180:	24000f10 	.word	0x24000f10

0800b184 <vPortEnterCritical>:
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b194:	4a0a      	ldr	r2, [pc, #40]	; (800b1c0 <vPortEnterCritical+0x3c>)
 800b196:	6813      	ldr	r3, [r2, #0]
 800b198:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b19a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b19c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b19e:	d10e      	bne.n	800b1be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b1a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	b143      	cbz	r3, 800b1be <vPortEnterCritical+0x3a>
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	e7fe      	b.n	800b1bc <vPortEnterCritical+0x38>
}
 800b1be:	4770      	bx	lr
 800b1c0:	24000010 	.word	0x24000010

0800b1c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b1c4:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <vPortExitCritical+0x24>)
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	b943      	cbnz	r3, 800b1dc <vPortExitCritical+0x18>
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	e7fe      	b.n	800b1da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1e0:	b90b      	cbnz	r3, 800b1e6 <vPortExitCritical+0x22>
	__asm volatile
 800b1e2:	f383 8811 	msr	BASEPRI, r3
}
 800b1e6:	4770      	bx	lr
 800b1e8:	24000010 	.word	0x24000010
 800b1ec:	00000000 	.word	0x00000000

0800b1f0 <PendSV_Handler>:
	__asm volatile
 800b1f0:	f3ef 8009 	mrs	r0, PSP
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4b15      	ldr	r3, [pc, #84]	; (800b250 <pxCurrentTCBConst>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	f01e 0f10 	tst.w	lr, #16
 800b200:	bf08      	it	eq
 800b202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	6010      	str	r0, [r2, #0]
 800b20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b214:	f380 8811 	msr	BASEPRI, r0
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f7ff fd3e 	bl	800aca0 <vTaskSwitchContext>
 800b224:	f04f 0000 	mov.w	r0, #0
 800b228:	f380 8811 	msr	BASEPRI, r0
 800b22c:	bc09      	pop	{r0, r3}
 800b22e:	6819      	ldr	r1, [r3, #0]
 800b230:	6808      	ldr	r0, [r1, #0]
 800b232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b236:	f01e 0f10 	tst.w	lr, #16
 800b23a:	bf08      	it	eq
 800b23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b240:	f380 8809 	msr	PSP, r0
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	f3af 8000 	nop.w

0800b250 <pxCurrentTCBConst>:
 800b250:	24000f10 	.word	0x24000f10

0800b254 <SysTick_Handler>:
{
 800b254:	b508      	push	{r3, lr}
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b266:	f7ff fbe9 	bl	800aa3c <xTaskIncrementTick>
 800b26a:	b128      	cbz	r0, 800b278 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b26c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b274:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800b278:	2300      	movs	r3, #0
 800b27a:	f383 8811 	msr	BASEPRI, r3
}
 800b27e:	bd08      	pop	{r3, pc}

0800b280 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b280:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b284:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b286:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b28a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b28c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b28e:	4b04      	ldr	r3, [pc, #16]	; (800b2a0 <vPortSetupTimerInterrupt+0x20>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	fbb3 f3f1 	udiv	r3, r3, r1
 800b296:	3b01      	subs	r3, #1
 800b298:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b29a:	2307      	movs	r3, #7
 800b29c:	6113      	str	r3, [r2, #16]
}
 800b29e:	4770      	bx	lr
 800b2a0:	24000000 	.word	0x24000000

0800b2a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800b2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800b2ae:	4a3a      	ldr	r2, [pc, #232]	; (800b398 <xPortStartScheduler+0xf4>)
 800b2b0:	4291      	cmp	r1, r2
 800b2b2:	d108      	bne.n	800b2c6 <xPortStartScheduler+0x22>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	e7fe      	b.n	800b2c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800b2ca:	4b34      	ldr	r3, [pc, #208]	; (800b39c <xPortStartScheduler+0xf8>)
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d108      	bne.n	800b2e2 <xPortStartScheduler+0x3e>
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	e7fe      	b.n	800b2e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2e2:	4b2f      	ldr	r3, [pc, #188]	; (800b3a0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2e4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	b2d2      	uxtb	r2, r2
 800b2ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2ec:	22ff      	movs	r2, #255	; 0xff
 800b2ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2f0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2f2:	4a2c      	ldr	r2, [pc, #176]	; (800b3a4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b2fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b302:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b304:	2307      	movs	r3, #7
 800b306:	4a28      	ldr	r2, [pc, #160]	; (800b3a8 <xPortStartScheduler+0x104>)
 800b308:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b30a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b30e:	1e5c      	subs	r4, r3, #1
 800b310:	0600      	lsls	r0, r0, #24
 800b312:	d40c      	bmi.n	800b32e <xPortStartScheduler+0x8a>
 800b314:	b111      	cbz	r1, 800b31c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b316:	2b03      	cmp	r3, #3
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	d011      	beq.n	800b340 <xPortStartScheduler+0x9c>
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	e7fe      	b.n	800b32c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b32e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b332:	2101      	movs	r1, #1
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	b2db      	uxtb	r3, r3
 800b338:	f88d 3003 	strb.w	r3, [sp, #3]
 800b33c:	4623      	mov	r3, r4
 800b33e:	e7e4      	b.n	800b30a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b340:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b344:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800b348:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b34a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b34c:	9b01      	ldr	r3, [sp, #4]
 800b34e:	4a14      	ldr	r2, [pc, #80]	; (800b3a0 <xPortStartScheduler+0xfc>)
 800b350:	b2db      	uxtb	r3, r3
 800b352:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b354:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b35c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b360:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b364:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b368:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800b36c:	f7ff ff88 	bl	800b280 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b370:	4b0e      	ldr	r3, [pc, #56]	; (800b3ac <xPortStartScheduler+0x108>)
 800b372:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b374:	f7ff feb6 	bl	800b0e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b378:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800b37c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b380:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800b384:	f7ff fe9a 	bl	800b0bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b388:	f7ff fc8a 	bl	800aca0 <vTaskSwitchContext>
}
 800b38c:	4628      	mov	r0, r5
	prvTaskExitError();
 800b38e:	f7ff feb3 	bl	800b0f8 <prvTaskExitError>
}
 800b392:	b003      	add	sp, #12
 800b394:	bd30      	pop	{r4, r5, pc}
 800b396:	bf00      	nop
 800b398:	410fc271 	.word	0x410fc271
 800b39c:	410fc270 	.word	0x410fc270
 800b3a0:	e000e400 	.word	0xe000e400
 800b3a4:	24001038 	.word	0x24001038
 800b3a8:	2400103c 	.word	0x2400103c
 800b3ac:	24000010 	.word	0x24000010

0800b3b0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3b0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3b4:	2b0f      	cmp	r3, #15
 800b3b6:	d90e      	bls.n	800b3d6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3b8:	4a11      	ldr	r2, [pc, #68]	; (800b400 <vPortValidateInterruptPriority+0x50>)
 800b3ba:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3bc:	4a11      	ldr	r2, [pc, #68]	; (800b404 <vPortValidateInterruptPriority+0x54>)
 800b3be:	7812      	ldrb	r2, [r2, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d908      	bls.n	800b3d6 <vPortValidateInterruptPriority+0x26>
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	e7fe      	b.n	800b3d4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b3da:	4a0b      	ldr	r2, [pc, #44]	; (800b408 <vPortValidateInterruptPriority+0x58>)
 800b3dc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d908      	bls.n	800b3fc <vPortValidateInterruptPriority+0x4c>
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	e7fe      	b.n	800b3fa <vPortValidateInterruptPriority+0x4a>
	}
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	e000e3f0 	.word	0xe000e3f0
 800b404:	24001038 	.word	0x24001038
 800b408:	2400103c 	.word	0x2400103c

0800b40c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b40c:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <prvInsertBlockIntoFreeList+0x40>)
{
 800b40e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b410:	461a      	mov	r2, r3
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4283      	cmp	r3, r0
 800b416:	d3fb      	bcc.n	800b410 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b418:	6854      	ldr	r4, [r2, #4]
 800b41a:	1911      	adds	r1, r2, r4
 800b41c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b41e:	bf01      	itttt	eq
 800b420:	6841      	ldreq	r1, [r0, #4]
 800b422:	4610      	moveq	r0, r2
 800b424:	1909      	addeq	r1, r1, r4
 800b426:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b428:	6844      	ldr	r4, [r0, #4]
 800b42a:	1901      	adds	r1, r0, r4
 800b42c:	428b      	cmp	r3, r1
 800b42e:	d107      	bne.n	800b440 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b430:	4907      	ldr	r1, [pc, #28]	; (800b450 <prvInsertBlockIntoFreeList+0x44>)
 800b432:	6809      	ldr	r1, [r1, #0]
 800b434:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b436:	bf1f      	itttt	ne
 800b438:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b43a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b43c:	1909      	addne	r1, r1, r4
 800b43e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b440:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b442:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b444:	bf18      	it	ne
 800b446:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	bf00      	nop
 800b44c:	24041058 	.word	0x24041058
 800b450:	24001040 	.word	0x24001040

0800b454 <pvPortMalloc>:
{
 800b454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b458:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b45a:	f7ff fae7 	bl	800aa2c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b45e:	4842      	ldr	r0, [pc, #264]	; (800b568 <pvPortMalloc+0x114>)
 800b460:	4d42      	ldr	r5, [pc, #264]	; (800b56c <pvPortMalloc+0x118>)
 800b462:	6803      	ldr	r3, [r0, #0]
 800b464:	bb0b      	cbnz	r3, 800b4aa <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800b466:	4942      	ldr	r1, [pc, #264]	; (800b570 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b468:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b46a:	4e42      	ldr	r6, [pc, #264]	; (800b574 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b46c:	bf1b      	ittet	ne
 800b46e:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b470:	f501 2280 	addne.w	r2, r1, #262144	; 0x40000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b474:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b478:	f023 0307 	bicne.w	r3, r3, #7
 800b47c:	bf1c      	itt	ne
 800b47e:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b480:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800b482:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b484:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b486:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b488:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800b48a:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b48c:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b490:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b494:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800b496:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b498:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b49c:	4a36      	ldr	r2, [pc, #216]	; (800b578 <pvPortMalloc+0x124>)
 800b49e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4a0:	4a36      	ldr	r2, [pc, #216]	; (800b57c <pvPortMalloc+0x128>)
 800b4a2:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4a8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4aa:	682f      	ldr	r7, [r5, #0]
 800b4ac:	4227      	tst	r7, r4
 800b4ae:	d155      	bne.n	800b55c <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	d046      	beq.n	800b542 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800b4b4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4b8:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4ba:	bf1c      	itt	ne
 800b4bc:	f023 0307 	bicne.w	r3, r3, #7
 800b4c0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d04a      	beq.n	800b55c <pvPortMalloc+0x108>
 800b4c6:	4c2d      	ldr	r4, [pc, #180]	; (800b57c <pvPortMalloc+0x128>)
 800b4c8:	6826      	ldr	r6, [r4, #0]
 800b4ca:	429e      	cmp	r6, r3
 800b4cc:	d346      	bcc.n	800b55c <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800b4ce:	4a29      	ldr	r2, [pc, #164]	; (800b574 <pvPortMalloc+0x120>)
 800b4d0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4d2:	6869      	ldr	r1, [r5, #4]
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d204      	bcs.n	800b4e2 <pvPortMalloc+0x8e>
 800b4d8:	f8d5 c000 	ldr.w	ip, [r5]
 800b4dc:	f1bc 0f00 	cmp.w	ip, #0
 800b4e0:	d115      	bne.n	800b50e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800b4e2:	6800      	ldr	r0, [r0, #0]
 800b4e4:	42a8      	cmp	r0, r5
 800b4e6:	d039      	beq.n	800b55c <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4e8:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4ea:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4ec:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4f0:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4f2:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4f4:	d912      	bls.n	800b51c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4f6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4f8:	0742      	lsls	r2, r0, #29
 800b4fa:	d00b      	beq.n	800b514 <pvPortMalloc+0xc0>
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	e7fe      	b.n	800b50c <pvPortMalloc+0xb8>
 800b50e:	462a      	mov	r2, r5
 800b510:	4665      	mov	r5, ip
 800b512:	e7de      	b.n	800b4d2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b514:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b516:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b518:	f7ff ff78 	bl	800b40c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b51c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b51e:	4916      	ldr	r1, [pc, #88]	; (800b578 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b520:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b522:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800b524:	4a16      	ldr	r2, [pc, #88]	; (800b580 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800b526:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b528:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800b52a:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b52c:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b52e:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b530:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b532:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800b536:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b53a:	bf38      	it	cc
 800b53c:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b53e:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b540:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b542:	f7ff fb11 	bl	800ab68 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b546:	0763      	lsls	r3, r4, #29
 800b548:	d00a      	beq.n	800b560 <pvPortMalloc+0x10c>
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	e7fe      	b.n	800b55a <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800b55c:	2400      	movs	r4, #0
 800b55e:	e7f0      	b.n	800b542 <pvPortMalloc+0xee>
}
 800b560:	4620      	mov	r0, r4
 800b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b566:	bf00      	nop
 800b568:	24001040 	.word	0x24001040
 800b56c:	24041044 	.word	0x24041044
 800b570:	24001044 	.word	0x24001044
 800b574:	24041058 	.word	0x24041058
 800b578:	2404104c 	.word	0x2404104c
 800b57c:	24041048 	.word	0x24041048
 800b580:	24041050 	.word	0x24041050

0800b584 <vPortFree>:
{
 800b584:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b586:	4604      	mov	r4, r0
 800b588:	b390      	cbz	r0, 800b5f0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b58a:	4a1a      	ldr	r2, [pc, #104]	; (800b5f4 <vPortFree+0x70>)
 800b58c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b590:	6812      	ldr	r2, [r2, #0]
 800b592:	4213      	tst	r3, r2
 800b594:	d108      	bne.n	800b5a8 <vPortFree+0x24>
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	e7fe      	b.n	800b5a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b5ac:	b141      	cbz	r1, 800b5c0 <vPortFree+0x3c>
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	e7fe      	b.n	800b5be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5c0:	ea23 0302 	bic.w	r3, r3, r2
 800b5c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b5c8:	f7ff fa30 	bl	800aa2c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5cc:	4a0a      	ldr	r2, [pc, #40]	; (800b5f8 <vPortFree+0x74>)
 800b5ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5d2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5d6:	6811      	ldr	r1, [r2, #0]
 800b5d8:	440b      	add	r3, r1
 800b5da:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5dc:	f7ff ff16 	bl	800b40c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5e0:	4a06      	ldr	r2, [pc, #24]	; (800b5fc <vPortFree+0x78>)
 800b5e2:	6813      	ldr	r3, [r2, #0]
 800b5e4:	3301      	adds	r3, #1
}
 800b5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b5ea:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b5ec:	f7ff babc 	b.w	800ab68 <xTaskResumeAll>
}
 800b5f0:	bd10      	pop	{r4, pc}
 800b5f2:	bf00      	nop
 800b5f4:	24041044 	.word	0x24041044
 800b5f8:	24041048 	.word	0x24041048
 800b5fc:	24041054 	.word	0x24041054

0800b600 <xPortGetFreeHeapSize>:
}
 800b600:	4b01      	ldr	r3, [pc, #4]	; (800b608 <xPortGetFreeHeapSize+0x8>)
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	24041048 	.word	0x24041048

0800b60c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>:



osSemaphoreDef(console_sem);

Console::Console(UART_HandleTypeDef* uart) : console_uart(uart) {
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	6001      	str	r1, [r0, #0]
	console_uart = uart;
	console_semaphore = osSemaphoreCreate(osSemaphore(console_sem), 1);
 800b612:	2101      	movs	r1, #1
 800b614:	4802      	ldr	r0, [pc, #8]	; (800b620 <_ZN7ConsoleC1EP20__UART_HandleTypeDef+0x14>)
 800b616:	f7fe faf7 	bl	8009c08 <osSemaphoreCreate>
 800b61a:	6060      	str	r0, [r4, #4]
}
 800b61c:	4620      	mov	r0, r4
 800b61e:	bd10      	pop	{r4, pc}
 800b620:	0801ac80 	.word	0x0801ac80

0800b624 <_ZN7Console4lockEv>:

void Console::lock() {
	osSemaphoreWait(console_semaphore, 100 * portTICK_PERIOD_MS);
 800b624:	2164      	movs	r1, #100	; 0x64
 800b626:	6840      	ldr	r0, [r0, #4]
 800b628:	f7fe bb1a 	b.w	8009c60 <osSemaphoreWait>

0800b62c <_ZN7Console6unlockEv>:
}

void Console::unlock() {
	osSemaphoreRelease(console_semaphore);
 800b62c:	6840      	ldr	r0, [r0, #4]
 800b62e:	f7fe bb3c 	b.w	8009caa <osSemaphoreRelease>

0800b632 <_ZN7Console8transmitEPhm>:
}

void Console::transmit(uint8_t* buffer, uint32_t length) {
	HAL_UART_Transmit(console_uart, buffer, length, 0xFFFFFF);
 800b632:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800b636:	b292      	uxth	r2, r2
 800b638:	6800      	ldr	r0, [r0, #0]
 800b63a:	f7fd bff4 	b.w	8009626 <HAL_UART_Transmit>

0800b63e <_ZN7Console5printEPKc>:
}

void Console::print(const char* buffer) {
 800b63e:	b538      	push	{r3, r4, r5, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800b644:	f7ff f9f2 	bl	800aa2c <vTaskSuspendAll>
	transmit((uint8_t*) buffer, strlen(buffer));
 800b648:	4620      	mov	r0, r4
 800b64a:	f7f4 fe53 	bl	80002f4 <strlen>
 800b64e:	4621      	mov	r1, r4
 800b650:	4602      	mov	r2, r0
 800b652:	4628      	mov	r0, r5
 800b654:	f7ff ffed 	bl	800b632 <_ZN7Console8transmitEPhm>
	xTaskResumeAll();
}
 800b658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xTaskResumeAll();
 800b65c:	f7ff ba84 	b.w	800ab68 <xTaskResumeAll>

0800b660 <_ZN7Console6printfEPKcz>:

void Console::printf(const char *format, ...) {
 800b660:	b40e      	push	{r1, r2, r3}
 800b662:	b533      	push	{r0, r1, r4, r5, lr}
 800b664:	ab05      	add	r3, sp, #20
	va_list args;
	va_start(args, format);

	if(vsnprintf(this->buffer, CONSOLE_BUFFER_SIZE, format, args) > 0) {
 800b666:	f100 0508 	add.w	r5, r0, #8
void Console::printf(const char *format, ...) {
 800b66a:	4604      	mov	r4, r0
	if(vsnprintf(this->buffer, CONSOLE_BUFFER_SIZE, format, args) > 0) {
 800b66c:	f44f 7180 	mov.w	r1, #256	; 0x100
void Console::printf(const char *format, ...) {
 800b670:	f853 2b04 	ldr.w	r2, [r3], #4
	if(vsnprintf(this->buffer, CONSOLE_BUFFER_SIZE, format, args) > 0) {
 800b674:	4628      	mov	r0, r5
	va_start(args, format);
 800b676:	9301      	str	r3, [sp, #4]
	if(vsnprintf(this->buffer, CONSOLE_BUFFER_SIZE, format, args) > 0) {
 800b678:	f00c fc7c 	bl	8017f74 <vsniprintf>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	dd03      	ble.n	800b688 <_ZN7Console6printfEPKcz+0x28>
		print(this->buffer);
 800b680:	4629      	mov	r1, r5
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff ffdb 	bl	800b63e <_ZN7Console5printEPKc>
	}

	va_end(args);
}
 800b688:	b002      	add	sp, #8
 800b68a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b68e:	b003      	add	sp, #12
 800b690:	4770      	bx	lr
	...

0800b694 <_GLOBAL__sub_I_console>:
#include "Debug.h"

#include <usart.h>


Console console(&hlpuart1);
 800b694:	4901      	ldr	r1, [pc, #4]	; (800b69c <_GLOBAL__sub_I_console+0x8>)
 800b696:	4802      	ldr	r0, [pc, #8]	; (800b6a0 <_GLOBAL__sub_I_console+0xc>)
 800b698:	f7ff bfb8 	b.w	800b60c <_ZN7ConsoleC1EP20__UART_HandleTypeDef>
 800b69c:	24000dac 	.word	0x24000dac
 800b6a0:	24041060 	.word	0x24041060

0800b6a4 <_ZN7Monitor5enterEh>:
#include "Debug/Debug.h"

#include <stm32h7xx_hal.h>


bool Monitor::enter(uint8_t id) {
 800b6a4:	b570      	push	{r4, r5, r6, lr}
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	460c      	mov	r4, r1
	uint32_t time = HAL_GetTick();
 800b6aa:	f7f6 fcad 	bl	8002008 <HAL_GetTick>

	if(monitor_refresh_rate[id] == 0 || time - last_update[id] < 1000 / monitor_refresh_rate[id]) {
 800b6ae:	192b      	adds	r3, r5, r4
 800b6b0:	7c1b      	ldrb	r3, [r3, #16]
 800b6b2:	b1c3      	cbz	r3, 800b6e6 <_ZN7Monitor5enterEh+0x42>
 800b6b4:	eb05 0684 	add.w	r6, r5, r4, lsl #2
 800b6b8:	6a32      	ldr	r2, [r6, #32]
 800b6ba:	1a81      	subs	r1, r0, r2
 800b6bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c4:	4299      	cmp	r1, r3
 800b6c6:	d30e      	bcc.n	800b6e6 <_ZN7Monitor5enterEh+0x42>
		return false;
	}

	last_update[id] = time;
 800b6c8:	6230      	str	r0, [r6, #32]

	console.lock();
 800b6ca:	4808      	ldr	r0, [pc, #32]	; (800b6ec <_ZN7Monitor5enterEh+0x48>)
 800b6cc:	f7ff ffaa 	bl	800b624 <_ZN7Console4lockEv>

	console.printf("\e7"); // Save cursor
 800b6d0:	4907      	ldr	r1, [pc, #28]	; (800b6f0 <_ZN7Monitor5enterEh+0x4c>)
 800b6d2:	4806      	ldr	r0, [pc, #24]	; (800b6ec <_ZN7Monitor5enterEh+0x48>)
 800b6d4:	f7ff ffc4 	bl	800b660 <_ZN7Console6printfEPKcz>
	console.printf("\x1b[%u;0H", locations[id]); // Move cursor to monitor location
 800b6d8:	4804      	ldr	r0, [pc, #16]	; (800b6ec <_ZN7Monitor5enterEh+0x48>)
 800b6da:	5d2a      	ldrb	r2, [r5, r4]
 800b6dc:	4905      	ldr	r1, [pc, #20]	; (800b6f4 <_ZN7Monitor5enterEh+0x50>)
 800b6de:	f7ff ffbf 	bl	800b660 <_ZN7Console6printfEPKcz>

	return true;
 800b6e2:	2001      	movs	r0, #1
}
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	e7fc      	b.n	800b6e4 <_ZN7Monitor5enterEh+0x40>
 800b6ea:	bf00      	nop
 800b6ec:	24041060 	.word	0x24041060
 800b6f0:	0801aef8 	.word	0x0801aef8
 800b6f4:	0801ac88 	.word	0x0801ac88

0800b6f8 <_ZN7Monitor4exitEh>:

bool Monitor::exit(uint8_t id) {
	if(!monitor_refresh_rate[id]) {
 800b6f8:	4401      	add	r1, r0
bool Monitor::exit(uint8_t id) {
 800b6fa:	b508      	push	{r3, lr}
	if(!monitor_refresh_rate[id]) {
 800b6fc:	7c08      	ldrb	r0, [r1, #16]
 800b6fe:	b138      	cbz	r0, 800b710 <_ZN7Monitor4exitEh+0x18>
		return false;
	}

	console.printf("\e8"); // Restore cursor
 800b700:	4904      	ldr	r1, [pc, #16]	; (800b714 <_ZN7Monitor4exitEh+0x1c>)
 800b702:	4805      	ldr	r0, [pc, #20]	; (800b718 <_ZN7Monitor4exitEh+0x20>)
 800b704:	f7ff ffac 	bl	800b660 <_ZN7Console6printfEPKcz>

	console.unlock();
 800b708:	4803      	ldr	r0, [pc, #12]	; (800b718 <_ZN7Monitor4exitEh+0x20>)
 800b70a:	f7ff ff8f 	bl	800b62c <_ZN7Console6unlockEv>

	return true;
 800b70e:	2001      	movs	r0, #1
}
 800b710:	bd08      	pop	{r3, pc}
 800b712:	bf00      	nop
 800b714:	0801ac90 	.word	0x0801ac90
 800b718:	24041060 	.word	0x24041060

0800b71c <_ZN7Monitor6enableEhhh>:

void Monitor::enable(uint8_t id, uint8_t location, uint8_t refresh_rate) {
	locations[id] = location;
 800b71c:	5442      	strb	r2, [r0, r1]
	monitor_refresh_rate[id] = refresh_rate;
 800b71e:	4408      	add	r0, r1
 800b720:	7403      	strb	r3, [r0, #16]
}
 800b722:	4770      	bx	lr

0800b724 <_ZN7Monitor7disableEh>:

void Monitor::disable(uint8_t id) {
	monitor_refresh_rate[id] = 0;
 800b724:	4401      	add	r1, r0
 800b726:	2300      	movs	r3, #0
 800b728:	740b      	strb	r3, [r1, #16]
}
 800b72a:	4770      	bx	lr

0800b72c <_ZN8Profiler6enableEv>:
		}
	}
}

void Profiler::enable() {
	profiling_requested = true;
 800b72c:	2301      	movs	r3, #1

	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
		profilers[i].depth_to_display = -1;
 800b72e:	22ff      	movs	r2, #255	; 0xff
	profiling_requested = true;
 800b730:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 800b734:	f500 7350 	add.w	r3, r0, #832	; 0x340
		profilers[i].depth_to_display = -1;
 800b738:	7202      	strb	r2, [r0, #8]
	for(uint8_t i = 0; i < NUM_PROFILERS; i++) {
 800b73a:	3034      	adds	r0, #52	; 0x34
 800b73c:	4298      	cmp	r0, r3
 800b73e:	d1fb      	bne.n	800b738 <_ZN8Profiler6enableEv+0xc>
	}
}
 800b740:	4770      	bx	lr

0800b742 <_ZN8Profiler7disableEv>:

void Profiler::disable() {
	profiling = false;
 800b742:	2300      	movs	r3, #0
 800b744:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
}
 800b748:	4770      	bx	lr
	...

0800b74c <_ZN6Thread11__getSourceEv>:
#include "Libraries/Utils/Operators.h"
#include "Libraries/Utils/ExceptionTracker.h"

class Thread : public ExceptionTracker {
public:
	TRACK_EXCEPTIONS();
 800b74c:	4800      	ldr	r0, [pc, #0]	; (800b750 <_ZN6Thread11__getSourceEv+0x4>)
 800b74e:	4770      	bx	lr
 800b750:	0801ac93 	.word	0x0801ac93

0800b754 <_ZN5ShellD1Ev>:

#define CMD_BUFFER_SIZE 256



class Shell : public Thread {
 800b754:	4770      	bx	lr
	...

0800b758 <_ZN5Shell4initEv>:
Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
}

void Shell::init() {
	console.printf("\x1b[2J\x1b[H");
 800b758:	4805      	ldr	r0, [pc, #20]	; (800b770 <_ZN5Shell4initEv+0x18>)
 800b75a:	4906      	ldr	r1, [pc, #24]	; (800b774 <_ZN5Shell4initEv+0x1c>)
void Shell::init() {
 800b75c:	b508      	push	{r3, lr}
	console.printf("\x1b[2J\x1b[H");
 800b75e:	f7ff ff7f 	bl	800b660 <_ZN7Console6printfEPKcz>
	console.printf("----- EPFL Xplore Power Shell -----\r\n");
 800b762:	4905      	ldr	r1, [pc, #20]	; (800b778 <_ZN5Shell4initEv+0x20>)
 800b764:	4802      	ldr	r0, [pc, #8]	; (800b770 <_ZN5Shell4initEv+0x18>)
}
 800b766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	console.printf("----- EPFL Xplore Power Shell -----\r\n");
 800b76a:	f7ff bf79 	b.w	800b660 <_ZN7Console6printfEPKcz>
 800b76e:	bf00      	nop
 800b770:	24041060 	.word	0x24041060
 800b774:	0801aca6 	.word	0x0801aca6
 800b778:	0801acae 	.word	0x0801acae

0800b77c <_ZN5ShellD0Ev>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	4604      	mov	r4, r0
 800b780:	f44f 711c 	mov.w	r1, #624	; 0x270
 800b784:	f009 ff8c 	bl	80156a0 <_ZdlPvj>
 800b788:	4620      	mov	r0, r4
 800b78a:	bd10      	pop	{r4, pc}

0800b78c <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>:
Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	460e      	mov	r6, r1
 800b790:	4908      	ldr	r1, [pc, #32]	; (800b7b4 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x28>)
 800b792:	4604      	mov	r4, r0
 800b794:	4615      	mov	r5, r2
 800b796:	f009 fb5d 	bl	8014e54 <_ZN6ThreadC1EPKc>
 800b79a:	4b07      	ldr	r3, [pc, #28]	; (800b7b8 <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal+0x2c>)
}
 800b79c:	4620      	mov	r0, r4
Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	e9c4 3388 	strd	r3, r3, [r4, #544]	; 0x220
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 800b7a6:	f504 7390 	add.w	r3, r4, #288	; 0x120
Shell::Shell(UART_HandleTypeDef* uart, Terminal* terminal) : Thread("Shell"), uart(uart), terminal(terminal) {
 800b7aa:	e9c4 6506 	strd	r6, r5, [r4, #24]
	cmd.components[0].component = command_buffer; // Bind command structure to buffer
 800b7ae:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
}
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	0801acd4 	.word	0x0801acd4
 800b7b8:	0801ad28 	.word	0x0801ad28

0800b7bc <_ZN5Shell11receiveByteEc>:
		receiveByte(dma_buffer[0]);
	}
}


void Shell::receiveByte(char cbuf) {
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	4604      	mov	r4, r0
	if(cbuf == '\0') {
 800b7c0:	b329      	cbz	r1, 800b80e <_ZN5Shell11receiveByteEc+0x52>
		return;
	}

	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 800b7c2:	290a      	cmp	r1, #10
		command_buffer[command_index++] = cbuf;
 800b7c4:	f890 0228 	ldrb.w	r0, [r0, #552]	; 0x228
	if(cbuf != '\n' && cbuf != '\r' && command_index < CMD_BUFFER_SIZE) {
 800b7c8:	d022      	beq.n	800b810 <_ZN5Shell11receiveByteEc+0x54>
 800b7ca:	290d      	cmp	r1, #13
 800b7cc:	d020      	beq.n	800b810 <_ZN5Shell11receiveByteEc+0x54>
		command_buffer[command_index++] = cbuf;
 800b7ce:	1c42      	adds	r2, r0, #1
 800b7d0:	1823      	adds	r3, r4, r0

		if(cbuf == ' ') {
 800b7d2:	2920      	cmp	r1, #32
		command_buffer[command_index++] = cbuf;
 800b7d4:	b2d2      	uxtb	r2, r2
 800b7d6:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
 800b7da:	f883 1120 	strb.w	r1, [r3, #288]	; 0x120
		if(cbuf == ' ') {
 800b7de:	d116      	bne.n	800b80e <_ZN5Shell11receiveByteEc+0x52>
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 800b7e0:	f894 326c 	ldrb.w	r3, [r4, #620]	; 0x26c
 800b7e4:	f504 7690 	add.w	r6, r4, #288	; 0x120

			cmd.components[cmd.num_components].length = command_index - start_index - 1;
			cmd.num_components++;
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 800b7e8:	f502 7290 	add.w	r2, r2, #288	; 0x120
 800b7ec:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
			cmd.num_components++;
 800b7f0:	3301      	adds	r3, #1
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 800b7f2:	f8d5 122c 	ldr.w	r1, [r5, #556]	; 0x22c
			cmd.num_components++;
 800b7f6:	b2db      	uxtb	r3, r3
			uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 800b7f8:	1b89      	subs	r1, r1, r6
			cmd.components[cmd.num_components].length = command_index - start_index - 1;
 800b7fa:	1a40      	subs	r0, r0, r1
 800b7fc:	f885 0230 	strb.w	r0, [r5, #560]	; 0x230
			cmd.num_components++;
 800b800:	f884 326c 	strb.w	r3, [r4, #620]	; 0x26c
			cmd.components[cmd.num_components].component = &command_buffer[command_index];
 800b804:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800b808:	4414      	add	r4, r2
 800b80a:	f8c3 422c 	str.w	r4, [r3, #556]	; 0x22c
		command_index = 0;
		cmd.num_components = 0;
		cmd.components[0].length = 0;
		cmd.components[0].component = command_buffer;
	}
}
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t start_index = (&cmd.components[cmd.num_components].component[0] - &command_buffer[0]);
 800b810:	f894 126c 	ldrb.w	r1, [r4, #620]	; 0x26c
 800b814:	f504 7590 	add.w	r5, r4, #288	; 0x120
 800b818:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800b81c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800b820:	1b52      	subs	r2, r2, r5
		cmd.components[cmd.num_components].length = command_index - start_index;
 800b822:	1a86      	subs	r6, r0, r2
		if(command_index - start_index > 0) {
 800b824:	b2d2      	uxtb	r2, r2
		cmd.components[cmd.num_components].length = command_index - start_index;
 800b826:	f883 6230 	strb.w	r6, [r3, #560]	; 0x230
		if(command_index - start_index > 0) {
 800b82a:	1a83      	subs	r3, r0, r2
		terminal->execute(&cmd, &console);
 800b82c:	4a0a      	ldr	r2, [pc, #40]	; (800b858 <_ZN5Shell11receiveByteEc+0x9c>)
		if(command_index - start_index > 0) {
 800b82e:	2b00      	cmp	r3, #0
		terminal->execute(&cmd, &console);
 800b830:	69e0      	ldr	r0, [r4, #28]
			cmd.num_components++;
 800b832:	bfc8      	it	gt
 800b834:	1c4b      	addgt	r3, r1, #1
		terminal->execute(&cmd, &console);
 800b836:	f504 710b 	add.w	r1, r4, #556	; 0x22c
			cmd.num_components++;
 800b83a:	bfc8      	it	gt
 800b83c:	f884 326c 	strbgt.w	r3, [r4, #620]	; 0x26c
		terminal->execute(&cmd, &console);
 800b840:	f000 f834 	bl	800b8ac <_ZN8Terminal7executeEP12ShellCommandP7Console>
		command_index = 0;
 800b844:	2300      	movs	r3, #0
		cmd.components[0].component = command_buffer;
 800b846:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
		command_index = 0;
 800b84a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
		cmd.num_components = 0;
 800b84e:	f884 326c 	strb.w	r3, [r4, #620]	; 0x26c
		cmd.components[0].length = 0;
 800b852:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
		cmd.components[0].component = command_buffer;
 800b856:	e7da      	b.n	800b80e <_ZN5Shell11receiveByteEc+0x52>
 800b858:	24041060 	.word	0x24041060

0800b85c <_ZN5Shell4loopEv>:
void Shell::loop() {
 800b85c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status = HAL_UART_Receive(uart, dma_buffer, 1, 0);
 800b85e:	f100 0120 	add.w	r1, r0, #32
void Shell::loop() {
 800b862:	4604      	mov	r4, r0
	HAL_StatusTypeDef status = HAL_UART_Receive(uart, dma_buffer, 1, 0);
 800b864:	2300      	movs	r3, #0
 800b866:	2201      	movs	r2, #1
 800b868:	6980      	ldr	r0, [r0, #24]
 800b86a:	f7fd ff39 	bl	80096e0 <HAL_UART_Receive>
	if(status == HAL_OK) {
 800b86e:	b930      	cbnz	r0, 800b87e <_ZN5Shell4loopEv+0x22>
		receiveByte(dma_buffer[0]);
 800b870:	f894 1020 	ldrb.w	r1, [r4, #32]
 800b874:	4620      	mov	r0, r4
}
 800b876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		receiveByte(dma_buffer[0]);
 800b87a:	f7ff bf9f 	b.w	800b7bc <_ZN5Shell11receiveByteEc>
}
 800b87e:	bd10      	pop	{r4, pc}

0800b880 <_ZN16CommandComponent7matchesEPKc>:

struct CommandComponent {
	const char* component;
	uint8_t length;

	bool matches(const char* target) {
 800b880:	b530      	push	{r4, r5, lr}
		uint8_t i;

		for(i = 0; i < length; i++) {
 800b882:	2200      	movs	r2, #0
 800b884:	7905      	ldrb	r5, [r0, #4]
 800b886:	b2d3      	uxtb	r3, r2
			if(target[i] != component[i] || target[i] == '\0') {
 800b888:	5c8c      	ldrb	r4, [r1, r2]
		for(i = 0; i < length; i++) {
 800b88a:	429d      	cmp	r5, r3
 800b88c:	d908      	bls.n	800b8a0 <_ZN16CommandComponent7matchesEPKc+0x20>
			if(target[i] != component[i] || target[i] == '\0') {
 800b88e:	6803      	ldr	r3, [r0, #0]
 800b890:	5c9b      	ldrb	r3, [r3, r2]
 800b892:	42a3      	cmp	r3, r4
 800b894:	d108      	bne.n	800b8a8 <_ZN16CommandComponent7matchesEPKc+0x28>
 800b896:	3201      	adds	r2, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f4      	bne.n	800b886 <_ZN16CommandComponent7matchesEPKc+0x6>
				return false;
 800b89c:	4618      	mov	r0, r3
 800b89e:	e002      	b.n	800b8a6 <_ZN16CommandComponent7matchesEPKc+0x26>
			}
		}

		return target[i] == '\0';
 800b8a0:	fab4 f084 	clz	r0, r4
 800b8a4:	0940      	lsrs	r0, r0, #5
	}
 800b8a6:	bd30      	pop	{r4, r5, pc}
				return false;
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e7fc      	b.n	800b8a6 <_ZN16CommandComponent7matchesEPKc+0x26>

0800b8ac <_ZN8Terminal7executeEP12ShellCommandP7Console>:


#define EQUALS(index, str) (cmd->num_components > (index) && cmd->components[(index)].matches((str)))


void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 800b8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(cmd->num_components > 0) {
 800b8ae:	f891 6040 	ldrb.w	r6, [r1, #64]	; 0x40
void Terminal::execute(ShellCommand* cmd, Console* feedback) {
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	4615      	mov	r5, r2
	if(cmd->num_components > 0) {
 800b8b8:	2e00      	cmp	r6, #0
 800b8ba:	f000 8114 	beq.w	800bae6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x23a>
		if(EQUALS(0, "help")) {
 800b8be:	498b      	ldr	r1, [pc, #556]	; (800baec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x240>)
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f7ff ffdd 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b8c6:	b310      	cbz	r0, 800b90e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x62>
			feedback->printf("> Xplore Avionics available commands:\r\n");
 800b8c8:	4989      	ldr	r1, [pc, #548]	; (800baf0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x244>)
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7ff fec8 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> clear: clears the screen\r\n");
 800b8d0:	4988      	ldr	r1, [pc, #544]	; (800baf4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x248>)
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f7ff fec4 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> flash: flash memory management\r\n");
 800b8d8:	4987      	ldr	r1, [pc, #540]	; (800baf8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x24c>)
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f7ff fec0 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> help: shows this help page\r\n");
 800b8e0:	4986      	ldr	r1, [pc, #536]	; (800bafc <_ZN8Terminal7executeEP12ShellCommandP7Console+0x250>)
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f7ff febc 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> monitor: enables or disables a specific monitor\r\n");
 800b8e8:	4985      	ldr	r1, [pc, #532]	; (800bb00 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x254>)
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f7ff feb8 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> profiler: enables or disables the embedded profiler\r\n");
 800b8f0:	4984      	ldr	r1, [pc, #528]	; (800bb04 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x258>)
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f7ff feb4 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> reset: performs a software reset of the avionics\r\n");
 800b8f8:	4983      	ldr	r1, [pc, #524]	; (800bb08 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x25c>)
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f7ff feb0 	bl	800b660 <_ZN7Console6printfEPKcz>
			feedback->printf("> version: displays the current terminal version\r\n");
 800b900:	4982      	ldr	r1, [pc, #520]	; (800bb0c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x260>)
				} else {
					uint8_t device_id = atoi(cmd->components[2].component);
					monitor.disable(POWER_MONITORS | device_id);
				}

				feedback->printf("\x1b[2J");
 800b902:	4628      	mov	r0, r5
			}*/
		} else {
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
		}
	}
}
 800b904:	b003      	add	sp, #12
 800b906:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				feedback->printf("\x1b[2J");
 800b90a:	f7ff bea9 	b.w	800b660 <_ZN7Console6printfEPKcz>
		} else if(EQUALS(0, "version")) {
 800b90e:	4980      	ldr	r1, [pc, #512]	; (800bb10 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x264>)
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff ffb5 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b916:	b948      	cbnz	r0, 800b92c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x80>
		} else if(EQUALS(0, "reset")) {
 800b918:	497e      	ldr	r1, [pc, #504]	; (800bb14 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x268>)
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff ffb0 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b920:	b130      	cbz	r0, 800b930 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x84>
}
 800b922:	b003      	add	sp, #12
 800b924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			HAL_NVIC_SystemReset();
 800b928:	f7f7 b800 	b.w	800292c <HAL_NVIC_SystemReset>
			feedback->printf("> Xplore Avionics Terminal v1.0 by Arion Zimmermann\r\n");
 800b92c:	497a      	ldr	r1, [pc, #488]	; (800bb18 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x26c>)
 800b92e:	e7e8      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
		} else if(EQUALS(0, "time")) {
 800b930:	497a      	ldr	r1, [pc, #488]	; (800bb1c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x270>)
 800b932:	4620      	mov	r0, r4
 800b934:	f7ff ffa4 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b938:	b148      	cbz	r0, 800b94e <_ZN8Terminal7executeEP12ShellCommandP7Console+0xa2>
			feedback->printf("%d\r\n", HAL_GetTick());
 800b93a:	f7f6 fb65 	bl	8002008 <HAL_GetTick>
 800b93e:	4978      	ldr	r1, [pc, #480]	; (800bb20 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x274>)
 800b940:	4602      	mov	r2, r0
 800b942:	4628      	mov	r0, r5
}
 800b944:	b003      	add	sp, #12
 800b946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			feedback->printf("%d\r\n", HAL_GetTick());
 800b94a:	f7ff be89 	b.w	800b660 <_ZN7Console6printfEPKcz>
		} else if(EQUALS(0, "clear")) {
 800b94e:	4975      	ldr	r1, [pc, #468]	; (800bb24 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x278>)
 800b950:	4620      	mov	r0, r4
 800b952:	f7ff ff95 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b956:	b108      	cbz	r0, 800b95c <_ZN8Terminal7executeEP12ShellCommandP7Console+0xb0>
			feedback->printf("\x1b[2J\x1b[H\e7");
 800b958:	4973      	ldr	r1, [pc, #460]	; (800bb28 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x27c>)
 800b95a:	e7d2      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
		} else if(EQUALS(0, "flash")) {
 800b95c:	4973      	ldr	r1, [pc, #460]	; (800bb2c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x280>)
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff ff8e 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b964:	b9c8      	cbnz	r0, 800b99a <_ZN8Terminal7executeEP12ShellCommandP7Console+0xee>
		} else if(EQUALS(0, "profiler")) {
 800b966:	4972      	ldr	r1, [pc, #456]	; (800bb30 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x284>)
 800b968:	4620      	mov	r0, r4
 800b96a:	f7ff ff89 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b96e:	bb38      	cbnz	r0, 800b9c0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x114>
		} else if(EQUALS(0, "verbose")) {
 800b970:	4970      	ldr	r1, [pc, #448]	; (800bb34 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x288>)
 800b972:	4620      	mov	r0, r4
 800b974:	f7ff ff84 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d142      	bne.n	800ba02 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x156>
		} else if(EQUALS(0, "monitor")) {
 800b97c:	496e      	ldr	r1, [pc, #440]	; (800bb38 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x28c>)
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff ff7e 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b984:	2800      	cmp	r0, #0
 800b986:	d153      	bne.n	800ba30 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x184>
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	4628      	mov	r0, r5
 800b98c:	7922      	ldrb	r2, [r4, #4]
 800b98e:	496b      	ldr	r1, [pc, #428]	; (800bb3c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x290>)
}
 800b990:	b003      	add	sp, #12
 800b992:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			feedback->printf("> %.*s: command not found\r\n", cmd->components[0].length, cmd->components[0].component);
 800b996:	f7ff be63 	b.w	800b660 <_ZN7Console6printfEPKcz>
			if(EQUALS(1, "erase")) {
 800b99a:	2e01      	cmp	r6, #1
 800b99c:	f000 80a3 	beq.w	800bae6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x23a>
 800b9a0:	4967      	ldr	r1, [pc, #412]	; (800bb40 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x294>)
 800b9a2:	f104 0008 	add.w	r0, r4, #8
 800b9a6:	f7ff ff6b 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	f000 809b 	beq.w	800bae6 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x23a>
				feedback->printf("> Erasing flash memory... This may take a while.\r\n");
 800b9b0:	4964      	ldr	r1, [pc, #400]	; (800bb44 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x298>)
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f7ff fe54 	bl	800b660 <_ZN7Console6printfEPKcz>
				flash_erase_all();
 800b9b8:	f005 fab6 	bl	8010f28 <_Z15flash_erase_allv>
				feedback->printf("> Flash memory fully erased. Please reset the board.\r\n");
 800b9bc:	4962      	ldr	r1, [pc, #392]	; (800bb48 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x29c>)
 800b9be:	e7a0      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
			if(EQUALS(1, "enable")) {
 800b9c0:	2e01      	cmp	r6, #1
 800b9c2:	d013      	beq.n	800b9ec <_ZN8Terminal7executeEP12ShellCommandP7Console+0x140>
 800b9c4:	3408      	adds	r4, #8
 800b9c6:	4961      	ldr	r1, [pc, #388]	; (800bb4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a0>)
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7ff ff59 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b9ce:	b140      	cbz	r0, 800b9e2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x136>
				profiler.enable();
 800b9d0:	485f      	ldr	r0, [pc, #380]	; (800bb50 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a4>)
 800b9d2:	f7ff feab 	bl	800b72c <_ZN8Profiler6enableEv>
				feedback->printf("\x1b[2J");
 800b9d6:	495f      	ldr	r1, [pc, #380]	; (800bb54 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a8>)
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f7ff fe41 	bl	800b660 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now enabled\r\n");
 800b9de:	495e      	ldr	r1, [pc, #376]	; (800bb58 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2ac>)
 800b9e0:	e78f      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
			} else if(EQUALS(1, "disable")) {
 800b9e2:	495e      	ldr	r1, [pc, #376]	; (800bb5c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2b0>)
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f7ff ff4b 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800b9ea:	b908      	cbnz	r0, 800b9f0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x144>
				feedback->printf("> Usage: profiler { enable | disable }\r\n");
 800b9ec:	495c      	ldr	r1, [pc, #368]	; (800bb60 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2b4>)
 800b9ee:	e788      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
				profiler.disable();
 800b9f0:	4857      	ldr	r0, [pc, #348]	; (800bb50 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a4>)
 800b9f2:	f7ff fea6 	bl	800b742 <_ZN8Profiler7disableEv>
				feedback->printf("\x1b[2J");
 800b9f6:	4957      	ldr	r1, [pc, #348]	; (800bb54 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a8>)
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	f7ff fe31 	bl	800b660 <_ZN7Console6printfEPKcz>
				feedback->printf("> Profiler now disabled\r\n");
 800b9fe:	4959      	ldr	r1, [pc, #356]	; (800bb64 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2b8>)
 800ba00:	e77f      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
			if(EQUALS(1, "on")) {
 800ba02:	2e01      	cmp	r6, #1
 800ba04:	d00f      	beq.n	800ba26 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x17a>
 800ba06:	3408      	adds	r4, #8
 800ba08:	4957      	ldr	r1, [pc, #348]	; (800bb68 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2bc>)
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f7ff ff38 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800ba10:	4606      	mov	r6, r0
 800ba12:	b118      	cbz	r0, 800ba1c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x170>
				verbose = true;
 800ba14:	2301      	movs	r3, #1
				feedback->printf("> Verbose mode enabled\r\n");
 800ba16:	4955      	ldr	r1, [pc, #340]	; (800bb6c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c0>)
				verbose = true;
 800ba18:	703b      	strb	r3, [r7, #0]
				feedback->printf("> Verbose mode enabled\r\n");
 800ba1a:	e772      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
			} else if(EQUALS(1, "off")) {
 800ba1c:	4954      	ldr	r1, [pc, #336]	; (800bb70 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c4>)
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f7ff ff2e 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800ba24:	b908      	cbnz	r0, 800ba2a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x17e>
				feedback->printf("> Usage: verbose { on | off }\r\n");
 800ba26:	4953      	ldr	r1, [pc, #332]	; (800bb74 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2c8>)
 800ba28:	e76b      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
				feedback->printf("> Verbose mode disabled\r\n");
 800ba2a:	4953      	ldr	r1, [pc, #332]	; (800bb78 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2cc>)
				verbose = false;
 800ba2c:	703e      	strb	r6, [r7, #0]
				feedback->printf("> Verbose mode disabled\r\n");
 800ba2e:	e768      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
			if(EQUALS(1, "enable") && cmd->num_components >= 3) {
 800ba30:	2e01      	cmp	r6, #1
 800ba32:	d044      	beq.n	800babe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x212>
 800ba34:	f104 0708 	add.w	r7, r4, #8
 800ba38:	4944      	ldr	r1, [pc, #272]	; (800bb4c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a0>)
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	f7ff ff20 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d035      	beq.n	800bab0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x204>
 800ba44:	2e02      	cmp	r6, #2
 800ba46:	d033      	beq.n	800bab0 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x204>
				if(cmd->num_components > 3) {
 800ba48:	2e03      	cmp	r6, #3
 800ba4a:	d023      	beq.n	800ba94 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1e8>
					location = atoi(cmd->components[3].component);
 800ba4c:	69a0      	ldr	r0, [r4, #24]
 800ba4e:	f00a fa4f 	bl	8015ef0 <atoi>
				if(cmd->num_components > 4) {
 800ba52:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
					location = atoi(cmd->components[3].component);
 800ba56:	b2c2      	uxtb	r2, r0
				if(cmd->num_components > 4) {
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	d91c      	bls.n	800ba96 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1ea>
					refresh_rate = atoi(cmd->components[4].component);
 800ba5c:	6a20      	ldr	r0, [r4, #32]
 800ba5e:	9201      	str	r2, [sp, #4]
 800ba60:	f00a fa46 	bl	8015ef0 <atoi>
 800ba64:	9a01      	ldr	r2, [sp, #4]
 800ba66:	b2c6      	uxtb	r6, r0
				if(EQUALS(2, "summary")) {
 800ba68:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d907      	bls.n	800ba80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1d4>
 800ba70:	4942      	ldr	r1, [pc, #264]	; (800bb7c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 800ba72:	f104 0010 	add.w	r0, r4, #16
 800ba76:	9201      	str	r2, [sp, #4]
 800ba78:	f7ff ff02 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	b960      	cbnz	r0, 800ba9a <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1ee>
					uint8_t device_id = atoi(cmd->components[2].component);
 800ba80:	6920      	ldr	r0, [r4, #16]
 800ba82:	9201      	str	r2, [sp, #4]
 800ba84:	f00a fa34 	bl	8015ef0 <atoi>
 800ba88:	b2c1      	uxtb	r1, r0
					if(device_id < 7) {
 800ba8a:	9a01      	ldr	r2, [sp, #4]
 800ba8c:	2906      	cmp	r1, #6
 800ba8e:	d90b      	bls.n	800baa8 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1fc>
						feedback->printf("> Usage: Power monitor device ID not found\r\n");
 800ba90:	493b      	ldr	r1, [pc, #236]	; (800bb80 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d4>)
 800ba92:	e736      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
				uint8_t location = 0;
 800ba94:	2200      	movs	r2, #0
				uint8_t refresh_rate = 1;
 800ba96:	2601      	movs	r6, #1
 800ba98:	e7e6      	b.n	800ba68 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1bc>
					monitor.enable(SUMMARY_MONITOR, location, refresh_rate);
 800ba9a:	4633      	mov	r3, r6
 800ba9c:	2101      	movs	r1, #1
						monitor.enable(POWER_MONITORS | device_id, location, refresh_rate);
 800ba9e:	4839      	ldr	r0, [pc, #228]	; (800bb84 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 800baa0:	f7ff fe3c 	bl	800b71c <_ZN7Monitor6enableEhhh>
				feedback->printf("\x1b[2J");
 800baa4:	492b      	ldr	r1, [pc, #172]	; (800bb54 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2a8>)
 800baa6:	e72c      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
						monitor.enable(POWER_MONITORS | device_id, location, refresh_rate);
 800baa8:	4633      	mov	r3, r6
 800baaa:	f041 0108 	orr.w	r1, r1, #8
 800baae:	e7f6      	b.n	800ba9e <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1f2>
			} else if(EQUALS(1, "disable") && cmd->num_components == 3) {
 800bab0:	492a      	ldr	r1, [pc, #168]	; (800bb5c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2b0>)
 800bab2:	4638      	mov	r0, r7
 800bab4:	f7ff fee4 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800bab8:	b108      	cbz	r0, 800babe <_ZN8Terminal7executeEP12ShellCommandP7Console+0x212>
 800baba:	2e03      	cmp	r6, #3
 800babc:	d001      	beq.n	800bac2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x216>
				feedback->printf("> Usage: monitor { enable | disable } device_id [location] [refresh rate; default: 10]\r\n");
 800babe:	4932      	ldr	r1, [pc, #200]	; (800bb88 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2dc>)
 800bac0:	e71f      	b.n	800b902 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x56>
				if(EQUALS(2, "summary")) {
 800bac2:	492e      	ldr	r1, [pc, #184]	; (800bb7c <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d0>)
 800bac4:	f104 0010 	add.w	r0, r4, #16
 800bac8:	f7ff feda 	bl	800b880 <_ZN16CommandComponent7matchesEPKc>
 800bacc:	b948      	cbnz	r0, 800bae2 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x236>
					uint8_t device_id = atoi(cmd->components[2].component);
 800bace:	6920      	ldr	r0, [r4, #16]
 800bad0:	f00a fa0e 	bl	8015ef0 <atoi>
					monitor.disable(POWER_MONITORS | device_id);
 800bad4:	f040 0008 	orr.w	r0, r0, #8
 800bad8:	b2c1      	uxtb	r1, r0
					monitor.disable(SUMMARY_MONITOR);
 800bada:	482a      	ldr	r0, [pc, #168]	; (800bb84 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x2d8>)
 800badc:	f7ff fe22 	bl	800b724 <_ZN7Monitor7disableEh>
 800bae0:	e7e0      	b.n	800baa4 <_ZN8Terminal7executeEP12ShellCommandP7Console+0x1f8>
 800bae2:	2101      	movs	r1, #1
 800bae4:	e7f9      	b.n	800bada <_ZN8Terminal7executeEP12ShellCommandP7Console+0x22e>
}
 800bae6:	b003      	add	sp, #12
 800bae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baea:	bf00      	nop
 800baec:	0801ad3c 	.word	0x0801ad3c
 800baf0:	0801ad41 	.word	0x0801ad41
 800baf4:	0801ad69 	.word	0x0801ad69
 800baf8:	0801ad86 	.word	0x0801ad86
 800bafc:	0801ada9 	.word	0x0801ada9
 800bb00:	0801adc8 	.word	0x0801adc8
 800bb04:	0801adfc 	.word	0x0801adfc
 800bb08:	0801ae34 	.word	0x0801ae34
 800bb0c:	0801ae69 	.word	0x0801ae69
 800bb10:	0801ae9c 	.word	0x0801ae9c
 800bb14:	0801aea4 	.word	0x0801aea4
 800bb18:	0801aeaa 	.word	0x0801aeaa
 800bb1c:	0801aee0 	.word	0x0801aee0
 800bb20:	0801d66b 	.word	0x0801d66b
 800bb24:	0801aee5 	.word	0x0801aee5
 800bb28:	0801aef1 	.word	0x0801aef1
 800bb2c:	0801aeeb 	.word	0x0801aeeb
 800bb30:	0801aefb 	.word	0x0801aefb
 800bb34:	0801af74 	.word	0x0801af74
 800bb38:	0801afec 	.word	0x0801afec
 800bb3c:	0801b04b 	.word	0x0801b04b
 800bb40:	0801af04 	.word	0x0801af04
 800bb44:	0801af0a 	.word	0x0801af0a
 800bb48:	0801af3d 	.word	0x0801af3d
 800bb4c:	0801af7c 	.word	0x0801af7c
 800bb50:	240411c8 	.word	0x240411c8
 800bb54:	0801af83 	.word	0x0801af83
 800bb58:	0801af88 	.word	0x0801af88
 800bb5c:	0801afa1 	.word	0x0801afa1
 800bb60:	0801afa9 	.word	0x0801afa9
 800bb64:	0801afd2 	.word	0x0801afd2
 800bb68:	0801aea1 	.word	0x0801aea1
 800bb6c:	0801aff4 	.word	0x0801aff4
 800bb70:	0801b00d 	.word	0x0801b00d
 800bb74:	0801b011 	.word	0x0801b011
 800bb78:	0801b031 	.word	0x0801b031
 800bb7c:	0801b067 	.word	0x0801b067
 800bb80:	0801b06f 	.word	0x0801b06f
 800bb84:	24041168 	.word	0x24041168
 800bb88:	0801b09c 	.word	0x0801b09c

0800bb8c <_ZN11ChargeGauge11__getSourceEv>:

#include "RoCo/RoCo.h"

class ChargeGauge : public Gauge {
public:
	TRACK_EXCEPTIONS();
 800bb8c:	4800      	ldr	r0, [pc, #0]	; (800bb90 <_ZN11ChargeGauge11__getSourceEv+0x4>)
 800bb8e:	4770      	bx	lr
 800bb90:	0801b0f5 	.word	0x0801b0f5

0800bb94 <_ZN10LinkedListISt8functionIFvvEEE11__getSourceEv>:
};


template <typename T> class LinkedList : public ExceptionTracker {
public:
	TRACK_EXCEPTIONS();
 800bb94:	4800      	ldr	r0, [pc, #0]	; (800bb98 <_ZN10LinkedListISt8functionIFvvEEE11__getSourceEv+0x4>)
 800bb96:	4770      	bx	lr
 800bb98:	0801b111 	.word	0x0801b111

0800bb9c <_ZN10LinkedListIP9ComponentE11__getSourceEv>:
 800bb9c:	4800      	ldr	r0, [pc, #0]	; (800bba0 <_ZN10LinkedListIP9ComponentE11__getSourceEv+0x4>)
 800bb9e:	4770      	bx	lr
 800bba0:	0801b111 	.word	0x0801b111

0800bba4 <_ZN11ChargeGauge17handleBatteryInfoEhP17Power_BatteryInfo>:

ChargeGauge::~ChargeGauge() {

}

void ChargeGauge::handleBatteryInfo(uint8_t sender, Power_BatteryInfo* packet) {
 800bba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(packet->estimated_runtime >= 0 && packet->estimated_runtime < 1000) {
 800bba6:	6853      	ldr	r3, [r2, #4]
void ChargeGauge::handleBatteryInfo(uint8_t sender, Power_BatteryInfo* packet) {
 800bba8:	4604      	mov	r4, r0
 800bbaa:	4615      	mov	r5, r2
	if(packet->estimated_runtime >= 0 && packet->estimated_runtime < 1000) {
 800bbac:	ee07 3a90 	vmov	s15, r3
 800bbb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb8:	db13      	blt.n	800bbe2 <_ZN11ChargeGauge17handleBatteryInfoEhP17Power_BatteryInfo+0x3e>
 800bbba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800bbf4 <_ZN11ChargeGauge17handleBatteryInfoEhP17Power_BatteryInfo+0x50>
 800bbbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	d50c      	bpl.n	800bbe2 <_ZN11ChargeGauge17handleBatteryInfoEhP17Power_BatteryInfo+0x3e>
		char buffer[5];
		snprintf(buffer, 5, "%dm", (int) packet->estimated_runtime);
 800bbc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbcc:	2105      	movs	r1, #5
 800bbce:	4a0a      	ldr	r2, [pc, #40]	; (800bbf8 <_ZN11ChargeGauge17handleBatteryInfoEhP17Power_BatteryInfo+0x54>)
 800bbd0:	4668      	mov	r0, sp
 800bbd2:	ee17 3a90 	vmov	r3, s15
 800bbd6:	f00b fa83 	bl	80170e0 <sniprintf>
		remainingTime->setText(buffer);
 800bbda:	4669      	mov	r1, sp
 800bbdc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bbde:	f002 fba7 	bl	800e330 <_ZN4Text7setTextEPKc>
	}

	setLevel(packet->charge);
 800bbe2:	682b      	ldr	r3, [r5, #0]
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	ee00 3a10 	vmov	s0, r3
}
 800bbea:	b003      	add	sp, #12
 800bbec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	setLevel(packet->charge);
 800bbf0:	f002 bb0c 	b.w	800e20c <_ZN5Gauge8setLevelEf>
 800bbf4:	447a0000 	.word	0x447a0000
 800bbf8:	0801b138 	.word	0x0801b138

0800bbfc <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    {
	      const _Functor& __f = __source._M_access<_Functor>();
	      return const_cast<_Functor*>(std::__addressof(__f));
	    }
	  else // have stored a pointer
	    return __source._M_access<_Functor*>();
 800bbfc:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800bbfe:	6812      	ldr	r2, [r2, #0]
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800bc00:	b470      	push	{r4, r5, r6}
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800bc02:	689d      	ldr	r5, [r3, #8]
 800bc04:	685c      	ldr	r4, [r3, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	1066      	asrs	r6, r4, #1
 800bc0a:	7809      	ldrb	r1, [r1, #0]
 800bc0c:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800bc10:	07e4      	lsls	r4, r4, #31
 800bc12:	bf44      	itt	mi
 800bc14:	59ac      	ldrmi	r4, [r5, r6]
 800bc16:	58e3      	ldrmi	r3, [r4, r3]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 800bc18:	bc70      	pop	{r4, r5, r6}
 800bc1a:	4718      	bx	r3

0800bc1c <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4604      	mov	r4, r0
	switch (__op)
 800bc20:	b13a      	cbz	r2, 800bc32 <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 800bc22:	2a01      	cmp	r2, #1
 800bc24:	d008      	beq.n	800bc38 <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 800bc26:	2a02      	cmp	r2, #2
 800bc28:	d008      	beq.n	800bc3c <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 800bc2a:	2a03      	cmp	r2, #3
 800bc2c:	d010      	beq.n	800bc50 <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 800bc2e:	2000      	movs	r0, #0
 800bc30:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800bc32:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 800bc34:	6023      	str	r3, [r4, #0]
	}
 800bc36:	e7fa      	b.n	800bc2e <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800bc38:	680b      	ldr	r3, [r1, #0]
 800bc3a:	e7fb      	b.n	800bc34 <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 800bc3c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800bc3e:	200c      	movs	r0, #12
 800bc40:	f007 ff24 	bl	8013a8c <_Znwj>
 800bc44:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800bc46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc4e:	e7f1      	b.n	800bc34 <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 800bc50:	6800      	ldr	r0, [r0, #0]
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d0eb      	beq.n	800bc2e <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800bc56:	210c      	movs	r1, #12
 800bc58:	f009 fd22 	bl	80156a0 <_ZdlPvj>
 800bc5c:	e7e7      	b.n	800bc2e <_ZNSt17_Function_handlerIFvhP17Power_BatteryInfoESt5_BindIFM11ChargeGaugeFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800bc5e:	bf00      	nop
 800bc60:	0801b288 	.word	0x0801b288

0800bc64 <_ZN9ComponentD1Ev>:
class Component : public ExceptionTracker {
public:
	TRACK_EXCEPTIONS();

	Component();
	virtual ~Component() {};
 800bc64:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <_ZN9ComponentD1Ev+0x20>)
 800bc66:	b510      	push	{r4, lr}
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	4604      	mov	r4, r0
	}
}

template <class T> LinkedList<T>::~LinkedList() {
	osMutexDelete(mutex);
}
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <_ZN9ComponentD1Ev+0x24>)
 800bc6e:	62c3      	str	r3, [r0, #44]	; 0x2c
	osMutexDelete(mutex);
 800bc70:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bc72:	f7fd ffbf 	bl	8009bf4 <osMutexDelete>
}
 800bc76:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <_ZN9ComponentD1Ev+0x28>)
	osMutexDelete(mutex);
 800bc78:	6a20      	ldr	r0, [r4, #32]
}
 800bc7a:	61a3      	str	r3, [r4, #24]
	osMutexDelete(mutex);
 800bc7c:	f7fd ffba 	bl	8009bf4 <osMutexDelete>
 800bc80:	4620      	mov	r0, r4
 800bc82:	bd10      	pop	{r4, pc}
 800bc84:	0801c184 	.word	0x0801c184
 800bc88:	0801b2a8 	.word	0x0801b2a8
 800bc8c:	0801b29c 	.word	0x0801b29c

0800bc90 <_ZN11ChargeGaugeD1Ev>:



#include "Component.h"

class Gauge : public Component {
 800bc90:	4b03      	ldr	r3, [pc, #12]	; (800bca0 <_ZN11ChargeGaugeD1Ev+0x10>)
ChargeGauge::~ChargeGauge() {
 800bc92:	b510      	push	{r4, lr}
 800bc94:	4604      	mov	r4, r0
 800bc96:	6003      	str	r3, [r0, #0]
 800bc98:	f7ff ffe4 	bl	800bc64 <_ZN9ComponentD1Ev>
}
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	bd10      	pop	{r4, pc}
 800bca0:	0801c1b8 	.word	0x0801c1b8

0800bca4 <_ZN11ChargeGaugeD0Ev>:
ChargeGauge::~ChargeGauge() {
 800bca4:	b510      	push	{r4, lr}
 800bca6:	4604      	mov	r4, r0
}
 800bca8:	f7ff fff2 	bl	800bc90 <_ZN11ChargeGaugeD1Ev>
 800bcac:	2178      	movs	r1, #120	; 0x78
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f009 fcf6 	bl	80156a0 <_ZdlPvj>
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	bd10      	pop	{r4, pc}

0800bcb8 <_ZN9ComponentD0Ev>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	f7ff ffd2 	bl	800bc64 <_ZN9ComponentD1Ev>
 800bcc0:	216c      	movs	r1, #108	; 0x6c
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f009 fcec 	bl	80156a0 <_ZdlPvj>
 800bcc8:	4620      	mov	r0, r4
 800bcca:	bd10      	pop	{r4, pc}

0800bccc <_ZN11ChargeGaugeC1EP10MessageBus>:
ChargeGauge::ChargeGauge(MessageBus* bus) {
 800bccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bcce:	4604      	mov	r4, r0
 800bcd0:	460e      	mov	r6, r1
 800bcd2:	f002 fa8d 	bl	800e1f0 <_ZN5GaugeC1Ev>
 800bcd6:	4b1c      	ldr	r3, [pc, #112]	; (800bd48 <_ZN11ChargeGaugeC1EP10MessageBus+0x7c>)
	this->remainingTime = new Text();
 800bcd8:	20b4      	movs	r0, #180	; 0xb4
ChargeGauge::ChargeGauge(MessageBus* bus) {
 800bcda:	6023      	str	r3, [r4, #0]
	this->remainingTime = new Text();
 800bcdc:	f007 fed6 	bl	8013a8c <_Znwj>
 800bce0:	4605      	mov	r5, r0
 800bce2:	f002 fb11 	bl	800e308 <_ZN4TextC1Ev>
	add(remainingTime, 0.5f, 1.0f);
 800bce6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
	this->remainingTime = new Text();
 800bcf0:	6765      	str	r5, [r4, #116]	; 0x74
	add(remainingTime, 0.5f, 1.0f);
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800bcf8:	4429      	add	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 800bcfa:	2500      	movs	r5, #0
 800bcfc:	f001 ff8a 	bl	800dc14 <_ZN9Component3addEPS_ff>
	remainingTime->setText("...")->setAnchor(Center)->setFontSize(26);
 800bd00:	4912      	ldr	r1, [pc, #72]	; (800bd4c <_ZN11ChargeGaugeC1EP10MessageBus+0x80>)
 800bd02:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bd04:	f002 fb14 	bl	800e330 <_ZN4Text7setTextEPKc>
 800bd08:	2104      	movs	r1, #4
 800bd0a:	f002 fb23 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
 800bd0e:	211a      	movs	r1, #26
 800bd10:	f002 fb1d 	bl	800e34e <_ZN4Text11setFontSizeEh>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800bd14:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 800bd16:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800bd18:	f007 feb8 	bl	8013a8c <_Znwj>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <_ZN11ChargeGaugeC1EP10MessageBus+0x84>)
	bus->handle<Power_BatteryInfo>(std::bind(&ChargeGauge::handleBatteryInfo, this, std::placeholders::_1, std::placeholders::_2));
 800bd1e:	4669      	mov	r1, sp
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800bd20:	6084      	str	r4, [r0, #8]
 800bd22:	9000      	str	r0, [sp, #0]
 800bd24:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 800bd28:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <_ZN11ChargeGaugeC1EP10MessageBus+0x88>)
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800bd2e:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <_ZN11ChargeGaugeC1EP10MessageBus+0x8c>)
 800bd30:	9302      	str	r3, [sp, #8]
 800bd32:	f006 fb81 	bl	8012438 <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE>
      if (_M_manager)
 800bd36:	9b02      	ldr	r3, [sp, #8]
 800bd38:	b11b      	cbz	r3, 800bd42 <_ZN11ChargeGaugeC1EP10MessageBus+0x76>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800bd3a:	4669      	mov	r1, sp
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4798      	blx	r3
}
 800bd42:	4620      	mov	r0, r4
 800bd44:	b004      	add	sp, #16
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	0801b2d0 	.word	0x0801b2d0
 800bd4c:	0801b373 	.word	0x0801b373
 800bd50:	0800bba5 	.word	0x0800bba5
 800bd54:	0800bbfd 	.word	0x0800bbfd
 800bd58:	0800bc1d 	.word	0x0800bc1d

0800bd5c <_ZN9Component11__getSourceEv>:
	TRACK_EXCEPTIONS();
 800bd5c:	4800      	ldr	r0, [pc, #0]	; (800bd60 <_ZN9Component11__getSourceEv+0x4>)
 800bd5e:	4770      	bx	lr
 800bd60:	0801b2e8 	.word	0x0801b2e8

0800bd64 <_ZN4Text11__getSourceEv>:
	East
};

class Text : virtual public Component {
public:
	TRACK_EXCEPTIONS();
 800bd64:	4800      	ldr	r0, [pc, #0]	; (800bd68 <_ZN4Text11__getSourceEv+0x4>)
 800bd66:	4770      	bx	lr
 800bd68:	0801b31e 	.word	0x0801b31e

0800bd6c <_ZTv0_n12_N4Text11__getSourceEv>:
 800bd6c:	4800      	ldr	r0, [pc, #0]	; (800bd70 <_ZTv0_n12_N4Text11__getSourceEv+0x4>)
 800bd6e:	4770      	bx	lr
 800bd70:	0801b31e 	.word	0x0801b31e

0800bd74 <_ZN13DetailsScreen11__getSourceEv>:
#include "RoCo/RoCo.h"
#include "Sensors/PowerMonitors.h"

class DetailsScreen : public Screen {
public:
	TRACK_EXCEPTIONS();
 800bd74:	4800      	ldr	r0, [pc, #0]	; (800bd78 <_ZN13DetailsScreen11__getSourceEv+0x4>)
 800bd76:	4770      	bx	lr
 800bd78:	0801b34f 	.word	0x0801b34f

0800bd7c <_ZN6Button6renderEP8Renderer>:

#include "Box.h"
#include "Text.h"

class Button : public Box, public Text {
	virtual void render(Renderer* renderer) {
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4604      	mov	r4, r0
 800bd80:	460d      	mov	r5, r1
		Box::render(renderer);
 800bd82:	f001 fcff 	bl	800d784 <_ZN3Box6renderEP8Renderer>
		Text::render(renderer);
 800bd86:	4629      	mov	r1, r5
 800bd88:	f104 0008 	add.w	r0, r4, #8
	}
 800bd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Text::render(renderer);
 800bd90:	f002 ba40 	b.w	800e214 <_ZN4Text6renderEP8Renderer>

0800bd94 <_ZTv0_n20_N6Button6renderEP8Renderer>:
	virtual void render(Renderer* renderer) {
 800bd94:	f8d0 c000 	ldr.w	ip, [r0]
 800bd98:	f1ac 0c14 	sub.w	ip, ip, #20
 800bd9c:	f8dc c000 	ldr.w	ip, [ip]
 800bda0:	4460      	add	r0, ip
 800bda2:	e7eb      	b.n	800bd7c <_ZN6Button6renderEP8Renderer>

0800bda4 <_ZThn8_N6Button6renderEP8Renderer>:
 800bda4:	f1a0 0008 	sub.w	r0, r0, #8
 800bda8:	e7e8      	b.n	800bd7c <_ZN6Button6renderEP8Renderer>
	...

0800bdac <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E9_M_invokeERKSt9_Any_data>:
void DetailsScreen::restartSupply() {

	const PowerMonitor busID = monitorID;

	async([this, busID]() {
		restartButton->setEnabled(false);
 800bdac:	6803      	ldr	r3, [r0, #0]
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb2:	681a      	ldr	r2, [r3, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800bdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800bdbc:	b089      	sub	sp, #36	; 0x24

		Power_SupplyControl packet;
		packet.bus_id = monitorID;

		// Disable supply
		packet.command_mask = 0b01;
 800bdbe:	2501      	movs	r5, #1
		restartButton->setEnabled(false);
 800bdc0:	4418      	add	r0, r3
		packet.command_val = 0b00;
 800bdc2:	2700      	movs	r7, #0
		restartButton->setEnabled(false);
 800bdc4:	f002 f8af 	bl	800df26 <_ZN9Component10setEnabledEb>
		snprintf(buffer, 20, "%s 1/4...", toString(busID));
 800bdc8:	7920      	ldrb	r0, [r4, #4]
 800bdca:	f009 f881 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800bdce:	4a4c      	ldr	r2, [pc, #304]	; (800bf00 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E9_M_invokeERKSt9_Any_data+0x154>)
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2114      	movs	r1, #20
 800bdd4:	a803      	add	r0, sp, #12

		snprintf(buffer, 20, "%s 2/4...", toString(busID));
		restartButton->setText(buffer);

		// Disable controller
		packet.command_mask = 0b10;
 800bdd6:	2602      	movs	r6, #2
		snprintf(buffer, 20, "%s 1/4...", toString(busID));
 800bdd8:	f00b f982 	bl	80170e0 <sniprintf>
		restartButton->setText(buffer);
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	a903      	add	r1, sp, #12
 800bde0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bde2:	3008      	adds	r0, #8
 800bde4:	f002 faa4 	bl	800e330 <_ZN4Text7setTextEPKc>
		packet.bus_id = monitorID;
 800bde8:	6823      	ldr	r3, [r4, #0]
		MAKE_RELIABLE(packet);
 800bdea:	2103      	movs	r1, #3
 800bdec:	a801      	add	r0, sp, #4
		packet.bus_id = monitorID;
 800bdee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
		packet.command_mask = 0b01;
 800bdf2:	f88d 5005 	strb.w	r5, [sp, #5]
		packet.bus_id = monitorID;
 800bdf6:	f88d 3004 	strb.w	r3, [sp, #4]
		packet.command_val = 0b00;
 800bdfa:	f88d 7006 	strb.w	r7, [sp, #6]
		MAKE_RELIABLE(packet);
 800bdfe:	f006 fdd3 	bl	80129a8 <_Z5crc16PKht>
		bus->send(&packet);
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	a901      	add	r1, sp, #4
		MAKE_RELIABLE(packet);
 800be06:	f8ad 0007 	strh.w	r0, [sp, #7]
		bus->send(&packet);
 800be0a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800be0c:	f005 fc90 	bl	8011730 <_ZN10MessageBus4sendI19Power_SupplyControlEEbPT_>
		osDelay(500);
 800be10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be14:	f7fd fe97 	bl	8009b46 <osDelay>
		snprintf(buffer, 20, "%s 2/4...", toString(busID));
 800be18:	7920      	ldrb	r0, [r4, #4]
 800be1a:	f009 f859 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800be1e:	4a39      	ldr	r2, [pc, #228]	; (800bf04 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E9_M_invokeERKSt9_Any_data+0x158>)
 800be20:	4603      	mov	r3, r0
 800be22:	2114      	movs	r1, #20
 800be24:	a803      	add	r0, sp, #12
 800be26:	f00b f95b 	bl	80170e0 <sniprintf>
		restartButton->setText(buffer);
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	a903      	add	r1, sp, #12
 800be2e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800be30:	3008      	adds	r0, #8
 800be32:	f002 fa7d 	bl	800e330 <_ZN4Text7setTextEPKc>
		packet.command_val = 0b00;
		MAKE_RELIABLE(packet);
 800be36:	2103      	movs	r1, #3
 800be38:	a801      	add	r0, sp, #4
		packet.command_mask = 0b10;
 800be3a:	f88d 6005 	strb.w	r6, [sp, #5]
		packet.command_val = 0b00;
 800be3e:	f88d 7006 	strb.w	r7, [sp, #6]
		MAKE_RELIABLE(packet);
 800be42:	f006 fdb1 	bl	80129a8 <_Z5crc16PKht>
		bus->send(&packet);
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	a901      	add	r1, sp, #4
		MAKE_RELIABLE(packet);
 800be4a:	f8ad 0007 	strh.w	r0, [sp, #7]
		bus->send(&packet);
 800be4e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800be50:	f005 fc6e 	bl	8011730 <_ZN10MessageBus4sendI19Power_SupplyControlEEbPT_>

		osDelay(1000);
 800be54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800be58:	f7fd fe75 	bl	8009b46 <osDelay>

		snprintf(buffer, 20, "%s 3/4...", toString(busID));
 800be5c:	7920      	ldrb	r0, [r4, #4]
 800be5e:	f009 f837 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800be62:	4a29      	ldr	r2, [pc, #164]	; (800bf08 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E9_M_invokeERKSt9_Any_data+0x15c>)
 800be64:	4603      	mov	r3, r0
 800be66:	2114      	movs	r1, #20
 800be68:	a803      	add	r0, sp, #12
 800be6a:	f00b f939 	bl	80170e0 <sniprintf>
		restartButton->setText(buffer);
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	a903      	add	r1, sp, #12
 800be72:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800be74:	3008      	adds	r0, #8
 800be76:	f002 fa5b 	bl	800e330 <_ZN4Text7setTextEPKc>

		// Enable controller
		packet.command_mask = 0b10;
		packet.command_val = 0b10;
		MAKE_RELIABLE(packet);
 800be7a:	2103      	movs	r1, #3
 800be7c:	a801      	add	r0, sp, #4
		packet.command_mask = 0b10;
 800be7e:	f88d 6005 	strb.w	r6, [sp, #5]
		packet.command_val = 0b10;
 800be82:	f88d 6006 	strb.w	r6, [sp, #6]
		MAKE_RELIABLE(packet);
 800be86:	f006 fd8f 	bl	80129a8 <_Z5crc16PKht>
		bus->send(&packet);
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	a901      	add	r1, sp, #4
		MAKE_RELIABLE(packet);
 800be8e:	f8ad 0007 	strh.w	r0, [sp, #7]
		bus->send(&packet);
 800be92:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800be94:	f005 fc4c 	bl	8011730 <_ZN10MessageBus4sendI19Power_SupplyControlEEbPT_>

		osDelay(500);
 800be98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be9c:	f7fd fe53 	bl	8009b46 <osDelay>

		snprintf(buffer, 20, "%s 4/4...", toString(busID));
 800bea0:	7920      	ldrb	r0, [r4, #4]
 800bea2:	f009 f815 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800bea6:	4a19      	ldr	r2, [pc, #100]	; (800bf0c <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E9_M_invokeERKSt9_Any_data+0x160>)
 800bea8:	4603      	mov	r3, r0
 800beaa:	2114      	movs	r1, #20
 800beac:	a803      	add	r0, sp, #12
 800beae:	f00b f917 	bl	80170e0 <sniprintf>
		restartButton->setText(buffer);
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	a903      	add	r1, sp, #12
 800beb6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800beb8:	3008      	adds	r0, #8
 800beba:	f002 fa39 	bl	800e330 <_ZN4Text7setTextEPKc>

		// Enable supply
		packet.command_mask = 0b01;
		packet.command_val = 0b01;
		MAKE_RELIABLE(packet);
 800bebe:	2103      	movs	r1, #3
 800bec0:	a801      	add	r0, sp, #4
		packet.command_mask = 0b01;
 800bec2:	f88d 5005 	strb.w	r5, [sp, #5]
		packet.command_val = 0b01;
 800bec6:	f88d 5006 	strb.w	r5, [sp, #6]
		MAKE_RELIABLE(packet);
 800beca:	f006 fd6d 	bl	80129a8 <_Z5crc16PKht>
		bus->send(&packet);
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	a901      	add	r1, sp, #4
		MAKE_RELIABLE(packet);
 800bed2:	f8ad 0007 	strh.w	r0, [sp, #7]
		bus->send(&packet);
 800bed6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800bed8:	f005 fc2a 	bl	8011730 <_ZN10MessageBus4sendI19Power_SupplyControlEEbPT_>

		restartButton->setText("Restart");
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	490c      	ldr	r1, [pc, #48]	; (800bf10 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E9_M_invokeERKSt9_Any_data+0x164>)
 800bee0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bee2:	3008      	adds	r0, #8
 800bee4:	f002 fa24 	bl	800e330 <_ZN4Text7setTextEPKc>
		restartButton->setEnabled(true);
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	4629      	mov	r1, r5
 800beec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800bef4:	4418      	add	r0, r3
 800bef6:	f002 f816 	bl	800df26 <_ZN9Component10setEnabledEb>
      }
 800befa:	b009      	add	sp, #36	; 0x24
 800befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801b36d 	.word	0x0801b36d
 800bf04:	0801b377 	.word	0x0801b377
 800bf08:	0801b381 	.word	0x0801b381
 800bf0c:	0801b38b 	.word	0x0801b38b
 800bf10:	0801b395 	.word	0x0801b395

0800bf14 <_ZN13DetailsScreen13handleBusInfoEhP13Power_BusInfo>:
	});
}

void DetailsScreen::handleBusInfo(uint8_t sender, Power_BusInfo* packet) {
 800bf14:	b530      	push	{r4, r5, lr}
	if(packet->bus_id == monitorID) {
 800bf16:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
void DetailsScreen::handleBusInfo(uint8_t sender, Power_BusInfo* packet) {
 800bf1a:	4615      	mov	r5, r2
	if(packet->bus_id == monitorID) {
 800bf1c:	7812      	ldrb	r2, [r2, #0]
void DetailsScreen::handleBusInfo(uint8_t sender, Power_BusInfo* packet) {
 800bf1e:	b089      	sub	sp, #36	; 0x24
 800bf20:	4604      	mov	r4, r0
	if(packet->bus_id == monitorID) {
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d147      	bne.n	800bfb6 <_ZN13DetailsScreen13handleBusInfoEhP13Power_BusInfo+0xa2>
		char buffer[20];

		snprintf(buffer, 20, "Voltage: %.1fV", packet->voltage);
 800bf26:	f8d5 3001 	ldr.w	r3, [r5, #1]
 800bf2a:	2114      	movs	r1, #20
 800bf2c:	4a23      	ldr	r2, [pc, #140]	; (800bfbc <_ZN13DetailsScreen13handleBusInfoEhP13Power_BusInfo+0xa8>)
 800bf2e:	a803      	add	r0, sp, #12
 800bf30:	ee07 3a10 	vmov	s14, r3
 800bf34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800bf38:	ed8d 7b00 	vstr	d7, [sp]
 800bf3c:	f00b f8d0 	bl	80170e0 <sniprintf>
		voltage->setText(buffer);
 800bf40:	a903      	add	r1, sp, #12
 800bf42:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800bf46:	f002 f9f3 	bl	800e330 <_ZN4Text7setTextEPKc>

		snprintf(buffer, 20, "Power: %.1fW", packet->power);
 800bf4a:	f8d5 3005 	ldr.w	r3, [r5, #5]
 800bf4e:	4a1c      	ldr	r2, [pc, #112]	; (800bfc0 <_ZN13DetailsScreen13handleBusInfoEhP13Power_BusInfo+0xac>)
 800bf50:	2114      	movs	r1, #20
 800bf52:	ee07 3a10 	vmov	s14, r3
 800bf56:	a803      	add	r0, sp, #12
 800bf58:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800bf5c:	ed8d 7b00 	vstr	d7, [sp]
 800bf60:	f00b f8be 	bl	80170e0 <sniprintf>
		power->setText(buffer);
 800bf64:	a903      	add	r1, sp, #12
 800bf66:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bf6a:	f002 f9e1 	bl	800e330 <_ZN4Text7setTextEPKc>

		snprintf(buffer, 20, "Energy: %.1fWh", packet->energy);
 800bf6e:	f8d5 3009 	ldr.w	r3, [r5, #9]
 800bf72:	4a14      	ldr	r2, [pc, #80]	; (800bfc4 <_ZN13DetailsScreen13handleBusInfoEhP13Power_BusInfo+0xb0>)
 800bf74:	2114      	movs	r1, #20
 800bf76:	ee07 3a10 	vmov	s14, r3
 800bf7a:	a803      	add	r0, sp, #12
 800bf7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800bf80:	ed8d 7b00 	vstr	d7, [sp]
 800bf84:	f00b f8ac 	bl	80170e0 <sniprintf>
		energy->setText(buffer);
 800bf88:	a903      	add	r1, sp, #12
 800bf8a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800bf8e:	f002 f9cf 	bl	800e330 <_ZN4Text7setTextEPKc>

		snprintf(buffer, 20, "Temperature: %.1fC", packet->temperature);
 800bf92:	f8d5 3011 	ldr.w	r3, [r5, #17]
 800bf96:	2114      	movs	r1, #20
 800bf98:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <_ZN13DetailsScreen13handleBusInfoEhP13Power_BusInfo+0xb4>)
 800bf9a:	ee07 3a10 	vmov	s14, r3
 800bf9e:	a803      	add	r0, sp, #12
 800bfa0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800bfa4:	ed8d 7b00 	vstr	d7, [sp]
 800bfa8:	f00b f89a 	bl	80170e0 <sniprintf>
		temperature->setText(buffer);
 800bfac:	a903      	add	r1, sp, #12
 800bfae:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800bfb2:	f002 f9bd 	bl	800e330 <_ZN4Text7setTextEPKc>
	}
}
 800bfb6:	b009      	add	sp, #36	; 0x24
 800bfb8:	bd30      	pop	{r4, r5, pc}
 800bfba:	bf00      	nop
 800bfbc:	0801b39d 	.word	0x0801b39d
 800bfc0:	0801b3ac 	.word	0x0801b3ac
 800bfc4:	0801b3b9 	.word	0x0801b3b9
 800bfc8:	0801b3c8 	.word	0x0801b3c8

0800bfcc <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo>:

void DetailsScreen::handleSupplyInfo(uint8_t sender, Power_SupplyInfo* packet) {
 800bfcc:	b570      	push	{r4, r5, r6, lr}
	if(packet->bus_id == monitorID) {
 800bfce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
void DetailsScreen::handleSupplyInfo(uint8_t sender, Power_SupplyInfo* packet) {
 800bfd2:	4604      	mov	r4, r0
	if(packet->bus_id == monitorID) {
 800bfd4:	7811      	ldrb	r1, [r2, #0]
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	d13c      	bne.n	800c054 <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x88>
 800bfda:	7855      	ldrb	r5, [r2, #1]
		enum SupplyState state = (enum SupplyState) packet->state;

		status->setText(toString(state));
 800bfdc:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	f009 f93f 	bl	8015264 <_Z8toString11SupplyState>
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f002 f9a1 	bl	800e330 <_ZN4Text7setTextEPKc>

		if(state == SUPPLYING) {
 800bfee:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800bff2:	2d02      	cmp	r5, #2
			title->setOutlineColor(0x00FF00);
 800bff4:	6803      	ldr	r3, [r0, #0]
 800bff6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
		if(state == SUPPLYING) {
 800bffa:	d110      	bne.n	800c01e <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x52>
			title->setOutlineColor(0x00FF00);
 800bffc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800c000:	4418      	add	r0, r3
 800c002:	f001 ff83 	bl	800df0c <_ZN9Component15setOutlineColorEm>
			status->setOutlineColor(0x00FF00);
 800c006:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c00a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	f852 0c0c 	ldr.w	r0, [r2, #-12]
		} else if(state == SWITCHING || state == OFF || state == NO_DAC) {
			title->setOutlineColor(0xFFAA00);
			status->setOutlineColor(0xFFAA00);
		} else {
			title->setOutlineColor(0xFF0000);
			status->setOutlineColor(0xFF0000);
 800c014:	4418      	add	r0, r3
		}
	}
}
 800c016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			status->setOutlineColor(0xFF0000);
 800c01a:	f001 bf77 	b.w	800df0c <_ZN9Component15setOutlineColorEm>
		} else if(state == SWITCHING || state == OFF || state == NO_DAC) {
 800c01e:	2d01      	cmp	r5, #1
			title->setOutlineColor(0x00FF00);
 800c020:	4418      	add	r0, r3
		} else if(state == SWITCHING || state == OFF || state == NO_DAC) {
 800c022:	d901      	bls.n	800c028 <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x5c>
 800c024:	2d08      	cmp	r5, #8
 800c026:	d109      	bne.n	800c03c <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x70>
			title->setOutlineColor(0xFFAA00);
 800c028:	490b      	ldr	r1, [pc, #44]	; (800c058 <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x8c>)
 800c02a:	f001 ff6f 	bl	800df0c <_ZN9Component15setOutlineColorEm>
			status->setOutlineColor(0xFFAA00);
 800c02e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c032:	4909      	ldr	r1, [pc, #36]	; (800c058 <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x8c>)
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c03a:	e7eb      	b.n	800c014 <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x48>
			title->setOutlineColor(0xFF0000);
 800c03c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800c040:	f001 ff64 	bl	800df0c <_ZN9Component15setOutlineColorEm>
			status->setOutlineColor(0xFF0000);
 800c044:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c048:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c052:	e7df      	b.n	800c014 <_ZN13DetailsScreen16handleSupplyInfoEhP16Power_SupplyInfo+0x48>
}
 800c054:	bd70      	pop	{r4, r5, r6, pc}
 800c056:	bf00      	nop
 800c058:	00ffaa00 	.word	0x00ffaa00

0800c05c <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	    return __source._M_access<_Functor*>();
 800c05c:	6803      	ldr	r3, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c05e:	b410      	push	{r4}
 800c060:	6899      	ldr	r1, [r3, #8]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	1054      	asrs	r4, r2, #1
 800c068:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800c06c:	07d2      	lsls	r2, r2, #31
 800c06e:	bf48      	it	mi
 800c070:	590a      	ldrmi	r2, [r1, r4]
      }
 800c072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c076:	bf48      	it	mi
 800c078:	58d3      	ldrmi	r3, [r2, r3]
 800c07a:	4718      	bx	r3

0800c07c <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    return __source._M_access<_Functor*>();
 800c07c:	6803      	ldr	r3, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800c07e:	6812      	ldr	r2, [r2, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c080:	b470      	push	{r4, r5, r6}
 800c082:	689d      	ldr	r5, [r3, #8]
 800c084:	685c      	ldr	r4, [r3, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	1066      	asrs	r6, r4, #1
 800c08a:	7809      	ldrb	r1, [r1, #0]
 800c08c:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800c090:	07e4      	lsls	r4, r4, #31
 800c092:	bf44      	itt	mi
 800c094:	59ac      	ldrmi	r4, [r5, r6]
 800c096:	58e3      	ldrmi	r3, [r4, r3]
      }
 800c098:	bc70      	pop	{r4, r5, r6}
 800c09a:	4718      	bx	r3

0800c09c <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    return __source._M_access<_Functor*>();
 800c09c:	6803      	ldr	r3, [r0, #0]
 800c09e:	6812      	ldr	r2, [r2, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c0a0:	b470      	push	{r4, r5, r6}
 800c0a2:	689d      	ldr	r5, [r3, #8]
 800c0a4:	685c      	ldr	r4, [r3, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	1066      	asrs	r6, r4, #1
 800c0aa:	7809      	ldrb	r1, [r1, #0]
 800c0ac:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800c0b0:	07e4      	lsls	r4, r4, #31
 800c0b2:	bf44      	itt	mi
 800c0b4:	59ac      	ldrmi	r4, [r5, r6]
 800c0b6:	58e3      	ldrmi	r3, [r4, r3]
      }
 800c0b8:	bc70      	pop	{r4, r5, r6}
 800c0ba:	4718      	bx	r3

0800c0bc <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE9_M_invokeERKSt9_Any_data>:
	    return __source._M_access<_Functor*>();
 800c0bc:	6803      	ldr	r3, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c0be:	b430      	push	{r4, r5}
 800c0c0:	68dc      	ldr	r4, [r3, #12]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	7a19      	ldrb	r1, [r3, #8]
 800c0c6:	1055      	asrs	r5, r2, #1
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c0ce:	07d2      	lsls	r2, r2, #31
 800c0d0:	bf48      	it	mi
 800c0d2:	5962      	ldrmi	r2, [r4, r5]
      }
 800c0d4:	bc30      	pop	{r4, r5}
 800c0d6:	bf48      	it	mi
 800c0d8:	58d3      	ldrmi	r3, [r2, r3]
 800c0da:	4718      	bx	r3

0800c0dc <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c0dc:	4603      	mov	r3, r0
	switch (__op)
 800c0de:	b142      	cbz	r2, 800c0f2 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x16>
 800c0e0:	2a01      	cmp	r2, #1
 800c0e2:	d00a      	beq.n	800c0fa <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1e>
	  switch (__op)
 800c0e4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800c0e6:	bf04      	itt	eq
 800c0e8:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 800c0ec:	e9c3 0100 	strdeq	r0, r1, [r3]
	      break;
 800c0f0:	e001      	b.n	800c0f6 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c0f2:	4a03      	ldr	r2, [pc, #12]	; (800c100 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x24>)
 800c0f4:	6002      	str	r2, [r0, #0]
      }
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	4770      	bx	lr
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c0fa:	6001      	str	r1, [r0, #0]
	    break;
 800c0fc:	e7fb      	b.n	800c0f6 <_ZNSt17_Function_handlerIFvvEZN13DetailsScreen13restartSupplyEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1a>
 800c0fe:	bf00      	nop
 800c100:	0801b8e8 	.word	0x0801b8e8

0800c104 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4604      	mov	r4, r0
	switch (__op)
 800c108:	b13a      	cbz	r2, 800c11a <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 800c10a:	2a01      	cmp	r2, #1
 800c10c:	d008      	beq.n	800c120 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 800c10e:	2a02      	cmp	r2, #2
 800c110:	d008      	beq.n	800c124 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 800c112:	2a03      	cmp	r2, #3
 800c114:	d010      	beq.n	800c138 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 800c116:	2000      	movs	r0, #0
 800c118:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c11a:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 800c11c:	6023      	str	r3, [r4, #0]
	}
 800c11e:	e7fa      	b.n	800c116 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800c120:	680b      	ldr	r3, [r1, #0]
 800c122:	e7fb      	b.n	800c11c <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 800c124:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c126:	200c      	movs	r0, #12
 800c128:	f007 fcb0 	bl	8013a8c <_Znwj>
 800c12c:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c12e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c136:	e7f1      	b.n	800c11c <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 800c138:	6800      	ldr	r0, [r0, #0]
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d0eb      	beq.n	800c116 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800c13e:	210c      	movs	r1, #12
 800c140:	f009 faae 	bl	80156a0 <_ZdlPvj>
 800c144:	e7e7      	b.n	800c116 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800c146:	bf00      	nop
 800c148:	0801b7b0 	.word	0x0801b7b0

0800c14c <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4604      	mov	r4, r0
	switch (__op)
 800c150:	b13a      	cbz	r2, 800c162 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 800c152:	2a01      	cmp	r2, #1
 800c154:	d008      	beq.n	800c168 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 800c156:	2a02      	cmp	r2, #2
 800c158:	d008      	beq.n	800c16c <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 800c15a:	2a03      	cmp	r2, #3
 800c15c:	d010      	beq.n	800c180 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 800c15e:	2000      	movs	r0, #0
 800c160:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c162:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 800c164:	6023      	str	r3, [r4, #0]
	}
 800c166:	e7fa      	b.n	800c15e <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800c168:	680b      	ldr	r3, [r1, #0]
 800c16a:	e7fb      	b.n	800c164 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 800c16c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c16e:	200c      	movs	r0, #12
 800c170:	f007 fc8c 	bl	8013a8c <_Znwj>
 800c174:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c176:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c17a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c17e:	e7f1      	b.n	800c164 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 800c180:	6800      	ldr	r0, [r0, #0]
 800c182:	2800      	cmp	r0, #0
 800c184:	d0eb      	beq.n	800c15e <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800c186:	210c      	movs	r1, #12
 800c188:	f009 fa8a 	bl	80156a0 <_ZdlPvj>
 800c18c:	e7e7      	b.n	800c15e <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM13DetailsScreenFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800c18e:	bf00      	nop
 800c190:	0801b74c 	.word	0x0801b74c

0800c194 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	4605      	mov	r5, r0
	switch (__op)
 800c198:	b15a      	cbz	r2, 800c1b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x1e>
 800c19a:	2a01      	cmp	r2, #1
 800c19c:	d00d      	beq.n	800c1ba <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x26>
	  switch (__op)
 800c19e:	2a02      	cmp	r2, #2
 800c1a0:	d00d      	beq.n	800c1be <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2a>
 800c1a2:	2a03      	cmp	r2, #3
 800c1a4:	d107      	bne.n	800c1b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
	  delete __victim._M_access<_Functor*>();
 800c1a6:	6800      	ldr	r0, [r0, #0]
 800c1a8:	b128      	cbz	r0, 800c1b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
 800c1aa:	2110      	movs	r1, #16
 800c1ac:	f009 fa78 	bl	80156a0 <_ZdlPvj>
 800c1b0:	e001      	b.n	800c1b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c1b2:	4b08      	ldr	r3, [pc, #32]	; (800c1d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x40>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c1b4:	602b      	str	r3, [r5, #0]
      }
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 800c1ba:	680b      	ldr	r3, [r1, #0]
 800c1bc:	e7fa      	b.n	800c1b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x20>
	  __dest._M_access<_Functor*>() =
 800c1be:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c1c0:	2010      	movs	r0, #16
 800c1c2:	f007 fc63 	bl	8013a8c <_Znwj>
 800c1c6:	4604      	mov	r4, r0
	  __dest._M_access<_Functor*>() =
 800c1c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800c1cc:	602c      	str	r4, [r5, #0]
 800c1ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
 800c1d2:	e7f0      	b.n	800c1b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM9ComponentFPS2_bEP13DetailsScreenbEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
 800c1d4:	0801b6ec 	.word	0x0801b6ec

0800c1d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4604      	mov	r4, r0
	switch (__op)
 800c1dc:	b13a      	cbz	r2, 800c1ee <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 800c1de:	2a01      	cmp	r2, #1
 800c1e0:	d008      	beq.n	800c1f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1c>
	  switch (__op)
 800c1e2:	2a02      	cmp	r2, #2
 800c1e4:	d008      	beq.n	800c1f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x20>
 800c1e6:	2a03      	cmp	r2, #3
 800c1e8:	d010      	beq.n	800c20c <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x34>
      }
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800c1ee:	4b0b      	ldr	r3, [pc, #44]	; (800c21c <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 800c1f0:	6023      	str	r3, [r4, #0]
	}
 800c1f2:	e7fa      	b.n	800c1ea <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800c1f4:	680b      	ldr	r3, [r1, #0]
 800c1f6:	e7fb      	b.n	800c1f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 800c1f8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c1fa:	200c      	movs	r0, #12
 800c1fc:	f007 fc46 	bl	8013a8c <_Znwj>
 800c200:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c202:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c20a:	e7f1      	b.n	800c1f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 800c20c:	6800      	ldr	r0, [r0, #0]
 800c20e:	2800      	cmp	r0, #0
 800c210:	d0eb      	beq.n	800c1ea <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
 800c212:	210c      	movs	r1, #12
 800c214:	f009 fa44 	bl	80156a0 <_ZdlPvj>
 800c218:	e7e7      	b.n	800c1ea <_ZNSt17_Function_handlerIFvvESt5_BindIFM13DetailsScreenFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x12>
 800c21a:	bf00      	nop
 800c21c:	0801b6b0 	.word	0x0801b6b0

0800c220 <_ZNSt14_Function_baseD1Ev>:
      if (_M_manager)
 800c220:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 800c222:	b510      	push	{r4, lr}
 800c224:	4604      	mov	r4, r0
      if (_M_manager)
 800c226:	b113      	cbz	r3, 800c22e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800c228:	2203      	movs	r2, #3
 800c22a:	4601      	mov	r1, r0
 800c22c:	4798      	blx	r3
    }
 800c22e:	4620      	mov	r0, r4
 800c230:	bd10      	pop	{r4, pc}
	...

0800c234 <_ZN13DetailsScreen13restartSupplyEv>:
void DetailsScreen::restartSupply() {
 800c234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
 800c236:	4b09      	ldr	r3, [pc, #36]	; (800c25c <_ZN13DetailsScreen13restartSupplyEv+0x28>)
	async([this, busID]() {
 800c238:	4669      	mov	r1, sp
	const PowerMonitor busID = monitorID;
 800c23a:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 800c23e:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <_ZN13DetailsScreen13restartSupplyEv+0x2c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c242:	f88d 2004 	strb.w	r2, [sp, #4]
	    _M_manager = &_My_handler::_M_manager;
 800c246:	9302      	str	r3, [sp, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c248:	9000      	str	r0, [sp, #0]
	async([this, busID]() {
 800c24a:	f001 fe88 	bl	800df5e <_ZN9Component5asyncESt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 800c24e:	4668      	mov	r0, sp
 800c250:	f7ff ffe6 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 800c254:	b005      	add	sp, #20
 800c256:	f85d fb04 	ldr.w	pc, [sp], #4
 800c25a:	bf00      	nop
 800c25c:	0800bdad 	.word	0x0800bdad
 800c260:	0800c0dd 	.word	0x0800c0dd

0800c264 <_ZN13DetailsScreenD1Ev>:
DetailsScreen::~DetailsScreen() {
 800c264:	4b1e      	ldr	r3, [pc, #120]	; (800c2e0 <_ZN13DetailsScreenD1Ev+0x7c>)
 800c266:	b510      	push	{r4, lr}
 800c268:	4604      	mov	r4, r0
 800c26a:	6003      	str	r3, [r0, #0]
	delete mainFrame;
 800c26c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800c26e:	b110      	cbz	r0, 800c276 <_ZN13DetailsScreenD1Ev+0x12>
 800c270:	6803      	ldr	r3, [r0, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	4798      	blx	r3
	delete restartButton;
 800c276:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c278:	b110      	cbz	r0, 800c280 <_ZN13DetailsScreenD1Ev+0x1c>
 800c27a:	6803      	ldr	r3, [r0, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	4798      	blx	r3
	delete closeButton;
 800c280:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c282:	b110      	cbz	r0, 800c28a <_ZN13DetailsScreenD1Ev+0x26>
 800c284:	6803      	ldr	r3, [r0, #0]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	4798      	blx	r3
	delete title;
 800c28a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c28e:	b110      	cbz	r0, 800c296 <_ZN13DetailsScreenD1Ev+0x32>
 800c290:	6803      	ldr	r3, [r0, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	4798      	blx	r3
	delete status;
 800c296:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c29a:	b110      	cbz	r0, 800c2a2 <_ZN13DetailsScreenD1Ev+0x3e>
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	4798      	blx	r3
	delete voltage;
 800c2a2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c2a6:	b110      	cbz	r0, 800c2ae <_ZN13DetailsScreenD1Ev+0x4a>
 800c2a8:	6803      	ldr	r3, [r0, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	4798      	blx	r3
	delete power;
 800c2ae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c2b2:	b110      	cbz	r0, 800c2ba <_ZN13DetailsScreenD1Ev+0x56>
 800c2b4:	6803      	ldr	r3, [r0, #0]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4798      	blx	r3
	delete energy;
 800c2ba:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c2be:	b110      	cbz	r0, 800c2c6 <_ZN13DetailsScreenD1Ev+0x62>
 800c2c0:	6803      	ldr	r3, [r0, #0]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	4798      	blx	r3
	delete temperature;
 800c2c6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c2ca:	b110      	cbz	r0, 800c2d2 <_ZN13DetailsScreenD1Ev+0x6e>
 800c2cc:	6803      	ldr	r3, [r0, #0]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	4798      	blx	r3
#ifndef LIBRARIES_EMBEDDEDGL_SCREEN_H_
#define LIBRARIES_EMBEDDEDGL_SCREEN_H_

#include "Components/Component.h"

class Screen : public Component {
 800c2d2:	4b04      	ldr	r3, [pc, #16]	; (800c2e4 <_ZN13DetailsScreenD1Ev+0x80>)
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	f7ff fcc4 	bl	800bc64 <_ZN9ComponentD1Ev>
}
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bd10      	pop	{r4, pc}
 800c2e0:	0801b934 	.word	0x0801b934
 800c2e4:	0801c268 	.word	0x0801c268

0800c2e8 <_ZN13DetailsScreenD0Ev>:
DetailsScreen::~DetailsScreen() {
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	4604      	mov	r4, r0
}
 800c2ec:	f7ff ffba 	bl	800c264 <_ZN13DetailsScreenD1Ev>
 800c2f0:	2198      	movs	r1, #152	; 0x98
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f009 f9d4 	bl	80156a0 <_ZdlPvj>
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	bd10      	pop	{r4, pc}

0800c2fc <_ZN6ButtonC2Ev>:
class Button : public Box, public Text {
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4604      	mov	r4, r0
 800c300:	460d      	mov	r5, r1
 800c302:	3104      	adds	r1, #4
 800c304:	f001 fba2 	bl	800da4c <_ZN3BoxC2Ev>
 800c308:	f105 010c 	add.w	r1, r5, #12
 800c30c:	f104 0008 	add.w	r0, r4, #8
 800c310:	f001 ffee 	bl	800e2f0 <_ZN4TextC2Ev>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	696a      	ldr	r2, [r5, #20]
 800c318:	4620      	mov	r0, r4
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c320:	50e2      	str	r2, [r4, r3]
 800c322:	69ab      	ldr	r3, [r5, #24]
 800c324:	60a3      	str	r3, [r4, #8]
 800c326:	bd38      	pop	{r3, r4, r5, pc}

0800c328 <_ZN6ButtonC1Ev>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4604      	mov	r4, r0
 800c32c:	4d0b      	ldr	r5, [pc, #44]	; (800c35c <_ZN6ButtonC1Ev+0x34>)
 800c32e:	3050      	adds	r0, #80	; 0x50
 800c330:	f001 fbf4 	bl	800db1c <_ZN9ComponentC1Ev>
 800c334:	4629      	mov	r1, r5
 800c336:	4620      	mov	r0, r4
 800c338:	f001 fb88 	bl	800da4c <_ZN3BoxC2Ev>
 800c33c:	f105 0108 	add.w	r1, r5, #8
 800c340:	f104 0008 	add.w	r0, r4, #8
 800c344:	f001 ffd4 	bl	800e2f0 <_ZN4TextC2Ev>
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <_ZN6ButtonC1Ev+0x38>)
 800c34a:	4620      	mov	r0, r4
 800c34c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	3318      	adds	r3, #24
 800c354:	6522      	str	r2, [r4, #80]	; 0x50
 800c356:	60a3      	str	r3, [r4, #8]
 800c358:	bd38      	pop	{r3, r4, r5, pc}
 800c35a:	bf00      	nop
 800c35c:	0801b85c 	.word	0x0801b85c
 800c360:	0801b880 	.word	0x0801b880

0800c364 <_ZN13DetailsScreenC1EP10MessageBus>:
DetailsScreen::DetailsScreen(MessageBus* bus) : bus(bus) {
 800c364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c366:	b085      	sub	sp, #20
 800c368:	4604      	mov	r4, r0
 800c36a:	460d      	mov	r5, r1
 800c36c:	f001 fbd6 	bl	800db1c <_ZN9ComponentC1Ev>
 800c370:	4bc5      	ldr	r3, [pc, #788]	; (800c688 <_ZN13DetailsScreenC1EP10MessageBus+0x324>)
	setBackgroundColor(0);
 800c372:	2100      	movs	r1, #0
 800c374:	4620      	mov	r0, r4
DetailsScreen::DetailsScreen(MessageBus* bus) : bus(bus) {
 800c376:	66e5      	str	r5, [r4, #108]	; 0x6c
 800c378:	6023      	str	r3, [r4, #0]
	setBackgroundColor(0);
 800c37a:	f001 fdcc 	bl	800df16 <_ZN9Component18setBackgroundColorEm>
	setAlpha(0xBF);
 800c37e:	21bf      	movs	r1, #191	; 0xbf
 800c380:	4620      	mov	r0, r4
 800c382:	f001 fdbd 	bl	800df00 <_ZN9Component8setAlphaEh>
	this->mainFrame = new Box();
 800c386:	2074      	movs	r0, #116	; 0x74
 800c388:	f007 fb80 	bl	8013a8c <_Znwj>
 800c38c:	4606      	mov	r6, r0
 800c38e:	f001 fb69 	bl	800da64 <_ZN3BoxC1Ev>
	this->restartButton = new Button();
 800c392:	20bc      	movs	r0, #188	; 0xbc
	this->mainFrame = new Box();
 800c394:	6766      	str	r6, [r4, #116]	; 0x74
	this->restartButton = new Button();
 800c396:	f007 fb79 	bl	8013a8c <_Znwj>
 800c39a:	4606      	mov	r6, r0
 800c39c:	22bc      	movs	r2, #188	; 0xbc
 800c39e:	2100      	movs	r1, #0
 800c3a0:	f009 fef6 	bl	8016190 <memset>
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff ffbf 	bl	800c328 <_ZN6ButtonC1Ev>
 800c3aa:	67a6      	str	r6, [r4, #120]	; 0x78
	this->closeButton = new Button();
 800c3ac:	20bc      	movs	r0, #188	; 0xbc
 800c3ae:	f007 fb6d 	bl	8013a8c <_Znwj>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	22bc      	movs	r2, #188	; 0xbc
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	f009 feea 	bl	8016190 <memset>
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7ff ffb3 	bl	800c328 <_ZN6ButtonC1Ev>
 800c3c2:	67e6      	str	r6, [r4, #124]	; 0x7c
	this->title = new Text();
 800c3c4:	20b4      	movs	r0, #180	; 0xb4
 800c3c6:	f007 fb61 	bl	8013a8c <_Znwj>
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	f001 ff9c 	bl	800e308 <_ZN4TextC1Ev>
	this->status = new Text();
 800c3d0:	20b4      	movs	r0, #180	; 0xb4
	this->title = new Text();
 800c3d2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	this->status = new Text();
 800c3d6:	f007 fb59 	bl	8013a8c <_Znwj>
 800c3da:	4606      	mov	r6, r0
 800c3dc:	f001 ff94 	bl	800e308 <_ZN4TextC1Ev>
	this->voltage = new Text();
 800c3e0:	20b4      	movs	r0, #180	; 0xb4
	this->status = new Text();
 800c3e2:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	this->voltage = new Text();
 800c3e6:	f007 fb51 	bl	8013a8c <_Znwj>
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	f001 ff8c 	bl	800e308 <_ZN4TextC1Ev>
	this->power = new Text();
 800c3f0:	20b4      	movs	r0, #180	; 0xb4
	this->voltage = new Text();
 800c3f2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
	this->power = new Text();
 800c3f6:	f007 fb49 	bl	8013a8c <_Znwj>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	f001 ff84 	bl	800e308 <_ZN4TextC1Ev>
	this->energy = new Text();
 800c400:	20b4      	movs	r0, #180	; 0xb4
	this->power = new Text();
 800c402:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
	this->energy = new Text();
 800c406:	f007 fb41 	bl	8013a8c <_Znwj>
 800c40a:	4606      	mov	r6, r0
 800c40c:	f001 ff7c 	bl	800e308 <_ZN4TextC1Ev>
	this->temperature = new Text();
 800c410:	20b4      	movs	r0, #180	; 0xb4
	this->energy = new Text();
 800c412:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
	this->temperature = new Text();
 800c416:	f007 fb39 	bl	8013a8c <_Znwj>
 800c41a:	4606      	mov	r6, r0
 800c41c:	f001 ff74 	bl	800e308 <_ZN4TextC1Ev>
	if(mainFrame == nullptr || restartButton == nullptr || closeButton == nullptr || title == nullptr || status == nullptr
 800c420:	6f63      	ldr	r3, [r4, #116]	; 0x74
	this->temperature = new Text();
 800c422:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	if(mainFrame == nullptr || restartButton == nullptr || closeButton == nullptr || title == nullptr || status == nullptr
 800c426:	b193      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
 800c428:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c42a:	b183      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
 800c42c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c42e:	b173      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
 800c430:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c434:	b15b      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
 800c436:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c43a:	b143      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
			|| voltage == nullptr || power == nullptr || energy == nullptr || temperature == nullptr) {
 800c43c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800c440:	b12b      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
 800c442:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c446:	b113      	cbz	r3, 800c44e <_ZN13DetailsScreenC1EP10MessageBus+0xea>
 800c448:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c44c:	b923      	cbnz	r3, 800c458 <_ZN13DetailsScreenC1EP10MessageBus+0xf4>
		throwException("MemoryAllocationFailure");
 800c44e:	221c      	movs	r2, #28
 800c450:	498e      	ldr	r1, [pc, #568]	; (800c68c <_ZN13DetailsScreenC1EP10MessageBus+0x328>)
 800c452:	4620      	mov	r0, r4
 800c454:	f007 faf4 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
	mainFrame->setAlpha(0xFF);
 800c458:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c45a:	21ff      	movs	r1, #255	; 0xff
    _Function_base() : _M_manager(nullptr) { }
 800c45c:	2600      	movs	r6, #0
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c464:	4418      	add	r0, r3
 800c466:	f001 fd4b 	bl	800df00 <_ZN9Component8setAlphaEh>
	mainFrame->setBackgroundColor(BACKGROUND_COLOR);
 800c46a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c46c:	4988      	ldr	r1, [pc, #544]	; (800c690 <_ZN13DetailsScreenC1EP10MessageBus+0x32c>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c474:	4418      	add	r0, r3
 800c476:	f001 fd4e 	bl	800df16 <_ZN9Component18setBackgroundColorEm>
	mainFrame->setOutlineColor(OUTLINE_COLOR);
 800c47a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c47c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800c486:	4418      	add	r0, r3
 800c488:	f001 fd40 	bl	800df0c <_ZN9Component15setOutlineColorEm>
	title->setText("Title")->setAnchor(NorthEast);
 800c48c:	4981      	ldr	r1, [pc, #516]	; (800c694 <_ZN13DetailsScreenC1EP10MessageBus+0x330>)
 800c48e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c492:	f001 ff4d 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c496:	2102      	movs	r1, #2
 800c498:	f001 ff5c 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
	status->setText("Status")->setFontSize(28)->setAnchor(NorthEast);
 800c49c:	497e      	ldr	r1, [pc, #504]	; (800c698 <_ZN13DetailsScreenC1EP10MessageBus+0x334>)
 800c49e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c4a2:	f001 ff45 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c4a6:	211c      	movs	r1, #28
 800c4a8:	f001 ff51 	bl	800e34e <_ZN4Text11setFontSizeEh>
 800c4ac:	2102      	movs	r1, #2
 800c4ae:	f001 ff51 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
	voltage->setText("Voltage: 0.0V")->setAnchor(NorthWest)->setFontSize(27);
 800c4b2:	497a      	ldr	r1, [pc, #488]	; (800c69c <_ZN13DetailsScreenC1EP10MessageBus+0x338>)
 800c4b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c4b8:	f001 ff3a 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c4bc:	2100      	movs	r1, #0
 800c4be:	f001 ff49 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
 800c4c2:	211b      	movs	r1, #27
 800c4c4:	f001 ff43 	bl	800e34e <_ZN4Text11setFontSizeEh>
	power->setText("Power: 0.0W")->setAnchor(NorthWest)->setFontSize(27);
 800c4c8:	4975      	ldr	r1, [pc, #468]	; (800c6a0 <_ZN13DetailsScreenC1EP10MessageBus+0x33c>)
 800c4ca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c4ce:	f001 ff2f 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f001 ff3e 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
 800c4d8:	211b      	movs	r1, #27
 800c4da:	f001 ff38 	bl	800e34e <_ZN4Text11setFontSizeEh>
	energy->setText("Energy: 0.0Wh")->setAnchor(NorthWest)->setFontSize(27);
 800c4de:	4971      	ldr	r1, [pc, #452]	; (800c6a4 <_ZN13DetailsScreenC1EP10MessageBus+0x340>)
 800c4e0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c4e4:	f001 ff24 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f001 ff33 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
 800c4ee:	211b      	movs	r1, #27
 800c4f0:	f001 ff2d 	bl	800e34e <_ZN4Text11setFontSizeEh>
	temperature->setText("Temperature: 0.0C")->setAnchor(NorthWest)->setFontSize(27);
 800c4f4:	496c      	ldr	r1, [pc, #432]	; (800c6a8 <_ZN13DetailsScreenC1EP10MessageBus+0x344>)
 800c4f6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c4fa:	f001 ff19 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c4fe:	2100      	movs	r1, #0
 800c500:	f001 ff28 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
 800c504:	211b      	movs	r1, #27
 800c506:	f001 ff22 	bl	800e34e <_ZN4Text11setFontSizeEh>
	restartButton->setText("Restart")->setFontSize(28)->setOutlineColor(0xFF0000);
 800c50a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c50c:	4967      	ldr	r1, [pc, #412]	; (800c6ac <_ZN13DetailsScreenC1EP10MessageBus+0x348>)
 800c50e:	3008      	adds	r0, #8
 800c510:	f001 ff0e 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c514:	211c      	movs	r1, #28
 800c516:	f001 ff1a 	bl	800e34e <_ZN4Text11setFontSizeEh>
 800c51a:	6803      	ldr	r3, [r0, #0]
 800c51c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800c520:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c524:	4418      	add	r0, r3
 800c526:	f001 fcf1 	bl	800df0c <_ZN9Component15setOutlineColorEm>
	closeButton->setText("Close")->setFontSize(28);
 800c52a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c52c:	4960      	ldr	r1, [pc, #384]	; (800c6b0 <_ZN13DetailsScreenC1EP10MessageBus+0x34c>)
 800c52e:	3008      	adds	r0, #8
 800c530:	f001 fefe 	bl	800e330 <_ZN4Text7setTextEPKc>
 800c534:	211c      	movs	r1, #28
 800c536:	f001 ff0a 	bl	800e34e <_ZN4Text11setFontSizeEh>
	restartButton->registerTouchHandler(std::bind(&DetailsScreen::restartSupply, this));
 800c53a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c53c:	200c      	movs	r0, #12
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    _Function_base() : _M_manager(nullptr) { }
 800c544:	9602      	str	r6, [sp, #8]
 800c546:	441f      	add	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c548:	f007 faa0 	bl	8013a8c <_Znwj>
      _Bind(_Bind&&) = default;
 800c54c:	4b59      	ldr	r3, [pc, #356]	; (800c6b4 <_ZN13DetailsScreenC1EP10MessageBus+0x350>)
 800c54e:	4669      	mov	r1, sp
 800c550:	6084      	str	r4, [r0, #8]
 800c552:	9000      	str	r0, [sp, #0]
 800c554:	e9c0 3600 	strd	r3, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 800c558:	4b57      	ldr	r3, [pc, #348]	; (800c6b8 <_ZN13DetailsScreenC1EP10MessageBus+0x354>)
 800c55a:	4638      	mov	r0, r7
 800c55c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c55e:	4b57      	ldr	r3, [pc, #348]	; (800c6bc <_ZN13DetailsScreenC1EP10MessageBus+0x358>)
 800c560:	9302      	str	r3, [sp, #8]
 800c562:	f001 fd0f 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 800c566:	4668      	mov	r0, sp
 800c568:	f7ff fe5a 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	closeButton->registerTouchHandler(std::bind(&Component::setVisible, this, false));
 800c56c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c56e:	2010      	movs	r0, #16
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	f852 7c0c 	ldr.w	r7, [r2, #-12]
    _Function_base() : _M_manager(nullptr) { }
 800c576:	9602      	str	r6, [sp, #8]
 800c578:	441f      	add	r7, r3
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c57a:	f007 fa87 	bl	8013a8c <_Znwj>
 800c57e:	4b50      	ldr	r3, [pc, #320]	; (800c6c0 <_ZN13DetailsScreenC1EP10MessageBus+0x35c>)
 800c580:	4669      	mov	r1, sp
 800c582:	7206      	strb	r6, [r0, #8]
 800c584:	60c4      	str	r4, [r0, #12]
 800c586:	9000      	str	r0, [sp, #0]
 800c588:	e9c0 3600 	strd	r3, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 800c58c:	4b4d      	ldr	r3, [pc, #308]	; (800c6c4 <_ZN13DetailsScreenC1EP10MessageBus+0x360>)
 800c58e:	4638      	mov	r0, r7
 800c590:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c592:	4b4d      	ldr	r3, [pc, #308]	; (800c6c8 <_ZN13DetailsScreenC1EP10MessageBus+0x364>)
 800c594:	9302      	str	r3, [sp, #8]
 800c596:	f001 fcf5 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 800c59a:	4668      	mov	r0, sp
 800c59c:	f7ff fe40 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	add(mainFrame, 0.1f, 0.1f, 0.8f, 0.8f);
 800c5a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c5a2:	b119      	cbz	r1, 800c5ac <_ZN13DetailsScreenC1EP10MessageBus+0x248>
 800c5a4:	680b      	ldr	r3, [r1, #0]
 800c5a6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c5aa:	4419      	add	r1, r3
 800c5ac:	eddf 1a47 	vldr	s3, [pc, #284]	; 800c6cc <_ZN13DetailsScreenC1EP10MessageBus+0x368>
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800c6e4 <_ZN13DetailsScreenC1EP10MessageBus+0x380>
 800c5b6:	eeb0 1a61 	vmov.f32	s2, s3
 800c5ba:	eeb0 0a60 	vmov.f32	s0, s1
 800c5be:	f001 fae5 	bl	800db8c <_ZN9Component3addEPS_ffff>
	mainFrame->add(title, 0.9f, 0.15f);
 800c5c2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c5c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c5c8:	6803      	ldr	r3, [r0, #0]
 800c5ca:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c5ce:	4418      	add	r0, r3
 800c5d0:	b119      	cbz	r1, 800c5da <_ZN13DetailsScreenC1EP10MessageBus+0x276>
 800c5d2:	680b      	ldr	r3, [r1, #0]
 800c5d4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c5d8:	4419      	add	r1, r3
 800c5da:	eddf 0a43 	vldr	s1, [pc, #268]	; 800c6e8 <_ZN13DetailsScreenC1EP10MessageBus+0x384>
 800c5de:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800c6d0 <_ZN13DetailsScreenC1EP10MessageBus+0x36c>
 800c5e2:	f001 fb17 	bl	800dc14 <_ZN9Component3addEPS_ff>
	mainFrame->add(status, 0.9f, 0.325f);
 800c5e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c5e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800c5ec:	6803      	ldr	r3, [r0, #0]
 800c5ee:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c5f2:	4418      	add	r0, r3
 800c5f4:	b119      	cbz	r1, 800c5fe <_ZN13DetailsScreenC1EP10MessageBus+0x29a>
 800c5f6:	680b      	ldr	r3, [r1, #0]
 800c5f8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c5fc:	4419      	add	r1, r3
 800c5fe:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c6d4 <_ZN13DetailsScreenC1EP10MessageBus+0x370>
 800c602:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800c6d0 <_ZN13DetailsScreenC1EP10MessageBus+0x36c>
 800c606:	f001 fb05 	bl	800dc14 <_ZN9Component3addEPS_ff>
	mainFrame->add(voltage, 0.1f, 0.15f);
 800c60a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c60c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c610:	6803      	ldr	r3, [r0, #0]
 800c612:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c616:	4418      	add	r0, r3
 800c618:	b119      	cbz	r1, 800c622 <_ZN13DetailsScreenC1EP10MessageBus+0x2be>
 800c61a:	680b      	ldr	r3, [r1, #0]
 800c61c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c620:	4419      	add	r1, r3
 800c622:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c6e8 <_ZN13DetailsScreenC1EP10MessageBus+0x384>
 800c626:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800c6e4 <_ZN13DetailsScreenC1EP10MessageBus+0x380>
 800c62a:	f001 faf3 	bl	800dc14 <_ZN9Component3addEPS_ff>
	mainFrame->add(power, 0.1f, 0.275f);
 800c62e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c630:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c634:	6803      	ldr	r3, [r0, #0]
 800c636:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c63a:	4418      	add	r0, r3
 800c63c:	b119      	cbz	r1, 800c646 <_ZN13DetailsScreenC1EP10MessageBus+0x2e2>
 800c63e:	680b      	ldr	r3, [r1, #0]
 800c640:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c644:	4419      	add	r1, r3
 800c646:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c6d8 <_ZN13DetailsScreenC1EP10MessageBus+0x374>
 800c64a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800c6e4 <_ZN13DetailsScreenC1EP10MessageBus+0x380>
 800c64e:	f001 fae1 	bl	800dc14 <_ZN9Component3addEPS_ff>
	mainFrame->add(energy, 0.1f, 0.4f);
 800c652:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c654:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800c658:	6803      	ldr	r3, [r0, #0]
 800c65a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c65e:	4418      	add	r0, r3
 800c660:	b119      	cbz	r1, 800c66a <_ZN13DetailsScreenC1EP10MessageBus+0x306>
 800c662:	680b      	ldr	r3, [r1, #0]
 800c664:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c668:	4419      	add	r1, r3
 800c66a:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c6dc <_ZN13DetailsScreenC1EP10MessageBus+0x378>
 800c66e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800c6e4 <_ZN13DetailsScreenC1EP10MessageBus+0x380>
 800c672:	f001 facf 	bl	800dc14 <_ZN9Component3addEPS_ff>
	mainFrame->add(temperature, 0.1f, 0.525f);
 800c676:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c678:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c67c:	6803      	ldr	r3, [r0, #0]
 800c67e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c682:	4418      	add	r0, r3
 800c684:	b3d1      	cbz	r1, 800c6fc <_ZN13DetailsScreenC1EP10MessageBus+0x398>
 800c686:	e035      	b.n	800c6f4 <_ZN13DetailsScreenC1EP10MessageBus+0x390>
 800c688:	0801b934 	.word	0x0801b934
 800c68c:	0801b3db 	.word	0x0801b3db
 800c690:	00141c31 	.word	0x00141c31
 800c694:	0801b3f3 	.word	0x0801b3f3
 800c698:	0801d657 	.word	0x0801d657
 800c69c:	0801b3f9 	.word	0x0801b3f9
 800c6a0:	0801b407 	.word	0x0801b407
 800c6a4:	0801b413 	.word	0x0801b413
 800c6a8:	0801b421 	.word	0x0801b421
 800c6ac:	0801b395 	.word	0x0801b395
 800c6b0:	0801b433 	.word	0x0801b433
 800c6b4:	0800c235 	.word	0x0800c235
 800c6b8:	0800c05d 	.word	0x0800c05d
 800c6bc:	0800c1d9 	.word	0x0800c1d9
 800c6c0:	0800df21 	.word	0x0800df21
 800c6c4:	0800c0bd 	.word	0x0800c0bd
 800c6c8:	0800c195 	.word	0x0800c195
 800c6cc:	3f4ccccd 	.word	0x3f4ccccd
 800c6d0:	3f666666 	.word	0x3f666666
 800c6d4:	3ea66666 	.word	0x3ea66666
 800c6d8:	3e8ccccd 	.word	0x3e8ccccd
 800c6dc:	3ecccccd 	.word	0x3ecccccd
 800c6e0:	3f066666 	.word	0x3f066666
 800c6e4:	3dcccccd 	.word	0x3dcccccd
 800c6e8:	3e19999a 	.word	0x3e19999a
 800c6ec:	3eb33333 	.word	0x3eb33333
 800c6f0:	3f0ccccd 	.word	0x3f0ccccd
 800c6f4:	680b      	ldr	r3, [r1, #0]
 800c6f6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c6fa:	4419      	add	r1, r3
 800c6fc:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800c6e0 <_ZN13DetailsScreenC1EP10MessageBus+0x37c>
 800c700:	ed1f 0a08 	vldr	s0, [pc, #-32]	; 800c6e4 <_ZN13DetailsScreenC1EP10MessageBus+0x380>
 800c704:	f001 fa86 	bl	800dc14 <_ZN9Component3addEPS_ff>
	mainFrame->add(restartButton, 0.1f, 0.75f, 0.35f, 0.15f);
 800c708:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c70a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c70c:	6803      	ldr	r3, [r0, #0]
 800c70e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c712:	4418      	add	r0, r3
 800c714:	b119      	cbz	r1, 800c71e <_ZN13DetailsScreenC1EP10MessageBus+0x3ba>
 800c716:	680b      	ldr	r3, [r1, #0]
 800c718:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c71c:	4419      	add	r1, r3
 800c71e:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 800c722:	ed5f 1a0f 	vldr	s3, [pc, #-60]	; 800c6e8 <_ZN13DetailsScreenC1EP10MessageBus+0x384>
 800c726:	ed1f 1a0f 	vldr	s2, [pc, #-60]	; 800c6ec <_ZN13DetailsScreenC1EP10MessageBus+0x388>
 800c72a:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800c6e4 <_ZN13DetailsScreenC1EP10MessageBus+0x380>
 800c72e:	f001 fa2d 	bl	800db8c <_ZN9Component3addEPS_ffff>
	mainFrame->add(closeButton, 0.55f, 0.75f, 0.35f, 0.15f);
 800c732:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c734:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c736:	6803      	ldr	r3, [r0, #0]
 800c738:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c73c:	4418      	add	r0, r3
 800c73e:	b119      	cbz	r1, 800c748 <_ZN13DetailsScreenC1EP10MessageBus+0x3e4>
 800c740:	680b      	ldr	r3, [r1, #0]
 800c742:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c746:	4419      	add	r1, r3
 800c748:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 800c74c:	ed5f 1a1a 	vldr	s3, [pc, #-104]	; 800c6e8 <_ZN13DetailsScreenC1EP10MessageBus+0x384>
 800c750:	ed1f 1a1a 	vldr	s2, [pc, #-104]	; 800c6ec <_ZN13DetailsScreenC1EP10MessageBus+0x388>
    _Function_base() : _M_manager(nullptr) { }
 800c754:	2600      	movs	r6, #0
 800c756:	ed1f 0a1a 	vldr	s0, [pc, #-104]	; 800c6f0 <_ZN13DetailsScreenC1EP10MessageBus+0x38c>
 800c75a:	f001 fa17 	bl	800db8c <_ZN9Component3addEPS_ffff>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c75e:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 800c760:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c762:	f007 f993 	bl	8013a8c <_Znwj>
 800c766:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <_ZN13DetailsScreenC1EP10MessageBus+0x450>)
	bus->handle<Power_BusInfo>(std::bind(&DetailsScreen::handleBusInfo, this, std::placeholders::_1, std::placeholders::_2));
 800c768:	4669      	mov	r1, sp
 800c76a:	6084      	str	r4, [r0, #8]
 800c76c:	9000      	str	r0, [sp, #0]
 800c76e:	e9c0 3600 	strd	r3, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 800c772:	4b11      	ldr	r3, [pc, #68]	; (800c7b8 <_ZN13DetailsScreenC1EP10MessageBus+0x454>)
 800c774:	4628      	mov	r0, r5
 800c776:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c778:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <_ZN13DetailsScreenC1EP10MessageBus+0x458>)
 800c77a:	9302      	str	r3, [sp, #8]
 800c77c:	f005 fd84 	bl	8012288 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 800c780:	4668      	mov	r0, sp
 800c782:	f7ff fd4d 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c786:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 800c788:	9602      	str	r6, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c78a:	f007 f97f 	bl	8013a8c <_Znwj>
 800c78e:	4b0c      	ldr	r3, [pc, #48]	; (800c7c0 <_ZN13DetailsScreenC1EP10MessageBus+0x45c>)
	bus->handle<Power_SupplyInfo>(std::bind(&DetailsScreen::handleSupplyInfo, this, std::placeholders::_1, std::placeholders::_2));
 800c790:	4669      	mov	r1, sp
 800c792:	6084      	str	r4, [r0, #8]
 800c794:	9000      	str	r0, [sp, #0]
 800c796:	e9c0 3600 	strd	r3, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 800c79a:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <_ZN13DetailsScreenC1EP10MessageBus+0x460>)
 800c79c:	4628      	mov	r0, r5
 800c79e:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c7a0:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <_ZN13DetailsScreenC1EP10MessageBus+0x464>)
 800c7a2:	9302      	str	r3, [sp, #8]
 800c7a4:	f005 fdb8 	bl	8012318 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 800c7a8:	4668      	mov	r0, sp
 800c7aa:	f7ff fd39 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	b005      	add	sp, #20
 800c7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7b4:	0800bf15 	.word	0x0800bf15
 800c7b8:	0800c09d 	.word	0x0800c09d
 800c7bc:	0800c14d 	.word	0x0800c14d
 800c7c0:	0800bfcd 	.word	0x0800bfcd
 800c7c4:	0800c07d 	.word	0x0800c07d
 800c7c8:	0800c105 	.word	0x0800c105

0800c7cc <_ZN13DetailsScreen16setTargetMonitorE12PowerMonitor>:

void DetailsScreen::setTargetMonitor(PowerMonitor monitorID) {
 800c7cc:	b510      	push	{r4, lr}
	this->monitorID = monitorID;
	title->setText(toString(monitorID));
 800c7ce:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
	this->monitorID = monitorID;
 800c7d2:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
	title->setText(toString(monitorID));
 800c7d6:	4608      	mov	r0, r1
 800c7d8:	f008 fb7a 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800c7dc:	4601      	mov	r1, r0
 800c7de:	4620      	mov	r0, r4
}
 800c7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	title->setText(toString(monitorID));
 800c7e4:	f001 bda4 	b.w	800e330 <_ZN4Text7setTextEPKc>

0800c7e8 <_ZN6ButtonD4Ev>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	bb21      	cbnz	r1, 800c838 <_ZN6ButtonD4Ev+0x50>
 800c7ee:	6813      	ldr	r3, [r2, #0]
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	bb19      	cbnz	r1, 800c83c <_ZN6ButtonD4Ev+0x54>
 800c7f4:	6950      	ldr	r0, [r2, #20]
 800c7f6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c7fa:	50e0      	str	r0, [r4, r3]
 800c7fc:	bb09      	cbnz	r1, 800c842 <_ZN6ButtonD4Ev+0x5a>
 800c7fe:	6990      	ldr	r0, [r2, #24]
 800c800:	4623      	mov	r3, r4
 800c802:	f843 0f08 	str.w	r0, [r3, #8]!
 800c806:	b9f1      	cbnz	r1, 800c846 <_ZN6ButtonD4Ev+0x5e>
 800c808:	f102 000c 	add.w	r0, r2, #12
class Text : virtual public Component {
 800c80c:	6805      	ldr	r5, [r0, #0]
 800c80e:	60a5      	str	r5, [r4, #8]
 800c810:	6846      	ldr	r6, [r0, #4]
 800c812:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 800c816:	501e      	str	r6, [r3, r0]
 800c818:	b9b9      	cbnz	r1, 800c84a <_ZN6ButtonD4Ev+0x62>
 800c81a:	3204      	adds	r2, #4
#ifndef LIBRARIES_EMBEDDEDGL_COMPONENTS_BOX_H_
#define LIBRARIES_EMBEDDEDGL_COMPONENTS_BOX_H_

#include "Component.h"

class Box : virtual public Component {
 800c81c:	6813      	ldr	r3, [r2, #0]
 800c81e:	6023      	str	r3, [r4, #0]
 800c820:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800c824:	6852      	ldr	r2, [r2, #4]
 800c826:	50e2      	str	r2, [r4, r3]
 800c828:	078b      	lsls	r3, r1, #30
 800c82a:	d503      	bpl.n	800c834 <_ZN6ButtonD4Ev+0x4c>
 800c82c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c830:	f7ff fa18 	bl	800bc64 <_ZN9ComponentD1Ev>
 800c834:	4620      	mov	r0, r4
 800c836:	bd70      	pop	{r4, r5, r6, pc}
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <_ZN6ButtonD4Ev+0x68>)
 800c83a:	e7d9      	b.n	800c7f0 <_ZN6ButtonD4Ev+0x8>
 800c83c:	4805      	ldr	r0, [pc, #20]	; (800c854 <_ZN6ButtonD4Ev+0x6c>)
 800c83e:	2350      	movs	r3, #80	; 0x50
 800c840:	e7db      	b.n	800c7fa <_ZN6ButtonD4Ev+0x12>
 800c842:	4805      	ldr	r0, [pc, #20]	; (800c858 <_ZN6ButtonD4Ev+0x70>)
 800c844:	e7dc      	b.n	800c800 <_ZN6ButtonD4Ev+0x18>
 800c846:	4805      	ldr	r0, [pc, #20]	; (800c85c <_ZN6ButtonD4Ev+0x74>)
 800c848:	e7e0      	b.n	800c80c <_ZN6ButtonD4Ev+0x24>
 800c84a:	4a05      	ldr	r2, [pc, #20]	; (800c860 <_ZN6ButtonD4Ev+0x78>)
 800c84c:	e7e6      	b.n	800c81c <_ZN6ButtonD4Ev+0x34>
 800c84e:	bf00      	nop
 800c850:	0801b880 	.word	0x0801b880
 800c854:	0801b8c4 	.word	0x0801b8c4
 800c858:	0801b898 	.word	0x0801b898
 800c85c:	0801b864 	.word	0x0801b864
 800c860:	0801b85c 	.word	0x0801b85c

0800c864 <_ZN6ButtonD1Ev>:
 800c864:	2200      	movs	r2, #0
 800c866:	2102      	movs	r1, #2
 800c868:	f7ff bfbe 	b.w	800c7e8 <_ZN6ButtonD4Ev>

0800c86c <_ZThn8_N6ButtonD1Ev>:
 800c86c:	f1a0 0008 	sub.w	r0, r0, #8
 800c870:	e7f8      	b.n	800c864 <_ZN6ButtonD1Ev>

0800c872 <_ZTv0_n16_N6ButtonD1Ev>:
 800c872:	f8d0 c000 	ldr.w	ip, [r0]
 800c876:	f1ac 0c10 	sub.w	ip, ip, #16
 800c87a:	f8dc c000 	ldr.w	ip, [ip]
 800c87e:	4460      	add	r0, ip
 800c880:	e7f0      	b.n	800c864 <_ZN6ButtonD1Ev>

0800c882 <_ZN6ButtonD0Ev>:
 800c882:	b510      	push	{r4, lr}
 800c884:	4604      	mov	r4, r0
 800c886:	f7ff ffed 	bl	800c864 <_ZN6ButtonD1Ev>
 800c88a:	21bc      	movs	r1, #188	; 0xbc
 800c88c:	4620      	mov	r0, r4
 800c88e:	f008 ff07 	bl	80156a0 <_ZdlPvj>
 800c892:	4620      	mov	r0, r4
 800c894:	bd10      	pop	{r4, pc}

0800c896 <_ZThn8_N6ButtonD0Ev>:
 800c896:	f1a0 0008 	sub.w	r0, r0, #8
 800c89a:	e7f2      	b.n	800c882 <_ZN6ButtonD0Ev>

0800c89c <_ZTv0_n16_N6ButtonD0Ev>:
 800c89c:	f8d0 c000 	ldr.w	ip, [r0]
 800c8a0:	f1ac 0c10 	sub.w	ip, ip, #16
 800c8a4:	f8dc c000 	ldr.w	ip, [ip]
 800c8a8:	4460      	add	r0, ip
 800c8aa:	e7ea      	b.n	800c882 <_ZN6ButtonD0Ev>

0800c8ac <_ZN6ButtonD2Ev>:
 800c8ac:	460a      	mov	r2, r1
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	f7ff bf9a 	b.w	800c7e8 <_ZN6ButtonD4Ev>

0800c8b4 <_ZN11QSPIWrapper11__getSourceEv>:
#include <spi.h>
#include <quadspi.h>

class QSPIWrapper : public ExceptionTracker {
public:
	TRACK_EXCEPTIONS();
 800c8b4:	4800      	ldr	r0, [pc, #0]	; (800c8b8 <_ZN11QSPIWrapper11__getSourceEv+0x4>)
 800c8b6:	4770      	bx	lr
 800c8b8:	0801b94c 	.word	0x0801b94c

0800c8bc <_ZN9GUIThread11__getSourceEv>:
#include "MainScreen.h"
#include "FT81x/FT81xContext.h"

class GUIThread : public Thread {
public:
	TRACK_EXCEPTIONS();
 800c8bc:	4800      	ldr	r0, [pc, #0]	; (800c8c0 <_ZN9GUIThread11__getSourceEv+0x4>)
 800c8be:	4770      	bx	lr
 800c8c0:	0801b974 	.word	0x0801b974

0800c8c4 <_ZN9GUIThread4loopEv>:
	setTickDelay(100);

	println("GUI ready");
}

void GUIThread::loop() {
 800c8c4:	4601      	mov	r1, r0
	context->render(&screen);
 800c8c6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800c8ca:	6803      	ldr	r3, [r0, #0]
 800c8cc:	312c      	adds	r1, #44	; 0x2c
 800c8ce:	69db      	ldr	r3, [r3, #28]
 800c8d0:	4718      	bx	r3
	...

0800c8d4 <_ZN9GUIThread4initEv>:
void GUIThread::init() {
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	4604      	mov	r4, r0
	this->context = new FT81xContext(&wrapper, &console);
 800c8d8:	2038      	movs	r0, #56	; 0x38
 800c8da:	f007 f8d7 	bl	8013a8c <_Znwj>
 800c8de:	4605      	mov	r5, r0
 800c8e0:	f104 0618 	add.w	r6, r4, #24
 800c8e4:	4a14      	ldr	r2, [pc, #80]	; (800c938 <_ZN9GUIThread4initEv+0x64>)
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	f001 ffa2 	bl	800e830 <_ZN12FT81xContextC1EP11QSPIWrapperP7Console>
	context->trackExceptions(this);
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4628      	mov	r0, r5
	this->context = new FT81xContext(&wrapper, &console);
 800c8f0:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
	screen.trackExceptions(this);
 800c8f4:	f104 052c 	add.w	r5, r4, #44	; 0x2c
	context->trackExceptions(this);
 800c8f8:	f007 f89f 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
	wrapper.trackExceptions(this);
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4630      	mov	r0, r6
 800c900:	f007 f89b 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
	screen.trackExceptions(this);
 800c904:	4621      	mov	r1, r4
 800c906:	4628      	mov	r0, r5
 800c908:	f007 f897 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
	screen.setContext(context);
 800c90c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800c910:	4628      	mov	r0, r5
 800c912:	f001 fa35 	bl	800dd80 <_ZN9Component10setContextEP7Context>
	context->update(&screen);
 800c916:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800c91a:	4629      	mov	r1, r5
 800c91c:	6803      	ldr	r3, [r0, #0]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	4798      	blx	r3
	setTickDelay(100);
 800c922:	4620      	mov	r0, r4
 800c924:	2164      	movs	r1, #100	; 0x64
 800c926:	f008 fad1 	bl	8014ecc <_ZN6Thread12setTickDelayEm>
	println("GUI ready");
 800c92a:	4620      	mov	r0, r4
 800c92c:	4903      	ldr	r1, [pc, #12]	; (800c93c <_ZN9GUIThread4initEv+0x68>)
}
 800c92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	println("GUI ready");
 800c932:	f008 baa1 	b.w	8014e78 <_ZN6Thread7printlnEPKcz>
 800c936:	bf00      	nop
 800c938:	24041060 	.word	0x24041060
 800c93c:	0801b98e 	.word	0x0801b98e

0800c940 <_ZN9GUIThreadC1EP19__SPI_HandleTypeDefP10MessageBus>:
GUIThread::GUIThread(SPI_HandleTypeDef* spi, MessageBus* bus) : Thread("GUI", 2048), wrapper(spi), screen(bus) {
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	460e      	mov	r6, r1
 800c944:	4615      	mov	r5, r2
 800c946:	490b      	ldr	r1, [pc, #44]	; (800c974 <_ZN9GUIThreadC1EP19__SPI_HandleTypeDefP10MessageBus+0x34>)
 800c948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c94c:	4604      	mov	r4, r0
 800c94e:	f008 fa88 	bl	8014e62 <_ZN6ThreadC1EPKcm>
 800c952:	4b09      	ldr	r3, [pc, #36]	; (800c978 <_ZN9GUIThreadC1EP19__SPI_HandleTypeDefP10MessageBus+0x38>)
 800c954:	4629      	mov	r1, r5
 800c956:	f104 002c 	add.w	r0, r4, #44	; 0x2c

	QSPIWrapper(SPI_HandleTypeDef* spi) : spi(spi), qspi(nullptr), fake_qspi(true) {}
 800c95a:	6226      	str	r6, [r4, #32]
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	4b07      	ldr	r3, [pc, #28]	; (800c97c <_ZN9GUIThreadC1EP19__SPI_HandleTypeDefP10MessageBus+0x3c>)
 800c960:	61a3      	str	r3, [r4, #24]
 800c962:	2300      	movs	r3, #0
 800c964:	6263      	str	r3, [r4, #36]	; 0x24
 800c966:	2301      	movs	r3, #1
 800c968:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c96c:	f000 f8c8 	bl	800cb00 <_ZN10MainScreenC1EP10MessageBus>
}
 800c970:	4620      	mov	r0, r4
 800c972:	bd70      	pop	{r4, r5, r6, pc}
 800c974:	0801b998 	.word	0x0801b998
 800c978:	0801b9e4 	.word	0x0801b9e4
 800c97c:	0801b9c0 	.word	0x0801b9c0

0800c980 <_ZN9GUIThreadD1Ev>:
GUIThread::~GUIThread() {
 800c980:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <_ZN9GUIThreadD1Ev+0x20>)
 800c982:	b510      	push	{r4, lr}
 800c984:	4604      	mov	r4, r0
 800c986:	6003      	str	r3, [r0, #0]
	delete context;
 800c988:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800c98c:	b110      	cbz	r0, 800c994 <_ZN9GUIThreadD1Ev+0x14>
 800c98e:	6803      	ldr	r3, [r0, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	4798      	blx	r3
GUIThread::~GUIThread() {
 800c994:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c998:	f000 f852 	bl	800ca40 <_ZN10MainScreenD1Ev>
}
 800c99c:	4620      	mov	r0, r4
 800c99e:	bd10      	pop	{r4, pc}
 800c9a0:	0801b9e4 	.word	0x0801b9e4

0800c9a4 <_ZN9GUIThreadD0Ev>:
GUIThread::~GUIThread() {
 800c9a4:	b510      	push	{r4, lr}
 800c9a6:	4604      	mov	r4, r0
}
 800c9a8:	f7ff ffea 	bl	800c980 <_ZN9GUIThreadD1Ev>
 800c9ac:	21bc      	movs	r1, #188	; 0xbc
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f008 fe76 	bl	80156a0 <_ZdlPvj>
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	bd10      	pop	{r4, pc}

0800c9b8 <_ZN10MainScreen11__getSourceEv>:

#include "RoCo/RoCo.h"

class MainScreen : public Screen {
public:
	TRACK_EXCEPTIONS();
 800c9b8:	4800      	ldr	r0, [pc, #0]	; (800c9bc <_ZN10MainScreen11__getSourceEv+0x4>)
 800c9ba:	4770      	bx	lr
 800c9bc:	0801b9f8 	.word	0x0801b9f8

0800c9c0 <_ZN10MainScreen17showDetailedStatsE12PowerMonitor>:
	delete motorsBox;
	delete chargeGauge;
	delete detailsScreen;
}

void MainScreen::showDetailedStats(PowerMonitor monitor) {
 800c9c0:	b510      	push	{r4, lr}
 800c9c2:	4604      	mov	r4, r0
	detailsScreen->setTargetMonitor(monitor);
 800c9c4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800c9c8:	f7ff ff00 	bl	800c7cc <_ZN13DetailsScreen16setTargetMonitorE12PowerMonitor>
	detailsScreen->setVisible(true);
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
 800c9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	detailsScreen->setVisible(true);
 800c9d6:	f001 baa3 	b.w	800df20 <_ZN9Component10setVisibleEb>

0800c9da <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE9_M_invokeERKSt9_Any_data>:
	    return __source._M_access<_Functor*>();
 800c9da:	6803      	ldr	r3, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c9dc:	b430      	push	{r4, r5}
 800c9de:	68dc      	ldr	r4, [r3, #12]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	7a19      	ldrb	r1, [r3, #8]
 800c9e4:	1055      	asrs	r5, r2, #1
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c9ec:	07d2      	lsls	r2, r2, #31
 800c9ee:	bf48      	it	mi
 800c9f0:	5962      	ldrmi	r2, [r4, r5]
      }
 800c9f2:	bc30      	pop	{r4, r5}
 800c9f4:	bf48      	it	mi
 800c9f6:	58d3      	ldrmi	r3, [r2, r3]
 800c9f8:	4718      	bx	r3
	...

0800c9fc <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c9fc:	b570      	push	{r4, r5, r6, lr}
 800c9fe:	4605      	mov	r5, r0
	switch (__op)
 800ca00:	b15a      	cbz	r2, 800ca1a <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x1e>
 800ca02:	2a01      	cmp	r2, #1
 800ca04:	d00d      	beq.n	800ca22 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x26>
	  switch (__op)
 800ca06:	2a02      	cmp	r2, #2
 800ca08:	d00d      	beq.n	800ca26 <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2a>
 800ca0a:	2a03      	cmp	r2, #3
 800ca0c:	d107      	bne.n	800ca1e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
	  delete __victim._M_access<_Functor*>();
 800ca0e:	6800      	ldr	r0, [r0, #0]
 800ca10:	b128      	cbz	r0, 800ca1e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 800ca12:	2110      	movs	r1, #16
 800ca14:	f008 fe44 	bl	80156a0 <_ZdlPvj>
 800ca18:	e001      	b.n	800ca1e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800ca1a:	4b08      	ldr	r3, [pc, #32]	; (800ca3c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800ca1c:	602b      	str	r3, [r5, #0]
      }
 800ca1e:	2000      	movs	r0, #0
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
	    return __source._M_access<_Functor*>();
 800ca22:	680b      	ldr	r3, [r1, #0]
 800ca24:	e7fa      	b.n	800ca1c <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x20>
	  __dest._M_access<_Functor*>() =
 800ca26:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800ca28:	2010      	movs	r0, #16
 800ca2a:	f007 f82f 	bl	8013a8c <_Znwj>
 800ca2e:	4604      	mov	r4, r0
	  __dest._M_access<_Functor*>() =
 800ca30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800ca34:	602c      	str	r4, [r5, #0]
 800ca36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
 800ca3a:	e7f0      	b.n	800ca1e <_ZNSt17_Function_handlerIFvvESt5_BindIFM10MainScreenFv12PowerMonitorEPS2_S3_EEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 800ca3c:	0801bad4 	.word	0x0801bad4

0800ca40 <_ZN10MainScreenD1Ev>:
MainScreen::~MainScreen() {
 800ca40:	4b1a      	ldr	r3, [pc, #104]	; (800caac <_ZN10MainScreenD1Ev+0x6c>)
 800ca42:	b510      	push	{r4, lr}
 800ca44:	4604      	mov	r4, r0
 800ca46:	6003      	str	r3, [r0, #0]
	delete lvaBox;
 800ca48:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800ca4a:	b110      	cbz	r0, 800ca52 <_ZN10MainScreenD1Ev+0x12>
 800ca4c:	6803      	ldr	r3, [r0, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	4798      	blx	r3
	delete lvbBox;
 800ca52:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ca54:	b110      	cbz	r0, 800ca5c <_ZN10MainScreenD1Ev+0x1c>
 800ca56:	6803      	ldr	r3, [r0, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	4798      	blx	r3
	delete hvaBox;
 800ca5c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ca5e:	b110      	cbz	r0, 800ca66 <_ZN10MainScreenD1Ev+0x26>
 800ca60:	6803      	ldr	r3, [r0, #0]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	4798      	blx	r3
	delete hvbBox;
 800ca66:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ca68:	b110      	cbz	r0, 800ca70 <_ZN10MainScreenD1Ev+0x30>
 800ca6a:	6803      	ldr	r3, [r0, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	4798      	blx	r3
	delete batteryBox;
 800ca70:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ca72:	b110      	cbz	r0, 800ca7a <_ZN10MainScreenD1Ev+0x3a>
 800ca74:	6803      	ldr	r3, [r0, #0]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	4798      	blx	r3
	delete motorsBox;
 800ca7a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ca7e:	b110      	cbz	r0, 800ca86 <_ZN10MainScreenD1Ev+0x46>
 800ca80:	6803      	ldr	r3, [r0, #0]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	4798      	blx	r3
	delete chargeGauge;
 800ca86:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800ca8a:	b110      	cbz	r0, 800ca92 <_ZN10MainScreenD1Ev+0x52>
 800ca8c:	6803      	ldr	r3, [r0, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	4798      	blx	r3
	delete detailsScreen;
 800ca92:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800ca96:	b110      	cbz	r0, 800ca9e <_ZN10MainScreenD1Ev+0x5e>
 800ca98:	6803      	ldr	r3, [r0, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	4798      	blx	r3
 800ca9e:	4b04      	ldr	r3, [pc, #16]	; (800cab0 <_ZN10MainScreenD1Ev+0x70>)
 800caa0:	4620      	mov	r0, r4
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	f7ff f8de 	bl	800bc64 <_ZN9ComponentD1Ev>
}
 800caa8:	4620      	mov	r0, r4
 800caaa:	bd10      	pop	{r4, pc}
 800caac:	0801bb04 	.word	0x0801bb04
 800cab0:	0801c268 	.word	0x0801c268

0800cab4 <_ZN10MainScreenD0Ev>:
MainScreen::~MainScreen() {
 800cab4:	b510      	push	{r4, lr}
 800cab6:	4604      	mov	r4, r0
}
 800cab8:	f7ff ffc2 	bl	800ca40 <_ZN10MainScreenD1Ev>
 800cabc:	218c      	movs	r1, #140	; 0x8c
 800cabe:	4620      	mov	r0, r4
 800cac0:	f008 fdee 	bl	80156a0 <_ZdlPvj>
 800cac4:	4620      	mov	r0, r4
 800cac6:	bd10      	pop	{r4, pc}

0800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
 800cac8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 800caca:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
 800cacc:	460d      	mov	r5, r1
 800cace:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 800cad0:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800cad2:	2010      	movs	r0, #16
 800cad4:	f006 ffda 	bl	8013a8c <_Znwj>
 800cad8:	7a2a      	ldrb	r2, [r5, #8]
 800cada:	4603      	mov	r3, r0
 800cadc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cae0:	721a      	strb	r2, [r3, #8]
 800cae2:	68ea      	ldr	r2, [r5, #12]
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	60da      	str	r2, [r3, #12]
 800cae8:	e883 0003 	stmia.w	r3, {r0, r1}
	    _M_invoker = &_My_handler::_M_invoke;
 800caec:	4b02      	ldr	r3, [pc, #8]	; (800caf8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_+0x30>)
	  }
      }
 800caee:	4620      	mov	r0, r4
	    _M_invoker = &_My_handler::_M_invoke;
 800caf0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
 800caf2:	4b02      	ldr	r3, [pc, #8]	; (800cafc <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_+0x34>)
 800caf4:	60a3      	str	r3, [r4, #8]
      }
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	0800c9db 	.word	0x0800c9db
 800cafc:	0800c9fd 	.word	0x0800c9fd

0800cb00 <_ZN10MainScreenC1EP10MessageBus>:
MainScreen::MainScreen(MessageBus* bus) {
 800cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb02:	b089      	sub	sp, #36	; 0x24
 800cb04:	4604      	mov	r4, r0
 800cb06:	460d      	mov	r5, r1
 800cb08:	f001 f808 	bl	800db1c <_ZN9ComponentC1Ev>
 800cb0c:	4bb9      	ldr	r3, [pc, #740]	; (800cdf4 <_ZN10MainScreenC1EP10MessageBus+0x2f4>)
	this->lvaBox = new SupplyBox(West, bus, LVA);
 800cb0e:	2084      	movs	r0, #132	; 0x84
MainScreen::MainScreen(MessageBus* bus) {
 800cb10:	6023      	str	r3, [r4, #0]
	this->lvaBox = new SupplyBox(West, bus, LVA);
 800cb12:	f006 ffbb 	bl	8013a8c <_Znwj>
 800cb16:	4606      	mov	r6, r0
 800cb18:	2302      	movs	r3, #2
 800cb1a:	462a      	mov	r2, r5
 800cb1c:	2103      	movs	r1, #3
 800cb1e:	f000 fbf3 	bl	800d308 <_ZN9SupplyBoxC1E6AnchorP10MessageBus12PowerMonitor>
 800cb22:	66e6      	str	r6, [r4, #108]	; 0x6c
	this->lvbBox = new SupplyBox(East, bus, LVB);
 800cb24:	2084      	movs	r0, #132	; 0x84
 800cb26:	f006 ffb1 	bl	8013a8c <_Znwj>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	462a      	mov	r2, r5
 800cb30:	2105      	movs	r1, #5
 800cb32:	f000 fbe9 	bl	800d308 <_ZN9SupplyBoxC1E6AnchorP10MessageBus12PowerMonitor>
 800cb36:	6726      	str	r6, [r4, #112]	; 0x70
	this->hvaBox = new SupplyBox(West, bus, HVA);
 800cb38:	2084      	movs	r0, #132	; 0x84
 800cb3a:	f006 ffa7 	bl	8013a8c <_Znwj>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	2304      	movs	r3, #4
 800cb42:	462a      	mov	r2, r5
 800cb44:	2103      	movs	r1, #3
 800cb46:	f000 fbdf 	bl	800d308 <_ZN9SupplyBoxC1E6AnchorP10MessageBus12PowerMonitor>
 800cb4a:	6766      	str	r6, [r4, #116]	; 0x74
	this->hvbBox = new SupplyBox(East, bus, HVB);
 800cb4c:	2084      	movs	r0, #132	; 0x84
 800cb4e:	f006 ff9d 	bl	8013a8c <_Znwj>
 800cb52:	2305      	movs	r3, #5
 800cb54:	4606      	mov	r6, r0
 800cb56:	462a      	mov	r2, r5
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f000 fbd5 	bl	800d308 <_ZN9SupplyBoxC1E6AnchorP10MessageBus12PowerMonitor>
 800cb5e:	67a6      	str	r6, [r4, #120]	; 0x78
	this->batteryBox = new UnregulatedBox(bus, BATTERY);
 800cb60:	2084      	movs	r0, #132	; 0x84
 800cb62:	f006 ff93 	bl	8013a8c <_Znwj>
 800cb66:	4606      	mov	r6, r0
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f000 fcce 	bl	800d50c <_ZN14UnregulatedBoxC1EP10MessageBus12PowerMonitor>
 800cb70:	67e6      	str	r6, [r4, #124]	; 0x7c
	this->motorsBox = new UnregulatedBox(bus, MOTORS);
 800cb72:	2084      	movs	r0, #132	; 0x84
 800cb74:	f006 ff8a 	bl	8013a8c <_Znwj>
 800cb78:	4606      	mov	r6, r0
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f000 fcc5 	bl	800d50c <_ZN14UnregulatedBoxC1EP10MessageBus12PowerMonitor>
 800cb82:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	this->chargeGauge = new ChargeGauge(bus);
 800cb86:	2078      	movs	r0, #120	; 0x78
 800cb88:	f006 ff80 	bl	8013a8c <_Znwj>
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7ff f89c 	bl	800bccc <_ZN11ChargeGaugeC1EP10MessageBus>
 800cb94:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	this->detailsScreen = new DetailsScreen(bus);
 800cb98:	2098      	movs	r0, #152	; 0x98
 800cb9a:	f006 ff77 	bl	8013a8c <_Znwj>
 800cb9e:	4629      	mov	r1, r5
 800cba0:	4606      	mov	r6, r0
 800cba2:	f7ff fbdf 	bl	800c364 <_ZN13DetailsScreenC1EP10MessageBus>
	if(lvaBox == nullptr || lvbBox == nullptr || hvaBox == nullptr || hvbBox == nullptr || batteryBox == nullptr
 800cba6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	this->detailsScreen = new DetailsScreen(bus);
 800cba8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
	if(lvaBox == nullptr || lvbBox == nullptr || hvaBox == nullptr || hvbBox == nullptr || batteryBox == nullptr
 800cbac:	b16b      	cbz	r3, 800cbca <_ZN10MainScreenC1EP10MessageBus+0xca>
 800cbae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cbb0:	b15b      	cbz	r3, 800cbca <_ZN10MainScreenC1EP10MessageBus+0xca>
 800cbb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cbb4:	b14b      	cbz	r3, 800cbca <_ZN10MainScreenC1EP10MessageBus+0xca>
 800cbb6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cbb8:	b13b      	cbz	r3, 800cbca <_ZN10MainScreenC1EP10MessageBus+0xca>
 800cbba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800cbbc:	b12b      	cbz	r3, 800cbca <_ZN10MainScreenC1EP10MessageBus+0xca>
			|| motorsBox == nullptr || chargeGauge == nullptr || detailsScreen == nullptr) {
 800cbbe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800cbc2:	b113      	cbz	r3, 800cbca <_ZN10MainScreenC1EP10MessageBus+0xca>
 800cbc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cbc8:	b923      	cbnz	r3, 800cbd4 <_ZN10MainScreenC1EP10MessageBus+0xd4>
		throwException("MemoryAllocationFailure");
 800cbca:	2218      	movs	r2, #24
 800cbcc:	498a      	ldr	r1, [pc, #552]	; (800cdf8 <_ZN10MainScreenC1EP10MessageBus+0x2f8>)
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f006 ff36 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
	add(detailsScreen, 0.0f, 0.0f, 1.0f, 1.0f);
 800cbd4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800cbd8:	eddf 0a88 	vldr	s1, [pc, #544]	; 800cdfc <_ZN10MainScreenC1EP10MessageBus+0x2fc>
 800cbdc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	eeb0 0a60 	vmov.f32	s0, s1
 800cbe6:	eeb0 1a61 	vmov.f32	s2, s3
 800cbea:	f000 ffcf 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(chargeGauge, 0.5f, 0.5f, 0.0f, 0.12f);
 800cbee:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800cbf2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	eddf 1a81 	vldr	s3, [pc, #516]	; 800ce00 <_ZN10MainScreenC1EP10MessageBus+0x300>
 800cbfc:	eeb0 0a60 	vmov.f32	s0, s1
 800cc00:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 800cdfc <_ZN10MainScreenC1EP10MessageBus+0x2fc>
 800cc04:	f000 ffc2 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(batteryBox, 0.425f, 0.0f-2*ey, 0.15f, 0.22f);
 800cc08:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800cc0a:	b119      	cbz	r1, 800cc14 <_ZN10MainScreenC1EP10MessageBus+0x114>
 800cc0c:	680b      	ldr	r3, [r1, #0]
 800cc0e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800cc12:	4419      	add	r1, r3
 800cc14:	eddf 1a7b 	vldr	s3, [pc, #492]	; 800ce04 <_ZN10MainScreenC1EP10MessageBus+0x304>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 800ce08 <_ZN10MainScreenC1EP10MessageBus+0x308>
 800cc1e:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ce0c <_ZN10MainScreenC1EP10MessageBus+0x30c>
 800cc22:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800ce10 <_ZN10MainScreenC1EP10MessageBus+0x310>
 800cc26:	f000 ffb1 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(motorsBox, 0.425f, 0.78f, 0.15f, 0.22f+2*ey);
 800cc2a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800cc2e:	b119      	cbz	r1, 800cc38 <_ZN10MainScreenC1EP10MessageBus+0x138>
 800cc30:	680b      	ldr	r3, [r1, #0]
 800cc32:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800cc36:	4419      	add	r1, r3
 800cc38:	eddf 1a76 	vldr	s3, [pc, #472]	; 800ce14 <_ZN10MainScreenC1EP10MessageBus+0x314>
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800ce08 <_ZN10MainScreenC1EP10MessageBus+0x308>
 800cc42:	eddf 0a75 	vldr	s1, [pc, #468]	; 800ce18 <_ZN10MainScreenC1EP10MessageBus+0x318>
 800cc46:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800ce10 <_ZN10MainScreenC1EP10MessageBus+0x310>
 800cc4a:	f000 ff9f 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(lvaBox, 0.0f-ex, 0.0f-ey, 0.5f+ex, 0.5f+ey);
 800cc4e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cc50:	b119      	cbz	r1, 800cc5a <_ZN10MainScreenC1EP10MessageBus+0x15a>
 800cc52:	680b      	ldr	r3, [r1, #0]
 800cc54:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800cc58:	4419      	add	r1, r3
 800cc5a:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ce1c <_ZN10MainScreenC1EP10MessageBus+0x31c>
 800cc5e:	4620      	mov	r0, r4
 800cc60:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ce20 <_ZN10MainScreenC1EP10MessageBus+0x320>
 800cc64:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ce24 <_ZN10MainScreenC1EP10MessageBus+0x324>
 800cc68:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800ce28 <_ZN10MainScreenC1EP10MessageBus+0x328>
 800cc6c:	f000 ff8e 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(lvbBox, 0.5f, 0.0f-ey, 0.5f+ex, 0.5f+ey);
 800cc70:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cc72:	b119      	cbz	r1, 800cc7c <_ZN10MainScreenC1EP10MessageBus+0x17c>
 800cc74:	680b      	ldr	r3, [r1, #0]
 800cc76:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800cc7a:	4419      	add	r1, r3
 800cc7c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800cc80:	eddf 1a66 	vldr	s3, [pc, #408]	; 800ce1c <_ZN10MainScreenC1EP10MessageBus+0x31c>
 800cc84:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800ce20 <_ZN10MainScreenC1EP10MessageBus+0x320>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	eddf 0a66 	vldr	s1, [pc, #408]	; 800ce24 <_ZN10MainScreenC1EP10MessageBus+0x324>
 800cc8e:	f000 ff7d 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(hvaBox, 0.0f-ex, 0.5f, 0.5f+ex, 0.5f+ey);
 800cc92:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800cc94:	b119      	cbz	r1, 800cc9e <_ZN10MainScreenC1EP10MessageBus+0x19e>
 800cc96:	680b      	ldr	r3, [r1, #0]
 800cc98:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800cc9c:	4419      	add	r1, r3
 800cc9e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800cca2:	eddf 1a5e 	vldr	s3, [pc, #376]	; 800ce1c <_ZN10MainScreenC1EP10MessageBus+0x31c>
 800cca6:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800ce20 <_ZN10MainScreenC1EP10MessageBus+0x320>
 800ccaa:	4620      	mov	r0, r4
 800ccac:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800ce28 <_ZN10MainScreenC1EP10MessageBus+0x328>
 800ccb0:	f000 ff6c 	bl	800db8c <_ZN9Component3addEPS_ffff>
	add(hvbBox, 0.5f, 0.5f, 0.5f+ex, 0.5f+ey);
 800ccb4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ccb6:	b119      	cbz	r1, 800ccc0 <_ZN10MainScreenC1EP10MessageBus+0x1c0>
 800ccb8:	680b      	ldr	r3, [r1, #0]
 800ccba:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800ccbe:	4419      	add	r1, r3
 800ccc0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800ccc4:	eddf 1a55 	vldr	s3, [pc, #340]	; 800ce1c <_ZN10MainScreenC1EP10MessageBus+0x31c>
 800ccc8:	ed9f 1a55 	vldr	s2, [pc, #340]	; 800ce20 <_ZN10MainScreenC1EP10MessageBus+0x320>
 800cccc:	4620      	mov	r0, r4
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800ccce:	2500      	movs	r5, #0
 800ccd0:	4e56      	ldr	r6, [pc, #344]	; (800ce2c <_ZN10MainScreenC1EP10MessageBus+0x32c>)
 800ccd2:	eeb0 0a60 	vmov.f32	s0, s1
 800ccd6:	f000 ff59 	bl	800db8c <_ZN9Component3addEPS_ffff>
	detailsScreen->setVisible(false); // Overlay should not be visible by default
 800ccda:	2100      	movs	r1, #0
 800ccdc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800cce0:	f001 f91e 	bl	800df20 <_ZN9Component10setVisibleEb>
	lvaBox->registerTouchHandler(std::bind(&MainScreen::showDetailedStats, this, LVA));
 800cce4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cce6:	a904      	add	r1, sp, #16
 800cce8:	4668      	mov	r0, sp
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800ccf0:	9604      	str	r6, [sp, #16]
 800ccf2:	441f      	add	r7, r3
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	9505      	str	r5, [sp, #20]
 800ccf8:	f88d 3018 	strb.w	r3, [sp, #24]
 800ccfc:	9407      	str	r4, [sp, #28]
 800ccfe:	f7ff fee3 	bl	800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>
 800cd02:	4669      	mov	r1, sp
 800cd04:	4638      	mov	r0, r7
 800cd06:	f001 f93d 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
    class function<_Res(_ArgTypes...)>
 800cd0a:	4668      	mov	r0, sp
 800cd0c:	f7ff fa88 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	lvbBox->registerTouchHandler(std::bind(&MainScreen::showDetailedStats, this, LVB));
 800cd10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd12:	a904      	add	r1, sp, #16
 800cd14:	4668      	mov	r0, sp
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800cd1c:	9407      	str	r4, [sp, #28]
 800cd1e:	441f      	add	r7, r3
 800cd20:	2303      	movs	r3, #3
 800cd22:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800cd26:	f88d 3018 	strb.w	r3, [sp, #24]
 800cd2a:	f7ff fecd 	bl	800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>
 800cd2e:	4669      	mov	r1, sp
 800cd30:	4638      	mov	r0, r7
 800cd32:	f001 f927 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
 800cd36:	4668      	mov	r0, sp
 800cd38:	f7ff fa72 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	hvaBox->registerTouchHandler(std::bind(&MainScreen::showDetailedStats, this, HVA));
 800cd3c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cd3e:	a904      	add	r1, sp, #16
 800cd40:	4668      	mov	r0, sp
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800cd48:	9407      	str	r4, [sp, #28]
 800cd4a:	441f      	add	r7, r3
 800cd4c:	2304      	movs	r3, #4
 800cd4e:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800cd52:	f88d 3018 	strb.w	r3, [sp, #24]
 800cd56:	f7ff feb7 	bl	800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>
 800cd5a:	4669      	mov	r1, sp
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	f001 f911 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
 800cd62:	4668      	mov	r0, sp
 800cd64:	f7ff fa5c 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	hvbBox->registerTouchHandler(std::bind(&MainScreen::showDetailedStats, this, HVB));
 800cd68:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cd6a:	a904      	add	r1, sp, #16
 800cd6c:	4668      	mov	r0, sp
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800cd74:	9407      	str	r4, [sp, #28]
 800cd76:	441f      	add	r7, r3
 800cd78:	2305      	movs	r3, #5
 800cd7a:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800cd7e:	f88d 3018 	strb.w	r3, [sp, #24]
 800cd82:	f7ff fea1 	bl	800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>
 800cd86:	4669      	mov	r1, sp
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f001 f8fb 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
 800cd8e:	4668      	mov	r0, sp
 800cd90:	f7ff fa46 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	batteryBox->registerTouchHandler(std::bind(&MainScreen::showDetailedStats, this, BATTERY));
 800cd94:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800cd96:	a904      	add	r1, sp, #16
 800cd98:	4668      	mov	r0, sp
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800cda0:	f88d 5018 	strb.w	r5, [sp, #24]
 800cda4:	441f      	add	r7, r3
 800cda6:	9407      	str	r4, [sp, #28]
 800cda8:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800cdac:	f7ff fe8c 	bl	800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>
 800cdb0:	4669      	mov	r1, sp
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	f001 f8e6 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
 800cdb8:	4668      	mov	r0, sp
 800cdba:	f7ff fa31 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	motorsBox->registerTouchHandler(std::bind(&MainScreen::showDetailedStats, this, MOTORS));
 800cdbe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800cdc2:	a904      	add	r1, sp, #16
 800cdc4:	4668      	mov	r0, sp
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800cdcc:	9407      	str	r4, [sp, #28]
 800cdce:	441f      	add	r7, r3
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800cdd6:	f88d 3018 	strb.w	r3, [sp, #24]
 800cdda:	f7ff fe75 	bl	800cac8 <_ZNSt8functionIFvvEEC1ISt5_BindIFM10MainScreenFv12PowerMonitorEPS4_S5_EEvvEET_>
 800cdde:	4669      	mov	r1, sp
 800cde0:	4638      	mov	r0, r7
 800cde2:	f001 f8cf 	bl	800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>
 800cde6:	4668      	mov	r0, sp
 800cde8:	f7ff fa1a 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 800cdec:	4620      	mov	r0, r4
 800cdee:	b009      	add	sp, #36	; 0x24
 800cdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	0801bb04 	.word	0x0801bb04
 800cdf8:	0801b3db 	.word	0x0801b3db
 800cdfc:	00000000 	.word	0x00000000
 800ce00:	3df5c28f 	.word	0x3df5c28f
 800ce04:	3e6147ae 	.word	0x3e6147ae
 800ce08:	3e19999a 	.word	0x3e19999a
 800ce0c:	bc70f0f1 	.word	0xbc70f0f1
 800ce10:	3ed9999a 	.word	0x3ed9999a
 800ce14:	3e7056bd 	.word	0x3e7056bd
 800ce18:	3f47ae14 	.word	0x3f47ae14
 800ce1c:	3f01e1e2 	.word	0x3f01e1e2
 800ce20:	3f011111 	.word	0x3f011111
 800ce24:	bbf0f0f1 	.word	0xbbf0f0f1
 800ce28:	bb888889 	.word	0xbb888889
 800ce2c:	0800c9c1 	.word	0x0800c9c1

0800ce30 <_ZN8PowerBox11__getSourceEv>:
#include "Sensors/PowerMonitors.h"
#include "RoCo/RoCo.h"

class PowerBox : public Box {
public:
	TRACK_EXCEPTIONS();
 800ce30:	4800      	ldr	r0, [pc, #0]	; (800ce34 <_ZN8PowerBox11__getSourceEv+0x4>)
 800ce32:	4770      	bx	lr
 800ce34:	0801bb1c 	.word	0x0801bb1c

0800ce38 <_ZTv0_n12_N8PowerBox11__getSourceEv>:
 800ce38:	4800      	ldr	r0, [pc, #0]	; (800ce3c <_ZTv0_n12_N8PowerBox11__getSourceEv+0x4>)
 800ce3a:	4770      	bx	lr
 800ce3c:	0801bb1c 	.word	0x0801bb1c

0800ce40 <_ZN8PowerBox13handleBusInfoEhP13Power_BusInfo>:
	}

	return this;
}

void PowerBox::handleBusInfo(uint8_t sender, Power_BusInfo* packet) {
 800ce40:	b530      	push	{r4, r5, lr}
	if(packet->bus_id == monitorID) {
 800ce42:	7d03      	ldrb	r3, [r0, #20]
void PowerBox::handleBusInfo(uint8_t sender, Power_BusInfo* packet) {
 800ce44:	4615      	mov	r5, r2
	if(packet->bus_id == monitorID) {
 800ce46:	7812      	ldrb	r2, [r2, #0]
void PowerBox::handleBusInfo(uint8_t sender, Power_BusInfo* packet) {
 800ce48:	b085      	sub	sp, #20
 800ce4a:	4604      	mov	r4, r0
	if(packet->bus_id == monitorID) {
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d121      	bne.n	800ce94 <_ZN8PowerBox13handleBusInfoEhP13Power_BusInfo+0x54>
		char buffer[6];

		snprintf(buffer, 6, "%.1fW", packet->power);
 800ce50:	f8d5 3005 	ldr.w	r3, [r5, #5]
 800ce54:	2106      	movs	r1, #6
 800ce56:	4a10      	ldr	r2, [pc, #64]	; (800ce98 <_ZN8PowerBox13handleBusInfoEhP13Power_BusInfo+0x58>)
 800ce58:	a802      	add	r0, sp, #8
 800ce5a:	ee07 3a10 	vmov	s14, r3
 800ce5e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800ce62:	ed8d 7b00 	vstr	d7, [sp]
 800ce66:	f00a f93b 	bl	80170e0 <sniprintf>
		power->setText(buffer);
 800ce6a:	a902      	add	r1, sp, #8
 800ce6c:	6920      	ldr	r0, [r4, #16]
 800ce6e:	f001 fa5f 	bl	800e330 <_ZN4Text7setTextEPKc>

		snprintf(buffer, 6, "%.1fV", packet->voltage);
 800ce72:	f8d5 3001 	ldr.w	r3, [r5, #1]
 800ce76:	2106      	movs	r1, #6
 800ce78:	4a08      	ldr	r2, [pc, #32]	; (800ce9c <_ZN8PowerBox13handleBusInfoEhP13Power_BusInfo+0x5c>)
 800ce7a:	ee07 3a10 	vmov	s14, r3
 800ce7e:	a802      	add	r0, sp, #8
 800ce80:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800ce84:	ed8d 7b00 	vstr	d7, [sp]
 800ce88:	f00a f92a 	bl	80170e0 <sniprintf>
		voltage->setText(buffer);
 800ce8c:	a902      	add	r1, sp, #8
 800ce8e:	68e0      	ldr	r0, [r4, #12]
 800ce90:	f001 fa4e 	bl	800e330 <_ZN4Text7setTextEPKc>
	}
}
 800ce94:	b005      	add	sp, #20
 800ce96:	bd30      	pop	{r4, r5, pc}
 800ce98:	0801b3b3 	.word	0x0801b3b3
 800ce9c:	0801b3a6 	.word	0x0801b3a6

0800cea0 <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo>:

void PowerBox::handleSupplyInfo(uint8_t sender, Power_SupplyInfo* packet) {
	if(packet->bus_id == monitorID) {
 800cea0:	7811      	ldrb	r1, [r2, #0]
 800cea2:	7d03      	ldrb	r3, [r0, #20]
 800cea4:	4299      	cmp	r1, r3
 800cea6:	d113      	bne.n	800ced0 <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x30>
 800cea8:	7853      	ldrb	r3, [r2, #1]
		enum SupplyState state = (enum SupplyState) packet->state;

		if(state == SUPPLYING) {
			setOutlineColor(0xFFFFFF);
 800ceaa:	6802      	ldr	r2, [r0, #0]
		if(state == SUPPLYING) {
 800ceac:	2b02      	cmp	r3, #2
			setOutlineColor(0xFFFFFF);
 800ceae:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800ceb2:	4410      	add	r0, r2
		if(state == SUPPLYING) {
 800ceb4:	d103      	bne.n	800cebe <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x1e>
			setOutlineColor(0xFFFFFF);
 800ceb6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
		} else if(state == SWITCHING || state == OFF || state == NO_DAC) {
			setOutlineColor(0xFFAA00);
		} else {
			setOutlineColor(0xFF0000);
 800ceba:	f001 b827 	b.w	800df0c <_ZN9Component15setOutlineColorEm>
		} else if(state == SWITCHING || state == OFF || state == NO_DAC) {
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d901      	bls.n	800cec6 <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x26>
 800cec2:	2b08      	cmp	r3, #8
 800cec4:	d101      	bne.n	800ceca <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x2a>
			setOutlineColor(0xFFAA00);
 800cec6:	4903      	ldr	r1, [pc, #12]	; (800ced4 <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x34>)
 800cec8:	e7f7      	b.n	800ceba <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x1a>
			setOutlineColor(0xFF0000);
 800ceca:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800cece:	e7f4      	b.n	800ceba <_ZN8PowerBox16handleSupplyInfoEhP16Power_SupplyInfo+0x1a>
		}
	}
}
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	00ffaa00 	.word	0x00ffaa00

0800ced8 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    return __source._M_access<_Functor*>();
 800ced8:	6803      	ldr	r3, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800ceda:	6812      	ldr	r2, [r2, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800cedc:	b470      	push	{r4, r5, r6}
 800cede:	689d      	ldr	r5, [r3, #8]
 800cee0:	685c      	ldr	r4, [r3, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	1066      	asrs	r6, r4, #1
 800cee6:	7809      	ldrb	r1, [r1, #0]
 800cee8:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800ceec:	07e4      	lsls	r4, r4, #31
 800ceee:	bf44      	itt	mi
 800cef0:	59ac      	ldrmi	r4, [r5, r6]
 800cef2:	58e3      	ldrmi	r3, [r4, r3]
      }
 800cef4:	bc70      	pop	{r4, r5, r6}
 800cef6:	4718      	bx	r3

0800cef8 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    return __source._M_access<_Functor*>();
 800cef8:	6803      	ldr	r3, [r0, #0]
 800cefa:	6812      	ldr	r2, [r2, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800cefc:	b470      	push	{r4, r5, r6}
 800cefe:	689d      	ldr	r5, [r3, #8]
 800cf00:	685c      	ldr	r4, [r3, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	1066      	asrs	r6, r4, #1
 800cf06:	7809      	ldrb	r1, [r1, #0]
 800cf08:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800cf0c:	07e4      	lsls	r4, r4, #31
 800cf0e:	bf44      	itt	mi
 800cf10:	59ac      	ldrmi	r4, [r5, r6]
 800cf12:	58e3      	ldrmi	r3, [r4, r3]
      }
 800cf14:	bc70      	pop	{r4, r5, r6}
 800cf16:	4718      	bx	r3

0800cf18 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4604      	mov	r4, r0
	switch (__op)
 800cf1c:	b13a      	cbz	r2, 800cf2e <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 800cf1e:	2a01      	cmp	r2, #1
 800cf20:	d008      	beq.n	800cf34 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 800cf22:	2a02      	cmp	r2, #2
 800cf24:	d008      	beq.n	800cf38 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 800cf26:	2a03      	cmp	r2, #3
 800cf28:	d010      	beq.n	800cf4c <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800cf2e:	4b0b      	ldr	r3, [pc, #44]	; (800cf5c <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 800cf30:	6023      	str	r3, [r4, #0]
	}
 800cf32:	e7fa      	b.n	800cf2a <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800cf34:	680b      	ldr	r3, [r1, #0]
 800cf36:	e7fb      	b.n	800cf30 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 800cf38:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800cf3a:	200c      	movs	r0, #12
 800cf3c:	f006 fda6 	bl	8013a8c <_Znwj>
 800cf40:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800cf42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf4a:	e7f1      	b.n	800cf30 <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 800cf4c:	6800      	ldr	r0, [r0, #0]
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d0eb      	beq.n	800cf2a <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800cf52:	210c      	movs	r1, #12
 800cf54:	f008 fba4 	bl	80156a0 <_ZdlPvj>
 800cf58:	e7e7      	b.n	800cf2a <_ZNSt17_Function_handlerIFvhP16Power_SupplyInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800cf5a:	bf00      	nop
 800cf5c:	0801bd08 	.word	0x0801bd08

0800cf60 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4604      	mov	r4, r0
	switch (__op)
 800cf64:	b13a      	cbz	r2, 800cf76 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 800cf66:	2a01      	cmp	r2, #1
 800cf68:	d008      	beq.n	800cf7c <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 800cf6a:	2a02      	cmp	r2, #2
 800cf6c:	d008      	beq.n	800cf80 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 800cf6e:	2a03      	cmp	r2, #3
 800cf70:	d010      	beq.n	800cf94 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 800cf72:	2000      	movs	r0, #0
 800cf74:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 800cf78:	6023      	str	r3, [r4, #0]
	}
 800cf7a:	e7fa      	b.n	800cf72 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 800cf7c:	680b      	ldr	r3, [r1, #0]
 800cf7e:	e7fb      	b.n	800cf78 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 800cf80:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800cf82:	200c      	movs	r0, #12
 800cf84:	f006 fd82 	bl	8013a8c <_Znwj>
 800cf88:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800cf8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf92:	e7f1      	b.n	800cf78 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 800cf94:	6800      	ldr	r0, [r0, #0]
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0eb      	beq.n	800cf72 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800cf9a:	210c      	movs	r1, #12
 800cf9c:	f008 fb80 	bl	80156a0 <_ZdlPvj>
 800cfa0:	e7e7      	b.n	800cf72 <_ZNSt17_Function_handlerIFvhP13Power_BusInfoESt5_BindIFM8PowerBoxFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 800cfa2:	bf00      	nop
 800cfa4:	0801bca8 	.word	0x0801bca8

0800cfa8 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor>:
PowerBox::PowerBox(MessageBus* bus, PowerMonitor monitorID) : Box(), monitorID(monitorID) {
 800cfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfaa:	4604      	mov	r4, r0
 800cfac:	b085      	sub	sp, #20
 800cfae:	4616      	mov	r6, r2
 800cfb0:	461f      	mov	r7, r3
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	d062      	beq.n	800d07e <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xd6>
 800cfb8:	3018      	adds	r0, #24
 800cfba:	f000 fdaf 	bl	800db1c <_ZN9ComponentC1Ev>
 800cfbe:	4934      	ldr	r1, [pc, #208]	; (800d090 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xe8>)
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 fd43 	bl	800da4c <_ZN3BoxC2Ev>
 800cfc6:	2d00      	cmp	r5, #0
 800cfc8:	d15b      	bne.n	800d082 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xda>
 800cfca:	6833      	ldr	r3, [r6, #0]
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	2d00      	cmp	r5, #0
 800cfd0:	d159      	bne.n	800d086 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xde>
 800cfd2:	68f2      	ldr	r2, [r6, #12]
 800cfd4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800cfd8:	50e2      	str	r2, [r4, r3]
	this->title = new Text();
 800cfda:	20b4      	movs	r0, #180	; 0xb4
PowerBox::PowerBox(MessageBus* bus, PowerMonitor monitorID) : Box(), monitorID(monitorID) {
 800cfdc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800cfe0:	7523      	strb	r3, [r4, #20]
	this->title = new Text();
 800cfe2:	f006 fd53 	bl	8013a8c <_Znwj>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	f001 f98e 	bl	800e308 <_ZN4TextC1Ev>
	this->voltage = new Text();
 800cfec:	20b4      	movs	r0, #180	; 0xb4
	this->title = new Text();
 800cfee:	60a6      	str	r6, [r4, #8]
	this->voltage = new Text();
 800cff0:	f006 fd4c 	bl	8013a8c <_Znwj>
 800cff4:	4606      	mov	r6, r0
 800cff6:	f001 f987 	bl	800e308 <_ZN4TextC1Ev>
	this->power = new Text();
 800cffa:	20b4      	movs	r0, #180	; 0xb4
	this->voltage = new Text();
 800cffc:	60e6      	str	r6, [r4, #12]
	this->power = new Text();
 800cffe:	f006 fd45 	bl	8013a8c <_Znwj>
 800d002:	4606      	mov	r6, r0
 800d004:	f001 f980 	bl	800e308 <_ZN4TextC1Ev>
	if(title == nullptr || voltage == nullptr || power == nullptr) {
 800d008:	68a3      	ldr	r3, [r4, #8]
	this->power = new Text();
 800d00a:	6126      	str	r6, [r4, #16]
	if(title == nullptr || voltage == nullptr || power == nullptr) {
 800d00c:	b10b      	cbz	r3, 800d012 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x6a>
 800d00e:	68e3      	ldr	r3, [r4, #12]
 800d010:	b94b      	cbnz	r3, 800d026 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x7e>
		throwException("MemoryAllocationFailure");
 800d012:	2d00      	cmp	r5, #0
 800d014:	d13a      	bne.n	800d08c <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xe4>
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d01c:	2211      	movs	r2, #17
 800d01e:	491d      	ldr	r1, [pc, #116]	; (800d094 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xec>)
 800d020:	4420      	add	r0, r4
 800d022:	f006 fd0d 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
    _Function_base() : _M_manager(nullptr) { }
 800d026:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800d028:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 800d02a:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800d02c:	f006 fd2e 	bl	8013a8c <_Znwj>
      _Bind(_Bind&&) = default;
 800d030:	4b19      	ldr	r3, [pc, #100]	; (800d098 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xf0>)
	bus->handle<Power_BusInfo>(std::bind(&PowerBox::handleBusInfo, this, std::placeholders::_1, std::placeholders::_2));
 800d032:	4669      	mov	r1, sp
 800d034:	6084      	str	r4, [r0, #8]
 800d036:	9000      	str	r0, [sp, #0]
 800d038:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 800d03c:	4b17      	ldr	r3, [pc, #92]	; (800d09c <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xf4>)
 800d03e:	4638      	mov	r0, r7
 800d040:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800d042:	4b17      	ldr	r3, [pc, #92]	; (800d0a0 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xf8>)
 800d044:	9302      	str	r3, [sp, #8]
 800d046:	f005 f91f 	bl	8012288 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 800d04a:	4668      	mov	r0, sp
 800d04c:	f7ff f8e8 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800d050:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 800d052:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800d054:	f006 fd1a 	bl	8013a8c <_Znwj>
 800d058:	4b12      	ldr	r3, [pc, #72]	; (800d0a4 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0xfc>)
	bus->handle<Power_SupplyInfo>(std::bind(&PowerBox::handleSupplyInfo, this, std::placeholders::_1, std::placeholders::_2));
 800d05a:	4669      	mov	r1, sp
 800d05c:	6084      	str	r4, [r0, #8]
 800d05e:	9000      	str	r0, [sp, #0]
 800d060:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 800d064:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x100>)
 800d066:	4638      	mov	r0, r7
 800d068:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 800d06a:	4b10      	ldr	r3, [pc, #64]	; (800d0ac <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x104>)
 800d06c:	9302      	str	r3, [sp, #8]
 800d06e:	f005 f953 	bl	8012318 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 800d072:	4668      	mov	r0, sp
 800d074:	f7ff f8d4 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 800d078:	4620      	mov	r0, r4
 800d07a:	b005      	add	sp, #20
 800d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
PowerBox::PowerBox(MessageBus* bus, PowerMonitor monitorID) : Box(), monitorID(monitorID) {
 800d07e:	1d11      	adds	r1, r2, #4
 800d080:	e79e      	b.n	800cfc0 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x18>
 800d082:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x108>)
 800d084:	e7a2      	b.n	800cfcc <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x24>
 800d086:	4a0b      	ldr	r2, [pc, #44]	; (800d0b4 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x10c>)
 800d088:	2318      	movs	r3, #24
 800d08a:	e7a5      	b.n	800cfd8 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x30>
		throwException("MemoryAllocationFailure");
 800d08c:	2018      	movs	r0, #24
 800d08e:	e7c5      	b.n	800d01c <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor+0x74>
 800d090:	0801bd7c 	.word	0x0801bd7c
 800d094:	0801b3db 	.word	0x0801b3db
 800d098:	0800ce41 	.word	0x0800ce41
 800d09c:	0800cef9 	.word	0x0800cef9
 800d0a0:	0800cf61 	.word	0x0800cf61
 800d0a4:	0800cea1 	.word	0x0800cea1
 800d0a8:	0800ced9 	.word	0x0800ced9
 800d0ac:	0800cf19 	.word	0x0800cf19
 800d0b0:	0801bd94 	.word	0x0801bd94
 800d0b4:	0801bdc0 	.word	0x0801bdc0

0800d0b8 <_ZN8PowerBoxC2EP10MessageBus12PowerMonitor>:
PowerBox::PowerBox(MessageBus* bus, PowerMonitor monitorID) : Box(), monitorID(monitorID) {
 800d0b8:	b507      	push	{r0, r1, r2, lr}
}
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	460a      	mov	r2, r1
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	f7ff ff71 	bl	800cfa8 <_ZN8PowerBoxC4EP10MessageBus12PowerMonitor>
 800d0c6:	b003      	add	sp, #12
 800d0c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800d0cc <_ZN8PowerBoxD4Ev>:
PowerBox::~PowerBox() {
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4615      	mov	r5, r2
 800d0d2:	460e      	mov	r6, r1
 800d0d4:	bb29      	cbnz	r1, 800d122 <_ZN8PowerBoxD4Ev+0x56>
 800d0d6:	6813      	ldr	r3, [r2, #0]
 800d0d8:	6023      	str	r3, [r4, #0]
 800d0da:	bb26      	cbnz	r6, 800d126 <_ZN8PowerBoxD4Ev+0x5a>
 800d0dc:	68ea      	ldr	r2, [r5, #12]
 800d0de:	f853 3c0c 	ldr.w	r3, [r3, #-12]
	delete title;
 800d0e2:	68a0      	ldr	r0, [r4, #8]
PowerBox::~PowerBox() {
 800d0e4:	50e2      	str	r2, [r4, r3]
	delete title;
 800d0e6:	b110      	cbz	r0, 800d0ee <_ZN8PowerBoxD4Ev+0x22>
 800d0e8:	6803      	ldr	r3, [r0, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	4798      	blx	r3
	delete voltage;
 800d0ee:	68e0      	ldr	r0, [r4, #12]
 800d0f0:	b110      	cbz	r0, 800d0f8 <_ZN8PowerBoxD4Ev+0x2c>
 800d0f2:	6803      	ldr	r3, [r0, #0]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	4798      	blx	r3
	delete power;
 800d0f8:	6920      	ldr	r0, [r4, #16]
 800d0fa:	b110      	cbz	r0, 800d102 <_ZN8PowerBoxD4Ev+0x36>
 800d0fc:	6803      	ldr	r3, [r0, #0]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	4798      	blx	r3
PowerBox::~PowerBox() {
 800d102:	b99e      	cbnz	r6, 800d12c <_ZN8PowerBoxD4Ev+0x60>
 800d104:	3504      	adds	r5, #4
 800d106:	682b      	ldr	r3, [r5, #0]
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d10e:	686a      	ldr	r2, [r5, #4]
 800d110:	50e2      	str	r2, [r4, r3]
 800d112:	07b3      	lsls	r3, r6, #30
 800d114:	d503      	bpl.n	800d11e <_ZN8PowerBoxD4Ev+0x52>
 800d116:	f104 0018 	add.w	r0, r4, #24
 800d11a:	f7fe fda3 	bl	800bc64 <_ZN9ComponentD1Ev>
}
 800d11e:	4620      	mov	r0, r4
 800d120:	bd70      	pop	{r4, r5, r6, pc}
PowerBox::~PowerBox() {
 800d122:	4b03      	ldr	r3, [pc, #12]	; (800d130 <_ZN8PowerBoxD4Ev+0x64>)
 800d124:	e7d8      	b.n	800d0d8 <_ZN8PowerBoxD4Ev+0xc>
 800d126:	4a03      	ldr	r2, [pc, #12]	; (800d134 <_ZN8PowerBoxD4Ev+0x68>)
 800d128:	2318      	movs	r3, #24
 800d12a:	e7da      	b.n	800d0e2 <_ZN8PowerBoxD4Ev+0x16>
 800d12c:	4d02      	ldr	r5, [pc, #8]	; (800d138 <_ZN8PowerBoxD4Ev+0x6c>)
 800d12e:	e7ea      	b.n	800d106 <_ZN8PowerBoxD4Ev+0x3a>
 800d130:	0801bd94 	.word	0x0801bd94
 800d134:	0801bdc0 	.word	0x0801bdc0
 800d138:	0801bd7c 	.word	0x0801bd7c

0800d13c <_ZN8PowerBoxD1Ev>:
}
 800d13c:	2200      	movs	r2, #0
 800d13e:	2102      	movs	r1, #2
 800d140:	f7ff bfc4 	b.w	800d0cc <_ZN8PowerBoxD4Ev>

0800d144 <_ZTv0_n16_N8PowerBoxD1Ev>:

	PowerBox(MessageBus* bus, PowerMonitor monitorID);
	~PowerBox();
 800d144:	f8d0 c000 	ldr.w	ip, [r0]
 800d148:	f1ac 0c10 	sub.w	ip, ip, #16
 800d14c:	f8dc c000 	ldr.w	ip, [ip]
 800d150:	4460      	add	r0, ip
 800d152:	f7ff bff3 	b.w	800d13c <_ZN8PowerBoxD1Ev>

0800d156 <_ZN8PowerBoxD0Ev>:
PowerBox::~PowerBox() {
 800d156:	b510      	push	{r4, lr}
 800d158:	4604      	mov	r4, r0
}
 800d15a:	f7ff ffef 	bl	800d13c <_ZN8PowerBoxD1Ev>
 800d15e:	2184      	movs	r1, #132	; 0x84
 800d160:	4620      	mov	r0, r4
 800d162:	f008 fa9d 	bl	80156a0 <_ZdlPvj>
 800d166:	4620      	mov	r0, r4
 800d168:	bd10      	pop	{r4, pc}

0800d16a <_ZTv0_n16_N8PowerBoxD0Ev>:
 800d16a:	f8d0 c000 	ldr.w	ip, [r0]
 800d16e:	f1ac 0c10 	sub.w	ip, ip, #16
 800d172:	f8dc c000 	ldr.w	ip, [ip]
 800d176:	4460      	add	r0, ip
 800d178:	f7ff bfed 	b.w	800d156 <_ZN8PowerBoxD0Ev>

0800d17c <_ZN8PowerBoxD2Ev>:
PowerBox::~PowerBox() {
 800d17c:	460a      	mov	r2, r1
}
 800d17e:	2100      	movs	r1, #0
 800d180:	f7ff bfa4 	b.w	800d0cc <_ZN8PowerBoxD4Ev>

0800d184 <_ZN9SupplyBox11__getSourceEv>:

#include "PowerBox.h"

class SupplyBox : public PowerBox {
public:
	TRACK_EXCEPTIONS();
 800d184:	4800      	ldr	r0, [pc, #0]	; (800d188 <_ZN9SupplyBox11__getSourceEv+0x4>)
 800d186:	4770      	bx	lr
 800d188:	0801bdd8 	.word	0x0801bdd8

0800d18c <_ZTv0_n12_N9SupplyBox11__getSourceEv>:
 800d18c:	4800      	ldr	r0, [pc, #0]	; (800d190 <_ZTv0_n12_N9SupplyBox11__getSourceEv+0x4>)
 800d18e:	4770      	bx	lr
 800d190:	0801bdd8 	.word	0x0801bdd8

0800d194 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor>:
 *      Author: arion
 */

#include "SupplyBox.h"

SupplyBox::SupplyBox(enum Anchor align, MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d198:	4604      	mov	r4, r0
 800d19a:	4617      	mov	r7, r2
 800d19c:	461e      	mov	r6, r3
 800d19e:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	2900      	cmp	r1, #0
 800d1a6:	d06f      	beq.n	800d288 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xf4>
 800d1a8:	3018      	adds	r0, #24
 800d1aa:	f000 fcb7 	bl	800db1c <_ZN9ComponentC1Ev>
 800d1ae:	494d      	ldr	r1, [pc, #308]	; (800d2e4 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x150>)
 800d1b0:	4643      	mov	r3, r8
 800d1b2:	9a06      	ldr	r2, [sp, #24]
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7ff ff7f 	bl	800d0b8 <_ZN8PowerBoxC2EP10MessageBus12PowerMonitor>
 800d1ba:	2d00      	cmp	r5, #0
 800d1bc:	d166      	bne.n	800d28c <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xf8>
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	6022      	str	r2, [r4, #0]
 800d1c2:	2d00      	cmp	r5, #0
 800d1c4:	d164      	bne.n	800d290 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xfc>
 800d1c6:	6979      	ldr	r1, [r7, #20]
 800d1c8:	f852 3c0c 	ldr.w	r3, [r2, #-12]
 800d1cc:	50e1      	str	r1, [r4, r3]
	setBorderRadius(1.0f);
 800d1ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 fc5a 	bl	800da8c <_ZN3Box15setBorderRadiusEf>

	title->setAnchor(align)->setText(toString(monitorID))->setFontSize(29);
 800d1d8:	4631      	mov	r1, r6
 800d1da:	68a0      	ldr	r0, [r4, #8]
 800d1dc:	f001 f8ba 	bl	800e354 <_ZN4Text9setAnchorE6Anchor>
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	f007 fe74 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800d1e8:	4601      	mov	r1, r0
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	f001 f8a0 	bl	800e330 <_ZN4Text7setTextEPKc>
 800d1f0:	211d      	movs	r1, #29
 800d1f2:	f001 f8ac 	bl	800e34e <_ZN4Text11setFontSizeEh>
	voltage->setText("0.0V")->setFontSize(31);
 800d1f6:	493c      	ldr	r1, [pc, #240]	; (800d2e8 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x154>)
 800d1f8:	68e0      	ldr	r0, [r4, #12]
 800d1fa:	f001 f899 	bl	800e330 <_ZN4Text7setTextEPKc>
 800d1fe:	211f      	movs	r1, #31
 800d200:	f001 f8a5 	bl	800e34e <_ZN4Text11setFontSizeEh>
	power->setText("0.0W")->setFontSize(27);
 800d204:	4939      	ldr	r1, [pc, #228]	; (800d2ec <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x158>)
 800d206:	6920      	ldr	r0, [r4, #16]
 800d208:	f001 f892 	bl	800e330 <_ZN4Text7setTextEPKc>
 800d20c:	211b      	movs	r1, #27
 800d20e:	f001 f89e 	bl	800e34e <_ZN4Text11setFontSizeEh>

	if(align == West) {
 800d212:	2e03      	cmp	r6, #3
 800d214:	d141      	bne.n	800d29a <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x106>
		add(title, 0.05f, 0.15f);
 800d216:	2d00      	cmp	r5, #0
 800d218:	d13d      	bne.n	800d296 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x102>
 800d21a:	6823      	ldr	r3, [r4, #0]
 800d21c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d220:	68a1      	ldr	r1, [r4, #8]
 800d222:	4420      	add	r0, r4
 800d224:	b119      	cbz	r1, 800d22e <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x9a>
 800d226:	680b      	ldr	r3, [r1, #0]
 800d228:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d22c:	4419      	add	r1, r3
 800d22e:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d2f0 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x15c>
 800d232:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800d2f4 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x160>
	} else if(align == East) {
		add(title, 0.95f, 0.15f);
 800d236:	f000 fced 	bl	800dc14 <_ZN9Component3addEPS_ff>
	} else {
		throwException("Not implemented");
	}

	add(voltage, 0.5f, 0.5f);
 800d23a:	2d00      	cmp	r5, #0
 800d23c:	d14d      	bne.n	800d2da <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x146>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d244:	68e1      	ldr	r1, [r4, #12]
 800d246:	4420      	add	r0, r4
 800d248:	b119      	cbz	r1, 800d252 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xbe>
 800d24a:	680b      	ldr	r3, [r1, #0]
 800d24c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d250:	4419      	add	r1, r3
 800d252:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800d256:	eeb0 0a60 	vmov.f32	s0, s1
 800d25a:	f000 fcdb 	bl	800dc14 <_ZN9Component3addEPS_ff>
	add(power, 0.5f, 0.75f);
 800d25e:	2d00      	cmp	r5, #0
 800d260:	d13d      	bne.n	800d2de <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x14a>
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d268:	6921      	ldr	r1, [r4, #16]
 800d26a:	4420      	add	r0, r4
 800d26c:	b119      	cbz	r1, 800d276 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xe2>
 800d26e:	680b      	ldr	r3, [r1, #0]
 800d270:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d274:	4419      	add	r1, r3
 800d276:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 800d27a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d27e:	f000 fcc9 	bl	800dc14 <_ZN9Component3addEPS_ff>
}
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
SupplyBox::SupplyBox(enum Anchor align, MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d288:	1d11      	adds	r1, r2, #4
 800d28a:	e791      	b.n	800d1b0 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x1c>
 800d28c:	4a1a      	ldr	r2, [pc, #104]	; (800d2f8 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x164>)
 800d28e:	e797      	b.n	800d1c0 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x2c>
 800d290:	491a      	ldr	r1, [pc, #104]	; (800d2fc <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x168>)
 800d292:	2318      	movs	r3, #24
 800d294:	e79a      	b.n	800d1cc <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x38>
		add(title, 0.05f, 0.15f);
 800d296:	2018      	movs	r0, #24
 800d298:	e7c2      	b.n	800d220 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x8c>
	} else if(align == East) {
 800d29a:	2e05      	cmp	r6, #5
 800d29c:	d111      	bne.n	800d2c2 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x12e>
		add(title, 0.95f, 0.15f);
 800d29e:	b975      	cbnz	r5, 800d2be <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x12a>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d2a6:	68a1      	ldr	r1, [r4, #8]
 800d2a8:	4420      	add	r0, r4
 800d2aa:	b119      	cbz	r1, 800d2b4 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x120>
 800d2ac:	680b      	ldr	r3, [r1, #0]
 800d2ae:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d2b2:	4419      	add	r1, r3
 800d2b4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800d2f0 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x15c>
 800d2b8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800d300 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x16c>
 800d2bc:	e7bb      	b.n	800d236 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xa2>
 800d2be:	2018      	movs	r0, #24
 800d2c0:	e7f1      	b.n	800d2a6 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x112>
		throwException("Not implemented");
 800d2c2:	b945      	cbnz	r5, 800d2d6 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x142>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d2ca:	2216      	movs	r2, #22
 800d2cc:	490d      	ldr	r1, [pc, #52]	; (800d304 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x170>)
 800d2ce:	4420      	add	r0, r4
 800d2d0:	f006 fbb6 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
 800d2d4:	e7b1      	b.n	800d23a <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xa6>
 800d2d6:	2018      	movs	r0, #24
 800d2d8:	e7f7      	b.n	800d2ca <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0x136>
	add(voltage, 0.5f, 0.5f);
 800d2da:	2018      	movs	r0, #24
 800d2dc:	e7b2      	b.n	800d244 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xb0>
	add(power, 0.5f, 0.75f);
 800d2de:	2018      	movs	r0, #24
 800d2e0:	e7c2      	b.n	800d268 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor+0xd4>
 800d2e2:	bf00      	nop
 800d2e4:	0801bebc 	.word	0x0801bebc
 800d2e8:	0801b402 	.word	0x0801b402
 800d2ec:	0801b40e 	.word	0x0801b40e
 800d2f0:	3e19999a 	.word	0x3e19999a
 800d2f4:	3d4ccccd 	.word	0x3d4ccccd
 800d2f8:	0801bedc 	.word	0x0801bedc
 800d2fc:	0801bf08 	.word	0x0801bf08
 800d300:	3f733333 	.word	0x3f733333
 800d304:	0801bdf2 	.word	0x0801bdf2

0800d308 <_ZN9SupplyBoxC1E6AnchorP10MessageBus12PowerMonitor>:
SupplyBox::SupplyBox(enum Anchor align, MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d308:	b507      	push	{r0, r1, r2, lr}
}
 800d30a:	e9cd 2300 	strd	r2, r3, [sp]
 800d30e:	460b      	mov	r3, r1
 800d310:	2200      	movs	r2, #0
 800d312:	2101      	movs	r1, #1
 800d314:	f7ff ff3e 	bl	800d194 <_ZN9SupplyBoxC4E6AnchorP10MessageBus12PowerMonitor>
 800d318:	b003      	add	sp, #12
 800d31a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d320 <_ZN9SupplyBoxD4Ev>:
class SupplyBox : public PowerBox {
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4604      	mov	r4, r0
 800d324:	460d      	mov	r5, r1
 800d326:	b999      	cbnz	r1, 800d350 <_ZN9SupplyBoxD4Ev+0x30>
 800d328:	6813      	ldr	r3, [r2, #0]
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	b995      	cbnz	r5, 800d354 <_ZN9SupplyBoxD4Ev+0x34>
 800d32e:	6951      	ldr	r1, [r2, #20]
 800d330:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d334:	50e1      	str	r1, [r4, r3]
 800d336:	b985      	cbnz	r5, 800d35a <_ZN9SupplyBoxD4Ev+0x3a>
 800d338:	1d11      	adds	r1, r2, #4
 800d33a:	4620      	mov	r0, r4
 800d33c:	f7ff ff1e 	bl	800d17c <_ZN8PowerBoxD2Ev>
 800d340:	07ab      	lsls	r3, r5, #30
 800d342:	d503      	bpl.n	800d34c <_ZN9SupplyBoxD4Ev+0x2c>
 800d344:	f104 0018 	add.w	r0, r4, #24
 800d348:	f7fe fc8c 	bl	800bc64 <_ZN9ComponentD1Ev>
 800d34c:	4620      	mov	r0, r4
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	4b03      	ldr	r3, [pc, #12]	; (800d360 <_ZN9SupplyBoxD4Ev+0x40>)
 800d352:	e7ea      	b.n	800d32a <_ZN9SupplyBoxD4Ev+0xa>
 800d354:	4903      	ldr	r1, [pc, #12]	; (800d364 <_ZN9SupplyBoxD4Ev+0x44>)
 800d356:	2318      	movs	r3, #24
 800d358:	e7ec      	b.n	800d334 <_ZN9SupplyBoxD4Ev+0x14>
 800d35a:	4903      	ldr	r1, [pc, #12]	; (800d368 <_ZN9SupplyBoxD4Ev+0x48>)
 800d35c:	e7ed      	b.n	800d33a <_ZN9SupplyBoxD4Ev+0x1a>
 800d35e:	bf00      	nop
 800d360:	0801bedc 	.word	0x0801bedc
 800d364:	0801bf08 	.word	0x0801bf08
 800d368:	0801bebc 	.word	0x0801bebc

0800d36c <_ZN9SupplyBoxD1Ev>:
 800d36c:	2200      	movs	r2, #0
 800d36e:	2102      	movs	r1, #2
 800d370:	f7ff bfd6 	b.w	800d320 <_ZN9SupplyBoxD4Ev>

0800d374 <_ZTv0_n16_N9SupplyBoxD1Ev>:
 800d374:	f8d0 c000 	ldr.w	ip, [r0]
 800d378:	f1ac 0c10 	sub.w	ip, ip, #16
 800d37c:	f8dc c000 	ldr.w	ip, [ip]
 800d380:	4460      	add	r0, ip
 800d382:	e7f3      	b.n	800d36c <_ZN9SupplyBoxD1Ev>

0800d384 <_ZN9SupplyBoxD0Ev>:
 800d384:	b510      	push	{r4, lr}
 800d386:	4604      	mov	r4, r0
 800d388:	f7ff fff0 	bl	800d36c <_ZN9SupplyBoxD1Ev>
 800d38c:	2184      	movs	r1, #132	; 0x84
 800d38e:	4620      	mov	r0, r4
 800d390:	f008 f986 	bl	80156a0 <_ZdlPvj>
 800d394:	4620      	mov	r0, r4
 800d396:	bd10      	pop	{r4, pc}

0800d398 <_ZTv0_n16_N9SupplyBoxD0Ev>:
 800d398:	f8d0 c000 	ldr.w	ip, [r0]
 800d39c:	f1ac 0c10 	sub.w	ip, ip, #16
 800d3a0:	f8dc c000 	ldr.w	ip, [ip]
 800d3a4:	4460      	add	r0, ip
 800d3a6:	e7ed      	b.n	800d384 <_ZN9SupplyBoxD0Ev>

0800d3a8 <_ZN9SupplyBoxD2Ev>:
 800d3a8:	460a      	mov	r2, r1
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	f7ff bfb8 	b.w	800d320 <_ZN9SupplyBoxD4Ev>

0800d3b0 <_ZN14UnregulatedBox11__getSourceEv>:

#include "PowerBox.h"

class UnregulatedBox : public PowerBox {
public:
	TRACK_EXCEPTIONS();
 800d3b0:	4800      	ldr	r0, [pc, #0]	; (800d3b4 <_ZN14UnregulatedBox11__getSourceEv+0x4>)
 800d3b2:	4770      	bx	lr
 800d3b4:	0801bf20 	.word	0x0801bf20

0800d3b8 <_ZTv0_n12_N14UnregulatedBox11__getSourceEv>:
 800d3b8:	4800      	ldr	r0, [pc, #0]	; (800d3bc <_ZTv0_n12_N14UnregulatedBox11__getSourceEv+0x4>)
 800d3ba:	4770      	bx	lr
 800d3bc:	0801bf20 	.word	0x0801bf20

0800d3c0 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor>:
 */

#include "UnregulatedBox.h"
#include "EmbeddedGL/Theme.h"

UnregulatedBox::UnregulatedBox(MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c2:	4616      	mov	r6, r2
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800d3cc:	460d      	mov	r5, r1
 800d3ce:	2900      	cmp	r1, #0
 800d3d0:	d07b      	beq.n	800d4ca <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x10a>
 800d3d2:	3018      	adds	r0, #24
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	f000 fba1 	bl	800db1c <_ZN9ComponentC1Ev>
 800d3da:	4944      	ldr	r1, [pc, #272]	; (800d4ec <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x12c>)
 800d3dc:	9a01      	ldr	r2, [sp, #4]
 800d3de:	463b      	mov	r3, r7
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f7ff fe69 	bl	800d0b8 <_ZN8PowerBoxC2EP10MessageBus12PowerMonitor>
 800d3e6:	2d00      	cmp	r5, #0
 800d3e8:	d171      	bne.n	800d4ce <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x10e>
 800d3ea:	6833      	ldr	r3, [r6, #0]
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	2d00      	cmp	r5, #0
 800d3f0:	d16f      	bne.n	800d4d2 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x112>
 800d3f2:	6972      	ldr	r2, [r6, #20]
 800d3f4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
	setBorderRadius(4.0f);
 800d3f8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800d3fc:	4620      	mov	r0, r4
UnregulatedBox::UnregulatedBox(MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d3fe:	50e2      	str	r2, [r4, r3]
	setBorderRadius(4.0f);
 800d400:	f000 fb44 	bl	800da8c <_ZN3Box15setBorderRadiusEf>
	setBackgroundColor(BACKGROUND_COLOR);
 800d404:	2d00      	cmp	r5, #0
 800d406:	d167      	bne.n	800d4d8 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x118>
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d40e:	4938      	ldr	r1, [pc, #224]	; (800d4f0 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x130>)
 800d410:	4420      	add	r0, r4
 800d412:	f000 fd80 	bl	800df16 <_ZN9Component18setBackgroundColorEm>
	setOutlineColor(OUTLINE_COLOR);
 800d416:	2d00      	cmp	r5, #0
 800d418:	d160      	bne.n	800d4dc <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x11c>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d420:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d424:	4420      	add	r0, r4
 800d426:	f000 fd71 	bl	800df0c <_ZN9Component15setOutlineColorEm>

	title->setText(toString(monitorID))->setFontSize(27);
 800d42a:	68a6      	ldr	r6, [r4, #8]
 800d42c:	4638      	mov	r0, r7
 800d42e:	f007 fd4f 	bl	8014ed0 <_Z8toString12PowerMonitor>
 800d432:	4601      	mov	r1, r0
 800d434:	4630      	mov	r0, r6
 800d436:	f000 ff7b 	bl	800e330 <_ZN4Text7setTextEPKc>
 800d43a:	211b      	movs	r1, #27
 800d43c:	f000 ff87 	bl	800e34e <_ZN4Text11setFontSizeEh>
	voltage->setText("0.0V")->setFontSize(26);
 800d440:	492c      	ldr	r1, [pc, #176]	; (800d4f4 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x134>)
 800d442:	68e0      	ldr	r0, [r4, #12]
 800d444:	f000 ff74 	bl	800e330 <_ZN4Text7setTextEPKc>
 800d448:	211a      	movs	r1, #26
 800d44a:	f000 ff80 	bl	800e34e <_ZN4Text11setFontSizeEh>
	power->setText("0.0W")->setFontSize(26);
 800d44e:	492a      	ldr	r1, [pc, #168]	; (800d4f8 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x138>)
 800d450:	6920      	ldr	r0, [r4, #16]
 800d452:	f000 ff6d 	bl	800e330 <_ZN4Text7setTextEPKc>
 800d456:	211a      	movs	r1, #26
 800d458:	f000 ff79 	bl	800e34e <_ZN4Text11setFontSizeEh>

	add(title, 0.5f, 0.25f);
 800d45c:	2d00      	cmp	r5, #0
 800d45e:	d13f      	bne.n	800d4e0 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x120>
 800d460:	6823      	ldr	r3, [r4, #0]
 800d462:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d466:	68a1      	ldr	r1, [r4, #8]
 800d468:	4420      	add	r0, r4
 800d46a:	b119      	cbz	r1, 800d474 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0xb4>
 800d46c:	680b      	ldr	r3, [r1, #0]
 800d46e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d472:	4419      	add	r1, r3
 800d474:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 800d478:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d47c:	f000 fbca 	bl	800dc14 <_ZN9Component3addEPS_ff>
	add(voltage, 0.5f, 0.55f);
 800d480:	bb85      	cbnz	r5, 800d4e4 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x124>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d488:	68e1      	ldr	r1, [r4, #12]
 800d48a:	4420      	add	r0, r4
 800d48c:	b119      	cbz	r1, 800d496 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0xd6>
 800d48e:	680b      	ldr	r3, [r1, #0]
 800d490:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d494:	4419      	add	r1, r3
 800d496:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d49a:	eddf 0a18 	vldr	s1, [pc, #96]	; 800d4fc <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x13c>
 800d49e:	f000 fbb9 	bl	800dc14 <_ZN9Component3addEPS_ff>
	add(power, 0.5f, 0.8f);
 800d4a2:	bb0d      	cbnz	r5, 800d4e8 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x128>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d4aa:	6921      	ldr	r1, [r4, #16]
 800d4ac:	4420      	add	r0, r4
 800d4ae:	b119      	cbz	r1, 800d4b8 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0xf8>
 800d4b0:	680b      	ldr	r3, [r1, #0]
 800d4b2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d4b6:	4419      	add	r1, r3
 800d4b8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d4bc:	eddf 0a10 	vldr	s1, [pc, #64]	; 800d500 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x140>
 800d4c0:	f000 fba8 	bl	800dc14 <_ZN9Component3addEPS_ff>
}
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	b003      	add	sp, #12
 800d4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
UnregulatedBox::UnregulatedBox(MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d4ca:	1d31      	adds	r1, r6, #4
 800d4cc:	e787      	b.n	800d3de <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x1e>
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	; (800d504 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x144>)
 800d4d0:	e78c      	b.n	800d3ec <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x2c>
 800d4d2:	4a0d      	ldr	r2, [pc, #52]	; (800d508 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x148>)
 800d4d4:	2318      	movs	r3, #24
 800d4d6:	e78f      	b.n	800d3f8 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x38>
	setBackgroundColor(BACKGROUND_COLOR);
 800d4d8:	2018      	movs	r0, #24
 800d4da:	e798      	b.n	800d40e <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x4e>
	setOutlineColor(OUTLINE_COLOR);
 800d4dc:	2018      	movs	r0, #24
 800d4de:	e79f      	b.n	800d420 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0x60>
	add(title, 0.5f, 0.25f);
 800d4e0:	2018      	movs	r0, #24
 800d4e2:	e7c0      	b.n	800d466 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0xa6>
	add(voltage, 0.5f, 0.55f);
 800d4e4:	2018      	movs	r0, #24
 800d4e6:	e7cf      	b.n	800d488 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0xc8>
	add(power, 0.5f, 0.8f);
 800d4e8:	2018      	movs	r0, #24
 800d4ea:	e7de      	b.n	800d4aa <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor+0xea>
 800d4ec:	0801bffc 	.word	0x0801bffc
 800d4f0:	00141c31 	.word	0x00141c31
 800d4f4:	0801b402 	.word	0x0801b402
 800d4f8:	0801b40e 	.word	0x0801b40e
 800d4fc:	3f0ccccd 	.word	0x3f0ccccd
 800d500:	3f4ccccd 	.word	0x3f4ccccd
 800d504:	0801c01c 	.word	0x0801c01c
 800d508:	0801c048 	.word	0x0801c048

0800d50c <_ZN14UnregulatedBoxC1EP10MessageBus12PowerMonitor>:
UnregulatedBox::UnregulatedBox(MessageBus* bus, PowerMonitor monitorID) : PowerBox(bus, monitorID) {
 800d50c:	b507      	push	{r0, r1, r2, lr}
 800d50e:	460b      	mov	r3, r1
}
 800d510:	9200      	str	r2, [sp, #0]
 800d512:	2101      	movs	r1, #1
 800d514:	2200      	movs	r2, #0
 800d516:	f7ff ff53 	bl	800d3c0 <_ZN14UnregulatedBoxC4EP10MessageBus12PowerMonitor>
 800d51a:	b003      	add	sp, #12
 800d51c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d520 <_ZN14UnregulatedBoxD4Ev>:
class UnregulatedBox : public PowerBox {
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4604      	mov	r4, r0
 800d524:	460d      	mov	r5, r1
 800d526:	b999      	cbnz	r1, 800d550 <_ZN14UnregulatedBoxD4Ev+0x30>
 800d528:	6813      	ldr	r3, [r2, #0]
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	b995      	cbnz	r5, 800d554 <_ZN14UnregulatedBoxD4Ev+0x34>
 800d52e:	6951      	ldr	r1, [r2, #20]
 800d530:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d534:	50e1      	str	r1, [r4, r3]
 800d536:	b985      	cbnz	r5, 800d55a <_ZN14UnregulatedBoxD4Ev+0x3a>
 800d538:	1d11      	adds	r1, r2, #4
 800d53a:	4620      	mov	r0, r4
 800d53c:	f7ff fe1e 	bl	800d17c <_ZN8PowerBoxD2Ev>
 800d540:	07ab      	lsls	r3, r5, #30
 800d542:	d503      	bpl.n	800d54c <_ZN14UnregulatedBoxD4Ev+0x2c>
 800d544:	f104 0018 	add.w	r0, r4, #24
 800d548:	f7fe fb8c 	bl	800bc64 <_ZN9ComponentD1Ev>
 800d54c:	4620      	mov	r0, r4
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	4b03      	ldr	r3, [pc, #12]	; (800d560 <_ZN14UnregulatedBoxD4Ev+0x40>)
 800d552:	e7ea      	b.n	800d52a <_ZN14UnregulatedBoxD4Ev+0xa>
 800d554:	4903      	ldr	r1, [pc, #12]	; (800d564 <_ZN14UnregulatedBoxD4Ev+0x44>)
 800d556:	2318      	movs	r3, #24
 800d558:	e7ec      	b.n	800d534 <_ZN14UnregulatedBoxD4Ev+0x14>
 800d55a:	4903      	ldr	r1, [pc, #12]	; (800d568 <_ZN14UnregulatedBoxD4Ev+0x48>)
 800d55c:	e7ed      	b.n	800d53a <_ZN14UnregulatedBoxD4Ev+0x1a>
 800d55e:	bf00      	nop
 800d560:	0801c01c 	.word	0x0801c01c
 800d564:	0801c048 	.word	0x0801c048
 800d568:	0801bffc 	.word	0x0801bffc

0800d56c <_ZN14UnregulatedBoxD1Ev>:
 800d56c:	2200      	movs	r2, #0
 800d56e:	2102      	movs	r1, #2
 800d570:	f7ff bfd6 	b.w	800d520 <_ZN14UnregulatedBoxD4Ev>

0800d574 <_ZTv0_n16_N14UnregulatedBoxD1Ev>:
 800d574:	f8d0 c000 	ldr.w	ip, [r0]
 800d578:	f1ac 0c10 	sub.w	ip, ip, #16
 800d57c:	f8dc c000 	ldr.w	ip, [ip]
 800d580:	4460      	add	r0, ip
 800d582:	e7f3      	b.n	800d56c <_ZN14UnregulatedBoxD1Ev>

0800d584 <_ZN14UnregulatedBoxD0Ev>:
 800d584:	b510      	push	{r4, lr}
 800d586:	4604      	mov	r4, r0
 800d588:	f7ff fff0 	bl	800d56c <_ZN14UnregulatedBoxD1Ev>
 800d58c:	2184      	movs	r1, #132	; 0x84
 800d58e:	4620      	mov	r0, r4
 800d590:	f008 f886 	bl	80156a0 <_ZdlPvj>
 800d594:	4620      	mov	r0, r4
 800d596:	bd10      	pop	{r4, pc}

0800d598 <_ZTv0_n16_N14UnregulatedBoxD0Ev>:
 800d598:	f8d0 c000 	ldr.w	ip, [r0]
 800d59c:	f1ac 0c10 	sub.w	ip, ip, #16
 800d5a0:	f8dc c000 	ldr.w	ip, [ip]
 800d5a4:	4460      	add	r0, ip
 800d5a6:	e7ed      	b.n	800d584 <_ZN14UnregulatedBoxD0Ev>

0800d5a8 <_ZN14UnregulatedBoxD2Ev>:
 800d5a8:	460a      	mov	r2, r1
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	f7ff bfb8 	b.w	800d520 <_ZN14UnregulatedBoxD4Ev>

0800d5b0 <prv_send_can_message>:
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
    static FDCAN_TxHeaderTypeDef tx_hdr;
    uint8_t success = 0;

    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_FDCAN_GetTxFifoFreeLevel(CANModule_local->CANptr) > 0) {
 800d5b0:	4b22      	ldr	r3, [pc, #136]	; (800d63c <prv_send_can_message+0x8c>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	4606      	mov	r6, r0
    if (HAL_FDCAN_GetTxFifoFreeLevel(CANModule_local->CANptr) > 0) {
 800d5b8:	6818      	ldr	r0, [r3, #0]
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
 800d5ba:	460d      	mov	r5, r1
    if (HAL_FDCAN_GetTxFifoFreeLevel(CANModule_local->CANptr) > 0) {
 800d5bc:	f7f6 ff22 	bl	8004404 <HAL_FDCAN_GetTxFifoFreeLevel>
 800d5c0:	b310      	cbz	r0, 800d608 <prv_send_can_message+0x58>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 800d5c2:	682c      	ldr	r4, [r5, #0]
 800d5c4:	4b1e      	ldr	r3, [pc, #120]	; (800d640 <prv_send_can_message+0x90>)
 800d5c6:	f3c4 020a 	ubfx	r2, r4, #0, #11
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 800d5ca:	03a4      	lsls	r4, r4, #14
 800d5cc:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 800d5d0:	601a      	str	r2, [r3, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 800d5d2:	609c      	str	r4, [r3, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 800d5d4:	2400      	movs	r4, #0
 800d5d6:	605c      	str	r4, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
        tx_hdr.MessageMarker = 0;
 800d5d8:	621c      	str	r4, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800d5da:	611c      	str	r4, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800d5dc:	61dc      	str	r4, [r3, #28]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 800d5de:	e9c3 4405 	strd	r4, r4, [r3, #20]

        switch (buffer->DLC) {
 800d5e2:	792a      	ldrb	r2, [r5, #4]
 800d5e4:	2a08      	cmp	r2, #8
 800d5e6:	d807      	bhi.n	800d5f8 <prv_send_can_message+0x48>
 800d5e8:	e8df f002 	tbb	[pc, r2]
 800d5ec:	16130f05 	.word	0x16130f05
 800d5f0:	221f1c19 	.word	0x221f1c19
 800d5f4:	25          	.byte	0x25
 800d5f5:	00          	.byte	0x00
            case 0: tx_hdr.DataLength = FDCAN_DLC_BYTES_0; break;
 800d5f6:	60dc      	str	r4, [r3, #12]
            case 8: tx_hdr.DataLength = FDCAN_DLC_BYTES_8; break;
            default: /* Hard error... */ break;
        }

        /* Now add message to FIFO. Should not fail */
        success = HAL_FDCAN_AddMessageToTxFifoQ(CANmodule->CANptr, &tx_hdr, buffer->data) == HAL_OK;
 800d5f8:	1d6a      	adds	r2, r5, #5
 800d5fa:	4911      	ldr	r1, [pc, #68]	; (800d640 <prv_send_can_message+0x90>)
 800d5fc:	6830      	ldr	r0, [r6, #0]
 800d5fe:	f7f6 fe17 	bl	8004230 <HAL_FDCAN_AddMessageToTxFifoQ>
 800d602:	fab0 f080 	clz	r0, r0
 800d606:	0940      	lsrs	r0, r0, #5
    }
    return success;
}
 800d608:	bd70      	pop	{r4, r5, r6, pc}
            case 1: tx_hdr.DataLength = FDCAN_DLC_BYTES_1; break;
 800d60a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
            case 8: tx_hdr.DataLength = FDCAN_DLC_BYTES_8; break;
 800d60e:	60da      	str	r2, [r3, #12]
 800d610:	e7f2      	b.n	800d5f8 <prv_send_can_message+0x48>
            case 2: tx_hdr.DataLength = FDCAN_DLC_BYTES_2; break;
 800d612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d616:	e7fa      	b.n	800d60e <prv_send_can_message+0x5e>
            case 3: tx_hdr.DataLength = FDCAN_DLC_BYTES_3; break;
 800d618:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d61c:	e7f7      	b.n	800d60e <prv_send_can_message+0x5e>
            case 4: tx_hdr.DataLength = FDCAN_DLC_BYTES_4; break;
 800d61e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d622:	e7f4      	b.n	800d60e <prv_send_can_message+0x5e>
            case 5: tx_hdr.DataLength = FDCAN_DLC_BYTES_5; break;
 800d624:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800d628:	e7f1      	b.n	800d60e <prv_send_can_message+0x5e>
            case 6: tx_hdr.DataLength = FDCAN_DLC_BYTES_6; break;
 800d62a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800d62e:	e7ee      	b.n	800d60e <prv_send_can_message+0x5e>
            case 7: tx_hdr.DataLength = FDCAN_DLC_BYTES_7; break;
 800d630:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800d634:	e7eb      	b.n	800d60e <prv_send_can_message+0x5e>
            case 8: tx_hdr.DataLength = FDCAN_DLC_BYTES_8; break;
 800d636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d63a:	e7e8      	b.n	800d60e <prv_send_can_message+0x5e>
 800d63c:	2404150c 	.word	0x2404150c
 800d640:	24041538 	.word	0x24041538

0800d644 <prv_read_can_received_msg.constprop.0>:
 *                      the configuration information for the specified FDCAN.
 * \param[in]       fifo: Fifo number to use for read
 * \param[in]       fifo_isrs: List of interrupts for respected FIFO
 */
static void
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs) {
 800d644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint16_t index;                         /* index of received message */
    uint32_t rcvMsgIdent;                   /* identifier of the received message */
    uint8_t messageFound = 0;

    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 800d646:	4c2d      	ldr	r4, [pc, #180]	; (800d6fc <prv_read_can_received_msg.constprop.0+0xb8>)
 800d648:	f10d 0305 	add.w	r3, sp, #5
 800d64c:	4622      	mov	r2, r4
 800d64e:	f7f6 fe23 	bl	8004298 <HAL_FDCAN_GetRxMessage>
 800d652:	bb00      	cbnz	r0, 800d696 <prv_read_can_received_msg.constprop.0+0x52>
        return;
    }

    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 800d654:	68a3      	ldr	r3, [r4, #8]
 800d656:	6821      	ldr	r1, [r4, #0]
 800d658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d65c:	bf0c      	ite	eq
 800d65e:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 800d662:	2300      	movne	r3, #0
 800d664:	4319      	orrs	r1, r3
    switch (rx_hdr.DataLength) {
 800d666:	68e3      	ldr	r3, [r4, #12]
 800d668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 800d66c:	9100      	str	r1, [sp, #0]
    switch (rx_hdr.DataLength) {
 800d66e:	d02a      	beq.n	800d6c6 <prv_read_can_received_msg.constprop.0+0x82>
 800d670:	d818      	bhi.n	800d6a4 <prv_read_can_received_msg.constprop.0+0x60>
 800d672:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d676:	d024      	beq.n	800d6c2 <prv_read_can_received_msg.constprop.0+0x7e>
 800d678:	d80f      	bhi.n	800d69a <prv_read_can_received_msg.constprop.0+0x56>
 800d67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d67e:	d01c      	beq.n	800d6ba <prv_read_can_received_msg.constprop.0+0x76>
 800d680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d684:	d01b      	beq.n	800d6be <prv_read_can_received_msg.constprop.0+0x7a>
        case FDCAN_DLC_BYTES_0: rcvMsg.dlc = 0; break;
 800d686:	2300      	movs	r3, #0
        case FDCAN_DLC_BYTES_3: rcvMsg.dlc = 3; break;
        case FDCAN_DLC_BYTES_4: rcvMsg.dlc = 4; break;
        case FDCAN_DLC_BYTES_5: rcvMsg.dlc = 5; break;
        case FDCAN_DLC_BYTES_6: rcvMsg.dlc = 6; break;
        case FDCAN_DLC_BYTES_7: rcvMsg.dlc = 7; break;
        case FDCAN_DLC_BYTES_8: rcvMsg.dlc = 8; break;
 800d688:	f88d 3004 	strb.w	r3, [sp, #4]

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 800d68c:	4b1c      	ldr	r3, [pc, #112]	; (800d700 <prv_read_can_received_msg.constprop.0+0xbc>)
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	6993      	ldr	r3, [r2, #24]
 800d692:	b1f3      	cbz	r3, 800d6d2 <prv_read_can_received_msg.constprop.0+0x8e>
        __NOP();
 800d694:	bf00      	nop

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
        buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
    }
}
 800d696:	b004      	add	sp, #16
 800d698:	bd10      	pop	{r4, pc}
    switch (rx_hdr.DataLength) {
 800d69a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d69e:	d1f2      	bne.n	800d686 <prv_read_can_received_msg.constprop.0+0x42>
        case FDCAN_DLC_BYTES_4: rcvMsg.dlc = 4; break;
 800d6a0:	2304      	movs	r3, #4
 800d6a2:	e7f1      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
    switch (rx_hdr.DataLength) {
 800d6a4:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800d6a8:	d00f      	beq.n	800d6ca <prv_read_can_received_msg.constprop.0+0x86>
 800d6aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d6ae:	d00e      	beq.n	800d6ce <prv_read_can_received_msg.constprop.0+0x8a>
 800d6b0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d6b4:	d1e7      	bne.n	800d686 <prv_read_can_received_msg.constprop.0+0x42>
        case FDCAN_DLC_BYTES_6: rcvMsg.dlc = 6; break;
 800d6b6:	2306      	movs	r3, #6
 800d6b8:	e7e6      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        case FDCAN_DLC_BYTES_1: rcvMsg.dlc = 1; break;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e7e4      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        case FDCAN_DLC_BYTES_2: rcvMsg.dlc = 2; break;
 800d6be:	2302      	movs	r3, #2
 800d6c0:	e7e2      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        case FDCAN_DLC_BYTES_3: rcvMsg.dlc = 3; break;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	e7e0      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        case FDCAN_DLC_BYTES_5: rcvMsg.dlc = 5; break;
 800d6c6:	2305      	movs	r3, #5
 800d6c8:	e7de      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        case FDCAN_DLC_BYTES_7: rcvMsg.dlc = 7; break;
 800d6ca:	2307      	movs	r3, #7
 800d6cc:	e7dc      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        case FDCAN_DLC_BYTES_8: rcvMsg.dlc = 8; break;
 800d6ce:	2308      	movs	r3, #8
 800d6d0:	e7da      	b.n	800d688 <prv_read_can_received_msg.constprop.0+0x44>
        buffer = CANModule_local->rxArray;
 800d6d2:	6853      	ldr	r3, [r2, #4]
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800d6d4:	8912      	ldrh	r2, [r2, #8]
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	d0dd      	beq.n	800d696 <prv_read_can_received_msg.constprop.0+0x52>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 800d6da:	8818      	ldrh	r0, [r3, #0]
 800d6dc:	885c      	ldrh	r4, [r3, #2]
 800d6de:	4048      	eors	r0, r1
 800d6e0:	4220      	tst	r0, r4
 800d6e2:	d003      	beq.n	800d6ec <prv_read_can_received_msg.constprop.0+0xa8>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800d6e4:	3a01      	subs	r2, #1
 800d6e6:	330c      	adds	r3, #12
 800d6e8:	b292      	uxth	r2, r2
 800d6ea:	e7f4      	b.n	800d6d6 <prv_read_can_received_msg.constprop.0+0x92>
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	2a00      	cmp	r2, #0
 800d6f0:	d0d1      	beq.n	800d696 <prv_read_can_received_msg.constprop.0+0x52>
        buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 800d6f2:	4669      	mov	r1, sp
 800d6f4:	6858      	ldr	r0, [r3, #4]
 800d6f6:	4790      	blx	r2
 800d6f8:	e7cd      	b.n	800d696 <prv_read_can_received_msg.constprop.0+0x52>
 800d6fa:	bf00      	nop
 800d6fc:	24041510 	.word	0x24041510
 800d700:	2404150c 	.word	0x2404150c

0800d704 <HAL_FDCAN_RxFifo0Callback>:
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 800d704:	07cb      	lsls	r3, r1, #31
 800d706:	d502      	bpl.n	800d70e <HAL_FDCAN_RxFifo0Callback+0xa>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 800d708:	2140      	movs	r1, #64	; 0x40
 800d70a:	f7ff bf9b 	b.w	800d644 <prv_read_can_received_msg.constprop.0>
    }
}
 800d70e:	4770      	bx	lr

0800d710 <HAL_FDCAN_RxFifo1Callback>:
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
    if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 800d710:	06cb      	lsls	r3, r1, #27
 800d712:	d502      	bpl.n	800d71a <HAL_FDCAN_RxFifo1Callback+0xa>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 800d714:	2141      	movs	r1, #65	; 0x41
 800d716:	f7ff bf95 	b.w	800d644 <prv_read_can_received_msg.constprop.0>
    }
}
 800d71a:	4770      	bx	lr

0800d71c <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes) {
 800d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    CANModule_local->firstCANtxMessage = false; /* First CAN message (bootup) was sent successfully */
 800d71e:	4d14      	ldr	r5, [pc, #80]	; (800d770 <HAL_FDCAN_TxBufferCompleteCallback+0x54>)
 800d720:	2600      	movs	r6, #0
 800d722:	682b      	ldr	r3, [r5, #0]
 800d724:	621e      	str	r6, [r3, #32]
    CANModule_local->bufferInhibitFlag = false; /* Clear flag from previous message */
 800d726:	61de      	str	r6, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {     /* Are there any new messages waiting to be send */
 800d728:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d72a:	b292      	uxth	r2, r2
 800d72c:	b162      	cbz	r2, 800d748 <HAL_FDCAN_TxBufferCompleteCallback+0x2c>
        CO_CANtx_t *buffer = &CANModule_local->txArray[0];  /* Start with first buffer handle */
 800d72e:	68df      	ldr	r7, [r3, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d730:	f3ef 8210 	mrs	r2, PRIMASK
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 800d734:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800d736:	b672      	cpsid	i
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 800d738:	682b      	ldr	r3, [r5, #0]
 800d73a:	8a1c      	ldrh	r4, [r3, #16]
            /* Try to send message */
            if (buffer->bufferFull) {
                if (prv_send_can_message(CANModule_local, buffer)) {
 800d73c:	6828      	ldr	r0, [r5, #0]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 800d73e:	b924      	cbnz	r4, 800d74a <HAL_FDCAN_TxBufferCompleteCallback+0x2e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
            CANModule_local->CANtxCount = 0U;
 800d740:	8484      	strh	r4, [r0, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d742:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d744:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
    }
}
 800d748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (buffer->bufferFull) {
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	b15b      	cbz	r3, 800d766 <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                if (prv_send_can_message(CANModule_local, buffer)) {
 800d74e:	4639      	mov	r1, r7
 800d750:	f7ff ff2e 	bl	800d5b0 <prv_send_can_message>
 800d754:	b138      	cbz	r0, 800d766 <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                    CANModule_local->CANtxCount--;
 800d756:	682a      	ldr	r2, [r5, #0]
                    buffer->bufferFull = false;
 800d758:	613e      	str	r6, [r7, #16]
                    CANModule_local->CANtxCount--;
 800d75a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800d75c:	3b01      	subs	r3, #1
 800d75e:	b29b      	uxth	r3, r3
 800d760:	8493      	strh	r3, [r2, #36]	; 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	61d3      	str	r3, [r2, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 800d766:	3c01      	subs	r4, #1
 800d768:	3718      	adds	r7, #24
 800d76a:	b2a4      	uxth	r4, r4
 800d76c:	e7e6      	b.n	800d73c <HAL_FDCAN_TxBufferCompleteCallback+0x20>
 800d76e:	bf00      	nop
 800d770:	2404150c 	.word	0x2404150c

0800d774 <FDCAN1_IT0_IRQHandler>:
/**
 * \brief           This function handles FDCAN1 interrupt 0
 */
void
FDCAN1_IT0_IRQHandler(void) {
    HAL_FDCAN_IRQHandler(&hfdcan1);
 800d774:	4801      	ldr	r0, [pc, #4]	; (800d77c <FDCAN1_IT0_IRQHandler+0x8>)
 800d776:	f7f6 be59 	b.w	800442c <HAL_FDCAN_IRQHandler>
 800d77a:	bf00      	nop
 800d77c:	240003dc 	.word	0x240003dc

0800d780 <FDCAN1_IT1_IRQHandler>:
 800d780:	f7ff bff8 	b.w	800d774 <FDCAN1_IT0_IRQHandler>

0800d784 <_ZN3Box6renderEP8Renderer>:
Box::Box() : Component(), radius(5.0f) {

}

void Box::render(Renderer* renderer) {
	float x1 = absoluteBounds.x + 1;
 800d784:	6803      	ldr	r3, [r0, #0]
	float y1 = absoluteBounds.y + radius;
	float x2 = absoluteBounds.x + absoluteBounds.w - 2;
	float y2 = absoluteBounds.y + absoluteBounds.h - radius - 1;

	renderer->clearCST(0, 1, 0);
 800d786:	2201      	movs	r2, #1
	float y1 = absoluteBounds.y + radius;
 800d788:	edd0 6a01 	vldr	s13, [r0, #4]
	float x1 = absoluteBounds.x + 1;
 800d78c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d790:	4403      	add	r3, r0
void Box::render(Renderer* renderer) {
 800d792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d796:	ed2d 8b06 	vpush	{d8-d10}
	float x1 = absoluteBounds.x + 1;
 800d79a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	float y1 = absoluteBounds.y + radius;
 800d79e:	ed93 7a03 	vldr	s14, [r3, #12]
	float x1 = absoluteBounds.x + 1;
 800d7a2:	edd3 7a02 	vldr	s15, [r3, #8]
void Box::render(Renderer* renderer) {
 800d7a6:	460c      	mov	r4, r1
	float x2 = absoluteBounds.x + absoluteBounds.w - 2;
 800d7a8:	edd3 8a04 	vldr	s17, [r3, #16]
void Box::render(Renderer* renderer) {
 800d7ac:	b082      	sub	sp, #8
	float y2 = absoluteBounds.y + absoluteBounds.h - radius - 1;
 800d7ae:	ed93 8a05 	vldr	s16, [r3, #20]
	float x1 = absoluteBounds.x + 1;
 800d7b2:	ee77 9a89 	vadd.f32	s19, s15, s18
	renderer->clearCST(0, 1, 0);
 800d7b6:	680b      	ldr	r3, [r1, #0]
	float x2 = absoluteBounds.x + absoluteBounds.w - 2;
 800d7b8:	ee77 7aa8 	vadd.f32	s15, s15, s17
	float y2 = absoluteBounds.y + absoluteBounds.h - radius - 1;
 800d7bc:	ee37 8a08 	vadd.f32	s16, s14, s16
void Box::render(Renderer* renderer) {
 800d7c0:	4605      	mov	r5, r0
	renderer->clearCST(0, 1, 0);
 800d7c2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
	float x2 = absoluteBounds.x + absoluteBounds.w - 2;
 800d7c4:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
	renderer->clearCST(0, 1, 0);
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4620      	mov	r0, r4
	float y1 = absoluteBounds.y + radius;
 800d7cc:	ee37 aa26 	vadd.f32	s20, s14, s13
	renderer->clearCST(0, 1, 0);
 800d7d0:	4619      	mov	r1, r3
	float y2 = absoluteBounds.y + absoluteBounds.h - radius - 1;
 800d7d2:	ee38 8a66 	vsub.f32	s16, s16, s13
	float x2 = absoluteBounds.x + absoluteBounds.w - 2;
 800d7d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
	renderer->clearCST(0, 1, 0);
 800d7da:	47b0      	blx	r6

	renderer->line_width(radius * 16);
 800d7dc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d7e0:	edd5 7a01 	vldr	s15, [r5, #4]
 800d7e4:	6823      	ldr	r3, [r4, #0]
 800d7e6:	4620      	mov	r0, r4
	float y2 = absoluteBounds.y + absoluteBounds.h - radius - 1;
 800d7e8:	ee38 8a49 	vsub.f32	s16, s16, s18
	renderer->line_width(radius * 16);
 800d7ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f8:	ee17 2a90 	vmov	r2, s15
 800d7fc:	b291      	uxth	r1, r2
 800d7fe:	4798      	blx	r3
	renderer->begin(RECTS);
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	2109      	movs	r1, #9
 800d804:	4620      	mov	r0, r4
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	4798      	blx	r3

	// Draw stencil
	renderer->color_mask(0, 0, 0, 0);
 800d80a:	2300      	movs	r3, #0
 800d80c:	6822      	ldr	r2, [r4, #0]
 800d80e:	4620      	mov	r0, r4
 800d810:	4619      	mov	r1, r3
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	6f96      	ldr	r6, [r2, #120]	; 0x78
 800d816:	461a      	mov	r2, r3
 800d818:	47b0      	blx	r6
	renderer->stencil_op(INCR, INCR);
 800d81a:	2203      	movs	r2, #3
 800d81c:	6823      	ldr	r3, [r4, #0]
 800d81e:	4620      	mov	r0, r4
 800d820:	4611      	mov	r1, r2
 800d822:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d826:	4798      	blx	r3
	renderer->vertex2f(x1 * 16, y1 * 16);
 800d828:	eef0 7a69 	vmov.f32	s15, s19
 800d82c:	4620      	mov	r0, r4
 800d82e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d832:	ee17 3a90 	vmov	r3, s15
 800d836:	eef0 7a4a 	vmov.f32	s15, s20
 800d83a:	fa0f f883 	sxth.w	r8, r3
 800d83e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d842:	4641      	mov	r1, r8
 800d844:	ee17 3a90 	vmov	r3, s15
 800d848:	fa0f f983 	sxth.w	r9, r3
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	464a      	mov	r2, r9
 800d850:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d854:	4798      	blx	r3
	renderer->vertex2f(x2 * 16, y2 * 16);
 800d856:	eef0 7a68 	vmov.f32	s15, s17
 800d85a:	4620      	mov	r0, r4
 800d85c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d860:	ee17 3a90 	vmov	r3, s15
 800d864:	eef0 7a48 	vmov.f32	s15, s16
 800d868:	b21e      	sxth	r6, r3
 800d86a:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d86e:	4631      	mov	r1, r6
 800d870:	ee17 3a90 	vmov	r3, s15
 800d874:	b21f      	sxth	r7, r3
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	463a      	mov	r2, r7
 800d87a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d87e:	4798      	blx	r3
	renderer->vertex2f((x1+1) * 16, (y1+1) * 16);
 800d880:	ee3a 7a09 	vadd.f32	s14, s20, s18
 800d884:	ee79 7a89 	vadd.f32	s15, s19, s18
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	4620      	mov	r0, r4
 800d88c:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d890:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d894:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d898:	ee17 2a10 	vmov	r2, s14
 800d89c:	ee17 1a90 	vmov	r1, s15
 800d8a0:	b212      	sxth	r2, r2
 800d8a2:	b209      	sxth	r1, r1
 800d8a4:	4798      	blx	r3
	renderer->vertex2f((x2-1) * 16, (y2-1) * 16);
 800d8a6:	ee38 7a49 	vsub.f32	s14, s16, s18
 800d8aa:	ee78 7ac9 	vsub.f32	s15, s17, s18
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d8b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8ba:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d8be:	ee17 2a10 	vmov	r2, s14
 800d8c2:	ee17 1a90 	vmov	r1, s15
 800d8c6:	b212      	sxth	r2, r2
 800d8c8:	b209      	sxth	r1, r1
 800d8ca:	4798      	blx	r3
	renderer->stencil_op(KEEP, KEEP);
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d8d8:	4798      	blx	r3
	renderer->color_mask(0xFF, 0xFF, 0xFF, 0xFF);
 800d8da:	23ff      	movs	r3, #255	; 0xff
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	4620      	mov	r0, r4
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	f8d2 a078 	ldr.w	sl, [r2, #120]	; 0x78
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	47d0      	blx	sl

	// Draw background
	if(isBackgroundSet()) {
 800d8ec:	682a      	ldr	r2, [r5, #0]
 800d8ee:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800d8f2:	4428      	add	r0, r5
 800d8f4:	f000 fb21 	bl	800df3a <_ZN9Component15isBackgroundSetEv>
 800d8f8:	b308      	cbz	r0, 800d93e <_ZN3Box6renderEP8Renderer+0x1ba>
		renderer->stencil_func(EQUAL, 2, 255);
 800d8fa:	6822      	ldr	r2, [r4, #0]
 800d8fc:	2105      	movs	r1, #5
 800d8fe:	23ff      	movs	r3, #255	; 0xff
 800d900:	4620      	mov	r0, r4
 800d902:	f8d2 a0b8 	ldr.w	sl, [r2, #184]	; 0xb8
 800d906:	2202      	movs	r2, #2
 800d908:	47d0      	blx	sl
		renderer->color_rgb32(getBackgroundColor());
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	f8d3 a07c 	ldr.w	sl, [r3, #124]	; 0x7c
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d916:	4428      	add	r0, r5
 800d918:	f000 fb0a 	bl	800df30 <_ZN9Component18getBackgroundColorEv>
 800d91c:	4601      	mov	r1, r0
 800d91e:	4620      	mov	r0, r4
 800d920:	47d0      	blx	sl
		renderer->vertex2f(x1 * 16, y1 * 16);
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	464a      	mov	r2, r9
 800d926:	4641      	mov	r1, r8
 800d928:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d92c:	4620      	mov	r0, r4
 800d92e:	4798      	blx	r3
		renderer->vertex2f(x2 * 16, y2 * 16);
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	463a      	mov	r2, r7
 800d934:	4631      	mov	r1, r6
 800d936:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d93a:	4620      	mov	r0, r4
 800d93c:	4798      	blx	r3
	}

	// Draw outline
	if(isOutlineSet()) {
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d944:	4428      	add	r0, r5
 800d946:	f000 faf5 	bl	800df34 <_ZN9Component12isOutlineSetEv>
 800d94a:	b150      	cbz	r0, 800d962 <_ZN3Box6renderEP8Renderer+0x1de>
		renderer->color_rgb32(getOutlineColor());
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 800d956:	4428      	add	r0, r5
 800d958:	f000 fae8 	bl	800df2c <_ZN9Component15getOutlineColorEv>
 800d95c:	4601      	mov	r1, r0
 800d95e:	4620      	mov	r0, r4
 800d960:	47b0      	blx	r6
	}

	renderer->stencil_func(EQUAL, 1, 255);
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	4620      	mov	r0, r4
 800d966:	2201      	movs	r2, #1
 800d968:	2105      	movs	r1, #5
 800d96a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800d96e:	23ff      	movs	r3, #255	; 0xff
 800d970:	47a8      	blx	r5
	renderer->vertex2f((x1-1) * 16, (y1-1) * 16);
 800d972:	ee7a 6a49 	vsub.f32	s13, s20, s18
 800d976:	ee39 7ac9 	vsub.f32	s14, s19, s18
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	4620      	mov	r0, r4
 800d97e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800d982:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d986:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800d98a:	ee16 2a90 	vmov	r2, s13
 800d98e:	ee17 1a10 	vmov	r1, s14
 800d992:	b212      	sxth	r2, r2
 800d994:	b209      	sxth	r1, r1
 800d996:	4798      	blx	r3
	renderer->vertex2f((x2+1) * 16, (y2+1) * 16);
 800d998:	ee38 8a09 	vadd.f32	s16, s16, s18
 800d99c:	ee78 7a89 	vadd.f32	s15, s17, s18
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	eebe 8ace 	vcvt.s32.f32	s16, s16, #4
 800d9a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d9ac:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800d9b0:	ee18 2a10 	vmov	r2, s16
 800d9b4:	ee17 1a90 	vmov	r1, s15
 800d9b8:	b212      	sxth	r2, r2
 800d9ba:	b209      	sxth	r1, r1
 800d9bc:	4798      	blx	r3

	renderer->end();
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c6:	4798      	blx	r3

	renderer->stencil_func(ALWAYS, 0, 255);
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2107      	movs	r1, #7
 800d9ce:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	23ff      	movs	r3, #255	; 0xff
 800d9d6:	46ac      	mov	ip, r5
}
 800d9d8:	b002      	add	sp, #8
 800d9da:	ecbd 8b06 	vpop	{d8-d10}
 800d9de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	renderer->stencil_func(ALWAYS, 0, 255);
 800d9e2:	4760      	bx	ip

0800d9e4 <_ZTv0_n20_N3Box6renderEP8Renderer>:
public:
	Box();
	Box* setBorderRadius(float radius);

protected:
	virtual void render(Renderer* renderer);
 800d9e4:	f8d0 c000 	ldr.w	ip, [r0]
 800d9e8:	f1ac 0c14 	sub.w	ip, ip, #20
 800d9ec:	f8dc c000 	ldr.w	ip, [ip]
 800d9f0:	4460      	add	r0, ip
 800d9f2:	f7ff bec7 	b.w	800d784 <_ZN3Box6renderEP8Renderer>
	...

0800d9f8 <_ZN3BoxD1Ev>:
class Box : virtual public Component {
 800d9f8:	4b06      	ldr	r3, [pc, #24]	; (800da14 <_ZN3BoxD1Ev+0x1c>)
 800d9fa:	f103 020c 	add.w	r2, r3, #12
 800d9fe:	3334      	adds	r3, #52	; 0x34
 800da00:	b510      	push	{r4, lr}
 800da02:	4604      	mov	r4, r0
 800da04:	6002      	str	r2, [r0, #0]
 800da06:	f840 3f08 	str.w	r3, [r0, #8]!
 800da0a:	f7fe f92b 	bl	800bc64 <_ZN9ComponentD1Ev>
 800da0e:	4620      	mov	r0, r4
 800da10:	bd10      	pop	{r4, pc}
 800da12:	bf00      	nop
 800da14:	0801c080 	.word	0x0801c080

0800da18 <_ZTv0_n16_N3BoxD1Ev>:
 800da18:	f8d0 c000 	ldr.w	ip, [r0]
 800da1c:	f1ac 0c10 	sub.w	ip, ip, #16
 800da20:	f8dc c000 	ldr.w	ip, [ip]
 800da24:	4460      	add	r0, ip
 800da26:	e7e7      	b.n	800d9f8 <_ZN3BoxD1Ev>

0800da28 <_ZN3BoxD0Ev>:
 800da28:	b510      	push	{r4, lr}
 800da2a:	4604      	mov	r4, r0
 800da2c:	f7ff ffe4 	bl	800d9f8 <_ZN3BoxD1Ev>
 800da30:	2174      	movs	r1, #116	; 0x74
 800da32:	4620      	mov	r0, r4
 800da34:	f007 fe34 	bl	80156a0 <_ZdlPvj>
 800da38:	4620      	mov	r0, r4
 800da3a:	bd10      	pop	{r4, pc}

0800da3c <_ZTv0_n16_N3BoxD0Ev>:
 800da3c:	f8d0 c000 	ldr.w	ip, [r0]
 800da40:	f1ac 0c10 	sub.w	ip, ip, #16
 800da44:	f8dc c000 	ldr.w	ip, [ip]
 800da48:	4460      	add	r0, ip
 800da4a:	e7ed      	b.n	800da28 <_ZN3BoxD0Ev>

0800da4c <_ZN3BoxC2Ev>:
Box::Box() : Component(), radius(5.0f) {
 800da4c:	680a      	ldr	r2, [r1, #0]
 800da4e:	6849      	ldr	r1, [r1, #4]
 800da50:	6002      	str	r2, [r0, #0]
 800da52:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800da56:	5081      	str	r1, [r0, r2]
 800da58:	4a01      	ldr	r2, [pc, #4]	; (800da60 <_ZN3BoxC2Ev+0x14>)
 800da5a:	6042      	str	r2, [r0, #4]
}
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	40a00000 	.word	0x40a00000

0800da64 <_ZN3BoxC1Ev>:
Box::Box() : Component(), radius(5.0f) {
 800da64:	b510      	push	{r4, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	3008      	adds	r0, #8
 800da6a:	f000 f857 	bl	800db1c <_ZN9ComponentC1Ev>
 800da6e:	4b05      	ldr	r3, [pc, #20]	; (800da84 <_ZN3BoxC1Ev+0x20>)
}
 800da70:	4620      	mov	r0, r4
Box::Box() : Component(), radius(5.0f) {
 800da72:	f103 020c 	add.w	r2, r3, #12
 800da76:	3334      	adds	r3, #52	; 0x34
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	4b03      	ldr	r3, [pc, #12]	; (800da88 <_ZN3BoxC1Ev+0x24>)
 800da7c:	6022      	str	r2, [r4, #0]
 800da7e:	6063      	str	r3, [r4, #4]
}
 800da80:	bd10      	pop	{r4, pc}
 800da82:	bf00      	nop
 800da84:	0801c080 	.word	0x0801c080
 800da88:	40a00000 	.word	0x40a00000

0800da8c <_ZN3Box15setBorderRadiusEf>:

Box* Box::setBorderRadius(float radius) {
	this->radius = radius;
 800da8c:	ed80 0a01 	vstr	s0, [r0, #4]
	return this;
}
 800da90:	4770      	bx	lr

0800da92 <_ZN3BoxD2Ev>:
 800da92:	680a      	ldr	r2, [r1, #0]
 800da94:	6002      	str	r2, [r0, #0]
 800da96:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800da9a:	6849      	ldr	r1, [r1, #4]
 800da9c:	5081      	str	r1, [r0, r2]
 800da9e:	4770      	bx	lr

0800daa0 <_ZN9Component12onTouchEventEv>:
	}
}

void Component::onTouchEvent() {

}
 800daa0:	4770      	bx	lr

0800daa2 <_ZN9Component14onContextReadyEP7Context>:
	}
}

void Component::render(Renderer* gpu) {

}
 800daa2:	4770      	bx	lr

0800daa4 <_ZN8IteratorIP9ComponentED1Ev>:
	virtual ~Iterator() {}
 800daa4:	4770      	bx	lr
	...

0800daa8 <_ZN8IteratorISt8functionIFvvEEE11__getSourceEv>:
	TRACK_EXCEPTIONS();
 800daa8:	4800      	ldr	r0, [pc, #0]	; (800daac <_ZN8IteratorISt8functionIFvvEEE11__getSourceEv+0x4>)
 800daaa:	4770      	bx	lr
 800daac:	0801b111 	.word	0x0801b111

0800dab0 <_ZN8IteratorIP9ComponentE11__getSourceEv>:
 800dab0:	4800      	ldr	r0, [pc, #0]	; (800dab4 <_ZN8IteratorIP9ComponentE11__getSourceEv+0x4>)
 800dab2:	4770      	bx	lr
 800dab4:	0801b111 	.word	0x0801b111

0800dab8 <_ZN8IteratorIP9ComponentED0Ev>:
	virtual ~Iterator() {}
 800dab8:	b510      	push	{r4, lr}
 800daba:	4604      	mov	r4, r0
 800dabc:	2114      	movs	r1, #20
 800dabe:	f007 fdef 	bl	80156a0 <_ZdlPvj>
 800dac2:	4620      	mov	r0, r4
 800dac4:	bd10      	pop	{r4, pc}
	...

0800dac8 <_ZN8IteratorIP9ComponentEppEi.isra.0>:

#define throwException(name) \
	__throwExc(name, __LINE__)


class ExceptionTracker {
 800dac8:	684b      	ldr	r3, [r1, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800daca:	68ca      	ldr	r2, [r1, #12]
 800dacc:	6043      	str	r3, [r0, #4]
 800dace:	4b07      	ldr	r3, [pc, #28]	; (800daec <_ZN8IteratorIP9ComponentEppEi.isra.0+0x24>)
 800dad0:	60c2      	str	r2, [r0, #12]
 800dad2:	6003      	str	r3, [r0, #0]
 800dad4:	7c0a      	ldrb	r2, [r1, #16]
 800dad6:	688b      	ldr	r3, [r1, #8]
 800dad8:	7402      	strb	r2, [r0, #16]
 800dada:	6083      	str	r3, [r0, #8]
	if(hasNext()) {
 800dadc:	b123      	cbz	r3, 800dae8 <_ZN8IteratorIP9ComponentEppEi.isra.0+0x20>
		this->current = this->next->current;
 800dade:	68da      	ldr	r2, [r3, #12]
		this->next = this->next->next;
 800dae0:	689b      	ldr	r3, [r3, #8]
		this->current = this->next->current;
 800dae2:	60ca      	str	r2, [r1, #12]
		this->next = this->next->next;
 800dae4:	608b      	str	r3, [r1, #8]
 800dae6:	4770      	bx	lr
		this->valid = false;
 800dae8:	740b      	strb	r3, [r1, #16]
}
 800daea:	4770      	bx	lr
 800daec:	0801c144 	.word	0x0801c144

0800daf0 <_ZN8IteratorISt8functionIFvvEEED1Ev>:
	virtual ~Iterator() {}
 800daf0:	4b04      	ldr	r3, [pc, #16]	; (800db04 <_ZN8IteratorISt8functionIFvvEEED1Ev+0x14>)
 800daf2:	b510      	push	{r4, lr}
 800daf4:	4604      	mov	r4, r0
 800daf6:	f840 3b0c 	str.w	r3, [r0], #12
 800dafa:	f7fe fb91 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 800dafe:	4620      	mov	r0, r4
 800db00:	bd10      	pop	{r4, pc}
 800db02:	bf00      	nop
 800db04:	0801c158 	.word	0x0801c158

0800db08 <_ZN8IteratorISt8functionIFvvEEED0Ev>:
 800db08:	b510      	push	{r4, lr}
 800db0a:	4604      	mov	r4, r0
 800db0c:	f7ff fff0 	bl	800daf0 <_ZN8IteratorISt8functionIFvvEEED1Ev>
 800db10:	2120      	movs	r1, #32
 800db12:	4620      	mov	r0, r4
 800db14:	f007 fdc4 	bl	80156a0 <_ZdlPvj>
 800db18:	4620      	mov	r0, r4
 800db1a:	bd10      	pop	{r4, pc}

0800db1c <_ZN9ComponentC1Ev>:
Component::Component() : visible(true), enabled(true) {
 800db1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db1e:	4b17      	ldr	r3, [pc, #92]	; (800db7c <_ZN9ComponentC1Ev+0x60>)
 800db20:	4605      	mov	r5, r0
 800db22:	4604      	mov	r4, r0
 800db24:	f845 3b18 	str.w	r3, [r5], #24
template <class T> LinkedList<T>::LinkedList() {
 800db28:	4b15      	ldr	r3, [pc, #84]	; (800db80 <_ZN9ComponentC1Ev+0x64>)
 800db2a:	6183      	str	r3, [r0, #24]
	const osMutexDef_t mutex_attributes = {};
 800db2c:	2300      	movs	r3, #0
	this->mutex = osMutexCreate(&mutex_attributes);
 800db2e:	4668      	mov	r0, sp
	const osMutexDef_t mutex_attributes = {};
 800db30:	e9cd 3300 	strd	r3, r3, [sp]
	this->mutex = osMutexCreate(&mutex_attributes);
 800db34:	f7fc f80f 	bl	8009b56 <osMutexCreate>
 800db38:	6220      	str	r0, [r4, #32]
	if(mutex == nullptr) {
 800db3a:	b920      	cbnz	r0, 800db46 <_ZN9ComponentC1Ev+0x2a>
		throwException("MutexAllocationFailure");
 800db3c:	2288      	movs	r2, #136	; 0x88
 800db3e:	4911      	ldr	r1, [pc, #68]	; (800db84 <_ZN9ComponentC1Ev+0x68>)
 800db40:	4628      	mov	r0, r5
 800db42:	f005 ff7d 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
template <class T> LinkedList<T>::LinkedList() {
 800db46:	4b10      	ldr	r3, [pc, #64]	; (800db88 <_ZN9ComponentC1Ev+0x6c>)
	this->mutex = osMutexCreate(&mutex_attributes);
 800db48:	4668      	mov	r0, sp
template <class T> LinkedList<T>::LinkedList() {
 800db4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	const osMutexDef_t mutex_attributes = {};
 800db4c:	2300      	movs	r3, #0
 800db4e:	e9cd 3300 	strd	r3, r3, [sp]
	this->mutex = osMutexCreate(&mutex_attributes);
 800db52:	f7fc f800 	bl	8009b56 <osMutexCreate>
 800db56:	6360      	str	r0, [r4, #52]	; 0x34
	if(mutex == nullptr) {
 800db58:	b928      	cbnz	r0, 800db66 <_ZN9ComponentC1Ev+0x4a>
		throwException("MutexAllocationFailure");
 800db5a:	2288      	movs	r2, #136	; 0x88
 800db5c:	4909      	ldr	r1, [pc, #36]	; (800db84 <_ZN9ComponentC1Ev+0x68>)
 800db5e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800db62:	f005 ff6d 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
 800db66:	f240 1301 	movw	r3, #257	; 0x101
	components.trackExceptions(this);
 800db6a:	4628      	mov	r0, r5
 800db6c:	4621      	mov	r1, r4
Component::Component() : visible(true), enabled(true) {
 800db6e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	components.trackExceptions(this);
 800db72:	f005 ff62 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
}
 800db76:	4620      	mov	r0, r4
 800db78:	b003      	add	sp, #12
 800db7a:	bd30      	pop	{r4, r5, pc}
 800db7c:	0801c184 	.word	0x0801c184
 800db80:	0801b29c 	.word	0x0801b29c
 800db84:	0801c0cc 	.word	0x0801c0cc
 800db88:	0801b2a8 	.word	0x0801b2a8

0800db8c <_ZN9Component3addEPS_ffff>:
bool Component::add(Component* comp, float x, float y, float width, float height) {
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	4604      	mov	r4, r0
 800db90:	460d      	mov	r5, r1
	if(components.add(comp)) {
 800db92:	f100 0718 	add.w	r7, r0, #24

#include "Debug/Debug.h"
template <class T> bool LinkedList<T>::add(T item) {
	if(osMutexWait(mutex, 100) == osOK) {
 800db96:	2164      	movs	r1, #100	; 0x64
 800db98:	6a00      	ldr	r0, [r0, #32]
bool Component::add(Component* comp, float x, float y, float width, float height) {
 800db9a:	ed2d 8b04 	vpush	{d8-d9}
 800db9e:	eef0 9a40 	vmov.f32	s19, s0
 800dba2:	eeb0 9a60 	vmov.f32	s18, s1
 800dba6:	eef0 8a41 	vmov.f32	s17, s2
 800dbaa:	eeb0 8a61 	vmov.f32	s16, s3
 800dbae:	f7fb ffd9 	bl	8009b64 <osMutexWait>
 800dbb2:	bb18      	cbnz	r0, 800dbfc <_ZN9Component3addEPS_ffff+0x70>
		Iterator<T>* child = this->iterator;
 800dbb4:	6a66      	ldr	r6, [r4, #36]	; 0x24

		this->iterator = new Iterator<T>(item, child);
 800dbb6:	2014      	movs	r0, #20
 800dbb8:	f005 ff68 	bl	8013a8c <_Znwj>
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800dbbc:	4a13      	ldr	r2, [pc, #76]	; (800dc0c <_ZN9Component3addEPS_ffff+0x80>)

		if(this->iterator != nullptr) {
			this->iterator->trackExceptions(this);
 800dbbe:	4639      	mov	r1, r7
		this->iterator = new Iterator<T>(item, child);
 800dbc0:	6260      	str	r0, [r4, #36]	; 0x24
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800dbc2:	6002      	str	r2, [r0, #0]
 800dbc4:	e9c0 6502 	strd	r6, r5, [r0, #8]
 800dbc8:	2601      	movs	r6, #1
 800dbca:	7406      	strb	r6, [r0, #16]
			this->iterator->trackExceptions(this);
 800dbcc:	f005 ff35 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
			nitems++;
 800dbd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			osMutexRelease(mutex);
 800dbd2:	6a20      	ldr	r0, [r4, #32]
			nitems++;
 800dbd4:	4433      	add	r3, r6
 800dbd6:	62a3      	str	r3, [r4, #40]	; 0x28
			osMutexRelease(mutex);
 800dbd8:	f7fb ffe9 	bl	8009bae <osMutexRelease>
		comp->trackExceptions(this);
 800dbdc:	4628      	mov	r0, r5
 800dbde:	4621      	mov	r1, r4
 800dbe0:	f005 ff2b 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
		return true;
 800dbe4:	4630      	mov	r0, r6
		comp->relativeBounds = { x, y, width, height };
 800dbe6:	edc5 9a10 	vstr	s19, [r5, #64]	; 0x40
 800dbea:	ed85 9a11 	vstr	s18, [r5, #68]	; 0x44
 800dbee:	edc5 8a12 	vstr	s17, [r5, #72]	; 0x48
 800dbf2:	ed85 8a13 	vstr	s16, [r5, #76]	; 0x4c
}
 800dbf6:	ecbd 8b04 	vpop	{d8-d9}
 800dbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
		}

		return true;
	} else {
		throwException("DeadLock");
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	22a3      	movs	r2, #163	; 0xa3
 800dc00:	4903      	ldr	r1, [pc, #12]	; (800dc10 <_ZN9Component3addEPS_ffff+0x84>)
 800dc02:	f005 ff1d 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
	return false;
 800dc06:	2000      	movs	r0, #0
 800dc08:	e7f5      	b.n	800dbf6 <_ZN9Component3addEPS_ffff+0x6a>
 800dc0a:	bf00      	nop
 800dc0c:	0801c144 	.word	0x0801c144
 800dc10:	0801c0e3 	.word	0x0801c0e3

0800dc14 <_ZN9Component3addEPS_ff>:
	return add(comp, x, y, 0, 0);
 800dc14:	eddf 1a02 	vldr	s3, [pc, #8]	; 800dc20 <_ZN9Component3addEPS_ff+0xc>
 800dc18:	eeb0 1a61 	vmov.f32	s2, s3
 800dc1c:	f7ff bfb6 	b.w	800db8c <_ZN9Component3addEPS_ffff>
 800dc20:	00000000 	.word	0x00000000

0800dc24 <_ZN9Component14getComponentAtEff>:
Component* Component::getComponentAt(float x, float y) {
 800dc24:	b530      	push	{r4, r5, lr}
	if(visible) {
 800dc26:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
Component* Component::getComponentAt(float x, float y) {
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	ed2d 8b02 	vpush	{d8}
 800dc30:	eef0 8a40 	vmov.f32	s17, s0
 800dc34:	b08b      	sub	sp, #44	; 0x2c
 800dc36:	eeb0 8a60 	vmov.f32	s16, s1
	if(visible) {
 800dc3a:	2c00      	cmp	r4, #0
 800dc3c:	d048      	beq.n	800dcd0 <_ZN9Component14getComponentAtEff+0xac>
		Iterator<Component*> it = components.it();
 800dc3e:	6a43      	ldr	r3, [r0, #36]	; 0x24

template <class T> bool LinkedList<T>::isEmpty() {
	return this->iterator == nullptr;
}

template <class T> Iterator<T> LinkedList<T>::it() {
 800dc40:	4a26      	ldr	r2, [pc, #152]	; (800dcdc <_ZN9Component14getComponentAtEff+0xb8>)
	if(iterator != nullptr) {
 800dc42:	b1e3      	cbz	r3, 800dc7e <_ZN9Component14getComponentAtEff+0x5a>
 800dc44:	6859      	ldr	r1, [r3, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800dc46:	e9cd 2100 	strd	r2, r1, [sp]
 800dc4a:	689a      	ldr	r2, [r3, #8]
 800dc4c:	9202      	str	r2, [sp, #8]
 800dc4e:	68da      	ldr	r2, [r3, #12]
 800dc50:	7c1b      	ldrb	r3, [r3, #16]
 800dc52:	9203      	str	r2, [sp, #12]
			if(candidate != nullptr) {
 800dc54:	2400      	movs	r4, #0
 800dc56:	f88d 3010 	strb.w	r3, [sp, #16]
		while(it) {
 800dc5a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dc5e:	b193      	cbz	r3, 800dc86 <_ZN9Component14getComponentAtEff+0x62>
			Component* candidate = (*it++)->getComponentAt(x, y);
 800dc60:	4669      	mov	r1, sp
 800dc62:	a805      	add	r0, sp, #20
 800dc64:	f7ff ff30 	bl	800dac8 <_ZN8IteratorIP9ComponentEppEi.isra.0>
 800dc68:	eef0 0a48 	vmov.f32	s1, s16
 800dc6c:	eeb0 0a68 	vmov.f32	s0, s17
 800dc70:	9808      	ldr	r0, [sp, #32]
 800dc72:	f7ff ffd7 	bl	800dc24 <_ZN9Component14getComponentAtEff>
			if(candidate != nullptr) {
 800dc76:	2800      	cmp	r0, #0
 800dc78:	bf18      	it	ne
 800dc7a:	4604      	movne	r4, r0
 800dc7c:	e7ed      	b.n	800dc5a <_ZN9Component14getComponentAtEff+0x36>
template <class T> Iterator<T>::Iterator() : next(nullptr), current(), valid(false) {
 800dc7e:	9200      	str	r2, [sp, #0]
 800dc80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc84:	e7e6      	b.n	800dc54 <_ZN9Component14getComponentAtEff+0x30>
		if(bestCandidate == nullptr && enabled) {
 800dc86:	bb1c      	cbnz	r4, 800dcd0 <_ZN9Component14getComponentAtEff+0xac>
 800dc88:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
 800dc8c:	b303      	cbz	r3, 800dcd0 <_ZN9Component14getComponentAtEff+0xac>
			if(x >= absoluteBounds.x && y >= absoluteBounds.y && x < absoluteBounds.x + absoluteBounds.w && y < absoluteBounds.y + absoluteBounds.h) {
 800dc8e:	ed95 7a02 	vldr	s14, [r5, #8]
 800dc92:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800dc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc9a:	d819      	bhi.n	800dcd0 <_ZN9Component14getComponentAtEff+0xac>
 800dc9c:	edd5 7a03 	vldr	s15, [r5, #12]
 800dca0:	eef4 7ac8 	vcmpe.f32	s15, s16
 800dca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca8:	d812      	bhi.n	800dcd0 <_ZN9Component14getComponentAtEff+0xac>
 800dcaa:	edd5 6a04 	vldr	s13, [r5, #16]
 800dcae:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dcb2:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800dcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcba:	dd09      	ble.n	800dcd0 <_ZN9Component14getComponentAtEff+0xac>
 800dcbc:	ed95 7a05 	vldr	s14, [r5, #20]
 800dcc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcc4:	eef4 7a48 	vcmp.f32	s15, s16
 800dcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dccc:	bfc8      	it	gt
 800dcce:	462c      	movgt	r4, r5
}
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	b00b      	add	sp, #44	; 0x2c
 800dcd4:	ecbd 8b02 	vpop	{d8}
 800dcd8:	bd30      	pop	{r4, r5, pc}
 800dcda:	bf00      	nop
 800dcdc:	0801c144 	.word	0x0801c144

0800dce0 <_ZN9Component17enableTouchEventsEv>:
bool Component::enableTouchEvents() {
 800dce0:	b510      	push	{r4, lr}
 800dce2:	4604      	mov	r4, r0
	this->touchTag = context->allocateTouchTag();
 800dce4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800dce6:	6803      	ldr	r3, [r0, #0]
 800dce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcea:	4798      	blx	r3
 800dcec:	b2c0      	uxtb	r0, r0
 800dcee:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
}
 800dcf2:	3800      	subs	r0, #0
 800dcf4:	bf18      	it	ne
 800dcf6:	2001      	movne	r0, #1
 800dcf8:	bd10      	pop	{r4, pc}
	...

0800dcfc <_ZN9Component12updateLayoutEv>:
	Iterator<Component*> it = components.it();
 800dcfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
void Component::updateLayout() {
 800dcfe:	b510      	push	{r4, lr}
 800dd00:	4604      	mov	r4, r0
 800dd02:	b08a      	sub	sp, #40	; 0x28
	if(iterator != nullptr) {
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d036      	beq.n	800dd76 <_ZN9Component12updateLayoutEv+0x7a>
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	9201      	str	r2, [sp, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800dd0c:	4a1b      	ldr	r2, [pc, #108]	; (800dd7c <_ZN9Component12updateLayoutEv+0x80>)
 800dd0e:	9200      	str	r2, [sp, #0]
 800dd10:	689a      	ldr	r2, [r3, #8]
 800dd12:	9202      	str	r2, [sp, #8]
 800dd14:	68da      	ldr	r2, [r3, #12]
 800dd16:	7c1b      	ldrb	r3, [r3, #16]
 800dd18:	9203      	str	r2, [sp, #12]
 800dd1a:	f88d 3010 	strb.w	r3, [sp, #16]
	while(it) {
 800dd1e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dd22:	b343      	cbz	r3, 800dd76 <_ZN9Component12updateLayoutEv+0x7a>
		struct Bounds* rel = &(*it)->relativeBounds;
 800dd24:	9b03      	ldr	r3, [sp, #12]
		(*it++)->updateLayout();
 800dd26:	a805      	add	r0, sp, #20
		abs->x = self->x + self->w*rel->x;
 800dd28:	edd4 5a04 	vldr	s11, [r4, #16]
		(*it++)->updateLayout();
 800dd2c:	4669      	mov	r1, sp
		abs->x = self->x + self->w*rel->x;
 800dd2e:	edd4 7a02 	vldr	s15, [r4, #8]
 800dd32:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
		abs->y = self->y + self->h*rel->y;
 800dd36:	ed94 6a05 	vldr	s12, [r4, #20]
		abs->x = self->x + self->w*rel->x;
 800dd3a:	eee5 7a87 	vfma.f32	s15, s11, s14
		abs->y = self->y + self->h*rel->y;
 800dd3e:	edd4 6a03 	vldr	s13, [r4, #12]
		abs->w = self->w*rel->w;
 800dd42:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800dd46:	ee27 7a25 	vmul.f32	s14, s14, s11
		abs->x = self->x + self->w*rel->x;
 800dd4a:	edc3 7a02 	vstr	s15, [r3, #8]
		abs->y = self->y + self->h*rel->y;
 800dd4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
		abs->w = self->w*rel->w;
 800dd52:	ed83 7a04 	vstr	s14, [r3, #16]
		abs->y = self->y + self->h*rel->y;
 800dd56:	eee6 6a27 	vfma.f32	s13, s12, s15
		abs->h = self->h*rel->h;
 800dd5a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800dd5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dd62:	edc3 7a05 	vstr	s15, [r3, #20]
		abs->y = self->y + self->h*rel->y;
 800dd66:	edc3 6a03 	vstr	s13, [r3, #12]
		(*it++)->updateLayout();
 800dd6a:	f7ff fead 	bl	800dac8 <_ZN8IteratorIP9ComponentEppEi.isra.0>
 800dd6e:	9808      	ldr	r0, [sp, #32]
 800dd70:	f7ff ffc4 	bl	800dcfc <_ZN9Component12updateLayoutEv>
	while(it) {
 800dd74:	e7d3      	b.n	800dd1e <_ZN9Component12updateLayoutEv+0x22>
}
 800dd76:	b00a      	add	sp, #40	; 0x28
 800dd78:	bd10      	pop	{r4, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0801c144 	.word	0x0801c144

0800dd80 <_ZN9Component10setContextEP7Context>:

void Component::setContext(Context* context) {
	this->context = context;

	this->absoluteBounds.x = 0.0f;
 800dd80:	2300      	movs	r3, #0
void Component::setContext(Context* context) {
 800dd82:	b530      	push	{r4, r5, lr}
	this->absoluteBounds.x = 0.0f;
 800dd84:	6083      	str	r3, [r0, #8]
void Component::setContext(Context* context) {
 800dd86:	4604      	mov	r4, r0
	this->absoluteBounds.y = 0.0f;
 800dd88:	60c3      	str	r3, [r0, #12]
void Component::setContext(Context* context) {
 800dd8a:	b08b      	sub	sp, #44	; 0x2c
	this->absoluteBounds.w = context->getWidth();
 800dd8c:	680b      	ldr	r3, [r1, #0]
void Component::setContext(Context* context) {
 800dd8e:	460d      	mov	r5, r1
	this->context = context;
 800dd90:	6501      	str	r1, [r0, #80]	; 0x50
	this->absoluteBounds.w = context->getWidth();
 800dd92:	4608      	mov	r0, r1
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	4798      	blx	r3
 800dd98:	ee07 0a90 	vmov	s15, r0
	this->absoluteBounds.h = context->getHeight();
 800dd9c:	682b      	ldr	r3, [r5, #0]
 800dd9e:	4628      	mov	r0, r5
	this->absoluteBounds.w = context->getWidth();
 800dda0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	this->absoluteBounds.h = context->getHeight();
 800dda4:	691b      	ldr	r3, [r3, #16]
	this->absoluteBounds.w = context->getWidth();
 800dda6:	edc4 7a04 	vstr	s15, [r4, #16]
	this->absoluteBounds.h = context->getHeight();
 800ddaa:	4798      	blx	r3
 800ddac:	ee07 0a90 	vmov	s15, r0
 800ddb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddb6:	4a12      	ldr	r2, [pc, #72]	; (800de00 <_ZN9Component10setContextEP7Context+0x80>)
 800ddb8:	edc4 7a05 	vstr	s15, [r4, #20]
	if(iterator != nullptr) {
 800ddbc:	b1d3      	cbz	r3, 800ddf4 <_ZN9Component10setContextEP7Context+0x74>
 800ddbe:	6859      	ldr	r1, [r3, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800ddc0:	e9cd 2100 	strd	r2, r1, [sp]
 800ddc4:	689a      	ldr	r2, [r3, #8]
 800ddc6:	9202      	str	r2, [sp, #8]
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	7c1b      	ldrb	r3, [r3, #16]
 800ddcc:	9203      	str	r2, [sp, #12]
template <class T> Iterator<T>::Iterator() : next(nullptr), current(), valid(false) {
 800ddce:	f88d 3010 	strb.w	r3, [sp, #16]

	Iterator<Component*> it = components.it();

	onContextReady(context);
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	6823      	ldr	r3, [r4, #0]
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	4798      	blx	r3

	while(it) {
 800dddc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dde0:	b163      	cbz	r3, 800ddfc <_ZN9Component10setContextEP7Context+0x7c>
		(*it++)->setContext(context);
 800dde2:	4669      	mov	r1, sp
 800dde4:	a805      	add	r0, sp, #20
 800dde6:	f7ff fe6f 	bl	800dac8 <_ZN8IteratorIP9ComponentEppEi.isra.0>
 800ddea:	4629      	mov	r1, r5
 800ddec:	9808      	ldr	r0, [sp, #32]
 800ddee:	f7ff ffc7 	bl	800dd80 <_ZN9Component10setContextEP7Context>
	while(it) {
 800ddf2:	e7f3      	b.n	800dddc <_ZN9Component10setContextEP7Context+0x5c>
 800ddf4:	9200      	str	r2, [sp, #0]
 800ddf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddfa:	e7e8      	b.n	800ddce <_ZN9Component10setContextEP7Context+0x4e>
	}
}
 800ddfc:	b00b      	add	sp, #44	; 0x2c
 800ddfe:	bd30      	pop	{r4, r5, pc}
 800de00:	0801c144 	.word	0x0801c144

0800de04 <_ZN9Component11hasRendererEv>:
bool Component::async(std::function<void()> task) {
	return context->async(task);
}

bool Component::hasRenderingContext() {
	return this->context != nullptr;
 800de04:	6d00      	ldr	r0, [r0, #80]	; 0x50
}

bool Component::hasRenderer() {
 800de06:	b508      	push	{r3, lr}
	return hasRenderingContext() && context->getRenderer() != nullptr;
 800de08:	b128      	cbz	r0, 800de16 <_ZN9Component11hasRendererEv+0x12>
 800de0a:	6803      	ldr	r3, [r0, #0]
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	4798      	blx	r3
 800de10:	3800      	subs	r0, #0
 800de12:	bf18      	it	ne
 800de14:	2001      	movne	r0, #1
}
 800de16:	bd08      	pop	{r3, pc}

0800de18 <_ZN9Component9renderAllEv>:
void Component::renderAll() {
 800de18:	b530      	push	{r4, r5, lr}
 800de1a:	b08b      	sub	sp, #44	; 0x2c
 800de1c:	4604      	mov	r4, r0
	if(hasRenderer() && visible) {
 800de1e:	f7ff fff1 	bl	800de04 <_ZN9Component11hasRendererEv>
 800de22:	2800      	cmp	r0, #0
 800de24:	d068      	beq.n	800def8 <_ZN9Component9renderAllEv+0xe0>
 800de26:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d064      	beq.n	800def8 <_ZN9Component9renderAllEv+0xe0>
		Renderer* renderer = context->getRenderer();
 800de2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800de30:	6803      	ldr	r3, [r0, #0]
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	4798      	blx	r3
 800de36:	4605      	mov	r5, r0
		context->pushColorContext();
 800de38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800de3a:	6803      	ldr	r3, [r0, #0]
 800de3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3e:	4798      	blx	r3
		if(alphaSet) {
 800de40:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800de44:	b14b      	cbz	r3, 800de5a <_ZN9Component9renderAllEv+0x42>
				context->setAlpha(alpha);
 800de46:	6d20      	ldr	r0, [r4, #80]	; 0x50
			if(enabled) {
 800de48:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				context->setAlpha(alpha);
 800de4c:	6803      	ldr	r3, [r0, #0]
 800de4e:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 800de52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			if(enabled) {
 800de54:	2a00      	cmp	r2, #0
 800de56:	d044      	beq.n	800dee2 <_ZN9Component9renderAllEv+0xca>
				context->setAlpha(alpha/2);
 800de58:	4798      	blx	r3
		if(!enabled) {
 800de5a:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800de5e:	b923      	cbnz	r3, 800de6a <_ZN9Component9renderAllEv+0x52>
			context->setAlpha(0x7F);
 800de60:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800de62:	217f      	movs	r1, #127	; 0x7f
 800de64:	6803      	ldr	r3, [r0, #0]
 800de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de68:	4798      	blx	r3
		if(colorSet) {
 800de6a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 800de6e:	b123      	cbz	r3, 800de7a <_ZN9Component9renderAllEv+0x62>
			context->setColor(color);
 800de70:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800de72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800de74:	6803      	ldr	r3, [r0, #0]
 800de76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de78:	4798      	blx	r3
		if(bgColorSet) {
 800de7a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800de7e:	b123      	cbz	r3, 800de8a <_ZN9Component9renderAllEv+0x72>
			context->setBackground(bgColor);
 800de80:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800de82:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800de84:	6803      	ldr	r3, [r0, #0]
 800de86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de88:	4798      	blx	r3
		if(fgColorSet) {
 800de8a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800de8e:	b123      	cbz	r3, 800de9a <_ZN9Component9renderAllEv+0x82>
			context->setForeground(fgColor);
 800de90:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800de92:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800de94:	6803      	ldr	r3, [r0, #0]
 800de96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de98:	4798      	blx	r3
		renderer->tag(touchTag);
 800de9a:	682b      	ldr	r3, [r5, #0]
 800de9c:	4628      	mov	r0, r5
 800de9e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 800dea2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dea6:	4798      	blx	r3
		render(renderer);
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	4629      	mov	r1, r5
 800deac:	4620      	mov	r0, r4
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	4798      	blx	r3
		Iterator<Component*> it = components.it();
 800deb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
template <class T> Iterator<T> LinkedList<T>::it() {
 800deb4:	4a11      	ldr	r2, [pc, #68]	; (800defc <_ZN9Component9renderAllEv+0xe4>)
	if(iterator != nullptr) {
 800deb6:	b1b3      	cbz	r3, 800dee6 <_ZN9Component9renderAllEv+0xce>
 800deb8:	6859      	ldr	r1, [r3, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800deba:	e9cd 2100 	strd	r2, r1, [sp]
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	9202      	str	r2, [sp, #8]
 800dec2:	68da      	ldr	r2, [r3, #12]
 800dec4:	7c1b      	ldrb	r3, [r3, #16]
 800dec6:	9203      	str	r2, [sp, #12]
 800dec8:	f88d 3010 	strb.w	r3, [sp, #16]
		while(it) {
 800decc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ded0:	b173      	cbz	r3, 800def0 <_ZN9Component9renderAllEv+0xd8>
			(*it++)->renderAll();
 800ded2:	a805      	add	r0, sp, #20
 800ded4:	4669      	mov	r1, sp
 800ded6:	f7ff fdf7 	bl	800dac8 <_ZN8IteratorIP9ComponentEppEi.isra.0>
 800deda:	9808      	ldr	r0, [sp, #32]
 800dedc:	f7ff ff9c 	bl	800de18 <_ZN9Component9renderAllEv>
		while(it) {
 800dee0:	e7f4      	b.n	800decc <_ZN9Component9renderAllEv+0xb4>
				context->setAlpha(alpha/2);
 800dee2:	0849      	lsrs	r1, r1, #1
 800dee4:	e7b8      	b.n	800de58 <_ZN9Component9renderAllEv+0x40>
template <class T> Iterator<T>::Iterator() : next(nullptr), current(), valid(false) {
 800dee6:	9200      	str	r2, [sp, #0]
 800dee8:	f88d 3010 	strb.w	r3, [sp, #16]
 800deec:	e9cd 3302 	strd	r3, r3, [sp, #8]
		context->popColorContext();
 800def0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800def2:	6803      	ldr	r3, [r0, #0]
 800def4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def6:	4798      	blx	r3
}
 800def8:	b00b      	add	sp, #44	; 0x2c
 800defa:	bd30      	pop	{r4, r5, pc}
 800defc:	0801c144 	.word	0x0801c144

0800df00 <_ZN9Component8setAlphaEh>:

Component* Component::setAlpha(uint8_t alpha) {
	this->alpha = alpha;
	this->alphaSet = true;
 800df00:	2201      	movs	r2, #1
	this->alpha = alpha;
 800df02:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
	this->alphaSet = true;
 800df06:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
	return this;
}
 800df0a:	4770      	bx	lr

0800df0c <_ZN9Component15setOutlineColorEm>:

Component* Component::setOutlineColor(uint32_t color) {
	this->color = color;
	this->colorSet = true;
 800df0c:	2201      	movs	r2, #1
	this->color = color;
 800df0e:	6581      	str	r1, [r0, #88]	; 0x58
	this->colorSet = true;
 800df10:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
	return this;
}
 800df14:	4770      	bx	lr

0800df16 <_ZN9Component18setBackgroundColorEm>:
	return this;
}

Component* Component::setBackgroundColor(uint32_t color) {
	this->bgColor = color;
	this->bgColorSet = true;
 800df16:	2201      	movs	r2, #1
	this->bgColor = color;
 800df18:	65c1      	str	r1, [r0, #92]	; 0x5c
	this->bgColorSet = true;
 800df1a:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
	return this;
}
 800df1e:	4770      	bx	lr

0800df20 <_ZN9Component10setVisibleEb>:


Component* Component::setVisible(bool visible) {
	this->visible = visible;
 800df20:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
	return this;
}
 800df24:	4770      	bx	lr

0800df26 <_ZN9Component10setEnabledEb>:

Component* Component::setEnabled(bool enabled) {
	this->enabled = enabled;
 800df26:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
	return this;
}
 800df2a:	4770      	bx	lr

0800df2c <_ZN9Component15getOutlineColorEv>:
	return alpha;
}

uint32_t Component::getOutlineColor() {
	return color;
}
 800df2c:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800df2e:	4770      	bx	lr

0800df30 <_ZN9Component18getBackgroundColorEv>:
	return fgColor;
}

uint32_t Component::getBackgroundColor() {
	return bgColor;
}
 800df30:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800df32:	4770      	bx	lr

0800df34 <_ZN9Component12isOutlineSetEv>:
	return alphaSet;
}

bool Component::isOutlineSet() {
	return colorSet;
}
 800df34:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
 800df38:	4770      	bx	lr

0800df3a <_ZN9Component15isBackgroundSetEv>:

bool Component::isBackgroundSet() {
	return bgColorSet;
}
 800df3a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
 800df3e:	4770      	bx	lr

0800df40 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 800df40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 800df42:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 800df44:	4604      	mov	r4, r0
 800df46:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 800df48:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 800df4a:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 800df4c:	b12b      	cbz	r3, 800df5a <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800df4e:	2202      	movs	r2, #2
 800df50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800df52:	68eb      	ldr	r3, [r5, #12]
 800df54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 800df56:	68ab      	ldr	r3, [r5, #8]
 800df58:	60a3      	str	r3, [r4, #8]
    }
 800df5a:	4620      	mov	r0, r4
 800df5c:	bd38      	pop	{r3, r4, r5, pc}

0800df5e <_ZN9Component5asyncESt8functionIFvvEE>:
bool Component::async(std::function<void()> task) {
 800df5e:	b530      	push	{r4, r5, lr}
	return context->async(task);
 800df60:	6d04      	ldr	r4, [r0, #80]	; 0x50
bool Component::async(std::function<void()> task) {
 800df62:	b085      	sub	sp, #20
	return context->async(task);
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	4668      	mov	r0, sp
 800df68:	6a1d      	ldr	r5, [r3, #32]
 800df6a:	f7ff ffe9 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
 800df6e:	4669      	mov	r1, sp
 800df70:	4620      	mov	r0, r4
 800df72:	47a8      	blx	r5
 800df74:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 800df76:	4668      	mov	r0, sp
 800df78:	f7fe f952 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 800df7c:	4620      	mov	r0, r4
 800df7e:	b005      	add	sp, #20
 800df80:	bd30      	pop	{r4, r5, pc}
	...

0800df84 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE>:
bool Component::registerTouchHandler(std::function<void()> handler) {
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	b088      	sub	sp, #32
 800df8a:	4604      	mov	r4, r0
	return touchHandlers.add(handler);
 800df8c:	f100 072c 	add.w	r7, r0, #44	; 0x2c
 800df90:	4668      	mov	r0, sp
 800df92:	f7ff ffd5 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
	if(osMutexWait(mutex, 100) == osOK) {
 800df96:	2164      	movs	r1, #100	; 0x64
 800df98:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800df9a:	f7fb fde3 	bl	8009b64 <osMutexWait>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d134      	bne.n	800e00c <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0x88>
		this->iterator = new Iterator<T>(item, child);
 800dfa2:	4669      	mov	r1, sp
 800dfa4:	a804      	add	r0, sp, #16
		Iterator<T>* child = this->iterator;
 800dfa6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		this->iterator = new Iterator<T>(item, child);
 800dfa8:	f7ff ffca 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
 800dfac:	2020      	movs	r0, #32
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800dfae:	f04f 0801 	mov.w	r8, #1
		this->iterator = new Iterator<T>(item, child);
 800dfb2:	f005 fd6b 	bl	8013a8c <_Znwj>
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800dfb6:	4b19      	ldr	r3, [pc, #100]	; (800e01c <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0x98>)
		this->iterator = new Iterator<T>(item, child);
 800dfb8:	4606      	mov	r6, r0
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800dfba:	6085      	str	r5, [r0, #8]
 800dfbc:	6003      	str	r3, [r0, #0]
 800dfbe:	a904      	add	r1, sp, #16
 800dfc0:	300c      	adds	r0, #12
 800dfc2:	f7ff ffbd 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
 800dfc6:	a804      	add	r0, sp, #16
		this->iterator = new Iterator<T>(item, child);
 800dfc8:	63a6      	str	r6, [r4, #56]	; 0x38
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800dfca:	f886 801c 	strb.w	r8, [r6, #28]
 800dfce:	f7fe f927 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
		if(this->iterator != nullptr) {
 800dfd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800dfd4:	b18d      	cbz	r5, 800dffa <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0x76>
			this->iterator->trackExceptions(this);
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	4639      	mov	r1, r7
 800dfda:	f005 fd2e 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
			nitems++;
 800dfde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		return true;
 800dfe0:	4645      	mov	r5, r8
			osMutexRelease(mutex);
 800dfe2:	6b60      	ldr	r0, [r4, #52]	; 0x34
			nitems++;
 800dfe4:	4443      	add	r3, r8
 800dfe6:	63e3      	str	r3, [r4, #60]	; 0x3c
			osMutexRelease(mutex);
 800dfe8:	f7fb fde1 	bl	8009bae <osMutexRelease>
 800dfec:	4668      	mov	r0, sp
 800dfee:	f7fe f917 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 800dff2:	4628      	mov	r0, r5
 800dff4:	b008      	add	sp, #32
 800dff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			throwException("MemoryAllocationFailure");
 800dffa:	4638      	mov	r0, r7
 800dffc:	229c      	movs	r2, #156	; 0x9c
 800dffe:	4908      	ldr	r1, [pc, #32]	; (800e020 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0x9c>)
 800e000:	f005 fd1e 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
			osMutexRelease(mutex);
 800e004:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e006:	f7fb fdd2 	bl	8009bae <osMutexRelease>
			return false;
 800e00a:	e7ef      	b.n	800dfec <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0x68>
		throwException("DeadLock");
 800e00c:	22a3      	movs	r2, #163	; 0xa3
 800e00e:	4905      	ldr	r1, [pc, #20]	; (800e024 <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0xa0>)
 800e010:	4638      	mov	r0, r7
		return false;
 800e012:	2500      	movs	r5, #0
		throwException("DeadLock");
 800e014:	f005 fd14 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
		return false;
 800e018:	e7e8      	b.n	800dfec <_ZN9Component20registerTouchHandlerESt8functionIFvvEE+0x68>
 800e01a:	bf00      	nop
 800e01c:	0801c158 	.word	0x0801c158
 800e020:	0801b3db 	.word	0x0801b3db
 800e024:	0801c0e3 	.word	0x0801c0e3

0800e028 <_ZN9Component17triggerTouchEventEv>:
	onTouchEvent();
 800e028:	6803      	ldr	r3, [r0, #0]
void Component::triggerTouchEvent() {
 800e02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02c:	4604      	mov	r4, r0
 800e02e:	b097      	sub	sp, #92	; 0x5c
	onTouchEvent();
 800e030:	695b      	ldr	r3, [r3, #20]
 800e032:	4798      	blx	r3
	Iterator<std::function<void()>> it = touchHandlers.it();
 800e034:	6ba4      	ldr	r4, [r4, #56]	; 0x38
template <class T> Iterator<T> LinkedList<T>::it() {
 800e036:	4f2e      	ldr	r7, [pc, #184]	; (800e0f0 <_ZN9Component17triggerTouchEventEv+0xc8>)
	if(iterator != nullptr) {
 800e038:	2c00      	cmp	r4, #0
 800e03a:	d044      	beq.n	800e0c6 <_ZN9Component17triggerTouchEventEv+0x9e>
 800e03c:	6863      	ldr	r3, [r4, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800e03e:	ad09      	add	r5, sp, #36	; 0x24
 800e040:	f104 010c 	add.w	r1, r4, #12
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e044:	466e      	mov	r6, sp
 800e046:	4628      	mov	r0, r5
 800e048:	e9cd 7306 	strd	r7, r3, [sp, #24]
 800e04c:	68a3      	ldr	r3, [r4, #8]
 800e04e:	9308      	str	r3, [sp, #32]
 800e050:	f7ff ff76 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
 800e054:	7f23      	ldrb	r3, [r4, #28]
	function(__x).swap(*this);
 800e056:	ac02      	add	r4, sp, #8
 800e058:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	while(it) {
 800e05c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800e060:	2b00      	cmp	r3, #0
 800e062:	d035      	beq.n	800e0d0 <_ZN9Component17triggerTouchEventEv+0xa8>
 800e064:	9b07      	ldr	r3, [sp, #28]
 800e066:	4629      	mov	r1, r5
 800e068:	a811      	add	r0, sp, #68	; 0x44
 800e06a:	e9cd 730e 	strd	r7, r3, [sp, #56]	; 0x38
 800e06e:	9b08      	ldr	r3, [sp, #32]
 800e070:	9310      	str	r3, [sp, #64]	; 0x40
 800e072:	f7ff ff65 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
 800e076:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
	return this->next != nullptr;
 800e07a:	9908      	ldr	r1, [sp, #32]
template <typename T> class Iterator : public ExceptionTracker {
 800e07c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	if(hasNext()) {
 800e080:	b359      	cbz	r1, 800e0da <_ZN9Component17triggerTouchEventEv+0xb2>
 800e082:	310c      	adds	r1, #12
 800e084:	4620      	mov	r0, r4
 800e086:	f7ff ff5b 	bl	800df40 <_ZNSt8functionIFvvEEC1ERKS1_>
 800e08a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e08e:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800e092:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e096:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800e09a:	e896 0003 	ldmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e09e:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800e0a0:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800e0a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    class function<_Res(_ArgTypes...)>
 800e0a6:	4620      	mov	r0, r4
      __b = _GLIBCXX_MOVE(__tmp);
 800e0a8:	930b      	str	r3, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 800e0aa:	9204      	str	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e0ac:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 800e0ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 800e0b0:	930c      	str	r3, [sp, #48]	; 0x30
      __a = _GLIBCXX_MOVE(__b);
 800e0b2:	9205      	str	r2, [sp, #20]
 800e0b4:	f7fe f8b4 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
		this->next = this->next->next;
 800e0b8:	9b08      	ldr	r3, [sp, #32]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	9308      	str	r3, [sp, #32]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800e0be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e0c0:	b973      	cbnz	r3, 800e0e0 <_ZN9Component17triggerTouchEventEv+0xb8>
	__throw_bad_function_call();
 800e0c2:	f007 fe55 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
template <class T> Iterator<T>::Iterator() : next(nullptr), current(), valid(false) {
 800e0c6:	9706      	str	r7, [sp, #24]
 800e0c8:	9408      	str	r4, [sp, #32]
    _Function_base() : _M_manager(nullptr) { }
 800e0ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800e0cc:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	Iterator<std::function<void()>> it = touchHandlers.it();
 800e0d0:	a806      	add	r0, sp, #24
 800e0d2:	f7ff fd0d 	bl	800daf0 <_ZN8IteratorISt8functionIFvvEEED1Ev>
}
 800e0d6:	b017      	add	sp, #92	; 0x5c
 800e0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		this->valid = false;
 800e0da:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
 800e0de:	e7ee      	b.n	800e0be <_ZN9Component17triggerTouchEventEv+0x96>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800e0e0:	a811      	add	r0, sp, #68	; 0x44
 800e0e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0e4:	4798      	blx	r3
		(*it++)();
 800e0e6:	a80e      	add	r0, sp, #56	; 0x38
 800e0e8:	f7ff fd02 	bl	800daf0 <_ZN8IteratorISt8functionIFvvEEED1Ev>
	while(it) {
 800e0ec:	e7b6      	b.n	800e05c <_ZN9Component17triggerTouchEventEv+0x34>
 800e0ee:	bf00      	nop
 800e0f0:	0801c158 	.word	0x0801c158

0800e0f4 <_ZN5Gauge6renderEP8Renderer>:

Gauge::Gauge() {
	this->radius = 50.0f;
}

void Gauge::render(Renderer* renderer) {
 800e0f4:	b530      	push	{r4, r5, lr}
	float x = absoluteBounds.x;
	float y = absoluteBounds.y;

	renderer->begin(POINTS);
 800e0f6:	680b      	ldr	r3, [r1, #0]
void Gauge::render(Renderer* renderer) {
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	4605      	mov	r5, r0
	renderer->begin(POINTS);
 800e0fc:	2102      	movs	r1, #2
 800e0fe:	699b      	ldr	r3, [r3, #24]
void Gauge::render(Renderer* renderer) {
 800e100:	ed2d 8b02 	vpush	{d8}
	float x = absoluteBounds.x;
 800e104:	ed90 8a02 	vldr	s16, [r0, #8]
void Gauge::render(Renderer* renderer) {
 800e108:	b087      	sub	sp, #28
	float y = absoluteBounds.y;
 800e10a:	edd0 8a03 	vldr	s17, [r0, #12]
	renderer->begin(POINTS);
 800e10e:	4620      	mov	r0, r4
 800e110:	4798      	blx	r3
	renderer->point_size(radius * 16);
 800e112:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800e116:	edd5 7a1b 	vldr	s15, [r5, #108]	; 0x6c
 800e11a:	4620      	mov	r0, r4
 800e11c:	6823      	ldr	r3, [r4, #0]
 800e11e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e12a:	ee17 2a90 	vmov	r2, s15
 800e12e:	b291      	uxth	r1, r2
 800e130:	4798      	blx	r3
	renderer->vertex2f(x * 16, y * 16);
 800e132:	eeb0 7a68 	vmov.f32	s14, s17
 800e136:	eef0 7a48 	vmov.f32	s15, s16
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	4620      	mov	r0, r4
 800e13e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800e142:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e146:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800e14a:	ee17 2a10 	vmov	r2, s14
 800e14e:	ee17 1a90 	vmov	r1, s15
 800e152:	b212      	sxth	r2, r2
 800e154:	b209      	sxth	r1, r1
 800e156:	4798      	blx	r3

	renderer->cmd_gauge(x, y, radius-1, OPT_FLAT, 10, 1, this->level*100, 100);
 800e158:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e15c:	ed95 7a1b 	vldr	s14, [r5, #108]	; 0x6c
 800e160:	2364      	movs	r3, #100	; 0x64
 800e162:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e1c0 <_ZN5Gauge6renderEP8Renderer+0xcc>
 800e166:	2101      	movs	r1, #1
 800e168:	9304      	str	r3, [sp, #16]
 800e16a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e16e:	edd5 7a1c 	vldr	s15, [r5, #112]	; 0x70
 800e172:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 800e176:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800e17a:	6822      	ldr	r2, [r4, #0]
 800e17c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e180:	4620      	mov	r0, r4
 800e182:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e18a:	ee17 3a90 	vmov	r3, s15
 800e18e:	b29b      	uxth	r3, r3
 800e190:	9303      	str	r3, [sp, #12]
 800e192:	230a      	movs	r3, #10
 800e194:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e19c:	ee18 1a10 	vmov	r1, s16
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	ee17 3a10 	vmov	r3, s14
 800e1a6:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
 800e1aa:	ee18 2a90 	vmov	r2, s17
 800e1ae:	b21b      	sxth	r3, r3
 800e1b0:	b212      	sxth	r2, r2
 800e1b2:	b209      	sxth	r1, r1
 800e1b4:	47a8      	blx	r5
}
 800e1b6:	b007      	add	sp, #28
 800e1b8:	ecbd 8b02 	vpop	{d8}
 800e1bc:	bd30      	pop	{r4, r5, pc}
 800e1be:	bf00      	nop
 800e1c0:	42c80000 	.word	0x42c80000

0800e1c4 <_ZN5Gauge14onContextReadyEP7Context>:

void Gauge::onContextReady(Context* context) {
	enableTouchEvents();
 800e1c4:	f7ff bd8c 	b.w	800dce0 <_ZN9Component17enableTouchEventsEv>

0800e1c8 <_ZN5GaugeD1Ev>:
 800e1c8:	4b03      	ldr	r3, [pc, #12]	; (800e1d8 <_ZN5GaugeD1Ev+0x10>)
 800e1ca:	b510      	push	{r4, lr}
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	6003      	str	r3, [r0, #0]
 800e1d0:	f7fd fd48 	bl	800bc64 <_ZN9ComponentD1Ev>
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	bd10      	pop	{r4, pc}
 800e1d8:	0801c1b8 	.word	0x0801c1b8

0800e1dc <_ZN5GaugeD0Ev>:
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	4604      	mov	r4, r0
 800e1e0:	f7ff fff2 	bl	800e1c8 <_ZN5GaugeD1Ev>
 800e1e4:	2174      	movs	r1, #116	; 0x74
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f007 fa5a 	bl	80156a0 <_ZdlPvj>
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	bd10      	pop	{r4, pc}

0800e1f0 <_ZN5GaugeC1Ev>:
Gauge::Gauge() {
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	f7ff fc92 	bl	800db1c <_ZN9ComponentC1Ev>
 800e1f8:	4b02      	ldr	r3, [pc, #8]	; (800e204 <_ZN5GaugeC1Ev+0x14>)
}
 800e1fa:	4620      	mov	r0, r4
Gauge::Gauge() {
 800e1fc:	6023      	str	r3, [r4, #0]
	this->radius = 50.0f;
 800e1fe:	4b02      	ldr	r3, [pc, #8]	; (800e208 <_ZN5GaugeC1Ev+0x18>)
 800e200:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800e202:	bd10      	pop	{r4, pc}
 800e204:	0801c1b8 	.word	0x0801c1b8
 800e208:	42480000 	.word	0x42480000

0800e20c <_ZN5Gauge8setLevelEf>:
	this->radius = radius;
	return this;
}

Gauge* Gauge::setLevel(float level) {
	this->level = level;
 800e20c:	ed80 0a1c 	vstr	s0, [r0, #112]	; 0x70
	return this;
}
 800e210:	4770      	bx	lr
	...

0800e214 <_ZN4Text6renderEP8Renderer>:

Text::Text() : font(30), anchor(Center) {

}

void Text::render(Renderer* renderer) {
 800e214:	4603      	mov	r3, r0
	float x = absoluteBounds.x + absoluteBounds.w/2;
 800e216:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800e220:	441a      	add	r2, r3
 800e222:	ed92 7a04 	vldr	s14, [r2, #16]
 800e226:	edd2 7a02 	vldr	s15, [r2, #8]
	float y = absoluteBounds.y + absoluteBounds.h/2;
 800e22a:	ed92 6a05 	vldr	s12, [r2, #20]
	float x = absoluteBounds.x + absoluteBounds.w/2;
 800e22e:	eee7 7a26 	vfma.f32	s15, s14, s13
	float y = absoluteBounds.y + absoluteBounds.h/2;
 800e232:	ed92 7a03 	vldr	s14, [r2, #12]
 800e236:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e23a:	eea6 7a26 	vfma.f32	s14, s12, s13

	uint16_t alignement = 0;

	switch(anchor) {
 800e23e:	3a01      	subs	r2, #1
 800e240:	b2d2      	uxtb	r2, r2
	case East:
		alignement = OPT_RIGHTX  | OPT_CENTERY;
		break;
	}

	renderer->cmd_text(x, y, font, alignement, text);
 800e242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e246:	2a04      	cmp	r2, #4
 800e248:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	switch(anchor) {
 800e24c:	bf88      	it	hi
 800e24e:	2200      	movhi	r2, #0
void Text::render(Renderer* renderer) {
 800e250:	b513      	push	{r0, r1, r4, lr}
 800e252:	4608      	mov	r0, r1
 800e254:	bf98      	it	ls
 800e256:	490b      	ldrls	r1, [pc, #44]	; (800e284 <_ZN4Text6renderEP8Renderer+0x70>)
	renderer->cmd_text(x, y, font, alignement, text);
 800e258:	f103 0404 	add.w	r4, r3, #4
 800e25c:	bf98      	it	ls
 800e25e:	f831 2012 	ldrhls.w	r2, [r1, r2, lsl #1]
 800e262:	6801      	ldr	r1, [r0, #0]
 800e264:	e9cd 2400 	strd	r2, r4, [sp]
 800e268:	ee17 2a10 	vmov	r2, s14
 800e26c:	f8d1 4164 	ldr.w	r4, [r1, #356]	; 0x164
 800e270:	ee17 1a90 	vmov	r1, s15
 800e274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e278:	b212      	sxth	r2, r2
 800e27a:	b209      	sxth	r1, r1
 800e27c:	47a0      	blx	r4
}
 800e27e:	b002      	add	sp, #8
 800e280:	bd10      	pop	{r4, pc}
 800e282:	bf00      	nop
 800e284:	0801c1d0 	.word	0x0801c1d0

0800e288 <_ZTv0_n20_N4Text6renderEP8Renderer>:
	Text* setText(const char* text);
	Text* setAnchor(enum Anchor anchor);
	Text* setFontSize(uint8_t font);

protected:
	virtual void render(Renderer* renderer);
 800e288:	f8d0 c000 	ldr.w	ip, [r0]
 800e28c:	f1ac 0c14 	sub.w	ip, ip, #20
 800e290:	f8dc c000 	ldr.w	ip, [ip]
 800e294:	4460      	add	r0, ip
 800e296:	f7ff bfbd 	b.w	800e214 <_ZN4Text6renderEP8Renderer>
	...

0800e29c <_ZN4TextD1Ev>:
class Text : virtual public Component {
 800e29c:	4b06      	ldr	r3, [pc, #24]	; (800e2b8 <_ZN4TextD1Ev+0x1c>)
 800e29e:	f103 020c 	add.w	r2, r3, #12
 800e2a2:	3338      	adds	r3, #56	; 0x38
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	6002      	str	r2, [r0, #0]
 800e2aa:	f840 3f48 	str.w	r3, [r0, #72]!
 800e2ae:	f7fd fcd9 	bl	800bc64 <_ZN9ComponentD1Ev>
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	bd10      	pop	{r4, pc}
 800e2b6:	bf00      	nop
 800e2b8:	0801c1fc 	.word	0x0801c1fc

0800e2bc <_ZTv0_n16_N4TextD1Ev>:
 800e2bc:	f8d0 c000 	ldr.w	ip, [r0]
 800e2c0:	f1ac 0c10 	sub.w	ip, ip, #16
 800e2c4:	f8dc c000 	ldr.w	ip, [ip]
 800e2c8:	4460      	add	r0, ip
 800e2ca:	e7e7      	b.n	800e29c <_ZN4TextD1Ev>

0800e2cc <_ZN4TextD0Ev>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	f7ff ffe4 	bl	800e29c <_ZN4TextD1Ev>
 800e2d4:	21b4      	movs	r1, #180	; 0xb4
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f007 f9e2 	bl	80156a0 <_ZdlPvj>
 800e2dc:	4620      	mov	r0, r4
 800e2de:	bd10      	pop	{r4, pc}

0800e2e0 <_ZTv0_n16_N4TextD0Ev>:
 800e2e0:	f8d0 c000 	ldr.w	ip, [r0]
 800e2e4:	f1ac 0c10 	sub.w	ip, ip, #16
 800e2e8:	f8dc c000 	ldr.w	ip, [ip]
 800e2ec:	4460      	add	r0, ip
 800e2ee:	e7ed      	b.n	800e2cc <_ZN4TextD0Ev>

0800e2f0 <_ZN4TextC2Ev>:
Text::Text() : font(30), anchor(Center) {
 800e2f0:	680a      	ldr	r2, [r1, #0]
 800e2f2:	6849      	ldr	r1, [r1, #4]
 800e2f4:	6002      	str	r2, [r0, #0]
 800e2f6:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800e2fa:	5081      	str	r1, [r0, r2]
 800e2fc:	f240 421e 	movw	r2, #1054	; 0x41e
 800e300:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
}
 800e304:	4770      	bx	lr
	...

0800e308 <_ZN4TextC1Ev>:
Text::Text() : font(30), anchor(Center) {
 800e308:	b510      	push	{r4, lr}
 800e30a:	4604      	mov	r4, r0
 800e30c:	3048      	adds	r0, #72	; 0x48
 800e30e:	f7ff fc05 	bl	800db1c <_ZN9ComponentC1Ev>
 800e312:	4b06      	ldr	r3, [pc, #24]	; (800e32c <_ZN4TextC1Ev+0x24>)
}
 800e314:	4620      	mov	r0, r4
Text::Text() : font(30), anchor(Center) {
 800e316:	f103 020c 	add.w	r2, r3, #12
 800e31a:	3338      	adds	r3, #56	; 0x38
 800e31c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e31e:	f240 431e 	movw	r3, #1054	; 0x41e
 800e322:	6022      	str	r2, [r4, #0]
 800e324:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
}
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	bf00      	nop
 800e32c:	0801c1fc 	.word	0x0801c1fc

0800e330 <_ZN4Text7setTextEPKc>:

Text* Text::setText(const char* text) {
 800e330:	b513      	push	{r0, r1, r4, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	9101      	str	r1, [sp, #4]
	taskENTER_CRITICAL(); // Non-atomic operations must be executed when we are sure that the text is not being rendered
 800e336:	f7fc ff25 	bl	800b184 <vPortEnterCritical>
	strncpy(this->text, text, TEXT_MAX_LENGTH);
 800e33a:	2240      	movs	r2, #64	; 0x40
 800e33c:	9901      	ldr	r1, [sp, #4]
 800e33e:	1d20      	adds	r0, r4, #4
 800e340:	f008 ff74 	bl	801722c <strncpy>
	taskEXIT_CRITICAL();
 800e344:	f7fc ff3e 	bl	800b1c4 <vPortExitCritical>

	return this;
}
 800e348:	4620      	mov	r0, r4
 800e34a:	b002      	add	sp, #8
 800e34c:	bd10      	pop	{r4, pc}

0800e34e <_ZN4Text11setFontSizeEh>:

Text* Text::setFontSize(uint8_t font) {
	this->font = font;
 800e34e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	return this;
}
 800e352:	4770      	bx	lr

0800e354 <_ZN4Text9setAnchorE6Anchor>:

Text* Text::setAnchor(enum Anchor anchor) {
	this->anchor = anchor;
 800e354:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
	return this;
}
 800e358:	4770      	bx	lr

0800e35a <_ZN4TextD2Ev>:
 800e35a:	680a      	ldr	r2, [r1, #0]
 800e35c:	6002      	str	r2, [r0, #0]
 800e35e:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 800e362:	6849      	ldr	r1, [r1, #4]
 800e364:	5081      	str	r1, [r0, r2]
 800e366:	4770      	bx	lr

0800e368 <_ZN6Screen6renderEP8Renderer>:
 *      Author: arion
 */

#include "Screen.h"

void Screen::render(Renderer* renderer) {
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	ed2d 8b04 	vpush	{d8-d9}
 800e36e:	4605      	mov	r5, r0
 800e370:	460c      	mov	r4, r1
	if(isBackgroundSet()) {
 800e372:	f7ff fde2 	bl	800df3a <_ZN9Component15isBackgroundSetEv>
 800e376:	2800      	cmp	r0, #0
 800e378:	d043      	beq.n	800e402 <_ZN6Screen6renderEP8Renderer+0x9a>
		float x1 = absoluteBounds.x;
		float y1 = absoluteBounds.y;
		float x2 = absoluteBounds.x + absoluteBounds.w;
		float y2 = absoluteBounds.y + absoluteBounds.h;

		renderer->begin(RECTS);
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	2109      	movs	r1, #9
		float x2 = absoluteBounds.x + absoluteBounds.w;
 800e37e:	edd5 7a04 	vldr	s15, [r5, #16]
		renderer->begin(RECTS);
 800e382:	4620      	mov	r0, r4
		float y2 = absoluteBounds.y + absoluteBounds.h;
 800e384:	ed95 7a05 	vldr	s14, [r5, #20]
		float x1 = absoluteBounds.x;
 800e388:	ed95 9a02 	vldr	s18, [r5, #8]
		float y1 = absoluteBounds.y;
 800e38c:	edd5 9a03 	vldr	s19, [r5, #12]
		renderer->begin(RECTS);
 800e390:	699b      	ldr	r3, [r3, #24]
		float x2 = absoluteBounds.x + absoluteBounds.w;
 800e392:	ee39 8a27 	vadd.f32	s16, s18, s15
		float y2 = absoluteBounds.y + absoluteBounds.h;
 800e396:	ee79 8a87 	vadd.f32	s17, s19, s14
		renderer->begin(RECTS);
 800e39a:	4798      	blx	r3

		renderer->color_rgb32(getBackgroundColor());
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	4628      	mov	r0, r5
 800e3a0:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 800e3a2:	f7ff fdc5 	bl	800df30 <_ZN9Component18getBackgroundColorEv>
 800e3a6:	4601      	mov	r1, r0
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	47b0      	blx	r6
		renderer->vertex2f(x1 * 16, y1 * 16);
 800e3ac:	eefe 9ace 	vcvt.s32.f32	s19, s19, #4
 800e3b0:	eebe 9ace 	vcvt.s32.f32	s18, s18, #4
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	ee19 2a90 	vmov	r2, s19
 800e3bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e3c0:	ee19 1a10 	vmov	r1, s18
 800e3c4:	b212      	sxth	r2, r2
 800e3c6:	b209      	sxth	r1, r1
 800e3c8:	4798      	blx	r3
		renderer->vertex2f(x2 * 16, y2 * 16);
 800e3ca:	eeb0 7a68 	vmov.f32	s14, s17
 800e3ce:	eef0 7a48 	vmov.f32	s15, s16
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800e3da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e3de:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800e3e2:	ee17 2a10 	vmov	r2, s14
 800e3e6:	ee17 1a90 	vmov	r1, s15
 800e3ea:	b212      	sxth	r2, r2
 800e3ec:	b209      	sxth	r1, r1
 800e3ee:	4798      	blx	r3

		renderer->end();
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	}
}
 800e3f8:	ecbd 8b04 	vpop	{d8-d9}
 800e3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		renderer->end();
 800e400:	4718      	bx	r3
}
 800e402:	ecbd 8b04 	vpop	{d8-d9}
 800e406:	bd70      	pop	{r4, r5, r6, pc}

0800e408 <_ZN6ScreenD1Ev>:
 800e408:	4b03      	ldr	r3, [pc, #12]	; (800e418 <_ZN6ScreenD1Ev+0x10>)
 800e40a:	b510      	push	{r4, lr}
 800e40c:	4604      	mov	r4, r0
 800e40e:	6003      	str	r3, [r0, #0]
 800e410:	f7fd fc28 	bl	800bc64 <_ZN9ComponentD1Ev>
 800e414:	4620      	mov	r0, r4
 800e416:	bd10      	pop	{r4, pc}
 800e418:	0801c268 	.word	0x0801c268

0800e41c <_ZN6ScreenD0Ev>:
 800e41c:	b510      	push	{r4, lr}
 800e41e:	4604      	mov	r4, r0
 800e420:	f7ff fff2 	bl	800e408 <_ZN6ScreenD1Ev>
 800e424:	216c      	movs	r1, #108	; 0x6c
 800e426:	4620      	mov	r0, r4
 800e428:	f007 f93a 	bl	80156a0 <_ZdlPvj>
 800e42c:	4620      	mov	r0, r4
 800e42e:	bd10      	pop	{r4, pc}

0800e430 <_ZN12FT81xContext11__getSourceEv>:
	uint32_t foreground;
};

class FT81xContext : public Context {
public:
	TRACK_EXCEPTIONS();
 800e430:	4800      	ldr	r0, [pc, #0]	; (800e434 <_ZN12FT81xContext11__getSourceEv+0x4>)
 800e432:	4770      	bx	lr
 800e434:	0801c280 	.word	0x0801c280

0800e438 <_ZN12FT81xContext16allocateTouchTagEv>:

	return true;
}

uint32_t FT81xContext::allocateTouchTag() {
	if(currentTouchTag < 255) {
 800e438:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e43c:	2bff      	cmp	r3, #255	; 0xff
		currentTouchTag++;
 800e43e:	bf1f      	itttt	ne
 800e440:	3301      	addne	r3, #1
 800e442:	b2db      	uxtbne	r3, r3
 800e444:	f880 3030 	strbne.w	r3, [r0, #48]	; 0x30
		return currentTouchTag;
 800e448:	4618      	movne	r0, r3
	} else {
		return 0;
 800e44a:	bf08      	it	eq
 800e44c:	2000      	moveq	r0, #0
	}
}
 800e44e:	4770      	bx	lr

0800e450 <_ZN12FT81xContext8getWidthEv>:

int32_t FT81xContext::getWidth() {
	return 480;
}
 800e450:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800e454:	4770      	bx	lr

0800e456 <_ZN12FT81xContext9getHeightEv>:

int32_t FT81xContext::getHeight() {
	return 272;
}
 800e456:	f44f 7088 	mov.w	r0, #272	; 0x110
 800e45a:	4770      	bx	lr

0800e45c <_ZN12FT81xContext11getRendererEv>:

Renderer* FT81xContext::getRenderer() {
	return renderer;
}
 800e45c:	6880      	ldr	r0, [r0, #8]
 800e45e:	4770      	bx	lr

0800e460 <_ZN12FT81xContext8setAlphaEh>:

void FT81xContext::setAlpha(uint8_t alpha) {
	this->currentAlpha = alpha;
 800e460:	f880 1020 	strb.w	r1, [r0, #32]
	renderer->color_a(alpha);
 800e464:	6880      	ldr	r0, [r0, #8]
 800e466:	6803      	ldr	r3, [r0, #0]
 800e468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e46a:	4718      	bx	r3

0800e46c <_ZN12FT81xContext8setColorEm>:
}

void FT81xContext::setColor(uint32_t color) {
	this->currentColor = color;
 800e46c:	6241      	str	r1, [r0, #36]	; 0x24
	renderer->color_rgb32(color);
 800e46e:	6880      	ldr	r0, [r0, #8]
 800e470:	6803      	ldr	r3, [r0, #0]
 800e472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e474:	4718      	bx	r3

0800e476 <_ZN12FT81xContext13setBackgroundEm>:
}

void FT81xContext::setBackground(uint32_t color) {
	this->currentBackground = color;
 800e476:	6281      	str	r1, [r0, #40]	; 0x28
	renderer->bgcolor_rgb32(color);
 800e478:	6880      	ldr	r0, [r0, #8]
 800e47a:	6803      	ldr	r3, [r0, #0]
 800e47c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800e480:	4718      	bx	r3

0800e482 <_ZN12FT81xContext13setForegroundEm>:
}

void FT81xContext::setForeground(uint32_t color) {
	this->currentForeground = color;
 800e482:	62c1      	str	r1, [r0, #44]	; 0x2c
	renderer->fgcolor_rgb32(color);
 800e484:	6880      	ldr	r0, [r0, #8]
 800e486:	6803      	ldr	r3, [r0, #0]
 800e488:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e48c:	4718      	bx	r3

0800e48e <_ZN8IteratorI8ColorSetED1Ev>:
	virtual ~Iterator() {}
 800e48e:	4770      	bx	lr

0800e490 <_ZN8IteratorI8ColorSetE11__getSourceEv>:
	TRACK_EXCEPTIONS();
 800e490:	4800      	ldr	r0, [pc, #0]	; (800e494 <_ZN8IteratorI8ColorSetE11__getSourceEv+0x4>)
 800e492:	4770      	bx	lr
 800e494:	0801b111 	.word	0x0801b111

0800e498 <_ZN10LinkedListI8ColorSetE11__getSourceEv>:
	TRACK_EXCEPTIONS();
 800e498:	4800      	ldr	r0, [pc, #0]	; (800e49c <_ZN10LinkedListI8ColorSetE11__getSourceEv+0x4>)
 800e49a:	4770      	bx	lr
 800e49c:	0801b111 	.word	0x0801b111

0800e4a0 <_ZN12FT81xContext6updateEP9Component>:
	root->updateLayout();
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	f7ff bc2b 	b.w	800dcfc <_ZN9Component12updateLayoutEv>
	...

0800e4a8 <_ZN12FT81xContext6renderEP9Component>:
void FT81xContext::render(Component* root) {
 800e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ac:	4604      	mov	r4, r0
	struct touch_input_t* touch = renderer->fetch_touch_inputs();
 800e4ae:	6880      	ldr	r0, [r0, #8]
void FT81xContext::render(Component* root) {
 800e4b0:	460e      	mov	r6, r1
	struct touch_input_t* touch = renderer->fetch_touch_inputs();
 800e4b2:	6803      	ldr	r3, [r0, #0]
 800e4b4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800e4b8:	4798      	blx	r3
	Component* touchTarget = root->getComponentAt(touch->display_y, touch->display_x);
 800e4ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
	struct touch_input_t* touch = renderer->fetch_touch_inputs();
 800e4be:	4605      	mov	r5, r0
	Component* touchTarget = root->getComponentAt(touch->display_y, touch->display_x);
 800e4c0:	ee00 3a90 	vmov	s1, r3
 800e4c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	ee00 3a10 	vmov	s0, r3
 800e4ce:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800e4d2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e4d6:	f7ff fba5 	bl	800dc24 <_ZN9Component14getComponentAtEff>
	if(touch->display_x >= 0 && touch->display_y >= 0 && touch->display_y < getWidth() && touch->display_x < getHeight()) {
 800e4da:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
	Component* touchTarget = root->getComponentAt(touch->display_y, touch->display_x);
 800e4de:	4607      	mov	r7, r0
	if(touch->display_x >= 0 && touch->display_y >= 0 && touch->display_y < getWidth() && touch->display_x < getHeight()) {
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	db5c      	blt.n	800e59e <_ZN12FT81xContext6renderEP9Component+0xf6>
 800e4e4:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
 800e4e8:	f1b8 0f00 	cmp.w	r8, #0
 800e4ec:	db57      	blt.n	800e59e <_ZN12FT81xContext6renderEP9Component+0xf6>
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	4798      	blx	r3
 800e4f6:	4580      	cmp	r8, r0
 800e4f8:	da51      	bge.n	800e59e <_ZN12FT81xContext6renderEP9Component+0xf6>
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	4798      	blx	r3
 800e506:	4285      	cmp	r5, r0
 800e508:	da49      	bge.n	800e59e <_ZN12FT81xContext6renderEP9Component+0xf6>
		if(touchTarget != nullptr && touchAntibouncingBuffer >= 2) {
 800e50a:	2f00      	cmp	r7, #0
 800e50c:	d14b      	bne.n	800e5a6 <_ZN12FT81xContext6renderEP9Component+0xfe>
	renderer->stream_start(); // Start streaming
 800e50e:	68a0      	ldr	r0, [r4, #8]
 800e510:	6803      	ldr	r3, [r0, #0]
 800e512:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e516:	4798      	blx	r3
	renderer->cmd_dlstart();  // Set REG_CMD_DL when done
 800e518:	68a0      	ldr	r0, [r4, #8]
 800e51a:	6803      	ldr	r3, [r0, #0]
 800e51c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e520:	4798      	blx	r3
	renderer->cmd_swap();     // Set AUTO swap at end of display list
 800e522:	68a0      	ldr	r0, [r4, #8]
 800e524:	6803      	ldr	r3, [r0, #0]
 800e526:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e52a:	4798      	blx	r3
	renderer->clear_color_rgb32(BACKGROUND_COLOR);
 800e52c:	68a0      	ldr	r0, [r4, #8]
 800e52e:	4922      	ldr	r1, [pc, #136]	; (800e5b8 <_ZN12FT81xContext6renderEP9Component+0x110>)
 800e530:	6803      	ldr	r3, [r0, #0]
 800e532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e534:	4798      	blx	r3
	renderer->clear();
 800e536:	68a0      	ldr	r0, [r4, #8]
 800e538:	6803      	ldr	r3, [r0, #0]
 800e53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53c:	4798      	blx	r3
	setAlpha(0xFF);
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	4620      	mov	r0, r4
 800e542:	21ff      	movs	r1, #255	; 0xff
 800e544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e546:	4798      	blx	r3
	setColor(OUTLINE_COLOR);
 800e548:	6823      	ldr	r3, [r4, #0]
 800e54a:	4620      	mov	r0, r4
 800e54c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e552:	4798      	blx	r3
	setBackground(BACKGROUND_COLOR);
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	4620      	mov	r0, r4
 800e558:	4917      	ldr	r1, [pc, #92]	; (800e5b8 <_ZN12FT81xContext6renderEP9Component+0x110>)
 800e55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55c:	4798      	blx	r3
	setForeground(FOREGROUND_COLOR);
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e564:	4620      	mov	r0, r4
 800e566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e568:	4798      	blx	r3
	root->renderAll();
 800e56a:	4630      	mov	r0, r6
 800e56c:	f7ff fc54 	bl	800de18 <_ZN9Component9renderAllEv>
	renderer->display();
 800e570:	68a0      	ldr	r0, [r4, #8]
 800e572:	6803      	ldr	r3, [r0, #0]
 800e574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e578:	4798      	blx	r3
	renderer->getfree(0);     // trigger FT81xRenderer to read the command buffer
 800e57a:	68a0      	ldr	r0, [r4, #8]
 800e57c:	2100      	movs	r1, #0
 800e57e:	6803      	ldr	r3, [r0, #0]
 800e580:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e584:	4798      	blx	r3
	renderer->stream_stop();  // Finish streaming to command buffer
 800e586:	68a0      	ldr	r0, [r4, #8]
 800e588:	6803      	ldr	r3, [r0, #0]
 800e58a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e58e:	4798      	blx	r3
	renderer->wait_finish();
 800e590:	68a0      	ldr	r0, [r4, #8]
 800e592:	6803      	ldr	r3, [r0, #0]
}
 800e594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	renderer->wait_finish();
 800e598:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800e59c:	4718      	bx	r3
		this->touchAntibouncingBuffer++;
 800e59e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5a0:	3301      	adds	r3, #1
			this->touchAntibouncingBuffer = 0;
 800e5a2:	6363      	str	r3, [r4, #52]	; 0x34
 800e5a4:	e7b3      	b.n	800e50e <_ZN12FT81xContext6renderEP9Component+0x66>
		if(touchTarget != nullptr && touchAntibouncingBuffer >= 2) {
 800e5a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d9b0      	bls.n	800e50e <_ZN12FT81xContext6renderEP9Component+0x66>
			touchTarget->triggerTouchEvent();
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	f7ff fd3b 	bl	800e028 <_ZN9Component17triggerTouchEventEv>
			this->touchAntibouncingBuffer = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e7f5      	b.n	800e5a2 <_ZN12FT81xContext6renderEP9Component+0xfa>
 800e5b6:	bf00      	nop
 800e5b8:	00141c31 	.word	0x00141c31

0800e5bc <_ZN12FT81xContext5asyncESt8functionIFvvEE>:
bool FT81xContext::async(std::function<void()> task) {
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	b08e      	sub	sp, #56	; 0x38
	osThreadDef_t thread = { (char*) "AsyncTask", &__async, (osPriority) 3, 0, 2048};
 800e5c0:	2214      	movs	r2, #20
bool FT81xContext::async(std::function<void()> task) {
 800e5c2:	460e      	mov	r6, r1
	osThreadDef_t thread = { (char*) "AsyncTask", &__async, (osPriority) 3, 0, 2048};
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	a809      	add	r0, sp, #36	; 0x24
 800e5c8:	ad03      	add	r5, sp, #12
 800e5ca:	f007 fde1 	bl	8016190 <memset>
 800e5ce:	4b21      	ldr	r3, [pc, #132]	; (800e654 <_ZN12FT81xContext5asyncESt8functionIFvvEE+0x98>)
	struct AsyncTask* context = new AsyncTask();
 800e5d0:	2014      	movs	r0, #20
	osThreadDef_t thread = { (char*) "AsyncTask", &__async, (osPriority) 3, 0, 2048};
 800e5d2:	9307      	str	r3, [sp, #28]
 800e5d4:	4b20      	ldr	r3, [pc, #128]	; (800e658 <_ZN12FT81xContext5asyncESt8functionIFvvEE+0x9c>)
 800e5d6:	9308      	str	r3, [sp, #32]
 800e5d8:	2303      	movs	r3, #3
 800e5da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e5de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5e2:	930b      	str	r3, [sp, #44]	; 0x2c
	struct AsyncTask* context = new AsyncTask();
 800e5e4:	f005 fa52 	bl	8013a8c <_Znwj>
 800e5e8:	2214      	movs	r2, #20
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	f007 fdcf 	bl	8016190 <memset>
    _Function_base() : _M_manager(nullptr) { }
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	9305      	str	r3, [sp, #20]
    bool _M_empty() const { return !_M_manager; }
 800e5f6:	68b3      	ldr	r3, [r6, #8]
      if (static_cast<bool>(__x))
 800e5f8:	b13b      	cbz	r3, 800e60a <_ZN12FT81xContext5asyncESt8functionIFvvEE+0x4e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800e5fa:	2202      	movs	r2, #2
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800e602:	68f3      	ldr	r3, [r6, #12]
 800e604:	9306      	str	r3, [sp, #24]
	  _M_manager = __x._M_manager;
 800e606:	68b3      	ldr	r3, [r6, #8]
 800e608:	9305      	str	r3, [sp, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e60a:	ab01      	add	r3, sp, #4
 800e60c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e610:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800e614:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e618:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800e61c:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e620:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 800e622:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 800e624:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e626:	9a06      	ldr	r2, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 800e628:	9305      	str	r3, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 800e62a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800e62e:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 800e630:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 800e632:	9106      	str	r1, [sp, #24]
      if (_M_manager)
 800e634:	b11b      	cbz	r3, 800e63e <_ZN12FT81xContext5asyncESt8functionIFvvEE+0x82>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800e636:	2203      	movs	r2, #3
 800e638:	4629      	mov	r1, r5
 800e63a:	4628      	mov	r0, r5
 800e63c:	4798      	blx	r3
	context->thread = osThreadCreate(&thread, context);
 800e63e:	4621      	mov	r1, r4
 800e640:	a807      	add	r0, sp, #28
 800e642:	f7fb fa58 	bl	8009af6 <osThreadCreate>
 800e646:	6120      	str	r0, [r4, #16]
}
 800e648:	3800      	subs	r0, #0
 800e64a:	bf18      	it	ne
 800e64c:	2001      	movne	r0, #1
 800e64e:	b00e      	add	sp, #56	; 0x38
 800e650:	bd70      	pop	{r4, r5, r6, pc}
 800e652:	bf00      	nop
 800e654:	0801c2a9 	.word	0x0801c2a9
 800e658:	0800e65d 	.word	0x0800e65d

0800e65c <_ZL7__asyncPKv>:
static void __async(const void* arg) {
 800e65c:	b538      	push	{r3, r4, r5, lr}
      if (_M_empty())
 800e65e:	6883      	ldr	r3, [r0, #8]
 800e660:	4604      	mov	r4, r0
 800e662:	b90b      	cbnz	r3, 800e668 <_ZL7__asyncPKv+0xc>
	__throw_bad_function_call();
 800e664:	f007 fb84 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800e668:	68c3      	ldr	r3, [r0, #12]
 800e66a:	4798      	blx	r3
	osThreadId thread_id = context->thread;
 800e66c:	6925      	ldr	r5, [r4, #16]
	vPortFree(context);
 800e66e:	4620      	mov	r0, r4
 800e670:	f7fc ff88 	bl	800b584 <vPortFree>
	vTaskDelete(thread_id);
 800e674:	4628      	mov	r0, r5
}
 800e676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskDelete(thread_id);
 800e67a:	f7fc b92b 	b.w	800a8d4 <vTaskDelete>
	...

0800e680 <_ZN12FT81xContext16pushColorContextEv>:
}

void FT81xContext::pushColorContext() {
 800e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(osMutexWait(mutex, 100) == osOK) {
 800e684:	2164      	movs	r1, #100	; 0x64
 800e686:	4604      	mov	r4, r0
	struct ColorSet colors = { currentAlpha, currentColor, currentBackground, currentForeground };
 800e688:	f890 9020 	ldrb.w	r9, [r0, #32]

	colorStack.add(colors);
 800e68c:	f100 050c 	add.w	r5, r0, #12
	struct ColorSet colors = { currentAlpha, currentColor, currentBackground, currentForeground };
 800e690:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800e692:	e9d0 8709 	ldrd	r8, r7, [r0, #36]	; 0x24
 800e696:	6940      	ldr	r0, [r0, #20]
 800e698:	f7fb fa64 	bl	8009b64 <osMutexWait>
 800e69c:	b9d8      	cbnz	r0, 800e6d6 <_ZN12FT81xContext16pushColorContextEv+0x56>
		this->iterator = new Iterator<T>(item, child);
 800e69e:	2020      	movs	r0, #32
		Iterator<T>* child = this->iterator;
 800e6a0:	f8d4 a018 	ldr.w	sl, [r4, #24]
		this->iterator = new Iterator<T>(item, child);
 800e6a4:	f005 f9f2 	bl	8013a8c <_Znwj>
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800e6a8:	4a0e      	ldr	r2, [pc, #56]	; (800e6e4 <_ZN12FT81xContext16pushColorContextEv+0x64>)
 800e6aa:	f8c0 a008 	str.w	sl, [r0, #8]
			this->iterator->trackExceptions(this);
 800e6ae:	4629      	mov	r1, r5
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800e6b0:	6002      	str	r2, [r0, #0]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f880 900c 	strb.w	r9, [r0, #12]
 800e6b8:	6186      	str	r6, [r0, #24]
		this->iterator = new Iterator<T>(item, child);
 800e6ba:	61a0      	str	r0, [r4, #24]
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 800e6bc:	7702      	strb	r2, [r0, #28]
 800e6be:	e9c0 8704 	strd	r8, r7, [r0, #16]
			this->iterator->trackExceptions(this);
 800e6c2:	f005 f9ba 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
			nitems++;
 800e6c6:	69e3      	ldr	r3, [r4, #28]
			osMutexRelease(mutex);
 800e6c8:	6960      	ldr	r0, [r4, #20]
			nitems++;
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	61e3      	str	r3, [r4, #28]
}
 800e6ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			osMutexRelease(mutex);
 800e6d2:	f7fb ba6c 	b.w	8009bae <osMutexRelease>
		throwException("DeadLock");
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	22a3      	movs	r2, #163	; 0xa3
 800e6da:	4903      	ldr	r1, [pc, #12]	; (800e6e8 <_ZN12FT81xContext16pushColorContextEv+0x68>)
 800e6dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e0:	f005 b9ae 	b.w	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
 800e6e4:	0801c334 	.word	0x0801c334
 800e6e8:	0801c0e3 	.word	0x0801c0e3

0800e6ec <_ZN8IteratorI8ColorSetED0Ev>:
	virtual ~Iterator() {}
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	2120      	movs	r1, #32
 800e6f2:	f006 ffd5 	bl	80156a0 <_ZdlPvj>
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	bd10      	pop	{r4, pc}
	...

0800e6fc <_ZN12FT81xContextD1Ev>:
class FT81xContext : public Context {
 800e6fc:	4b05      	ldr	r3, [pc, #20]	; (800e714 <_ZN12FT81xContextD1Ev+0x18>)
 800e6fe:	b510      	push	{r4, lr}
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	4604      	mov	r4, r0
}
 800e704:	4b04      	ldr	r3, [pc, #16]	; (800e718 <_ZN12FT81xContextD1Ev+0x1c>)
 800e706:	60c3      	str	r3, [r0, #12]
	osMutexDelete(mutex);
 800e708:	6940      	ldr	r0, [r0, #20]
 800e70a:	f7fb fa73 	bl	8009bf4 <osMutexDelete>
 800e70e:	4620      	mov	r0, r4
 800e710:	bd10      	pop	{r4, pc}
 800e712:	bf00      	nop
 800e714:	0801c364 	.word	0x0801c364
 800e718:	0801c328 	.word	0x0801c328

0800e71c <_ZN12FT81xContextD0Ev>:
 800e71c:	b510      	push	{r4, lr}
 800e71e:	4604      	mov	r4, r0
 800e720:	f7ff ffec 	bl	800e6fc <_ZN12FT81xContextD1Ev>
 800e724:	2138      	movs	r1, #56	; 0x38
 800e726:	4620      	mov	r0, r4
 800e728:	f006 ffba 	bl	80156a0 <_ZdlPvj>
 800e72c:	4620      	mov	r0, r4
 800e72e:	bd10      	pop	{r4, pc}

0800e730 <_ZN10LinkedListI8ColorSetE2itEv.isra.0>:
template <class T> Iterator<T> LinkedList<T>::it() {
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	4b0e      	ldr	r3, [pc, #56]	; (800e76c <_ZN10LinkedListI8ColorSetE2itEv.isra.0+0x3c>)
 800e734:	4604      	mov	r4, r0
	if(iterator != nullptr) {
 800e736:	460d      	mov	r5, r1
 800e738:	f100 060c 	add.w	r6, r0, #12
 800e73c:	b169      	cbz	r1, 800e75a <_ZN10LinkedListI8ColorSetE2itEv.isra.0+0x2a>
 800e73e:	684a      	ldr	r2, [r1, #4]
template <typename T> class Iterator : public ExceptionTracker {
 800e740:	e9c0 3200 	strd	r3, r2, [r0]
 800e744:	688b      	ldr	r3, [r1, #8]
 800e746:	6083      	str	r3, [r0, #8]
 800e748:	f101 030c 	add.w	r3, r1, #12
 800e74c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e74e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800e752:	7f2b      	ldrb	r3, [r5, #28]
 800e754:	7723      	strb	r3, [r4, #28]
		return *this->iterator;
	} else {
		return Iterator<T>();
	}
}
 800e756:	4620      	mov	r0, r4
 800e758:	bd70      	pop	{r4, r5, r6, pc}
template <class T> Iterator<T>::Iterator() : next(nullptr), current(), valid(false) {
 800e75a:	6003      	str	r3, [r0, #0]
 800e75c:	2210      	movs	r2, #16
 800e75e:	6081      	str	r1, [r0, #8]
 800e760:	4630      	mov	r0, r6
 800e762:	f007 fd15 	bl	8016190 <memset>
 800e766:	7725      	strb	r5, [r4, #28]
}
 800e768:	e7f5      	b.n	800e756 <_ZN10LinkedListI8ColorSetE2itEv.isra.0+0x26>
 800e76a:	bf00      	nop
 800e76c:	0801c334 	.word	0x0801c334

0800e770 <_ZN12FT81xContext15popColorContextEv>:

void FT81xContext::popColorContext() {
 800e770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return this->iterator == nullptr;
 800e774:	6985      	ldr	r5, [r0, #24]
 800e776:	b091      	sub	sp, #68	; 0x44
 800e778:	4604      	mov	r4, r0
	struct ColorSet colors = colorStack.pop();
 800e77a:	f100 090c 	add.w	r9, r0, #12
	if(!isEmpty()) {
 800e77e:	2d00      	cmp	r5, #0
 800e780:	d048      	beq.n	800e814 <_ZN12FT81xContext15popColorContextEv+0xa4>
		Iterator<T> iter = it();
 800e782:	4629      	mov	r1, r5
 800e784:	4668      	mov	r0, sp
 800e786:	f7ff ffd3 	bl	800e730 <_ZN10LinkedListI8ColorSetE2itEv.isra.0>
	if(osMutexWait(mutex, 100) == osOK) {
 800e78a:	2164      	movs	r1, #100	; 0x64
 800e78c:	6960      	ldr	r0, [r4, #20]
		T item = *iter;
 800e78e:	f89d 800c 	ldrb.w	r8, [sp, #12]
 800e792:	9d06      	ldr	r5, [sp, #24]
 800e794:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
	if(osMutexWait(mutex, 100) == osOK) {
 800e798:	f7fb f9e4 	bl	8009b64 <osMutexWait>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d132      	bne.n	800e806 <_ZN12FT81xContext15popColorContextEv+0x96>
		Iterator<T> child = it();
 800e7a0:	69a1      	ldr	r1, [r4, #24]
 800e7a2:	a808      	add	r0, sp, #32
 800e7a4:	f7ff ffc4 	bl	800e730 <_ZN10LinkedListI8ColorSetE2itEv.isra.0>
		 while(child) {
 800e7a8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e7ac:	b153      	cbz	r3, 800e7c4 <_ZN12FT81xContext15popColorContextEv+0x54>
					if(child.hasNext()) {
 800e7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						Iterator<T>* current_ptr = this->iterator;
 800e7b0:	69a0      	ldr	r0, [r4, #24]
					if(child.hasNext()) {
 800e7b2:	b30b      	cbz	r3, 800e7f8 <_ZN12FT81xContext15popColorContextEv+0x88>
						this->iterator = current_ptr->next;
 800e7b4:	6883      	ldr	r3, [r0, #8]
 800e7b6:	61a3      	str	r3, [r4, #24]
						delete current_ptr;
 800e7b8:	6803      	ldr	r3, [r0, #0]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	4798      	blx	r3
				nitems--;
 800e7be:	69e3      	ldr	r3, [r4, #28]
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	61e3      	str	r3, [r4, #28]
		osMutexRelease(mutex);
 800e7c4:	6960      	ldr	r0, [r4, #20]
 800e7c6:	f7fb f9f2 	bl	8009bae <osMutexRelease>

	setAlpha(colors.alpha);
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	4641      	mov	r1, r8
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d2:	4798      	blx	r3
	setColor(colors.color);
 800e7d4:	6823      	ldr	r3, [r4, #0]
 800e7d6:	4639      	mov	r1, r7
 800e7d8:	4620      	mov	r0, r4
 800e7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7dc:	4798      	blx	r3
	setBackground(colors.background);
 800e7de:	6823      	ldr	r3, [r4, #0]
 800e7e0:	4631      	mov	r1, r6
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e6:	4798      	blx	r3
	setForeground(colors.foreground);
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800e7f0:	b011      	add	sp, #68	; 0x44
 800e7f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	setForeground(colors.foreground);
 800e7f6:	4718      	bx	r3
						delete iterator;
 800e7f8:	b110      	cbz	r0, 800e800 <_ZN12FT81xContext15popColorContextEv+0x90>
 800e7fa:	6803      	ldr	r3, [r0, #0]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	4798      	blx	r3
						this->iterator = nullptr; // List is now empty
 800e800:	2300      	movs	r3, #0
 800e802:	61a3      	str	r3, [r4, #24]
 800e804:	e7db      	b.n	800e7be <_ZN12FT81xContext15popColorContextEv+0x4e>
		throwException("DeadLock");
 800e806:	f240 1203 	movw	r2, #259	; 0x103
 800e80a:	4907      	ldr	r1, [pc, #28]	; (800e828 <_ZN12FT81xContext15popColorContextEv+0xb8>)
 800e80c:	4648      	mov	r0, r9
 800e80e:	f005 f917 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
		return false;
 800e812:	e7da      	b.n	800e7ca <_ZN12FT81xContext15popColorContextEv+0x5a>
		throwException("EmptyListError");
 800e814:	22af      	movs	r2, #175	; 0xaf
 800e816:	4905      	ldr	r1, [pc, #20]	; (800e82c <_ZN12FT81xContext15popColorContextEv+0xbc>)
 800e818:	4648      	mov	r0, r9
		return { 0 };
 800e81a:	462e      	mov	r6, r5
 800e81c:	462f      	mov	r7, r5
 800e81e:	46a8      	mov	r8, r5
		throwException("EmptyListError");
 800e820:	f005 f90e 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
		return { 0 };
 800e824:	e7d1      	b.n	800e7ca <_ZN12FT81xContext15popColorContextEv+0x5a>
 800e826:	bf00      	nop
 800e828:	0801c0e3 	.word	0x0801c0e3
 800e82c:	0801c2b3 	.word	0x0801c2b3

0800e830 <_ZN12FT81xContextC1EP11QSPIWrapperP7Console>:
FT81xContext::FT81xContext(QSPIWrapper* qspi, Console* console) {
 800e830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e832:	4b18      	ldr	r3, [pc, #96]	; (800e894 <_ZN12FT81xContextC1EP11QSPIWrapperP7Console+0x64>)
 800e834:	4605      	mov	r5, r0
 800e836:	4604      	mov	r4, r0
 800e838:	460e      	mov	r6, r1
 800e83a:	f845 3b0c 	str.w	r3, [r5], #12
 800e83e:	4617      	mov	r7, r2
template <class T> LinkedList<T>::LinkedList() {
 800e840:	4b15      	ldr	r3, [pc, #84]	; (800e898 <_ZN12FT81xContextC1EP11QSPIWrapperP7Console+0x68>)
 800e842:	60c3      	str	r3, [r0, #12]
	const osMutexDef_t mutex_attributes = {};
 800e844:	2300      	movs	r3, #0
	this->mutex = osMutexCreate(&mutex_attributes);
 800e846:	4668      	mov	r0, sp
	const osMutexDef_t mutex_attributes = {};
 800e848:	e9cd 3300 	strd	r3, r3, [sp]
	this->mutex = osMutexCreate(&mutex_attributes);
 800e84c:	f7fb f983 	bl	8009b56 <osMutexCreate>
 800e850:	6160      	str	r0, [r4, #20]
	if(mutex == nullptr) {
 800e852:	b920      	cbnz	r0, 800e85e <_ZN12FT81xContextC1EP11QSPIWrapperP7Console+0x2e>
		throwException("MutexAllocationFailure");
 800e854:	2288      	movs	r2, #136	; 0x88
 800e856:	4911      	ldr	r1, [pc, #68]	; (800e89c <_ZN12FT81xContextC1EP11QSPIWrapperP7Console+0x6c>)
 800e858:	4628      	mov	r0, r5
 800e85a:	f005 f8f1 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
	qspi->trackExceptions(this);
 800e85e:	4621      	mov	r1, r4
 800e860:	4630      	mov	r0, r6
 800e862:	f005 f8ea 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
	colorStack.trackExceptions(this);
 800e866:	4621      	mov	r1, r4
 800e868:	4628      	mov	r0, r5
 800e86a:	f005 f8e6 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
	this->renderer = new FT81xRenderer(qspi, console);
 800e86e:	206c      	movs	r0, #108	; 0x6c
 800e870:	f005 f90c 	bl	8013a8c <_Znwj>
 800e874:	4605      	mov	r5, r0
 800e876:	463a      	mov	r2, r7
 800e878:	4631      	mov	r1, r6
 800e87a:	f000 f89d 	bl	800e9b8 <_ZN13FT81xRendererC1EP11QSPIWrapperP7Console>
		renderer->init_gpu();
 800e87e:	4628      	mov	r0, r5
	this->renderer = new FT81xRenderer(qspi, console);
 800e880:	60a5      	str	r5, [r4, #8]
		renderer->init_gpu();
 800e882:	f000 fd8b 	bl	800f39c <_ZN13FT81xRenderer8init_gpuEv>
		renderer->wake(128);
 800e886:	68a0      	ldr	r0, [r4, #8]
 800e888:	2180      	movs	r1, #128	; 0x80
 800e88a:	f000 fced 	bl	800f268 <_ZN13FT81xRenderer4wakeEh>
}
 800e88e:	4620      	mov	r0, r4
 800e890:	b003      	add	sp, #12
 800e892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e894:	0801c364 	.word	0x0801c364
 800e898:	0801c328 	.word	0x0801c328
 800e89c:	0801c0cc 	.word	0x0801c0cc

0800e8a0 <_ZN13FT81xRenderer18clear_color_rgb888Ehhh>:
}

void FT81xRenderer::clear_color_rgb888(uint8_t red, uint8_t green, uint8_t blue) {
	clear_color_rgb32(
			((red & 0xffL) << 16) | ((green & 0xffL) << 8)
					| ((blue & 0xffL) << 0));
 800e8a0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e8a4:	6803      	ldr	r3, [r0, #0]
	clear_color_rgb32(
 800e8a6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800e8aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ac:	4718      	bx	r3

0800e8ae <_ZN13FT81xRenderer12color_rgb888Ehhh>:
}

void FT81xRenderer::color_rgb888(uint8_t red, uint8_t green, uint8_t blue) {
	color_rgb32(
			((red & 0xffL) << 16) | ((green & 0xffL) << 8)
					| ((blue & 0xffL) << 0));
 800e8ae:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e8b2:	6803      	ldr	r3, [r0, #0]
	color_rgb32(
 800e8b4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800e8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ba:	4718      	bx	r3

0800e8bc <_ZN13FT81xRenderer14fgcolor_rgb888Ehhh>:
	cI(rgb);
}
void FT81xRenderer::fgcolor_rgb888(uint8_t red, uint8_t green, uint8_t blue) {
	fgcolor_rgb32(
			((red & 255L) << 16) | ((green & 255L) << 8)
					| ((blue & 255L) << 0));
 800e8bc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e8c0:	6803      	ldr	r3, [r0, #0]
	fgcolor_rgb32(
 800e8c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800e8c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e8ca:	4718      	bx	r3

0800e8cc <_ZN13FT81xRenderer14bgcolor_rgb888Ehhh>:
	cI(rgb);
}
void FT81xRenderer::bgcolor_rgb888(uint8_t red, uint8_t green, uint8_t blue) {
	bgcolor_rgb32(
			((red & 255L) << 16) | ((green & 255L) << 8)
					| ((blue & 255L) << 0));
 800e8cc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e8d0:	6803      	ldr	r3, [r0, #0]
	bgcolor_rgb32(
 800e8d2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800e8d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800e8da:	4718      	bx	r3

0800e8dc <_ZN13FT81xRenderer20cmd_gradcolor_rgb888Ehhh>:
	cI(rgb);
}
void FT81xRenderer::cmd_gradcolor_rgb888(uint8_t red, uint8_t green, uint8_t blue) {
	cmd_gradcolor_rgb32(
			((red & 255L) << 16) | ((green & 255L) << 8)
					| ((blue & 255L) << 0));
 800e8dc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e8e0:	6803      	ldr	r3, [r0, #0]
	cmd_gradcolor_rgb32(
 800e8e2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800e8e6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e8ea:	4718      	bx	r3

0800e8ec <_ZN13FT81xRenderer9calibrateEv>:
	// report back memory locations of the results to caller
	*result = r;
}

void FT81xRenderer::calibrate() {
	stream_start();  // Start streaming
 800e8ec:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::calibrate() {
 800e8ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8f0:	4604      	mov	r4, r0
	stream_start();  // Start streaming
 800e8f2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e8f6:	4798      	blx	r3
	clear_color_rgb32(0xffffff);
 800e8f8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e8fc:	6823      	ldr	r3, [r4, #0]
 800e8fe:	4620      	mov	r0, r4
 800e900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e902:	4798      	blx	r3
	color_rgb32(0xffffff);
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	4620      	mov	r0, r4
 800e908:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e90e:	4798      	blx	r3
	bgcolor_rgb32(0x402000);
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	4620      	mov	r0, r4
 800e914:	4919      	ldr	r1, [pc, #100]	; (800e97c <_ZN13FT81xRenderer9calibrateEv+0x90>)
 800e916:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800e91a:	4798      	blx	r3
	fgcolor_rgb32(0x703800);
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	4918      	ldr	r1, [pc, #96]	; (800e980 <_ZN13FT81xRenderer9calibrateEv+0x94>)
 800e920:	4620      	mov	r0, r4
 800e922:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e926:	4798      	blx	r3
	cmd_dlstart();   // Set REG_CMD_DL when done
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	4620      	mov	r0, r4
 800e92c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e930:	4798      	blx	r3
	clear();         // Clear the display
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	4620      	mov	r0, r4
 800e936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e938:	4798      	blx	r3
	getfree(0);      // trigger FT81xRenderer to read the command buffer
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	4620      	mov	r0, r4
 800e93e:	2100      	movs	r1, #0
 800e940:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e944:	4798      	blx	r3

	cmd_text(180, 30, 40, OPT_CENTER, "Please tap on the dot..");
 800e946:	4a0f      	ldr	r2, [pc, #60]	; (800e984 <_ZN13FT81xRenderer9calibrateEv+0x98>)
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	21b4      	movs	r1, #180	; 0xb4
 800e94c:	9201      	str	r2, [sp, #4]
 800e94e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e952:	4620      	mov	r0, r4
 800e954:	9200      	str	r2, [sp, #0]
 800e956:	221e      	movs	r2, #30
 800e958:	f8d3 5164 	ldr.w	r5, [r3, #356]	; 0x164
 800e95c:	2328      	movs	r3, #40	; 0x28
 800e95e:	47a8      	blx	r5
	//cmd_calibrate(0);// Calibration command
	//cmd_swap();      // Set AUTO swap at end of display list

	stream_stop();   // Finish streaming to command buffer
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	4620      	mov	r0, r4
 800e964:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e968:	4798      	blx	r3
	// Wait till the Logo is finished
	wait_finish();
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	4620      	mov	r0, r4
 800e96e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
}
 800e972:	b003      	add	sp, #12
 800e974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	wait_finish();
 800e978:	4718      	bx	r3
 800e97a:	bf00      	nop
 800e97c:	00402000 	.word	0x00402000
 800e980:	00703800 	.word	0x00703800
 800e984:	0801c3a4 	.word	0x0801c3a4

0800e988 <_ZN13FT81xRendererD1Ev>:
 * Prototypes
 */



class FT81xRenderer : public Renderer {
 800e988:	4770      	bx	lr

0800e98a <_ZN13FT81xRendererD0Ev>:
 800e98a:	b510      	push	{r4, lr}
 800e98c:	4604      	mov	r4, r0
 800e98e:	216c      	movs	r1, #108	; 0x6c
 800e990:	f006 fe86 	bl	80156a0 <_ZdlPvj>
 800e994:	4620      	mov	r0, r4
 800e996:	bd10      	pop	{r4, pc}

0800e998 <_ZN13FT81xRenderer9checkfreeEt>:
	if (fifo_freespace < required) {
 800e998:	89c2      	ldrh	r2, [r0, #14]
 800e99a:	428a      	cmp	r2, r1
 800e99c:	d203      	bcs.n	800e9a6 <_ZN13FT81xRenderer9checkfreeEt+0xe>
		getfree(required);
 800e99e:	6803      	ldr	r3, [r0, #0]
 800e9a0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e9a4:	4718      	bx	r3
}
 800e9a6:	4770      	bx	lr

0800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e9ae:	4801      	ldr	r0, [pc, #4]	; (800e9b4 <_ZN13FT81xRenderer9assert_csEb.part.0+0xc>)
 800e9b0:	f7f6 b828 	b.w	8004a04 <HAL_GPIO_WritePin>
 800e9b4:	58021000 	.word	0x58021000

0800e9b8 <_ZN13FT81xRendererC1EP11QSPIWrapperP7Console>:
FT81xRenderer::FT81xRenderer(QSPIWrapper *spi, Console *console) : spi(spi), console(console) {
 800e9b8:	b510      	push	{r4, lr}
 800e9ba:	6082      	str	r2, [r0, #8]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	4c05      	ldr	r4, [pc, #20]	; (800e9d4 <_ZN13FT81xRendererC1EP11QSPIWrapperP7Console+0x1c>)
 800e9c0:	60c2      	str	r2, [r0, #12]
 800e9c2:	8202      	strh	r2, [r0, #16]
 800e9c4:	7482      	strb	r2, [r0, #18]
 800e9c6:	e9c0 4100 	strd	r4, r1, [r0]
 800e9ca:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e9ce:	e9c0 2207 	strd	r2, r2, [r0, #28]
}
 800e9d2:	bd10      	pop	{r4, pc}
 800e9d4:	0801c930 	.word	0x0801c930

0800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>:
	cmd->Instruction = 0;
 800e9d8:	2300      	movs	r3, #0
	cmd->Address = 0;
 800e9da:	e9c1 3300 	strd	r3, r3, [r1]
	cmd->AddressSize = 0;
 800e9de:	e9c1 3302 	strd	r3, r3, [r1, #8]
	cmd->DummyCycles = 0;
 800e9e2:	e9c1 3304 	strd	r3, r3, [r1, #16]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 800e9e6:	e9c1 3306 	strd	r3, r3, [r1, #24]
	cmd->DataMode = QSPI_DATA_NONE;
 800e9ea:	e9c1 3308 	strd	r3, r3, [r1, #32]
	cmd->DdrMode = QSPI_DDR_MODE_DISABLE;
 800e9ee:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
	cmd->SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800e9f2:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
}
 800e9f6:	4770      	bx	lr

0800e9f8 <_ZN13FT81xRenderer9assert_csEb>:
	if(asserted) {
 800e9f8:	b109      	cbz	r1, 800e9fe <_ZN13FT81xRenderer9assert_csEb+0x6>
 800e9fa:	f7ff bfd5 	b.w	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800e9fe:	2201      	movs	r2, #1
 800ea00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ea04:	4801      	ldr	r0, [pc, #4]	; (800ea0c <_ZN13FT81xRenderer9assert_csEb+0x14>)
 800ea06:	f7f5 bffd 	b.w	8004a04 <HAL_GPIO_WritePin>
 800ea0a:	bf00      	nop
 800ea0c:	58021000 	.word	0x58021000

0800ea10 <_ZN13FT81xRenderer11stream_stopEv>:
	assert_cs(false);
 800ea10:	2100      	movs	r1, #0
 800ea12:	f7ff bff1 	b.w	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
	...

0800ea18 <_ZN13FT81xRenderer13hostcmd_paramEhh>:
void FT81xRenderer::hostcmd_param(uint8_t command, uint8_t args) {
 800ea18:	b530      	push	{r4, r5, lr}
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	b091      	sub	sp, #68	; 0x44
 800ea1e:	460d      	mov	r5, r1
 800ea20:	f88d 2007 	strb.w	r2, [sp, #7]
 800ea24:	f7ff ffc0 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800ea28:	a902      	add	r1, sp, #8
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7ff ffd4 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800ea30:	7ca3      	ldrb	r3, [r4, #18]
 800ea32:	b1ab      	cbz	r3, 800ea60 <_ZN13FT81xRenderer13hostcmd_paramEhh+0x48>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800ea34:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ea38:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800ea3a:	f44f 7340 	mov.w	r3, #768	; 0x300
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800ea3e:	9308      	str	r3, [sp, #32]
	cmd.NbData = 1;
 800ea40:	2301      	movs	r3, #1
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ea42:	2264      	movs	r2, #100	; 0x64
 800ea44:	a902      	add	r1, sp, #8
 800ea46:	6860      	ldr	r0, [r4, #4]
	cmd.NbData = 1;
 800ea48:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.Instruction = command;
 800ea4a:	9502      	str	r5, [sp, #8]
	cmd.DummyCycles = 1;
 800ea4c:	9307      	str	r3, [sp, #28]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ea4e:	f001 fff1 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800ea52:	b158      	cbz	r0, 800ea6c <_ZN13FT81xRenderer13hostcmd_paramEhh+0x54>
		console->printf("[FT81xRenderer] Failed to send QSPI command for hostcmd\r\n");
 800ea54:	490c      	ldr	r1, [pc, #48]	; (800ea88 <_ZN13FT81xRenderer13hostcmd_paramEhh+0x70>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for hostcmd\r\n");
 800ea56:	68a0      	ldr	r0, [r4, #8]
 800ea58:	f7fc fe02 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800ea5c:	b011      	add	sp, #68	; 0x44
 800ea5e:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800ea60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea64:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800ea66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea6a:	e7e8      	b.n	800ea3e <_ZN13FT81xRenderer13hostcmd_paramEhh+0x26>
	if (spi->transmit((uint8_t*) &args, FT_IO_TIMEOUT) != HAL_OK) {
 800ea6c:	f10d 0107 	add.w	r1, sp, #7
 800ea70:	2264      	movs	r2, #100	; 0x64
 800ea72:	6860      	ldr	r0, [r4, #4]
 800ea74:	f002 f87a 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 800ea78:	4601      	mov	r1, r0
 800ea7a:	b108      	cbz	r0, 800ea80 <_ZN13FT81xRenderer13hostcmd_paramEhh+0x68>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for hostcmd\r\n");
 800ea7c:	4903      	ldr	r1, [pc, #12]	; (800ea8c <_ZN13FT81xRenderer13hostcmd_paramEhh+0x74>)
 800ea7e:	e7ea      	b.n	800ea56 <_ZN13FT81xRenderer13hostcmd_paramEhh+0x3e>
	assert_cs(false);
 800ea80:	4620      	mov	r0, r4
 800ea82:	f7ff ffb9 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
 800ea86:	e7e9      	b.n	800ea5c <_ZN13FT81xRenderer13hostcmd_paramEhh+0x44>
 800ea88:	0801c3bc 	.word	0x0801c3bc
 800ea8c:	0801c3f6 	.word	0x0801c3f6

0800ea90 <_ZN13FT81xRenderer2rdEm>:
uint8_t FT81xRenderer::rd(uint32_t addr) {
 800ea90:	b530      	push	{r4, r5, lr}
 800ea92:	4604      	mov	r4, r0
 800ea94:	b091      	sub	sp, #68	; 0x44
 800ea96:	460d      	mov	r5, r1
 800ea98:	f7ff ff86 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800ea9c:	a902      	add	r1, sp, #8
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f7ff ff9a 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800eaa4:	7ca3      	ldrb	r3, [r4, #18]
 800eaa6:	b1cb      	cbz	r3, 800eadc <_ZN13FT81xRenderer2rdEm+0x4c>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800eaa8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800eaac:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800eaae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800eab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800eab6:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.NbData = 1;
 800eab8:	2301      	movs	r3, #1
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800eaba:	a902      	add	r1, sp, #8
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800eabc:	9205      	str	r2, [sp, #20]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800eabe:	2264      	movs	r2, #100	; 0x64
 800eac0:	6860      	ldr	r0, [r4, #4]
	cmd.NbData = 1;
 800eac2:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.Address = addr;
 800eac4:	9503      	str	r5, [sp, #12]
	cmd.DummyCycles = 1;
 800eac6:	9307      	str	r3, [sp, #28]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800eac8:	f001 ffb4 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800eacc:	b160      	cbz	r0, 800eae8 <_ZN13FT81xRenderer2rdEm+0x58>
		console->printf("[FT81xRenderer] Failed to send QSPI command for read8\r\n");
 800eace:	490e      	ldr	r1, [pc, #56]	; (800eb08 <_ZN13FT81xRenderer2rdEm+0x78>)
		console->printf("[FT81xRenderer] Failed to receive QSPI data for read8\r\n");
 800ead0:	68a0      	ldr	r0, [r4, #8]
 800ead2:	f7fc fdc5 	bl	800b660 <_ZN7Console6printfEPKcz>
		return -1;
 800ead6:	20ff      	movs	r0, #255	; 0xff
}
 800ead8:	b011      	add	sp, #68	; 0x44
 800eada:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800eadc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eae0:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800eae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae6:	e7e4      	b.n	800eab2 <_ZN13FT81xRenderer2rdEm+0x22>
	if (spi->receive(&output, FT_IO_TIMEOUT) != HAL_OK) {
 800eae8:	f10d 0107 	add.w	r1, sp, #7
 800eaec:	2264      	movs	r2, #100	; 0x64
 800eaee:	6860      	ldr	r0, [r4, #4]
 800eaf0:	f002 f876 	bl	8010be0 <_ZN11QSPIWrapper7receiveEPhm>
 800eaf4:	4601      	mov	r1, r0
 800eaf6:	b108      	cbz	r0, 800eafc <_ZN13FT81xRenderer2rdEm+0x6c>
		console->printf("[FT81xRenderer] Failed to receive QSPI data for read8\r\n");
 800eaf8:	4904      	ldr	r1, [pc, #16]	; (800eb0c <_ZN13FT81xRenderer2rdEm+0x7c>)
 800eafa:	e7e9      	b.n	800ead0 <_ZN13FT81xRenderer2rdEm+0x40>
	assert_cs(false);
 800eafc:	4620      	mov	r0, r4
 800eafe:	f7ff ff7b 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
	return output;
 800eb02:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800eb06:	e7e7      	b.n	800ead8 <_ZN13FT81xRenderer2rdEm+0x48>
 800eb08:	0801c431 	.word	0x0801c431
 800eb0c:	0801c469 	.word	0x0801c469

0800eb10 <_ZN13FT81xRenderer12restart_coreEv>:
void FT81xRenderer::restart_core() {
 800eb10:	b510      	push	{r4, lr}
 800eb12:	4604      	mov	r4, r0
	spi->setup(SPI_BAUDRATEPRESCALER_16);
 800eb14:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 800eb18:	6840      	ldr	r0, [r0, #4]
 800eb1a:	f001 ff69 	bl	80109f0 <_ZN11QSPIWrapper5setupEm>
	hostcmd(CMD_SLEEP);
 800eb1e:	4620      	mov	r0, r4
 800eb20:	2200      	movs	r2, #0
 800eb22:	2142      	movs	r1, #66	; 0x42
 800eb24:	f7ff ff78 	bl	800ea18 <_ZN13FT81xRenderer13hostcmd_paramEhh>
	hostcmd_param(CMD_CLKSEL, 0x00);
 800eb28:	2200      	movs	r2, #0
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	2161      	movs	r1, #97	; 0x61
 800eb2e:	f7ff ff73 	bl	800ea18 <_ZN13FT81xRenderer13hostcmd_paramEhh>
	rd(CMD_ACTIVE);
 800eb32:	2100      	movs	r1, #0
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7ff ffab 	bl	800ea90 <_ZN13FT81xRenderer2rdEm>
	rd(CMD_ACTIVE);
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7ff ffa7 	bl	800ea90 <_ZN13FT81xRenderer2rdEm>
	vTaskDelay(20 / portTICK_PERIOD_MS);
 800eb42:	2014      	movs	r0, #20
 800eb44:	f7fc f888 	bl	800ac58 <vTaskDelay>
	hostcmd(CMD_CLKINT);
 800eb48:	4620      	mov	r0, r4
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	2148      	movs	r1, #72	; 0x48
 800eb4e:	f7ff ff63 	bl	800ea18 <_ZN13FT81xRenderer13hostcmd_paramEhh>
	hostcmd_param(CMD_PD_ROMS, 0x00);
 800eb52:	4620      	mov	r0, r4
 800eb54:	2200      	movs	r2, #0
 800eb56:	2149      	movs	r1, #73	; 0x49
 800eb58:	f7ff ff5e 	bl	800ea18 <_ZN13FT81xRenderer13hostcmd_paramEhh>
	hostcmd(CMD_RST_PULSE);
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	2200      	movs	r2, #0
 800eb60:	2168      	movs	r1, #104	; 0x68
}
 800eb62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hostcmd(CMD_RST_PULSE);
 800eb66:	f7ff bf57 	b.w	800ea18 <_ZN13FT81xRenderer13hostcmd_paramEhh>
	...

0800eb6c <_ZN13FT81xRenderer19multi_touch_enabledEv>:
	return !(rd(REG_CTOUCH_EXTENDED) & 0x01);
 800eb6c:	4903      	ldr	r1, [pc, #12]	; (800eb7c <_ZN13FT81xRenderer19multi_touch_enabledEv+0x10>)
bool FT81xRenderer::multi_touch_enabled() {
 800eb6e:	b508      	push	{r3, lr}
	return !(rd(REG_CTOUCH_EXTENDED) & 0x01);
 800eb70:	f7ff ff8e 	bl	800ea90 <_ZN13FT81xRenderer2rdEm>
 800eb74:	43c0      	mvns	r0, r0
}
 800eb76:	f000 0001 	and.w	r0, r0, #1
 800eb7a:	bd08      	pop	{r3, pc}
 800eb7c:	00302108 	.word	0x00302108

0800eb80 <_ZN13FT81xRenderer10touch_modeEv>:
	return rd(REG_CTOUCH_MODE) & 0x03;
 800eb80:	4903      	ldr	r1, [pc, #12]	; (800eb90 <_ZN13FT81xRenderer10touch_modeEv+0x10>)
uint8_t FT81xRenderer::touch_mode() {
 800eb82:	b508      	push	{r3, lr}
	return rd(REG_CTOUCH_MODE) & 0x03;
 800eb84:	f7ff ff84 	bl	800ea90 <_ZN13FT81xRenderer2rdEm>
}
 800eb88:	f000 0003 	and.w	r0, r0, #3
 800eb8c:	bd08      	pop	{r3, pc}
 800eb8e:	bf00      	nop
 800eb90:	00302104 	.word	0x00302104

0800eb94 <_ZN13FT81xRenderer4rd16Em>:
uint16_t FT81xRenderer::rd16(uint32_t addr) {
 800eb94:	b530      	push	{r4, r5, lr}
 800eb96:	4604      	mov	r4, r0
 800eb98:	b091      	sub	sp, #68	; 0x44
 800eb9a:	460d      	mov	r5, r1
 800eb9c:	f7ff ff04 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800eba0:	a902      	add	r1, sp, #8
 800eba2:	4620      	mov	r0, r4
 800eba4:	f7ff ff18 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800eba8:	7ca3      	ldrb	r3, [r4, #18]
 800ebaa:	b1db      	cbz	r3, 800ebe4 <_ZN13FT81xRenderer4rd16Em+0x50>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800ebac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ebb0:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800ebb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ebb6:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.NbData = 2;
 800ebb8:	2302      	movs	r3, #2
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ebba:	2264      	movs	r2, #100	; 0x64
 800ebbc:	a902      	add	r1, sp, #8
	cmd.NbData = 2;
 800ebbe:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ebc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ebc4:	6860      	ldr	r0, [r4, #4]
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ebc6:	9305      	str	r3, [sp, #20]
	cmd.DummyCycles = 1;
 800ebc8:	2301      	movs	r3, #1
	cmd.Address = addr;
 800ebca:	9503      	str	r5, [sp, #12]
	cmd.DummyCycles = 1;
 800ebcc:	9307      	str	r3, [sp, #28]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ebce:	f001 ff31 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800ebd2:	b168      	cbz	r0, 800ebf0 <_ZN13FT81xRenderer4rd16Em+0x5c>
		console->printf("[FT81xRenderer] Failed to send QSPI command for read16\r\n");
 800ebd4:	490e      	ldr	r1, [pc, #56]	; (800ec10 <_ZN13FT81xRenderer4rd16Em+0x7c>)
		console->printf("[FT81xRenderer] Failed to receive QSPI data for read16\r\n");
 800ebd6:	68a0      	ldr	r0, [r4, #8]
 800ebd8:	f7fc fd42 	bl	800b660 <_ZN7Console6printfEPKcz>
		return -1;
 800ebdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800ebe0:	b011      	add	sp, #68	; 0x44
 800ebe2:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800ebe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ebe8:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ebea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebee:	e7e2      	b.n	800ebb6 <_ZN13FT81xRenderer4rd16Em+0x22>
	if (spi->receive((uint8_t*) &output, FT_IO_TIMEOUT) != HAL_OK) {
 800ebf0:	f10d 0106 	add.w	r1, sp, #6
 800ebf4:	2264      	movs	r2, #100	; 0x64
 800ebf6:	6860      	ldr	r0, [r4, #4]
 800ebf8:	f001 fff2 	bl	8010be0 <_ZN11QSPIWrapper7receiveEPhm>
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	b108      	cbz	r0, 800ec04 <_ZN13FT81xRenderer4rd16Em+0x70>
		console->printf("[FT81xRenderer] Failed to receive QSPI data for read16\r\n");
 800ec00:	4904      	ldr	r1, [pc, #16]	; (800ec14 <_ZN13FT81xRenderer4rd16Em+0x80>)
 800ec02:	e7e8      	b.n	800ebd6 <_ZN13FT81xRenderer4rd16Em+0x42>
	assert_cs(false);
 800ec04:	4620      	mov	r0, r4
 800ec06:	f7ff fef7 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
	return output;
 800ec0a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800ec0e:	e7e7      	b.n	800ebe0 <_ZN13FT81xRenderer4rd16Em+0x4c>
 800ec10:	0801c4a1 	.word	0x0801c4a1
 800ec14:	0801c4da 	.word	0x0801c4da

0800ec18 <_ZN13FT81xRenderer12read_chip_idEv>:
bool FT81xRenderer::read_chip_id() {
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	2464      	movs	r4, #100	; 0x64
		chip_id = rd16(MEM_CHIP_ID);
 800ec1e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800ec22:	4628      	mov	r0, r5
 800ec24:	f7ff ffb6 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800ec28:	81a8      	strh	r0, [r5, #12]
		if ((chip_id & 0xff) == 0x08) {
 800ec2a:	b2c3      	uxtb	r3, r0
 800ec2c:	2b08      	cmp	r3, #8
 800ec2e:	d009      	beq.n	800ec44 <_ZN13FT81xRenderer12read_chip_idEv+0x2c>
	for (uint16_t count = 0; count < 100; count++) {
 800ec30:	3c01      	subs	r4, #1
		vTaskDelay(10 / portTICK_PERIOD_MS);
 800ec32:	200a      	movs	r0, #10
 800ec34:	f7fc f810 	bl	800ac58 <vTaskDelay>
	for (uint16_t count = 0; count < 100; count++) {
 800ec38:	b2a4      	uxth	r4, r4
 800ec3a:	2c00      	cmp	r4, #0
 800ec3c:	d1ef      	bne.n	800ec1e <_ZN13FT81xRenderer12read_chip_idEv+0x6>
	return false;
 800ec3e:	4620      	mov	r0, r4
	chip_id = 0;
 800ec40:	81ac      	strh	r4, [r5, #12]
}
 800ec42:	bd38      	pop	{r3, r4, r5, pc}
			return true;
 800ec44:	2001      	movs	r0, #1
 800ec46:	e7fc      	b.n	800ec42 <_ZN13FT81xRenderer12read_chip_idEv+0x2a>

0800ec48 <_ZN13FT81xRenderer4rd32Em>:
uint32_t FT81xRenderer::rd32(uint32_t addr) {
 800ec48:	b530      	push	{r4, r5, lr}
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	b091      	sub	sp, #68	; 0x44
 800ec4e:	460d      	mov	r5, r1
 800ec50:	f7ff feaa 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800ec54:	a902      	add	r1, sp, #8
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7ff febe 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800ec5c:	7ca3      	ldrb	r3, [r4, #18]
 800ec5e:	b1db      	cbz	r3, 800ec98 <_ZN13FT81xRenderer4rd32Em+0x50>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800ec60:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ec64:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800ec66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ec6a:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.NbData = 4;
 800ec6c:	2304      	movs	r3, #4
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ec6e:	2264      	movs	r2, #100	; 0x64
 800ec70:	a902      	add	r1, sp, #8
	cmd.NbData = 4;
 800ec72:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ec74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ec78:	6860      	ldr	r0, [r4, #4]
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ec7a:	9305      	str	r3, [sp, #20]
	cmd.DummyCycles = 1;
 800ec7c:	2301      	movs	r3, #1
	cmd.Address = addr;
 800ec7e:	9503      	str	r5, [sp, #12]
	cmd.DummyCycles = 1;
 800ec80:	9307      	str	r3, [sp, #28]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ec82:	f001 fed7 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800ec86:	b168      	cbz	r0, 800eca4 <_ZN13FT81xRenderer4rd32Em+0x5c>
		console->printf("[FT81xRenderer] Failed to send QSPI command for read32\r\n");
 800ec88:	490d      	ldr	r1, [pc, #52]	; (800ecc0 <_ZN13FT81xRenderer4rd32Em+0x78>)
		console->printf("[FT81xRenderer] Failed to receive QSPI data for read32\r\n");
 800ec8a:	68a0      	ldr	r0, [r4, #8]
 800ec8c:	f7fc fce8 	bl	800b660 <_ZN7Console6printfEPKcz>
		return -1;
 800ec90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ec94:	b011      	add	sp, #68	; 0x44
 800ec96:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800ec98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ec9c:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ec9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eca2:	e7e2      	b.n	800ec6a <_ZN13FT81xRenderer4rd32Em+0x22>
	if (spi->receive((uint8_t*) &output, FT_IO_TIMEOUT) != HAL_OK) {
 800eca4:	a901      	add	r1, sp, #4
 800eca6:	2264      	movs	r2, #100	; 0x64
 800eca8:	6860      	ldr	r0, [r4, #4]
 800ecaa:	f001 ff99 	bl	8010be0 <_ZN11QSPIWrapper7receiveEPhm>
 800ecae:	4601      	mov	r1, r0
 800ecb0:	b108      	cbz	r0, 800ecb6 <_ZN13FT81xRenderer4rd32Em+0x6e>
		console->printf("[FT81xRenderer] Failed to receive QSPI data for read32\r\n");
 800ecb2:	4904      	ldr	r1, [pc, #16]	; (800ecc4 <_ZN13FT81xRenderer4rd32Em+0x7c>)
 800ecb4:	e7e9      	b.n	800ec8a <_ZN13FT81xRenderer4rd32Em+0x42>
	assert_cs(false);
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f7ff fe9e 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
	return output;
 800ecbc:	9801      	ldr	r0, [sp, #4]
 800ecbe:	e7e9      	b.n	800ec94 <_ZN13FT81xRenderer4rd32Em+0x4c>
 800ecc0:	0801c513 	.word	0x0801c513
 800ecc4:	0801c54c 	.word	0x0801c54c

0800ecc8 <_ZN13FT81xRenderer3rdnEmPha>:
void FT81xRenderer::rdn(uint32_t addr, uint8_t *results, int8_t len) {
 800ecc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecca:	4604      	mov	r4, r0
 800eccc:	b08f      	sub	sp, #60	; 0x3c
 800ecce:	461f      	mov	r7, r3
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	4615      	mov	r5, r2
 800ecd4:	f7ff fe68 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800ecd8:	4669      	mov	r1, sp
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f7ff fe7c 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800ece0:	7ca3      	ldrb	r3, [r4, #18]
 800ece2:	b1c3      	cbz	r3, 800ed16 <_ZN13FT81xRenderer3rdnEmPha+0x4e>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800ece4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ece8:	9309      	str	r3, [sp, #36]	; 0x24
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800ecea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ecee:	9307      	str	r3, [sp, #28]
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ecf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ecf4:	2264      	movs	r2, #100	; 0x64
 800ecf6:	4669      	mov	r1, sp
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ecf8:	9303      	str	r3, [sp, #12]
	cmd.DummyCycles = 1;
 800ecfa:	2301      	movs	r3, #1
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ecfc:	6860      	ldr	r0, [r4, #4]
	cmd.NbData = len;
 800ecfe:	970a      	str	r7, [sp, #40]	; 0x28
	cmd.Address = addr;
 800ed00:	9601      	str	r6, [sp, #4]
	cmd.DummyCycles = 1;
 800ed02:	9305      	str	r3, [sp, #20]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ed04:	f001 fe96 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800ed08:	b158      	cbz	r0, 800ed22 <_ZN13FT81xRenderer3rdnEmPha+0x5a>
		console->printf("[FT81xRenderer] Failed to send QSPI command for readn\r\n");
 800ed0a:	490c      	ldr	r1, [pc, #48]	; (800ed3c <_ZN13FT81xRenderer3rdnEmPha+0x74>)
		console->printf("[FT81xRenderer] Failed to receive QSPI data for readn\r\n");
 800ed0c:	68a0      	ldr	r0, [r4, #8]
 800ed0e:	f7fc fca7 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800ed12:	b00f      	add	sp, #60	; 0x3c
 800ed14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800ed16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ed1a:	9309      	str	r3, [sp, #36]	; 0x24
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ed1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed20:	e7e5      	b.n	800ecee <_ZN13FT81xRenderer3rdnEmPha+0x26>
	if (spi->receive(results, FT_IO_TIMEOUT) != HAL_OK) {
 800ed22:	4629      	mov	r1, r5
 800ed24:	2264      	movs	r2, #100	; 0x64
 800ed26:	6860      	ldr	r0, [r4, #4]
 800ed28:	f001 ff5a 	bl	8010be0 <_ZN11QSPIWrapper7receiveEPhm>
 800ed2c:	4601      	mov	r1, r0
 800ed2e:	b108      	cbz	r0, 800ed34 <_ZN13FT81xRenderer3rdnEmPha+0x6c>
		console->printf("[FT81xRenderer] Failed to receive QSPI data for readn\r\n");
 800ed30:	4903      	ldr	r1, [pc, #12]	; (800ed40 <_ZN13FT81xRenderer3rdnEmPha+0x78>)
 800ed32:	e7eb      	b.n	800ed0c <_ZN13FT81xRenderer3rdnEmPha+0x44>
	assert_cs(false);
 800ed34:	4620      	mov	r0, r4
 800ed36:	f7ff fe5f 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
 800ed3a:	e7ea      	b.n	800ed12 <_ZN13FT81xRenderer3rdnEmPha+0x4a>
 800ed3c:	0801c585 	.word	0x0801c585
 800ed40:	0801c5bd 	.word	0x0801c5bd

0800ed44 <_ZN13FT81xRenderer3rdNEmPha>:
void FT81xRenderer::rdN(uint32_t addr, uint8_t *results, int8_t len) {
 800ed44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed46:	461c      	mov	r4, r3
 800ed48:	460d      	mov	r5, r1
 800ed4a:	1a56      	subs	r6, r2, r1
 800ed4c:	1972      	adds	r2, r6, r5
	while (len) {
 800ed4e:	b194      	cbz	r4, 800ed76 <_ZN13FT81xRenderer3rdNEmPha+0x32>
		if (len < CHUNKSIZE) {
 800ed50:	2c1f      	cmp	r4, #31
 800ed52:	dc06      	bgt.n	800ed62 <_ZN13FT81xRenderer3rdNEmPha+0x1e>
			rdn(addr, results, len);
 800ed54:	4623      	mov	r3, r4
 800ed56:	4629      	mov	r1, r5
}
 800ed58:	b002      	add	sp, #8
 800ed5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rdn(addr, results, len);
 800ed5e:	f7ff bfb3 	b.w	800ecc8 <_ZN13FT81xRenderer3rdnEmPha>
			rdn(addr, results, CHUNKSIZE);
 800ed62:	3c20      	subs	r4, #32
 800ed64:	4629      	mov	r1, r5
 800ed66:	2320      	movs	r3, #32
 800ed68:	9001      	str	r0, [sp, #4]
 800ed6a:	b264      	sxtb	r4, r4
			addr += CHUNKSIZE;
 800ed6c:	3520      	adds	r5, #32
			rdn(addr, results, CHUNKSIZE);
 800ed6e:	f7ff ffab 	bl	800ecc8 <_ZN13FT81xRenderer3rdnEmPha>
			if (len < 0)
 800ed72:	9801      	ldr	r0, [sp, #4]
 800ed74:	e7ea      	b.n	800ed4c <_ZN13FT81xRenderer3rdNEmPha+0x8>
}
 800ed76:	b002      	add	sp, #8
 800ed78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed7c <_ZN13FT81xRenderer18fetch_touch_inputsEv>:
struct touch_input_t* FT81xRenderer::fetch_touch_inputs() {
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	4604      	mov	r4, r0
 800ed80:	b08e      	sub	sp, #56	; 0x38
	rdN(REG_TRACKER, (uint8_t*) &touch_tracker,
 800ed82:	2314      	movs	r3, #20
 800ed84:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800ed88:	493a      	ldr	r1, [pc, #232]	; (800ee74 <_ZN13FT81xRenderer18fetch_touch_inputsEv+0xf8>)
 800ed8a:	f7ff ffdb 	bl	800ed44 <_ZN13FT81xRenderer3rdNEmPha>
	if (multi_touch_enabled()) {
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	4620      	mov	r0, r4
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	4798      	blx	r3
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d059      	beq.n	800ee4e <_ZN13FT81xRenderer18fetch_touch_inputsEv+0xd2>
		rdN(REG_CTOUCH_TOUCH1_XY, (uint8_t*) &ctouch,
 800ed9a:	2334      	movs	r3, #52	; 0x34
 800ed9c:	aa01      	add	r2, sp, #4
 800ed9e:	4936      	ldr	r1, [pc, #216]	; (800ee78 <_ZN13FT81xRenderer18fetch_touch_inputsEv+0xfc>)
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7ff ffcf 	bl	800ed44 <_ZN13FT81xRenderer3rdNEmPha>
		touch_input[0].tag = ctouch.tag0;
 800eda6:	9b05      	ldr	r3, [sp, #20]
		uint32_t touch_xy = rd32(REG_CTOUCH_TOUCH2_XY);
 800eda8:	4934      	ldr	r1, [pc, #208]	; (800ee7c <_ZN13FT81xRenderer18fetch_touch_inputsEv+0x100>)
 800edaa:	4620      	mov	r0, r4
		touch_input[0].tag = ctouch.tag0;
 800edac:	8723      	strh	r3, [r4, #56]	; 0x38
		touch_input[0].tag_x = ctouch.tag0_xy >> 16;
 800edae:	9b04      	ldr	r3, [sp, #16]
 800edb0:	0c1a      	lsrs	r2, r3, #16
		touch_input[0].tag_y = ctouch.tag0_xy & 0xffff;
 800edb2:	87a3      	strh	r3, [r4, #60]	; 0x3c
				(int16_t) (ctouch.touch0_xy >> 16);
 800edb4:	9b03      	ldr	r3, [sp, #12]
		touch_input[0].tag_x = ctouch.tag0_xy >> 16;
 800edb6:	8762      	strh	r2, [r4, #58]	; 0x3a
		touch_input[0].display_y = (int16_t) (ctouch.touch0_xy
 800edb8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
				(int16_t) (ctouch.touch0_xy >> 16);
 800edbc:	0c1a      	lsrs	r2, r3, #16
		touch_input[1].tag = ctouch.tag1;
 800edbe:	9b07      	ldr	r3, [sp, #28]
		touch_input[0].display_x =
 800edc0:	87e2      	strh	r2, [r4, #62]	; 0x3e
		touch_input[1].tag = ctouch.tag1;
 800edc2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		touch_input[1].tag_x = ctouch.tag1_xy >> 16;
 800edc6:	9b06      	ldr	r3, [sp, #24]
 800edc8:	0c1a      	lsrs	r2, r3, #16
		touch_input[1].tag_y = ctouch.tag1_xy & 0xffff;
 800edca:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
				(int16_t) (ctouch.touch1_xy >> 16);
 800edce:	9b01      	ldr	r3, [sp, #4]
		touch_input[1].tag_x = ctouch.tag1_xy >> 16;
 800edd0:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
		touch_input[1].display_y = (int16_t) (ctouch.touch1_xy
 800edd4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
				(int16_t) (ctouch.touch1_xy >> 16);
 800edd8:	0c1a      	lsrs	r2, r3, #16
		touch_input[2].tag = ctouch.tag2;
 800edda:	9b09      	ldr	r3, [sp, #36]	; 0x24
		touch_input[1].display_x =
 800eddc:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
		touch_input[2].tag = ctouch.tag2;
 800ede0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		touch_input[2].tag_x = ctouch.tag2_xy >> 16;
 800ede4:	9b08      	ldr	r3, [sp, #32]
 800ede6:	0c1a      	lsrs	r2, r3, #16
		touch_input[2].tag_y = ctouch.tag2_xy & 0xffff;
 800ede8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		touch_input[2].tag_x = ctouch.tag2_xy >> 16;
 800edec:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
		uint32_t touch_xy = rd32(REG_CTOUCH_TOUCH2_XY);
 800edf0:	f7ff ff2a 	bl	800ec48 <_ZN13FT81xRenderer4rd32Em>
		touch_xy = rd32(REG_CTOUCH_TOUCH3_XY);
 800edf4:	4922      	ldr	r1, [pc, #136]	; (800ee80 <_ZN13FT81xRenderer18fetch_touch_inputsEv+0x104>)
		touch_input[2].display_x = (int16_t) (touch_xy >> 16);
 800edf6:	0c03      	lsrs	r3, r0, #16
		touch_input[2].display_y = (int16_t) (touch_xy & 0xffff);
 800edf8:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
		touch_xy = rd32(REG_CTOUCH_TOUCH3_XY);
 800edfc:	4620      	mov	r0, r4
		touch_input[2].display_x = (int16_t) (touch_xy >> 16);
 800edfe:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		touch_input[3].tag = ctouch.tag3;
 800ee02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee04:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		touch_input[3].tag_x = ctouch.tag3_xy >> 16;
 800ee08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee0a:	0c1a      	lsrs	r2, r3, #16
		touch_input[3].tag_y = ctouch.tag3_xy & 0xffff;
 800ee0c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
		touch_input[3].tag_x = ctouch.tag3_xy >> 16;
 800ee10:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
		touch_xy = rd32(REG_CTOUCH_TOUCH3_XY);
 800ee14:	f7ff ff18 	bl	800ec48 <_ZN13FT81xRenderer4rd32Em>
		touch_input[4].display_x = (int16_t) rd16(
 800ee18:	491a      	ldr	r1, [pc, #104]	; (800ee84 <_ZN13FT81xRenderer18fetch_touch_inputsEv+0x108>)
		touch_input[3].display_x = (int16_t) (touch_xy >> 16);
 800ee1a:	0c03      	lsrs	r3, r0, #16
		touch_input[3].display_y = (int16_t) (touch_xy & 0xffff);
 800ee1c:	f8a4 005e 	strh.w	r0, [r4, #94]	; 0x5e
		touch_input[4].display_x = (int16_t) rd16(
 800ee20:	4620      	mov	r0, r4
		touch_input[3].display_x = (int16_t) (touch_xy >> 16);
 800ee22:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
		touch_input[4].tag = ctouch.tag4;
 800ee26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee28:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
		touch_input[4].tag_x = ctouch.tag4_xy >> 16;
 800ee2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee2e:	0c1a      	lsrs	r2, r3, #16
		touch_input[4].tag_y = ctouch.tag4_xy & 0xffff;
 800ee30:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
		touch_input[4].tag_x = ctouch.tag4_xy >> 16;
 800ee34:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		touch_input[4].display_x = (int16_t) rd16(
 800ee38:	f7ff feac 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
		touch_input[4].display_y = (int16_t) (ctouch.touch4_y
 800ee3c:	9b02      	ldr	r3, [sp, #8]
		touch_input[4].display_x = (int16_t) rd16(
 800ee3e:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
		touch_input[4].display_y = (int16_t) (ctouch.touch4_y
 800ee42:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800ee46:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ee4a:	b00e      	add	sp, #56	; 0x38
 800ee4c:	bd10      	pop	{r4, pc}
		rdN(REG_CTOUCH_TOUCH0_XY, (uint8_t*) &ctouch,
 800ee4e:	230c      	movs	r3, #12
 800ee50:	aa01      	add	r2, sp, #4
 800ee52:	490d      	ldr	r1, [pc, #52]	; (800ee88 <_ZN13FT81xRenderer18fetch_touch_inputsEv+0x10c>)
 800ee54:	4620      	mov	r0, r4
 800ee56:	f7ff ff75 	bl	800ed44 <_ZN13FT81xRenderer3rdNEmPha>
		touch_input[0].tag = ctouch.tag0;
 800ee5a:	9b03      	ldr	r3, [sp, #12]
 800ee5c:	8723      	strh	r3, [r4, #56]	; 0x38
		touch_input[0].tag_x = ctouch.tag0_xy >> 16;
 800ee5e:	9b02      	ldr	r3, [sp, #8]
 800ee60:	0c1a      	lsrs	r2, r3, #16
		touch_input[0].tag_y = ctouch.tag0_xy & 0xffff;
 800ee62:	87a3      	strh	r3, [r4, #60]	; 0x3c
				(int16_t) (ctouch.touch0_xy >> 16);
 800ee64:	9b01      	ldr	r3, [sp, #4]
		touch_input[0].tag_x = ctouch.tag0_xy >> 16;
 800ee66:	8762      	strh	r2, [r4, #58]	; 0x3a
				(int16_t) (ctouch.touch0_xy >> 16);
 800ee68:	0c1a      	lsrs	r2, r3, #16
		touch_input[0].display_y = (int16_t) (ctouch.touch0_xy
 800ee6a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		touch_input[0].display_x =
 800ee6e:	87e2      	strh	r2, [r4, #62]	; 0x3e
		touch_input[0].display_y = (int16_t) (ctouch.touch0_xy
 800ee70:	e7e9      	b.n	800ee46 <_ZN13FT81xRenderer18fetch_touch_inputsEv+0xca>
 800ee72:	bf00      	nop
 800ee74:	00309000 	.word	0x00309000
 800ee78:	0030211c 	.word	0x0030211c
 800ee7c:	0030218c 	.word	0x0030218c
 800ee80:	00302190 	.word	0x00302190
 800ee84:	0030216c 	.word	0x0030216c
 800ee88:	00302124 	.word	0x00302124

0800ee8c <_ZN13FT81xRenderer2wrEmh>:
void FT81xRenderer::wr(uint32_t addr, uint8_t byte) {
 800ee8c:	b530      	push	{r4, r5, lr}
 800ee8e:	4604      	mov	r4, r0
 800ee90:	b091      	sub	sp, #68	; 0x44
 800ee92:	460d      	mov	r5, r1
 800ee94:	f88d 2007 	strb.w	r2, [sp, #7]
 800ee98:	f7ff fd86 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800ee9c:	a902      	add	r1, sp, #8
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f7ff fd9a 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800eea4:	7ca3      	ldrb	r3, [r4, #18]
 800eea6:	b1cb      	cbz	r3, 800eedc <_ZN13FT81xRenderer2wrEmh+0x50>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800eea8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800eeac:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800eeae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800eeb2:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.NbData = 1;
 800eeb4:	2301      	movs	r3, #1
	cmd.Address = addr | 0x800000;
 800eeb6:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800eeba:	2264      	movs	r2, #100	; 0x64
	cmd.NbData = 1;
 800eebc:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800eebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800eec2:	a902      	add	r1, sp, #8
 800eec4:	6860      	ldr	r0, [r4, #4]
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800eec6:	9305      	str	r3, [sp, #20]
	cmd.Address = addr | 0x800000;
 800eec8:	9503      	str	r5, [sp, #12]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800eeca:	f001 fdb3 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800eece:	b158      	cbz	r0, 800eee8 <_ZN13FT81xRenderer2wrEmh+0x5c>
		console->printf("[FT81xRenderer] Failed to send QSPI command for write8\r\n");
 800eed0:	490c      	ldr	r1, [pc, #48]	; (800ef04 <_ZN13FT81xRenderer2wrEmh+0x78>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for write8\r\n");
 800eed2:	68a0      	ldr	r0, [r4, #8]
 800eed4:	f7fc fbc4 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800eed8:	b011      	add	sp, #68	; 0x44
 800eeda:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800eedc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eee0:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800eee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eee6:	e7e4      	b.n	800eeb2 <_ZN13FT81xRenderer2wrEmh+0x26>
	if (spi->transmit((uint8_t*) &byte, FT_IO_TIMEOUT) != HAL_OK) {
 800eee8:	f10d 0107 	add.w	r1, sp, #7
 800eeec:	2264      	movs	r2, #100	; 0x64
 800eeee:	6860      	ldr	r0, [r4, #4]
 800eef0:	f001 fe3c 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 800eef4:	4601      	mov	r1, r0
 800eef6:	b108      	cbz	r0, 800eefc <_ZN13FT81xRenderer2wrEmh+0x70>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for write8\r\n");
 800eef8:	4903      	ldr	r1, [pc, #12]	; (800ef08 <_ZN13FT81xRenderer2wrEmh+0x7c>)
 800eefa:	e7ea      	b.n	800eed2 <_ZN13FT81xRenderer2wrEmh+0x46>
	assert_cs(false);
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7ff fd7b 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
 800ef02:	e7e9      	b.n	800eed8 <_ZN13FT81xRenderer2wrEmh+0x4c>
 800ef04:	0801c5f5 	.word	0x0801c5f5
 800ef08:	0801c62e 	.word	0x0801c62e

0800ef0c <_ZN13FT81xRenderer19init_touch_settingsEv>:
	wr(REG_CTOUCH_EXTENDED, 1);
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	4901      	ldr	r1, [pc, #4]	; (800ef14 <_ZN13FT81xRenderer19init_touch_settingsEv+0x8>)
 800ef10:	f7ff bfbc 	b.w	800ee8c <_ZN13FT81xRenderer2wrEmh>
 800ef14:	00302108 	.word	0x00302108

0800ef18 <_ZN13FT81xRenderer19init_audio_settingsEv>:
void FT81xRenderer::init_audio_settings() {
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	4604      	mov	r4, r0
	wr(REG_VOL_PB, 0);
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	4907      	ldr	r1, [pc, #28]	; (800ef3c <_ZN13FT81xRenderer19init_audio_settingsEv+0x24>)
 800ef20:	f7ff ffb4 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
	wr(REG_VOL_SOUND, 0);
 800ef24:	4620      	mov	r0, r4
 800ef26:	2200      	movs	r2, #0
 800ef28:	4905      	ldr	r1, [pc, #20]	; (800ef40 <_ZN13FT81xRenderer19init_audio_settingsEv+0x28>)
 800ef2a:	f7ff ffaf 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
	wr(REG_SOUND, MUTE);
 800ef2e:	4620      	mov	r0, r4
 800ef30:	2260      	movs	r2, #96	; 0x60
 800ef32:	4904      	ldr	r1, [pc, #16]	; (800ef44 <_ZN13FT81xRenderer19init_audio_settingsEv+0x2c>)
}
 800ef34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wr(REG_SOUND, MUTE);
 800ef38:	f7ff bfa8 	b.w	800ee8c <_ZN13FT81xRenderer2wrEmh>
 800ef3c:	00302080 	.word	0x00302080
 800ef40:	00302084 	.word	0x00302084
 800ef44:	00302088 	.word	0x00302088

0800ef48 <_ZN13FT81xRenderer18multi_touch_enableEb>:
	wr(REG_CTOUCH_EXTENDED, !enable); // Turn on=0/(off=1) assume little-endian
 800ef48:	f081 0201 	eor.w	r2, r1, #1
 800ef4c:	4901      	ldr	r1, [pc, #4]	; (800ef54 <_ZN13FT81xRenderer18multi_touch_enableEb+0xc>)
 800ef4e:	f7ff bf9d 	b.w	800ee8c <_ZN13FT81xRenderer2wrEmh>
 800ef52:	bf00      	nop
 800ef54:	00302108 	.word	0x00302108

0800ef58 <_ZN13FT81xRenderer4wr16Emt>:
void FT81xRenderer::wr16(uint32_t addr, uint16_t word) {
 800ef58:	b530      	push	{r4, r5, lr}
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	b091      	sub	sp, #68	; 0x44
 800ef5e:	460d      	mov	r5, r1
 800ef60:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ef64:	f7ff fd20 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800ef68:	a902      	add	r1, sp, #8
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7ff fd34 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800ef70:	7ca3      	ldrb	r3, [r4, #18]
 800ef72:	b1cb      	cbz	r3, 800efa8 <_ZN13FT81xRenderer4wr16Emt+0x50>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800ef74:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ef78:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800ef7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800ef7e:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.NbData = 2;
 800ef80:	2302      	movs	r3, #2
	cmd.Address = addr | 0x800000;
 800ef82:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ef86:	2264      	movs	r2, #100	; 0x64
	cmd.NbData = 2;
 800ef88:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ef8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ef8e:	a902      	add	r1, sp, #8
 800ef90:	6860      	ldr	r0, [r4, #4]
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800ef92:	9305      	str	r3, [sp, #20]
	cmd.Address = addr | 0x800000;
 800ef94:	9503      	str	r5, [sp, #12]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800ef96:	f001 fd4d 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800ef9a:	b158      	cbz	r0, 800efb4 <_ZN13FT81xRenderer4wr16Emt+0x5c>
		console->printf("[FT81xRenderer] Failed to send QSPI command for write16\r\n");
 800ef9c:	490c      	ldr	r1, [pc, #48]	; (800efd0 <_ZN13FT81xRenderer4wr16Emt+0x78>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for write16\r\n");
 800ef9e:	68a0      	ldr	r0, [r4, #8]
 800efa0:	f7fc fb5e 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800efa4:	b011      	add	sp, #68	; 0x44
 800efa6:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800efa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800efac:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800efae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efb2:	e7e4      	b.n	800ef7e <_ZN13FT81xRenderer4wr16Emt+0x26>
	if (spi->transmit((uint8_t*) &word, FT_IO_TIMEOUT) != HAL_OK) {
 800efb4:	f10d 0106 	add.w	r1, sp, #6
 800efb8:	2264      	movs	r2, #100	; 0x64
 800efba:	6860      	ldr	r0, [r4, #4]
 800efbc:	f001 fdd6 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 800efc0:	4601      	mov	r1, r0
 800efc2:	b108      	cbz	r0, 800efc8 <_ZN13FT81xRenderer4wr16Emt+0x70>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for write16\r\n");
 800efc4:	4903      	ldr	r1, [pc, #12]	; (800efd4 <_ZN13FT81xRenderer4wr16Emt+0x7c>)
 800efc6:	e7ea      	b.n	800ef9e <_ZN13FT81xRenderer4wr16Emt+0x46>
	assert_cs(false);
 800efc8:	4620      	mov	r0, r4
 800efca:	f7ff fd15 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
 800efce:	e7e9      	b.n	800efa4 <_ZN13FT81xRenderer4wr16Emt+0x4c>
 800efd0:	0801c668 	.word	0x0801c668
 800efd4:	0801c6a2 	.word	0x0801c6a2

0800efd8 <_ZN13FT81xRenderer21select_spi_byte_widthEv>:
void FT81xRenderer::select_spi_byte_width() {
 800efd8:	b510      	push	{r4, lr}
	wr16(REG_SPI_WIDTH, SPI_WIDTH_SINGLE);
 800efda:	2200      	movs	r2, #0
 800efdc:	4903      	ldr	r1, [pc, #12]	; (800efec <_ZN13FT81xRenderer21select_spi_byte_widthEv+0x14>)
void FT81xRenderer::select_spi_byte_width() {
 800efde:	4604      	mov	r4, r0
	wr16(REG_SPI_WIDTH, SPI_WIDTH_SINGLE);
 800efe0:	f7ff ffba 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
	qio = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	74a3      	strb	r3, [r4, #18]
}
 800efe8:	bd10      	pop	{r4, pc}
 800efea:	bf00      	nop
 800efec:	00302188 	.word	0x00302188

0800eff0 <_ZN13FT81xRenderer9init_gpioEv>:
void FT81xRenderer::init_gpio() {
 800eff0:	b510      	push	{r4, lr}
 800eff2:	4604      	mov	r4, r0
	wr16(REG_GPIOX_DIR, 0x8000);
 800eff4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800eff8:	4908      	ldr	r1, [pc, #32]	; (800f01c <_ZN13FT81xRenderer9init_gpioEv+0x2c>)
 800effa:	f7ff ffad 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
	wr16(REG_GPIOX, (rd16(REG_GPIOX) & !0xc00) | 0x400);
 800effe:	4908      	ldr	r1, [pc, #32]	; (800f020 <_ZN13FT81xRenderer9init_gpioEv+0x30>)
 800f000:	4620      	mov	r0, r4
 800f002:	f7ff fdc7 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800f006:	4620      	mov	r0, r4
 800f008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f00c:	4904      	ldr	r1, [pc, #16]	; (800f020 <_ZN13FT81xRenderer9init_gpioEv+0x30>)
 800f00e:	f7ff ffa3 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
	vTaskDelay(100 / portTICK_PERIOD_MS);
 800f012:	2064      	movs	r0, #100	; 0x64
}
 800f014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	vTaskDelay(100 / portTICK_PERIOD_MS);
 800f018:	f7fb be1e 	b.w	800ac58 <vTaskDelay>
 800f01c:	00302098 	.word	0x00302098
 800f020:	0030209c 	.word	0x0030209c

0800f024 <_ZN13FT81xRenderer10test_soundEv>:
{
 800f024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	wr(REG_VOL_SOUND,0xff);
 800f028:	2504      	movs	r5, #4
		wr16(REG_GPIOX_DIR, rd16(REG_GPIOX_DIR) | (0x1 << 1));
 800f02a:	4f29      	ldr	r7, [pc, #164]	; (800f0d0 <_ZN13FT81xRenderer10test_soundEv+0xac>)
		wr16(REG_GPIOX, rd16(REG_GPIOX) | (0x1 << 1));
 800f02c:	4e29      	ldr	r6, [pc, #164]	; (800f0d4 <_ZN13FT81xRenderer10test_soundEv+0xb0>)
	wr(REG_VOL_SOUND,0xff);
 800f02e:	22ff      	movs	r2, #255	; 0xff
		wr(REG_PLAY, 1);
 800f030:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800f0e0 <_ZN13FT81xRenderer10test_soundEv+0xbc>
{
 800f034:	4604      	mov	r4, r0
	wr(REG_VOL_SOUND,0xff);
 800f036:	4928      	ldr	r1, [pc, #160]	; (800f0d8 <_ZN13FT81xRenderer10test_soundEv+0xb4>)
 800f038:	f7ff ff28 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
		wr16(REG_GPIOX_DIR, rd16(REG_GPIOX_DIR) | (0x1 << 1));
 800f03c:	4639      	mov	r1, r7
 800f03e:	4620      	mov	r0, r4
 800f040:	f7ff fda8 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800f044:	f040 0002 	orr.w	r0, r0, #2
 800f048:	4639      	mov	r1, r7
 800f04a:	b282      	uxth	r2, r0
 800f04c:	4620      	mov	r0, r4
 800f04e:	f7ff ff83 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		wr16(REG_GPIOX, rd16(REG_GPIOX) | (0x1 << 1));
 800f052:	4631      	mov	r1, r6
 800f054:	4620      	mov	r0, r4
 800f056:	f7ff fd9d 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800f05a:	f040 0002 	orr.w	r0, r0, #2
 800f05e:	4631      	mov	r1, r6
 800f060:	b282      	uxth	r2, r0
 800f062:	4620      	mov	r0, r4
 800f064:	f7ff ff78 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		wr16(REG_SOUND,(0x3C<< 8) | 0x52);
 800f068:	f643 4252 	movw	r2, #15442	; 0x3c52
 800f06c:	491b      	ldr	r1, [pc, #108]	; (800f0dc <_ZN13FT81xRenderer10test_soundEv+0xb8>)
 800f06e:	4620      	mov	r0, r4
 800f070:	f7ff ff72 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		wr(REG_PLAY, 1);
 800f074:	2201      	movs	r2, #1
 800f076:	4641      	mov	r1, r8
 800f078:	4620      	mov	r0, r4
 800f07a:	f7ff ff07 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
		while(rd(REG_PLAY)) {
 800f07e:	4641      	mov	r1, r8
 800f080:	4620      	mov	r0, r4
 800f082:	f7ff fd05 	bl	800ea90 <_ZN13FT81xRenderer2rdEm>
 800f086:	b118      	cbz	r0, 800f090 <_ZN13FT81xRenderer10test_soundEv+0x6c>
			vTaskDelay(50 / portTICK_PERIOD_MS);
 800f088:	2032      	movs	r0, #50	; 0x32
 800f08a:	f7fb fde5 	bl	800ac58 <vTaskDelay>
		while(rd(REG_PLAY)) {
 800f08e:	e7f6      	b.n	800f07e <_ZN13FT81xRenderer10test_soundEv+0x5a>
		wr16(REG_GPIOX_DIR, rd16(REG_GPIOX_DIR) & ~(0x1 << 1));
 800f090:	4639      	mov	r1, r7
 800f092:	4620      	mov	r0, r4
 800f094:	f7ff fd7e 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800f098:	f020 0002 	bic.w	r0, r0, #2
 800f09c:	4639      	mov	r1, r7
 800f09e:	b282      	uxth	r2, r0
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f7ff ff59 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		wr16(REG_GPIOX, rd16(REG_GPIOX) & ~(0x1 << 1));
 800f0a6:	4631      	mov	r1, r6
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f7ff fd73 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800f0ae:	f020 0002 	bic.w	r0, r0, #2
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	b282      	uxth	r2, r0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f7ff ff4e 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
	for(int a = 0; a < 4; a++) {
 800f0bc:	3d01      	subs	r5, #1
 800f0be:	d1bd      	bne.n	800f03c <_ZN13FT81xRenderer10test_soundEv+0x18>
	wr(REG_VOL_SOUND,0);
 800f0c0:	462a      	mov	r2, r5
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	4904      	ldr	r1, [pc, #16]	; (800f0d8 <_ZN13FT81xRenderer10test_soundEv+0xb4>)
}
 800f0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	wr(REG_VOL_SOUND,0);
 800f0ca:	f7ff bedf 	b.w	800ee8c <_ZN13FT81xRenderer2wrEmh>
 800f0ce:	bf00      	nop
 800f0d0:	00302098 	.word	0x00302098
 800f0d4:	0030209c 	.word	0x0030209c
 800f0d8:	00302084 	.word	0x00302084
 800f0dc:	00302088 	.word	0x00302088
 800f0e0:	0030208c 	.word	0x0030208c

0800f0e4 <_ZN13FT81xRenderer4wr32Emm>:
void FT81xRenderer::wr32(uint32_t addr, uint32_t word) {
 800f0e4:	b530      	push	{r4, r5, lr}
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	b091      	sub	sp, #68	; 0x44
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	9201      	str	r2, [sp, #4]
 800f0ee:	f7ff fc5b 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800f0f2:	a902      	add	r1, sp, #8
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7ff fc6f 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800f0fa:	7ca3      	ldrb	r3, [r4, #18]
 800f0fc:	b1cb      	cbz	r3, 800f132 <_ZN13FT81xRenderer4wr32Emm+0x4e>
		cmd.DataMode = QSPI_DATA_4_LINES;
 800f0fe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f102:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_4_LINES;
 800f104:	f44f 6340 	mov.w	r3, #3072	; 0xc00
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800f108:	9309      	str	r3, [sp, #36]	; 0x24
	cmd.NbData = 4;
 800f10a:	2304      	movs	r3, #4
	cmd.Address = addr | 0x800000;
 800f10c:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f110:	2264      	movs	r2, #100	; 0x64
	cmd.NbData = 4;
 800f112:	930c      	str	r3, [sp, #48]	; 0x30
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800f114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f118:	a902      	add	r1, sp, #8
 800f11a:	6860      	ldr	r0, [r4, #4]
	cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 800f11c:	9305      	str	r3, [sp, #20]
	cmd.Address = addr | 0x800000;
 800f11e:	9503      	str	r5, [sp, #12]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f120:	f001 fc88 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800f124:	b158      	cbz	r0, 800f13e <_ZN13FT81xRenderer4wr32Emm+0x5a>
		console->printf("[FT81xRenderer] Failed to send QSPI command for write32\r\n");
 800f126:	490c      	ldr	r1, [pc, #48]	; (800f158 <_ZN13FT81xRenderer4wr32Emm+0x74>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for write32\r\n");
 800f128:	68a0      	ldr	r0, [r4, #8]
 800f12a:	f7fc fa99 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800f12e:	b011      	add	sp, #68	; 0x44
 800f130:	bd30      	pop	{r4, r5, pc}
		cmd.DataMode = QSPI_DATA_1_LINE;
 800f132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f136:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.AddressMode = QSPI_ADDRESS_1_LINE;
 800f138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f13c:	e7e4      	b.n	800f108 <_ZN13FT81xRenderer4wr32Emm+0x24>
	if (spi->transmit((uint8_t*) &word, FT_IO_TIMEOUT) != HAL_OK) {
 800f13e:	a901      	add	r1, sp, #4
 800f140:	2264      	movs	r2, #100	; 0x64
 800f142:	6860      	ldr	r0, [r4, #4]
 800f144:	f001 fd12 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 800f148:	4601      	mov	r1, r0
 800f14a:	b108      	cbz	r0, 800f150 <_ZN13FT81xRenderer4wr32Emm+0x6c>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for write32\r\n");
 800f14c:	4903      	ldr	r1, [pc, #12]	; (800f15c <_ZN13FT81xRenderer4wr32Emm+0x78>)
 800f14e:	e7eb      	b.n	800f128 <_ZN13FT81xRenderer4wr32Emm+0x44>
	assert_cs(false);
 800f150:	4620      	mov	r0, r4
 800f152:	f7ff fc51 	bl	800e9f8 <_ZN13FT81xRenderer9assert_csEb>
 800f156:	e7ea      	b.n	800f12e <_ZN13FT81xRenderer4wr32Emm+0x4a>
 800f158:	0801c6dd 	.word	0x0801c6dd
 800f15c:	0801c717 	.word	0x0801c717

0800f160 <_ZN13FT81xRenderer21init_display_settingsEv>:
void FT81xRenderer::init_display_settings() {
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	4604      	mov	r4, r0
	wr32(REG_HSIZE, DISPLAY_WIDTH);
 800f164:	4e30      	ldr	r6, [pc, #192]	; (800f228 <_ZN13FT81xRenderer21init_display_settingsEv+0xc8>)
	wr32(REG_HCYCLE, 531);
 800f166:	f240 2213 	movw	r2, #531	; 0x213
 800f16a:	4930      	ldr	r1, [pc, #192]	; (800f22c <_ZN13FT81xRenderer21init_display_settingsEv+0xcc>)
 800f16c:	f7ff ffba 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_HOFFSET, 43);
 800f170:	4620      	mov	r0, r4
 800f172:	222b      	movs	r2, #43	; 0x2b
 800f174:	492e      	ldr	r1, [pc, #184]	; (800f230 <_ZN13FT81xRenderer21init_display_settingsEv+0xd0>)
 800f176:	f7ff ffb5 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_HSIZE, DISPLAY_WIDTH);
 800f17a:	4631      	mov	r1, r6
 800f17c:	4620      	mov	r0, r4
 800f17e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f182:	f7ff ffaf 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_HSYNC0, 0);
 800f186:	4620      	mov	r0, r4
 800f188:	2200      	movs	r2, #0
 800f18a:	492a      	ldr	r1, [pc, #168]	; (800f234 <_ZN13FT81xRenderer21init_display_settingsEv+0xd4>)
 800f18c:	f7ff ffaa 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_HSYNC1, 4);
 800f190:	4620      	mov	r0, r4
 800f192:	2204      	movs	r2, #4
 800f194:	4928      	ldr	r1, [pc, #160]	; (800f238 <_ZN13FT81xRenderer21init_display_settingsEv+0xd8>)
 800f196:	f7ff ffa5 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_VSIZE, DISPLAY_HEIGHT);
 800f19a:	4d28      	ldr	r5, [pc, #160]	; (800f23c <_ZN13FT81xRenderer21init_display_settingsEv+0xdc>)
	wr32(REG_VCYCLE, 292);
 800f19c:	4620      	mov	r0, r4
 800f19e:	f44f 7292 	mov.w	r2, #292	; 0x124
 800f1a2:	4927      	ldr	r1, [pc, #156]	; (800f240 <_ZN13FT81xRenderer21init_display_settingsEv+0xe0>)
 800f1a4:	f7ff ff9e 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_VOFFSET, 12);
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	220c      	movs	r2, #12
 800f1ac:	4925      	ldr	r1, [pc, #148]	; (800f244 <_ZN13FT81xRenderer21init_display_settingsEv+0xe4>)
 800f1ae:	f7ff ff99 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_VSIZE, DISPLAY_HEIGHT);
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f1ba:	f7ff ff93 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_VSYNC0, 0);
 800f1be:	4620      	mov	r0, r4
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4921      	ldr	r1, [pc, #132]	; (800f248 <_ZN13FT81xRenderer21init_display_settingsEv+0xe8>)
 800f1c4:	f7ff ff8e 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_VSYNC1, 4);
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	2204      	movs	r2, #4
 800f1cc:	491f      	ldr	r1, [pc, #124]	; (800f24c <_ZN13FT81xRenderer21init_display_settingsEv+0xec>)
 800f1ce:	f7ff ff89 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_DITHER, 1);
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	491e      	ldr	r1, [pc, #120]	; (800f250 <_ZN13FT81xRenderer21init_display_settingsEv+0xf0>)
 800f1d8:	f7ff ff84 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr32(REG_PCLK_POL, 1);
 800f1dc:	4620      	mov	r0, r4
 800f1de:	2201      	movs	r2, #1
 800f1e0:	491c      	ldr	r1, [pc, #112]	; (800f254 <_ZN13FT81xRenderer21init_display_settingsEv+0xf4>)
 800f1e2:	f7ff ff7f 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr(REG_ROTATE, 0);
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	491b      	ldr	r1, [pc, #108]	; (800f258 <_ZN13FT81xRenderer21init_display_settingsEv+0xf8>)
 800f1ec:	f7ff fe4e 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
	wr(REG_SWIZZLE, 0);
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	4919      	ldr	r1, [pc, #100]	; (800f25c <_ZN13FT81xRenderer21init_display_settingsEv+0xfc>)
 800f1f6:	f7ff fe49 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
	display_width = rd16(REG_HSIZE);
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f7ff fcc9 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
	display_height = rd16(REG_VSIZE);
 800f202:	4629      	mov	r1, r5
	display_width = rd16(REG_HSIZE);
 800f204:	82a0      	strh	r0, [r4, #20]
	display_height = rd16(REG_VSIZE);
 800f206:	4620      	mov	r0, r4
 800f208:	f7ff fcc4 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
	console->printf("[FT81xRenderer] REG_HSIZE:%i  REG_VSIZE:%i\r\n",
 800f20c:	8aa2      	ldrh	r2, [r4, #20]
	display_height = rd16(REG_VSIZE);
 800f20e:	82e0      	strh	r0, [r4, #22]
 800f210:	4603      	mov	r3, r0
	console->printf("[FT81xRenderer] REG_HSIZE:%i  REG_VSIZE:%i\r\n",
 800f212:	4913      	ldr	r1, [pc, #76]	; (800f260 <_ZN13FT81xRenderer21init_display_settingsEv+0x100>)
 800f214:	68a0      	ldr	r0, [r4, #8]
 800f216:	f7fc fa23 	bl	800b660 <_ZN7Console6printfEPKcz>
	wr(REG_PCLK, 6);
 800f21a:	4620      	mov	r0, r4
 800f21c:	2206      	movs	r2, #6
 800f21e:	4911      	ldr	r1, [pc, #68]	; (800f264 <_ZN13FT81xRenderer21init_display_settingsEv+0x104>)
}
 800f220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	wr(REG_PCLK, 6);
 800f224:	f7ff be32 	b.w	800ee8c <_ZN13FT81xRenderer2wrEmh>
 800f228:	00302034 	.word	0x00302034
 800f22c:	0030202c 	.word	0x0030202c
 800f230:	00302030 	.word	0x00302030
 800f234:	00302038 	.word	0x00302038
 800f238:	0030203c 	.word	0x0030203c
 800f23c:	00302048 	.word	0x00302048
 800f240:	00302040 	.word	0x00302040
 800f244:	00302044 	.word	0x00302044
 800f248:	0030204c 	.word	0x0030204c
 800f24c:	00302050 	.word	0x00302050
 800f250:	00302060 	.word	0x00302060
 800f254:	0030206c 	.word	0x0030206c
 800f258:	00302058 	.word	0x00302058
 800f25c:	00302064 	.word	0x00302064
 800f260:	0801c752 	.word	0x0801c752
 800f264:	00302070 	.word	0x00302070

0800f268 <_ZN13FT81xRenderer4wakeEh>:
void FT81xRenderer::wake(uint8_t pwm) {
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4604      	mov	r4, r0
 800f26c:	460d      	mov	r5, r1
	wr32(REG_PCLK, 6);
 800f26e:	2206      	movs	r2, #6
 800f270:	490b      	ldr	r1, [pc, #44]	; (800f2a0 <_ZN13FT81xRenderer4wakeEh+0x38>)
 800f272:	f7ff ff37 	bl	800f0e4 <_ZN13FT81xRenderer4wr32Emm>
	wr(REG_PWM_DUTY, pwm);
 800f276:	462a      	mov	r2, r5
 800f278:	4620      	mov	r0, r4
 800f27a:	490a      	ldr	r1, [pc, #40]	; (800f2a4 <_ZN13FT81xRenderer4wakeEh+0x3c>)
 800f27c:	f7ff fe06 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
	wr16(REG_GPIOX, rd16(REG_GPIOX) | 0x8000);
 800f280:	4909      	ldr	r1, [pc, #36]	; (800f2a8 <_ZN13FT81xRenderer4wakeEh+0x40>)
 800f282:	4620      	mov	r0, r4
 800f284:	f7ff fc86 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
 800f288:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800f28c:	4906      	ldr	r1, [pc, #24]	; (800f2a8 <_ZN13FT81xRenderer4wakeEh+0x40>)
 800f28e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800f292:	b282      	uxth	r2, r0
 800f294:	4620      	mov	r0, r4
}
 800f296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	wr16(REG_GPIOX, rd16(REG_GPIOX) | 0x8000);
 800f29a:	f7ff be5d 	b.w	800ef58 <_ZN13FT81xRenderer4wr16Emt>
 800f29e:	bf00      	nop
 800f2a0:	00302070 	.word	0x00302070
 800f2a4:	003020d4 	.word	0x003020d4
 800f2a8:	0030209c 	.word	0x0030209c

0800f2ac <_ZN13FT81xRenderer3wrAEm>:
	addr |= 0x800000;
 800f2ac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
	addr = SPI_REARRANGE_DATA(addr, 24);
 800f2b0:	ba09      	rev	r1, r1
void FT81xRenderer::wrA(uint32_t addr) {
 800f2b2:	b510      	push	{r4, lr}
	addr = SPI_REARRANGE_DATA(addr, 24);
 800f2b4:	0a09      	lsrs	r1, r1, #8
void FT81xRenderer::wrA(uint32_t addr) {
 800f2b6:	b090      	sub	sp, #64	; 0x40
 800f2b8:	4604      	mov	r4, r0
	addr = SPI_REARRANGE_DATA(addr, 24);
 800f2ba:	9101      	str	r1, [sp, #4]
	if(asserted) {
 800f2bc:	f7ff fb74 	bl	800e9a8 <_ZN13FT81xRenderer9assert_csEb.part.0>
	load_default_command(&cmd);
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	a902      	add	r1, sp, #8
 800f2c4:	f7ff fb88 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800f2c8:	7ca3      	ldrb	r3, [r4, #18]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f2ca:	2264      	movs	r2, #100	; 0x64
 800f2cc:	6860      	ldr	r0, [r4, #4]
		cmd.DataMode = QSPI_DATA_1_LINE;
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	bf14      	ite	ne
 800f2d2:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
 800f2d6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800f2da:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.NbData = 3;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	930c      	str	r3, [sp, #48]	; 0x30
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f2e0:	f001 fba8 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800f2e4:	b128      	cbz	r0, 800f2f2 <_ZN13FT81xRenderer3wrAEm+0x46>
		console->printf("[FT81xRenderer] Failed to send QSPI command for writea\r\n");
 800f2e6:	4907      	ldr	r1, [pc, #28]	; (800f304 <_ZN13FT81xRenderer3wrAEm+0x58>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for writea\r\n");
 800f2e8:	68a0      	ldr	r0, [r4, #8]
 800f2ea:	f7fc f9b9 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800f2ee:	b010      	add	sp, #64	; 0x40
 800f2f0:	bd10      	pop	{r4, pc}
	if (spi->transmit((uint8_t*) &addr, FT_IO_TIMEOUT) != HAL_OK) {
 800f2f2:	2264      	movs	r2, #100	; 0x64
 800f2f4:	a901      	add	r1, sp, #4
 800f2f6:	6860      	ldr	r0, [r4, #4]
 800f2f8:	f001 fc38 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d0f6      	beq.n	800f2ee <_ZN13FT81xRenderer3wrAEm+0x42>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for writea\r\n");
 800f300:	4901      	ldr	r1, [pc, #4]	; (800f308 <_ZN13FT81xRenderer3wrAEm+0x5c>)
 800f302:	e7f1      	b.n	800f2e8 <_ZN13FT81xRenderer3wrAEm+0x3c>
 800f304:	0801c77f 	.word	0x0801c77f
 800f308:	0801c7b8 	.word	0x0801c7b8

0800f30c <_ZN13FT81xRenderer12stream_startEv>:
	stream_stop();
 800f30c:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::stream_start() {
 800f30e:	b510      	push	{r4, lr}
 800f310:	4604      	mov	r4, r0
	stream_stop();
 800f312:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800f316:	4798      	blx	r3
	wrA(RAM_CMD + (fifo_wp & 0xffc));
 800f318:	8a21      	ldrh	r1, [r4, #16]
 800f31a:	4620      	mov	r0, r4
 800f31c:	f021 0103 	bic.w	r1, r1, #3
 800f320:	0509      	lsls	r1, r1, #20
 800f322:	0d09      	lsrs	r1, r1, #20
}
 800f324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wrA(RAM_CMD + (fifo_wp & 0xffc));
 800f328:	f501 1142 	add.w	r1, r1, #3178496	; 0x308000
 800f32c:	f7ff bfbe 	b.w	800f2ac <_ZN13FT81xRenderer3wrAEm>

0800f330 <_ZN13FT81xRenderer7fifo_rpEv>:
uint16_t FT81xRenderer::fifo_rp() {
 800f330:	b510      	push	{r4, lr}
	uint16_t rp = rd16(REG_CMD_READ);
 800f332:	4911      	ldr	r1, [pc, #68]	; (800f378 <_ZN13FT81xRenderer7fifo_rpEv+0x48>)
uint16_t FT81xRenderer::fifo_rp() {
 800f334:	4604      	mov	r4, r0
	uint16_t rp = rd16(REG_CMD_READ);
 800f336:	f7ff fc2d 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
	if (rp == DL_CMD_FAULT) {
 800f33a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f33e:	4298      	cmp	r0, r3
 800f340:	d118      	bne.n	800f374 <_ZN13FT81xRenderer7fifo_rpEv+0x44>
		console->printf("[FT81xRenderer] COPROCESSOR EXCEPTION\r\n");
 800f342:	490e      	ldr	r1, [pc, #56]	; (800f37c <_ZN13FT81xRenderer7fifo_rpEv+0x4c>)
 800f344:	68a0      	ldr	r0, [r4, #8]
 800f346:	f7fc f98b 	bl	800b660 <_ZN7Console6printfEPKcz>
		wr(REG_CPURESET, 1);
 800f34a:	2201      	movs	r2, #1
 800f34c:	490c      	ldr	r1, [pc, #48]	; (800f380 <_ZN13FT81xRenderer7fifo_rpEv+0x50>)
 800f34e:	4620      	mov	r0, r4
 800f350:	f7ff fd9c 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
		wr16(REG_CMD_READ, 0);
 800f354:	2200      	movs	r2, #0
 800f356:	4908      	ldr	r1, [pc, #32]	; (800f378 <_ZN13FT81xRenderer7fifo_rpEv+0x48>)
 800f358:	4620      	mov	r0, r4
 800f35a:	f7ff fdfd 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		wr16(REG_CMD_WRITE, 0);
 800f35e:	2200      	movs	r2, #0
 800f360:	4908      	ldr	r1, [pc, #32]	; (800f384 <_ZN13FT81xRenderer7fifo_rpEv+0x54>)
 800f362:	4620      	mov	r0, r4
 800f364:	f7ff fdf8 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		wr(REG_CPURESET, 0);
 800f368:	4620      	mov	r0, r4
 800f36a:	2200      	movs	r2, #0
 800f36c:	4904      	ldr	r1, [pc, #16]	; (800f380 <_ZN13FT81xRenderer7fifo_rpEv+0x50>)
 800f36e:	f7ff fd8d 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
 800f372:	2000      	movs	r0, #0
}
 800f374:	bd10      	pop	{r4, pc}
 800f376:	bf00      	nop
 800f378:	003020f8 	.word	0x003020f8
 800f37c:	0801c7f2 	.word	0x0801c7f2
 800f380:	00302020 	.word	0x00302020
 800f384:	003020fc 	.word	0x003020fc

0800f388 <_ZN13FT81xRenderer10fifo_resetEv>:
void FT81xRenderer::fifo_reset() {
 800f388:	b510      	push	{r4, lr}
 800f38a:	4604      	mov	r4, r0
	fifo_wp = fifo_rp();
 800f38c:	f7ff ffd0 	bl	800f330 <_ZN13FT81xRenderer7fifo_rpEv>
	fifo_freespace = MAX_FIFO_SPACE;
 800f390:	f640 73fc 	movw	r3, #4092	; 0xffc
	fifo_wp = fifo_rp();
 800f394:	8220      	strh	r0, [r4, #16]
	fifo_freespace = MAX_FIFO_SPACE;
 800f396:	81e3      	strh	r3, [r4, #14]
}
 800f398:	bd10      	pop	{r4, pc}
	...

0800f39c <_ZN13FT81xRenderer8init_gpuEv>:
bool FT81xRenderer::init_gpu() {
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4604      	mov	r4, r0
	spi->setup(SPI_BAUDRATEPRESCALER_16);
 800f3a0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 800f3a4:	6840      	ldr	r0, [r0, #4]
 800f3a6:	f001 fb23 	bl	80109f0 <_ZN11QSPIWrapper5setupEm>
	restart_core();
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f7ff fbb0 	bl	800eb10 <_ZN13FT81xRenderer12restart_coreEv>
	if (!read_chip_id()) {
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f7ff fc31 	bl	800ec18 <_ZN13FT81xRenderer12read_chip_idEv>
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d04b      	beq.n	800f454 <_ZN13FT81xRenderer8init_gpuEv+0xb8>
	select_spi_byte_width();
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f7ff fe0b 	bl	800efd8 <_ZN13FT81xRenderer21select_spi_byte_widthEv>
	wr(REG_PWM_DUTY, 0);
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	4924      	ldr	r1, [pc, #144]	; (800f458 <_ZN13FT81xRenderer8init_gpuEv+0xbc>)
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f7ff fd60 	bl	800ee8c <_ZN13FT81xRenderer2wrEmh>
	fifo_reset();
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f7ff ffdb 	bl	800f388 <_ZN13FT81xRenderer10fifo_resetEv>
	init_gpio();
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f7ff fe0c 	bl	800eff0 <_ZN13FT81xRenderer9init_gpioEv>
	init_display_settings();
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f7ff fec1 	bl	800f160 <_ZN13FT81xRenderer21init_display_settingsEv>
	init_touch_settings();
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f7ff fd94 	bl	800ef0c <_ZN13FT81xRenderer19init_touch_settingsEv>
	init_audio_settings();
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f7ff fd97 	bl	800ef18 <_ZN13FT81xRenderer19init_audio_settingsEv>
	stream_start(); // Start streaming
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f3f2:	4798      	blx	r3
	cmd_dlstart();  // Set REG_CMD_DL when done
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3fc:	4798      	blx	r3
	cmd_swap();     // Set AUTO swap at end of display list
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	4620      	mov	r0, r4
 800f402:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f406:	4798      	blx	r3
	clear_color_rgb32(0x000000);
 800f408:	6823      	ldr	r3, [r4, #0]
 800f40a:	2100      	movs	r1, #0
 800f40c:	4620      	mov	r0, r4
 800f40e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f410:	4798      	blx	r3
	clear();
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	4620      	mov	r0, r4
 800f416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f418:	4798      	blx	r3
	display();
 800f41a:	6823      	ldr	r3, [r4, #0]
 800f41c:	4620      	mov	r0, r4
 800f41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f422:	4798      	blx	r3
	getfree(0);     // trigger FT81xRenderer to read the command buffer
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	2100      	movs	r1, #0
 800f428:	4620      	mov	r0, r4
 800f42a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800f42e:	4798      	blx	r3
	stream_stop();  // Finish streaming to command buffer
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	4620      	mov	r0, r4
 800f434:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800f438:	4798      	blx	r3
	wait_finish();
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	4620      	mov	r0, r4
 800f43e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800f442:	4798      	blx	r3
	spi->setup(SPI_BAUDRATEPRESCALER_8);
 800f444:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800f448:	6860      	ldr	r0, [r4, #4]
 800f44a:	f001 fad1 	bl	80109f0 <_ZN11QSPIWrapper5setupEm>
	test_sound();
 800f44e:	4620      	mov	r0, r4
 800f450:	f7ff fde8 	bl	800f024 <_ZN13FT81xRenderer10test_soundEv>
}
 800f454:	4628      	mov	r0, r5
 800f456:	bd38      	pop	{r3, r4, r5, pc}
 800f458:	003020d4 	.word	0x003020d4

0800f45c <_ZN13FT81xRenderer7getfreeEt>:
void FT81xRenderer::getfree(uint16_t required) {
 800f45c:	b570      	push	{r4, r5, r6, lr}
	fifo_wp &= 0xffc;
 800f45e:	8a03      	ldrh	r3, [r0, #16]
 800f460:	f640 76fc 	movw	r6, #4092	; 0xffc
void FT81xRenderer::getfree(uint16_t required) {
 800f464:	4604      	mov	r4, r0
 800f466:	460d      	mov	r5, r1
	fifo_wp &= 0xffc;
 800f468:	4033      	ands	r3, r6
 800f46a:	8203      	strh	r3, [r0, #16]
	stream_stop();
 800f46c:	6803      	ldr	r3, [r0, #0]
 800f46e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800f472:	4798      	blx	r3
	wr16(REG_CMD_WRITE, fifo_wp & 0xffc);
 800f474:	8a22      	ldrh	r2, [r4, #16]
 800f476:	490d      	ldr	r1, [pc, #52]	; (800f4ac <_ZN13FT81xRenderer7getfreeEt+0x50>)
 800f478:	4620      	mov	r0, r4
 800f47a:	4032      	ands	r2, r6
 800f47c:	f7ff fd6c 	bl	800ef58 <_ZN13FT81xRenderer4wr16Emt>
		vTaskDelay(10 / portTICK_PERIOD_MS);
 800f480:	200a      	movs	r0, #10
 800f482:	f7fb fbe9 	bl	800ac58 <vTaskDelay>
		uint16_t rp = fifo_rp();
 800f486:	4620      	mov	r0, r4
 800f488:	f7ff ff52 	bl	800f330 <_ZN13FT81xRenderer7fifo_rpEv>
		uint16_t howfull = (fifo_wp - rp) & 4095;
 800f48c:	8a22      	ldrh	r2, [r4, #16]
 800f48e:	1a13      	subs	r3, r2, r0
 800f490:	f3c3 030b 	ubfx	r3, r3, #0, #12
		fifo_freespace = MAX_FIFO_SPACE - howfull;
 800f494:	1af3      	subs	r3, r6, r3
 800f496:	b29b      	uxth	r3, r3
	} while (fifo_freespace < required);
 800f498:	42ab      	cmp	r3, r5
		fifo_freespace = MAX_FIFO_SPACE - howfull;
 800f49a:	81e3      	strh	r3, [r4, #14]
	} while (fifo_freespace < required);
 800f49c:	d3f0      	bcc.n	800f480 <_ZN13FT81xRenderer7getfreeEt+0x24>
	stream_start();
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
}
 800f4a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	stream_start();
 800f4aa:	4718      	bx	r3
 800f4ac:	003020fc 	.word	0x003020fc

0800f4b0 <_ZN13FT81xRenderer11wait_finishEv>:
	fifo_wp &= 0xffc;
 800f4b0:	8a03      	ldrh	r3, [r0, #16]
 800f4b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
void FT81xRenderer::wait_finish() {
 800f4b6:	b510      	push	{r4, lr}
	fifo_wp &= 0xffc;
 800f4b8:	f023 0303 	bic.w	r3, r3, #3
void FT81xRenderer::wait_finish() {
 800f4bc:	4604      	mov	r4, r0
	fifo_wp &= 0xffc;
 800f4be:	8203      	strh	r3, [r0, #16]
	while (((rp = fifo_rp()) != fifo_wp)) {
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f7ff ff35 	bl	800f330 <_ZN13FT81xRenderer7fifo_rpEv>
 800f4c6:	8a23      	ldrh	r3, [r4, #16]
 800f4c8:	4283      	cmp	r3, r0
 800f4ca:	d1f9      	bne.n	800f4c0 <_ZN13FT81xRenderer11wait_finishEv+0x10>
	fifo_freespace = MAX_FIFO_SPACE;
 800f4cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f4d0:	81e3      	strh	r3, [r4, #14]
}
 800f4d2:	bd10      	pop	{r4, pc}

0800f4d4 <_ZN13FT81xRenderer5cmd32Em>:
	fifo_wp += sizeof(word);
 800f4d4:	8a03      	ldrh	r3, [r0, #16]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f4d6:	2264      	movs	r2, #100	; 0x64
	fifo_wp += sizeof(word);
 800f4d8:	3304      	adds	r3, #4
void FT81xRenderer::cmd32(uint32_t word) {
 800f4da:	b510      	push	{r4, lr}
	fifo_wp += sizeof(word);
 800f4dc:	8203      	strh	r3, [r0, #16]
void FT81xRenderer::cmd32(uint32_t word) {
 800f4de:	b090      	sub	sp, #64	; 0x40
	fifo_freespace -= sizeof(word);
 800f4e0:	89c3      	ldrh	r3, [r0, #14]
void FT81xRenderer::cmd32(uint32_t word) {
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	9101      	str	r1, [sp, #4]
	load_default_command(&cmd);
 800f4e6:	a902      	add	r1, sp, #8
	fifo_freespace -= sizeof(word);
 800f4e8:	3b04      	subs	r3, #4
 800f4ea:	81c3      	strh	r3, [r0, #14]
	load_default_command(&cmd);
 800f4ec:	f7ff fa74 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 800f4f0:	7c83      	ldrb	r3, [r0, #18]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f4f2:	6840      	ldr	r0, [r0, #4]
		cmd.DataMode = QSPI_DATA_1_LINE;
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	bf14      	ite	ne
 800f4f8:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
 800f4fc:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800f500:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.NbData = 4;
 800f502:	2304      	movs	r3, #4
 800f504:	930c      	str	r3, [sp, #48]	; 0x30
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 800f506:	f001 fa95 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 800f50a:	b128      	cbz	r0, 800f518 <_ZN13FT81xRenderer5cmd32Em+0x44>
		console->printf("[FT81xRenderer] Failed to send QSPI command for cmd32\r\n");
 800f50c:	4907      	ldr	r1, [pc, #28]	; (800f52c <_ZN13FT81xRenderer5cmd32Em+0x58>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for cmd32\r\n");
 800f50e:	68a0      	ldr	r0, [r4, #8]
 800f510:	f7fc f8a6 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 800f514:	b010      	add	sp, #64	; 0x40
 800f516:	bd10      	pop	{r4, pc}
	if (spi->transmit((uint8_t*) &word, FT_IO_TIMEOUT) != HAL_OK) {
 800f518:	2264      	movs	r2, #100	; 0x64
 800f51a:	a901      	add	r1, sp, #4
 800f51c:	6860      	ldr	r0, [r4, #4]
 800f51e:	f001 fb25 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 800f522:	2800      	cmp	r0, #0
 800f524:	d0f6      	beq.n	800f514 <_ZN13FT81xRenderer5cmd32Em+0x40>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for cmd32\r\n");
 800f526:	4902      	ldr	r1, [pc, #8]	; (800f530 <_ZN13FT81xRenderer5cmd32Em+0x5c>)
 800f528:	e7f1      	b.n	800f50e <_ZN13FT81xRenderer5cmd32Em+0x3a>
 800f52a:	bf00      	nop
 800f52c:	0801c81a 	.word	0x0801c81a
 800f530:	0801c852 	.word	0x0801c852

0800f534 <_ZN13FT81xRenderer11alpha_functEhh>:
void FT81xRenderer::alpha_funct(uint8_t func, uint8_t ref) {
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	460c      	mov	r4, r1
	checkfree(4);
 800f538:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::alpha_funct(uint8_t func, uint8_t ref) {
 800f53a:	4616      	mov	r6, r2
	checkfree(4);
 800f53c:	2104      	movs	r1, #4
			((func & 0x7L) << 8) | // func           8 - 10
 800f53e:	0224      	lsls	r4, r4, #8
	checkfree(4);
 800f540:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::alpha_funct(uint8_t func, uint8_t ref) {
 800f544:	4605      	mov	r5, r0
	checkfree(4);
 800f546:	4798      	blx	r3
			((func & 0x7L) << 8) | // func           8 - 10
 800f548:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
	cmd32(word);
 800f54c:	4628      	mov	r0, r5
			((func & 0x7L) << 8) | // func           8 - 10
 800f54e:	ea44 0106 	orr.w	r1, r4, r6
}
 800f552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800f556:	f041 6110 	orr.w	r1, r1, #150994944	; 0x9000000
 800f55a:	f7ff bfbb 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f55e <_ZN13FT81xRenderer5beginEh>:
void FT81xRenderer::begin(uint8_t prim) {
 800f55e:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f560:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::begin(uint8_t prim) {
 800f562:	460c      	mov	r4, r1
	checkfree(4);
 800f564:	2104      	movs	r1, #4
void FT81xRenderer::begin(uint8_t prim) {
 800f566:	4605      	mov	r5, r0
	checkfree(4);
 800f568:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f56c:	4798      	blx	r3
	cI((0x1fUL << 24) | (prim & 0x0f));
 800f56e:	f004 010f 	and.w	r1, r4, #15
	cmd32(word);
 800f572:	4628      	mov	r0, r5
 800f574:	f041 51f8 	orr.w	r1, r1, #520093696	; 0x1f000000
}
 800f578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f57c:	f7ff bfaa 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f580 <_ZN13FT81xRenderer13bitmap_handleEh>:
void FT81xRenderer::bitmap_handle(uint8_t handle) {
 800f580:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f582:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_handle(uint8_t handle) {
 800f584:	460c      	mov	r4, r1
	checkfree(4);
 800f586:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_handle(uint8_t handle) {
 800f588:	4605      	mov	r5, r0
	checkfree(4);
 800f58a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f58e:	4798      	blx	r3
	cI((0x05UL << 24) | (handle & 0x1f));
 800f590:	f004 011f 	and.w	r1, r4, #31
	cmd32(word);
 800f594:	4628      	mov	r0, r5
 800f596:	f041 61a0 	orr.w	r1, r1, #83886080	; 0x5000000
}
 800f59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f59e:	f7ff bf99 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	...

0800f5a4 <_ZN13FT81xRenderer13bitmap_layoutEhtt>:
		uint16_t height) {
 800f5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5a6:	461d      	mov	r5, r3
	checkfree(4);
 800f5a8:	6803      	ldr	r3, [r0, #0]
		uint16_t height) {
 800f5aa:	460c      	mov	r4, r1
	checkfree(4);
 800f5ac:	2104      	movs	r1, #4
 800f5ae:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
		uint16_t height) {
 800f5b2:	4617      	mov	r7, r2
 800f5b4:	4606      	mov	r6, r0
	checkfree(4);
 800f5b6:	4798      	blx	r3
			((format & 0x1fL) << 19) | // format        19 - 23
 800f5b8:	04e1      	lsls	r1, r4, #19
			((height & 0x1ffL) << 0)   // height         0 -  8
 800f5ba:	f3c5 0508 	ubfx	r5, r5, #0, #9
			((linestride & 0x3ffL) << 9) | // linestride     9 - 18
 800f5be:	4a07      	ldr	r2, [pc, #28]	; (800f5dc <_ZN13FT81xRenderer13bitmap_layoutEhtt+0x38>)
	cmd32(word);
 800f5c0:	4630      	mov	r0, r6
			((format & 0x1fL) << 19) | // format        19 - 23
 800f5c2:	f401 0178 	and.w	r1, r1, #16252928	; 0xf80000
			((linestride & 0x3ffL) << 9) | // linestride     9 - 18
 800f5c6:	ea02 2247 	and.w	r2, r2, r7, lsl #9
 800f5ca:	4329      	orrs	r1, r5
 800f5cc:	4311      	orrs	r1, r2
}
 800f5ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	cmd32(word);
 800f5d2:	f041 61e0 	orr.w	r1, r1, #117440512	; 0x7000000
 800f5d6:	f7ff bf7d 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800f5da:	bf00      	nop
 800f5dc:	0007fe00 	.word	0x0007fe00

0800f5e0 <_ZN13FT81xRenderer15bitmap_layout_hEhh>:
	checkfree(4);
 800f5e0:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_layout_h(uint8_t linestride, uint8_t height) {
 800f5e2:	b570      	push	{r4, r5, r6, lr}
 800f5e4:	460c      	mov	r4, r1
	checkfree(4);
 800f5e6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f5ea:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_layout_h(uint8_t linestride, uint8_t height) {
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	4615      	mov	r5, r2
	checkfree(4);
 800f5f0:	4798      	blx	r3
			((linestride & 0x3L) << 2) | // linestride     2 -  3
 800f5f2:	00a1      	lsls	r1, r4, #2
	cmd32(word);
 800f5f4:	4630      	mov	r0, r6
			((height & 0x3L) << 0)   // height         0 -  1
 800f5f6:	f005 0503 	and.w	r5, r5, #3
			((linestride & 0x3L) << 2) | // linestride     2 -  3
 800f5fa:	f001 010c 	and.w	r1, r1, #12
 800f5fe:	4329      	orrs	r1, r5
}
 800f600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800f604:	f041 5120 	orr.w	r1, r1, #671088640	; 0x28000000
 800f608:	f7ff bf64 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f60c <_ZN13FT81xRenderer11bitmap_sizeEhhhtt>:
		uint16_t width, uint16_t height) {
 800f60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f610:	461f      	mov	r7, r3
	checkfree(4);
 800f612:	6803      	ldr	r3, [r0, #0]
		uint16_t width, uint16_t height) {
 800f614:	460c      	mov	r4, r1
	checkfree(4);
 800f616:	2104      	movs	r1, #4
 800f618:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
		uint16_t width, uint16_t height) {
 800f61c:	4605      	mov	r5, r0
 800f61e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800f622:	4616      	mov	r6, r2
 800f624:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
	checkfree(4);
 800f628:	4798      	blx	r3
			((filter & 0x1L) << 20) | // filter        20 - 20
 800f62a:	0521      	lsls	r1, r4, #20
			((width & 0x1ffL) << 9) | // width          9 - 17
 800f62c:	4c0c      	ldr	r4, [pc, #48]	; (800f660 <_ZN13FT81xRenderer11bitmap_sizeEhhhtt+0x54>)
			((height & 0x1ffL) << 0)   // height         0 -  8
 800f62e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			((wrapy & 0x1L) << 18) | // wrapy         18 - 18
 800f632:	04bf      	lsls	r7, r7, #18
			((filter & 0x1L) << 20) | // filter        20 - 20
 800f634:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
			((width & 0x1ffL) << 9) | // width          9 - 17
 800f638:	ea04 2449 	and.w	r4, r4, r9, lsl #9
			((wrapy & 0x1L) << 18) | // wrapy         18 - 18
 800f63c:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
			((wrapx & 0x1L) << 19) | // wrapx         19 - 19
 800f640:	04f6      	lsls	r6, r6, #19
			((width & 0x1ffL) << 9) | // width          9 - 17
 800f642:	ea41 0108 	orr.w	r1, r1, r8
	cmd32(word);
 800f646:	4628      	mov	r0, r5
			((wrapx & 0x1L) << 19) | // wrapx         19 - 19
 800f648:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
			((width & 0x1ffL) << 9) | // width          9 - 17
 800f64c:	4321      	orrs	r1, r4
 800f64e:	4339      	orrs	r1, r7
 800f650:	4331      	orrs	r1, r6
}
 800f652:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	cmd32(word);
 800f656:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800f65a:	f7ff bf3b 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800f65e:	bf00      	nop
 800f660:	0003fe00 	.word	0x0003fe00

0800f664 <_ZN13FT81xRenderer13bitmap_size_hEhh>:
	checkfree(4);
 800f664:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_size_h(uint8_t width, uint8_t height) {
 800f666:	b570      	push	{r4, r5, r6, lr}
 800f668:	460c      	mov	r4, r1
	checkfree(4);
 800f66a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f66e:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_size_h(uint8_t width, uint8_t height) {
 800f670:	4606      	mov	r6, r0
 800f672:	4615      	mov	r5, r2
	checkfree(4);
 800f674:	4798      	blx	r3
	cI((0x29UL << 24) | (((width) & 0x3) << 2) | (((height) & 0x3) << 0));
 800f676:	00a1      	lsls	r1, r4, #2
	cmd32(word);
 800f678:	4630      	mov	r0, r6
	cI((0x29UL << 24) | (((width) & 0x3) << 2) | (((height) & 0x3) << 0));
 800f67a:	f005 0503 	and.w	r5, r5, #3
 800f67e:	f001 010c 	and.w	r1, r1, #12
 800f682:	4329      	orrs	r1, r5
}
 800f684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800f688:	f041 5124 	orr.w	r1, r1, #687865856	; 0x29000000
 800f68c:	f7ff bf22 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f690 <_ZN13FT81xRenderer13bitmap_sourceEm>:
void FT81xRenderer::bitmap_source(uint32_t addr) {
 800f690:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f692:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_source(uint32_t addr) {
 800f694:	460c      	mov	r4, r1
	checkfree(4);
 800f696:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_source(uint32_t addr) {
 800f698:	4605      	mov	r5, r0
	checkfree(4);
 800f69a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f69e:	4798      	blx	r3
	cI((0x01UL << 24) | ((addr & 0x3fffffL) << 0));
 800f6a0:	f3c4 0115 	ubfx	r1, r4, #0, #22
	cmd32(word);
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
}
 800f6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f6ae:	f7ff bf11 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f6b2 <_ZN13FT81xRenderer18bitmap_transform_aEm>:
void FT81xRenderer::bitmap_transform_a(uint32_t a) {
 800f6b2:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f6b4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_transform_a(uint32_t a) {
 800f6b6:	460c      	mov	r4, r1
	checkfree(4);
 800f6b8:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_transform_a(uint32_t a) {
 800f6ba:	4605      	mov	r5, r0
	checkfree(4);
 800f6bc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f6c0:	4798      	blx	r3
	cmd32(word);
 800f6c2:	4628      	mov	r0, r5
	cI((0x15UL << 24) | ((a & 0xffffL) << 0));
 800f6c4:	b2a1      	uxth	r1, r4
}
 800f6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f6ca:	f041 51a8 	orr.w	r1, r1, #352321536	; 0x15000000
 800f6ce:	f7ff bf01 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f6d2 <_ZN13FT81xRenderer18bitmap_transform_bEm>:
void FT81xRenderer::bitmap_transform_b(uint32_t b) {
 800f6d2:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f6d4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_transform_b(uint32_t b) {
 800f6d6:	460c      	mov	r4, r1
	checkfree(4);
 800f6d8:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_transform_b(uint32_t b) {
 800f6da:	4605      	mov	r5, r0
	checkfree(4);
 800f6dc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f6e0:	4798      	blx	r3
	cmd32(word);
 800f6e2:	4628      	mov	r0, r5
	cI((0x16UL << 24) | ((b & 0xffffL) << 0));
 800f6e4:	b2a1      	uxth	r1, r4
}
 800f6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f6ea:	f041 51b0 	orr.w	r1, r1, #369098752	; 0x16000000
 800f6ee:	f7ff bef1 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f6f2 <_ZN13FT81xRenderer18bitmap_transform_cEm>:
void FT81xRenderer::bitmap_transform_c(uint32_t c) {
 800f6f2:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f6f4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_transform_c(uint32_t c) {
 800f6f6:	460c      	mov	r4, r1
	checkfree(4);
 800f6f8:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_transform_c(uint32_t c) {
 800f6fa:	4605      	mov	r5, r0
	checkfree(4);
 800f6fc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f700:	4798      	blx	r3
	cI((0x17UL << 24) | ((c & 0xffffffL) << 0));
 800f702:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
	cmd32(word);
 800f706:	4628      	mov	r0, r5
 800f708:	f041 51b8 	orr.w	r1, r1, #385875968	; 0x17000000
}
 800f70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f710:	f7ff bee0 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f714 <_ZN13FT81xRenderer18bitmap_transform_dEm>:
void FT81xRenderer::bitmap_transform_d(uint32_t d) {
 800f714:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f716:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_transform_d(uint32_t d) {
 800f718:	460c      	mov	r4, r1
	checkfree(4);
 800f71a:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_transform_d(uint32_t d) {
 800f71c:	4605      	mov	r5, r0
	checkfree(4);
 800f71e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f722:	4798      	blx	r3
	cmd32(word);
 800f724:	4628      	mov	r0, r5
	cI((0x18UL << 24) | ((d & 0xffffL) << 0));
 800f726:	b2a1      	uxth	r1, r4
}
 800f728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f72c:	f041 51c0 	orr.w	r1, r1, #402653184	; 0x18000000
 800f730:	f7ff bed0 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f734 <_ZN13FT81xRenderer18bitmap_transform_eEm>:
void FT81xRenderer::bitmap_transform_e(uint32_t e) {
 800f734:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f736:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_transform_e(uint32_t e) {
 800f738:	460c      	mov	r4, r1
	checkfree(4);
 800f73a:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_transform_e(uint32_t e) {
 800f73c:	4605      	mov	r5, r0
	checkfree(4);
 800f73e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f742:	4798      	blx	r3
	cmd32(word);
 800f744:	4628      	mov	r0, r5
	cI((0x19UL << 24) | ((e & 0xffffL) << 0));
 800f746:	b2a1      	uxth	r1, r4
}
 800f748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f74c:	f041 51c8 	orr.w	r1, r1, #419430400	; 0x19000000
 800f750:	f7ff bec0 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f754 <_ZN13FT81xRenderer18bitmap_transform_fEm>:
void FT81xRenderer::bitmap_transform_f(uint32_t f) {
 800f754:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f756:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bitmap_transform_f(uint32_t f) {
 800f758:	460c      	mov	r4, r1
	checkfree(4);
 800f75a:	2104      	movs	r1, #4
void FT81xRenderer::bitmap_transform_f(uint32_t f) {
 800f75c:	4605      	mov	r5, r0
	checkfree(4);
 800f75e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f762:	4798      	blx	r3
	cI((0x1aUL << 24) | ((f & 0xffffffL) << 0));
 800f764:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
	cmd32(word);
 800f768:	4628      	mov	r0, r5
 800f76a:	f041 51d0 	orr.w	r1, r1, #436207616	; 0x1a000000
}
 800f76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f772:	f7ff beaf 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f776 <_ZN13FT81xRenderer10blend_funcEhh>:
	checkfree(4);
 800f776:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::blend_func(uint8_t src, uint8_t dst) {
 800f778:	b570      	push	{r4, r5, r6, lr}
 800f77a:	460c      	mov	r4, r1
	checkfree(4);
 800f77c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f780:	2104      	movs	r1, #4
void FT81xRenderer::blend_func(uint8_t src, uint8_t dst) {
 800f782:	4606      	mov	r6, r0
 800f784:	4615      	mov	r5, r2
	checkfree(4);
 800f786:	4798      	blx	r3
	cI((0x0bUL << 24) | ((src & 0x7L) << 3) | ((dst & 0x7L) << 0));
 800f788:	00e1      	lsls	r1, r4, #3
	cmd32(word);
 800f78a:	4630      	mov	r0, r6
	cI((0x0bUL << 24) | ((src & 0x7L) << 3) | ((dst & 0x7L) << 0));
 800f78c:	f005 0507 	and.w	r5, r5, #7
 800f790:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800f794:	4329      	orrs	r1, r5
}
 800f796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800f79a:	f041 6130 	orr.w	r1, r1, #184549376	; 0xb000000
 800f79e:	f7ff be99 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f7a2 <_ZN13FT81xRenderer4callEt>:
void FT81xRenderer::call(uint16_t dest) {
 800f7a2:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f7a4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::call(uint16_t dest) {
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	460d      	mov	r5, r1
	checkfree(4);
 800f7aa:	2104      	movs	r1, #4
 800f7ac:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f7b0:	4798      	blx	r3
	cmd32(word);
 800f7b2:	f045 51e8 	orr.w	r1, r5, #486539264	; 0x1d000000
 800f7b6:	4620      	mov	r0, r4
}
 800f7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f7bc:	f7ff be8a 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f7c0 <_ZN13FT81xRenderer4cellEh>:
void FT81xRenderer::cell(uint8_t cell) {
 800f7c0:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f7c2:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cell(uint8_t cell) {
 800f7c4:	460c      	mov	r4, r1
	checkfree(4);
 800f7c6:	2104      	movs	r1, #4
void FT81xRenderer::cell(uint8_t cell) {
 800f7c8:	4605      	mov	r5, r0
	checkfree(4);
 800f7ca:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f7ce:	4798      	blx	r3
	cI((0x06UL << 24) | ((cell & 0x7fL) << 0));
 800f7d0:	f004 017f 	and.w	r1, r4, #127	; 0x7f
	cmd32(word);
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	f041 61c0 	orr.w	r1, r1, #100663296	; 0x6000000
}
 800f7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f7de:	f7ff be79 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	...

0800f7e4 <_ZN13FT81xRenderer5clearEv>:
	checkfree(4);
 800f7e4:	6803      	ldr	r3, [r0, #0]
 800f7e6:	2104      	movs	r1, #4
void FT81xRenderer::clear() {
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	4604      	mov	r4, r0
	checkfree(4);
 800f7ec:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f7f0:	4798      	blx	r3
	cmd32(word);
 800f7f2:	4903      	ldr	r1, [pc, #12]	; (800f800 <_ZN13FT81xRenderer5clearEv+0x1c>)
 800f7f4:	4620      	mov	r0, r4
}
 800f7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800f7fa:	f7ff be6b 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800f7fe:	bf00      	nop
 800f800:	26000007 	.word	0x26000007

0800f804 <_ZN13FT81xRenderer8clearCSTEhhh>:
	cst <<= 1;
 800f804:	0049      	lsls	r1, r1, #1
	cst |= (stencil & 0x01);
 800f806:	f002 0201 	and.w	r2, r2, #1
	cst <<= 1;
 800f80a:	f001 0102 	and.w	r1, r1, #2
void FT81xRenderer::clearCST(uint8_t color, uint8_t stencil, uint8_t tag) {
 800f80e:	b538      	push	{r3, r4, r5, lr}
	cst |= (stencil & 0x01);
 800f810:	4311      	orrs	r1, r2
	cst |= (tag & 0x01);
 800f812:	f003 0301 	and.w	r3, r3, #1
void FT81xRenderer::clearCST(uint8_t color, uint8_t stencil, uint8_t tag) {
 800f816:	4605      	mov	r5, r0
	cst |= (tag & 0x01);
 800f818:	ea43 0441 	orr.w	r4, r3, r1, lsl #1
	checkfree(4);
 800f81c:	6803      	ldr	r3, [r0, #0]
 800f81e:	2104      	movs	r1, #4
 800f820:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f824:	4798      	blx	r3
	cmd32(word);
 800f826:	f044 5118 	orr.w	r1, r4, #637534208	; 0x26000000
 800f82a:	4628      	mov	r0, r5
}
 800f82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f830:	f7ff be50 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f834 <_ZN13FT81xRenderer13clear_color_aEh>:
void FT81xRenderer::clear_color_a(uint8_t alpha) {
 800f834:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f836:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::clear_color_a(uint8_t alpha) {
 800f838:	4604      	mov	r4, r0
 800f83a:	460d      	mov	r5, r1
	checkfree(4);
 800f83c:	2104      	movs	r1, #4
 800f83e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f842:	4798      	blx	r3
	cmd32(word);
 800f844:	f045 6170 	orr.w	r1, r5, #251658240	; 0xf000000
 800f848:	4620      	mov	r0, r4
}
 800f84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f84e:	f7ff be41 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f852 <_ZN13FT81xRenderer17clear_color_rgb32Em>:
void FT81xRenderer::clear_color_rgb32(uint32_t rgb) {
 800f852:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f854:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::clear_color_rgb32(uint32_t rgb) {
 800f856:	460c      	mov	r4, r1
	checkfree(4);
 800f858:	2104      	movs	r1, #4
void FT81xRenderer::clear_color_rgb32(uint32_t rgb) {
 800f85a:	4605      	mov	r5, r0
	checkfree(4);
 800f85c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f860:	4798      	blx	r3
	cI((0x2UL << 24) | (rgb & 0xffffffL));
 800f862:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
	cmd32(word);
 800f866:	4628      	mov	r0, r5
 800f868:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
}
 800f86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f870:	f7ff be30 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f874 <_ZN13FT81xRenderer13clear_stencilEh>:
void FT81xRenderer::clear_stencil(uint8_t stencil) {
 800f874:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f876:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::clear_stencil(uint8_t stencil) {
 800f878:	4604      	mov	r4, r0
 800f87a:	460d      	mov	r5, r1
	checkfree(4);
 800f87c:	2104      	movs	r1, #4
 800f87e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f882:	4798      	blx	r3
	cmd32(word);
 800f884:	f045 5188 	orr.w	r1, r5, #285212672	; 0x11000000
 800f888:	4620      	mov	r0, r4
}
 800f88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f88e:	f7ff be21 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f892 <_ZN13FT81xRenderer9clear_tagEh>:
void FT81xRenderer::clear_tag(uint8_t tag) {
 800f892:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f894:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::clear_tag(uint8_t tag) {
 800f896:	4604      	mov	r4, r0
 800f898:	460d      	mov	r5, r1
	checkfree(4);
 800f89a:	2104      	movs	r1, #4
 800f89c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f8a0:	4798      	blx	r3
	cmd32(word);
 800f8a2:	f045 5190 	orr.w	r1, r5, #301989888	; 0x12000000
 800f8a6:	4620      	mov	r0, r4
}
 800f8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f8ac:	f7ff be12 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f8b0 <_ZN13FT81xRenderer7color_aEh>:
void FT81xRenderer::color_a(uint8_t alpha) {
 800f8b0:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f8b2:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::color_a(uint8_t alpha) {
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	460d      	mov	r5, r1
	checkfree(4);
 800f8b8:	2104      	movs	r1, #4
 800f8ba:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f8be:	4798      	blx	r3
	cmd32(word);
 800f8c0:	f045 5180 	orr.w	r1, r5, #268435456	; 0x10000000
 800f8c4:	4620      	mov	r0, r4
}
 800f8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f8ca:	f7ff be03 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f8ce <_ZN13FT81xRenderer10color_maskEhhhh>:
		uint8_t alpha) {
 800f8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d2:	461f      	mov	r7, r3
	checkfree(4);
 800f8d4:	6803      	ldr	r3, [r0, #0]
		uint8_t alpha) {
 800f8d6:	460c      	mov	r4, r1
	checkfree(4);
 800f8d8:	2104      	movs	r1, #4
 800f8da:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
		uint8_t alpha) {
 800f8de:	4606      	mov	r6, r0
 800f8e0:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800f8e4:	4615      	mov	r5, r2
	checkfree(4);
 800f8e6:	4798      	blx	r3
	cmd32(word);
 800f8e8:	4630      	mov	r0, r6
					| (((red & 0x1) << 3) | ((green & 0x1) << 2)
 800f8ea:	00e1      	lsls	r1, r4, #3
							| ((blue & 0x1) << 1) | ((alpha & 0x1) << 0)));
 800f8ec:	f008 0801 	and.w	r8, r8, #1
 800f8f0:	007f      	lsls	r7, r7, #1
					| (((red & 0x1) << 3) | ((green & 0x1) << 2)
 800f8f2:	f001 0108 	and.w	r1, r1, #8
 800f8f6:	00ad      	lsls	r5, r5, #2
							| ((blue & 0x1) << 1) | ((alpha & 0x1) << 0)));
 800f8f8:	f007 0702 	and.w	r7, r7, #2
 800f8fc:	ea41 0108 	orr.w	r1, r1, r8
					| (((red & 0x1) << 3) | ((green & 0x1) << 2)
 800f900:	f005 0504 	and.w	r5, r5, #4
							| ((blue & 0x1) << 1) | ((alpha & 0x1) << 0)));
 800f904:	4339      	orrs	r1, r7
 800f906:	4329      	orrs	r1, r5
}
 800f908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cmd32(word);
 800f90c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f910:	f7ff bde0 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f914 <_ZN13FT81xRenderer11color_rgb32Em>:
void FT81xRenderer::color_rgb32(uint32_t rgb) {
 800f914:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f916:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::color_rgb32(uint32_t rgb) {
 800f918:	460c      	mov	r4, r1
	checkfree(4);
 800f91a:	2104      	movs	r1, #4
void FT81xRenderer::color_rgb32(uint32_t rgb) {
 800f91c:	4605      	mov	r5, r0
	checkfree(4);
 800f91e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f922:	4798      	blx	r3
	cI((0x4UL << 24) | (rgb & 0xffffffL));
 800f924:	f024 417f 	bic.w	r1, r4, #4278190080	; 0xff000000
	cmd32(word);
 800f928:	4628      	mov	r0, r5
 800f92a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
}
 800f92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f932:	f7ff bdcf 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f936 <_ZN13FT81xRenderer7displayEv>:
	checkfree(4);
 800f936:	6803      	ldr	r3, [r0, #0]
 800f938:	2104      	movs	r1, #4
void FT81xRenderer::display() {
 800f93a:	b510      	push	{r4, lr}
 800f93c:	4604      	mov	r4, r0
	checkfree(4);
 800f93e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f942:	4798      	blx	r3
	cmd32(word);
 800f944:	2100      	movs	r1, #0
 800f946:	4620      	mov	r0, r4
}
 800f948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800f94c:	f7ff bdc2 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f950 <_ZN13FT81xRenderer3endEv>:
	checkfree(4);
 800f950:	6803      	ldr	r3, [r0, #0]
 800f952:	2104      	movs	r1, #4
void FT81xRenderer::end() {
 800f954:	b510      	push	{r4, lr}
 800f956:	4604      	mov	r4, r0
	checkfree(4);
 800f958:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f95c:	4798      	blx	r3
	cmd32(word);
 800f95e:	f04f 5104 	mov.w	r1, #553648128	; 0x21000000
 800f962:	4620      	mov	r0, r4
}
 800f964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800f968:	f7ff bdb4 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f96c <_ZN13FT81xRenderer4jumpEt>:
void FT81xRenderer::jump(uint16_t dest) {
 800f96c:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f96e:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::jump(uint16_t dest) {
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
	checkfree(4);
 800f974:	2104      	movs	r1, #4
 800f976:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f97a:	4798      	blx	r3
	cmd32(word);
 800f97c:	f045 51f0 	orr.w	r1, r5, #503316480	; 0x1e000000
 800f980:	4620      	mov	r0, r4
}
 800f982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f986:	f7ff bda5 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f98a <_ZN13FT81xRenderer10line_widthEt>:
void FT81xRenderer::line_width(uint16_t width) {
 800f98a:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f98c:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::line_width(uint16_t width) {
 800f98e:	460c      	mov	r4, r1
	checkfree(4);
 800f990:	2104      	movs	r1, #4
void FT81xRenderer::line_width(uint16_t width) {
 800f992:	4605      	mov	r5, r0
	checkfree(4);
 800f994:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f998:	4798      	blx	r3
	cI((0x0eUL << 24) | (width & 0xfff));
 800f99a:	f3c4 010b 	ubfx	r1, r4, #0, #12
	cmd32(word);
 800f99e:	4628      	mov	r0, r5
 800f9a0:	f041 6160 	orr.w	r1, r1, #234881024	; 0xe000000
}
 800f9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f9a8:	f7ff bd94 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f9ac <_ZN13FT81xRenderer5macroEh>:
void FT81xRenderer::macro(uint8_t macro) {
 800f9ac:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f9ae:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::macro(uint8_t macro) {
 800f9b0:	460c      	mov	r4, r1
	checkfree(4);
 800f9b2:	2104      	movs	r1, #4
void FT81xRenderer::macro(uint8_t macro) {
 800f9b4:	4605      	mov	r5, r0
	checkfree(4);
 800f9b6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f9ba:	4798      	blx	r3
	cI((0x25UL << 24) | (macro & 0x1L));
 800f9bc:	f004 0101 	and.w	r1, r4, #1
	cmd32(word);
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f041 5114 	orr.w	r1, r1, #620756992	; 0x25000000
}
 800f9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800f9ca:	f7ff bd83 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f9ce <_ZN13FT81xRenderer3nopEv>:
	checkfree(4);
 800f9ce:	6803      	ldr	r3, [r0, #0]
 800f9d0:	2104      	movs	r1, #4
void FT81xRenderer::nop() {
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	4604      	mov	r4, r0
	checkfree(4);
 800f9d6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f9da:	4798      	blx	r3
	cmd32(word);
 800f9dc:	f04f 5134 	mov.w	r1, #754974720	; 0x2d000000
 800f9e0:	4620      	mov	r0, r4
}
 800f9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800f9e6:	f7ff bd75 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800f9ea <_ZN13FT81xRenderer14palette_sourceEm>:
void FT81xRenderer::palette_source(uint32_t addr) {
 800f9ea:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800f9ec:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::palette_source(uint32_t addr) {
 800f9ee:	460c      	mov	r4, r1
	checkfree(4);
 800f9f0:	2104      	movs	r1, #4
void FT81xRenderer::palette_source(uint32_t addr) {
 800f9f2:	4605      	mov	r5, r0
	checkfree(4);
 800f9f4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f9f8:	4798      	blx	r3
	cI((0x2aUL << 24) | ((addr) & 0x3fffffUL));
 800f9fa:	f3c4 0115 	ubfx	r1, r4, #0, #22
	cmd32(word);
 800f9fe:	4628      	mov	r0, r5
 800fa00:	f041 5128 	orr.w	r1, r1, #704643072	; 0x2a000000
}
 800fa04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fa08:	f7ff bd64 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fa0c <_ZN13FT81xRenderer10point_sizeEt>:
void FT81xRenderer::point_size(uint16_t size) {
 800fa0c:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fa0e:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::point_size(uint16_t size) {
 800fa10:	460c      	mov	r4, r1
	checkfree(4);
 800fa12:	2104      	movs	r1, #4
void FT81xRenderer::point_size(uint16_t size) {
 800fa14:	4605      	mov	r5, r0
	checkfree(4);
 800fa16:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fa1a:	4798      	blx	r3
	cI((0x0dUL << 24) | ((size & 0x1fffL) << 0));
 800fa1c:	f3c4 010c 	ubfx	r1, r4, #0, #13
	cmd32(word);
 800fa20:	4628      	mov	r0, r5
 800fa22:	f041 6150 	orr.w	r1, r1, #218103808	; 0xd000000
}
 800fa26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fa2a:	f7ff bd53 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fa2e <_ZN13FT81xRenderer15restore_contextEv>:
	checkfree(4);
 800fa2e:	6803      	ldr	r3, [r0, #0]
 800fa30:	2104      	movs	r1, #4
void FT81xRenderer::restore_context() {
 800fa32:	b510      	push	{r4, lr}
 800fa34:	4604      	mov	r4, r0
	checkfree(4);
 800fa36:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fa3a:	4798      	blx	r3
	cmd32(word);
 800fa3c:	f04f 510c 	mov.w	r1, #587202560	; 0x23000000
 800fa40:	4620      	mov	r0, r4
}
 800fa42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800fa46:	f7ff bd45 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fa4a <_ZN13FT81xRenderer11return_callEv>:
	checkfree(4);
 800fa4a:	6803      	ldr	r3, [r0, #0]
 800fa4c:	2104      	movs	r1, #4
void FT81xRenderer::return_call() {
 800fa4e:	b510      	push	{r4, lr}
 800fa50:	4604      	mov	r4, r0
	checkfree(4);
 800fa52:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fa56:	4798      	blx	r3
	cmd32(word);
 800fa58:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 800fa5c:	4620      	mov	r0, r4
}
 800fa5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800fa62:	f7ff bd37 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fa66 <_ZN13FT81xRenderer12save_contextEv>:
	checkfree(4);
 800fa66:	6803      	ldr	r3, [r0, #0]
 800fa68:	2104      	movs	r1, #4
void FT81xRenderer::save_context() {
 800fa6a:	b510      	push	{r4, lr}
 800fa6c:	4604      	mov	r4, r0
	checkfree(4);
 800fa6e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fa72:	4798      	blx	r3
	cmd32(word);
 800fa74:	f04f 5108 	mov.w	r1, #570425344	; 0x22000000
 800fa78:	4620      	mov	r0, r4
}
 800fa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(word);
 800fa7e:	f7ff bd29 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	...

0800fa84 <_ZN13FT81xRenderer12scissor_sizeEtt>:
	checkfree(4);
 800fa84:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::scissor_size(uint16_t width, uint16_t height) {
 800fa86:	b570      	push	{r4, r5, r6, lr}
	checkfree(4);
 800fa88:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::scissor_size(uint16_t width, uint16_t height) {
 800fa8c:	460e      	mov	r6, r1
	checkfree(4);
 800fa8e:	2104      	movs	r1, #4
void FT81xRenderer::scissor_size(uint16_t width, uint16_t height) {
 800fa90:	4605      	mov	r5, r0
 800fa92:	4614      	mov	r4, r2
	checkfree(4);
 800fa94:	4798      	blx	r3
			(0x1cUL << 24) | ((width & 0xfffL) << 12)
 800fa96:	4906      	ldr	r1, [pc, #24]	; (800fab0 <_ZN13FT81xRenderer12scissor_sizeEtt+0x2c>)
	cmd32(word);
 800fa98:	4628      	mov	r0, r5
					| ((height & 0xfffL) << 0));
 800fa9a:	f3c4 040b 	ubfx	r4, r4, #0, #12
			(0x1cUL << 24) | ((width & 0xfffL) << 12)
 800fa9e:	ea01 3106 	and.w	r1, r1, r6, lsl #12
					| ((height & 0xfffL) << 0));
 800faa2:	4321      	orrs	r1, r4
}
 800faa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800faa8:	f041 51e0 	orr.w	r1, r1, #469762048	; 0x1c000000
 800faac:	f7ff bd12 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fab0:	00fff000 	.word	0x00fff000

0800fab4 <_ZN13FT81xRenderer10scissor_xyEtt>:
	checkfree(4);
 800fab4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::scissor_xy(uint16_t x, uint16_t y) {
 800fab6:	b570      	push	{r4, r5, r6, lr}
	checkfree(4);
 800fab8:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::scissor_xy(uint16_t x, uint16_t y) {
 800fabc:	460e      	mov	r6, r1
	checkfree(4);
 800fabe:	2104      	movs	r1, #4
void FT81xRenderer::scissor_xy(uint16_t x, uint16_t y) {
 800fac0:	4605      	mov	r5, r0
 800fac2:	4614      	mov	r4, r2
	checkfree(4);
 800fac4:	4798      	blx	r3
	cI((0x1bUL << 24) | ((x & 0x7ffL) << 11) | ((y & 0x7ffL) << 0));
 800fac6:	4906      	ldr	r1, [pc, #24]	; (800fae0 <_ZN13FT81xRenderer10scissor_xyEtt+0x2c>)
	cmd32(word);
 800fac8:	4628      	mov	r0, r5
	cI((0x1bUL << 24) | ((x & 0x7ffL) << 11) | ((y & 0x7ffL) << 0));
 800faca:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800face:	ea01 21c6 	and.w	r1, r1, r6, lsl #11
 800fad2:	4321      	orrs	r1, r4
}
 800fad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fad8:	f041 51d8 	orr.w	r1, r1, #452984832	; 0x1b000000
 800fadc:	f7ff bcfa 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fae0:	003ff800 	.word	0x003ff800

0800fae4 <_ZN13FT81xRenderer12stencil_funcEhhh>:
void FT81xRenderer::stencil_func(uint8_t func, uint8_t ref, uint8_t mask) {
 800fae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae6:	460c      	mov	r4, r1
 800fae8:	461f      	mov	r7, r3
	checkfree(4);
 800faea:	6803      	ldr	r3, [r0, #0]
 800faec:	2104      	movs	r1, #4
			(0x0aUL << 24) | ((func & 0xfL) << 16) | ((ref & 0xffL) << 8)
 800faee:	0424      	lsls	r4, r4, #16
void FT81xRenderer::stencil_func(uint8_t func, uint8_t ref, uint8_t mask) {
 800faf0:	4605      	mov	r5, r0
	checkfree(4);
 800faf2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::stencil_func(uint8_t func, uint8_t ref, uint8_t mask) {
 800faf6:	4616      	mov	r6, r2
			(0x0aUL << 24) | ((func & 0xfL) << 16) | ((ref & 0xffL) << 8)
 800faf8:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
	checkfree(4);
 800fafc:	4798      	blx	r3
	cmd32(word);
 800fafe:	4628      	mov	r0, r5
					| ((mask & 0xffL) << 0));
 800fb00:	ea44 0307 	orr.w	r3, r4, r7
 800fb04:	ea43 2106 	orr.w	r1, r3, r6, lsl #8
}
 800fb08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	cmd32(word);
 800fb0c:	f041 6120 	orr.w	r1, r1, #167772160	; 0xa000000
 800fb10:	f7ff bce0 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fb14 <_ZN13FT81xRenderer12stencil_maskEh>:
void FT81xRenderer::stencil_mask(uint8_t mask) {
 800fb14:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fb16:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::stencil_mask(uint8_t mask) {
 800fb18:	4604      	mov	r4, r0
 800fb1a:	460d      	mov	r5, r1
	checkfree(4);
 800fb1c:	2104      	movs	r1, #4
 800fb1e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fb22:	4798      	blx	r3
	cmd32(word);
 800fb24:	f045 5198 	orr.w	r1, r5, #318767104	; 0x13000000
 800fb28:	4620      	mov	r0, r4
}
 800fb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fb2e:	f7ff bcd1 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fb32 <_ZN13FT81xRenderer10stencil_opEhh>:
	checkfree(4);
 800fb32:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::stencil_op(uint8_t sfail, uint8_t spass) {
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	460c      	mov	r4, r1
	checkfree(4);
 800fb38:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fb3c:	2104      	movs	r1, #4
void FT81xRenderer::stencil_op(uint8_t sfail, uint8_t spass) {
 800fb3e:	4606      	mov	r6, r0
 800fb40:	4615      	mov	r5, r2
	checkfree(4);
 800fb42:	4798      	blx	r3
	cI((0x0cUL << 24) | ((sfail & 0x7L) << 3) | ((spass & 0x7L) << 0));
 800fb44:	00e1      	lsls	r1, r4, #3
	cmd32(word);
 800fb46:	4630      	mov	r0, r6
	cI((0x0cUL << 24) | ((sfail & 0x7L) << 3) | ((spass & 0x7L) << 0));
 800fb48:	f005 0507 	and.w	r5, r5, #7
 800fb4c:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800fb50:	4329      	orrs	r1, r5
}
 800fb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fb56:	f041 6140 	orr.w	r1, r1, #201326592	; 0xc000000
 800fb5a:	f7ff bcbb 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fb5e <_ZN13FT81xRenderer3tagEh>:
void FT81xRenderer::tag(uint8_t s) {
 800fb5e:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fb60:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::tag(uint8_t s) {
 800fb62:	4604      	mov	r4, r0
 800fb64:	460d      	mov	r5, r1
	checkfree(4);
 800fb66:	2104      	movs	r1, #4
 800fb68:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fb6c:	4798      	blx	r3
	cmd32(word);
 800fb6e:	f045 7140 	orr.w	r1, r5, #50331648	; 0x3000000
 800fb72:	4620      	mov	r0, r4
}
 800fb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fb78:	f7ff bcac 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fb7c <_ZN13FT81xRenderer8tag_maskEh>:
void FT81xRenderer::tag_mask(uint8_t mask) {
 800fb7c:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fb7e:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::tag_mask(uint8_t mask) {
 800fb80:	460c      	mov	r4, r1
	checkfree(4);
 800fb82:	2104      	movs	r1, #4
void FT81xRenderer::tag_mask(uint8_t mask) {
 800fb84:	4605      	mov	r5, r0
	checkfree(4);
 800fb86:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fb8a:	4798      	blx	r3
	cI((0x14UL << 24) | ((mask & 1L) << 0));
 800fb8c:	f004 0101 	and.w	r1, r4, #1
	cmd32(word);
 800fb90:	4628      	mov	r0, r5
 800fb92:	f041 51a0 	orr.w	r1, r1, #335544320	; 0x14000000
}
 800fb96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fb9a:	f7ff bc9b 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	...

0800fba0 <_ZN13FT81xRenderer8vertex2fEss>:
	checkfree(4);
 800fba0:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::vertex2f(int16_t x, int16_t y) {
 800fba2:	b570      	push	{r4, r5, r6, lr}
	checkfree(4);
 800fba4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::vertex2f(int16_t x, int16_t y) {
 800fba8:	460e      	mov	r6, r1
	checkfree(4);
 800fbaa:	2104      	movs	r1, #4
void FT81xRenderer::vertex2f(int16_t x, int16_t y) {
 800fbac:	4605      	mov	r5, r0
 800fbae:	4614      	mov	r4, r2
	checkfree(4);
 800fbb0:	4798      	blx	r3
	cI((0x1UL << 30) | ((x & 0x7fffL) << 15) | ((y & 0x7fffL) << 0));
 800fbb2:	4906      	ldr	r1, [pc, #24]	; (800fbcc <_ZN13FT81xRenderer8vertex2fEss+0x2c>)
	cmd32(word);
 800fbb4:	4628      	mov	r0, r5
	cI((0x1UL << 30) | ((x & 0x7fffL) << 15) | ((y & 0x7fffL) << 0));
 800fbb6:	f3c4 040e 	ubfx	r4, r4, #0, #15
 800fbba:	ea01 31c6 	and.w	r1, r1, r6, lsl #15
 800fbbe:	4321      	orrs	r1, r4
}
 800fbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fbc4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800fbc8:	f7ff bc84 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fbcc:	3fff8000 	.word	0x3fff8000

0800fbd0 <_ZN13FT81xRenderer9vertex2iiEsshh>:
		uint8_t cell) {
 800fbd0:	e92d 43e0 	stmdb	sp!, {r5, r6, r7, r8, r9, lr}
 800fbd4:	461d      	mov	r5, r3
	checkfree(4);
 800fbd6:	6803      	ldr	r3, [r0, #0]
		uint8_t cell) {
 800fbd8:	4689      	mov	r9, r1
	checkfree(4);
 800fbda:	2104      	movs	r1, #4
 800fbdc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
		uint8_t cell) {
 800fbe0:	4617      	mov	r7, r2
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	f89d 8018 	ldrb.w	r8, [sp, #24]
	checkfree(4);
 800fbe8:	4798      	blx	r3
			((x & 0x1ffL) << 21) | // x             21 - 29
 800fbea:	490b      	ldr	r1, [pc, #44]	; (800fc18 <_ZN13FT81xRenderer9vertex2iiEsshh+0x48>)
			((cell & 0x7fL) << 0)   // cell           0 -  6
 800fbec:	f008 087f 	and.w	r8, r8, #127	; 0x7f
			((handle & 0x1fL) << 7) | // handle         7 - 11
 800fbf0:	01ed      	lsls	r5, r5, #7
			((x & 0x1ffL) << 21) | // x             21 - 29
 800fbf2:	ea01 5149 	and.w	r1, r1, r9, lsl #21
			((y & 0x1ffL) << 12) | // y             12 - 20
 800fbf6:	4a09      	ldr	r2, [pc, #36]	; (800fc1c <_ZN13FT81xRenderer9vertex2iiEsshh+0x4c>)
			((handle & 0x1fL) << 7) | // handle         7 - 11
 800fbf8:	f405 6578 	and.w	r5, r5, #3968	; 0xf80
	cmd32(word);
 800fbfc:	4630      	mov	r0, r6
			((handle & 0x1fL) << 7) | // handle         7 - 11
 800fbfe:	ea41 0108 	orr.w	r1, r1, r8
			((y & 0x1ffL) << 12) | // y             12 - 20
 800fc02:	ea02 3207 	and.w	r2, r2, r7, lsl #12
			((handle & 0x1fL) << 7) | // handle         7 - 11
 800fc06:	4329      	orrs	r1, r5
 800fc08:	4311      	orrs	r1, r2
}
 800fc0a:	e8bd 43e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, lr}
	cmd32(word);
 800fc0e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800fc12:	f7ff bc5f 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fc16:	bf00      	nop
 800fc18:	3fe00000 	.word	0x3fe00000
 800fc1c:	001ff000 	.word	0x001ff000

0800fc20 <_ZN13FT81xRenderer13vertex_formatEa>:
void FT81xRenderer::vertex_format(int8_t frac) {
 800fc20:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fc22:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::vertex_format(int8_t frac) {
 800fc24:	460c      	mov	r4, r1
	checkfree(4);
 800fc26:	2104      	movs	r1, #4
void FT81xRenderer::vertex_format(int8_t frac) {
 800fc28:	4605      	mov	r5, r0
	checkfree(4);
 800fc2a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fc2e:	4798      	blx	r3
	cI((0x27UL << 24) | (((frac) & 0x7) << 0));
 800fc30:	f004 0107 	and.w	r1, r4, #7
	cmd32(word);
 800fc34:	4628      	mov	r0, r5
 800fc36:	f041 511c 	orr.w	r1, r1, #654311424	; 0x27000000
}
 800fc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fc3e:	f7ff bc49 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fc42 <_ZN13FT81xRenderer18vertex_translate_xEm>:
void FT81xRenderer::vertex_translate_x(uint32_t x) {
 800fc42:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fc44:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::vertex_translate_x(uint32_t x) {
 800fc46:	460c      	mov	r4, r1
	checkfree(4);
 800fc48:	2104      	movs	r1, #4
void FT81xRenderer::vertex_translate_x(uint32_t x) {
 800fc4a:	4605      	mov	r5, r0
	checkfree(4);
 800fc4c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fc50:	4798      	blx	r3
	cI((0x2bUL << 24) | (((x) & 0x1ffffUL) << 0));
 800fc52:	f3c4 0110 	ubfx	r1, r4, #0, #17
	cmd32(word);
 800fc56:	4628      	mov	r0, r5
 800fc58:	f041 512c 	orr.w	r1, r1, #721420288	; 0x2b000000
}
 800fc5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fc60:	f7ff bc38 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fc64 <_ZN13FT81xRenderer18vertex_translate_yEm>:
void FT81xRenderer::vertex_translate_y(uint32_t y) {
 800fc64:	b538      	push	{r3, r4, r5, lr}
	checkfree(4);
 800fc66:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::vertex_translate_y(uint32_t y) {
 800fc68:	460c      	mov	r4, r1
	checkfree(4);
 800fc6a:	2104      	movs	r1, #4
void FT81xRenderer::vertex_translate_y(uint32_t y) {
 800fc6c:	4605      	mov	r5, r0
	checkfree(4);
 800fc6e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fc72:	4798      	blx	r3
	cI((0x2cUL << 24) | (((y) & 0x1ffffUL) << 0));
 800fc74:	f3c4 0110 	ubfx	r1, r4, #0, #17
	cmd32(word);
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f041 5130 	orr.w	r1, r1, #738197504	; 0x2c000000
}
 800fc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fc82:	f7ff bc27 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fc86 <_ZN13FT81xRenderer11cmd_dlstartEv>:
	checkfree(4);
 800fc86:	6803      	ldr	r3, [r0, #0]
 800fc88:	2104      	movs	r1, #4
void FT81xRenderer::cmd_dlstart() {
 800fc8a:	b510      	push	{r4, lr}
 800fc8c:	4604      	mov	r4, r0
	checkfree(4);
 800fc8e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fc92:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fc94:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800fc98:	4620      	mov	r0, r4
}
 800fc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 800fc9e:	f7ff bc19 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fca2 <_ZN13FT81xRenderer8cmd_swapEv>:
	checkfree(4);
 800fca2:	6803      	ldr	r3, [r0, #0]
 800fca4:	2104      	movs	r1, #4
void FT81xRenderer::cmd_swap() {
 800fca6:	b510      	push	{r4, lr}
 800fca8:	4604      	mov	r4, r0
	checkfree(4);
 800fcaa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fcae:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fcb0:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
 800fcb4:	4620      	mov	r0, r4
}
 800fcb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 800fcba:	f7ff bc0b 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fcbe <_ZN13FT81xRenderer13cmd_coldstartEv>:
	checkfree(4);
 800fcbe:	6803      	ldr	r3, [r0, #0]
 800fcc0:	2104      	movs	r1, #4
void FT81xRenderer::cmd_coldstart() {
 800fcc2:	b510      	push	{r4, lr}
 800fcc4:	4604      	mov	r4, r0
	checkfree(4);
 800fcc6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fcca:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fccc:	f06f 01cd 	mvn.w	r1, #205	; 0xcd
 800fcd0:	4620      	mov	r0, r4
}
 800fcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 800fcd6:	f7ff bbfd 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fcda <_ZN13FT81xRenderer13cmd_interruptEm>:
void FT81xRenderer::cmd_interrupt(uint32_t ms) {
 800fcda:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800fcdc:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_interrupt(uint32_t ms) {
 800fcde:	4604      	mov	r4, r0
 800fce0:	460d      	mov	r5, r1
	checkfree(8);
 800fce2:	2108      	movs	r1, #8
 800fce4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fce8:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fcea:	4620      	mov	r0, r4
 800fcec:	f06f 01fd 	mvn.w	r1, #253	; 0xfd
 800fcf0:	f7ff fbf0 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	4620      	mov	r0, r4
}
 800fcf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fcfc:	f7ff bbea 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fd00 <_ZN13FT81xRenderer10cmd_appendEmm>:
	checkfree(12);
 800fd00:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_append(uint32_t ptr, uint32_t num) {
 800fd02:	b570      	push	{r4, r5, r6, lr}
 800fd04:	4604      	mov	r4, r0
 800fd06:	460e      	mov	r6, r1
	checkfree(12);
 800fd08:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fd0c:	210c      	movs	r1, #12
void FT81xRenderer::cmd_append(uint32_t ptr, uint32_t num) {
 800fd0e:	4615      	mov	r5, r2
	checkfree(12);
 800fd10:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fd12:	4620      	mov	r0, r4
 800fd14:	f06f 01e1 	mvn.w	r1, #225	; 0xe1
 800fd18:	f7ff fbdc 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fd1c:	4631      	mov	r1, r6
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f7ff fbd8 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fd24:	4629      	mov	r1, r5
 800fd26:	4620      	mov	r0, r4
}
 800fd28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fd2c:	f7ff bbd2 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fd30 <_ZN13FT81xRenderer11cmd_regreadEmPm>:
	checkfree(8);
 800fd30:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_regread(uint32_t ptr, uint32_t *result) {
 800fd32:	b570      	push	{r4, r5, r6, lr}
 800fd34:	4604      	mov	r4, r0
	checkfree(8);
 800fd36:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::cmd_regread(uint32_t ptr, uint32_t *result) {
 800fd3a:	460d      	mov	r5, r1
	checkfree(8);
 800fd3c:	2108      	movs	r1, #8
void FT81xRenderer::cmd_regread(uint32_t ptr, uint32_t *result) {
 800fd3e:	4616      	mov	r6, r2
	checkfree(8);
 800fd40:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fd42:	f06f 01e6 	mvn.w	r1, #230	; 0xe6
 800fd46:	4620      	mov	r0, r4
 800fd48:	f7ff fbc4 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f7ff fbc0 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 800fd54:	8a25      	ldrh	r5, [r4, #16]
	cmd32(word);
 800fd56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fd5a:	4620      	mov	r0, r4
	return RAM_CMD + (fifo_wp & 0xffc);
 800fd5c:	f025 0503 	bic.w	r5, r5, #3
	cmd32(word);
 800fd60:	f7ff fbb8 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 800fd64:	052d      	lsls	r5, r5, #20
 800fd66:	0d2d      	lsrs	r5, r5, #20
 800fd68:	f505 1542 	add.w	r5, r5, #3178496	; 0x308000
	*result = r;
 800fd6c:	6035      	str	r5, [r6, #0]
}
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}

0800fd70 <_ZN13FT81xRenderer12cmd_memwriteEmm>:
	checkfree(12);
 800fd70:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_memwrite(uint32_t ptr, uint32_t num) {
 800fd72:	b570      	push	{r4, r5, r6, lr}
 800fd74:	4604      	mov	r4, r0
 800fd76:	460e      	mov	r6, r1
	checkfree(12);
 800fd78:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fd7c:	210c      	movs	r1, #12
void FT81xRenderer::cmd_memwrite(uint32_t ptr, uint32_t num) {
 800fd7e:	4615      	mov	r5, r2
	checkfree(12);
 800fd80:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fd82:	4620      	mov	r0, r4
 800fd84:	f06f 01e5 	mvn.w	r1, #229	; 0xe5
 800fd88:	f7ff fba4 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f7ff fba0 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fd94:	4629      	mov	r1, r5
 800fd96:	4620      	mov	r0, r4
}
 800fd98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fd9c:	f7ff bb9a 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fda0 <_ZN13FT81xRenderer11cmd_inflateEm>:
void FT81xRenderer::cmd_inflate(uint32_t ptr) {
 800fda0:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800fda2:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_inflate(uint32_t ptr) {
 800fda4:	4604      	mov	r4, r0
 800fda6:	460d      	mov	r5, r1
	checkfree(8);
 800fda8:	2108      	movs	r1, #8
 800fdaa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fdae:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f06f 01dd 	mvn.w	r1, #221	; 0xdd
 800fdb6:	f7ff fb8d 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fdba:	4629      	mov	r1, r5
 800fdbc:	4620      	mov	r0, r4
}
 800fdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fdc2:	f7ff bb87 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fdc6 <_ZN13FT81xRenderer13cmd_loadimageEmm>:
	checkfree(12);
 800fdc6:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_loadimage(uint32_t ptr, uint32_t options) {
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4604      	mov	r4, r0
 800fdcc:	460e      	mov	r6, r1
	checkfree(12);
 800fdce:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fdd2:	210c      	movs	r1, #12
void FT81xRenderer::cmd_loadimage(uint32_t ptr, uint32_t options) {
 800fdd4:	4615      	mov	r5, r2
	checkfree(12);
 800fdd6:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f06f 01db 	mvn.w	r1, #219	; 0xdb
 800fdde:	f7ff fb79 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fde2:	4631      	mov	r1, r6
 800fde4:	4620      	mov	r0, r4
 800fde6:	f7ff fb75 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fdea:	4629      	mov	r1, r5
 800fdec:	4620      	mov	r0, r4
}
 800fdee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fdf2:	f7ff bb6f 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fdf6 <_ZN13FT81xRenderer13cmd_mediafifoEmm>:
	mf_wp = 0;
 800fdf6:	2300      	movs	r3, #0
void FT81xRenderer::cmd_mediafifo(uint32_t base, uint32_t size) {
 800fdf8:	b570      	push	{r4, r5, r6, lr}
	mf_size = size;
 800fdfa:	e9c0 3206 	strd	r3, r2, [r0, #24]
	checkfree(12);
 800fdfe:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_mediafifo(uint32_t base, uint32_t size) {
 800fe00:	4604      	mov	r4, r0
 800fe02:	460e      	mov	r6, r1
	mf_base = base;
 800fe04:	6201      	str	r1, [r0, #32]
	checkfree(12);
 800fe06:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fe0a:	210c      	movs	r1, #12
void FT81xRenderer::cmd_mediafifo(uint32_t base, uint32_t size) {
 800fe0c:	4615      	mov	r5, r2
	checkfree(12);
 800fe0e:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fe10:	4620      	mov	r0, r4
 800fe12:	f06f 01c6 	mvn.w	r1, #198	; 0xc6
 800fe16:	f7ff fb5d 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fe1a:	4631      	mov	r1, r6
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f7ff fb59 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fe22:	4629      	mov	r1, r5
 800fe24:	4620      	mov	r0, r4
}
 800fe26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fe2a:	f7ff bb53 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fe2e <_ZN13FT81xRenderer13cmd_playvideoEm>:
void FT81xRenderer::cmd_playvideo(uint32_t options) {
 800fe2e:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800fe30:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_playvideo(uint32_t options) {
 800fe32:	4604      	mov	r4, r0
 800fe34:	460d      	mov	r5, r1
	checkfree(8);
 800fe36:	2108      	movs	r1, #8
 800fe38:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fe3c:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f06f 01c5 	mvn.w	r1, #197	; 0xc5
 800fe44:	f7ff fb46 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fe48:	4629      	mov	r1, r5
 800fe4a:	4620      	mov	r0, r4
}
 800fe4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fe50:	f7ff bb40 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fe54 <_ZN13FT81xRenderer14cmd_videostartEv>:
	checkfree(4);
 800fe54:	6803      	ldr	r3, [r0, #0]
 800fe56:	2104      	movs	r1, #4
void FT81xRenderer::cmd_videostart() {
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	4604      	mov	r4, r0
	checkfree(4);
 800fe5c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fe60:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fe62:	f06f 01bf 	mvn.w	r1, #191	; 0xbf
 800fe66:	4620      	mov	r0, r4
}
 800fe68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 800fe6c:	f7ff bb32 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fe70 <_ZN13FT81xRenderer14cmd_videoframeEmm>:
	checkfree(12);
 800fe70:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_videoframe(uint32_t dst, uint32_t ptr) {
 800fe72:	b570      	push	{r4, r5, r6, lr}
 800fe74:	4604      	mov	r4, r0
 800fe76:	460e      	mov	r6, r1
	checkfree(12);
 800fe78:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fe7c:	210c      	movs	r1, #12
void FT81xRenderer::cmd_videoframe(uint32_t dst, uint32_t ptr) {
 800fe7e:	4615      	mov	r5, r2
	checkfree(12);
 800fe80:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fe82:	4620      	mov	r0, r4
 800fe84:	f06f 01bf 	mvn.w	r1, #191	; 0xbf
 800fe88:	f7ff fb24 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800fe8c:	4631      	mov	r1, r6
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7ff fb20 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fe94:	4629      	mov	r1, r5
 800fe96:	4620      	mov	r0, r4
}
 800fe98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800fe9c:	f7ff bb1a 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fea0 <_ZN13FT81xRenderer10cmd_memcrcEmm>:
	checkfree(16);
 800fea0:	6803      	ldr	r3, [r0, #0]
uint32_t FT81xRenderer::cmd_memcrc(uint32_t ptr, uint32_t num) {
 800fea2:	b570      	push	{r4, r5, r6, lr}
 800fea4:	4604      	mov	r4, r0
	checkfree(16);
 800fea6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
uint32_t FT81xRenderer::cmd_memcrc(uint32_t ptr, uint32_t num) {
 800feaa:	460e      	mov	r6, r1
	checkfree(16);
 800feac:	2110      	movs	r1, #16
uint32_t FT81xRenderer::cmd_memcrc(uint32_t ptr, uint32_t num) {
 800feae:	4615      	mov	r5, r2
	checkfree(16);
 800feb0:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800feb2:	4620      	mov	r0, r4
 800feb4:	f06f 01e7 	mvn.w	r1, #231	; 0xe7
 800feb8:	f7ff fb0c 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800febc:	4631      	mov	r1, r6
 800febe:	4620      	mov	r0, r4
 800fec0:	f7ff fb08 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800fec4:	4629      	mov	r1, r5
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7ff fb04 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 800fecc:	8a25      	ldrh	r5, [r4, #16]
	cmd32(word);
 800fece:	4620      	mov	r0, r4
 800fed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	return RAM_CMD + (fifo_wp & 0xffc);
 800fed4:	f025 0503 	bic.w	r5, r5, #3
	cmd32(word);
 800fed8:	f7ff fafc 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 800fedc:	052d      	lsls	r5, r5, #20
 800fede:	0d2d      	lsrs	r5, r5, #20
 800fee0:	f505 1542 	add.w	r5, r5, #3178496	; 0x308000
}
 800fee4:	4628      	mov	r0, r5
 800fee6:	bd70      	pop	{r4, r5, r6, pc}

0800fee8 <_ZN13FT81xRenderer11cmd_memzeroEmm>:
	checkfree(12);
 800fee8:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_memzero(uint32_t ptr, uint32_t num) {
 800feea:	b570      	push	{r4, r5, r6, lr}
 800feec:	4604      	mov	r4, r0
 800feee:	460e      	mov	r6, r1
	checkfree(12);
 800fef0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fef4:	210c      	movs	r1, #12
void FT81xRenderer::cmd_memzero(uint32_t ptr, uint32_t num) {
 800fef6:	4615      	mov	r5, r2
	checkfree(12);
 800fef8:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800fefa:	4620      	mov	r0, r4
 800fefc:	f06f 01e3 	mvn.w	r1, #227	; 0xe3
 800ff00:	f7ff fae8 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800ff04:	4631      	mov	r1, r6
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7ff fae4 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	4620      	mov	r0, r4
}
 800ff10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800ff14:	f7ff bade 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800ff18 <_ZN13FT81xRenderer10cmd_memsetEmmm>:
void FT81xRenderer::cmd_memset(uint32_t ptr, uint32_t value, uint32_t num) {
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	461d      	mov	r5, r3
	checkfree(12);
 800ff1c:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_memset(uint32_t ptr, uint32_t value, uint32_t num) {
 800ff1e:	4604      	mov	r4, r0
 800ff20:	4616      	mov	r6, r2
	checkfree(12);
 800ff22:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ff26:	210c      	movs	r1, #12
 800ff28:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f06f 01e4 	mvn.w	r1, #228	; 0xe4
 800ff30:	f7ff fad0 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800ff34:	4631      	mov	r1, r6
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7ff facc 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4620      	mov	r0, r4
}
 800ff40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 800ff44:	f7ff bac6 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800ff48 <_ZN13FT81xRenderer10cmd_memcpyEmmm>:
void FT81xRenderer::cmd_memcpy(uint32_t dest, uint32_t src, uint32_t num) {
 800ff48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff4a:	461d      	mov	r5, r3
	checkfree(16);
 800ff4c:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_memcpy(uint32_t dest, uint32_t src, uint32_t num) {
 800ff4e:	4604      	mov	r4, r0
 800ff50:	460f      	mov	r7, r1
	checkfree(16);
 800ff52:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ff56:	2110      	movs	r1, #16
void FT81xRenderer::cmd_memcpy(uint32_t dest, uint32_t src, uint32_t num) {
 800ff58:	4616      	mov	r6, r2
	checkfree(16);
 800ff5a:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f06f 01e2 	mvn.w	r1, #226	; 0xe2
 800ff62:	f7ff fab7 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800ff66:	4639      	mov	r1, r7
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f7ff fab3 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800ff6e:	4631      	mov	r1, r6
 800ff70:	4620      	mov	r0, r4
 800ff72:	f7ff faaf 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 800ff76:	4629      	mov	r1, r5
 800ff78:	4620      	mov	r0, r4
}
 800ff7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	cmd32(word);
 800ff7e:	f7ff baa9 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800ff82 <_ZN13FT81xRenderer13fgcolor_rgb32Em>:
void FT81xRenderer::fgcolor_rgb32(uint32_t rgb) {
 800ff82:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800ff84:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::fgcolor_rgb32(uint32_t rgb) {
 800ff86:	4604      	mov	r4, r0
 800ff88:	460d      	mov	r5, r1
	checkfree(8);
 800ff8a:	2108      	movs	r1, #8
 800ff8c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ff90:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800ff92:	4620      	mov	r0, r4
 800ff94:	f06f 01f5 	mvn.w	r1, #245	; 0xf5
 800ff98:	f7ff fa9c 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4620      	mov	r0, r4
}
 800ffa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800ffa4:	f7ff ba96 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800ffa8 <_ZN13FT81xRenderer13bgcolor_rgb32Em>:
void FT81xRenderer::bgcolor_rgb32(uint32_t rgb) {
 800ffa8:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800ffaa:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::bgcolor_rgb32(uint32_t rgb) {
 800ffac:	4604      	mov	r4, r0
 800ffae:	460d      	mov	r5, r1
	checkfree(8);
 800ffb0:	2108      	movs	r1, #8
 800ffb2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ffb6:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f06f 01f6 	mvn.w	r1, #246	; 0xf6
 800ffbe:	f7ff fa89 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	4620      	mov	r0, r4
}
 800ffc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800ffca:	f7ff ba83 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800ffce <_ZN13FT81xRenderer19cmd_gradcolor_rgb32Em>:
void FT81xRenderer::cmd_gradcolor_rgb32(uint32_t rgb) {
 800ffce:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800ffd0:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_gradcolor_rgb32(uint32_t rgb) {
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	460d      	mov	r5, r1
	checkfree(8);
 800ffd6:	2108      	movs	r1, #8
 800ffd8:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ffdc:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f06f 01cb 	mvn.w	r1, #203	; 0xcb
 800ffe4:	f7ff fa76 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 800ffe8:	4629      	mov	r1, r5
 800ffea:	4620      	mov	r0, r4
}
 800ffec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 800fff0:	f7ff ba70 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0800fff4 <_ZN13FT81xRenderer11cmd_setbaseEm>:
void FT81xRenderer::cmd_setbase(uint32_t b) {
 800fff4:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 800fff6:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_setbase(uint32_t b) {
 800fff8:	4604      	mov	r4, r0
 800fffa:	460d      	mov	r5, r1
	checkfree(8);
 800fffc:	2108      	movs	r1, #8
 800fffe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010002:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010004:	4620      	mov	r0, r4
 8010006:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 801000a:	f7ff fa63 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 801000e:	4629      	mov	r1, r5
 8010010:	4620      	mov	r0, r4
}
 8010012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 8010016:	f7ff ba5d 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0801001a <_ZN13FT81xRenderer16cmd_loadidentityEv>:
	checkfree(4);
 801001a:	6803      	ldr	r3, [r0, #0]
 801001c:	2104      	movs	r1, #4
void FT81xRenderer::cmd_loadidentity() {
 801001e:	b510      	push	{r4, lr}
 8010020:	4604      	mov	r4, r0
	checkfree(4);
 8010022:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010026:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010028:	f06f 01d9 	mvn.w	r1, #217	; 0xd9
 801002c:	4620      	mov	r0, r4
}
 801002e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 8010032:	f7ff ba4f 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

08010036 <_ZN13FT81xRenderer13cmd_setmatrixEv>:
	checkfree(4);
 8010036:	6803      	ldr	r3, [r0, #0]
 8010038:	2104      	movs	r1, #4
void FT81xRenderer::cmd_setmatrix() {
 801003a:	b510      	push	{r4, lr}
 801003c:	4604      	mov	r4, r0
	checkfree(4);
 801003e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010042:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010044:	f06f 01d5 	mvn.w	r1, #213	; 0xd5
 8010048:	4620      	mov	r0, r4
}
 801004a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 801004e:	f7ff ba41 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

08010052 <_ZN13FT81xRenderer13cmd_getmatrixEPlS0_S0_S0_S0_S0_>:
		int32_t *e, int32_t *f) {
 8010052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010056:	461e      	mov	r6, r3
	checkfree(4);
 8010058:	6803      	ldr	r3, [r0, #0]
		int32_t *e, int32_t *f) {
 801005a:	4605      	mov	r5, r0
 801005c:	4688      	mov	r8, r1
	checkfree(4);
 801005e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010062:	2104      	movs	r1, #4
		int32_t *e, int32_t *f) {
 8010064:	4617      	mov	r7, r2
	checkfree(4);
 8010066:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010068:	f06f 01cc 	mvn.w	r1, #204	; 0xcc
 801006c:	4628      	mov	r0, r5
 801006e:	f7ff fa31 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 8010072:	8a2c      	ldrh	r4, [r5, #16]
	cmd32(word);
 8010074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010078:	4628      	mov	r0, r5
	return RAM_CMD + (fifo_wp & 0xffc);
 801007a:	f024 0403 	bic.w	r4, r4, #3
	cmd32(word);
 801007e:	f7ff fa29 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 8010082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010086:	4628      	mov	r0, r5
 8010088:	f7ff fa24 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 801008c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010090:	4628      	mov	r0, r5
	return RAM_CMD + (fifo_wp & 0xffc);
 8010092:	0524      	lsls	r4, r4, #20
	cmd32(word);
 8010094:	f7ff fa1e 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 8010098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801009c:	4628      	mov	r0, r5
	return RAM_CMD + (fifo_wp & 0xffc);
 801009e:	0d24      	lsrs	r4, r4, #20
	cmd32(word);
 80100a0:	f7ff fa18 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 80100a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80100a8:	4628      	mov	r0, r5
 80100aa:	f7ff fa13 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 80100ae:	4628      	mov	r0, r5
 80100b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80100b4:	f7ff fa0e 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 80100b8:	f504 1042 	add.w	r0, r4, #3178496	; 0x308000
	r += 4;
 80100bc:	1d03      	adds	r3, r0, #4
	*a = r;
 80100be:	f8c8 0000 	str.w	r0, [r8]
	r += 4;
 80100c2:	f100 020c 	add.w	r2, r0, #12
	*b = r;
 80100c6:	603b      	str	r3, [r7, #0]
	r += 4;
 80100c8:	f100 0308 	add.w	r3, r0, #8
	*c = r;
 80100cc:	6033      	str	r3, [r6, #0]
	*d = r;
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	601a      	str	r2, [r3, #0]
	r += 4;
 80100d2:	f100 0210 	add.w	r2, r0, #16
	*e = r;
 80100d6:	9b07      	ldr	r3, [sp, #28]
	r += 4;
 80100d8:	3014      	adds	r0, #20
	*e = r;
 80100da:	601a      	str	r2, [r3, #0]
	*f = r;
 80100dc:	9b08      	ldr	r3, [sp, #32]
 80100de:	6018      	str	r0, [r3, #0]
}
 80100e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100e4 <_ZN13FT81xRenderer10cmd_getptrEPm>:
	checkfree(8);
 80100e4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_getptr(uint32_t *result) {
 80100e6:	b570      	push	{r4, r5, r6, lr}
 80100e8:	4604      	mov	r4, r0
	checkfree(8);
 80100ea:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::cmd_getptr(uint32_t *result) {
 80100ee:	460e      	mov	r6, r1
	checkfree(8);
 80100f0:	2108      	movs	r1, #8
 80100f2:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80100f4:	f06f 01dc 	mvn.w	r1, #220	; 0xdc
 80100f8:	4620      	mov	r0, r4
 80100fa:	f7ff f9eb 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 80100fe:	8a25      	ldrh	r5, [r4, #16]
	cmd32(word);
 8010100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010104:	4620      	mov	r0, r4
	return RAM_CMD + (fifo_wp & 0xffc);
 8010106:	f025 0503 	bic.w	r5, r5, #3
	cmd32(word);
 801010a:	f7ff f9e3 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 801010e:	052d      	lsls	r5, r5, #20
 8010110:	0d2d      	lsrs	r5, r5, #20
 8010112:	f505 1542 	add.w	r5, r5, #3178496	; 0x308000
	*result = r;
 8010116:	6035      	str	r5, [r6, #0]
}
 8010118:	bd70      	pop	{r4, r5, r6, pc}

0801011a <_ZN13FT81xRenderer12cmd_getpropsEPmS0_S0_>:
		uint32_t *height) {
 801011a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011e:	461e      	mov	r6, r3
	checkfree(16);
 8010120:	6803      	ldr	r3, [r0, #0]
		uint32_t *height) {
 8010122:	4605      	mov	r5, r0
 8010124:	4688      	mov	r8, r1
	checkfree(16);
 8010126:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801012a:	2110      	movs	r1, #16
		uint32_t *height) {
 801012c:	4617      	mov	r7, r2
	checkfree(16);
 801012e:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010130:	f06f 01da 	mvn.w	r1, #218	; 0xda
 8010134:	4628      	mov	r0, r5
 8010136:	f7ff f9cd 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 801013a:	8a2c      	ldrh	r4, [r5, #16]
	cmd32(word);
 801013c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010140:	4628      	mov	r0, r5
	return RAM_CMD + (fifo_wp & 0xffc);
 8010142:	f024 0403 	bic.w	r4, r4, #3
	cmd32(word);
 8010146:	f7ff f9c5 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 801014a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801014e:	4628      	mov	r0, r5
	return RAM_CMD + (fifo_wp & 0xffc);
 8010150:	0524      	lsls	r4, r4, #20
	cmd32(word);
 8010152:	f7ff f9bf 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 8010156:	4628      	mov	r0, r5
	return RAM_CMD + (fifo_wp & 0xffc);
 8010158:	0d24      	lsrs	r4, r4, #20
	cmd32(word);
 801015a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801015e:	f7ff f9b9 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 8010162:	f504 1042 	add.w	r0, r4, #3178496	; 0x308000
	*ptr = r;
 8010166:	f8c8 0000 	str.w	r0, [r8]
	r += 4;
 801016a:	1d03      	adds	r3, r0, #4
	r += 4;
 801016c:	3008      	adds	r0, #8
	*width = r;
 801016e:	603b      	str	r3, [r7, #0]
	*height = r;
 8010170:	6030      	str	r0, [r6, #0]
}
 8010172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010176 <_ZN13FT81xRenderer9cmd_scaleEll>:
	checkfree(12);
 8010176:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_scale(int32_t sx, int32_t sy) {
 8010178:	b570      	push	{r4, r5, r6, lr}
 801017a:	4604      	mov	r4, r0
 801017c:	460e      	mov	r6, r1
	checkfree(12);
 801017e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010182:	210c      	movs	r1, #12
void FT81xRenderer::cmd_scale(int32_t sx, int32_t sy) {
 8010184:	4615      	mov	r5, r2
	checkfree(12);
 8010186:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010188:	4620      	mov	r0, r4
 801018a:	f06f 01d7 	mvn.w	r1, #215	; 0xd7
 801018e:	f7ff f9a1 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 8010192:	4631      	mov	r1, r6
 8010194:	4620      	mov	r0, r4
 8010196:	f7ff f99d 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 801019a:	4629      	mov	r1, r5
 801019c:	4620      	mov	r0, r4
}
 801019e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 80101a2:	f7ff b997 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

080101a6 <_ZN13FT81xRenderer10cmd_rotateEl>:
void FT81xRenderer::cmd_rotate(int32_t a) {
 80101a6:	b538      	push	{r3, r4, r5, lr}
	checkfree(8);
 80101a8:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_rotate(int32_t a) {
 80101aa:	4604      	mov	r4, r0
 80101ac:	460d      	mov	r5, r1
	checkfree(8);
 80101ae:	2108      	movs	r1, #8
 80101b0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80101b4:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80101b6:	4620      	mov	r0, r4
 80101b8:	f06f 01d6 	mvn.w	r1, #214	; 0xd6
 80101bc:	f7ff f98a 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 80101c0:	4629      	mov	r1, r5
 80101c2:	4620      	mov	r0, r4
}
 80101c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 80101c8:	f7ff b984 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

080101cc <_ZN13FT81xRenderer13cmd_translateEll>:
void FT81xRenderer::cmd_translate(int32_t tx, int32_t ty) {
 80101cc:	b538      	push	{r3, r4, r5, lr}
	checkfree(12);
 80101ce:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_translate(int32_t tx, int32_t ty) {
 80101d0:	4604      	mov	r4, r0
 80101d2:	460d      	mov	r5, r1
	checkfree(12);
 80101d4:	210c      	movs	r1, #12
 80101d6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80101da:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80101dc:	4620      	mov	r0, r4
 80101de:	f06f 01d8 	mvn.w	r1, #216	; 0xd8
 80101e2:	f7ff f977 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 80101e6:	4629      	mov	r1, r5
 80101e8:	4620      	mov	r0, r4
 80101ea:	f7ff f973 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 80101ee:	4629      	mov	r1, r5
 80101f0:	4620      	mov	r0, r4
}
 80101f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 80101f6:	f7ff b96d 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

080101fa <_ZN13FT81xRenderer13cmd_calibrateEPm>:
	checkfree(4);
 80101fa:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_calibrate(uint32_t *result) {
 80101fc:	b570      	push	{r4, r5, r6, lr}
 80101fe:	4604      	mov	r4, r0
	checkfree(4);
 8010200:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
void FT81xRenderer::cmd_calibrate(uint32_t *result) {
 8010204:	460e      	mov	r6, r1
	checkfree(4);
 8010206:	2104      	movs	r1, #4
 8010208:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 801020a:	f06f 01ea 	mvn.w	r1, #234	; 0xea
 801020e:	4620      	mov	r0, r4
 8010210:	f7ff f960 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 8010214:	8a25      	ldrh	r5, [r4, #16]
	cmd32(word);
 8010216:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801021a:	4620      	mov	r0, r4
	return RAM_CMD + (fifo_wp & 0xffc);
 801021c:	f025 0503 	bic.w	r5, r5, #3
	cmd32(word);
 8010220:	f7ff f958 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	return RAM_CMD + (fifo_wp & 0xffc);
 8010224:	052d      	lsls	r5, r5, #20
 8010226:	0d2d      	lsrs	r5, r5, #20
 8010228:	f505 1542 	add.w	r5, r5, #3178496	; 0x308000
	*result = r;
 801022c:	6035      	str	r5, [r6, #0]
}
 801022e:	bd70      	pop	{r4, r5, r6, pc}

08010230 <_ZN13FT81xRenderer13cmd_setrotateEm>:

/*
 * 5.53 CMD_SETROTATE
 * Rotate the screen
 */
void FT81xRenderer::cmd_setrotate(uint32_t r) {
 8010230:	b538      	push	{r3, r4, r5, lr}
	// check that we have enough space then send command
	checkfree(8);
 8010232:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_setrotate(uint32_t r) {
 8010234:	4604      	mov	r4, r0
 8010236:	460d      	mov	r5, r1
	checkfree(8);
 8010238:	2108      	movs	r1, #8
 801023a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801023e:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010240:	f06f 01c9 	mvn.w	r1, #201	; 0xc9
 8010244:	4620      	mov	r0, r4
 8010246:	f7ff f945 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 801024a:	4629      	mov	r1, r5
 801024c:	4620      	mov	r0, r4
 801024e:	f7ff f941 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cFFFFFF(0x36);
	cI(r);

	// Get our screen size W,H to confirm
	display_width = rd16(REG_HSIZE);
 8010252:	4908      	ldr	r1, [pc, #32]	; (8010274 <_ZN13FT81xRenderer13cmd_setrotateEm+0x44>)
 8010254:	4620      	mov	r0, r4
 8010256:	f7fe fc9d 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>
	display_height = rd16(REG_VSIZE);
 801025a:	4907      	ldr	r1, [pc, #28]	; (8010278 <_ZN13FT81xRenderer13cmd_setrotateEm+0x48>)
	display_width = rd16(REG_HSIZE);
 801025c:	82a0      	strh	r0, [r4, #20]
	display_height = rd16(REG_VSIZE);
 801025e:	4620      	mov	r0, r4
 8010260:	f7fe fc98 	bl	800eb94 <_ZN13FT81xRenderer4rd16Em>

	// portrait mode swap w & h
	if (r & 2) {
 8010264:	07ab      	lsls	r3, r5, #30
	display_height = rd16(REG_VSIZE);
 8010266:	82e0      	strh	r0, [r4, #22]
		int t = display_height;
		display_height = display_width;
 8010268:	bf42      	ittt	mi
 801026a:	8aa3      	ldrhmi	r3, [r4, #20]
		display_width = t;
 801026c:	82a0      	strhmi	r0, [r4, #20]
		display_height = display_width;
 801026e:	82e3      	strhmi	r3, [r4, #22]
	}
}
 8010270:	bd38      	pop	{r3, r4, r5, pc}
 8010272:	bf00      	nop
 8010274:	00302034 	.word	0x00302034
 8010278:	00302048 	.word	0x00302048

0801027c <_ZN13FT81xRenderer15cmd_screensaverEv>:
 * 5.55 CMD_SCREENSAVER
 * Start an animated screensaver
 */
void FT81xRenderer::cmd_screensaver() {
	// check that we have enough space then send command
	checkfree(4);
 801027c:	6803      	ldr	r3, [r0, #0]
 801027e:	2104      	movs	r1, #4
void FT81xRenderer::cmd_screensaver() {
 8010280:	b510      	push	{r4, lr}
 8010282:	4604      	mov	r4, r0
	checkfree(4);
 8010284:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010288:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 801028a:	f06f 01d0 	mvn.w	r1, #208	; 0xd0
 801028e:	4620      	mov	r0, r4
	cFFFFFF(0x2f);
}
 8010290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 8010294:	f7ff b91e 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

08010298 <_ZN13FT81xRenderer8cmd_stopEv>:
 * 5.57 CMD_STOP
 * Stop any active spinner, screensaver or sketch
 */
void FT81xRenderer::cmd_stop() {
	// check that we have enough space then send command
	checkfree(4);
 8010298:	6803      	ldr	r3, [r0, #0]
 801029a:	2104      	movs	r1, #4
void FT81xRenderer::cmd_stop() {
 801029c:	b510      	push	{r4, lr}
 801029e:	4604      	mov	r4, r0
	checkfree(4);
 80102a0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80102a4:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80102a6:	f06f 01e8 	mvn.w	r1, #232	; 0xe8
 80102aa:	4620      	mov	r0, r4
	cFFFFFF(0x17);
}
 80102ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd32(byte | 0xffffff00);
 80102b0:	f7ff b910 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

080102b4 <_ZN13FT81xRenderer11cmd_setfontEmm>:
 * 5.58 CMD_SETFONT
 * Set up a custom font
 */
void FT81xRenderer::cmd_setfont(uint32_t font, uint32_t ptr) {
	// check that we have enough space then send command
	checkfree(12);
 80102b4:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_setfont(uint32_t font, uint32_t ptr) {
 80102b6:	b570      	push	{r4, r5, r6, lr}
 80102b8:	4604      	mov	r4, r0
 80102ba:	460e      	mov	r6, r1
	checkfree(12);
 80102bc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80102c0:	210c      	movs	r1, #12
void FT81xRenderer::cmd_setfont(uint32_t font, uint32_t ptr) {
 80102c2:	4615      	mov	r5, r2
	checkfree(12);
 80102c4:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80102c6:	4620      	mov	r0, r4
 80102c8:	f06f 01d4 	mvn.w	r1, #212	; 0xd4
 80102cc:	f7ff f902 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 80102d0:	4631      	mov	r1, r6
 80102d2:	4620      	mov	r0, r4
 80102d4:	f7ff f8fe 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 80102d8:	4629      	mov	r1, r5
 80102da:	4620      	mov	r0, r4
	cFFFFFF(0x2b);
	cI(font);
	cI(ptr);
}
 80102dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 80102e0:	f7ff b8f8 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

080102e4 <_ZN13FT81xRenderer12cmd_setfont2Emmmm>:
/*
 * 5.59 CMD_SETFONT2
 * Set up a custom font
 */
void FT81xRenderer::cmd_setfont2(uint32_t handle, uint32_t font, uint32_t ptr,
		uint32_t firstchar) {
 80102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e6:	461d      	mov	r5, r3
	// check that we have enough space then send command
	checkfree(16);
 80102e8:	6803      	ldr	r3, [r0, #0]
		uint32_t firstchar) {
 80102ea:	4604      	mov	r4, r0
 80102ec:	4616      	mov	r6, r2
	checkfree(16);
 80102ee:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80102f2:	2110      	movs	r1, #16
		uint32_t firstchar) {
 80102f4:	9f06      	ldr	r7, [sp, #24]
	checkfree(16);
 80102f6:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80102f8:	4620      	mov	r0, r4
 80102fa:	f06f 01c4 	mvn.w	r1, #196	; 0xc4
 80102fe:	f7ff f8e9 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 8010302:	4631      	mov	r1, r6
 8010304:	4620      	mov	r0, r4
 8010306:	f7ff f8e5 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 801030a:	4629      	mov	r1, r5
 801030c:	4620      	mov	r0, r4
 801030e:	f7ff f8e1 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 8010312:	4639      	mov	r1, r7
 8010314:	4620      	mov	r0, r4
	cFFFFFF(0x3b);
	cI(font);
	cI(ptr);
	cI(firstchar);
}
 8010316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	cmd32(word);
 801031a:	f7ff b8db 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

0801031e <_ZN13FT81xRenderer14cmd_setscratchEm>:

/*
 * 5.60 CMD_SETSCRATCH
 * Set the scratch bitmap for widget use
 */
void FT81xRenderer::cmd_setscratch(uint32_t handle) {
 801031e:	b538      	push	{r3, r4, r5, lr}
	// check that we have enough space then send command
	checkfree(8);
 8010320:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_setscratch(uint32_t handle) {
 8010322:	4604      	mov	r4, r0
 8010324:	460d      	mov	r5, r1
	checkfree(8);
 8010326:	2108      	movs	r1, #8
 8010328:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801032c:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 801032e:	4620      	mov	r0, r4
 8010330:	f06f 01c3 	mvn.w	r1, #195	; 0xc3
 8010334:	f7ff f8ce 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 8010338:	4629      	mov	r1, r5
 801033a:	4620      	mov	r0, r4
	cFFFFFF(0x3c);
	cI(handle);
}
 801033c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 8010340:	f7ff b8c8 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

08010344 <_ZN13FT81xRenderer11cmd_romfontEmm>:
 * 5.61 CMD_ROMFONT
 * Load a ROM font into bitmap handle
 */
void FT81xRenderer::cmd_romfont(uint32_t font, uint32_t slot) {
	// check that we have enough space then send command
	checkfree(12);
 8010344:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_romfont(uint32_t font, uint32_t slot) {
 8010346:	b570      	push	{r4, r5, r6, lr}
 8010348:	4604      	mov	r4, r0
 801034a:	460e      	mov	r6, r1
	checkfree(12);
 801034c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010350:	210c      	movs	r1, #12
void FT81xRenderer::cmd_romfont(uint32_t font, uint32_t slot) {
 8010352:	4615      	mov	r5, r2
	checkfree(12);
 8010354:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010356:	4620      	mov	r0, r4
 8010358:	f06f 01c0 	mvn.w	r1, #192	; 0xc0
 801035c:	f7ff f8ba 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 8010360:	4631      	mov	r1, r6
 8010362:	4620      	mov	r0, r4
 8010364:	f7ff f8b6 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 8010368:	4629      	mov	r1, r5
 801036a:	4620      	mov	r0, r4
	cFFFFFF(0x3f);
	cI(font);
	cI(slot);
}
 801036c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cmd32(word);
 8010370:	f7ff b8b0 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>

08010374 <_ZN13FT81xRenderer12cmd_snapshotEm>:

/*
 * 5.63 CMD_SNAPSHOT
 * Take a snapshot of the current screen
 */
void FT81xRenderer::cmd_snapshot(uint32_t ptr) {
 8010374:	b538      	push	{r3, r4, r5, lr}
	// check that we have enough space then send command
	checkfree(8);
 8010376:	6803      	ldr	r3, [r0, #0]
void FT81xRenderer::cmd_snapshot(uint32_t ptr) {
 8010378:	4604      	mov	r4, r0
 801037a:	460d      	mov	r5, r1
	checkfree(8);
 801037c:	2108      	movs	r1, #8
 801037e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010382:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010384:	4620      	mov	r0, r4
 8010386:	f06f 01e0 	mvn.w	r1, #224	; 0xe0
 801038a:	f7ff f8a3 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 801038e:	4629      	mov	r1, r5
 8010390:	4620      	mov	r0, r4
	cFFFFFF(0x1f);
	cI(ptr);
}
 8010392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cmd32(word);
 8010396:	f7ff b89d 	b.w	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	...

0801039c <_ZN13FT81xRenderer2cNEPht>:
	fifo_wp += size;
 801039c:	8a03      	ldrh	r3, [r0, #16]
 801039e:	4413      	add	r3, r2
void FT81xRenderer::cN(uint8_t *buffer, uint16_t size) {
 80103a0:	b530      	push	{r4, r5, lr}
	fifo_wp += size;
 80103a2:	8203      	strh	r3, [r0, #16]
void FT81xRenderer::cN(uint8_t *buffer, uint16_t size) {
 80103a4:	b08f      	sub	sp, #60	; 0x3c
	fifo_freespace -= size;
 80103a6:	89c3      	ldrh	r3, [r0, #14]
void FT81xRenderer::cN(uint8_t *buffer, uint16_t size) {
 80103a8:	460d      	mov	r5, r1
	load_default_command(&cmd);
 80103aa:	4669      	mov	r1, sp
void FT81xRenderer::cN(uint8_t *buffer, uint16_t size) {
 80103ac:	4604      	mov	r4, r0
	fifo_freespace -= size;
 80103ae:	1a9b      	subs	r3, r3, r2
 80103b0:	81c3      	strh	r3, [r0, #14]
	load_default_command(&cmd);
 80103b2:	f7fe fb11 	bl	800e9d8 <_ZN13FT81xRenderer20load_default_commandEP19QSPI_CommandTypeDef>
	if (qio) {
 80103b6:	7c83      	ldrb	r3, [r0, #18]
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 80103b8:	6840      	ldr	r0, [r0, #4]
		cmd.DataMode = QSPI_DATA_1_LINE;
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	bf14      	ite	ne
 80103be:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
 80103c2:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
	cmd.NbData = size;
 80103c6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
	if (spi->run(&cmd, FT_IO_TIMEOUT) != HAL_OK) {
 80103ca:	2264      	movs	r2, #100	; 0x64
 80103cc:	f000 fb32 	bl	8010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>
 80103d0:	b128      	cbz	r0, 80103de <_ZN13FT81xRenderer2cNEPht+0x42>
		console->printf("[FT81xRenderer] Failed to send QSPI command for cmdn\r\n");
 80103d2:	4907      	ldr	r1, [pc, #28]	; (80103f0 <_ZN13FT81xRenderer2cNEPht+0x54>)
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for cmdn\r\n");
 80103d4:	68a0      	ldr	r0, [r4, #8]
 80103d6:	f7fb f943 	bl	800b660 <_ZN7Console6printfEPKcz>
}
 80103da:	b00f      	add	sp, #60	; 0x3c
 80103dc:	bd30      	pop	{r4, r5, pc}
	if (spi->transmit(buffer, FT_IO_TIMEOUT) != HAL_OK) {
 80103de:	2264      	movs	r2, #100	; 0x64
 80103e0:	4629      	mov	r1, r5
 80103e2:	6860      	ldr	r0, [r4, #4]
 80103e4:	f000 fbc2 	bl	8010b6c <_ZN11QSPIWrapper8transmitEPhm>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d0f6      	beq.n	80103da <_ZN13FT81xRenderer2cNEPht+0x3e>
		console->printf("[FT81xRenderer] Failed to transmit QSPI data for cmdn\r\n");
 80103ec:	4901      	ldr	r1, [pc, #4]	; (80103f4 <_ZN13FT81xRenderer2cNEPht+0x58>)
 80103ee:	e7f1      	b.n	80103d4 <_ZN13FT81xRenderer2cNEPht+0x38>
 80103f0:	0801c88b 	.word	0x0801c88b
 80103f4:	0801c8c2 	.word	0x0801c8c2

080103f8 <_ZN13FT81xRenderer7align32Em>:
void FT81xRenderer::align32(uint32_t written) {
 80103f8:	b507      	push	{r0, r1, r2, lr}
	int8_t align = 4 - (written & 0x3);
 80103fa:	f001 0103 	and.w	r1, r1, #3
	uint8_t dummy[4] = { 0x00, 0x00, 0x00, 0x00 };
 80103fe:	2300      	movs	r3, #0
	int8_t align = 4 - (written & 0x3);
 8010400:	f1c1 0104 	rsb	r1, r1, #4
	uint8_t dummy[4] = { 0x00, 0x00, 0x00, 0x00 };
 8010404:	9301      	str	r3, [sp, #4]
	if (align & 0x3)
 8010406:	078b      	lsls	r3, r1, #30
	int8_t align = 4 - (written & 0x3);
 8010408:	b2ca      	uxtb	r2, r1
	if (align & 0x3)
 801040a:	d002      	beq.n	8010412 <_ZN13FT81xRenderer7align32Em+0x1a>
		cN((uint8_t*) dummy, align);
 801040c:	a901      	add	r1, sp, #4
 801040e:	f7ff ffc5 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010412:	b003      	add	sp, #12
 8010414:	f85d fb04 	ldr.w	pc, [sp], #4

08010418 <_ZN13FT81xRenderer10cmd_buttonEttttttPKc>:
		uint16_t font, uint16_t options, const char *s) {
 8010418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801041a:	b085      	sub	sp, #20
 801041c:	4604      	mov	r4, r0
	b[2] = w;
 801041e:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[3] = h;
 8010422:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
		uint16_t font, uint16_t options, const char *s) {
 8010426:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	b[3] = h;
 8010428:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = font;
 801042c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
	uint32_t len = strlen(s) + 1;
 8010430:	4630      	mov	r0, r6
	b[1] = y;
 8010432:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[4] = font;
 8010436:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = options;
 801043a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	b[0] = x;
 801043e:	f8ad 1004 	strh.w	r1, [sp, #4]
	b[5] = options;
 8010442:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint32_t len = strlen(s) + 1;
 8010446:	f7ef ff55 	bl	80002f4 <strlen>
 801044a:	1c45      	adds	r5, r0, #1
	checkfree(4 + sizeof(b) + len + align);
 801044c:	4620      	mov	r0, r4
 801044e:	b2af      	uxth	r7, r5
	int8_t align = (4 - (len & 0x3)) & 0x3;
 8010450:	4269      	negs	r1, r5
	checkfree(4 + sizeof(b) + len + align);
 8010452:	f107 0310 	add.w	r3, r7, #16
 8010456:	f001 0103 	and.w	r1, r1, #3
 801045a:	4419      	add	r1, r3
 801045c:	6823      	ldr	r3, [r4, #0]
 801045e:	b289      	uxth	r1, r1
 8010460:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010464:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010466:	4620      	mov	r0, r4
 8010468:	f06f 01f2 	mvn.w	r1, #242	; 0xf2
 801046c:	f7ff f832 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 8010470:	a901      	add	r1, sp, #4
 8010472:	4620      	mov	r0, r4
 8010474:	220c      	movs	r2, #12
 8010476:	f7ff ff91 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	cN((uint8_t*) s, len);
 801047a:	463a      	mov	r2, r7
 801047c:	4631      	mov	r1, r6
 801047e:	4620      	mov	r0, r4
 8010480:	f7ff ff8c 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	align32(len);
 8010484:	4629      	mov	r1, r5
 8010486:	4620      	mov	r0, r4
 8010488:	f7ff ffb6 	bl	80103f8 <_ZN13FT81xRenderer7align32Em>
}
 801048c:	b005      	add	sp, #20
 801048e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010490 <_ZN13FT81xRenderer9cmd_clockEtttttttt>:
		uint16_t options, uint16_t h, uint16_t m, uint16_t s, uint16_t ms) {
 8010490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = r;
 8010492:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint16_t options, uint16_t h, uint16_t m, uint16_t s, uint16_t ms) {
 8010496:	4604      	mov	r4, r0
	b[3] = options;
 8010498:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	b[1] = y;
 801049c:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[3] = options;
 80104a0:	f8ad 3006 	strh.w	r3, [sp, #6]
	b[4] = h;
 80104a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	b[0] = x;
 80104a8:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(4 + sizeof(b));
 80104ac:	2114      	movs	r1, #20
	b[4] = h;
 80104ae:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[5] = m;
 80104b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80104b6:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[6] = s;
 80104ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80104be:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[7] = ms;
 80104c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80104c6:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80104d0:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80104d2:	4620      	mov	r0, r4
 80104d4:	f06f 01eb 	mvn.w	r1, #235	; 0xeb
 80104d8:	f7fe fffc 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 80104dc:	2210      	movs	r2, #16
 80104de:	4669      	mov	r1, sp
 80104e0:	4620      	mov	r0, r4
 80104e2:	f7ff ff5b 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 80104e6:	b004      	add	sp, #16
 80104e8:	bd10      	pop	{r4, pc}

080104ea <_ZN13FT81xRenderer9cmd_gaugeEsssttttt>:
		uint16_t major, uint16_t minor, uint16_t val, uint16_t range) {
 80104ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = r;
 80104ec:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint16_t major, uint16_t minor, uint16_t val, uint16_t range) {
 80104f0:	4604      	mov	r4, r0
	b[3] = options;
 80104f2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	b[1] = y;
 80104f6:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[3] = options;
 80104fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	b[4] = major;
 80104fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	b[0] = x;
 8010502:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(4 + sizeof(b));
 8010506:	2114      	movs	r1, #20
	b[4] = major;
 8010508:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[5] = minor;
 801050c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010510:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[6] = val;
 8010514:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010518:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[7] = range;
 801051c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8010520:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 8010524:	6803      	ldr	r3, [r0, #0]
 8010526:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801052a:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 801052c:	4620      	mov	r0, r4
 801052e:	f06f 01ec 	mvn.w	r1, #236	; 0xec
 8010532:	f7fe ffcf 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 8010536:	2210      	movs	r2, #16
 8010538:	4669      	mov	r1, sp
 801053a:	4620      	mov	r0, r4
 801053c:	f7ff ff2e 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010540:	b004      	add	sp, #16
 8010542:	bd10      	pop	{r4, pc}

08010544 <_ZN13FT81xRenderer18cmd_gradient_rgb32Essmssm>:
		int16_t x1, int16_t y1, uint32_t rgb1) {
 8010544:	b530      	push	{r4, r5, lr}
 8010546:	b085      	sub	sp, #20
 8010548:	4604      	mov	r4, r0
	b[1] = y0;
 801054a:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[2] = rgb0 >> 16;
 801054e:	0c1a      	lsrs	r2, r3, #16
	b[3] = rgb0 & 0xffff;
 8010550:	f8ad 3006 	strh.w	r3, [sp, #6]
	b[4] = x1;
 8010554:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
		int16_t x1, int16_t y1, uint32_t rgb1) {
 8010558:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	b[4] = x1;
 801055a:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[5] = y1;
 801055e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
	b[2] = rgb0 >> 16;
 8010562:	f8ad 2004 	strh.w	r2, [sp, #4]
	b[5] = y1;
 8010566:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[6] = rgb1 >> 16;
 801056a:	0c2b      	lsrs	r3, r5, #16
	b[0] = x0;
 801056c:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(4 + sizeof(b));
 8010570:	2114      	movs	r1, #20
	b[6] = rgb1 >> 16;
 8010572:	f8ad 300c 	strh.w	r3, [sp, #12]
	checkfree(4 + sizeof(b));
 8010576:	6803      	ldr	r3, [r0, #0]
	b[7] = rgb1 & 0xffff;
 8010578:	f8ad 500e 	strh.w	r5, [sp, #14]
	checkfree(4 + sizeof(b));
 801057c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010580:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010582:	4620      	mov	r0, r4
 8010584:	f06f 01f4 	mvn.w	r1, #244	; 0xf4
 8010588:	f7fe ffa4 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 801058c:	2210      	movs	r2, #16
 801058e:	4669      	mov	r1, sp
 8010590:	4620      	mov	r0, r4
 8010592:	f7ff ff03 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010596:	b005      	add	sp, #20
 8010598:	bd30      	pop	{r4, r5, pc}

0801059a <_ZN13FT81xRenderer8cmd_keysEssssstPKc>:
		int16_t font, uint16_t options, const char *s) {
 801059a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801059c:	b085      	sub	sp, #20
 801059e:	4604      	mov	r4, r0
	b[2] = w;
 80105a0:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[3] = h;
 80105a4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
		int16_t font, uint16_t options, const char *s) {
 80105a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	b[3] = h;
 80105aa:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = font;
 80105ae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
	uint32_t len = strlen(s) + 1;
 80105b2:	4630      	mov	r0, r6
	b[1] = y;
 80105b4:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[4] = font;
 80105b8:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = options;
 80105bc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	b[0] = x;
 80105c0:	f8ad 1004 	strh.w	r1, [sp, #4]
	b[5] = options;
 80105c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint32_t len = strlen(s) + 1;
 80105c8:	f7ef fe94 	bl	80002f4 <strlen>
 80105cc:	1c45      	adds	r5, r0, #1
	checkfree(4 + sizeof(b) + len + align);
 80105ce:	4620      	mov	r0, r4
 80105d0:	b2af      	uxth	r7, r5
	int8_t align = (4 - (len & 0x3)) & 0x3;
 80105d2:	4269      	negs	r1, r5
	checkfree(4 + sizeof(b) + len + align);
 80105d4:	f107 0310 	add.w	r3, r7, #16
 80105d8:	f001 0103 	and.w	r1, r1, #3
 80105dc:	4419      	add	r1, r3
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	b289      	uxth	r1, r1
 80105e2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80105e6:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80105e8:	4620      	mov	r0, r4
 80105ea:	f06f 01f1 	mvn.w	r1, #241	; 0xf1
 80105ee:	f7fe ff71 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 80105f2:	a901      	add	r1, sp, #4
 80105f4:	4620      	mov	r0, r4
 80105f6:	220c      	movs	r2, #12
 80105f8:	f7ff fed0 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	cN((uint8_t*) s, len);
 80105fc:	463a      	mov	r2, r7
 80105fe:	4631      	mov	r1, r6
 8010600:	4620      	mov	r0, r4
 8010602:	f7ff fecb 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	align32(len);
 8010606:	4629      	mov	r1, r5
 8010608:	4620      	mov	r0, r4
 801060a:	f7ff fef5 	bl	80103f8 <_ZN13FT81xRenderer7align32Em>
}
 801060e:	b005      	add	sp, #20
 8010610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010612 <_ZN13FT81xRenderer12cmd_progressEssssttt>:
		uint16_t options, uint16_t val, uint16_t range) {
 8010612:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = w;
 8010614:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint16_t options, uint16_t val, uint16_t range) {
 8010618:	4604      	mov	r4, r0
	b[3] = h;
 801061a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
	b[1] = y;
 801061e:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[3] = h;
 8010622:	f8ad 3006 	strh.w	r3, [sp, #6]
	b[4] = options;
 8010626:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	b[0] = x;
 801062a:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(4 + sizeof(b));
 801062e:	2114      	movs	r1, #20
	b[4] = options;
 8010630:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[5] = val;
 8010634:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010638:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[6] = range;
 801063c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010640:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[7] = 0; // dummy pad
 8010644:	2300      	movs	r3, #0
 8010646:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 801064a:	6803      	ldr	r3, [r0, #0]
 801064c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010650:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010652:	4620      	mov	r0, r4
 8010654:	f06f 01f0 	mvn.w	r1, #240	; 0xf0
 8010658:	f7fe ff3c 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 801065c:	2210      	movs	r2, #16
 801065e:	4669      	mov	r1, sp
 8010660:	4620      	mov	r0, r4
 8010662:	f7ff fe9b 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010666:	b004      	add	sp, #16
 8010668:	bd10      	pop	{r4, pc}

0801066a <_ZN13FT81xRenderer13cmd_scrollbarEsssstttt>:
		uint16_t options, uint16_t val, uint16_t size, uint16_t range) {
 801066a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = w;
 801066c:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint16_t options, uint16_t val, uint16_t size, uint16_t range) {
 8010670:	4604      	mov	r4, r0
	b[3] = h;
 8010672:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
	b[1] = y;
 8010676:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[3] = h;
 801067a:	f8ad 3006 	strh.w	r3, [sp, #6]
	b[4] = options;
 801067e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	b[0] = x;
 8010682:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(4 + sizeof(b));
 8010686:	2114      	movs	r1, #20
	b[4] = options;
 8010688:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[5] = val;
 801068c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010690:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[6] = size;
 8010694:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010698:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[7] = range;
 801069c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80106a0:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 80106a4:	6803      	ldr	r3, [r0, #0]
 80106a6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80106aa:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80106ac:	4620      	mov	r0, r4
 80106ae:	f06f 01ee 	mvn.w	r1, #238	; 0xee
 80106b2:	f7fe ff0f 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 80106b6:	2210      	movs	r2, #16
 80106b8:	4669      	mov	r1, sp
 80106ba:	4620      	mov	r0, r4
 80106bc:	f7ff fe6e 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 80106c0:	b004      	add	sp, #16
 80106c2:	bd10      	pop	{r4, pc}

080106c4 <_ZN13FT81xRenderer10cmd_sliderEssssttt>:
		uint16_t options, uint16_t val, uint16_t range) {
 80106c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = w;
 80106c6:	f8ad 3004 	strh.w	r3, [sp, #4]
		uint16_t options, uint16_t val, uint16_t range) {
 80106ca:	4604      	mov	r4, r0
	b[3] = h;
 80106cc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
	b[1] = y;
 80106d0:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[3] = h;
 80106d4:	f8ad 3006 	strh.w	r3, [sp, #6]
	b[4] = options;
 80106d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	b[0] = x;
 80106dc:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(4 + sizeof(b));
 80106e0:	2114      	movs	r1, #20
	b[4] = options;
 80106e2:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[5] = val;
 80106e6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80106ea:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[6] = range;
 80106ee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80106f2:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[7] = 0; // dummy pad
 80106f6:	2300      	movs	r3, #0
 80106f8:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 80106fc:	6803      	ldr	r3, [r0, #0]
 80106fe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010702:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010704:	4620      	mov	r0, r4
 8010706:	f06f 01ef 	mvn.w	r1, #239	; 0xef
 801070a:	f7fe fee3 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 801070e:	2210      	movs	r2, #16
 8010710:	4669      	mov	r1, sp
 8010712:	4620      	mov	r0, r4
 8010714:	f7ff fe42 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010718:	b004      	add	sp, #16
 801071a:	bd10      	pop	{r4, pc}

0801071c <_ZN13FT81xRenderer8cmd_dialEssstt>:
		uint16_t val) {
 801071c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = r;
 801071e:	f8ad 3008 	strh.w	r3, [sp, #8]
		uint16_t val) {
 8010722:	4604      	mov	r4, r0
	b[3] = options;
 8010724:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	b[1] = y;
 8010728:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[3] = options;
 801072c:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = val;
 8010730:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	b[0] = x;
 8010734:	f8ad 1004 	strh.w	r1, [sp, #4]
	checkfree(4 + sizeof(b));
 8010738:	2110      	movs	r1, #16
	b[4] = val;
 801073a:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = 0; // dummy pad
 801073e:	2300      	movs	r3, #0
 8010740:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 8010744:	6803      	ldr	r3, [r0, #0]
 8010746:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801074a:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 801074c:	4620      	mov	r0, r4
 801074e:	f06f 01d2 	mvn.w	r1, #210	; 0xd2
 8010752:	f7fe febf 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 8010756:	220c      	movs	r2, #12
 8010758:	a901      	add	r1, sp, #4
 801075a:	4620      	mov	r0, r4
 801075c:	f7ff fe1e 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010760:	b004      	add	sp, #16
 8010762:	bd10      	pop	{r4, pc}

08010764 <_ZN13FT81xRenderer10cmd_toggleEssssttPKc>:
		uint16_t options, uint16_t state, const char *s) {
 8010764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010766:	b085      	sub	sp, #20
 8010768:	4604      	mov	r4, r0
	b[2] = w;
 801076a:	f8ad 3008 	strh.w	r3, [sp, #8]
	b[3] = font;
 801076e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
		uint16_t options, uint16_t state, const char *s) {
 8010772:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	b[3] = font;
 8010774:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = options;
 8010778:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
	uint32_t len = strlen(s) + 1;
 801077c:	4630      	mov	r0, r6
	b[1] = y;
 801077e:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[4] = options;
 8010782:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = state;
 8010786:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	b[0] = x;
 801078a:	f8ad 1004 	strh.w	r1, [sp, #4]
	b[5] = state;
 801078e:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint32_t len = strlen(s) + 1;
 8010792:	f7ef fdaf 	bl	80002f4 <strlen>
 8010796:	1c45      	adds	r5, r0, #1
	checkfree(4 + sizeof(b) + len + align);
 8010798:	4620      	mov	r0, r4
 801079a:	b2af      	uxth	r7, r5
	int8_t align = (4 - (len & 0x3)) & 0x3;
 801079c:	4269      	negs	r1, r5
	checkfree(4 + sizeof(b) + len + align);
 801079e:	f107 0310 	add.w	r3, r7, #16
 80107a2:	f001 0103 	and.w	r1, r1, #3
 80107a6:	4419      	add	r1, r3
 80107a8:	6823      	ldr	r3, [r4, #0]
 80107aa:	b289      	uxth	r1, r1
 80107ac:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80107b0:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80107b2:	4620      	mov	r0, r4
 80107b4:	f06f 01ed 	mvn.w	r1, #237	; 0xed
 80107b8:	f7fe fe8c 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 80107bc:	a901      	add	r1, sp, #4
 80107be:	4620      	mov	r0, r4
 80107c0:	220c      	movs	r2, #12
 80107c2:	f7ff fdeb 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	cN((uint8_t*) s, len);
 80107c6:	463a      	mov	r2, r7
 80107c8:	4631      	mov	r1, r6
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7ff fde6 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	align32(len);
 80107d0:	4629      	mov	r1, r5
 80107d2:	4620      	mov	r0, r4
 80107d4:	f7ff fe10 	bl	80103f8 <_ZN13FT81xRenderer7align32Em>
}
 80107d8:	b005      	add	sp, #20
 80107da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107dc <_ZN13FT81xRenderer8cmd_textEssstPKc>:
		const char *s) {
 80107dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80107e0:	4604      	mov	r4, r0
	b[2] = font;
 80107e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	b[3] = options;
 80107e6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	uint32_t len = strlen(s) + 1;
 80107ea:	4630      	mov	r0, r6
	b[1] = y;
 80107ec:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[0] = x;
 80107f0:	f8ad 1000 	strh.w	r1, [sp]
	b[3] = options;
 80107f4:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint32_t len = strlen(s) + 1;
 80107f8:	f7ef fd7c 	bl	80002f4 <strlen>
 80107fc:	1c45      	adds	r5, r0, #1
	checkfree(4 + sizeof(b) + len + align);
 80107fe:	4620      	mov	r0, r4
 8010800:	b2af      	uxth	r7, r5
	int8_t align = (4 - (len & 0x3)) & 0x3;
 8010802:	4269      	negs	r1, r5
	checkfree(4 + sizeof(b) + len + align);
 8010804:	f107 030c 	add.w	r3, r7, #12
 8010808:	f001 0103 	and.w	r1, r1, #3
 801080c:	4419      	add	r1, r3
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	b289      	uxth	r1, r1
 8010812:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010816:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010818:	4620      	mov	r0, r4
 801081a:	f06f 01f3 	mvn.w	r1, #243	; 0xf3
 801081e:	f7fe fe59 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) b, sizeof(b));
 8010822:	4669      	mov	r1, sp
 8010824:	4620      	mov	r0, r4
 8010826:	2208      	movs	r2, #8
 8010828:	f7ff fdb8 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	cN((uint8_t*) s, len);
 801082c:	463a      	mov	r2, r7
 801082e:	4631      	mov	r1, r6
 8010830:	4620      	mov	r0, r4
 8010832:	f7ff fdb3 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
	align32(len);
 8010836:	4629      	mov	r1, r5
 8010838:	4620      	mov	r0, r4
 801083a:	f7ff fddd 	bl	80103f8 <_ZN13FT81xRenderer7align32Em>
}
 801083e:	b003      	add	sp, #12
 8010840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010842 <_ZN13FT81xRenderer10cmd_numberEssstl>:
		uint16_t options, int32_t n) {
 8010842:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = font;
 8010844:	f8ad 3008 	strh.w	r3, [sp, #8]
		uint16_t options, int32_t n) {
 8010848:	4604      	mov	r4, r0
	b[3] = options;
 801084a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	b[1] = y;
 801084e:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[3] = options;
 8010852:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = n;
 8010856:	9b07      	ldr	r3, [sp, #28]
	b[0] = x;
 8010858:	f8ad 1004 	strh.w	r1, [sp, #4]
	checkfree(sizeof(b) + 4);
 801085c:	2110      	movs	r1, #16
	b[4] = n;
 801085e:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = 0; // dummy pad
 8010862:	2300      	movs	r3, #0
 8010864:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(sizeof(b) + 4);
 8010868:	6803      	ldr	r3, [r0, #0]
 801086a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801086e:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010870:	4620      	mov	r0, r4
 8010872:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 8010876:	f7fe fe2d 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) &b, sizeof(b));
 801087a:	220c      	movs	r2, #12
 801087c:	a901      	add	r1, sp, #4
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff fd8c 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010884:	b004      	add	sp, #16
 8010886:	bd10      	pop	{r4, pc}

08010888 <_ZN13FT81xRenderer11cmd_spinnerEssss>:
		int16_t scale) {
 8010888:	b513      	push	{r0, r1, r4, lr}
	b[2] = style;
 801088a:	f8ad 3004 	strh.w	r3, [sp, #4]
		int16_t scale) {
 801088e:	4604      	mov	r4, r0
	b[3] = scale;
 8010890:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
	b[1] = y;
 8010894:	f8ad 2002 	strh.w	r2, [sp, #2]
	b[3] = scale;
 8010898:	f8ad 3006 	strh.w	r3, [sp, #6]
	checkfree(sizeof(b) + 4);
 801089c:	6803      	ldr	r3, [r0, #0]
	b[0] = x;
 801089e:	f8ad 1000 	strh.w	r1, [sp]
	checkfree(sizeof(b) + 4);
 80108a2:	210c      	movs	r1, #12
 80108a4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80108a8:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80108aa:	4620      	mov	r0, r4
 80108ac:	f06f 01e9 	mvn.w	r1, #233	; 0xe9
 80108b0:	f7fe fe10 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) &b, sizeof(b));
 80108b4:	2208      	movs	r2, #8
 80108b6:	4669      	mov	r1, sp
 80108b8:	4620      	mov	r0, r4
 80108ba:	f7ff fd6f 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 80108be:	b002      	add	sp, #8
 80108c0:	bd10      	pop	{r4, pc}

080108c2 <_ZN13FT81xRenderer10cmd_sketchEssssss>:
		int16_t ptr, int16_t format) {
 80108c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = w;
 80108c4:	f8ad 3008 	strh.w	r3, [sp, #8]
		int16_t ptr, int16_t format) {
 80108c8:	4604      	mov	r4, r0
	b[3] = h;
 80108ca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
	b[1] = y;
 80108ce:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[3] = h;
 80108d2:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = ptr;
 80108d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
	b[0] = x;
 80108da:	f8ad 1004 	strh.w	r1, [sp, #4]
	checkfree(sizeof(b) + 4);
 80108de:	2110      	movs	r1, #16
	b[4] = ptr;
 80108e0:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = format; // dummy pad
 80108e4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80108e8:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(sizeof(b) + 4);
 80108ec:	6803      	ldr	r3, [r0, #0]
 80108ee:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80108f2:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80108f4:	4620      	mov	r0, r4
 80108f6:	f06f 01cf 	mvn.w	r1, #207	; 0xcf
 80108fa:	f7fe fdeb 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) &b, sizeof(b));
 80108fe:	220c      	movs	r2, #12
 8010900:	a901      	add	r1, sp, #4
 8010902:	4620      	mov	r0, r4
 8010904:	f7ff fd4a 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010908:	b004      	add	sp, #16
 801090a:	bd10      	pop	{r4, pc}

0801090c <_ZN13FT81xRenderer9cmd_trackEsssss>:
		int16_t tag) {
 801090c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	b[2] = width;
 801090e:	f8ad 3008 	strh.w	r3, [sp, #8]
		int16_t tag) {
 8010912:	4604      	mov	r4, r0
	b[3] = height;
 8010914:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
	b[1] = y;
 8010918:	f8ad 2006 	strh.w	r2, [sp, #6]
	b[3] = height;
 801091c:	f8ad 300a 	strh.w	r3, [sp, #10]
	b[4] = tag;
 8010920:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
	b[0] = x;
 8010924:	f8ad 1004 	strh.w	r1, [sp, #4]
	checkfree(4 + sizeof(b));
 8010928:	2110      	movs	r1, #16
	b[4] = tag;
 801092a:	f8ad 300c 	strh.w	r3, [sp, #12]
	b[5] = 0; // dummy pad
 801092e:	2300      	movs	r3, #0
 8010930:	f8ad 300e 	strh.w	r3, [sp, #14]
	checkfree(4 + sizeof(b));
 8010934:	6803      	ldr	r3, [r0, #0]
 8010936:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801093a:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 801093c:	4620      	mov	r0, r4
 801093e:	f06f 01d3 	mvn.w	r1, #211	; 0xd3
 8010942:	f7fe fdc7 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cN((uint8_t*) &b, sizeof(b));
 8010946:	220c      	movs	r2, #12
 8010948:	a901      	add	r1, sp, #4
 801094a:	4620      	mov	r0, r4
 801094c:	f7ff fd26 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 8010950:	b004      	add	sp, #16
 8010952:	bd10      	pop	{r4, pc}

08010954 <_ZN13FT81xRenderer13cmd_snapshot2Emmtttt>:
/*
 * 5.64 CMD_SNAPSHOT2
 * Take a snapshot of the current screen
 */
void FT81xRenderer::cmd_snapshot2(uint32_t fmt, uint32_t ptr, uint16_t x,
		uint16_t y, uint16_t width, uint16_t height) {
 8010954:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint16_t b[4];
	b[0] = x;
 8010956:	f8ad 3000 	strh.w	r3, [sp]
		uint16_t y, uint16_t width, uint16_t height) {
 801095a:	4604      	mov	r4, r0
	b[1] = y;
 801095c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
		uint16_t y, uint16_t width, uint16_t height) {
 8010960:	460e      	mov	r6, r1
	b[2] = width;
	b[3] = height;

	// check that we have enough space then send command
	checkfree(12 + sizeof(b));
 8010962:	2114      	movs	r1, #20
		uint16_t y, uint16_t width, uint16_t height) {
 8010964:	4615      	mov	r5, r2
	b[1] = y;
 8010966:	f8ad 3002 	strh.w	r3, [sp, #2]
	b[2] = width;
 801096a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801096e:	f8ad 3004 	strh.w	r3, [sp, #4]
	b[3] = height;
 8010972:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010976:	f8ad 3006 	strh.w	r3, [sp, #6]
	checkfree(12 + sizeof(b));
 801097a:	6803      	ldr	r3, [r0, #0]
 801097c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010980:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 8010982:	4620      	mov	r0, r4
 8010984:	f06f 01c8 	mvn.w	r1, #200	; 0xc8
 8010988:	f7fe fda4 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 801098c:	4631      	mov	r1, r6
 801098e:	4620      	mov	r0, r4
 8010990:	f7fe fda0 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
 8010994:	4629      	mov	r1, r5
 8010996:	4620      	mov	r0, r4
 8010998:	f7fe fd9c 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cFFFFFF(0x37);
	cI(fmt);
	cI(ptr);
	cN((uint8_t*) &b, sizeof(b));
 801099c:	2208      	movs	r2, #8
 801099e:	4669      	mov	r1, sp
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7ff fcfb 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 80109a6:	b002      	add	sp, #8
 80109a8:	bd70      	pop	{r4, r5, r6, pc}

080109aa <_ZN13FT81xRenderer13cmd_setbitmapEmttt>:
/*
 * 5.65 CMD_SETBITMAP
 * Set up display list for bitmap
 */
void FT81xRenderer::cmd_setbitmap(uint32_t addr, uint16_t fmt, uint16_t width,
		uint16_t height) {
 80109aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint16_t b[4];
	b[0] = fmt;
	b[1] = width;
 80109ac:	f8ad 3002 	strh.w	r3, [sp, #2]
		uint16_t height) {
 80109b0:	4604      	mov	r4, r0
	b[2] = height;
 80109b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
		uint16_t height) {
 80109b6:	460d      	mov	r5, r1
	b[0] = fmt;
 80109b8:	f8ad 2000 	strh.w	r2, [sp]
	b[3] = 0;

	// check that we have enough space then send command
	checkfree(8 + sizeof(b));
 80109bc:	2110      	movs	r1, #16
	b[2] = height;
 80109be:	f8ad 3004 	strh.w	r3, [sp, #4]
	b[3] = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	checkfree(8 + sizeof(b));
 80109c8:	6803      	ldr	r3, [r0, #0]
 80109ca:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80109ce:	4798      	blx	r3
	cmd32(byte | 0xffffff00);
 80109d0:	4620      	mov	r0, r4
 80109d2:	f06f 01bc 	mvn.w	r1, #188	; 0xbc
 80109d6:	f7fe fd7d 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cmd32(word);
 80109da:	4629      	mov	r1, r5
 80109dc:	4620      	mov	r0, r4
 80109de:	f7fe fd79 	bl	800f4d4 <_ZN13FT81xRenderer5cmd32Em>
	cFFFFFF(0x43);
	cI(addr);
	cN((uint8_t*) &b, sizeof(b));
 80109e2:	2208      	movs	r2, #8
 80109e4:	4669      	mov	r1, sp
 80109e6:	4620      	mov	r0, r4
 80109e8:	f7ff fcd8 	bl	801039c <_ZN13FT81xRenderer2cNEPht>
}
 80109ec:	b003      	add	sp, #12
 80109ee:	bd30      	pop	{r4, r5, pc}

080109f0 <_ZN11QSPIWrapper5setupEm>:
static uint8_t buffer[256];
static uint16_t index = 0;
static uint16_t length;


HAL_StatusTypeDef QSPIWrapper::setup(uint32_t prescaler) {
 80109f0:	b538      	push	{r3, r4, r5, lr}
	if(fake_qspi) {
 80109f2:	7c05      	ldrb	r5, [r0, #16]
HAL_StatusTypeDef QSPIWrapper::setup(uint32_t prescaler) {
 80109f4:	4604      	mov	r4, r0
	if(fake_qspi) {
 80109f6:	b145      	cbz	r5, 8010a0a <_ZN11QSPIWrapper5setupEm+0x1a>
		spi->Init.BaudRatePrescaler = prescaler;
 80109f8:	6880      	ldr	r0, [r0, #8]
 80109fa:	61c1      	str	r1, [r0, #28]
		HAL_SPI_DeInit(spi);
 80109fc:	f7f7 f98c 	bl	8007d18 <HAL_SPI_DeInit>
		return HAL_SPI_Init(spi);
 8010a00:	68a0      	ldr	r0, [r4, #8]
		HAL_QSPI_DeInit(qspi);
		HAL_QSPI_Init(qspi);
	}

	return HAL_OK;
}
 8010a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return HAL_SPI_Init(spi);
 8010a06:	f7f7 b8f1 	b.w	8007bec <HAL_SPI_Init>
		qspi->Init.ClockPrescaler = prescaler;
 8010a0a:	68c0      	ldr	r0, [r0, #12]
 8010a0c:	6041      	str	r1, [r0, #4]
		HAL_QSPI_DeInit(qspi);
 8010a0e:	f7f4 ff97 	bl	8005940 <HAL_QSPI_DeInit>
		HAL_QSPI_Init(qspi);
 8010a12:	68e0      	ldr	r0, [r4, #12]
 8010a14:	f7f4 ff46 	bl	80058a4 <HAL_QSPI_Init>
}
 8010a18:	4628      	mov	r0, r5
 8010a1a:	bd38      	pop	{r3, r4, r5, pc}

08010a1c <_ZN11QSPIWrapper5flushEm>:
		return HAL_QSPI_Receive(qspi, pData, Timeout);
	}
}

HAL_StatusTypeDef QSPIWrapper::flush(uint32_t Timeout) {
	return HAL_SPI_Transmit(spi, buffer, index, Timeout);
 8010a1c:	4a03      	ldr	r2, [pc, #12]	; (8010a2c <_ZN11QSPIWrapper5flushEm+0x10>)
HAL_StatusTypeDef QSPIWrapper::flush(uint32_t Timeout) {
 8010a1e:	460b      	mov	r3, r1
	return HAL_SPI_Transmit(spi, buffer, index, Timeout);
 8010a20:	6880      	ldr	r0, [r0, #8]
 8010a22:	8812      	ldrh	r2, [r2, #0]
 8010a24:	4902      	ldr	r1, [pc, #8]	; (8010a30 <_ZN11QSPIWrapper5flushEm+0x14>)
 8010a26:	f7f7 b98e 	b.w	8007d46 <HAL_SPI_Transmit>
 8010a2a:	bf00      	nop
 8010a2c:	2404155c 	.word	0x2404155c
 8010a30:	2404155e 	.word	0x2404155e

08010a34 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm>:
	if(fake_qspi) {
 8010a34:	7c03      	ldrb	r3, [r0, #16]
HAL_StatusTypeDef QSPIWrapper::run(QSPI_CommandTypeDef *cmd, uint32_t Timeout) {
 8010a36:	4694      	mov	ip, r2
 8010a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a3a:	460c      	mov	r4, r1
	if(fake_qspi) {
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f000 8088 	beq.w	8010b52 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x11e>
		length = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	4d46      	ldr	r5, [pc, #280]	; (8010b60 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x12c>)
		index = 0;
 8010a46:	4f47      	ldr	r7, [pc, #284]	; (8010b64 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x130>)
		length = 0;
 8010a48:	802b      	strh	r3, [r5, #0]
		index = 0;
 8010a4a:	803b      	strh	r3, [r7, #0]
		if(cmd->InstructionMode == QSPI_INSTRUCTION_1_LINE) {
 8010a4c:	698b      	ldr	r3, [r1, #24]
 8010a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a52:	d12c      	bne.n	8010aae <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x7a>
			buffer[index++] = cmd->Instruction;
 8010a54:	2301      	movs	r3, #1
 8010a56:	6809      	ldr	r1, [r1, #0]
 8010a58:	4a43      	ldr	r2, [pc, #268]	; (8010b68 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x134>)
 8010a5a:	803b      	strh	r3, [r7, #0]
 8010a5c:	7011      	strb	r1, [r2, #0]
			length++;
 8010a5e:	802b      	strh	r3, [r5, #0]
		if(cmd->AddressMode == QSPI_ADDRESS_1_LINE) {
 8010a60:	69e3      	ldr	r3, [r4, #28]
 8010a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a66:	d16b      	bne.n	8010b40 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x10c>
			if(cmd->AddressSize == QSPI_ADDRESS_8_BITS) {
 8010a68:	68e2      	ldr	r2, [r4, #12]
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010a6a:	883b      	ldrh	r3, [r7, #0]
				length += 1;
 8010a6c:	882e      	ldrh	r6, [r5, #0]
			if(cmd->AddressSize == QSPI_ADDRESS_8_BITS) {
 8010a6e:	bb12      	cbnz	r2, 8010ab6 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x82>
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010a70:	1c59      	adds	r1, r3, #1
 8010a72:	6862      	ldr	r2, [r4, #4]
				length += 1;
 8010a74:	3601      	adds	r6, #1
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010a76:	8039      	strh	r1, [r7, #0]
 8010a78:	493b      	ldr	r1, [pc, #236]	; (8010b68 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x134>)
 8010a7a:	54ca      	strb	r2, [r1, r3]
				length += 3;
 8010a7c:	802e      	strh	r6, [r5, #0]
		length += cmd->DummyCycles;
 8010a7e:	8829      	ldrh	r1, [r5, #0]
		index += cmd->DummyCycles;
 8010a80:	8aa3      	ldrh	r3, [r4, #20]
 8010a82:	883a      	ldrh	r2, [r7, #0]
 8010a84:	441a      	add	r2, r3
		length += cmd->DummyCycles;
 8010a86:	440b      	add	r3, r1
		if(cmd->DataMode == QSPI_DATA_1_LINE) {
 8010a88:	6a61      	ldr	r1, [r4, #36]	; 0x24
		index += cmd->DummyCycles;
 8010a8a:	b292      	uxth	r2, r2
		length += cmd->DummyCycles;
 8010a8c:	b29b      	uxth	r3, r3
		if(cmd->DataMode == QSPI_DATA_1_LINE) {
 8010a8e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
		index += cmd->DummyCycles;
 8010a92:	803a      	strh	r2, [r7, #0]
		length += cmd->DummyCycles;
 8010a94:	802b      	strh	r3, [r5, #0]
		if(cmd->DataMode == QSPI_DATA_1_LINE) {
 8010a96:	d159      	bne.n	8010b4c <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x118>
			length += cmd->NbData;
 8010a98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010a9a:	440b      	add	r3, r1
 8010a9c:	802b      	strh	r3, [r5, #0]
		if(index == length) {
 8010a9e:	882b      	ldrh	r3, [r5, #0]
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d15b      	bne.n	8010b5c <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x128>
			return flush(Timeout);
 8010aa4:	4661      	mov	r1, ip
}
 8010aa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return flush(Timeout);
 8010aaa:	f7ff bfb7 	b.w	8010a1c <_ZN11QSPIWrapper5flushEm>
		} else if(cmd->InstructionMode == QSPI_INSTRUCTION_NONE) {
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d0d6      	beq.n	8010a60 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x2c>
			return HAL_ERROR;
 8010ab2:	2001      	movs	r0, #1
}
 8010ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if(cmd->AddressSize == QSPI_ADDRESS_16_BITS) {
 8010ab6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8010aba:	d10d      	bne.n	8010ad8 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0xa4>
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010abc:	6862      	ldr	r2, [r4, #4]
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010abe:	f103 0e02 	add.w	lr, r3, #2
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010ac2:	4929      	ldr	r1, [pc, #164]	; (8010b68 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x134>)
				length += 2;
 8010ac4:	3602      	adds	r6, #2
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010ac6:	0a12      	lsrs	r2, r2, #8
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010ac8:	f8a7 e000 	strh.w	lr, [r7]
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010acc:	54ca      	strb	r2, [r1, r3]
 8010ace:	3301      	adds	r3, #1
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010ad0:	6862      	ldr	r2, [r4, #4]
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	54ca      	strb	r2, [r1, r3]
				length += 2;
 8010ad6:	e7d1      	b.n	8010a7c <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x48>
			} else if(cmd->AddressSize == QSPI_ADDRESS_24_BITS) {
 8010ad8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010adc:	d114      	bne.n	8010b08 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0xd4>
				buffer[index++] = (cmd->Address >> 16) & 0xFF;
 8010ade:	88e2      	ldrh	r2, [r4, #6]
 8010ae0:	f103 0e01 	add.w	lr, r3, #1
 8010ae4:	4920      	ldr	r1, [pc, #128]	; (8010b68 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x134>)
				length += 3;
 8010ae6:	3603      	adds	r6, #3
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010ae8:	fa1f fe8e 	uxth.w	lr, lr
				buffer[index++] = (cmd->Address >> 16) & 0xFF;
 8010aec:	54ca      	strb	r2, [r1, r3]
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010aee:	6862      	ldr	r2, [r4, #4]
 8010af0:	0a12      	lsrs	r2, r2, #8
 8010af2:	f801 200e 	strb.w	r2, [r1, lr]
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010af6:	f103 0e03 	add.w	lr, r3, #3
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010afa:	3302      	adds	r3, #2
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010afc:	6862      	ldr	r2, [r4, #4]
 8010afe:	f8a7 e000 	strh.w	lr, [r7]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	54ca      	strb	r2, [r1, r3]
				length += 3;
 8010b06:	e7b9      	b.n	8010a7c <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x48>
			} else if(cmd->AddressSize == QSPI_ADDRESS_32_BITS) {
 8010b08:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8010b0c:	d1b7      	bne.n	8010a7e <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x4a>
				buffer[index++] = (cmd->Address >> 24) & 0xFF;
 8010b0e:	79e2      	ldrb	r2, [r4, #7]
				length += 4;
 8010b10:	3604      	adds	r6, #4
				buffer[index++] = (cmd->Address >> 24) & 0xFF;
 8010b12:	4915      	ldr	r1, [pc, #84]	; (8010b68 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x134>)
 8010b14:	54ca      	strb	r2, [r1, r3]
 8010b16:	1c5a      	adds	r2, r3, #1
				buffer[index++] = (cmd->Address >> 16) & 0xFF;
 8010b18:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010b1c:	b292      	uxth	r2, r2
 8010b1e:	f801 e002 	strb.w	lr, [r1, r2]
 8010b22:	f103 0e02 	add.w	lr, r3, #2
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010b26:	6862      	ldr	r2, [r4, #4]
 8010b28:	fa1f fe8e 	uxth.w	lr, lr
 8010b2c:	0a12      	lsrs	r2, r2, #8
 8010b2e:	f801 200e 	strb.w	r2, [r1, lr]
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010b32:	1d1a      	adds	r2, r3, #4
				buffer[index++] = (cmd->Address >> 8)  & 0xFF;
 8010b34:	3303      	adds	r3, #3
				buffer[index++] = (cmd->Address >> 0)  & 0xFF;
 8010b36:	803a      	strh	r2, [r7, #0]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	6862      	ldr	r2, [r4, #4]
 8010b3c:	54ca      	strb	r2, [r1, r3]
				length += 4;
 8010b3e:	e79d      	b.n	8010a7c <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x48>
		} else if(cmd->AddressMode == QSPI_ADDRESS_NONE) {
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d09c      	beq.n	8010a7e <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x4a>
			index = 0;
 8010b44:	2300      	movs	r3, #0
 8010b46:	803b      	strh	r3, [r7, #0]
			length = 0;
 8010b48:	802b      	strh	r3, [r5, #0]
			return HAL_ERROR;
 8010b4a:	e7b2      	b.n	8010ab2 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x7e>
		} else if(cmd->DataMode == QSPI_DATA_NONE) {
 8010b4c:	2900      	cmp	r1, #0
 8010b4e:	d0a6      	beq.n	8010a9e <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x6a>
 8010b50:	e7f8      	b.n	8010b44 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x110>
		return HAL_QSPI_Command(qspi, cmd, Timeout);
 8010b52:	68c0      	ldr	r0, [r0, #12]
}
 8010b54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return HAL_QSPI_Command(qspi, cmd, Timeout);
 8010b58:	f7f4 bf03 	b.w	8005962 <HAL_QSPI_Command>
		return HAL_OK;
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	e7a9      	b.n	8010ab4 <_ZN11QSPIWrapper3runEP19QSPI_CommandTypeDefm+0x80>
 8010b60:	2404165e 	.word	0x2404165e
 8010b64:	2404155c 	.word	0x2404155c
 8010b68:	2404155e 	.word	0x2404155e

08010b6c <_ZN11QSPIWrapper8transmitEPhm>:
HAL_StatusTypeDef QSPIWrapper::transmit(uint8_t *pData, uint32_t Timeout) {
 8010b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(fake_qspi) {
 8010b70:	f890 e010 	ldrb.w	lr, [r0, #16]
HAL_StatusTypeDef QSPIWrapper::transmit(uint8_t *pData, uint32_t Timeout) {
 8010b74:	460b      	mov	r3, r1
 8010b76:	4616      	mov	r6, r2
	if(fake_qspi) {
 8010b78:	f1be 0f00 	cmp.w	lr, #0
 8010b7c:	d025      	beq.n	8010bca <_ZN11QSPIWrapper8transmitEPhm+0x5e>
 8010b7e:	4f15      	ldr	r7, [pc, #84]	; (8010bd4 <_ZN11QSPIWrapper8transmitEPhm+0x68>)
		while(index < length) {
 8010b80:	f04f 0c00 	mov.w	ip, #0
 8010b84:	4a14      	ldr	r2, [pc, #80]	; (8010bd8 <_ZN11QSPIWrapper8transmitEPhm+0x6c>)
 8010b86:	883c      	ldrh	r4, [r7, #0]
 8010b88:	4d14      	ldr	r5, [pc, #80]	; (8010bdc <_ZN11QSPIWrapper8transmitEPhm+0x70>)
 8010b8a:	1a61      	subs	r1, r4, r1
 8010b8c:	8812      	ldrh	r2, [r2, #0]
 8010b8e:	4425      	add	r5, r4
 8010b90:	b289      	uxth	r1, r1
 8010b92:	eb03 0801 	add.w	r8, r3, r1
 8010b96:	fa1f f888 	uxth.w	r8, r8
 8010b9a:	4542      	cmp	r2, r8
 8010b9c:	d905      	bls.n	8010baa <_ZN11QSPIWrapper8transmitEPhm+0x3e>
			buffer[index] = *(pData++);
 8010b9e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8010ba2:	f805 cb01 	strb.w	ip, [r5], #1
		while(index < length) {
 8010ba6:	46f4      	mov	ip, lr
 8010ba8:	e7f3      	b.n	8010b92 <_ZN11QSPIWrapper8transmitEPhm+0x26>
 8010baa:	1b13      	subs	r3, r2, r4
 8010bac:	42a2      	cmp	r2, r4
 8010bae:	bf38      	it	cc
 8010bb0:	2300      	movcc	r3, #0
 8010bb2:	fa14 f383 	uxtah	r3, r4, r3
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	f1bc 0f00 	cmp.w	ip, #0
 8010bbc:	d000      	beq.n	8010bc0 <_ZN11QSPIWrapper8transmitEPhm+0x54>
 8010bbe:	803b      	strh	r3, [r7, #0]
		HAL_StatusTypeDef status = flush(Timeout);
 8010bc0:	4631      	mov	r1, r6
}
 8010bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_StatusTypeDef status = flush(Timeout);
 8010bc6:	f7ff bf29 	b.w	8010a1c <_ZN11QSPIWrapper5flushEm>
		return HAL_QSPI_Transmit(qspi, pData, Timeout);
 8010bca:	68c0      	ldr	r0, [r0, #12]
}
 8010bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return HAL_QSPI_Transmit(qspi, pData, Timeout);
 8010bd0:	f7f4 bf0a 	b.w	80059e8 <HAL_QSPI_Transmit>
 8010bd4:	2404155c 	.word	0x2404155c
 8010bd8:	2404165e 	.word	0x2404165e
 8010bdc:	2404155e 	.word	0x2404155e

08010be0 <_ZN11QSPIWrapper7receiveEPhm>:
HAL_StatusTypeDef QSPIWrapper::receive(uint8_t *pData, uint32_t Timeout) {
 8010be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(fake_qspi) {
 8010be2:	7c03      	ldrb	r3, [r0, #16]
HAL_StatusTypeDef QSPIWrapper::receive(uint8_t *pData, uint32_t Timeout) {
 8010be4:	4604      	mov	r4, r0
 8010be6:	460e      	mov	r6, r1
 8010be8:	4615      	mov	r5, r2
	if(fake_qspi) {
 8010bea:	b1cb      	cbz	r3, 8010c20 <_ZN11QSPIWrapper7receiveEPhm+0x40>
		if(index > 0) {
 8010bec:	4f0f      	ldr	r7, [pc, #60]	; (8010c2c <_ZN11QSPIWrapper7receiveEPhm+0x4c>)
		taskENTER_CRITICAL();
 8010bee:	f7fa fac9 	bl	800b184 <vPortEnterCritical>
		if(index > 0) {
 8010bf2:	883b      	ldrh	r3, [r7, #0]
 8010bf4:	b11b      	cbz	r3, 8010bfe <_ZN11QSPIWrapper7receiveEPhm+0x1e>
			flush(Timeout);
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f7ff ff0f 	bl	8010a1c <_ZN11QSPIWrapper5flushEm>
		uint32_t receive_size = length - index;
 8010bfe:	4b0c      	ldr	r3, [pc, #48]	; (8010c30 <_ZN11QSPIWrapper7receiveEPhm+0x50>)
		HAL_StatusTypeDef out = HAL_SPI_Receive(spi, pData, receive_size, Timeout);
 8010c00:	4631      	mov	r1, r6
 8010c02:	68a0      	ldr	r0, [r4, #8]
 8010c04:	881a      	ldrh	r2, [r3, #0]
 8010c06:	883b      	ldrh	r3, [r7, #0]
 8010c08:	1ad2      	subs	r2, r2, r3
 8010c0a:	462b      	mov	r3, r5
 8010c0c:	b292      	uxth	r2, r2
 8010c0e:	f7f7 fb4c 	bl	80082aa <HAL_SPI_Receive>
 8010c12:	4604      	mov	r4, r0
		taskEXIT_CRITICAL();
 8010c14:	f7fa fad6 	bl	800b1c4 <vPortExitCritical>
			return out;
 8010c18:	1e20      	subs	r0, r4, #0
 8010c1a:	bf18      	it	ne
 8010c1c:	2001      	movne	r0, #1
}
 8010c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return HAL_QSPI_Receive(qspi, pData, Timeout);
 8010c20:	68c0      	ldr	r0, [r0, #12]
}
 8010c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return HAL_QSPI_Receive(qspi, pData, Timeout);
 8010c26:	f7f4 bf38 	b.w	8005a9a <HAL_QSPI_Receive>
 8010c2a:	bf00      	nop
 8010c2c:	2404155c 	.word	0x2404155c
 8010c30:	2404165e 	.word	0x2404165e

08010c34 <_Z11flash_fatalm>:

void flash_ready() {}
void flash_success() {}
void flash_error() {}
void flash_fatal(uint32_t error_code) {
	while(1);
 8010c34:	e7fe      	b.n	8010c34 <_Z11flash_fatalm>

08010c36 <_Z12__read_flagsv>:


/*
 * Reads the flag status register and returns the value of the 8-bits register
 */
uint8_t __read_flags() {
 8010c36:	b500      	push	{lr}
 8010c38:	b091      	sub	sp, #68	; 0x44
	Command cmd = { 0 };
 8010c3a:	2238      	movs	r2, #56	; 0x38
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	a802      	add	r0, sp, #8
 8010c40:	f005 faa6 	bl	8016190 <memset>
	load_default_command(&cmd);
 8010c44:	a802      	add	r0, sp, #8
 8010c46:	f000 f97e 	bl	8010f46 <_Z20load_default_commandP7Command>
	with_data(&cmd, 1);
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	a802      	add	r0, sp, #8
 8010c4e:	f000 f992 	bl	8010f76 <_Z9with_dataP7Commandm>

	if(!qspi_run(&cmd, READ_FLAG_STATUS_REGISTER)) {
 8010c52:	2170      	movs	r1, #112	; 0x70
 8010c54:	a802      	add	r0, sp, #8
 8010c56:	f000 f993 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010c5a:	b918      	cbnz	r0, 8010c64 <_Z12__read_flagsv+0x2e>
		flash_fatal(ERROR_READ | ERROR_RUN);
 8010c5c:	f24f 20ff 	movw	r0, #62207	; 0xf2ff
 8010c60:	f7ff ffe8 	bl	8010c34 <_Z11flash_fatalm>
	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8010c64:	f10d 0007 	add.w	r0, sp, #7
 8010c68:	f000 f9cc 	bl	8011004 <_Z12qspi_receivePh>
 8010c6c:	b918      	cbnz	r0, 8010c76 <_Z12__read_flagsv+0x40>
		flash_fatal(ERROR_READ | ERROR_RECEIVE);
 8010c6e:	f24f 20fd 	movw	r0, #62205	; 0xf2fd
 8010c72:	f7ff ffdf 	bl	8010c34 <_Z11flash_fatalm>
	}

	return flags;
}
 8010c76:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010c7a:	b011      	add	sp, #68	; 0x44
 8010c7c:	f85d fb04 	ldr.w	pc, [sp], #4

08010c80 <_Z13__read_statusv>:

uint8_t __read_status() {
 8010c80:	b500      	push	{lr}
 8010c82:	b091      	sub	sp, #68	; 0x44
	Command cmd = { 0 };
 8010c84:	2238      	movs	r2, #56	; 0x38
 8010c86:	2100      	movs	r1, #0
 8010c88:	a802      	add	r0, sp, #8
 8010c8a:	f005 fa81 	bl	8016190 <memset>
	load_default_command(&cmd);
 8010c8e:	a802      	add	r0, sp, #8
 8010c90:	f000 f959 	bl	8010f46 <_Z20load_default_commandP7Command>
	with_data(&cmd, 1);
 8010c94:	2101      	movs	r1, #1
 8010c96:	a802      	add	r0, sp, #8
 8010c98:	f000 f96d 	bl	8010f76 <_Z9with_dataP7Commandm>

	if(!qspi_run(&cmd, READ_STATUS_REGISTER)) {
 8010c9c:	2105      	movs	r1, #5
 8010c9e:	a802      	add	r0, sp, #8
 8010ca0:	f000 f96e 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010ca4:	b918      	cbnz	r0, 8010cae <_Z13__read_statusv+0x2e>
		flash_fatal(ERROR_READ | ERROR_RUN);
 8010ca6:	f24f 20ff 	movw	r0, #62207	; 0xf2ff
 8010caa:	f7ff ffc3 	bl	8010c34 <_Z11flash_fatalm>
	}

	uint8_t flags;

	if(!qspi_receive(&flags)) {
 8010cae:	f10d 0007 	add.w	r0, sp, #7
 8010cb2:	f000 f9a7 	bl	8011004 <_Z12qspi_receivePh>
 8010cb6:	b918      	cbnz	r0, 8010cc0 <_Z13__read_statusv+0x40>
		flash_fatal(ERROR_READ | ERROR_RECEIVE);
 8010cb8:	f24f 20fd 	movw	r0, #62205	; 0xf2fd
 8010cbc:	f7ff ffba 	bl	8010c34 <_Z11flash_fatalm>
	}

	return flags;
}
 8010cc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010cc4:	b011      	add	sp, #68	; 0x44
 8010cc6:	f85d fb04 	ldr.w	pc, [sp], #4

08010cca <_Z20__write_enable_latchv>:

/*
 * Enables the write latch.
 * This function must be called before each PROGRAM or ERASE operation.
 */
bool __write_enable_latch() {
 8010cca:	b500      	push	{lr}
 8010ccc:	b08f      	sub	sp, #60	; 0x3c
	Command cmd = { 0 };
 8010cce:	2100      	movs	r1, #0
 8010cd0:	2238      	movs	r2, #56	; 0x38
 8010cd2:	4668      	mov	r0, sp
 8010cd4:	f005 fa5c 	bl	8016190 <memset>
	load_default_command(&cmd);
 8010cd8:	4668      	mov	r0, sp
 8010cda:	f000 f934 	bl	8010f46 <_Z20load_default_commandP7Command>

	if(qspi_run(&cmd, WRITE_ENABLE_LATCH)) {
 8010cde:	2106      	movs	r1, #6
 8010ce0:	4668      	mov	r0, sp
 8010ce2:	f000 f94d 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010ce6:	b168      	cbz	r0, 8010d04 <_Z20__write_enable_latchv+0x3a>
		load_default_command(&cmd);
 8010ce8:	4668      	mov	r0, sp
 8010cea:	f000 f92c 	bl	8010f46 <_Z20load_default_commandP7Command>
		with_data(&cmd, 1);
 8010cee:	2101      	movs	r1, #1
 8010cf0:	4668      	mov	r0, sp
 8010cf2:	f000 f940 	bl	8010f76 <_Z9with_dataP7Commandm>

		if(qspi_poll(&cmd, READ_STATUS_REGISTER, 1, true)) {
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	2105      	movs	r1, #5
 8010cfa:	4668      	mov	r0, sp
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	f000 f951 	bl	8010fa4 <_Z9qspi_pollP7Commandmhb>
 8010d02:	b920      	cbnz	r0, 8010d0e <_Z20__write_enable_latchv+0x44>
			return true;
		}
	}

	while((__read_status() & (1 << 1)) == 0); // While is not latching
 8010d04:	f7ff ffbc 	bl	8010c80 <_Z13__read_statusv>
 8010d08:	0783      	lsls	r3, r0, #30
 8010d0a:	d5fb      	bpl.n	8010d04 <_Z20__write_enable_latchv+0x3a>

	return false;
 8010d0c:	2000      	movs	r0, #0
}
 8010d0e:	b00f      	add	sp, #60	; 0x3c
 8010d10:	f85d fb04 	ldr.w	pc, [sp], #4

08010d14 <_Z10flash_initv>:
}

/*
 * Initialises the flash driver
 */
void flash_init() {
 8010d14:	b500      	push	{lr}
 8010d16:	b091      	sub	sp, #68	; 0x44
	Command cmd = { 0 };
 8010d18:	2238      	movs	r2, #56	; 0x38
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	a802      	add	r0, sp, #8
 8010d1e:	f005 fa37 	bl	8016190 <memset>
	load_default_command(&cmd);
 8010d22:	a802      	add	r0, sp, #8
 8010d24:	f000 f90f 	bl	8010f46 <_Z20load_default_commandP7Command>

	cmd.qspi_command.InstructionMode =	QSPI_INSTRUCTION_1_LINE;
 8010d28:	f44f 7380 	mov.w	r3, #256	; 0x100
	cmd.qspi_command.Instruction = 0x35;

	if(HAL_QSPI_Command(&hqspi, &(cmd.qspi_command), IO_TIMEOUT) != HAL_OK) {
 8010d2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010d30:	a902      	add	r1, sp, #8
	cmd.qspi_command.InstructionMode =	QSPI_INSTRUCTION_1_LINE;
 8010d32:	9308      	str	r3, [sp, #32]
	cmd.qspi_command.Instruction = 0x35;
 8010d34:	2335      	movs	r3, #53	; 0x35
	if(HAL_QSPI_Command(&hqspi, &(cmd.qspi_command), IO_TIMEOUT) != HAL_OK) {
 8010d36:	482c      	ldr	r0, [pc, #176]	; (8010de8 <_Z10flash_initv+0xd4>)
	cmd.qspi_command.Instruction = 0x35;
 8010d38:	9302      	str	r3, [sp, #8]
	if(HAL_QSPI_Command(&hqspi, &(cmd.qspi_command), IO_TIMEOUT) != HAL_OK) {
 8010d3a:	f7f4 fe12 	bl	8005962 <HAL_QSPI_Command>
 8010d3e:	b118      	cbz	r0, 8010d48 <_Z10flash_initv+0x34>
		flash_fatal(ERROR_WRITE | ERROR_RUN);
 8010d40:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8010d44:	f7ff ff76 	bl	8010c34 <_Z11flash_fatalm>
	}

	uint16_t nv_configuration = 0b0000111001100111;
 8010d48:	f640 6367 	movw	r3, #3687	; 0xe67

	load_default_command(&cmd);
 8010d4c:	a802      	add	r0, sp, #8
	uint16_t nv_configuration = 0b0000111001100111;
 8010d4e:	f8ad 3004 	strh.w	r3, [sp, #4]
	load_default_command(&cmd);
 8010d52:	f000 f8f8 	bl	8010f46 <_Z20load_default_commandP7Command>
	with_data(&cmd, 2);
 8010d56:	2102      	movs	r1, #2
 8010d58:	a802      	add	r0, sp, #8
 8010d5a:	f000 f90c 	bl	8010f76 <_Z9with_dataP7Commandm>

	if(!qspi_run(&cmd, 0xB5)) { // Write non-volatile configuration register
 8010d5e:	21b5      	movs	r1, #181	; 0xb5
 8010d60:	a802      	add	r0, sp, #8
 8010d62:	f000 f90d 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010d66:	b918      	cbnz	r0, 8010d70 <_Z10flash_initv+0x5c>
		flash_fatal(ERROR_WRITE | ERROR_RUN);
 8010d68:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8010d6c:	f7ff ff62 	bl	8010c34 <_Z11flash_fatalm>
	}

	uint16_t data;

	if(!qspi_receive((uint8_t*) &data)) {
 8010d70:	f10d 0006 	add.w	r0, sp, #6
 8010d74:	f000 f946 	bl	8011004 <_Z12qspi_receivePh>
 8010d78:	b918      	cbnz	r0, 8010d82 <_Z10flash_initv+0x6e>
		flash_fatal(ERROR_READ | ERROR_RECEIVE);
 8010d7a:	f24f 20fd 	movw	r0, #62205	; 0xf2fd
 8010d7e:	f7ff ff59 	bl	8010c34 <_Z11flash_fatalm>
	}

	if(data != nv_configuration) {
 8010d82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010d86:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d028      	beq.n	8010de0 <_Z10flash_initv+0xcc>
		__write_enable_latch();
 8010d8e:	f7ff ff9c 	bl	8010cca <_Z20__write_enable_latchv>

		load_default_command(&cmd);
 8010d92:	a802      	add	r0, sp, #8
 8010d94:	f000 f8d7 	bl	8010f46 <_Z20load_default_commandP7Command>
		with_data(&cmd, 2);
 8010d98:	2102      	movs	r1, #2
 8010d9a:	a802      	add	r0, sp, #8
 8010d9c:	f000 f8eb 	bl	8010f76 <_Z9with_dataP7Commandm>

		if(!__write_enable_latch()) {
 8010da0:	f7ff ff93 	bl	8010cca <_Z20__write_enable_latchv>
 8010da4:	b918      	cbnz	r0, 8010dae <_Z10flash_initv+0x9a>
			flash_fatal(ERROR_WRITE | ERROR_RUN);
 8010da6:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8010daa:	f7ff ff43 	bl	8010c34 <_Z11flash_fatalm>
		}

		if(!qspi_run(&cmd, 0xB1)) { // Write non-volatile configuration register
 8010dae:	21b1      	movs	r1, #177	; 0xb1
 8010db0:	a802      	add	r0, sp, #8
 8010db2:	f000 f8e5 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010db6:	b918      	cbnz	r0, 8010dc0 <_Z10flash_initv+0xac>
			flash_fatal(ERROR_WRITE | ERROR_RUN);
 8010db8:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8010dbc:	f7ff ff3a 	bl	8010c34 <_Z11flash_fatalm>
		}

		if(!qspi_transmit((uint8_t*) &nv_configuration)) {
 8010dc0:	a801      	add	r0, sp, #4
 8010dc2:	f000 f911 	bl	8010fe8 <_Z13qspi_transmitPh>
 8010dc6:	b918      	cbnz	r0, 8010dd0 <_Z10flash_initv+0xbc>
			flash_fatal(ERROR_WRITE | ERROR_RUN);
 8010dc8:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8010dcc:	f7ff ff32 	bl	8010c34 <_Z11flash_fatalm>
		}

		while((__read_flags() & (1 << 7)) == 0);
 8010dd0:	f7ff ff31 	bl	8010c36 <_Z12__read_flagsv>
 8010dd4:	0602      	lsls	r2, r0, #24
 8010dd6:	d5fb      	bpl.n	8010dd0 <_Z10flash_initv+0xbc>
		while((__read_status() & (1 << 1)) == (1 << 1)); // While is latching
 8010dd8:	f7ff ff52 	bl	8010c80 <_Z13__read_statusv>
 8010ddc:	0783      	lsls	r3, r0, #30
 8010dde:	d4fb      	bmi.n	8010dd8 <_Z10flash_initv+0xc4>
	}
}
 8010de0:	b011      	add	sp, #68	; 0x44
 8010de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010de6:	bf00      	nop
 8010de8:	240008c0 	.word	0x240008c0

08010dec <_Z10flash_readmPhm>:
	if(!qspi_run(&cmd, 0x99)) { // Write volatile configuration register
		flash_fatal(ERROR_WRITE | ERROR_RUN);
	}
}

void flash_read(uint32_t address, uint8_t* buffer, uint32_t length) {
 8010dec:	b570      	push	{r4, r5, r6, lr}
 8010dee:	b08e      	sub	sp, #56	; 0x38
 8010df0:	4606      	mov	r6, r0
 8010df2:	4615      	mov	r5, r2
 8010df4:	460c      	mov	r4, r1
	Command cmd;
	load_default_command(&cmd);
 8010df6:	4668      	mov	r0, sp
 8010df8:	f000 f8a5 	bl	8010f46 <_Z20load_default_commandP7Command>
	with_address(&cmd, address);
 8010dfc:	4631      	mov	r1, r6
 8010dfe:	4668      	mov	r0, sp
 8010e00:	f000 f8b1 	bl	8010f66 <_Z12with_addressP7Commandm>
	with_data(&cmd, length);
 8010e04:	4629      	mov	r1, r5
 8010e06:	4668      	mov	r0, sp
 8010e08:	f000 f8b5 	bl	8010f76 <_Z9with_dataP7Commandm>

	cmd.qspi_command.DummyCycles = 10;
 8010e0c:	230a      	movs	r3, #10

	if(!qspi_run(&cmd, FREAD_QUAD)) {
 8010e0e:	21eb      	movs	r1, #235	; 0xeb
 8010e10:	4668      	mov	r0, sp
	cmd.qspi_command.DummyCycles = 10;
 8010e12:	9305      	str	r3, [sp, #20]
	if(!qspi_run(&cmd, FREAD_QUAD)) {
 8010e14:	f000 f8b4 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010e18:	b918      	cbnz	r0, 8010e22 <_Z10flash_readmPhm+0x36>
		flash_fatal(ERROR_READ | ERROR_RUN);
 8010e1a:	f24f 20ff 	movw	r0, #62207	; 0xf2ff
 8010e1e:	f7ff ff09 	bl	8010c34 <_Z11flash_fatalm>
	}

	if(!qspi_receive(buffer)) {
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 f8ee 	bl	8011004 <_Z12qspi_receivePh>
 8010e28:	b918      	cbnz	r0, 8010e32 <_Z10flash_readmPhm+0x46>
		flash_fatal(ERROR_READ | ERROR_RECEIVE);
 8010e2a:	f24f 20fd 	movw	r0, #62205	; 0xf2fd
 8010e2e:	f7ff ff01 	bl	8010c34 <_Z11flash_fatalm>
	}
}
 8010e32:	b00e      	add	sp, #56	; 0x38
 8010e34:	bd70      	pop	{r4, r5, r6, pc}

08010e36 <_Z18__flash_write_pagemPhm>:
 * Test providers:
 * 	 - write_ut.c
 *
 */

void __flash_write_page(uint32_t address, uint8_t* buffer, uint32_t length) {
 8010e36:	b570      	push	{r4, r5, r6, lr}
 8010e38:	b08e      	sub	sp, #56	; 0x38
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	4615      	mov	r5, r2
 8010e3e:	460c      	mov	r4, r1
	__write_enable_latch();
 8010e40:	f7ff ff43 	bl	8010cca <_Z20__write_enable_latchv>

	Command cmd;
	load_default_command(&cmd);
 8010e44:	4668      	mov	r0, sp
 8010e46:	f000 f87e 	bl	8010f46 <_Z20load_default_commandP7Command>

	with_address(&cmd, address);
 8010e4a:	4631      	mov	r1, r6
 8010e4c:	4668      	mov	r0, sp
 8010e4e:	f000 f88a 	bl	8010f66 <_Z12with_addressP7Commandm>
	with_data(&cmd, length);
 8010e52:	4629      	mov	r1, r5
 8010e54:	4668      	mov	r0, sp
 8010e56:	f000 f88e 	bl	8010f76 <_Z9with_dataP7Commandm>

	if(!qspi_run(&cmd, FWRITE_QUAD)) {
 8010e5a:	2132      	movs	r1, #50	; 0x32
 8010e5c:	4668      	mov	r0, sp
 8010e5e:	f000 f88f 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010e62:	b918      	cbnz	r0, 8010e6c <_Z18__flash_write_pagemPhm+0x36>
		flash_fatal(ERROR_WRITE | ERROR_RUN);
 8010e64:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8010e68:	f7ff fee4 	bl	8010c34 <_Z11flash_fatalm>
	}

	if(!qspi_transmit(buffer)) {
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f000 f8bb 	bl	8010fe8 <_Z13qspi_transmitPh>
 8010e72:	b918      	cbnz	r0, 8010e7c <_Z18__flash_write_pagemPhm+0x46>
		flash_fatal(ERROR_WRITE | ERROR_TRANSMIT);
 8010e74:	f644 70bf 	movw	r0, #20415	; 0x4fbf
 8010e78:	f7ff fedc 	bl	8010c34 <_Z11flash_fatalm>
	/*
	 * Checks if the controller is ready to proceed to the next command
	 */


	while((__read_status() & 1) == 1); // While is writing
 8010e7c:	f7ff ff00 	bl	8010c80 <_Z13__read_statusv>
 8010e80:	07c1      	lsls	r1, r0, #31
 8010e82:	d4fb      	bmi.n	8010e7c <_Z18__flash_write_pagemPhm+0x46>
	while((__read_flags() & (1 << 7)) == 0); // While is not ready
 8010e84:	f7ff fed7 	bl	8010c36 <_Z12__read_flagsv>
 8010e88:	0602      	lsls	r2, r0, #24
 8010e8a:	d5fb      	bpl.n	8010e84 <_Z18__flash_write_pagemPhm+0x4e>
	while((__read_status() & (1 << 1)) == (1 << 1)); // While is latching
 8010e8c:	f7ff fef8 	bl	8010c80 <_Z13__read_statusv>
 8010e90:	0783      	lsls	r3, r0, #30
 8010e92:	d4fb      	bmi.n	8010e8c <_Z18__flash_write_pagemPhm+0x56>
}
 8010e94:	b00e      	add	sp, #56	; 0x38
 8010e96:	bd70      	pop	{r4, r5, r6, pc}

08010e98 <_Z11flash_writemPhm>:

void flash_write(uint32_t address, uint8_t* buffer, uint32_t length) {
 8010e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	460e      	mov	r6, r1
	uint32_t internal_address = address % PAGE_SIZE;
 8010e9e:	b2c5      	uxtb	r5, r0

	while(internal_address + length > PAGE_SIZE) {
 8010ea0:	1957      	adds	r7, r2, r5
 8010ea2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8010ea6:	d90c      	bls.n	8010ec2 <_Z11flash_writemPhm+0x2a>
		uint32_t write_length = PAGE_SIZE - internal_address;
 8010ea8:	f5c5 7580 	rsb	r5, r5, #256	; 0x100

		__flash_write_page(address, buffer, write_length);
 8010eac:	4631      	mov	r1, r6
 8010eae:	4620      	mov	r0, r4
 8010eb0:	462a      	mov	r2, r5
		buffer += write_length;
 8010eb2:	442e      	add	r6, r5
		address += write_length;
 8010eb4:	442c      	add	r4, r5
		__flash_write_page(address, buffer, write_length);
 8010eb6:	f7ff ffbe 	bl	8010e36 <_Z18__flash_write_pagemPhm>
		length -= write_length;

		internal_address = 0;
 8010eba:	2500      	movs	r5, #0
		length -= write_length;
 8010ebc:	f5a7 7280 	sub.w	r2, r7, #256	; 0x100
	while(internal_address + length > PAGE_SIZE) {
 8010ec0:	e7ee      	b.n	8010ea0 <_Z11flash_writemPhm+0x8>
	}

	__flash_write_page(address, buffer, length);
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4620      	mov	r0, r4
}
 8010ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__flash_write_page(address, buffer, length);
 8010eca:	f7ff bfb4 	b.w	8010e36 <_Z18__flash_write_pagemPhm>

08010ece <_Z13__flash_erasemm>:
   if((__read_status() & 0b01) == 0b01) {
   		__write_disable_latch();
   	}
}

void __flash_erase(uint32_t instruction, uint32_t address) {
 8010ece:	b530      	push	{r4, r5, lr}
 8010ed0:	b08f      	sub	sp, #60	; 0x3c
 8010ed2:	460d      	mov	r5, r1
 8010ed4:	4604      	mov	r4, r0
	__write_enable_latch();
 8010ed6:	f7ff fef8 	bl	8010cca <_Z20__write_enable_latchv>


	Command cmd = { 0 };
 8010eda:	2238      	movs	r2, #56	; 0x38
 8010edc:	2100      	movs	r1, #0
 8010ede:	4668      	mov	r0, sp
 8010ee0:	f005 f956 	bl	8016190 <memset>
	load_default_command(&cmd);
 8010ee4:	4668      	mov	r0, sp
 8010ee6:	f000 f82e 	bl	8010f46 <_Z20load_default_commandP7Command>
	with_address(&cmd, address);
 8010eea:	4629      	mov	r1, r5
 8010eec:	4668      	mov	r0, sp
 8010eee:	f000 f83a 	bl	8010f66 <_Z12with_addressP7Commandm>


	if(!qspi_run(&cmd, instruction)) {
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4668      	mov	r0, sp
 8010ef6:	f000 f843 	bl	8010f80 <_Z8qspi_runP7Commandm>
 8010efa:	b918      	cbnz	r0, 8010f04 <_Z13__flash_erasemm+0x36>
		flash_fatal(ERROR_ERASE | ERROR_RUN);
 8010efc:	f24e 70ff 	movw	r0, #59391	; 0xe7ff
 8010f00:	f7ff fe98 	bl	8010c34 <_Z11flash_fatalm>

	/*
	 * Checks if the controller is ready to proceed to the next command
	 */

	while((__read_status() & 1) == 1); // While is writing
 8010f04:	f7ff febc 	bl	8010c80 <_Z13__read_statusv>
 8010f08:	07c1      	lsls	r1, r0, #31
 8010f0a:	d4fb      	bmi.n	8010f04 <_Z13__flash_erasemm+0x36>
	while((__read_flags() & (1 << 7)) == 0); // Wait until controller is ready
 8010f0c:	f7ff fe93 	bl	8010c36 <_Z12__read_flagsv>
 8010f10:	0602      	lsls	r2, r0, #24
 8010f12:	d5fb      	bpl.n	8010f0c <_Z13__flash_erasemm+0x3e>
	while((__read_status() & 0b01) == 0b01);
 8010f14:	f7ff feb4 	bl	8010c80 <_Z13__read_statusv>
 8010f18:	07c3      	lsls	r3, r0, #31
 8010f1a:	d4fb      	bmi.n	8010f14 <_Z13__flash_erasemm+0x46>
}
 8010f1c:	b00f      	add	sp, #60	; 0x3c
 8010f1e:	bd30      	pop	{r4, r5, pc}

08010f20 <_Z18flash_erase_sectorm>:

/*
 * Erases the whole sector represented by the provided address.
 * The address may be any of those within the sector.
 */
void flash_erase_sector(uint32_t address) {
 8010f20:	4601      	mov	r1, r0
	__flash_erase(ERASE_SECTOR, address);
 8010f22:	20d8      	movs	r0, #216	; 0xd8
 8010f24:	f7ff bfd3 	b.w	8010ece <_Z13__flash_erasemm>

08010f28 <_Z15flash_erase_allv>:
void flash_erase_all() {
 8010f28:	b510      	push	{r4, lr}
 8010f2a:	2400      	movs	r4, #0
		flash_erase_sector(i * SECTOR_SIZE);
 8010f2c:	4620      	mov	r0, r4
	for(uint32_t i = 0; i < NUM_SECTORS; i++) {
 8010f2e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
		flash_erase_sector(i * SECTOR_SIZE);
 8010f32:	f7ff fff5 	bl	8010f20 <_Z18flash_erase_sectorm>
	for(uint32_t i = 0; i < NUM_SECTORS; i++) {
 8010f36:	f1b4 6f80 	cmp.w	r4, #67108864	; 0x4000000
 8010f3a:	d1f7      	bne.n	8010f2c <_Z15flash_erase_allv+0x4>
}
 8010f3c:	bd10      	pop	{r4, pc}

08010f3e <_Z21flash_erase_subsectorm>:

/*
 * Erases the whole sub-sector represented by the provided address.
 * The address may be any of those within the sub-sector.
 */
void flash_erase_subsector(uint32_t address) {
 8010f3e:	4601      	mov	r1, r0
	__flash_erase(ERASE_SUBSECTOR, address);
 8010f40:	2020      	movs	r0, #32
 8010f42:	f7ff bfc4 	b.w	8010ece <_Z13__flash_erasemm>

08010f46 <_Z20load_default_commandP7Command>:




void load_default_command(Command* cmd) {
	cmd->qspi_command.Instruction = 0;
 8010f46:	2300      	movs	r3, #0
	cmd->qspi_command.Address = 0;
 8010f48:	e9c0 3300 	strd	r3, r3, [r0]
	cmd->qspi_command.AlternateBytes = 0;
	cmd->qspi_command.AddressSize = 0;
 8010f4c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	cmd->qspi_command.AlternateBytesSize = 0;
	cmd->qspi_command.DummyCycles = 0;
 8010f50:	e9c0 3304 	strd	r3, r3, [r0, #16]
	cmd->qspi_command.InstructionMode = QSPI_INSTRUCTION_NONE;
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_NONE;
 8010f54:	e9c0 3306 	strd	r3, r3, [r0, #24]
	cmd->qspi_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
	cmd->qspi_command.DataMode = QSPI_DATA_NONE;
 8010f58:	e9c0 3308 	strd	r3, r3, [r0, #32]
	cmd->qspi_command.NbData = 0;
	cmd->qspi_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8010f5c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
	cmd->qspi_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
	cmd->qspi_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8010f60:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
}
 8010f64:	4770      	bx	lr

08010f66 <_Z12with_addressP7Commandm>:

/*
 * The two following functions enable the programmer to build a QSPI command very easily.
 */
void with_address(Command* cmd, uint32_t address) {
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8010f66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
	cmd->qspi_command.Address = address;
 8010f6a:	6041      	str	r1, [r0, #4]
	cmd->qspi_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8010f6c:	61c3      	str	r3, [r0, #28]
	cmd->qspi_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8010f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f72:	60c3      	str	r3, [r0, #12]
}
 8010f74:	4770      	bx	lr

08010f76 <_Z9with_dataP7Commandm>:

void with_data(Command* cmd, uint32_t length) {
	cmd->qspi_command.DataMode = QSPI_DATA_4_LINES;
 8010f76:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
	cmd->qspi_command.NbData = length;
 8010f7a:	e9c0 3109 	strd	r3, r1, [r0, #36]	; 0x24
}
 8010f7e:	4770      	bx	lr

08010f80 <_Z8qspi_runP7Commandm>:


/*
 * Higher-level abstraction layer for the QSPI interface.
 */
bool qspi_run(Command* cmd, uint32_t instruction) {
 8010f80:	b508      	push	{r3, lr}
	cmd->qspi_command.Instruction = instruction;
	cmd->qspi_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8010f82:	f44f 7340 	mov.w	r3, #768	; 0x300
	cmd->qspi_command.Instruction = instruction;
 8010f86:	6001      	str	r1, [r0, #0]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8010f88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010f8c:	4601      	mov	r1, r0
	cmd->qspi_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8010f8e:	6183      	str	r3, [r0, #24]
	return HAL_QSPI_Command(&hqspi, &(cmd->qspi_command), IO_TIMEOUT) == HAL_OK;
 8010f90:	4803      	ldr	r0, [pc, #12]	; (8010fa0 <_Z8qspi_runP7Commandm+0x20>)
 8010f92:	f7f4 fce6 	bl	8005962 <HAL_QSPI_Command>
}
 8010f96:	fab0 f080 	clz	r0, r0
 8010f9a:	0940      	lsrs	r0, r0, #5
 8010f9c:	bd08      	pop	{r3, pc}
 8010f9e:	bf00      	nop
 8010fa0:	240008c0 	.word	0x240008c0

08010fa4 <_Z9qspi_pollP7Commandmhb>:

bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8010fa4:	b530      	push	{r4, r5, lr}
	QSPI_AutoPollingTypeDef poller;

	poller.MatchMode = QSPI_MATCH_MODE_AND;
	poller.StatusBytesSize = 1;
 8010fa6:	2401      	movs	r4, #1
bool qspi_poll(Command* cmd, uint32_t instruction, uint8_t bit, bool value) {
 8010fa8:	b087      	sub	sp, #28
	poller.StatusBytesSize = 1;
 8010faa:	2500      	movs	r5, #0
	poller.Interval = 0x10;
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
	poller.Match = value << bit;
 8010fac:	4093      	lsls	r3, r2
	poller.Mask = 1 << bit;

	cmd->qspi_command.Instruction = instruction;
 8010fae:	6001      	str	r1, [r0, #0]
	cmd->qspi_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;

	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8010fb0:	4601      	mov	r1, r0
	poller.Match = value << bit;
 8010fb2:	9300      	str	r3, [sp, #0]
	cmd->qspi_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8010fb4:	f44f 7340 	mov.w	r3, #768	; 0x300
	poller.StatusBytesSize = 1;
 8010fb8:	e9cd 4503 	strd	r4, r5, [sp, #12]
	poller.Interval = 0x10;
 8010fbc:	2510      	movs	r5, #16
	poller.Mask = 1 << bit;
 8010fbe:	4094      	lsls	r4, r2
	cmd->qspi_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8010fc0:	6183      	str	r3, [r0, #24]
	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8010fc2:	466a      	mov	r2, sp
	poller.Interval = 0x10;
 8010fc4:	9502      	str	r5, [sp, #8]
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8010fc6:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8010fca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010fce:	4805      	ldr	r0, [pc, #20]	; (8010fe4 <_Z9qspi_pollP7Commandmhb+0x40>)
	poller.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8010fd0:	9505      	str	r5, [sp, #20]
	poller.Mask = 1 << bit;
 8010fd2:	9401      	str	r4, [sp, #4]
	return HAL_QSPI_AutoPolling(&hqspi, &(cmd->qspi_command), &poller, IO_TIMEOUT) == HAL_OK;
 8010fd4:	f7f4 fdc0 	bl	8005b58 <HAL_QSPI_AutoPolling>
}
 8010fd8:	fab0 f080 	clz	r0, r0
 8010fdc:	0940      	lsrs	r0, r0, #5
 8010fde:	b007      	add	sp, #28
 8010fe0:	bd30      	pop	{r4, r5, pc}
 8010fe2:	bf00      	nop
 8010fe4:	240008c0 	.word	0x240008c0

08010fe8 <_Z13qspi_transmitPh>:

bool qspi_transmit(uint8_t* buffer) {
 8010fe8:	4601      	mov	r1, r0
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8010fea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010fee:	4804      	ldr	r0, [pc, #16]	; (8011000 <_Z13qspi_transmitPh+0x18>)
bool qspi_transmit(uint8_t* buffer) {
 8010ff0:	b508      	push	{r3, lr}
	return HAL_QSPI_Transmit(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8010ff2:	f7f4 fcf9 	bl	80059e8 <HAL_QSPI_Transmit>
}
 8010ff6:	fab0 f080 	clz	r0, r0
 8010ffa:	0940      	lsrs	r0, r0, #5
 8010ffc:	bd08      	pop	{r3, pc}
 8010ffe:	bf00      	nop
 8011000:	240008c0 	.word	0x240008c0

08011004 <_Z12qspi_receivePh>:

bool qspi_receive(uint8_t* buffer) {
 8011004:	4601      	mov	r1, r0
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 8011006:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801100a:	4804      	ldr	r0, [pc, #16]	; (801101c <_Z12qspi_receivePh+0x18>)
bool qspi_receive(uint8_t* buffer) {
 801100c:	b508      	push	{r3, lr}
	return HAL_QSPI_Receive(&hqspi, buffer, IO_TIMEOUT) == HAL_OK;
 801100e:	f7f4 fd44 	bl	8005a9a <HAL_QSPI_Receive>
}
 8011012:	fab0 f080 	clz	r0, r0
 8011016:	0940      	lsrs	r0, r0, #5
 8011018:	bd08      	pop	{r3, pc}
 801101a:	bf00      	nop
 801101c:	240008c0 	.word	0x240008c0

08011020 <_ZN5IOBus8transmitEv>:
	buffer_index += length;

	return length;
}

void IOBus::transmit() {
 8011020:	b510      	push	{r4, lr}
	driver->transmit(packet_buffer, buffer_index);
 8011022:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8011026:	f8d4 0d14 	ldr.w	r0, [r4, #3348]	; 0xd14
 801102a:	f8d4 2d20 	ldr.w	r2, [r4, #3360]	; 0xd20
 801102e:	6803      	ldr	r3, [r0, #0]
 8011030:	f8d4 1d18 	ldr.w	r1, [r4, #3352]	; 0xd18
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	4798      	blx	r3
	buffer_index = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
}
 801103e:	bd10      	pop	{r4, pc}

08011040 <_ZN10LinkedListISt8functionIFvhPvEEE11__getSourceEv>:
	TRACK_EXCEPTIONS();
 8011040:	4800      	ldr	r0, [pc, #0]	; (8011044 <_ZN10LinkedListISt8functionIFvhPvEEE11__getSourceEv+0x4>)
 8011042:	4770      	bx	lr
 8011044:	0801b111 	.word	0x0801b111

08011048 <_ZN5IOBus7receiveEhPhm>:
void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 8011048:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801104a:	4614      	mov	r4, r2
 801104c:	461d      	mov	r5, r3
	while(length > buffer_length) {
 801104e:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
 8011052:	f8d6 3d1c 	ldr.w	r3, [r6, #3356]	; 0xd1c
 8011056:	42ab      	cmp	r3, r5
 8011058:	d20b      	bcs.n	8011072 <_ZN5IOBus7receiveEhPhm+0x2a>
		MessageBus::receive(sender_id, buffer, buffer_length);
 801105a:	4622      	mov	r2, r4
 801105c:	e9cd 0100 	strd	r0, r1, [sp]
 8011060:	f001 f818 	bl	8012094 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 8011064:	f8d6 3d1c 	ldr.w	r3, [r6, #3356]	; 0xd1c
	while(length > buffer_length) {
 8011068:	e9dd 0100 	ldrd	r0, r1, [sp]
		length -= buffer_length;
 801106c:	1aed      	subs	r5, r5, r3
		buffer += buffer_length;
 801106e:	441c      	add	r4, r3
	while(length > buffer_length) {
 8011070:	e7ef      	b.n	8011052 <_ZN5IOBus7receiveEhPhm+0xa>
	MessageBus::receive(sender_id, buffer, length);
 8011072:	462b      	mov	r3, r5
 8011074:	4622      	mov	r2, r4
}
 8011076:	b002      	add	sp, #8
 8011078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MessageBus::receive(sender_id, buffer, length);
 801107c:	f001 b80a 	b.w	8012094 <_ZN10MessageBus7receiveEhPhm>

08011080 <_ZN5IOBus6appendEPhm>:
uint32_t IOBus::append(uint8_t* buffer, uint32_t length) {
 8011080:	b538      	push	{r3, r4, r5, lr}
	uint32_t remaining_length = buffer_length - buffer_index;
 8011082:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8011086:	f8d4 0d20 	ldr.w	r0, [r4, #3360]	; 0xd20
 801108a:	f8d4 3d1c 	ldr.w	r3, [r4, #3356]	; 0xd1c
 801108e:	1a1b      	subs	r3, r3, r0
 8011090:	4293      	cmp	r3, r2
 8011092:	bf28      	it	cs
 8011094:	4613      	movcs	r3, r2
 8011096:	461d      	mov	r5, r3
	memcpy(packet_buffer + buffer_index, buffer, length);
 8011098:	f8d4 3d18 	ldr.w	r3, [r4, #3352]	; 0xd18
 801109c:	462a      	mov	r2, r5
 801109e:	4418      	add	r0, r3
 80110a0:	f005 f84e 	bl	8016140 <memcpy>
	buffer_index += length;
 80110a4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
}
 80110a8:	4628      	mov	r0, r5
	buffer_index += length;
 80110aa:	442b      	add	r3, r5
 80110ac:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
}
 80110b0:	bd38      	pop	{r3, r4, r5, pc}

080110b2 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80110b2:	b4f0      	push	{r4, r5, r6, r7}
	    return __source._M_access<_Functor*>();
 80110b4:	6804      	ldr	r4, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80110b6:	7809      	ldrb	r1, [r1, #0]
 80110b8:	6865      	ldr	r5, [r4, #4]
 80110ba:	68a6      	ldr	r6, [r4, #8]
 80110bc:	106f      	asrs	r7, r5, #1
 80110be:	6824      	ldr	r4, [r4, #0]
 80110c0:	eb06 0065 	add.w	r0, r6, r5, asr #1
 80110c4:	07ed      	lsls	r5, r5, #31
 80110c6:	6812      	ldr	r2, [r2, #0]
 80110c8:	bf48      	it	mi
 80110ca:	59f5      	ldrmi	r5, [r6, r7]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	bf48      	it	mi
 80110d0:	592c      	ldrmi	r4, [r5, r4]
 80110d2:	46a4      	mov	ip, r4
      }
 80110d4:	bcf0      	pop	{r4, r5, r6, r7}
 80110d6:	4760      	bx	ip

080110d8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80110d8:	b538      	push	{r3, r4, r5, lr}
 80110da:	4604      	mov	r4, r0
	switch (__op)
 80110dc:	b13a      	cbz	r2, 80110ee <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 80110de:	2a01      	cmp	r2, #1
 80110e0:	d008      	beq.n	80110f4 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 80110e2:	2a02      	cmp	r2, #2
 80110e4:	d008      	beq.n	80110f8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 80110e6:	2a03      	cmp	r2, #3
 80110e8:	d010      	beq.n	801110c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 80110ea:	2000      	movs	r0, #0
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80110ee:	4b0b      	ldr	r3, [pc, #44]	; (801111c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 80110f0:	6023      	str	r3, [r4, #0]
	}
 80110f2:	e7fa      	b.n	80110ea <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 80110f4:	680b      	ldr	r3, [r1, #0]
 80110f6:	e7fb      	b.n	80110f0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 80110f8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80110fa:	200c      	movs	r0, #12
 80110fc:	f002 fcc6 	bl	8013a8c <_Znwj>
 8011100:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 8011102:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801110a:	e7f1      	b.n	80110f0 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 801110c:	6800      	ldr	r0, [r0, #0]
 801110e:	2800      	cmp	r0, #0
 8011110:	d0eb      	beq.n	80110ea <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 8011112:	210c      	movs	r1, #12
 8011114:	f004 fac4 	bl	80156a0 <_ZdlPvj>
 8011118:	e7e7      	b.n	80110ea <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 801111a:	bf00      	nop
 801111c:	0801cbfc 	.word	0x0801cbfc

08011120 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 8011120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011122:	f500 55e0 	add.w	r5, r0, #7168	; 0x1c00
 8011126:	f500 56b8 	add.w	r6, r0, #5888	; 0x1700
 801112a:	4b08      	ldr	r3, [pc, #32]	; (801114c <_ZN10MessageBusD1Ev+0x2c>)
 801112c:	4604      	mov	r4, r0
 801112e:	3514      	adds	r5, #20
 8011130:	3614      	adds	r6, #20
}
 8011132:	4f07      	ldr	r7, [pc, #28]	; (8011150 <_ZN10MessageBusD1Ev+0x30>)
 8011134:	6003      	str	r3, [r0, #0]
 8011136:	42b5      	cmp	r5, r6
 8011138:	d005      	beq.n	8011146 <_ZN10MessageBusD1Ev+0x26>
 801113a:	f845 7d14 	str.w	r7, [r5, #-20]!
	osMutexDelete(mutex);
 801113e:	68a8      	ldr	r0, [r5, #8]
 8011140:	f7f8 fd58 	bl	8009bf4 <osMutexDelete>
}
 8011144:	e7f7      	b.n	8011136 <_ZN10MessageBusD1Ev+0x16>
 8011146:	4620      	mov	r0, r4
 8011148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801114a:	bf00      	nop
 801114c:	0801d024 	.word	0x0801d024
 8011150:	0801cc10 	.word	0x0801cc10

08011154 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
 8011154:	4b03      	ldr	r3, [pc, #12]	; (8011164 <_ZN5IOBusD1Ev+0x10>)
 8011156:	b510      	push	{r4, lr}
 8011158:	4604      	mov	r4, r0
 801115a:	6003      	str	r3, [r0, #0]
 801115c:	f7ff ffe0 	bl	8011120 <_ZN10MessageBusD1Ev>
 8011160:	4620      	mov	r0, r4
 8011162:	bd10      	pop	{r4, pc}
 8011164:	0801cc30 	.word	0x0801cc30

08011168 <_ZN5IOBusD0Ev>:
 8011168:	b510      	push	{r4, lr}
 801116a:	4604      	mov	r4, r0
 801116c:	f7ff fff2 	bl	8011154 <_ZN5IOBusD1Ev>
 8011170:	f641 5124 	movw	r1, #7460	; 0x1d24
 8011174:	4620      	mov	r0, r4
 8011176:	f004 fa93 	bl	80156a0 <_ZdlPvj>
 801117a:	4620      	mov	r0, r4
 801117c:	bd10      	pop	{r4, pc}

0801117e <_ZN10MessageBusD0Ev>:
 801117e:	b510      	push	{r4, lr}
 8011180:	4604      	mov	r4, r0
 8011182:	f7ff ffcd 	bl	8011120 <_ZN10MessageBusD1Ev>
 8011186:	f641 5114 	movw	r1, #7444	; 0x1d14
 801118a:	4620      	mov	r0, r4
 801118c:	f004 fa88 	bl	80156a0 <_ZdlPvj>
 8011190:	4620      	mov	r0, r4
 8011192:	bd10      	pop	{r4, pc}

08011194 <_ZN5IOBusC1EP8IODriverPhm>:
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	461f      	mov	r7, r3
class MessageBus {
 801119a:	4605      	mov	r5, r0
 801119c:	4b2a      	ldr	r3, [pc, #168]	; (8011248 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 801119e:	4690      	mov	r8, r2
 80111a0:	b085      	sub	sp, #20
 80111a2:	4604      	mov	r4, r0
 80111a4:	f845 3b10 	str.w	r3, [r5], #16
 80111a8:	460e      	mov	r6, r1
 80111aa:	f500 7344 	add.w	r3, r0, #784	; 0x310
struct PacketDefinition {
 80111ae:	22ff      	movs	r2, #255	; 0xff
 80111b0:	f805 2c0c 	strb.w	r2, [r5, #-12]
class MessageBus {
 80111b4:	350c      	adds	r5, #12
 80111b6:	42ab      	cmp	r3, r5
 80111b8:	d1fa      	bne.n	80111b0 <_ZN5IOBusC1EP8IODriverPhm+0x1c>
 80111ba:	f504 55b8 	add.w	r5, r4, #5888	; 0x1700
 80111be:	f504 59e0 	add.w	r9, r4, #7168	; 0x1c00
template <class T> LinkedList<T>::LinkedList() {
 80111c2:	f8df a098 	ldr.w	sl, [pc, #152]	; 801125c <_ZN5IOBusC1EP8IODriverPhm+0xc8>
 80111c6:	3514      	adds	r5, #20
 80111c8:	f109 0914 	add.w	r9, r9, #20
		throwException("MutexAllocationFailure");
 80111cc:	f8df b090 	ldr.w	fp, [pc, #144]	; 8011260 <_ZN5IOBusC1EP8IODriverPhm+0xcc>
	const osMutexDef_t mutex_attributes = {};
 80111d0:	2300      	movs	r3, #0
	this->mutex = osMutexCreate(&mutex_attributes);
 80111d2:	4668      	mov	r0, sp
template <class T> LinkedList<T>::LinkedList() {
 80111d4:	f8c5 a000 	str.w	sl, [r5]
	const osMutexDef_t mutex_attributes = {};
 80111d8:	e9cd 3300 	strd	r3, r3, [sp]
	this->mutex = osMutexCreate(&mutex_attributes);
 80111dc:	f7f8 fcbb 	bl	8009b56 <osMutexCreate>
 80111e0:	60a8      	str	r0, [r5, #8]
	if(mutex == nullptr) {
 80111e2:	b920      	cbnz	r0, 80111ee <_ZN5IOBusC1EP8IODriverPhm+0x5a>
		throwException("MutexAllocationFailure");
 80111e4:	2288      	movs	r2, #136	; 0x88
 80111e6:	4659      	mov	r1, fp
 80111e8:	4628      	mov	r0, r5
 80111ea:	f002 fc29 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
 80111ee:	3514      	adds	r5, #20
 80111f0:	454d      	cmp	r5, r9
 80111f2:	d1ed      	bne.n	80111d0 <_ZN5IOBusC1EP8IODriverPhm+0x3c>
 80111f4:	4b15      	ldr	r3, [pc, #84]	; (801124c <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
	this->driver = driver;
 80111f6:	f504 5180 	add.w	r1, r4, #4096	; 0x1000
	this->buffer_index = 0;
 80111fa:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80111fc:	200c      	movs	r0, #12
IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 80111fe:	6023      	str	r3, [r4, #0]
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 8011200:	6833      	ldr	r3, [r6, #0]
	this->buffer_length = length;
 8011202:	f8c1 7d1c 	str.w	r7, [r1, #3356]	; 0xd1c
	this->driver = driver;
 8011206:	f8c1 6d14 	str.w	r6, [r1, #3348]	; 0xd14
	this->packet_buffer = buffer;
 801120a:	f8c1 8d18 	str.w	r8, [r1, #3352]	; 0xd18
	this->buffer_index = 0;
 801120e:	f8c1 5d20 	str.w	r5, [r1, #3360]	; 0xd20
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 8011212:	689f      	ldr	r7, [r3, #8]
    _Function_base() : _M_manager(nullptr) { }
 8011214:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8011216:	f002 fc39 	bl	8013a8c <_Znwj>
      _Bind(_Bind&&) = default;
 801121a:	4b0d      	ldr	r3, [pc, #52]	; (8011250 <_ZN5IOBusC1EP8IODriverPhm+0xbc>)
 801121c:	4669      	mov	r1, sp
 801121e:	6084      	str	r4, [r0, #8]
 8011220:	9000      	str	r0, [sp, #0]
 8011222:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 8011226:	4b0b      	ldr	r3, [pc, #44]	; (8011254 <_ZN5IOBusC1EP8IODriverPhm+0xc0>)
 8011228:	4630      	mov	r0, r6
 801122a:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 801122c:	4b0a      	ldr	r3, [pc, #40]	; (8011258 <_ZN5IOBusC1EP8IODriverPhm+0xc4>)
 801122e:	9302      	str	r3, [sp, #8]
 8011230:	47b8      	blx	r7
      if (_M_manager)
 8011232:	9b02      	ldr	r3, [sp, #8]
 8011234:	b11b      	cbz	r3, 801123e <_ZN5IOBusC1EP8IODriverPhm+0xaa>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8011236:	4669      	mov	r1, sp
 8011238:	2203      	movs	r2, #3
 801123a:	4608      	mov	r0, r1
 801123c:	4798      	blx	r3
}
 801123e:	4620      	mov	r0, r4
 8011240:	b005      	add	sp, #20
 8011242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011246:	bf00      	nop
 8011248:	0801d024 	.word	0x0801d024
 801124c:	0801cc30 	.word	0x0801cc30
 8011250:	08011049 	.word	0x08011049
 8011254:	080110b3 	.word	0x080110b3
 8011258:	080110d9 	.word	0x080110d9
 801125c:	0801cc10 	.word	0x0801cc10
 8011260:	0801c0cc 	.word	0x0801c0cc

08011264 <_ZN14LoopbackDriver8transmitEPhm>:

void LoopbackDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver_func) {
    this->receiver_func = receiver_func;
}

void LoopbackDriver::transmit(uint8_t* buffer, uint32_t length) {
 8011264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011266:	2300      	movs	r3, #0
 8011268:	f88d 3007 	strb.w	r3, [sp, #7]
      if (_M_empty())
 801126c:	68c3      	ldr	r3, [r0, #12]
 801126e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011272:	b90b      	cbnz	r3, 8011278 <_ZN14LoopbackDriver8transmitEPhm+0x14>
	__throw_bad_function_call();
 8011274:	f004 fd7c 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8011278:	6904      	ldr	r4, [r0, #16]
 801127a:	ab03      	add	r3, sp, #12
 801127c:	aa02      	add	r2, sp, #8
 801127e:	f10d 0107 	add.w	r1, sp, #7
 8011282:	3004      	adds	r0, #4
 8011284:	47a0      	blx	r4
	receiver_func(0, buffer, length);
}
 8011286:	b004      	add	sp, #16
 8011288:	bd10      	pop	{r4, pc}
	...

0801128c <_ZN14LoopbackDriverD1Ev>:
#ifndef ROCO_SRC_LOOPBACKDRIVER_H_
#define ROCO_SRC_LOOPBACKDRIVER_H_

#include "IODriver.h"

class LoopbackDriver : public IODriver {
 801128c:	4b04      	ldr	r3, [pc, #16]	; (80112a0 <_ZN14LoopbackDriverD1Ev+0x14>)
 801128e:	b510      	push	{r4, lr}
 8011290:	4604      	mov	r4, r0
 8011292:	f840 3b04 	str.w	r3, [r0], #4
    class function<_Res(_ArgTypes...)>
 8011296:	f7fa ffc3 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 801129a:	4620      	mov	r0, r4
 801129c:	bd10      	pop	{r4, pc}
 801129e:	bf00      	nop
 80112a0:	0801cc84 	.word	0x0801cc84

080112a4 <_ZN14LoopbackDriverD0Ev>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	4604      	mov	r4, r0
 80112a8:	f7ff fff0 	bl	801128c <_ZN14LoopbackDriverD1Ev>
 80112ac:	2114      	movs	r1, #20
 80112ae:	4620      	mov	r0, r4
 80112b0:	f004 f9f6 	bl	80156a0 <_ZdlPvj>
 80112b4:	4620      	mov	r0, r4
 80112b6:	bd10      	pop	{r4, pc}

080112b8 <_ZN14LoopbackDriver7receiveERKSt8functionIFvhPhmEE>:
void LoopbackDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver_func) {
 80112b8:	b570      	push	{r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 80112ba:	2300      	movs	r3, #0
 80112bc:	b086      	sub	sp, #24
 80112be:	4604      	mov	r4, r0
 80112c0:	460e      	mov	r6, r1
 80112c2:	9304      	str	r3, [sp, #16]
    bool _M_empty() const { return !_M_manager; }
 80112c4:	ad02      	add	r5, sp, #8
 80112c6:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 80112c8:	b133      	cbz	r3, 80112d8 <_ZN14LoopbackDriver7receiveERKSt8functionIFvhPhmEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80112ca:	2202      	movs	r2, #2
 80112cc:	4628      	mov	r0, r5
 80112ce:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80112d0:	68f3      	ldr	r3, [r6, #12]
 80112d2:	9305      	str	r3, [sp, #20]
	  _M_manager = __x._M_manager;
 80112d4:	68b3      	ldr	r3, [r6, #8]
 80112d6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112d8:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
 80112da:	1d23      	adds	r3, r4, #4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80112e0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80112e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112e8:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80112ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112f0:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112f4:	9b04      	ldr	r3, [sp, #16]
    class function<_Res(_ArgTypes...)>
 80112f6:	4628      	mov	r0, r5
      __a = _GLIBCXX_MOVE(__b);
 80112f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80112fa:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112fc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80112fe:	9204      	str	r2, [sp, #16]
 8011300:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8011302:	6123      	str	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 8011304:	9205      	str	r2, [sp, #20]
 8011306:	f7fa ff8b 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 801130a:	b006      	add	sp, #24
 801130c:	bd70      	pop	{r4, r5, r6, pc}

0801130e <_ZN10MessageBus8retrieveEj>:
}

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 801130e:	b530      	push	{r4, r5, lr}
	uint32_t searchPoint = hash % 256;
 8011310:	b2cc      	uxtb	r4, r1
PacketDefinition* MessageBus::retrieve(size_t hash) {
 8011312:	4602      	mov	r2, r0
	uint32_t searchPoint = hash % 256;
 8011314:	4623      	mov	r3, r4
	uint32_t searchStart = searchPoint;

	while(definitions_by_type[searchPoint] != nullptr) {
 8011316:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 801131a:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
 801131e:	b150      	cbz	r0, 8011336 <_ZN10MessageBus8retrieveEj+0x28>
		if(definitions_by_type[searchPoint]->hash == hash) {
 8011320:	6885      	ldr	r5, [r0, #8]
 8011322:	428d      	cmp	r5, r1
 8011324:	d007      	beq.n	8011336 <_ZN10MessageBus8retrieveEj+0x28>
			return definitions_by_type[searchPoint];
		}

		searchPoint++;
 8011326:	3301      	adds	r3, #1

		if(searchPoint == 256) {
			searchPoint = 0;
 8011328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801132c:	bf08      	it	eq
 801132e:	2300      	moveq	r3, #0
		}

		if(searchStart == searchPoint) {
 8011330:	42a3      	cmp	r3, r4
 8011332:	d1f0      	bne.n	8011316 <_ZN10MessageBus8retrieveEj+0x8>
			break; // No packet definition matching the given template type
		}
	}

	return nullptr;
 8011334:	2000      	movs	r0, #0
}
 8011336:	bd30      	pop	{r4, r5, pc}

08011338 <_ZN8IteratorISt8functionIFvhPvEEE11__getSourceEv>:
	TRACK_EXCEPTIONS();
 8011338:	4800      	ldr	r0, [pc, #0]	; (801133c <_ZN8IteratorISt8functionIFvhPvEEE11__getSourceEv+0x4>)
 801133a:	4770      	bx	lr
 801133c:	0801b111 	.word	0x0801b111

08011340 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh>:
bool MessageBus::internal_send(PacketDefinition* def, uint8_t* data) {
 8011340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011344:	4605      	mov	r5, r0
 8011346:	4617      	mov	r7, r2
	if(def != nullptr) {
 8011348:	460c      	mov	r4, r1
 801134a:	b329      	cbz	r1, 8011398 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x58>
		uint32_t data_bytes_written = 0;
 801134c:	2600      	movs	r6, #0
			uint8_t header = PREAMBLE;
 801134e:	f04f 087f 	mov.w	r8, #127	; 0x7f
		while(data_bytes_written < def->size) {
 8011352:	6862      	ldr	r2, [r4, #4]
			append(&header, 1); // Write the packet ID for each transmission frame.
 8011354:	682b      	ldr	r3, [r5, #0]
		while(data_bytes_written < def->size) {
 8011356:	42b2      	cmp	r2, r6
 8011358:	d917      	bls.n	801138a <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x4a>
			append(&header, 1); // Write the packet ID for each transmission frame.
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	2201      	movs	r2, #1
 801135e:	f10d 0107 	add.w	r1, sp, #7
 8011362:	4628      	mov	r0, r5
			uint8_t header = PREAMBLE;
 8011364:	f88d 8007 	strb.w	r8, [sp, #7]
			append(&header, 1); // Write the packet ID for each transmission frame.
 8011368:	4798      	blx	r3
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 801136a:	682b      	ldr	r3, [r5, #0]
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	4628      	mov	r0, r5
 8011374:	4798      	blx	r3
			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 8011376:	6862      	ldr	r2, [r4, #4]
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	19b9      	adds	r1, r7, r6
 801137c:	1b92      	subs	r2, r2, r6
 801137e:	4628      	mov	r0, r5
 8011380:	689b      	ldr	r3, [r3, #8]
 8011382:	4798      	blx	r3
			if(new_bytes == 0) {
 8011384:	b128      	cbz	r0, 8011392 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x52>
				data_bytes_written += new_bytes;
 8011386:	4406      	add	r6, r0
		while(data_bytes_written < def->size) {
 8011388:	e7e3      	b.n	8011352 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x12>
		transmit();
 801138a:	4628      	mov	r0, r5
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	4798      	blx	r3
		return true;
 8011390:	2001      	movs	r0, #1
}
 8011392:	b002      	add	sp, #8
 8011394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return false;
 8011398:	4608      	mov	r0, r1
 801139a:	e7fa      	b.n	8011392 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x52>

0801139c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801139c:	b507      	push	{r0, r1, r2, lr}
 801139e:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80113a0:	6800      	ldr	r0, [r0, #0]
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 80113a2:	780a      	ldrb	r2, [r1, #0]
 80113a4:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 80113a6:	6883      	ldr	r3, [r0, #8]
 80113a8:	f88d 2003 	strb.w	r2, [sp, #3]
 80113ac:	b90b      	cbnz	r3, 80113b2 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 80113ae:	f004 fcdf 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80113b2:	68c3      	ldr	r3, [r0, #12]
 80113b4:	aa01      	add	r2, sp, #4
 80113b6:	f10d 0103 	add.w	r1, sp, #3
 80113ba:	4798      	blx	r3
      }
 80113bc:	b003      	add	sp, #12
 80113be:	f85d fb04 	ldr.w	pc, [sp], #4

080113c2 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80113c2:	b507      	push	{r0, r1, r2, lr}
 80113c4:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80113c6:	6800      	ldr	r0, [r0, #0]
 80113c8:	780a      	ldrb	r2, [r1, #0]
 80113ca:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 80113cc:	6883      	ldr	r3, [r0, #8]
 80113ce:	f88d 2003 	strb.w	r2, [sp, #3]
 80113d2:	b90b      	cbnz	r3, 80113d8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 80113d4:	f004 fccc 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80113d8:	68c3      	ldr	r3, [r0, #12]
 80113da:	aa01      	add	r2, sp, #4
 80113dc:	f10d 0103 	add.w	r1, sp, #3
 80113e0:	4798      	blx	r3
      }
 80113e2:	b003      	add	sp, #12
 80113e4:	f85d fb04 	ldr.w	pc, [sp], #4

080113e8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80113e8:	b507      	push	{r0, r1, r2, lr}
 80113ea:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 80113ec:	6800      	ldr	r0, [r0, #0]
 80113ee:	780a      	ldrb	r2, [r1, #0]
 80113f0:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 80113f2:	6883      	ldr	r3, [r0, #8]
 80113f4:	f88d 2003 	strb.w	r2, [sp, #3]
 80113f8:	b90b      	cbnz	r3, 80113fe <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 80113fa:	f004 fcb9 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80113fe:	68c3      	ldr	r3, [r0, #12]
 8011400:	aa01      	add	r2, sp, #4
 8011402:	f10d 0103 	add.w	r1, sp, #3
 8011406:	4798      	blx	r3
      }
 8011408:	b003      	add	sp, #12
 801140a:	f85d fb04 	ldr.w	pc, [sp], #4

0801140e <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801140e:	b507      	push	{r0, r1, r2, lr}
 8011410:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 8011412:	6800      	ldr	r0, [r0, #0]
 8011414:	780a      	ldrb	r2, [r1, #0]
 8011416:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 8011418:	6883      	ldr	r3, [r0, #8]
 801141a:	f88d 2003 	strb.w	r2, [sp, #3]
 801141e:	b90b      	cbnz	r3, 8011424 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 8011420:	f004 fca6 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8011424:	68c3      	ldr	r3, [r0, #12]
 8011426:	aa01      	add	r2, sp, #4
 8011428:	f10d 0103 	add.w	r1, sp, #3
 801142c:	4798      	blx	r3
      }
 801142e:	b003      	add	sp, #12
 8011430:	f85d fb04 	ldr.w	pc, [sp], #4

08011434 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011434:	b507      	push	{r0, r1, r2, lr}
 8011436:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 8011438:	6800      	ldr	r0, [r0, #0]
 801143a:	780a      	ldrb	r2, [r1, #0]
 801143c:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 801143e:	6883      	ldr	r3, [r0, #8]
 8011440:	f88d 2003 	strb.w	r2, [sp, #3]
 8011444:	b90b      	cbnz	r3, 801144a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 8011446:	f004 fc93 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801144a:	68c3      	ldr	r3, [r0, #12]
 801144c:	aa01      	add	r2, sp, #4
 801144e:	f10d 0103 	add.w	r1, sp, #3
 8011452:	4798      	blx	r3
      }
 8011454:	b003      	add	sp, #12
 8011456:	f85d fb04 	ldr.w	pc, [sp], #4

0801145a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801145a:	b507      	push	{r0, r1, r2, lr}
 801145c:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 801145e:	6800      	ldr	r0, [r0, #0]
 8011460:	780a      	ldrb	r2, [r1, #0]
 8011462:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 8011464:	6883      	ldr	r3, [r0, #8]
 8011466:	f88d 2003 	strb.w	r2, [sp, #3]
 801146a:	b90b      	cbnz	r3, 8011470 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 801146c:	f004 fc80 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8011470:	68c3      	ldr	r3, [r0, #12]
 8011472:	aa01      	add	r2, sp, #4
 8011474:	f10d 0103 	add.w	r1, sp, #3
 8011478:	4798      	blx	r3
      }
 801147a:	b003      	add	sp, #12
 801147c:	f85d fb04 	ldr.w	pc, [sp], #4

08011480 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011480:	b507      	push	{r0, r1, r2, lr}
 8011482:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 8011484:	6800      	ldr	r0, [r0, #0]
 8011486:	780a      	ldrb	r2, [r1, #0]
 8011488:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 801148a:	6883      	ldr	r3, [r0, #8]
 801148c:	f88d 2003 	strb.w	r2, [sp, #3]
 8011490:	b90b      	cbnz	r3, 8011496 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_+0x16>
	__throw_bad_function_call();
 8011492:	f004 fc6d 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8011496:	68c3      	ldr	r3, [r0, #12]
 8011498:	aa01      	add	r2, sp, #4
 801149a:	f10d 0103 	add.w	r1, sp, #3
 801149e:	4798      	blx	r3
      }
 80114a0:	b003      	add	sp, #12
 80114a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>:
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }
#endif

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 80114a8:	b510      	push	{r4, lr}
    { return __name[0] == '*' ? __name + 1 : __name; }
 80114aa:	7803      	ldrb	r3, [r0, #0]
    size_t hash_code() const noexcept
 80114ac:	4604      	mov	r4, r0
    { return __name[0] == '*' ? __name + 1 : __name; }
 80114ae:	2b2a      	cmp	r3, #42	; 0x2a
 80114b0:	bf08      	it	eq
 80114b2:	3401      	addeq	r4, #1
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 80114b4:	4620      	mov	r0, r4
 80114b6:	f7ee ff1d 	bl	80002f4 <strlen>
 80114ba:	4a03      	ldr	r2, [pc, #12]	; (80114c8 <_ZNKSt9type_info9hash_codeEv.isra.0+0x20>)
 80114bc:	4601      	mov	r1, r0
 80114be:	4620      	mov	r0, r4
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 80114c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _Hash_bytes(name(), __builtin_strlen(name()),
 80114c4:	f004 b914 	b.w	80156f0 <_ZSt11_Hash_bytesPKvjj>
 80114c8:	c70f6907 	.word	0xc70f6907

080114cc <_ZN8IteratorISt8functionIFvhPvEEED1Ev>:
	virtual ~Iterator() {}
 80114cc:	4b04      	ldr	r3, [pc, #16]	; (80114e0 <_ZN8IteratorISt8functionIFvhPvEEED1Ev+0x14>)
 80114ce:	b510      	push	{r4, lr}
 80114d0:	4604      	mov	r4, r0
 80114d2:	f840 3b0c 	str.w	r3, [r0], #12
    class function<_Res(_ArgTypes...)>
 80114d6:	f7fa fea3 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 80114da:	4620      	mov	r0, r4
 80114dc:	bd10      	pop	{r4, pc}
 80114de:	bf00      	nop
 80114e0:	0801cff8 	.word	0x0801cff8

080114e4 <_ZN8IteratorISt8functionIFvhPvEEED0Ev>:
 80114e4:	b510      	push	{r4, lr}
 80114e6:	4604      	mov	r4, r0
 80114e8:	f7ff fff0 	bl	80114cc <_ZN8IteratorISt8functionIFvhPvEEED1Ev>
 80114ec:	2120      	movs	r1, #32
 80114ee:	4620      	mov	r0, r4
 80114f0:	f004 f8d6 	bl	80156a0 <_ZdlPvj>
 80114f4:	4620      	mov	r0, r4
 80114f6:	bd10      	pop	{r4, pc}

080114f8 <_ZN10MessageBus6defineI13Power_BusInfoEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80114f8:	b570      	push	{r4, r5, r6, lr}
 80114fa:	460d      	mov	r5, r1
 80114fc:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80114fe:	4817      	ldr	r0, [pc, #92]	; (801155c <_ZN10MessageBus6defineI13Power_BusInfoEEbh+0x64>)
 8011500:	f7ff ffd2 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011504:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011508:	230c      	movs	r3, #12
 801150a:	fb03 4302 	mla	r3, r3, r2, r4
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	bb0b      	cbnz	r3, 8011556 <_ZN10MessageBus6defineI13Power_BusInfoEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011512:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011514:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011518:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801151c:	b141      	cbz	r1, 8011530 <_ZN10MessageBus6defineI13Power_BusInfoEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801151e:	6889      	ldr	r1, [r1, #8]
 8011520:	4281      	cmp	r1, r0
 8011522:	d018      	beq.n	8011556 <_ZN10MessageBus6defineI13Power_BusInfoEEbh+0x5e>
		insertion_point++;
 8011524:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 801152a:	bf08      	it	eq
 801152c:	2300      	moveq	r3, #0
 801152e:	e7f3      	b.n	8011518 <_ZN10MessageBus6defineI13Power_BusInfoEEbh+0x20>
 8011530:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011538:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 801153c:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 801153e:	2517      	movs	r5, #23
 8011540:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011542:	250c      	movs	r5, #12
 8011544:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011548:	4634      	mov	r4, r6
	def->hash = hash;
 801154a:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801154c:	3404      	adds	r4, #4
	return true;
 801154e:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011550:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011554:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011556:	2000      	movs	r0, #0
 8011558:	e7fc      	b.n	8011554 <_ZN10MessageBus6defineI13Power_BusInfoEEbh+0x5c>
 801155a:	bf00      	nop
 801155c:	0801ccd4 	.word	0x0801ccd4

08011560 <_ZN10MessageBus7forwardI13Power_BusInfoEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011564:	480b      	ldr	r0, [pc, #44]	; (8011594 <_ZN10MessageBus7forwardI13Power_BusInfoEEbPS_+0x34>)
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 8011566:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8011568:	f7ff ff9e 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 801156c:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 801156e:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011570:	4620      	mov	r0, r4
 8011572:	695b      	ldr	r3, [r3, #20]
 8011574:	4798      	blx	r3
	if(def != nullptr) {
 8011576:	b150      	cbz	r0, 801158e <_ZN10MessageBus7forwardI13Power_BusInfoEEbPS_+0x2e>
 8011578:	7800      	ldrb	r0, [r0, #0]
 801157a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 801157e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8011582:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	; 0xc14
 8011586:	b91b      	cbnz	r3, 8011590 <_ZN10MessageBus7forwardI13Power_BusInfoEEbPS_+0x30>
		return true;
 8011588:	2001      	movs	r0, #1
		forwarders[packetID] = bus;
 801158a:	f8c4 5c14 	str.w	r5, [r4, #3092]	; 0xc14
}
 801158e:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8011590:	2000      	movs	r0, #0
 8011592:	e7fc      	b.n	801158e <_ZN10MessageBus7forwardI13Power_BusInfoEEbPS_+0x2e>
 8011594:	0801ccd4 	.word	0x0801ccd4

08011598 <_ZN10MessageBus4sendI13Power_BusInfoEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011598:	b513      	push	{r0, r1, r4, lr}
 801159a:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 801159c:	4808      	ldr	r0, [pc, #32]	; (80115c0 <_ZN10MessageBus4sendI13Power_BusInfoEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 801159e:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 80115a0:	f7ff ff82 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 80115a4:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 80115a6:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80115a8:	4620      	mov	r0, r4
 80115aa:	695b      	ldr	r3, [r3, #20]
 80115ac:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 80115ae:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 80115b0:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 80115b2:	9a01      	ldr	r2, [sp, #4]
 80115b4:	691b      	ldr	r3, [r3, #16]
 80115b6:	4620      	mov	r0, r4
}
 80115b8:	b002      	add	sp, #8
 80115ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 80115be:	4718      	bx	r3
 80115c0:	0801ccd4 	.word	0x0801ccd4

080115c4 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80115c4:	b570      	push	{r4, r5, r6, lr}
 80115c6:	460d      	mov	r5, r1
 80115c8:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80115ca:	4817      	ldr	r0, [pc, #92]	; (8011628 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh+0x64>)
 80115cc:	f7ff ff6c 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 80115d0:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80115d4:	230c      	movs	r3, #12
 80115d6:	fb03 4302 	mla	r3, r3, r2, r4
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	bb0b      	cbnz	r3, 8011622 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 80115de:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 80115e0:	f504 7641 	add.w	r6, r4, #772	; 0x304
 80115e4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80115e8:	b141      	cbz	r1, 80115fc <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80115ea:	6889      	ldr	r1, [r1, #8]
 80115ec:	4281      	cmp	r1, r0
 80115ee:	d018      	beq.n	8011622 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh+0x5e>
		insertion_point++;
 80115f0:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 80115f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 80115f6:	bf08      	it	eq
 80115f8:	2300      	moveq	r3, #0
 80115fa:	e7f3      	b.n	80115e4 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh+0x20>
 80115fc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011604:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011608:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 801160a:	2504      	movs	r5, #4
 801160c:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 801160e:	250c      	movs	r5, #12
 8011610:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011614:	4634      	mov	r4, r6
	def->hash = hash;
 8011616:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011618:	3404      	adds	r4, #4
	return true;
 801161a:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 801161c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011620:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011622:	2000      	movs	r0, #0
 8011624:	e7fc      	b.n	8011620 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh+0x5c>
 8011626:	bf00      	nop
 8011628:	0801cce4 	.word	0x0801cce4

0801162c <_ZN10MessageBus7forwardI16Power_SupplyInfoEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 801162c:	b538      	push	{r3, r4, r5, lr}
 801162e:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011630:	480b      	ldr	r0, [pc, #44]	; (8011660 <_ZN10MessageBus7forwardI16Power_SupplyInfoEEbPS_+0x34>)
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 8011632:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8011634:	f7ff ff38 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011638:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 801163a:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 801163c:	4620      	mov	r0, r4
 801163e:	695b      	ldr	r3, [r3, #20]
 8011640:	4798      	blx	r3
	if(def != nullptr) {
 8011642:	b150      	cbz	r0, 801165a <_ZN10MessageBus7forwardI16Power_SupplyInfoEEbPS_+0x2e>
 8011644:	7800      	ldrb	r0, [r0, #0]
 8011646:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 801164a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801164e:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	; 0xc14
 8011652:	b91b      	cbnz	r3, 801165c <_ZN10MessageBus7forwardI16Power_SupplyInfoEEbPS_+0x30>
		return true;
 8011654:	2001      	movs	r0, #1
		forwarders[packetID] = bus;
 8011656:	f8c4 5c14 	str.w	r5, [r4, #3092]	; 0xc14
}
 801165a:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 801165c:	2000      	movs	r0, #0
 801165e:	e7fc      	b.n	801165a <_ZN10MessageBus7forwardI16Power_SupplyInfoEEbPS_+0x2e>
 8011660:	0801cce4 	.word	0x0801cce4

08011664 <_ZN10MessageBus4sendI16Power_SupplyInfoEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011664:	b513      	push	{r0, r1, r4, lr}
 8011666:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011668:	4808      	ldr	r0, [pc, #32]	; (801168c <_ZN10MessageBus4sendI16Power_SupplyInfoEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 801166a:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 801166c:	f7ff ff1c 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011670:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8011672:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011674:	4620      	mov	r0, r4
 8011676:	695b      	ldr	r3, [r3, #20]
 8011678:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 801167a:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 801167c:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 801167e:	9a01      	ldr	r2, [sp, #4]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	4620      	mov	r0, r4
}
 8011684:	b002      	add	sp, #8
 8011686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 801168a:	4718      	bx	r3
 801168c:	0801cce4 	.word	0x0801cce4

08011690 <_ZN10MessageBus6defineI19Power_SupplyControlEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	460d      	mov	r5, r1
 8011694:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011696:	4817      	ldr	r0, [pc, #92]	; (80116f4 <_ZN10MessageBus6defineI19Power_SupplyControlEEbh+0x64>)
 8011698:	f7ff ff06 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 801169c:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80116a0:	230c      	movs	r3, #12
 80116a2:	fb03 4302 	mla	r3, r3, r2, r4
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	bb0b      	cbnz	r3, 80116ee <_ZN10MessageBus6defineI19Power_SupplyControlEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 80116aa:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 80116ac:	f504 7641 	add.w	r6, r4, #772	; 0x304
 80116b0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80116b4:	b141      	cbz	r1, 80116c8 <_ZN10MessageBus6defineI19Power_SupplyControlEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80116b6:	6889      	ldr	r1, [r1, #8]
 80116b8:	4281      	cmp	r1, r0
 80116ba:	d018      	beq.n	80116ee <_ZN10MessageBus6defineI19Power_SupplyControlEEbh+0x5e>
		insertion_point++;
 80116bc:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 80116be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 80116c2:	bf08      	it	eq
 80116c4:	2300      	moveq	r3, #0
 80116c6:	e7f3      	b.n	80116b0 <_ZN10MessageBus6defineI19Power_SupplyControlEEbh+0x20>
 80116c8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 80116cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116d0:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 80116d4:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 80116d6:	2505      	movs	r5, #5
 80116d8:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 80116da:	250c      	movs	r5, #12
 80116dc:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80116e0:	4634      	mov	r4, r6
	def->hash = hash;
 80116e2:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80116e4:	3404      	adds	r4, #4
	return true;
 80116e6:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 80116e8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 80116ec:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 80116ee:	2000      	movs	r0, #0
 80116f0:	e7fc      	b.n	80116ec <_ZN10MessageBus6defineI19Power_SupplyControlEEbh+0x5c>
 80116f2:	bf00      	nop
 80116f4:	0801ccf7 	.word	0x0801ccf7

080116f8 <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 80116f8:	b538      	push	{r3, r4, r5, lr}
 80116fa:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80116fc:	480b      	ldr	r0, [pc, #44]	; (801172c <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_+0x34>)
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 80116fe:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8011700:	f7ff fed2 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011704:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8011706:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011708:	4620      	mov	r0, r4
 801170a:	695b      	ldr	r3, [r3, #20]
 801170c:	4798      	blx	r3
	if(def != nullptr) {
 801170e:	b150      	cbz	r0, 8011726 <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_+0x2e>
 8011710:	7800      	ldrb	r0, [r0, #0]
 8011712:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 8011716:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801171a:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	; 0xc14
 801171e:	b91b      	cbnz	r3, 8011728 <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_+0x30>
		return true;
 8011720:	2001      	movs	r0, #1
		forwarders[packetID] = bus;
 8011722:	f8c4 5c14 	str.w	r5, [r4, #3092]	; 0xc14
}
 8011726:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8011728:	2000      	movs	r0, #0
 801172a:	e7fc      	b.n	8011726 <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_+0x2e>
 801172c:	0801ccf7 	.word	0x0801ccf7

08011730 <_ZN10MessageBus4sendI19Power_SupplyControlEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011730:	b513      	push	{r0, r1, r4, lr}
 8011732:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011734:	4808      	ldr	r0, [pc, #32]	; (8011758 <_ZN10MessageBus4sendI19Power_SupplyControlEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 8011736:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 8011738:	f7ff feb6 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 801173c:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 801173e:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011740:	4620      	mov	r0, r4
 8011742:	695b      	ldr	r3, [r3, #20]
 8011744:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 8011746:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 8011748:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 801174a:	9a01      	ldr	r2, [sp, #4]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	4620      	mov	r0, r4
}
 8011750:	b002      	add	sp, #8
 8011752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 8011756:	4718      	bx	r3
 8011758:	0801ccf7 	.word	0x0801ccf7

0801175c <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801175c:	b570      	push	{r4, r5, r6, lr}
 801175e:	460d      	mov	r5, r1
 8011760:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011762:	4817      	ldr	r0, [pc, #92]	; (80117c0 <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh+0x64>)
 8011764:	f7ff fea0 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011768:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801176c:	230c      	movs	r3, #12
 801176e:	fb03 4302 	mla	r3, r3, r2, r4
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	bb0b      	cbnz	r3, 80117ba <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011776:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011778:	f504 7641 	add.w	r6, r4, #772	; 0x304
 801177c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011780:	b141      	cbz	r1, 8011794 <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011782:	6889      	ldr	r1, [r1, #8]
 8011784:	4281      	cmp	r1, r0
 8011786:	d018      	beq.n	80117ba <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh+0x5e>
		insertion_point++;
 8011788:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 801178a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 801178e:	bf08      	it	eq
 8011790:	2300      	moveq	r3, #0
 8011792:	e7f3      	b.n	801177c <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh+0x20>
 8011794:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801179c:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 80117a0:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 80117a2:	250a      	movs	r5, #10
 80117a4:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 80117a6:	250c      	movs	r5, #12
 80117a8:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80117ac:	4634      	mov	r4, r6
	def->hash = hash;
 80117ae:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80117b0:	3404      	adds	r4, #4
	return true;
 80117b2:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 80117b4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 80117b8:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 80117ba:	2000      	movs	r0, #0
 80117bc:	e7fc      	b.n	80117b8 <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh+0x5c>
 80117be:	bf00      	nop
 80117c0:	0801cd0d 	.word	0x0801cd0d

080117c4 <_ZN10MessageBus7forwardI17Power_BatteryInfoEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 80117c4:	b538      	push	{r3, r4, r5, lr}
 80117c6:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80117c8:	480b      	ldr	r0, [pc, #44]	; (80117f8 <_ZN10MessageBus7forwardI17Power_BatteryInfoEEbPS_+0x34>)
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 80117ca:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 80117cc:	f7ff fe6c 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 80117d0:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 80117d2:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80117d4:	4620      	mov	r0, r4
 80117d6:	695b      	ldr	r3, [r3, #20]
 80117d8:	4798      	blx	r3
	if(def != nullptr) {
 80117da:	b150      	cbz	r0, 80117f2 <_ZN10MessageBus7forwardI17Power_BatteryInfoEEbPS_+0x2e>
 80117dc:	7800      	ldrb	r0, [r0, #0]
 80117de:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 80117e2:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80117e6:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	; 0xc14
 80117ea:	b91b      	cbnz	r3, 80117f4 <_ZN10MessageBus7forwardI17Power_BatteryInfoEEbPS_+0x30>
		return true;
 80117ec:	2001      	movs	r0, #1
		forwarders[packetID] = bus;
 80117ee:	f8c4 5c14 	str.w	r5, [r4, #3092]	; 0xc14
}
 80117f2:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 80117f4:	2000      	movs	r0, #0
 80117f6:	e7fc      	b.n	80117f2 <_ZN10MessageBus7forwardI17Power_BatteryInfoEEbPS_+0x2e>
 80117f8:	0801cd0d 	.word	0x0801cd0d

080117fc <_ZN10MessageBus4sendI17Power_BatteryInfoEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 80117fc:	b513      	push	{r0, r1, r4, lr}
 80117fe:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011800:	4808      	ldr	r0, [pc, #32]	; (8011824 <_ZN10MessageBus4sendI17Power_BatteryInfoEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 8011802:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 8011804:	f7ff fe50 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011808:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 801180a:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 801180c:	4620      	mov	r0, r4
 801180e:	695b      	ldr	r3, [r3, #20]
 8011810:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 8011812:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 8011814:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 8011816:	9a01      	ldr	r2, [sp, #4]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	4620      	mov	r0, r4
}
 801181c:	b002      	add	sp, #8
 801181e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 8011822:	4718      	bx	r3
 8011824:	0801cd0d 	.word	0x0801cd0d

08011828 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011828:	b570      	push	{r4, r5, r6, lr}
 801182a:	460d      	mov	r5, r1
 801182c:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 801182e:	4817      	ldr	r0, [pc, #92]	; (801188c <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh+0x64>)
 8011830:	f7ff fe3a 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011834:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011838:	230c      	movs	r3, #12
 801183a:	fb03 4302 	mla	r3, r3, r2, r4
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	bb0b      	cbnz	r3, 8011886 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011842:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011844:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011848:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801184c:	b141      	cbz	r1, 8011860 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801184e:	6889      	ldr	r1, [r1, #8]
 8011850:	4281      	cmp	r1, r0
 8011852:	d018      	beq.n	8011886 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh+0x5e>
		insertion_point++;
 8011854:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 801185a:	bf08      	it	eq
 801185c:	2300      	moveq	r3, #0
 801185e:	e7f3      	b.n	8011848 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh+0x20>
 8011860:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011868:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 801186c:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 801186e:	250a      	movs	r5, #10
 8011870:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011872:	250c      	movs	r5, #12
 8011874:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011878:	4634      	mov	r4, r6
	def->hash = hash;
 801187a:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801187c:	3404      	adds	r4, #4
	return true;
 801187e:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011880:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011884:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011886:	2000      	movs	r0, #0
 8011888:	e7fc      	b.n	8011884 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh+0x5c>
 801188a:	bf00      	nop
 801188c:	0801cd21 	.word	0x0801cd21

08011890 <_ZN10MessageBus4sendI22Power_ControllerHealthEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011890:	b513      	push	{r0, r1, r4, lr}
 8011892:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011894:	4808      	ldr	r0, [pc, #32]	; (80118b8 <_ZN10MessageBus4sendI22Power_ControllerHealthEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 8011896:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 8011898:	f7ff fe06 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 801189c:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 801189e:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80118a0:	4620      	mov	r0, r4
 80118a2:	695b      	ldr	r3, [r3, #20]
 80118a4:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 80118a6:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 80118a8:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 80118aa:	9a01      	ldr	r2, [sp, #4]
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	4620      	mov	r0, r4
}
 80118b0:	b002      	add	sp, #8
 80118b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 80118b6:	4718      	bx	r3
 80118b8:	0801cd21 	.word	0x0801cd21

080118bc <_ZN10MessageBus6defineI21Power_ControllerStateEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80118bc:	b570      	push	{r4, r5, r6, lr}
 80118be:	460d      	mov	r5, r1
 80118c0:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80118c2:	4817      	ldr	r0, [pc, #92]	; (8011920 <_ZN10MessageBus6defineI21Power_ControllerStateEEbh+0x64>)
 80118c4:	f7ff fdf0 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 80118c8:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80118cc:	230c      	movs	r3, #12
 80118ce:	fb03 4302 	mla	r3, r3, r2, r4
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	bb0b      	cbnz	r3, 801191a <_ZN10MessageBus6defineI21Power_ControllerStateEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 80118d6:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 80118d8:	f504 7641 	add.w	r6, r4, #772	; 0x304
 80118dc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80118e0:	b141      	cbz	r1, 80118f4 <_ZN10MessageBus6defineI21Power_ControllerStateEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80118e2:	6889      	ldr	r1, [r1, #8]
 80118e4:	4281      	cmp	r1, r0
 80118e6:	d018      	beq.n	801191a <_ZN10MessageBus6defineI21Power_ControllerStateEEbh+0x5e>
		insertion_point++;
 80118e8:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 80118ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 80118ee:	bf08      	it	eq
 80118f0:	2300      	moveq	r3, #0
 80118f2:	e7f3      	b.n	80118dc <_ZN10MessageBus6defineI21Power_ControllerStateEEbh+0x20>
 80118f4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 80118f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80118fc:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011900:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011902:	2503      	movs	r5, #3
 8011904:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011906:	250c      	movs	r5, #12
 8011908:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801190c:	4634      	mov	r4, r6
	def->hash = hash;
 801190e:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011910:	3404      	adds	r4, #4
	return true;
 8011912:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011914:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011918:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 801191a:	2000      	movs	r0, #0
 801191c:	e7fc      	b.n	8011918 <_ZN10MessageBus6defineI21Power_ControllerStateEEbh+0x5c>
 801191e:	bf00      	nop
 8011920:	0801cd3a 	.word	0x0801cd3a

08011924 <_ZN10MessageBus4sendI21Power_ControllerStateEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011924:	b513      	push	{r0, r1, r4, lr}
 8011926:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011928:	4808      	ldr	r0, [pc, #32]	; (801194c <_ZN10MessageBus4sendI21Power_ControllerStateEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 801192a:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 801192c:	f7ff fdbc 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011930:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8011932:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011934:	4620      	mov	r0, r4
 8011936:	695b      	ldr	r3, [r3, #20]
 8011938:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 801193a:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 801193c:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 801193e:	9a01      	ldr	r2, [sp, #4]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	4620      	mov	r0, r4
}
 8011944:	b002      	add	sp, #8
 8011946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 801194a:	4718      	bx	r3
 801194c:	0801cd3a 	.word	0x0801cd3a

08011950 <_ZN10MessageBus6defineI10PingPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011950:	b570      	push	{r4, r5, r6, lr}
 8011952:	460d      	mov	r5, r1
 8011954:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011956:	4817      	ldr	r0, [pc, #92]	; (80119b4 <_ZN10MessageBus6defineI10PingPacketEEbh+0x64>)
 8011958:	f7ff fda6 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 801195c:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011960:	230c      	movs	r3, #12
 8011962:	fb03 4302 	mla	r3, r3, r2, r4
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	bb0b      	cbnz	r3, 80119ae <_ZN10MessageBus6defineI10PingPacketEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 801196a:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 801196c:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011970:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011974:	b141      	cbz	r1, 8011988 <_ZN10MessageBus6defineI10PingPacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011976:	6889      	ldr	r1, [r1, #8]
 8011978:	4281      	cmp	r1, r0
 801197a:	d018      	beq.n	80119ae <_ZN10MessageBus6defineI10PingPacketEEbh+0x5e>
		insertion_point++;
 801197c:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 801197e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011982:	bf08      	it	eq
 8011984:	2300      	moveq	r3, #0
 8011986:	e7f3      	b.n	8011970 <_ZN10MessageBus6defineI10PingPacketEEbh+0x20>
 8011988:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 801198c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011990:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011994:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011996:	250a      	movs	r5, #10
 8011998:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 801199a:	250c      	movs	r5, #12
 801199c:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80119a0:	4634      	mov	r4, r6
	def->hash = hash;
 80119a2:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80119a4:	3404      	adds	r4, #4
	return true;
 80119a6:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 80119a8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 80119ac:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 80119ae:	2000      	movs	r0, #0
 80119b0:	e7fc      	b.n	80119ac <_ZN10MessageBus6defineI10PingPacketEEbh+0x5c>
 80119b2:	bf00      	nop
 80119b4:	0801cd52 	.word	0x0801cd52

080119b8 <_ZN10MessageBus7forwardI10PingPacketEEbPS_>:
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80119bc:	480b      	ldr	r0, [pc, #44]	; (80119ec <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x34>)
template<typename T> bool MessageBus::forward(MessageBus* bus) {
 80119be:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 80119c0:	f7ff fd72 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 80119c4:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 80119c6:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80119c8:	4620      	mov	r0, r4
 80119ca:	695b      	ldr	r3, [r3, #20]
 80119cc:	4798      	blx	r3
	if(def != nullptr) {
 80119ce:	b150      	cbz	r0, 80119e6 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x2e>
 80119d0:	7800      	ldrb	r0, [r0, #0]
 80119d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		if(forwarders[packetID] != nullptr) {
 80119d6:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80119da:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	; 0xc14
 80119de:	b91b      	cbnz	r3, 80119e8 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x30>
		return true;
 80119e0:	2001      	movs	r0, #1
		forwarders[packetID] = bus;
 80119e2:	f8c4 5c14 	str.w	r5, [r4, #3092]	; 0xc14
}
 80119e6:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 80119e8:	2000      	movs	r0, #0
 80119ea:	e7fc      	b.n	80119e6 <_ZN10MessageBus7forwardI10PingPacketEEbPS_+0x2e>
 80119ec:	0801cd52 	.word	0x0801cd52

080119f0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	460d      	mov	r5, r1
 80119f4:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 80119f6:	4817      	ldr	r0, [pc, #92]	; (8011a54 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x64>)
 80119f8:	f7ff fd56 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 80119fc:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011a00:	230c      	movs	r3, #12
 8011a02:	fb03 4302 	mla	r3, r3, r2, r4
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	bb0b      	cbnz	r3, 8011a4e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011a0a:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011a0c:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011a10:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011a14:	b141      	cbz	r1, 8011a28 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011a16:	6889      	ldr	r1, [r1, #8]
 8011a18:	4281      	cmp	r1, r0
 8011a1a:	d018      	beq.n	8011a4e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5e>
		insertion_point++;
 8011a1c:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011a22:	bf08      	it	eq
 8011a24:	2300      	moveq	r3, #0
 8011a26:	e7f3      	b.n	8011a10 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x20>
 8011a28:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a30:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011a34:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011a36:	2503      	movs	r5, #3
 8011a38:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011a3a:	250c      	movs	r5, #12
 8011a3c:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011a40:	4634      	mov	r4, r6
	def->hash = hash;
 8011a42:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011a44:	3404      	adds	r4, #4
	return true;
 8011a46:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011a48:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011a4c:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011a4e:	2000      	movs	r0, #0
 8011a50:	e7fc      	b.n	8011a4c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x5c>
 8011a52:	bf00      	nop
 8011a54:	0801cd5f 	.word	0x0801cd5f

08011a58 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011a58:	b570      	push	{r4, r5, r6, lr}
 8011a5a:	460d      	mov	r5, r1
 8011a5c:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011a5e:	4817      	ldr	r0, [pc, #92]	; (8011abc <_ZN10MessageBus6defineI13RequestPacketEEbh+0x64>)
 8011a60:	f7ff fd22 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011a64:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011a68:	230c      	movs	r3, #12
 8011a6a:	fb03 4302 	mla	r3, r3, r2, r4
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	bb0b      	cbnz	r3, 8011ab6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011a72:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011a74:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011a78:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011a7c:	b141      	cbz	r1, 8011a90 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011a7e:	6889      	ldr	r1, [r1, #8]
 8011a80:	4281      	cmp	r1, r0
 8011a82:	d018      	beq.n	8011ab6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5e>
		insertion_point++;
 8011a84:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011a8a:	bf08      	it	eq
 8011a8c:	2300      	moveq	r3, #0
 8011a8e:	e7f3      	b.n	8011a78 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x20>
 8011a90:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011a94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a98:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011a9c:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011a9e:	250a      	movs	r5, #10
 8011aa0:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011aa2:	250c      	movs	r5, #12
 8011aa4:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011aa8:	4634      	mov	r4, r6
	def->hash = hash;
 8011aaa:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011aac:	3404      	adds	r4, #4
	return true;
 8011aae:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011ab0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	e7fc      	b.n	8011ab4 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x5c>
 8011aba:	bf00      	nop
 8011abc:	0801cd6d 	.word	0x0801cd6d

08011ac0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	460d      	mov	r5, r1
 8011ac4:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011ac6:	4817      	ldr	r0, [pc, #92]	; (8011b24 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x64>)
 8011ac8:	f7ff fcee 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011acc:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011ad0:	230c      	movs	r3, #12
 8011ad2:	fb03 4302 	mla	r3, r3, r2, r4
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	bb0b      	cbnz	r3, 8011b1e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011ada:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011adc:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011ae0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011ae4:	b141      	cbz	r1, 8011af8 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011ae6:	6889      	ldr	r1, [r1, #8]
 8011ae8:	4281      	cmp	r1, r0
 8011aea:	d018      	beq.n	8011b1e <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5e>
		insertion_point++;
 8011aec:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011af2:	bf08      	it	eq
 8011af4:	2300      	moveq	r3, #0
 8011af6:	e7f3      	b.n	8011ae0 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x20>
 8011af8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011afc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b00:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011b04:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011b06:	250a      	movs	r5, #10
 8011b08:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011b0a:	250c      	movs	r5, #12
 8011b0c:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011b10:	4634      	mov	r4, r6
	def->hash = hash;
 8011b12:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011b14:	3404      	adds	r4, #4
	return true;
 8011b16:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011b18:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011b1e:	2000      	movs	r0, #0
 8011b20:	e7fc      	b.n	8011b1c <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x5c>
 8011b22:	bf00      	nop
 8011b24:	0801cd7d 	.word	0x0801cd7d

08011b28 <_ZN10MessageBus4sendI14ResponsePacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011b28:	b513      	push	{r0, r1, r4, lr}
 8011b2a:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011b2c:	4808      	ldr	r0, [pc, #32]	; (8011b50 <_ZN10MessageBus4sendI14ResponsePacketEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 8011b2e:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 8011b30:	f7ff fcba 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011b34:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8011b36:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011b38:	4620      	mov	r0, r4
 8011b3a:	695b      	ldr	r3, [r3, #20]
 8011b3c:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 8011b3e:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 8011b40:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 8011b42:	9a01      	ldr	r2, [sp, #4]
 8011b44:	691b      	ldr	r3, [r3, #16]
 8011b46:	4620      	mov	r0, r4
}
 8011b48:	b002      	add	sp, #8
 8011b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 8011b4e:	4718      	bx	r3
 8011b50:	0801cd7d 	.word	0x0801cd7d

08011b54 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	460d      	mov	r5, r1
 8011b58:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011b5a:	4817      	ldr	r0, [pc, #92]	; (8011bb8 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x64>)
 8011b5c:	f7ff fca4 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011b60:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011b64:	230c      	movs	r3, #12
 8011b66:	fb03 4302 	mla	r3, r3, r2, r4
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	bb0b      	cbnz	r3, 8011bb2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011b6e:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011b70:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011b74:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011b78:	b141      	cbz	r1, 8011b8c <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011b7a:	6889      	ldr	r1, [r1, #8]
 8011b7c:	4281      	cmp	r1, r0
 8011b7e:	d018      	beq.n	8011bb2 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5e>
		insertion_point++;
 8011b80:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011b86:	bf08      	it	eq
 8011b88:	2300      	moveq	r3, #0
 8011b8a:	e7f3      	b.n	8011b74 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x20>
 8011b8c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b94:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011b98:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011b9a:	2507      	movs	r5, #7
 8011b9c:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011b9e:	250c      	movs	r5, #12
 8011ba0:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011ba4:	4634      	mov	r4, r6
	def->hash = hash;
 8011ba6:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011ba8:	3404      	adds	r4, #4
	return true;
 8011baa:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011bac:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011bb0:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	e7fc      	b.n	8011bb0 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x5c>
 8011bb6:	bf00      	nop
 8011bb8:	0801cd8e 	.word	0x0801cd8e

08011bbc <_ZN10MessageBus6defineI13PayloadPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	460d      	mov	r5, r1
 8011bc0:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011bc2:	4817      	ldr	r0, [pc, #92]	; (8011c20 <_ZN10MessageBus6defineI13PayloadPacketEEbh+0x64>)
 8011bc4:	f7ff fc70 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011bc8:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011bcc:	230c      	movs	r3, #12
 8011bce:	fb03 4302 	mla	r3, r3, r2, r4
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	bb13      	cbnz	r3, 8011c1c <_ZN10MessageBus6defineI13PayloadPacketEEbh+0x60>
	uint32_t insertion_point = hash % 256;
 8011bd6:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011bd8:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011bdc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011be0:	b141      	cbz	r1, 8011bf4 <_ZN10MessageBus6defineI13PayloadPacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011be2:	6889      	ldr	r1, [r1, #8]
 8011be4:	4281      	cmp	r1, r0
 8011be6:	d019      	beq.n	8011c1c <_ZN10MessageBus6defineI13PayloadPacketEEbh+0x60>
		insertion_point++;
 8011be8:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011bee:	bf08      	it	eq
 8011bf0:	2300      	moveq	r3, #0
 8011bf2:	e7f3      	b.n	8011bdc <_ZN10MessageBus6defineI13PayloadPacketEEbh+0x20>
 8011bf4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011bfc:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011c00:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011c02:	f240 2506 	movw	r5, #518	; 0x206
 8011c06:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011c08:	250c      	movs	r5, #12
 8011c0a:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011c0e:	4634      	mov	r4, r6
	def->hash = hash;
 8011c10:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011c12:	3404      	adds	r4, #4
	return true;
 8011c14:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011c16:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011c1a:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011c1c:	2000      	movs	r0, #0
 8011c1e:	e7fc      	b.n	8011c1a <_ZN10MessageBus6defineI13PayloadPacketEEbh+0x5e>
 8011c20:	0801cd9f 	.word	0x0801cd9f

08011c24 <_ZN10MessageBus4sendI13PayloadPacketEEbPT_>:
template<typename T> bool MessageBus::send(T *message) {
 8011c24:	b513      	push	{r0, r1, r4, lr}
 8011c26:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011c28:	4808      	ldr	r0, [pc, #32]	; (8011c4c <_ZN10MessageBus4sendI13PayloadPacketEEbPT_+0x28>)
template<typename T> bool MessageBus::send(T *message) {
 8011c2a:	9101      	str	r1, [sp, #4]
	size_t hash = typeid(T).hash_code();
 8011c2c:	f7ff fc3c 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8011c30:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8011c32:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 8011c34:	4620      	mov	r0, r4
 8011c36:	695b      	ldr	r3, [r3, #20]
 8011c38:	4798      	blx	r3
	return internal_send(def, (uint8_t*) message);
 8011c3a:	6823      	ldr	r3, [r4, #0]
	PacketDefinition* def = retrieve(hash);
 8011c3c:	4601      	mov	r1, r0
	return internal_send(def, (uint8_t*) message);
 8011c3e:	9a01      	ldr	r2, [sp, #4]
 8011c40:	691b      	ldr	r3, [r3, #16]
 8011c42:	4620      	mov	r0, r4
}
 8011c44:	b002      	add	sp, #8
 8011c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return internal_send(def, (uint8_t*) message);
 8011c4a:	4718      	bx	r3
 8011c4c:	0801cd9f 	.word	0x0801cd9f

08011c50 <_ZN10MessageBus6defineI11FlushPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8011c50:	b570      	push	{r4, r5, r6, lr}
 8011c52:	460d      	mov	r5, r1
 8011c54:	4604      	mov	r4, r0
	size_t hash = typeid(T).hash_code();
 8011c56:	4817      	ldr	r0, [pc, #92]	; (8011cb4 <_ZN10MessageBus6defineI11FlushPacketEEbh+0x64>)
 8011c58:	f7ff fc26 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
 8011c5c:	f005 023f 	and.w	r2, r5, #63	; 0x3f
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8011c60:	230c      	movs	r3, #12
 8011c62:	fb03 4302 	mla	r3, r3, r2, r4
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	bb0b      	cbnz	r3, 8011cae <_ZN10MessageBus6defineI11FlushPacketEEbh+0x5e>
	uint32_t insertion_point = hash % 256;
 8011c6a:	b2c3      	uxtb	r3, r0
	while(definitions_by_type[insertion_point] != nullptr) {
 8011c6c:	f504 7641 	add.w	r6, r4, #772	; 0x304
 8011c70:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8011c74:	b141      	cbz	r1, 8011c88 <_ZN10MessageBus6defineI11FlushPacketEEbh+0x38>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8011c76:	6889      	ldr	r1, [r1, #8]
 8011c78:	4281      	cmp	r1, r0
 8011c7a:	d018      	beq.n	8011cae <_ZN10MessageBus6defineI11FlushPacketEEbh+0x5e>
		insertion_point++;
 8011c7c:	3301      	adds	r3, #1
		if(insertion_point == 256) {
 8011c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
			insertion_point = 0;
 8011c82:	bf08      	it	eq
 8011c84:	2300      	moveq	r3, #0
 8011c86:	e7f3      	b.n	8011c70 <_ZN10MessageBus6defineI11FlushPacketEEbh+0x20>
 8011c88:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	definitions_by_type[insertion_point] = def;
 8011c8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011c90:	eb04 0681 	add.w	r6, r4, r1, lsl #2
	def->id = identifier;
 8011c94:	7135      	strb	r5, [r6, #4]
	def->size = struct_size;
 8011c96:	250f      	movs	r5, #15
 8011c98:	60b5      	str	r5, [r6, #8]
	def->hash = hash;
 8011c9a:	250c      	movs	r5, #12
 8011c9c:	fb05 4202 	mla	r2, r5, r2, r4
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011ca0:	4634      	mov	r4, r6
	def->hash = hash;
 8011ca2:	60d0      	str	r0, [r2, #12]
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8011ca4:	3404      	adds	r4, #4
	return true;
 8011ca6:	2001      	movs	r0, #1
	definitions_by_type[insertion_point] = def;
 8011ca8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
 8011cac:	bd70      	pop	{r4, r5, r6, pc}
		return false; // Packet ID already in use
 8011cae:	2000      	movs	r0, #0
 8011cb0:	e7fc      	b.n	8011cac <_ZN10MessageBus6defineI11FlushPacketEEbh+0x5c>
 8011cb2:	bf00      	nop
 8011cb4:	0801cdaf 	.word	0x0801cdaf

08011cb8 <_ZNSt8functionIFvhPvEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 8011cb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011cba:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011cc0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011cc2:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011cc4:	b12b      	cbz	r3, 8011cd2 <_ZNSt8functionIFvhPvEEC1ERKS2_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011cc6:	2202      	movs	r2, #2
 8011cc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011cca:	68eb      	ldr	r3, [r5, #12]
 8011ccc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011cce:	68ab      	ldr	r3, [r5, #8]
 8011cd0:	60a3      	str	r3, [r4, #8]
    }
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>:
template <class T> bool LinkedList<T>::add(T item) {
 8011cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cda:	4604      	mov	r4, r0
 8011cdc:	b085      	sub	sp, #20
 8011cde:	460d      	mov	r5, r1
	if(osMutexWait(mutex, 100) == osOK) {
 8011ce0:	6880      	ldr	r0, [r0, #8]
 8011ce2:	2164      	movs	r1, #100	; 0x64
 8011ce4:	f7f7 ff3e 	bl	8009b64 <osMutexWait>
 8011ce8:	bb70      	cbnz	r0, 8011d48 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x70>
		this->iterator = new Iterator<T>(item, child);
 8011cea:	4629      	mov	r1, r5
 8011cec:	4668      	mov	r0, sp
		Iterator<T>* child = this->iterator;
 8011cee:	68e7      	ldr	r7, [r4, #12]
		this->iterator = new Iterator<T>(item, child);
 8011cf0:	f7ff ffe2 	bl	8011cb8 <_ZNSt8functionIFvhPvEEC1ERKS2_>
 8011cf4:	2020      	movs	r0, #32
 8011cf6:	f001 fec9 	bl	8013a8c <_Znwj>
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 8011cfa:	4b16      	ldr	r3, [pc, #88]	; (8011d54 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x7c>)
		this->iterator = new Iterator<T>(item, child);
 8011cfc:	4606      	mov	r6, r0
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 8011cfe:	6087      	str	r7, [r0, #8]
 8011d00:	6003      	str	r3, [r0, #0]
 8011d02:	4669      	mov	r1, sp
 8011d04:	300c      	adds	r0, #12
 8011d06:	2701      	movs	r7, #1
 8011d08:	f7ff ffd6 	bl	8011cb8 <_ZNSt8functionIFvhPvEEC1ERKS2_>
    class function<_Res(_ArgTypes...)>
 8011d0c:	4668      	mov	r0, sp
		this->iterator = new Iterator<T>(item, child);
 8011d0e:	60e6      	str	r6, [r4, #12]
template <class T> Iterator<T>::Iterator(T current, Iterator<T>* next) : next(next), current(current), valid(true) {
 8011d10:	7737      	strb	r7, [r6, #28]
 8011d12:	f7fa fa85 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
		if(this->iterator != nullptr) {
 8011d16:	68e5      	ldr	r5, [r4, #12]
 8011d18:	b165      	cbz	r5, 8011d34 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x5c>
			this->iterator->trackExceptions(this);
 8011d1a:	4621      	mov	r1, r4
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f001 fe8c 	bl	8013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>
			nitems++;
 8011d22:	6923      	ldr	r3, [r4, #16]
			osMutexRelease(mutex);
 8011d24:	68a0      	ldr	r0, [r4, #8]
			nitems++;
 8011d26:	443b      	add	r3, r7
 8011d28:	6123      	str	r3, [r4, #16]
			osMutexRelease(mutex);
 8011d2a:	f7f7 ff40 	bl	8009bae <osMutexRelease>
		return true;
 8011d2e:	4638      	mov	r0, r7
}
 8011d30:	b005      	add	sp, #20
 8011d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			throwException("MemoryAllocationFailure");
 8011d34:	4620      	mov	r0, r4
 8011d36:	229c      	movs	r2, #156	; 0x9c
 8011d38:	4907      	ldr	r1, [pc, #28]	; (8011d58 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x80>)
 8011d3a:	f001 fe81 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
			osMutexRelease(mutex);
 8011d3e:	68a0      	ldr	r0, [r4, #8]
 8011d40:	f7f7 ff35 	bl	8009bae <osMutexRelease>
		return false;
 8011d44:	2000      	movs	r0, #0
 8011d46:	e7f3      	b.n	8011d30 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x58>
		throwException("DeadLock");
 8011d48:	22a3      	movs	r2, #163	; 0xa3
 8011d4a:	4904      	ldr	r1, [pc, #16]	; (8011d5c <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x84>)
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f001 fe77 	bl	8013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>
 8011d52:	e7f7      	b.n	8011d44 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_+0x6c>
 8011d54:	0801cff8 	.word	0x0801cff8
 8011d58:	0801b3db 	.word	0x0801b3db
 8011d5c:	0801c0e3 	.word	0x0801c0e3

08011d60 <_ZNSt8functionIFvhP13Power_BusInfoEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8011d60:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011d62:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011d64:	4604      	mov	r4, r0
 8011d66:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011d68:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011d6a:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011d6c:	b12b      	cbz	r3, 8011d7a <_ZNSt8functionIFvhP13Power_BusInfoEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011d6e:	2202      	movs	r2, #2
 8011d70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011d72:	68eb      	ldr	r3, [r5, #12]
 8011d74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011d76:	68ab      	ldr	r3, [r5, #8]
 8011d78:	60a3      	str	r3, [r4, #8]
    }
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011d80 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d82:	4604      	mov	r4, r0
	switch (__op)
 8011d84:	b17a      	cbz	r2, 8011da6 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8011d86:	2a01      	cmp	r2, #1
 8011d88:	d012      	beq.n	8011db0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 8011d8a:	2a02      	cmp	r2, #2
 8011d8c:	d012      	beq.n	8011db4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8011d8e:	2a03      	cmp	r2, #3
 8011d90:	d10b      	bne.n	8011daa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8011d92:	6804      	ldr	r4, [r0, #0]
 8011d94:	b14c      	cbz	r4, 8011daa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8011d96:	4620      	mov	r0, r4
 8011d98:	f7fa fa42 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8011d9c:	2110      	movs	r1, #16
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f003 fc7e 	bl	80156a0 <_ZdlPvj>
 8011da4:	e001      	b.n	8011daa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011da6:	4b09      	ldr	r3, [pc, #36]	; (8011dcc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011da8:	6023      	str	r3, [r4, #0]
      }
 8011daa:	2000      	movs	r0, #0
 8011dac:	b003      	add	sp, #12
 8011dae:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8011db0:	680b      	ldr	r3, [r1, #0]
 8011db2:	e7f9      	b.n	8011da8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8011db4:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011db6:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8011db8:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011dba:	f001 fe67 	bl	8013a8c <_Znwj>
 8011dbe:	4605      	mov	r5, r0
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 8011dc0:	9901      	ldr	r1, [sp, #4]
 8011dc2:	f7ff ffcd 	bl	8011d60 <_ZNSt8functionIFvhP13Power_BusInfoEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8011dc6:	6025      	str	r5, [r4, #0]
	}
 8011dc8:	e7ef      	b.n	8011daa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 8011dca:	bf00      	nop
 8011dcc:	0801ce04 	.word	0x0801ce04

08011dd0 <_ZNSt8functionIFvhP16Power_SupplyInfoEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8011dd0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011dd2:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011dd8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011dda:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011ddc:	b12b      	cbz	r3, 8011dea <_ZNSt8functionIFvhP16Power_SupplyInfoEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011dde:	2202      	movs	r2, #2
 8011de0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011de2:	68eb      	ldr	r3, [r5, #12]
 8011de4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011de6:	68ab      	ldr	r3, [r5, #8]
 8011de8:	60a3      	str	r3, [r4, #8]
    }
 8011dea:	4620      	mov	r0, r4
 8011dec:	bd38      	pop	{r3, r4, r5, pc}
	...

08011df0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011df2:	4604      	mov	r4, r0
	switch (__op)
 8011df4:	b17a      	cbz	r2, 8011e16 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8011df6:	2a01      	cmp	r2, #1
 8011df8:	d012      	beq.n	8011e20 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 8011dfa:	2a02      	cmp	r2, #2
 8011dfc:	d012      	beq.n	8011e24 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8011dfe:	2a03      	cmp	r2, #3
 8011e00:	d10b      	bne.n	8011e1a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8011e02:	6804      	ldr	r4, [r0, #0]
 8011e04:	b14c      	cbz	r4, 8011e1a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8011e06:	4620      	mov	r0, r4
 8011e08:	f7fa fa0a 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8011e0c:	2110      	movs	r1, #16
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f003 fc46 	bl	80156a0 <_ZdlPvj>
 8011e14:	e001      	b.n	8011e1a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011e16:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011e18:	6023      	str	r3, [r4, #0]
      }
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	b003      	add	sp, #12
 8011e1e:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8011e20:	680b      	ldr	r3, [r1, #0]
 8011e22:	e7f9      	b.n	8011e18 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8011e24:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011e26:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8011e28:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011e2a:	f001 fe2f 	bl	8013a8c <_Znwj>
 8011e2e:	4605      	mov	r5, r0
 8011e30:	9901      	ldr	r1, [sp, #4]
 8011e32:	f7ff ffcd 	bl	8011dd0 <_ZNSt8functionIFvhP16Power_SupplyInfoEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8011e36:	6025      	str	r5, [r4, #0]
	}
 8011e38:	e7ef      	b.n	8011e1a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 8011e3a:	bf00      	nop
 8011e3c:	0801ce54 	.word	0x0801ce54

08011e40 <_ZNSt8functionIFvhP19Power_SupplyControlEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8011e40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011e42:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011e44:	4604      	mov	r4, r0
 8011e46:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011e48:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011e4a:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011e4c:	b12b      	cbz	r3, 8011e5a <_ZNSt8functionIFvhP19Power_SupplyControlEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011e4e:	2202      	movs	r2, #2
 8011e50:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011e52:	68eb      	ldr	r3, [r5, #12]
 8011e54:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011e56:	68ab      	ldr	r3, [r5, #8]
 8011e58:	60a3      	str	r3, [r4, #8]
    }
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011e60 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e62:	4604      	mov	r4, r0
	switch (__op)
 8011e64:	b17a      	cbz	r2, 8011e86 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8011e66:	2a01      	cmp	r2, #1
 8011e68:	d012      	beq.n	8011e90 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 8011e6a:	2a02      	cmp	r2, #2
 8011e6c:	d012      	beq.n	8011e94 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8011e6e:	2a03      	cmp	r2, #3
 8011e70:	d10b      	bne.n	8011e8a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8011e72:	6804      	ldr	r4, [r0, #0]
 8011e74:	b14c      	cbz	r4, 8011e8a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8011e76:	4620      	mov	r0, r4
 8011e78:	f7fa f9d2 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8011e7c:	2110      	movs	r1, #16
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f003 fc0e 	bl	80156a0 <_ZdlPvj>
 8011e84:	e001      	b.n	8011e8a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011e86:	4b09      	ldr	r3, [pc, #36]	; (8011eac <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011e88:	6023      	str	r3, [r4, #0]
      }
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	b003      	add	sp, #12
 8011e8e:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8011e90:	680b      	ldr	r3, [r1, #0]
 8011e92:	e7f9      	b.n	8011e88 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8011e94:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011e96:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8011e98:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011e9a:	f001 fdf7 	bl	8013a8c <_Znwj>
 8011e9e:	4605      	mov	r5, r0
 8011ea0:	9901      	ldr	r1, [sp, #4]
 8011ea2:	f7ff ffcd 	bl	8011e40 <_ZNSt8functionIFvhP19Power_SupplyControlEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8011ea6:	6025      	str	r5, [r4, #0]
	}
 8011ea8:	e7ef      	b.n	8011e8a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 8011eaa:	bf00      	nop
 8011eac:	0801cea8 	.word	0x0801cea8

08011eb0 <_ZNSt8functionIFvhP17Power_BatteryInfoEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8011eb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011eb2:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011eb8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011eba:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011ebc:	b12b      	cbz	r3, 8011eca <_ZNSt8functionIFvhP17Power_BatteryInfoEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011ebe:	2202      	movs	r2, #2
 8011ec0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011ec2:	68eb      	ldr	r3, [r5, #12]
 8011ec4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011ec6:	68ab      	ldr	r3, [r5, #8]
 8011ec8:	60a3      	str	r3, [r4, #8]
    }
 8011eca:	4620      	mov	r0, r4
 8011ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

08011ed0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ed2:	4604      	mov	r4, r0
	switch (__op)
 8011ed4:	b17a      	cbz	r2, 8011ef6 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8011ed6:	2a01      	cmp	r2, #1
 8011ed8:	d012      	beq.n	8011f00 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 8011eda:	2a02      	cmp	r2, #2
 8011edc:	d012      	beq.n	8011f04 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8011ede:	2a03      	cmp	r2, #3
 8011ee0:	d10b      	bne.n	8011efa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8011ee2:	6804      	ldr	r4, [r0, #0]
 8011ee4:	b14c      	cbz	r4, 8011efa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f7fa f99a 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8011eec:	2110      	movs	r1, #16
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f003 fbd6 	bl	80156a0 <_ZdlPvj>
 8011ef4:	e001      	b.n	8011efa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011ef6:	4b09      	ldr	r3, [pc, #36]	; (8011f1c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011ef8:	6023      	str	r3, [r4, #0]
      }
 8011efa:	2000      	movs	r0, #0
 8011efc:	b003      	add	sp, #12
 8011efe:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8011f00:	680b      	ldr	r3, [r1, #0]
 8011f02:	e7f9      	b.n	8011ef8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8011f04:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011f06:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8011f08:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011f0a:	f001 fdbf 	bl	8013a8c <_Znwj>
 8011f0e:	4605      	mov	r5, r0
 8011f10:	9901      	ldr	r1, [sp, #4]
 8011f12:	f7ff ffcd 	bl	8011eb0 <_ZNSt8functionIFvhP17Power_BatteryInfoEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8011f16:	6025      	str	r5, [r4, #0]
	}
 8011f18:	e7ef      	b.n	8011efa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 8011f1a:	bf00      	nop
 8011f1c:	0801cefc 	.word	0x0801cefc

08011f20 <_ZNSt8functionIFvhP10PingPacketEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8011f20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011f22:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011f24:	4604      	mov	r4, r0
 8011f26:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011f28:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011f2a:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011f2c:	b12b      	cbz	r3, 8011f3a <_ZNSt8functionIFvhP10PingPacketEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011f2e:	2202      	movs	r2, #2
 8011f30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011f32:	68eb      	ldr	r3, [r5, #12]
 8011f34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011f36:	68ab      	ldr	r3, [r5, #8]
 8011f38:	60a3      	str	r3, [r4, #8]
    }
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011f40 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f42:	4604      	mov	r4, r0
	switch (__op)
 8011f44:	b17a      	cbz	r2, 8011f66 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8011f46:	2a01      	cmp	r2, #1
 8011f48:	d012      	beq.n	8011f70 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 8011f4a:	2a02      	cmp	r2, #2
 8011f4c:	d012      	beq.n	8011f74 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8011f4e:	2a03      	cmp	r2, #3
 8011f50:	d10b      	bne.n	8011f6a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8011f52:	6804      	ldr	r4, [r0, #0]
 8011f54:	b14c      	cbz	r4, 8011f6a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8011f56:	4620      	mov	r0, r4
 8011f58:	f7fa f962 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8011f5c:	2110      	movs	r1, #16
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f003 fb9e 	bl	80156a0 <_ZdlPvj>
 8011f64:	e001      	b.n	8011f6a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011f66:	4b09      	ldr	r3, [pc, #36]	; (8011f8c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011f68:	6023      	str	r3, [r4, #0]
      }
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	b003      	add	sp, #12
 8011f6e:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8011f70:	680b      	ldr	r3, [r1, #0]
 8011f72:	e7f9      	b.n	8011f68 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8011f74:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011f76:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8011f78:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011f7a:	f001 fd87 	bl	8013a8c <_Znwj>
 8011f7e:	4605      	mov	r5, r0
 8011f80:	9901      	ldr	r1, [sp, #4]
 8011f82:	f7ff ffcd 	bl	8011f20 <_ZNSt8functionIFvhP10PingPacketEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8011f86:	6025      	str	r5, [r4, #0]
	}
 8011f88:	e7ef      	b.n	8011f6a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 8011f8a:	bf00      	nop
 8011f8c:	0801cf48 	.word	0x0801cf48

08011f90 <_ZNSt8functionIFvhP13RequestPacketEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8011f90:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8011f92:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8011f94:	4604      	mov	r4, r0
 8011f96:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8011f98:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8011f9a:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8011f9c:	b12b      	cbz	r3, 8011faa <_ZNSt8functionIFvhP13RequestPacketEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8011fa2:	68eb      	ldr	r3, [r5, #12]
 8011fa4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8011fa6:	68ab      	ldr	r3, [r5, #8]
 8011fa8:	60a3      	str	r3, [r4, #8]
    }
 8011faa:	4620      	mov	r0, r4
 8011fac:	bd38      	pop	{r3, r4, r5, pc}
	...

08011fb0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fb2:	4604      	mov	r4, r0
	switch (__op)
 8011fb4:	b17a      	cbz	r2, 8011fd6 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8011fb6:	2a01      	cmp	r2, #1
 8011fb8:	d012      	beq.n	8011fe0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 8011fba:	2a02      	cmp	r2, #2
 8011fbc:	d012      	beq.n	8011fe4 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8011fbe:	2a03      	cmp	r2, #3
 8011fc0:	d10b      	bne.n	8011fda <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8011fc2:	6804      	ldr	r4, [r0, #0]
 8011fc4:	b14c      	cbz	r4, 8011fda <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f7fa f92a 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8011fcc:	2110      	movs	r1, #16
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f003 fb66 	bl	80156a0 <_ZdlPvj>
 8011fd4:	e001      	b.n	8011fda <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011fd6:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011fd8:	6023      	str	r3, [r4, #0]
      }
 8011fda:	2000      	movs	r0, #0
 8011fdc:	b003      	add	sp, #12
 8011fde:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8011fe0:	680b      	ldr	r3, [r1, #0]
 8011fe2:	e7f9      	b.n	8011fd8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8011fe4:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011fe6:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8011fe8:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011fea:	f001 fd4f 	bl	8013a8c <_Znwj>
 8011fee:	4605      	mov	r5, r0
 8011ff0:	9901      	ldr	r1, [sp, #4]
 8011ff2:	f7ff ffcd 	bl	8011f90 <_ZNSt8functionIFvhP13RequestPacketEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8011ff6:	6025      	str	r5, [r4, #0]
	}
 8011ff8:	e7ef      	b.n	8011fda <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 8011ffa:	bf00      	nop
 8011ffc:	0801cf98 	.word	0x0801cf98

08012000 <_ZNSt8functionIFvhP14ResponsePacketEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8012000:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8012002:	2300      	movs	r3, #0
    function<_Res(_ArgTypes...)>::
 8012004:	4604      	mov	r4, r0
 8012006:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 8012008:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 801200a:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 801200c:	b12b      	cbz	r3, 801201a <_ZNSt8functionIFvhP14ResponsePacketEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 801200e:	2202      	movs	r2, #2
 8012010:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8012012:	68eb      	ldr	r3, [r5, #12]
 8012014:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8012016:	68ab      	ldr	r3, [r5, #8]
 8012018:	60a3      	str	r3, [r4, #8]
    }
 801201a:	4620      	mov	r0, r4
 801201c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012020 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8012020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012022:	4604      	mov	r4, r0
	switch (__op)
 8012024:	b17a      	cbz	r2, 8012046 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x26>
 8012026:	2a01      	cmp	r2, #1
 8012028:	d012      	beq.n	8012050 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
	  switch (__op)
 801202a:	2a02      	cmp	r2, #2
 801202c:	d012      	beq.n	8012054 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 801202e:	2a03      	cmp	r2, #3
 8012030:	d10b      	bne.n	801204a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	  delete __victim._M_access<_Functor*>();
 8012032:	6804      	ldr	r4, [r0, #0]
 8012034:	b14c      	cbz	r4, 801204a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
    class function<_Res(_ArgTypes...)>
 8012036:	4620      	mov	r0, r4
 8012038:	f7fa f8f2 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 801203c:	2110      	movs	r1, #16
 801203e:	4620      	mov	r0, r4
 8012040:	f003 fb2e 	bl	80156a0 <_ZdlPvj>
 8012044:	e001      	b.n	801204a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8012046:	4b09      	ldr	r3, [pc, #36]	; (801206c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x4c>)
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8012048:	6023      	str	r3, [r4, #0]
      }
 801204a:	2000      	movs	r0, #0
 801204c:	b003      	add	sp, #12
 801204e:	bd30      	pop	{r4, r5, pc}
	    return __source._M_access<_Functor*>();
 8012050:	680b      	ldr	r3, [r1, #0]
 8012052:	e7f9      	b.n	8012048 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
	  __dest._M_access<_Functor*>() =
 8012054:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8012056:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 8012058:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 801205a:	f001 fd17 	bl	8013a8c <_Znwj>
 801205e:	4605      	mov	r5, r0
 8012060:	9901      	ldr	r1, [sp, #4]
 8012062:	f7ff ffcd 	bl	8012000 <_ZNSt8functionIFvhP14ResponsePacketEEC1ERKS3_>
	  __dest._M_access<_Functor*>() =
 8012066:	6025      	str	r5, [r4, #0]
	}
 8012068:	e7ef      	b.n	801204a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2a>
 801206a:	bf00      	nop
 801206c:	0801cfe8 	.word	0x0801cfe8

08012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8012070:	b513      	push	{r0, r1, r4, lr}
 8012072:	460b      	mov	r3, r1
 8012074:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012076:	466c      	mov	r4, sp
 8012078:	e9d0 0100 	ldrd	r0, r1, [r0]
 801207c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8012080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012084:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8012088:	e894 0003 	ldmia.w	r4, {r0, r1}
 801208c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012090:	b002      	add	sp, #8
 8012092:	bd10      	pop	{r4, pc}

08012094 <_ZN10MessageBus7receiveEhPhm>:
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 8012094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012098:	461e      	mov	r6, r3
 801209a:	f001 043f 	and.w	r4, r1, #63	; 0x3f
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 801209e:	f240 4304 	movw	r3, #1028	; 0x404
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 80120a2:	b09b      	sub	sp, #108	; 0x6c
 80120a4:	4680      	mov	r8, r0
 80120a6:	4691      	mov	r9, r2
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 80120a8:	435c      	muls	r4, r3
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 80120aa:	9102      	str	r1, [sp, #8]
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 80120ac:	f204 7305 	addw	r3, r4, #1797	; 0x705
		if(indexable_buffer->index == 0) { // New packet incoming
 80120b0:	4404      	add	r4, r0
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 80120b2:	18c3      	adds	r3, r0, r3
				forwarders[packet_id & 0b00111111]->internal_send(def, indexable_buffer->buffer + 2);
 80120b4:	f103 0a02 	add.w	sl, r3, #2
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 80120b8:	9301      	str	r3, [sp, #4]
	while(length > 0) {
 80120ba:	2e00      	cmp	r6, #0
 80120bc:	f000 809e 	beq.w	80121fc <_ZN10MessageBus7receiveEhPhm+0x168>
		if(indexable_buffer->index == 0) { // New packet incoming
 80120c0:	f8d4 3b04 	ldr.w	r3, [r4, #2820]	; 0xb04
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	f040 809c 	bne.w	8012202 <_ZN10MessageBus7receiveEhPhm+0x16e>
			} while(header != PREAMBLE);
 80120ca:	f819 3b01 	ldrb.w	r3, [r9], #1
				length--;
 80120ce:	3e01      	subs	r6, #1
			} while(header != PREAMBLE);
 80120d0:	2b7f      	cmp	r3, #127	; 0x7f
 80120d2:	f040 8090 	bne.w	80121f6 <_ZN10MessageBus7receiveEhPhm+0x162>
			indexable_buffer->buffer[0] = PREAMBLE;
 80120d6:	f884 3705 	strb.w	r3, [r4, #1797]	; 0x705
			indexable_buffer->index = 1; // Got the preamble!
 80120da:	2301      	movs	r3, #1
 80120dc:	f8c4 3b04 	str.w	r3, [r4, #2820]	; 0xb04
					console.printf("Corrupt packet: %d\r\n", packet_id);
 80120e0:	4966      	ldr	r1, [pc, #408]	; (801227c <_ZN10MessageBus7receiveEhPhm+0x1e8>)
 80120e2:	4867      	ldr	r0, [pc, #412]	; (8012280 <_ZN10MessageBus7receiveEhPhm+0x1ec>)
				if(length == 0) {
 80120e4:	2e00      	cmp	r6, #0
 80120e6:	f000 8089 	beq.w	80121fc <_ZN10MessageBus7receiveEhPhm+0x168>
				packet_id = *pointer++; // Packet ID is the first element in a frame
 80120ea:	f819 5b01 	ldrb.w	r5, [r9], #1
				length--;
 80120ee:	3e01      	subs	r6, #1
				if(packet_id != def->id) {
 80120f0:	f005 0b3f 	and.w	fp, r5, #63	; 0x3f
 80120f4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80120f8:	ea4f 078b 	mov.w	r7, fp, lsl #2
 80120fc:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
 8012100:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8012104:	42ab      	cmp	r3, r5
 8012106:	f040 8088 	bne.w	801221a <_ZN10MessageBus7receiveEhPhm+0x186>
				def = &definitions_by_id[packet_id & 0b00111111];
 801210a:	3704      	adds	r7, #4
			indexable_buffer->index = 2;
 801210c:	2302      	movs	r3, #2
			indexable_buffer->buffer[1] = packet_id;
 801210e:	f884 5706 	strb.w	r5, [r4, #1798]	; 0x706
				def = &definitions_by_id[packet_id & 0b00111111];
 8012112:	4447      	add	r7, r8
			indexable_buffer->index = 2;
 8012114:	f8c4 3b04 	str.w	r3, [r4, #2820]	; 0xb04
			indexable_buffer->current_packet_id = packet_id;
 8012118:	f884 5704 	strb.w	r5, [r4, #1796]	; 0x704
		size_t remaining_size = def->size + 2 - indexable_buffer->index;
 801211c:	f8d4 0b04 	ldr.w	r0, [r4, #2820]	; 0xb04
 8012120:	4632      	mov	r2, r6
 8012122:	687b      	ldr	r3, [r7, #4]
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 8012124:	4649      	mov	r1, r9
		size_t remaining_size = def->size + 2 - indexable_buffer->index;
 8012126:	f1c0 0b02 	rsb	fp, r0, #2
 801212a:	449b      	add	fp, r3
		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
 801212c:	9b01      	ldr	r3, [sp, #4]
 801212e:	455e      	cmp	r6, fp
 8012130:	4418      	add	r0, r3
 8012132:	bf28      	it	cs
 8012134:	465a      	movcs	r2, fp
 8012136:	9203      	str	r2, [sp, #12]
 8012138:	f004 f802 	bl	8016140 <memcpy>
		indexable_buffer->index += copy_length;
 801213c:	9a03      	ldr	r2, [sp, #12]
		if(copy_length == remaining_size) { // Packet is complete
 801213e:	455e      	cmp	r6, fp
		indexable_buffer->index += copy_length;
 8012140:	f8d4 3b04 	ldr.w	r3, [r4, #2820]	; 0xb04
		pointer += copy_length;
 8012144:	4491      	add	r9, r2
		indexable_buffer->index += copy_length;
 8012146:	4413      	add	r3, r2
 8012148:	f8c4 3b04 	str.w	r3, [r4, #2820]	; 0xb04
		length -= copy_length;
 801214c:	eba6 0302 	sub.w	r3, r6, r2
 8012150:	9303      	str	r3, [sp, #12]
		if(copy_length == remaining_size) { // Packet is complete
 8012152:	f0c0 8084 	bcc.w	801225e <_ZN10MessageBus7receiveEhPhm+0x1ca>
			Iterator<std::function<void(uint8_t, void*)>> it = handlers[packet_id & 0b00111111].it();
 8012156:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801215a:	2314      	movs	r3, #20
 801215c:	f8df b124 	ldr.w	fp, [pc, #292]	; 8012284 <_ZN10MessageBus7receiveEhPhm+0x1f0>
 8012160:	fb03 8305 	mla	r3, r3, r5, r8
 8012164:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8012168:	6a1e      	ldr	r6, [r3, #32]
	if(iterator != nullptr) {
 801216a:	2e00      	cmp	r6, #0
 801216c:	d060      	beq.n	8012230 <_ZN10MessageBus7receiveEhPhm+0x19c>
 801216e:	6873      	ldr	r3, [r6, #4]
template <typename T> class Iterator : public ExceptionTracker {
 8012170:	f106 010c 	add.w	r1, r6, #12
 8012174:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
 8012178:	68b3      	ldr	r3, [r6, #8]
 801217a:	930c      	str	r3, [sp, #48]	; 0x30
 801217c:	ab0d      	add	r3, sp, #52	; 0x34
 801217e:	4618      	mov	r0, r3
 8012180:	f7ff fd9a 	bl	8011cb8 <_ZNSt8functionIFvhPvEEC1ERKS2_>
 8012184:	ab0d      	add	r3, sp, #52	; 0x34
 8012186:	7f32      	ldrb	r2, [r6, #28]
 8012188:	461e      	mov	r6, r3
 801218a:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			while(it) {
 801218e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012192:	2b00      	cmp	r3, #0
 8012194:	d052      	beq.n	801223c <_ZN10MessageBus7receiveEhPhm+0x1a8>
 8012196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012198:	4631      	mov	r1, r6
 801219a:	a815      	add	r0, sp, #84	; 0x54
 801219c:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
 80121a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121a2:	9314      	str	r3, [sp, #80]	; 0x50
 80121a4:	f7ff fd88 	bl	8011cb8 <_ZNSt8functionIFvhPvEEC1ERKS2_>
 80121a8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	return this->next != nullptr;
 80121ac:	990c      	ldr	r1, [sp, #48]	; 0x30
template <typename T> class Iterator : public ExceptionTracker {
 80121ae:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
	if(hasNext()) {
 80121b2:	2900      	cmp	r1, #0
 80121b4:	d055      	beq.n	8012262 <_ZN10MessageBus7receiveEhPhm+0x1ce>
	function(__x).swap(*this);
 80121b6:	310c      	adds	r1, #12
 80121b8:	a806      	add	r0, sp, #24
 80121ba:	f7ff fd7d 	bl	8011cb8 <_ZNSt8functionIFvhPvEEC1ERKS2_>
	std::swap(_M_functor, __x._M_functor);
 80121be:	4631      	mov	r1, r6
 80121c0:	a806      	add	r0, sp, #24
 80121c2:	f7ff ff55 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80121c6:	9b08      	ldr	r3, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 80121c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    class function<_Res(_ArgTypes...)>
 80121ca:	a806      	add	r0, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80121cc:	930f      	str	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 80121ce:	9208      	str	r2, [sp, #32]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80121d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80121d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
      __b = _GLIBCXX_MOVE(__tmp);
 80121d4:	9310      	str	r3, [sp, #64]	; 0x40
      __a = _GLIBCXX_MOVE(__b);
 80121d6:	9209      	str	r2, [sp, #36]	; 0x24
 80121d8:	f7fa f822 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
		this->next = this->next->next;
 80121dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	930c      	str	r3, [sp, #48]	; 0x30
 80121e2:	9b02      	ldr	r3, [sp, #8]
 80121e4:	f8cd a018 	str.w	sl, [sp, #24]
 80121e8:	f88d 3017 	strb.w	r3, [sp, #23]
      if (_M_empty())
 80121ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d13a      	bne.n	8012268 <_ZN10MessageBus7receiveEhPhm+0x1d4>
	__throw_bad_function_call();
 80121f2:	f003 fdbd 	bl	8015d70 <_ZSt25__throw_bad_function_callv>
				if(length == 0) {
 80121f6:	2e00      	cmp	r6, #0
 80121f8:	f47f af67 	bne.w	80120ca <_ZN10MessageBus7receiveEhPhm+0x36>
}
 80121fc:	b01b      	add	sp, #108	; 0x6c
 80121fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(indexable_buffer->index == 1) {
 8012202:	2b01      	cmp	r3, #1
 8012204:	f43f af6c 	beq.w	80120e0 <_ZN10MessageBus7receiveEhPhm+0x4c>
			packet_id = indexable_buffer->current_packet_id;
 8012208:	f894 5704 	ldrb.w	r5, [r4, #1796]	; 0x704
			def = &definitions_by_id[packet_id & 0b00111111];
 801220c:	230c      	movs	r3, #12
 801220e:	f005 073f 	and.w	r7, r5, #63	; 0x3f
 8012212:	fb03 8707 	mla	r7, r3, r7, r8
 8012216:	3704      	adds	r7, #4
 8012218:	e780      	b.n	801211c <_ZN10MessageBus7receiveEhPhm+0x88>
					console.printf("Corrupt packet: %d\r\n", packet_id);
 801221a:	462a      	mov	r2, r5
 801221c:	f7f9 fa20 	bl	800b660 <_ZN7Console6printfEPKcz>
			} while(def->id != packet_id);
 8012220:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8012224:	4816      	ldr	r0, [pc, #88]	; (8012280 <_ZN10MessageBus7receiveEhPhm+0x1ec>)
 8012226:	42ab      	cmp	r3, r5
 8012228:	4914      	ldr	r1, [pc, #80]	; (801227c <_ZN10MessageBus7receiveEhPhm+0x1e8>)
 801222a:	f47f af5b 	bne.w	80120e4 <_ZN10MessageBus7receiveEhPhm+0x50>
 801222e:	e76c      	b.n	801210a <_ZN10MessageBus7receiveEhPhm+0x76>
template <class T> Iterator<T>::Iterator() : next(nullptr), current(), valid(false) {
 8012230:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012234:	960c      	str	r6, [sp, #48]	; 0x30
    _Function_base() : _M_manager(nullptr) { }
 8012236:	960f      	str	r6, [sp, #60]	; 0x3c
 8012238:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
			if(forwarders[packet_id & 0b00111111] != nullptr) {
 801223c:	f205 7504 	addw	r5, r5, #1796	; 0x704
 8012240:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012244:	6868      	ldr	r0, [r5, #4]
 8012246:	b120      	cbz	r0, 8012252 <_ZN10MessageBus7receiveEhPhm+0x1be>
				forwarders[packet_id & 0b00111111]->internal_send(def, indexable_buffer->buffer + 2);
 8012248:	6803      	ldr	r3, [r0, #0]
 801224a:	4652      	mov	r2, sl
 801224c:	4639      	mov	r1, r7
 801224e:	691b      	ldr	r3, [r3, #16]
 8012250:	4798      	blx	r3
			indexable_buffer->index = 0;
 8012252:	2300      	movs	r3, #0
			Iterator<std::function<void(uint8_t, void*)>> it = handlers[packet_id & 0b00111111].it();
 8012254:	a80a      	add	r0, sp, #40	; 0x28
			indexable_buffer->index = 0;
 8012256:	f8c4 3b04 	str.w	r3, [r4, #2820]	; 0xb04
			Iterator<std::function<void(uint8_t, void*)>> it = handlers[packet_id & 0b00111111].it();
 801225a:	f7ff f937 	bl	80114cc <_ZN8IteratorISt8functionIFvhPvEEED1Ev>
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 801225e:	9e03      	ldr	r6, [sp, #12]
 8012260:	e72b      	b.n	80120ba <_ZN10MessageBus7receiveEhPhm+0x26>
		this->valid = false;
 8012262:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 8012266:	e7bc      	b.n	80121e2 <_ZN10MessageBus7receiveEhPhm+0x14e>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8012268:	a815      	add	r0, sp, #84	; 0x54
 801226a:	aa06      	add	r2, sp, #24
 801226c:	f10d 0117 	add.w	r1, sp, #23
 8012270:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012272:	4798      	blx	r3
				(*it++)(sender_id, indexable_buffer->buffer + 2);
 8012274:	a812      	add	r0, sp, #72	; 0x48
 8012276:	f7ff f929 	bl	80114cc <_ZN8IteratorISt8functionIFvhPvEEED1Ev>
			while(it) {
 801227a:	e788      	b.n	801218e <_ZN10MessageBus7receiveEhPhm+0xfa>
 801227c:	0801cc94 	.word	0x0801cc94
 8012280:	24041060 	.word	0x24041060
 8012284:	0801cff8 	.word	0x0801cff8

08012288 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012288:	b570      	push	{r4, r5, r6, lr}
 801228a:	4604      	mov	r4, r0
 801228c:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 801228e:	481f      	ldr	r0, [pc, #124]	; (801230c <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012290:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8012292:	f7ff f909 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8012296:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8012298:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 801229a:	4620      	mov	r0, r4
 801229c:	695b      	ldr	r3, [r3, #20]
 801229e:	4798      	blx	r3
	if(def != nullptr) {
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d030      	beq.n	8012306 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 80122a4:	2314      	movs	r3, #20
 80122a6:	7800      	ldrb	r0, [r0, #0]
 80122a8:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 80122aa:	2600      	movs	r6, #0
 80122ac:	fb03 4400 	mla	r4, r3, r0, r4
 80122b0:	4668      	mov	r0, sp
 80122b2:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 80122b6:	441c      	add	r4, r3
 80122b8:	f7ff fd52 	bl	8011d60 <_ZNSt8functionIFvhP13Power_BusInfoEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80122bc:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 80122be:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80122c0:	f001 fbe4 	bl	8013a8c <_Znwj>
 80122c4:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 80122c6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80122c8:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80122ca:	4668      	mov	r0, sp
 80122cc:	f7ff fed0 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80122d0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80122d2:	68aa      	ldr	r2, [r5, #8]
 80122d4:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80122d6:	60ab      	str	r3, [r5, #8]
 80122d8:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80122da:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80122dc:	9202      	str	r2, [sp, #8]
 80122de:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80122e0:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 80122e2:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 80122e4:	9203      	str	r2, [sp, #12]
 80122e6:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80122e8:	4b0a      	ldr	r3, [pc, #40]	; (8012314 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80122ea:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 80122ec:	9306      	str	r3, [sp, #24]
 80122ee:	f7ff fcf3 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 80122f2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 80122f4:	a804      	add	r0, sp, #16
 80122f6:	f7f9 ff93 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 80122fa:	4668      	mov	r0, sp
 80122fc:	f7f9 ff90 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 8012300:	4620      	mov	r0, r4
 8012302:	b008      	add	sp, #32
 8012304:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8012306:	4604      	mov	r4, r0
 8012308:	e7fa      	b.n	8012300 <_ZN10MessageBus6handleI13Power_BusInfoEEbSt8functionIFvhPT_EE+0x78>
 801230a:	bf00      	nop
 801230c:	0801ccd4 	.word	0x0801ccd4
 8012310:	08011481 	.word	0x08011481
 8012314:	08011d81 	.word	0x08011d81

08012318 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	4604      	mov	r4, r0
 801231c:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 801231e:	481f      	ldr	r0, [pc, #124]	; (801239c <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012320:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8012322:	f7ff f8c1 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8012326:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8012328:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 801232a:	4620      	mov	r0, r4
 801232c:	695b      	ldr	r3, [r3, #20]
 801232e:	4798      	blx	r3
	if(def != nullptr) {
 8012330:	2800      	cmp	r0, #0
 8012332:	d030      	beq.n	8012396 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 8012334:	2314      	movs	r3, #20
 8012336:	7800      	ldrb	r0, [r0, #0]
 8012338:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 801233a:	2600      	movs	r6, #0
 801233c:	fb03 4400 	mla	r4, r3, r0, r4
 8012340:	4668      	mov	r0, sp
 8012342:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 8012346:	441c      	add	r4, r3
 8012348:	f7ff fd42 	bl	8011dd0 <_ZNSt8functionIFvhP16Power_SupplyInfoEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801234c:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 801234e:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8012350:	f001 fb9c 	bl	8013a8c <_Znwj>
 8012354:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 8012356:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8012358:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 801235a:	4668      	mov	r0, sp
 801235c:	f7ff fe88 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012360:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8012362:	68aa      	ldr	r2, [r5, #8]
 8012364:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8012366:	60ab      	str	r3, [r5, #8]
 8012368:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801236a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 801236c:	9202      	str	r2, [sp, #8]
 801236e:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8012370:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 8012372:	4b0b      	ldr	r3, [pc, #44]	; (80123a0 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 8012374:	9203      	str	r2, [sp, #12]
 8012376:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8012378:	4b0a      	ldr	r3, [pc, #40]	; (80123a4 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801237a:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 801237c:	9306      	str	r3, [sp, #24]
 801237e:	f7ff fcab 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 8012382:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8012384:	a804      	add	r0, sp, #16
 8012386:	f7f9 ff4b 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 801238a:	4668      	mov	r0, sp
 801238c:	f7f9 ff48 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 8012390:	4620      	mov	r0, r4
 8012392:	b008      	add	sp, #32
 8012394:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8012396:	4604      	mov	r4, r0
 8012398:	e7fa      	b.n	8012390 <_ZN10MessageBus6handleI16Power_SupplyInfoEEbSt8functionIFvhPT_EE+0x78>
 801239a:	bf00      	nop
 801239c:	0801cce4 	.word	0x0801cce4
 80123a0:	0801145b 	.word	0x0801145b
 80123a4:	08011df1 	.word	0x08011df1

080123a8 <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80123a8:	b570      	push	{r4, r5, r6, lr}
 80123aa:	4604      	mov	r4, r0
 80123ac:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 80123ae:	481f      	ldr	r0, [pc, #124]	; (801242c <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80123b0:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 80123b2:	f7ff f879 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 80123b6:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 80123b8:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80123ba:	4620      	mov	r0, r4
 80123bc:	695b      	ldr	r3, [r3, #20]
 80123be:	4798      	blx	r3
	if(def != nullptr) {
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d030      	beq.n	8012426 <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 80123c4:	2314      	movs	r3, #20
 80123c6:	7800      	ldrb	r0, [r0, #0]
 80123c8:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 80123ca:	2600      	movs	r6, #0
 80123cc:	fb03 4400 	mla	r4, r3, r0, r4
 80123d0:	4668      	mov	r0, sp
 80123d2:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 80123d6:	441c      	add	r4, r3
 80123d8:	f7ff fd32 	bl	8011e40 <_ZNSt8functionIFvhP19Power_SupplyControlEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80123dc:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 80123de:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80123e0:	f001 fb54 	bl	8013a8c <_Znwj>
 80123e4:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 80123e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80123e8:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80123ea:	4668      	mov	r0, sp
 80123ec:	f7ff fe40 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80123f0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80123f2:	68aa      	ldr	r2, [r5, #8]
 80123f4:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80123f6:	60ab      	str	r3, [r5, #8]
 80123f8:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80123fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80123fc:	9202      	str	r2, [sp, #8]
 80123fe:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8012400:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 8012402:	4b0b      	ldr	r3, [pc, #44]	; (8012430 <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 8012404:	9203      	str	r2, [sp, #12]
 8012406:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8012408:	4b0a      	ldr	r3, [pc, #40]	; (8012434 <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801240a:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 801240c:	9306      	str	r3, [sp, #24]
 801240e:	f7ff fc63 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 8012412:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8012414:	a804      	add	r0, sp, #16
 8012416:	f7f9 ff03 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 801241a:	4668      	mov	r0, sp
 801241c:	f7f9 ff00 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 8012420:	4620      	mov	r0, r4
 8012422:	b008      	add	sp, #32
 8012424:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8012426:	4604      	mov	r4, r0
 8012428:	e7fa      	b.n	8012420 <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE+0x78>
 801242a:	bf00      	nop
 801242c:	0801ccf7 	.word	0x0801ccf7
 8012430:	08011435 	.word	0x08011435
 8012434:	08011e61 	.word	0x08011e61

08012438 <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012438:	b570      	push	{r4, r5, r6, lr}
 801243a:	4604      	mov	r4, r0
 801243c:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 801243e:	481f      	ldr	r0, [pc, #124]	; (80124bc <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012440:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8012442:	f7ff f831 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8012446:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8012448:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 801244a:	4620      	mov	r0, r4
 801244c:	695b      	ldr	r3, [r3, #20]
 801244e:	4798      	blx	r3
	if(def != nullptr) {
 8012450:	2800      	cmp	r0, #0
 8012452:	d030      	beq.n	80124b6 <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 8012454:	2314      	movs	r3, #20
 8012456:	7800      	ldrb	r0, [r0, #0]
 8012458:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 801245a:	2600      	movs	r6, #0
 801245c:	fb03 4400 	mla	r4, r3, r0, r4
 8012460:	4668      	mov	r0, sp
 8012462:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 8012466:	441c      	add	r4, r3
 8012468:	f7ff fd22 	bl	8011eb0 <_ZNSt8functionIFvhP17Power_BatteryInfoEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801246c:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 801246e:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8012470:	f001 fb0c 	bl	8013a8c <_Znwj>
 8012474:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 8012476:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8012478:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 801247a:	4668      	mov	r0, sp
 801247c:	f7ff fdf8 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012480:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8012482:	68aa      	ldr	r2, [r5, #8]
 8012484:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8012486:	60ab      	str	r3, [r5, #8]
 8012488:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801248a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 801248c:	9202      	str	r2, [sp, #8]
 801248e:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8012490:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 8012492:	4b0b      	ldr	r3, [pc, #44]	; (80124c0 <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 8012494:	9203      	str	r2, [sp, #12]
 8012496:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8012498:	4b0a      	ldr	r3, [pc, #40]	; (80124c4 <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801249a:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 801249c:	9306      	str	r3, [sp, #24]
 801249e:	f7ff fc1b 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 80124a2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 80124a4:	a804      	add	r0, sp, #16
 80124a6:	f7f9 febb 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 80124aa:	4668      	mov	r0, sp
 80124ac:	f7f9 feb8 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 80124b0:	4620      	mov	r0, r4
 80124b2:	b008      	add	sp, #32
 80124b4:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 80124b6:	4604      	mov	r4, r0
 80124b8:	e7fa      	b.n	80124b0 <_ZN10MessageBus6handleI17Power_BatteryInfoEEbSt8functionIFvhPT_EE+0x78>
 80124ba:	bf00      	nop
 80124bc:	0801cd0d 	.word	0x0801cd0d
 80124c0:	0801140f 	.word	0x0801140f
 80124c4:	08011ed1 	.word	0x08011ed1

080124c8 <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80124c8:	b570      	push	{r4, r5, r6, lr}
 80124ca:	4604      	mov	r4, r0
 80124cc:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 80124ce:	481f      	ldr	r0, [pc, #124]	; (801254c <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80124d0:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 80124d2:	f7fe ffe9 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 80124d6:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 80124d8:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80124da:	4620      	mov	r0, r4
 80124dc:	695b      	ldr	r3, [r3, #20]
 80124de:	4798      	blx	r3
	if(def != nullptr) {
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d030      	beq.n	8012546 <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 80124e4:	2314      	movs	r3, #20
 80124e6:	7800      	ldrb	r0, [r0, #0]
 80124e8:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 80124ea:	2600      	movs	r6, #0
 80124ec:	fb03 4400 	mla	r4, r3, r0, r4
 80124f0:	4668      	mov	r0, sp
 80124f2:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 80124f6:	441c      	add	r4, r3
 80124f8:	f7ff fd12 	bl	8011f20 <_ZNSt8functionIFvhP10PingPacketEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80124fc:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 80124fe:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8012500:	f001 fac4 	bl	8013a8c <_Znwj>
 8012504:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 8012506:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8012508:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 801250a:	4668      	mov	r0, sp
 801250c:	f7ff fdb0 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012510:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8012512:	68aa      	ldr	r2, [r5, #8]
 8012514:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8012516:	60ab      	str	r3, [r5, #8]
 8012518:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801251a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 801251c:	9202      	str	r2, [sp, #8]
 801251e:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8012520:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 8012522:	4b0b      	ldr	r3, [pc, #44]	; (8012550 <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 8012524:	9203      	str	r2, [sp, #12]
 8012526:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8012528:	4b0a      	ldr	r3, [pc, #40]	; (8012554 <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801252a:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 801252c:	9306      	str	r3, [sp, #24]
 801252e:	f7ff fbd3 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 8012532:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8012534:	a804      	add	r0, sp, #16
 8012536:	f7f9 fe73 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 801253a:	4668      	mov	r0, sp
 801253c:	f7f9 fe70 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 8012540:	4620      	mov	r0, r4
 8012542:	b008      	add	sp, #32
 8012544:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8012546:	4604      	mov	r4, r0
 8012548:	e7fa      	b.n	8012540 <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE+0x78>
 801254a:	bf00      	nop
 801254c:	0801cd52 	.word	0x0801cd52
 8012550:	080113e9 	.word	0x080113e9
 8012554:	08011f41 	.word	0x08011f41

08012558 <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012558:	b570      	push	{r4, r5, r6, lr}
 801255a:	4604      	mov	r4, r0
 801255c:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 801255e:	481f      	ldr	r0, [pc, #124]	; (80125dc <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012560:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 8012562:	f7fe ffa1 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 8012566:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 8012568:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 801256a:	4620      	mov	r0, r4
 801256c:	695b      	ldr	r3, [r3, #20]
 801256e:	4798      	blx	r3
	if(def != nullptr) {
 8012570:	2800      	cmp	r0, #0
 8012572:	d030      	beq.n	80125d6 <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 8012574:	2314      	movs	r3, #20
 8012576:	7800      	ldrb	r0, [r0, #0]
 8012578:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 801257a:	2600      	movs	r6, #0
 801257c:	fb03 4400 	mla	r4, r3, r0, r4
 8012580:	4668      	mov	r0, sp
 8012582:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 8012586:	441c      	add	r4, r3
 8012588:	f7ff fd02 	bl	8011f90 <_ZNSt8functionIFvhP13RequestPacketEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801258c:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 801258e:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8012590:	f001 fa7c 	bl	8013a8c <_Znwj>
 8012594:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 8012596:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8012598:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 801259a:	4668      	mov	r0, sp
 801259c:	f7ff fd68 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80125a0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80125a2:	68aa      	ldr	r2, [r5, #8]
 80125a4:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80125a6:	60ab      	str	r3, [r5, #8]
 80125a8:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80125aa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80125ac:	9202      	str	r2, [sp, #8]
 80125ae:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80125b0:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 80125b2:	4b0b      	ldr	r3, [pc, #44]	; (80125e0 <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 80125b4:	9203      	str	r2, [sp, #12]
 80125b6:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80125b8:	4b0a      	ldr	r3, [pc, #40]	; (80125e4 <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80125ba:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 80125bc:	9306      	str	r3, [sp, #24]
 80125be:	f7ff fb8b 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 80125c2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 80125c4:	a804      	add	r0, sp, #16
 80125c6:	f7f9 fe2b 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 80125ca:	4668      	mov	r0, sp
 80125cc:	f7f9 fe28 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 80125d0:	4620      	mov	r0, r4
 80125d2:	b008      	add	sp, #32
 80125d4:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 80125d6:	4604      	mov	r4, r0
 80125d8:	e7fa      	b.n	80125d0 <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE+0x78>
 80125da:	bf00      	nop
 80125dc:	0801cd6d 	.word	0x0801cd6d
 80125e0:	080113c3 	.word	0x080113c3
 80125e4:	08011fb1 	.word	0x08011fb1

080125e8 <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE>:
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	4604      	mov	r4, r0
 80125ec:	b088      	sub	sp, #32
	size_t hash = typeid(T).hash_code();
 80125ee:	481f      	ldr	r0, [pc, #124]	; (801266c <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE+0x84>)
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 80125f0:	460d      	mov	r5, r1
	size_t hash = typeid(T).hash_code();
 80125f2:	f7fe ff59 	bl	80114a8 <_ZNKSt9type_info9hash_codeEv.isra.0>
	PacketDefinition* def = retrieve(hash);
 80125f6:	6823      	ldr	r3, [r4, #0]
	size_t hash = typeid(T).hash_code();
 80125f8:	4601      	mov	r1, r0
	PacketDefinition* def = retrieve(hash);
 80125fa:	4620      	mov	r0, r4
 80125fc:	695b      	ldr	r3, [r3, #20]
 80125fe:	4798      	blx	r3
	if(def != nullptr) {
 8012600:	2800      	cmp	r0, #0
 8012602:	d030      	beq.n	8012666 <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE+0x7e>
		return handlers[def->id].add([handler](uint8_t sender, void* packet) {
 8012604:	2314      	movs	r3, #20
 8012606:	7800      	ldrb	r0, [r0, #0]
 8012608:	4629      	mov	r1, r5
    _Function_base() : _M_manager(nullptr) { }
 801260a:	2600      	movs	r6, #0
 801260c:	fb03 4400 	mla	r4, r3, r0, r4
 8012610:	4668      	mov	r0, sp
 8012612:	f504 54b8 	add.w	r4, r4, #5888	; 0x1700
 8012616:	441c      	add	r4, r3
 8012618:	f7ff fcf2 	bl	8012000 <_ZNSt8functionIFvhP14ResponsePacketEEC1ERKS3_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801261c:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 801261e:	9606      	str	r6, [sp, #24]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8012620:	f001 fa34 	bl	8013a8c <_Znwj>
 8012624:	4605      	mov	r5, r0
	std::swap(_M_functor, __x._M_functor);
 8012626:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8012628:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 801262a:	4668      	mov	r0, sp
 801262c:	f7ff fd20 	bl	8012070 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012630:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8012632:	68aa      	ldr	r2, [r5, #8]
 8012634:	a904      	add	r1, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 8012636:	60ab      	str	r3, [r5, #8]
 8012638:	4620      	mov	r0, r4
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801263a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 801263c:	9202      	str	r2, [sp, #8]
 801263e:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8012640:	60eb      	str	r3, [r5, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 8012642:	4b0b      	ldr	r3, [pc, #44]	; (8012670 <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE+0x88>)
      __a = _GLIBCXX_MOVE(__b);
 8012644:	9203      	str	r2, [sp, #12]
 8012646:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8012648:	4b0a      	ldr	r3, [pc, #40]	; (8012674 <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE+0x8c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801264a:	9504      	str	r5, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
 801264c:	9306      	str	r3, [sp, #24]
 801264e:	f7ff fb43 	bl	8011cd8 <_ZN10LinkedListISt8functionIFvhPvEEE3addES3_>
 8012652:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 8012654:	a804      	add	r0, sp, #16
 8012656:	f7f9 fde3 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 801265a:	4668      	mov	r0, sp
 801265c:	f7f9 fde0 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 8012660:	4620      	mov	r0, r4
 8012662:	b008      	add	sp, #32
 8012664:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 8012666:	4604      	mov	r4, r0
 8012668:	e7fa      	b.n	8012660 <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE+0x78>
 801266a:	bf00      	nop
 801266c:	0801cd7d 	.word	0x0801cd7d
 8012670:	0801139d 	.word	0x0801139d
 8012674:	08012021 	.word	0x08012021

08012678 <_ZN8PowerBus13internal_sendEP16PacketDefinitionPh>:
    define<ErrorPacket>(63);

    semaphore = xSemaphoreCreateMutex();
}

bool PowerBus::internal_send(PacketDefinition* def, uint8_t* data) {
 8012678:	b573      	push	{r0, r1, r4, r5, r6, lr}
	xSemaphoreTake(semaphore, portMAX_DELAY);
 801267a:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
bool PowerBus::internal_send(PacketDefinition* def, uint8_t* data) {
 801267e:	4604      	mov	r4, r0
 8012680:	460d      	mov	r5, r1
	xSemaphoreTake(semaphore, portMAX_DELAY);
 8012682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012686:	f8d6 0124 	ldr.w	r0, [r6, #292]	; 0x124
bool PowerBus::internal_send(PacketDefinition* def, uint8_t* data) {
 801268a:	9201      	str	r2, [sp, #4]
	xSemaphoreTake(semaphore, portMAX_DELAY);
 801268c:	f7f7 fe00 	bl	800a290 <xQueueSemaphoreTake>
	bool ret = IOBus::internal_send(def, data);
 8012690:	9a01      	ldr	r2, [sp, #4]
 8012692:	4629      	mov	r1, r5
 8012694:	4620      	mov	r0, r4
 8012696:	f7fe fe53 	bl	8011340 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh>
	xSemaphoreGive(semaphore);
 801269a:	2300      	movs	r3, #0
	bool ret = IOBus::internal_send(def, data);
 801269c:	4604      	mov	r4, r0
	xSemaphoreGive(semaphore);
 801269e:	f8d6 0124 	ldr.w	r0, [r6, #292]	; 0x124
 80126a2:	461a      	mov	r2, r3
 80126a4:	4619      	mov	r1, r3
 80126a6:	f7f7 fcbd 	bl	800a024 <xQueueGenericSend>
	return ret;
}
 80126aa:	4620      	mov	r0, r4
 80126ac:	b002      	add	sp, #8
 80126ae:	bd70      	pop	{r4, r5, r6, pc}

080126b0 <_ZN8PowerBusD1Ev>:
 80126b0:	4b03      	ldr	r3, [pc, #12]	; (80126c0 <_ZN8PowerBusD1Ev+0x10>)


#define POWER_BUS_FRAME_SIZE 1024


class PowerBus : public IOBus {
 80126b2:	b510      	push	{r4, lr}
 80126b4:	4604      	mov	r4, r0
 80126b6:	6003      	str	r3, [r0, #0]
 80126b8:	f7fe fd32 	bl	8011120 <_ZN10MessageBusD1Ev>
 80126bc:	4620      	mov	r0, r4
 80126be:	bd10      	pop	{r4, pc}
 80126c0:	0801cc30 	.word	0x0801cc30

080126c4 <_ZN8PowerBusD0Ev>:
 80126c4:	b510      	push	{r4, lr}
 80126c6:	4604      	mov	r4, r0
 80126c8:	f7ff fff2 	bl	80126b0 <_ZN8PowerBusD1Ev>
 80126cc:	f242 1128 	movw	r1, #8488	; 0x2128
 80126d0:	4620      	mov	r0, r4
 80126d2:	f002 ffe5 	bl	80156a0 <_ZdlPvj>
 80126d6:	4620      	mov	r0, r4
 80126d8:	bd10      	pop	{r4, pc}
	...

080126dc <_ZN8PowerBusC1EP8IODriver>:
PowerBus::PowerBus(IODriver* driver) : IOBus(driver, buffer, POWER_BUS_FRAME_SIZE) {
 80126dc:	f500 52e9 	add.w	r2, r0, #7456	; 0x1d20
 80126e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126e4:	b510      	push	{r4, lr}
 80126e6:	3204      	adds	r2, #4
 80126e8:	4604      	mov	r4, r0
 80126ea:	f7fe fd53 	bl	8011194 <_ZN5IOBusC1EP8IODriverPhm>
 80126ee:	4b1f      	ldr	r3, [pc, #124]	; (801276c <_ZN8PowerBusC1EP8IODriver+0x90>)
    define<PingPacket>(1);
 80126f0:	2101      	movs	r1, #1
 80126f2:	4620      	mov	r0, r4
PowerBus::PowerBus(IODriver* driver) : IOBus(driver, buffer, POWER_BUS_FRAME_SIZE) {
 80126f4:	6023      	str	r3, [r4, #0]
    define<PingPacket>(1);
 80126f6:	f7ff f92b 	bl	8011950 <_ZN10MessageBus6defineI10PingPacketEEbh>
    define<RequestPacket>(2);
 80126fa:	2102      	movs	r1, #2
 80126fc:	4620      	mov	r0, r4
 80126fe:	f7ff f9ab 	bl	8011a58 <_ZN10MessageBus6defineI13RequestPacketEEbh>
    define<ResponsePacket>(3);
 8012702:	2103      	movs	r1, #3
 8012704:	4620      	mov	r0, r4
 8012706:	f7ff f9db 	bl	8011ac0 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
    define<ProgressPacket>(4);
 801270a:	2104      	movs	r1, #4
 801270c:	4620      	mov	r0, r4
 801270e:	f7ff fa21 	bl	8011b54 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
    define<PayloadPacket>(5);
 8012712:	2105      	movs	r1, #5
 8012714:	4620      	mov	r0, r4
 8012716:	f7ff fa51 	bl	8011bbc <_ZN10MessageBus6defineI13PayloadPacketEEbh>
    define<Power_BusInfo>(6);
 801271a:	2106      	movs	r1, #6
 801271c:	4620      	mov	r0, r4
 801271e:	f7fe feeb 	bl	80114f8 <_ZN10MessageBus6defineI13Power_BusInfoEEbh>
    define<Power_SupplyInfo>(7);
 8012722:	2107      	movs	r1, #7
 8012724:	4620      	mov	r0, r4
 8012726:	f7fe ff4d 	bl	80115c4 <_ZN10MessageBus6defineI16Power_SupplyInfoEEbh>
    define<Power_SupplyControl>(8);
 801272a:	2108      	movs	r1, #8
 801272c:	4620      	mov	r0, r4
 801272e:	f7fe ffaf 	bl	8011690 <_ZN10MessageBus6defineI19Power_SupplyControlEEbh>
    define<Power_BatteryInfo>(9);
 8012732:	2109      	movs	r1, #9
 8012734:	4620      	mov	r0, r4
 8012736:	f7ff f811 	bl	801175c <_ZN10MessageBus6defineI17Power_BatteryInfoEEbh>
    define<Power_ControllerHealth>(10);
 801273a:	210a      	movs	r1, #10
 801273c:	4620      	mov	r0, r4
 801273e:	f7ff f873 	bl	8011828 <_ZN10MessageBus6defineI22Power_ControllerHealthEEbh>
    define<Power_ControllerState>(11);
 8012742:	210b      	movs	r1, #11
 8012744:	4620      	mov	r0, r4
 8012746:	f7ff f8b9 	bl	80118bc <_ZN10MessageBus6defineI21Power_ControllerStateEEbh>
    define<FlushPacket>(62);
 801274a:	213e      	movs	r1, #62	; 0x3e
 801274c:	4620      	mov	r0, r4
 801274e:	f7ff fa7f 	bl	8011c50 <_ZN10MessageBus6defineI11FlushPacketEEbh>
    define<ErrorPacket>(63);
 8012752:	213f      	movs	r1, #63	; 0x3f
 8012754:	4620      	mov	r0, r4
 8012756:	f7ff f94b 	bl	80119f0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
    semaphore = xSemaphoreCreateMutex();
 801275a:	2001      	movs	r0, #1
 801275c:	f7f7 fd2a 	bl	800a1b4 <xQueueCreateMutex>
 8012760:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8012764:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 8012768:	4620      	mov	r0, r4
 801276a:	bd10      	pop	{r4, pc}
 801276c:	0801d05c 	.word	0x0801d05c

08012770 <_ZN13STMUARTDriver4loopEv>:
		if(end_dma_index > last_dma_index) {
			receiveUART(sender, buffer + last_dma_index, end_dma_index - last_dma_index);
			this->last_dma_index = end_dma_index;
		}
	}
}
 8012770:	4770      	bx	lr

08012772 <_ZThn4_N13STMUARTDriver4loopEv>:
 8012772:	4770      	bx	lr

08012774 <_ZN13STMUARTDriverD1Ev>:
STMUARTDriver::~STMUARTDriver() {
 8012774:	4b08      	ldr	r3, [pc, #32]	; (8012798 <_ZN13STMUARTDriverD1Ev+0x24>)
 8012776:	f103 0208 	add.w	r2, r3, #8
 801277a:	3328      	adds	r3, #40	; 0x28
 801277c:	b510      	push	{r4, lr}
 801277e:	4604      	mov	r4, r0
 8012780:	6002      	str	r2, [r0, #0]
 8012782:	6043      	str	r3, [r0, #4]
    vPortFree(buffer);
 8012784:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012786:	f7f8 fefd 	bl	800b584 <vPortFree>
 801278a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801278e:	f7f9 fd47 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
}
 8012792:	4620      	mov	r0, r4
 8012794:	bd10      	pop	{r4, pc}
 8012796:	bf00      	nop
 8012798:	0801d1ec 	.word	0x0801d1ec

0801279c <_ZThn4_N13STMUARTDriverD1Ev>:
#define NB_UART_PORTS       8                   // CHANGE ONLY IF NEEDED

class STMUARTDriver: public IODriver, public Thread {
    public:
        STMUARTDriver(UART_HandleTypeDef* huart); // Constructor
        virtual ~STMUARTDriver(); // Destructor
 801279c:	f1a0 0004 	sub.w	r0, r0, #4
 80127a0:	f7ff bfe8 	b.w	8012774 <_ZN13STMUARTDriverD1Ev>

080127a4 <_ZN13STMUARTDriverD0Ev>:
STMUARTDriver::~STMUARTDriver() {
 80127a4:	b510      	push	{r4, lr}
 80127a6:	4604      	mov	r4, r0
}
 80127a8:	f7ff ffe4 	bl	8012774 <_ZN13STMUARTDriverD1Ev>
 80127ac:	215c      	movs	r1, #92	; 0x5c
 80127ae:	4620      	mov	r0, r4
 80127b0:	f002 ff76 	bl	80156a0 <_ZdlPvj>
 80127b4:	4620      	mov	r0, r4
 80127b6:	bd10      	pop	{r4, pc}

080127b8 <_ZThn4_N13STMUARTDriverD0Ev>:
 80127b8:	f1a0 0004 	sub.w	r0, r0, #4
 80127bc:	f7ff bff2 	b.w	80127a4 <_ZN13STMUARTDriverD0Ev>

080127c0 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE>:

void STMUARTDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 80127c0:	b570      	push	{r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 80127c2:	2300      	movs	r3, #0
 80127c4:	b086      	sub	sp, #24
 80127c6:	4604      	mov	r4, r0
 80127c8:	460e      	mov	r6, r1
 80127ca:	9304      	str	r3, [sp, #16]
    bool _M_empty() const { return !_M_manager; }
 80127cc:	ad02      	add	r5, sp, #8
 80127ce:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 80127d0:	b133      	cbz	r3, 80127e0 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80127d2:	2202      	movs	r2, #2
 80127d4:	4628      	mov	r0, r5
 80127d6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80127d8:	68f3      	ldr	r3, [r6, #12]
 80127da:	9305      	str	r3, [sp, #20]
	  _M_manager = __x._M_manager;
 80127dc:	68b3      	ldr	r3, [r6, #8]
 80127de:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80127e0:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
 80127e2:	f104 0348 	add.w	r3, r4, #72	; 0x48
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80127e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80127ea:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80127ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80127f2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80127f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127fa:	e883 0003 	stmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80127fe:	9b04      	ldr	r3, [sp, #16]
    class function<_Res(_ArgTypes...)>
 8012800:	4628      	mov	r0, r5
      __a = _GLIBCXX_MOVE(__b);
 8012802:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 8012804:	6523      	str	r3, [r4, #80]	; 0x50
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012806:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8012808:	9204      	str	r2, [sp, #16]
 801280a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 801280c:	6563      	str	r3, [r4, #84]	; 0x54
      __a = _GLIBCXX_MOVE(__b);
 801280e:	9205      	str	r2, [sp, #20]
 8012810:	f7f9 fd06 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
    this->receiver_func = receiver;
}
 8012814:	b006      	add	sp, #24
 8012816:	bd70      	pop	{r4, r5, r6, pc}

08012818 <HAL_UART_ErrorCallback>:
void STMUARTDriver::receiveUART(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
	this->receiver_func(sender_id, buffer, length);
}


void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	4604      	mov	r4, r0
	while(xSemaphoreTakeFromISR(instance->getSemaphore(), nullptr)); // Clear semaphore
 801281c:	4d0b      	ldr	r5, [pc, #44]	; (801284c <HAL_UART_ErrorCallback+0x34>)
	return this->semaphore;
 801281e:	682b      	ldr	r3, [r5, #0]
	while(xSemaphoreTakeFromISR(instance->getSemaphore(), nullptr)); // Clear semaphore
 8012820:	2200      	movs	r2, #0
 8012822:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012824:	4611      	mov	r1, r2
 8012826:	f7f7 fdf6 	bl	800a416 <xQueueReceiveFromISR>
 801282a:	2800      	cmp	r0, #0
 801282c:	d1f7      	bne.n	801281e <HAL_UART_ErrorCallback+0x6>
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801282e:	6822      	ldr	r2, [r4, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->getBuffer(), UART_BUFFER_SIZE);
 8012830:	4620      	mov	r0, r4
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012832:	6993      	ldr	r3, [r2, #24]
 8012834:	f043 0308 	orr.w	r3, r3, #8
 8012838:	6193      	str	r3, [r2, #24]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->getBuffer(), UART_BUFFER_SIZE);
 801283a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	return this->buffer;
 801283e:	682b      	ldr	r3, [r5, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->getBuffer(), UART_BUFFER_SIZE);
 8012840:	6c59      	ldr	r1, [r3, #68]	; 0x44
}
 8012842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->getBuffer(), UART_BUFFER_SIZE);
 8012846:	f7f7 b928 	b.w	8009a9a <HAL_UARTEx_ReceiveToIdle_DMA>
 801284a:	bf00      	nop
 801284c:	24041660 	.word	0x24041660

08012850 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size) {
	xSemaphoreGiveFromISR(instance->getSemaphore(), nullptr);
 8012850:	4b02      	ldr	r3, [pc, #8]	; (801285c <HAL_UARTEx_RxEventCallback+0xc>)
 8012852:	2100      	movs	r1, #0
	return this->semaphore;
 8012854:	681b      	ldr	r3, [r3, #0]
	xSemaphoreGiveFromISR(instance->getSemaphore(), nullptr);
 8012856:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012858:	f7f7 bcc6 	b.w	800a1e8 <xQueueGiveFromISR>
 801285c:	24041660 	.word	0x24041660

08012860 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>:
 * @param huart the USART port to get
 * @return uint8_t the sender_id
 */
uint8_t STMUARTDriver::getSenderID(UART_HandleTypeDef* huart) {
    for(int i = 0; i < NB_UART_PORTS; ++i){
        if(this->mapper[i] == huart->Instance){
 8012860:	680a      	ldr	r2, [r1, #0]
 8012862:	3024      	adds	r0, #36	; 0x24
    for(int i = 0; i < NB_UART_PORTS; ++i){
 8012864:	2300      	movs	r3, #0
        if(this->mapper[i] == huart->Instance){
 8012866:	f850 1b04 	ldr.w	r1, [r0], #4
 801286a:	3301      	adds	r3, #1
 801286c:	4291      	cmp	r1, r2
 801286e:	d101      	bne.n	8012874 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x14>
            return i+1;
 8012870:	b2d8      	uxtb	r0, r3
 8012872:	4770      	bx	lr
    for(int i = 0; i < NB_UART_PORTS; ++i){
 8012874:	2b08      	cmp	r3, #8
 8012876:	d1f6      	bne.n	8012866 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x6>
        }
    }
    return 0;
 8012878:	2000      	movs	r0, #0
}
 801287a:	4770      	bx	lr

0801287c <_ZN13STMUARTDriver4initEv>:
	this->last_dma_index = 0;
 801287c:	2300      	movs	r3, #0
void STMUARTDriver::init() {
 801287e:	b510      	push	{r4, lr}
	this->last_dma_index = 0;
 8012880:	6203      	str	r3, [r0, #32]
void STMUARTDriver::init() {
 8012882:	4604      	mov	r4, r0
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012884:	69c0      	ldr	r0, [r0, #28]
	if(HAL_UARTEx_ReceiveToIdle_DMA(huart, buffer, UART_BUFFER_SIZE) != HAL_OK) {
 8012886:	6c61      	ldr	r1, [r4, #68]	; 0x44
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012888:	6802      	ldr	r2, [r0, #0]
 801288a:	6993      	ldr	r3, [r2, #24]
 801288c:	f043 0308 	orr.w	r3, r3, #8
 8012890:	6193      	str	r3, [r2, #24]
	if(HAL_UARTEx_ReceiveToIdle_DMA(huart, buffer, UART_BUFFER_SIZE) != HAL_OK) {
 8012892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012896:	f7f7 f900 	bl	8009a9a <HAL_UARTEx_ReceiveToIdle_DMA>
 801289a:	b150      	cbz	r0, 80128b2 <_ZN13STMUARTDriver4initEv+0x36>
        console.printf("[RoCo] [STMUARTDriverInit] Unable to initialize UART in receive mode for MCU#%" PRIu32 "\r\n", getSenderID(huart));
 801289c:	69e1      	ldr	r1, [r4, #28]
 801289e:	4620      	mov	r0, r4
 80128a0:	f7ff ffde 	bl	8012860 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 80128a4:	4903      	ldr	r1, [pc, #12]	; (80128b4 <_ZN13STMUARTDriver4initEv+0x38>)
 80128a6:	4602      	mov	r2, r0
 80128a8:	4803      	ldr	r0, [pc, #12]	; (80128b8 <_ZN13STMUARTDriver4initEv+0x3c>)
}
 80128aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        console.printf("[RoCo] [STMUARTDriverInit] Unable to initialize UART in receive mode for MCU#%" PRIu32 "\r\n", getSenderID(huart));
 80128ae:	f7f8 bed7 	b.w	800b660 <_ZN7Console6printfEPKcz>
}
 80128b2:	bd10      	pop	{r4, pc}
 80128b4:	0801d074 	.word	0x0801d074
 80128b8:	24041060 	.word	0x24041060

080128bc <_ZThn4_N13STMUARTDriver4initEv>:
        uint8_t* getBuffer();
        xSemaphoreHandle getSemaphore();
        uint8_t getSenderID(UART_HandleTypeDef* huart);
        
        void init();
 80128bc:	f1a0 0004 	sub.w	r0, r0, #4
 80128c0:	f7ff bfdc 	b.w	801287c <_ZN13STMUARTDriver4initEv>

080128c4 <_ZN13STMUARTDriver8transmitEPhm>:
void STMUARTDriver::transmit(uint8_t* buffer, uint32_t length) {
 80128c4:	b510      	push	{r4, lr}
    if(HAL_UART_Transmit(huart, buffer, length, portMAX_DELAY) != HAL_OK){
 80128c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
void STMUARTDriver::transmit(uint8_t* buffer, uint32_t length) {
 80128ca:	4604      	mov	r4, r0
    if(HAL_UART_Transmit(huart, buffer, length, portMAX_DELAY) != HAL_OK){
 80128cc:	b292      	uxth	r2, r2
 80128ce:	69c0      	ldr	r0, [r0, #28]
 80128d0:	f7f6 fea9 	bl	8009626 <HAL_UART_Transmit>
 80128d4:	b150      	cbz	r0, 80128ec <_ZN13STMUARTDriver8transmitEPhm+0x28>
        console.printf("[RoCo] [STMUARTDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(huart));
 80128d6:	69e1      	ldr	r1, [r4, #28]
 80128d8:	4620      	mov	r0, r4
 80128da:	f7ff ffc1 	bl	8012860 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 80128de:	4904      	ldr	r1, [pc, #16]	; (80128f0 <_ZN13STMUARTDriver8transmitEPhm+0x2c>)
 80128e0:	4602      	mov	r2, r0
 80128e2:	4804      	ldr	r0, [pc, #16]	; (80128f4 <_ZN13STMUARTDriver8transmitEPhm+0x30>)
}
 80128e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        console.printf("[RoCo] [STMUARTDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(huart));
 80128e8:	f7f8 beba 	b.w	800b660 <_ZN7Console6printfEPKcz>
}
 80128ec:	bd10      	pop	{r4, pc}
 80128ee:	bf00      	nop
 80128f0:	0801d0c7 	.word	0x0801d0c7
 80128f4:	24041060 	.word	0x24041060

080128f8 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>:
STMUARTDriver::STMUARTDriver(UART_HandleTypeDef* huart): Thread("STMUARTDriver", osPriorityRealtime), huart(huart), last_dma_index(0) {
 80128f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#include <cstdint>
#include <functional>


class IODriver {
 80128fc:	4b22      	ldr	r3, [pc, #136]	; (8012988 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x90>)
 80128fe:	4680      	mov	r8, r0
 8012900:	4604      	mov	r4, r0
 8012902:	460f      	mov	r7, r1
 8012904:	f848 3b04 	str.w	r3, [r8], #4
 8012908:	2203      	movs	r2, #3
 801290a:	4920      	ldr	r1, [pc, #128]	; (801298c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x94>)
 801290c:	4640      	mov	r0, r8
 801290e:	f002 fa99 	bl	8014e44 <_ZN6ThreadC1EPKc10osPriority>
 8012912:	4b1f      	ldr	r3, [pc, #124]	; (8012990 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x98>)
 8012914:	4e1f      	ldr	r6, [pc, #124]	; (8012994 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x9c>)
 8012916:	f04f 0c00 	mov.w	ip, #0
 801291a:	6023      	str	r3, [r4, #0]
 801291c:	3320      	adds	r3, #32
 801291e:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8012922:	61e7      	str	r7, [r4, #28]
 8012924:	6063      	str	r3, [r4, #4]
 8012926:	f8c4 c020 	str.w	ip, [r4, #32]
 801292a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801292c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801292e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8012932:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	instance = this;
 8012936:	4b18      	ldr	r3, [pc, #96]	; (8012998 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0xa0>)
	this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 8012938:	f44f 6000 	mov.w	r0, #2048	; 0x800
    _Function_base() : _M_manager(nullptr) { }
 801293c:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
	instance = this;
 8012940:	601c      	str	r4, [r3, #0]
	this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 8012942:	f7f8 fd87 	bl	800b454 <pvPortMalloc>
 8012946:	6460      	str	r0, [r4, #68]	; 0x44
    if(buffer == nullptr){
 8012948:	b940      	cbnz	r0, 801295c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x64>
        console.printf("[RoCo] [STMUARTDriverInit] Unable to allocate DMA buffer for MCU#%" PRIu32 "\r\n", getSenderID(huart));
 801294a:	4639      	mov	r1, r7
 801294c:	4620      	mov	r0, r4
 801294e:	f7ff ff87 	bl	8012860 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 8012952:	4912      	ldr	r1, [pc, #72]	; (801299c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0xa4>)
 8012954:	4602      	mov	r2, r0
 8012956:	4812      	ldr	r0, [pc, #72]	; (80129a0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0xa8>)
 8012958:	f7f8 fe82 	bl	800b660 <_ZN7Console6printfEPKcz>
    this->semaphore = xSemaphoreCreateCounting(16, 0);
 801295c:	2100      	movs	r1, #0
 801295e:	2010      	movs	r0, #16
 8012960:	f7f7 fb42 	bl	8009fe8 <xQueueCreateCountingSemaphore>
 8012964:	65a0      	str	r0, [r4, #88]	; 0x58
    if(semaphore == nullptr) {
 8012966:	b940      	cbnz	r0, 801297a <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x82>
        console.printf("[RoCo] [STMUARTDriverInit] Unable to allocate semaphore for MCU#%" PRIu32 "\r\n", getSenderID(huart));
 8012968:	4639      	mov	r1, r7
 801296a:	4620      	mov	r0, r4
 801296c:	f7ff ff78 	bl	8012860 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 8012970:	490c      	ldr	r1, [pc, #48]	; (80129a4 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0xac>)
 8012972:	4602      	mov	r2, r0
 8012974:	480a      	ldr	r0, [pc, #40]	; (80129a0 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0xa8>)
 8012976:	f7f8 fe73 	bl	800b660 <_ZN7Console6printfEPKcz>
    setTickDelay(0);
 801297a:	4640      	mov	r0, r8
 801297c:	2100      	movs	r1, #0
 801297e:	f002 faa5 	bl	8014ecc <_ZN6Thread12setTickDelayEm>
} 
 8012982:	4620      	mov	r0, r4
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012988:	0801d1ac 	.word	0x0801d1ac
 801298c:	0801d108 	.word	0x0801d108
 8012990:	0801d1f4 	.word	0x0801d1f4
 8012994:	0801a9b0 	.word	0x0801a9b0
 8012998:	24041660 	.word	0x24041660
 801299c:	0801d116 	.word	0x0801d116
 80129a0:	24041060 	.word	0x24041060
 80129a4:	0801d15d 	.word	0x0801d15d

080129a8 <_Z5crc16PKht>:
uint16_t crc16(const uint8_t *data, uint16_t size) {
    uint16_t out = 0;
    int bits_read = 0, bit_flag;

    /* Sanity check: */
    if(data == nullptr)
 80129a8:	4602      	mov	r2, r0
uint16_t crc16(const uint8_t *data, uint16_t size) {
 80129aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(data == nullptr)
 80129ac:	b1d8      	cbz	r0, 80129e6 <_Z5crc16PKht+0x3e>
    int bits_read = 0, bit_flag;
 80129ae:	2400      	movs	r4, #0
            size--;
        }

        /* Cycle check: */
        if(bit_flag)
            out ^= CRC16;
 80129b0:	f248 0505 	movw	r5, #32773	; 0x8005
    uint16_t out = 0;
 80129b4:	4620      	mov	r0, r4
    while(size > 0)
 80129b6:	b1b1      	cbz	r1, 80129e6 <_Z5crc16PKht+0x3e>
        out |= (*data >> (7 - bits_read)) & 1;
 80129b8:	7813      	ldrb	r3, [r2, #0]
 80129ba:	f1c4 0707 	rsb	r7, r4, #7
        bits_read++;
 80129be:	3401      	adds	r4, #1
        bit_flag = out >> 15;
 80129c0:	0bc6      	lsrs	r6, r0, #15
        out |= (*data >> (7 - bits_read)) & 1;
 80129c2:	413b      	asrs	r3, r7
        if(bits_read > 7)
 80129c4:	2c07      	cmp	r4, #7
        out |= (*data >> (7 - bits_read)) & 1;
 80129c6:	f003 0301 	and.w	r3, r3, #1
            size--;
 80129ca:	bfc4      	itt	gt
 80129cc:	f101 31ff 	addgt.w	r1, r1, #4294967295	; 0xffffffff
            data++;
 80129d0:	3201      	addgt	r2, #1
        out |= (*data >> (7 - bits_read)) & 1;
 80129d2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
            bits_read = 0;
 80129d6:	bfc4      	itt	gt
 80129d8:	2400      	movgt	r4, #0
            size--;
 80129da:	b289      	uxthgt	r1, r1
        out |= (*data >> (7 - bits_read)) & 1;
 80129dc:	b298      	uxth	r0, r3
        if(bit_flag)
 80129de:	2e00      	cmp	r6, #0
 80129e0:	d0e9      	beq.n	80129b6 <_Z5crc16PKht+0xe>
            out ^= CRC16;
 80129e2:	4068      	eors	r0, r5
 80129e4:	e7e7      	b.n	80129b6 <_Z5crc16PKht+0xe>
    }

    return out;
}
 80129e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080129e8 <_ZN10FileSystem4freeEt>:
	return oldest_block_id;
}


void FileSystem::free(uint16_t block_id) {
	if(block_id >= PROTECTED_BLOCKS) {
 80129e8:	2907      	cmp	r1, #7
 80129ea:	d90b      	bls.n	8012a04 <_ZN10FileSystem4freeEt+0x1c>
		partition_table[block_id] = 0;
 80129ec:	2300      	movs	r3, #0
 80129ee:	4401      	add	r1, r0
		partition_table_modified = true;
 80129f0:	2201      	movs	r2, #1
		partition_table[block_id] = 0;
 80129f2:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
		partition_table_modified = true;
 80129f6:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80129fa:	741a      	strb	r2, [r3, #16]
		total_used_blocks--;
 80129fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80129fe:	3b01      	subs	r3, #1
 8012a00:	62c3      	str	r3, [r0, #44]	; 0x2c
	} else {
		log("Error: Cannot free a protected block");
	}
}
 8012a02:	4770      	bx	lr
		log("Error: Cannot free a protected block");
 8012a04:	6943      	ldr	r3, [r0, #20]
 8012a06:	4801      	ldr	r0, [pc, #4]	; (8012a0c <_ZN10FileSystem4freeEt+0x24>)
 8012a08:	4718      	bx	r3
 8012a0a:	bf00      	nop
 8012a0c:	0801d228 	.word	0x0801d228

08012a10 <_ZN10FileSystem22computeLengthFromUsageEy>:
 *
 */
uint32_t FileSystem::computeLengthFromUsage(uint64_t usage_table) {
	uint32_t length = 0;

	usage_table = ~usage_table;
 8012a10:	43d2      	mvns	r2, r2
 8012a12:	43db      	mvns	r3, r3
	uint32_t length = 0;
 8012a14:	2100      	movs	r1, #0
uint32_t FileSystem::computeLengthFromUsage(uint64_t usage_table) {
 8012a16:	b510      	push	{r4, lr}

	while(usage_table) {
 8012a18:	ea52 0403 	orrs.w	r4, r2, r3
 8012a1c:	d007      	beq.n	8012a2e <_ZN10FileSystem22computeLengthFromUsageEy+0x1e>
		length += usage_table & 0b1;
 8012a1e:	f002 0401 	and.w	r4, r2, #1
		usage_table >>= 1;
 8012a22:	0852      	lsrs	r2, r2, #1
		length += usage_table & 0b1;
 8012a24:	4421      	add	r1, r4
		usage_table >>= 1;
 8012a26:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8012a2a:	085b      	lsrs	r3, r3, #1
	while(usage_table) {
 8012a2c:	e7f4      	b.n	8012a18 <_ZN10FileSystem22computeLengthFromUsageEy+0x8>
	}

	return block_size * length / 64;
 8012a2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012a30:	4348      	muls	r0, r1
}
 8012a32:	0980      	lsrs	r0, r0, #6
 8012a34:	bd10      	pop	{r4, pc}

08012a36 <_ZN10FileSystem13computeLengthEt>:
	uint32_t address = block_id * block_size;
 8012a36:	6a43      	ldr	r3, [r0, #36]	; 0x24
uint32_t FileSystem::computeLength(uint16_t block_id) {
 8012a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t address = block_id * block_size;
 8012a3a:	4359      	muls	r1, r3
	read(address + 8, usage_table, 8); // Skip the file id and predecessor block id
 8012a3c:	6803      	ldr	r3, [r0, #0]
uint32_t FileSystem::computeLength(uint16_t block_id) {
 8012a3e:	4604      	mov	r4, r0
	read(address + 8, usage_table, 8); // Skip the file id and predecessor block id
 8012a40:	466a      	mov	r2, sp
 8012a42:	68dd      	ldr	r5, [r3, #12]
 8012a44:	2308      	movs	r3, #8
 8012a46:	4419      	add	r1, r3
 8012a48:	47a8      	blx	r5
	return computeLengthFromUsage(composition);
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a50:	f7ff ffde 	bl	8012a10 <_ZN10FileSystem22computeLengthFromUsageEy>
}
 8012a54:	b003      	add	sp, #12
 8012a56:	bd30      	pop	{r4, r5, pc}

08012a58 <_ZN10FileSystem12loadFileMetaEP4File>:
uint16_t FileSystem::loadFileMeta(File* file) {
 8012a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   file->length = 0;
 8012a5c:	2300      	movs	r3, #0
uint16_t FileSystem::loadFileMeta(File* file) {
 8012a5e:	4607      	mov	r7, r0
 8012a60:	460c      	mov	r4, r1
   uint32_t block_id = file->first_block;
 8012a62:	8a8d      	ldrh	r5, [r1, #20]
   file->used_blocks = 0;
 8012a64:	f640 76f2 	movw	r6, #4082	; 0xff2
      block_id = data_blocks[block_id].successor;
 8012a68:	f241 0808 	movw	r8, #4104	; 0x1008
   file->length = 0;
 8012a6c:	618b      	str	r3, [r1, #24]
   file->used_blocks = 0;
 8012a6e:	838b      	strh	r3, [r1, #28]
   while(block_id) {
 8012a70:	b1ad      	cbz	r5, 8012a9e <_ZN10FileSystem12loadFileMetaEP4File+0x46>
      file->length += computeLength(block_id);
 8012a72:	fa1f f985 	uxth.w	r9, r5
 8012a76:	4638      	mov	r0, r7
      block_id = data_blocks[block_id].successor;
 8012a78:	4445      	add	r5, r8
      if(counter++ > NUM_BLOCKS) {
 8012a7a:	3e01      	subs	r6, #1
      file->length += computeLength(block_id);
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	f7ff ffda 	bl	8012a36 <_ZN10FileSystem13computeLengthEt>
 8012a82:	69a3      	ldr	r3, [r4, #24]
      block_id = data_blocks[block_id].successor;
 8012a84:	eb07 0545 	add.w	r5, r7, r5, lsl #1
      file->last_block = block_id;
 8012a88:	f8a4 9016 	strh.w	r9, [r4, #22]
      file->length += computeLength(block_id);
 8012a8c:	4418      	add	r0, r3
      file->used_blocks++;
 8012a8e:	8ba3      	ldrh	r3, [r4, #28]
      if(counter++ > NUM_BLOCKS) {
 8012a90:	b2b6      	uxth	r6, r6
      file->used_blocks++;
 8012a92:	3301      	adds	r3, #1
      file->length += computeLength(block_id);
 8012a94:	61a0      	str	r0, [r4, #24]
      file->used_blocks++;
 8012a96:	83a3      	strh	r3, [r4, #28]
      block_id = data_blocks[block_id].successor;
 8012a98:	886d      	ldrh	r5, [r5, #2]
      if(counter++ > NUM_BLOCKS) {
 8012a9a:	2e00      	cmp	r6, #0
 8012a9c:	d1e8      	bne.n	8012a70 <_ZN10FileSystem12loadFileMetaEP4File+0x18>
}
 8012a9e:	8ba0      	ldrh	r0, [r4, #28]
 8012aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012aa4 <_ZN10FileSystem19initBlockManagementEv>:
void FileSystem::initBlockManagement() {
 8012aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	4604      	mov	r4, r0
	log("Detecting files...");
 8012aaa:	f04f 0808 	mov.w	r8, #8
					stream.read((uint8_t*) identifier, 16);
 8012aae:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8012c4c <_ZN10FileSystem19initBlockManagementEv+0x1a8>
void FileSystem::initBlockManagement() {
 8012ab2:	b095      	sub	sp, #84	; 0x54
 8012ab4:	f104 0b38 	add.w	fp, r4, #56	; 0x38
	log("Detecting files...");
 8012ab8:	6943      	ldr	r3, [r0, #20]
 8012aba:	485f      	ldr	r0, [pc, #380]	; (8012c38 <_ZN10FileSystem19initBlockManagementEv+0x194>)
 8012abc:	4798      	blx	r3
		uint8_t meta_data = partition_table[block_id];
 8012abe:	f81b ab01 	ldrb.w	sl, [fp], #1
 8012ac2:	fa1f f588 	uxth.w	r5, r8
		if(meta_data) {
 8012ac6:	f1ba 0f00 	cmp.w	sl, #0
 8012aca:	d029      	beq.n	8012b20 <_ZN10FileSystem19initBlockManagementEv+0x7c>
			allow_unsafe_access = true;
 8012acc:	2301      	movs	r3, #1
			uint32_t address = block_size * block_id;
 8012ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
			Stream stream(this, address, RAW);
 8012ad0:	4621      	mov	r1, r4
 8012ad2:	a802      	add	r0, sp, #8
 8012ad4:	fb02 f208 	mul.w	r2, r2, r8
			allow_unsafe_access = true;
 8012ad8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			Stream stream(this, address, RAW);
 8012adc:	f000 fee4 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
			uint32_t magic = stream.read32();
 8012ae0:	a802      	add	r0, sp, #8
 8012ae2:	f000 ff2a 	bl	801393a <_ZN6Stream6read32Ev>
 8012ae6:	9000      	str	r0, [sp, #0]
			uint16_t file_id = stream.read16();
 8012ae8:	a802      	add	r0, sp, #8
 8012aea:	f000 ff1c 	bl	8013926 <_ZN6Stream6read16Ev>
 8012aee:	4607      	mov	r7, r0
			uint16_t predecessor = stream.read16();
 8012af0:	a802      	add	r0, sp, #8
 8012af2:	f000 ff18 	bl	8013926 <_ZN6Stream6read16Ev>
 8012af6:	4606      	mov	r6, r0
			stream.read64(); // Skip the usage table
 8012af8:	a802      	add	r0, sp, #8
 8012afa:	f000 ff28 	bl	801394e <_ZN6Stream6read64Ev>
			if(magic == BLOCK_MAGIC_NUMBER) {
 8012afe:	4a4f      	ldr	r2, [pc, #316]	; (8012c3c <_ZN10FileSystem19initBlockManagementEv+0x198>)
 8012b00:	9b00      	ldr	r3, [sp, #0]
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d15f      	bne.n	8012bc6 <_ZN10FileSystem19initBlockManagementEv+0x122>
				if(predecessor) {
 8012b06:	b336      	cbz	r6, 8012b56 <_ZN10FileSystem19initBlockManagementEv+0xb2>
					data_blocks[predecessor].successor = block_id;
 8012b08:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8012b0c:	3608      	adds	r6, #8
 8012b0e:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8012b12:	8075      	strh	r5, [r6, #2]
			stream.close();
 8012b14:	a802      	add	r0, sp, #8
 8012b16:	f000 fecf 	bl	80138b8 <_ZN6Stream5closeEv>
			allow_unsafe_access = false;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	for(uint16_t block_id = PROTECTED_BLOCKS; block_id < NUM_BLOCKS; block_id++) {
 8012b20:	f108 0801 	add.w	r8, r8, #1
 8012b24:	f5b8 6f7f 	cmp.w	r8, #4080	; 0xff0
 8012b28:	d1c9      	bne.n	8012abe <_ZN10FileSystem19initBlockManagementEv+0x1a>
	log("Resolving block hierarchy...");
 8012b2a:	f504 557f 	add.w	r5, r4, #16320	; 0x3fc0
 8012b2e:	f504 4683 	add.w	r6, r4, #16768	; 0x4180
 8012b32:	6963      	ldr	r3, [r4, #20]
 8012b34:	3534      	adds	r5, #52	; 0x34
 8012b36:	3674      	adds	r6, #116	; 0x74
 8012b38:	4841      	ldr	r0, [pc, #260]	; (8012c40 <_ZN10FileSystem19initBlockManagementEv+0x19c>)
 8012b3a:	4798      	blx	r3
		uint32_t used_blocks = loadFileMeta(selected_file);
 8012b3c:	4629      	mov	r1, r5
 8012b3e:	4620      	mov	r0, r4
 8012b40:	f7ff ff8a 	bl	8012a58 <_ZN10FileSystem12loadFileMetaEP4File>
	for(uint8_t file_id = 0; file_id < NUM_FILES; file_id++) {
 8012b44:	3520      	adds	r5, #32
		total_used_blocks += used_blocks;
 8012b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	for(uint8_t file_id = 0; file_id < NUM_FILES; file_id++) {
 8012b48:	42b5      	cmp	r5, r6
		total_used_blocks += used_blocks;
 8012b4a:	4418      	add	r0, r3
 8012b4c:	62e0      	str	r0, [r4, #44]	; 0x2c
	for(uint8_t file_id = 0; file_id < NUM_FILES; file_id++) {
 8012b4e:	d1f5      	bne.n	8012b3c <_ZN10FileSystem19initBlockManagementEv+0x98>
}
 8012b50:	b015      	add	sp, #84	; 0x54
 8012b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				} else if((meta_data & 0b11110000) != 0b11110000) {
 8012b56:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
 8012b5a:	f1ba 0ff0 	cmp.w	sl, #240	; 0xf0
 8012b5e:	d023      	beq.n	8012ba8 <_ZN10FileSystem19initBlockManagementEv+0x104>
					stream.read((uint8_t*) identifier, 16);
 8012b60:	2210      	movs	r2, #16
 8012b62:	4649      	mov	r1, r9
 8012b64:	a802      	add	r0, sp, #8
 8012b66:	eb04 1a47 	add.w	sl, r4, r7, lsl #5
 8012b6a:	f000 feac 	bl	80138c6 <_ZN6Stream4readEPhm>
					log(identifier);
 8012b6e:	6963      	ldr	r3, [r4, #20]
 8012b70:	4648      	mov	r0, r9
 8012b72:	4798      	blx	r3
					uint32_t hash = hash_filename(identifier);
 8012b74:	4648      	mov	r0, r9
 8012b76:	f000 faac 	bl	80130d2 <_Z13hash_filenamePKc>
					selected_file->first_block = block_id;
 8012b7a:	f50a 4280 	add.w	r2, sl, #16384	; 0x4000
					filename_copy(identifier, selected_file->filename);
 8012b7e:	f50a 517f 	add.w	r1, sl, #16320	; 0x3fc0
					uint32_t hash = hash_filename(identifier);
 8012b82:	9001      	str	r0, [sp, #4]
					selected_file->first_block = block_id;
 8012b84:	8115      	strh	r5, [r2, #8]
					filename_copy(identifier, selected_file->filename);
 8012b86:	4648      	mov	r0, r9
 8012b88:	3134      	adds	r1, #52	; 0x34
					selected_file->first_block = block_id;
 8012b8a:	9200      	str	r2, [sp, #0]
					filename_copy(identifier, selected_file->filename);
 8012b8c:	f000 fa7c 	bl	8013088 <_Z13filename_copyPKcPc>
					selected_file->hash = hash;
 8012b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b94:	6053      	str	r3, [r2, #4]
					selected_file->used_blocks = 0;
 8012b96:	f244 0310 	movw	r3, #16400	; 0x4010
 8012b9a:	f82a 6003 	strh.w	r6, [sl, r3]
					selected_file->length = 0;
 8012b9e:	f244 030c 	movw	r3, #16396	; 0x400c
 8012ba2:	f84a 6003 	str.w	r6, [sl, r3]
 8012ba6:	e7b5      	b.n	8012b14 <_ZN10FileSystem19initBlockManagementEv+0x70>
					data_blocks[selected_file->first_block].successor = block_id;
 8012ba8:	f507 7700 	add.w	r7, r7, #512	; 0x200
					log("Lost block recovered");
 8012bac:	6963      	ldr	r3, [r4, #20]
 8012bae:	4825      	ldr	r0, [pc, #148]	; (8012c44 <_ZN10FileSystem19initBlockManagementEv+0x1a0>)
					data_blocks[selected_file->first_block].successor = block_id;
 8012bb0:	eb04 1747 	add.w	r7, r4, r7, lsl #5
					log("Lost block recovered");
 8012bb4:	4798      	blx	r3
					data_blocks[selected_file->first_block].successor = block_id;
 8012bb6:	893b      	ldrh	r3, [r7, #8]
 8012bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bbc:	3308      	adds	r3, #8
 8012bbe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012bc2:	805d      	strh	r5, [r3, #2]
 8012bc4:	e7a6      	b.n	8012b14 <_ZN10FileSystem19initBlockManagementEv+0x70>
				char buffer[] = "Warning: Invalid magic number xxxx. Ignoring block";
 8012bc6:	4b20      	ldr	r3, [pc, #128]	; (8012c48 <_ZN10FileSystem19initBlockManagementEv+0x1a4>)
 8012bc8:	ae07      	add	r6, sp, #28
 8012bca:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 8012bce:	4632      	mov	r2, r6
 8012bd0:	6818      	ldr	r0, [r3, #0]
 8012bd2:	3308      	adds	r3, #8
 8012bd4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012bd8:	4637      	mov	r7, r6
 8012bda:	4563      	cmp	r3, ip
 8012bdc:	c703      	stmia	r7!, {r0, r1}
 8012bde:	463e      	mov	r6, r7
 8012be0:	d1f6      	bne.n	8012bd0 <_ZN10FileSystem19initBlockManagementEv+0x12c>
 8012be2:	8819      	ldrh	r1, [r3, #0]
 8012be4:	789b      	ldrb	r3, [r3, #2]
 8012be6:	8039      	strh	r1, [r7, #0]
				buffer[30] = '0' + (block_id % 10000) / 1000;
 8012be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
				char buffer[] = "Warning: Invalid magic number xxxx. Ignoring block";
 8012bec:	70bb      	strb	r3, [r7, #2]
				buffer[30] = '0' + (block_id % 10000) / 1000;
 8012bee:	fbb5 f3f1 	udiv	r3, r5, r1
 8012bf2:	f103 0030 	add.w	r0, r3, #48	; 0x30
				buffer[31] = '0' + (block_id % 1000) / 100;
 8012bf6:	fb01 5313 	mls	r3, r1, r3, r5
 8012bfa:	2164      	movs	r1, #100	; 0x64
 8012bfc:	b29b      	uxth	r3, r3
				buffer[30] = '0' + (block_id % 10000) / 1000;
 8012bfe:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
				log(buffer);
 8012c02:	4610      	mov	r0, r2
				buffer[31] = '0' + (block_id % 1000) / 100;
 8012c04:	fbb3 f3f1 	udiv	r3, r3, r1
 8012c08:	3330      	adds	r3, #48	; 0x30
 8012c0a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
				buffer[32] = '0' + (block_id % 100) / 10;
 8012c0e:	fbb5 f3f1 	udiv	r3, r5, r1
 8012c12:	fb01 5313 	mls	r3, r1, r3, r5
 8012c16:	210a      	movs	r1, #10
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8012c1e:	3330      	adds	r3, #48	; 0x30
 8012c20:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				buffer[33] = '0' + (block_id % 10);
 8012c24:	fbb5 f3f1 	udiv	r3, r5, r1
 8012c28:	fb01 5513 	mls	r5, r1, r3, r5
				log(buffer);
 8012c2c:	6963      	ldr	r3, [r4, #20]
				buffer[33] = '0' + (block_id % 10);
 8012c2e:	3530      	adds	r5, #48	; 0x30
 8012c30:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
				log(buffer);
 8012c34:	4798      	blx	r3
 8012c36:	e76d      	b.n	8012b14 <_ZN10FileSystem19initBlockManagementEv+0x70>
 8012c38:	0801d24d 	.word	0x0801d24d
 8012c3c:	c0ffee00 	.word	0xc0ffee00
 8012c40:	0801d275 	.word	0x0801d275
 8012c44:	0801d260 	.word	0x0801d260
 8012c48:	0801d292 	.word	0x0801d292
 8012c4c:	24041664 	.word	0x24041664

08012c50 <_ZN10FileSystem14getBaseAddressEt>:


uint32_t FileSystem::getBaseAddress(uint16_t block_id) {
	return block_id * block_size + BLOCK_HEADER_SIZE;
 8012c50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012c52:	4348      	muls	r0, r1
}
 8012c54:	3010      	adds	r0, #16
 8012c56:	4770      	bx	lr

08012c58 <_ZN10FileSystem11checkHeaderEt>:
}

/*
 * Checks whether a block is valid or not
 */
bool FileSystem::checkHeader(uint16_t block_id) {
 8012c58:	b530      	push	{r4, r5, lr}
	allow_unsafe_access = true;
 8012c5a:	2301      	movs	r3, #1
bool FileSystem::checkHeader(uint16_t block_id) {
 8012c5c:	b087      	sub	sp, #28
	Stream stream(this, block_id * block_size, RAW);
 8012c5e:	6a42      	ldr	r2, [r0, #36]	; 0x24
bool FileSystem::checkHeader(uint16_t block_id) {
 8012c60:	4604      	mov	r4, r0
	allow_unsafe_access = true;
 8012c62:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	Stream stream(this, block_id * block_size, RAW);
 8012c66:	434a      	muls	r2, r1
 8012c68:	4601      	mov	r1, r0
 8012c6a:	a801      	add	r0, sp, #4
 8012c6c:	f000 fe1c 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
	uint32_t magic = stream.read32();
 8012c70:	a801      	add	r0, sp, #4
 8012c72:	f000 fe62 	bl	801393a <_ZN6Stream6read32Ev>
 8012c76:	4605      	mov	r5, r0
	stream.close();
 8012c78:	a801      	add	r0, sp, #4
 8012c7a:	f000 fe1d 	bl	80138b8 <_ZN6Stream5closeEv>
	allow_unsafe_access = false;
 8012c7e:	2300      	movs	r3, #0

	return magic == BLOCK_MAGIC_NUMBER;
}
 8012c80:	4803      	ldr	r0, [pc, #12]	; (8012c90 <_ZN10FileSystem11checkHeaderEt+0x38>)
	allow_unsafe_access = false;
 8012c82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8012c86:	1a2b      	subs	r3, r5, r0
 8012c88:	4258      	negs	r0, r3
 8012c8a:	4158      	adcs	r0, r3
 8012c8c:	b007      	add	sp, #28
 8012c8e:	bd30      	pop	{r4, r5, pc}
 8012c90:	c0ffee00 	.word	0xc0ffee00

08012c94 <_ZN10FileSystem16updateUsageTableEmm>:
 * 0000000011111111111111111111111000000000 NOT
 *
 * 1111111100000000000000000000000000000000 = (~0ULL << (normalised_end + 1));
 * 0000000000000000000000000000000111111111 = (1ULL << normalised_begin) - 1;
 */
void FileSystem::updateUsageTable(uint32_t write_begin, uint32_t write_end) {
 8012c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t block_id = write_begin / block_size;
 8012c96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c98:	fbb1 f5f6 	udiv	r5, r1, r6

	uint8_t lsb = block_size / 64;

	uint8_t normalised_begin = (write_begin % block_size) / lsb;
	uint8_t normalised_end = (write_end % block_size) / lsb;
 8012c9c:	fbb2 f3f6 	udiv	r3, r2, r6
 8012ca0:	f3c6 1487 	ubfx	r4, r6, #6, #8
 8012ca4:	fb03 2216 	mls	r2, r3, r6, r2
	uint8_t normalised_begin = (write_begin % block_size) / lsb;
 8012ca8:	fb06 1315 	mls	r3, r6, r5, r1
 8012cac:	fbb3 f3f4 	udiv	r3, r3, r4


	uint64_t begin_bit_mask = (1ULL << normalised_begin) - 1;
 8012cb0:	b2db      	uxtb	r3, r3
	uint8_t normalised_end = (write_end % block_size) / lsb;
 8012cb2:	fbb2 f2f4 	udiv	r2, r2, r4
	uint64_t begin_bit_mask = (1ULL << normalised_begin) - 1;
 8012cb6:	f1a3 0120 	sub.w	r1, r3, #32
 8012cba:	2401      	movs	r4, #1
 8012cbc:	f1c3 0720 	rsb	r7, r3, #32
	uint64_t end_bit_mask = (~0ULL << (normalised_end + 1));

	uint64_t usage_bit_mask = normalised_end < 63 ? (begin_bit_mask | end_bit_mask) : begin_bit_mask;
 8012cc0:	b2d2      	uxtb	r2, r2
	uint64_t begin_bit_mask = (1ULL << normalised_begin) - 1;
 8012cc2:	fa04 f101 	lsl.w	r1, r4, r1
 8012cc6:	fa04 f303 	lsl.w	r3, r4, r3
 8012cca:	fa24 f707 	lsr.w	r7, r4, r7
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	ea41 0107 	orr.w	r1, r1, r7
 8012cd4:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
	uint64_t usage_bit_mask = normalised_end < 63 ? (begin_bit_mask | end_bit_mask) : begin_bit_mask;
 8012cd8:	2a3e      	cmp	r2, #62	; 0x3e
 8012cda:	d814      	bhi.n	8012d06 <_ZN10FileSystem16updateUsageTableEmm+0x72>
	uint64_t end_bit_mask = (~0ULL << (normalised_end + 1));
 8012cdc:	eb02 0e04 	add.w	lr, r2, r4
 8012ce0:	f1a2 0c1f 	sub.w	ip, r2, #31
 8012ce4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012ce8:	f1c2 021f 	rsb	r2, r2, #31
 8012cec:	fa04 f70e 	lsl.w	r7, r4, lr
 8012cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8012cf4:	fa24 f202 	lsr.w	r2, r4, r2
 8012cf8:	fa04 f40e 	lsl.w	r4, r4, lr
 8012cfc:	ea47 070c 	orr.w	r7, r7, ip
	uint64_t usage_bit_mask = normalised_end < 63 ? (begin_bit_mask | end_bit_mask) : begin_bit_mask;
 8012d00:	4323      	orrs	r3, r4
	uint64_t end_bit_mask = (~0ULL << (normalised_end + 1));
 8012d02:	4317      	orrs	r7, r2
	uint64_t usage_bit_mask = normalised_end < 63 ? (begin_bit_mask | end_bit_mask) : begin_bit_mask;
 8012d04:	4339      	orrs	r1, r7
	 * which is itself called by all Stream read and write operations.
	 */
	uint8_t buffer[8];

	buffer[0] = usage_bit_mask;
	buffer[1] = usage_bit_mask >> 8;
 8012d06:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = usage_bit_mask;
 8012d08:	f88d 3000 	strb.w	r3, [sp]
	buffer[2] = usage_bit_mask >> 16;
	buffer[3] = usage_bit_mask >> 24;
	buffer[4] = usage_bit_mask >> 32;
 8012d0c:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer[1] = usage_bit_mask >> 8;
 8012d10:	f88d 2001 	strb.w	r2, [sp, #1]
	buffer[2] = usage_bit_mask >> 16;
 8012d14:	0c1a      	lsrs	r2, r3, #16
	buffer[3] = usage_bit_mask >> 24;
 8012d16:	0e1b      	lsrs	r3, r3, #24
	buffer[2] = usage_bit_mask >> 16;
 8012d18:	f88d 2002 	strb.w	r2, [sp, #2]
	buffer[5] = usage_bit_mask >> 40;
	buffer[6] = usage_bit_mask >> 48;
	buffer[7] = usage_bit_mask >> 56;

	write(block_id * block_size + 8, buffer, 8);
 8012d1c:	466a      	mov	r2, sp
	buffer[3] = usage_bit_mask >> 24;
 8012d1e:	f88d 3003 	strb.w	r3, [sp, #3]
	buffer[5] = usage_bit_mask >> 40;
 8012d22:	0a0b      	lsrs	r3, r1, #8
 8012d24:	f88d 3005 	strb.w	r3, [sp, #5]
	buffer[6] = usage_bit_mask >> 48;
 8012d28:	0c0b      	lsrs	r3, r1, #16
 8012d2a:	f88d 3006 	strb.w	r3, [sp, #6]
	buffer[7] = usage_bit_mask >> 56;
 8012d2e:	0e0b      	lsrs	r3, r1, #24
	write(block_id * block_size + 8, buffer, 8);
 8012d30:	b2a9      	uxth	r1, r5
	buffer[7] = usage_bit_mask >> 56;
 8012d32:	f88d 3007 	strb.w	r3, [sp, #7]
	write(block_id * block_size + 8, buffer, 8);
 8012d36:	6803      	ldr	r3, [r0, #0]
 8012d38:	4371      	muls	r1, r6
 8012d3a:	691c      	ldr	r4, [r3, #16]
 8012d3c:	2308      	movs	r3, #8
 8012d3e:	4419      	add	r1, r3
 8012d40:	47a0      	blx	r4
}
 8012d42:	b003      	add	sp, #12
 8012d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012d46 <_ZN10FileSystem7protectEt>:
void FileSystem::protect(uint16_t block_id) {
 8012d46:	4603      	mov	r3, r0
	partition_table[block_id] |= 0b00001111; // Set the file base block immortal
 8012d48:	440b      	add	r3, r1
void FileSystem::protect(uint16_t block_id) {
 8012d4a:	b410      	push	{r4}
	partition_table[block_id] |= 0b00001111; // Set the file base block immortal
 8012d4c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	return block_id * block_size + BLOCK_HEADER_SIZE;
 8012d50:	6a44      	ldr	r4, [r0, #36]	; 0x24
	partition_table[block_id] |= 0b00001111; // Set the file base block immortal
 8012d52:	f042 020f 	orr.w	r2, r2, #15
	return block_id * block_size + BLOCK_HEADER_SIZE;
 8012d56:	434c      	muls	r4, r1
	partition_table[block_id] |= 0b00001111; // Set the file base block immortal
 8012d58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	updateUsageTable(address, address + 16);
 8012d5c:	f104 0110 	add.w	r1, r4, #16
 8012d60:	f104 0220 	add.w	r2, r4, #32
}
 8012d64:	f85d 4b04 	ldr.w	r4, [sp], #4
	updateUsageTable(address, address + 16);
 8012d68:	f7ff bf94 	b.w	8012c94 <_ZN10FileSystem16updateUsageTableEmm>

08012d6c <_ZN10FileSystem11writeHeaderEttt>:
void FileSystem::writeHeader(uint16_t block_id, uint16_t file_id, uint16_t predecessor) {
 8012d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d6e:	460c      	mov	r4, r1
	buffer[0] = (uint8_t) (BLOCK_MAGIC_NUMBER);
 8012d70:	2100      	movs	r1, #0
	buffer[6] = (uint8_t) predecessor;
 8012d72:	f88d 3006 	strb.w	r3, [sp, #6]
	buffer[7] = (uint8_t) (predecessor >> 8);
 8012d76:	0a1b      	lsrs	r3, r3, #8
	buffer[0] = (uint8_t) (BLOCK_MAGIC_NUMBER);
 8012d78:	f88d 1000 	strb.w	r1, [sp]
	buffer[1] = (uint8_t) (BLOCK_MAGIC_NUMBER >> 8);
 8012d7c:	21ee      	movs	r1, #238	; 0xee
	buffer[4] = (uint8_t) file_id;
 8012d7e:	f88d 2004 	strb.w	r2, [sp, #4]
	buffer[5] = (uint8_t) (file_id >> 8);
 8012d82:	0a12      	lsrs	r2, r2, #8
	buffer[1] = (uint8_t) (BLOCK_MAGIC_NUMBER >> 8);
 8012d84:	f88d 1001 	strb.w	r1, [sp, #1]
	buffer[2] = (uint8_t) (BLOCK_MAGIC_NUMBER >> 16);
 8012d88:	21ff      	movs	r1, #255	; 0xff
	buffer[7] = (uint8_t) (predecessor >> 8);
 8012d8a:	f88d 3007 	strb.w	r3, [sp, #7]
void FileSystem::writeHeader(uint16_t block_id, uint16_t file_id, uint16_t predecessor) {
 8012d8e:	4605      	mov	r5, r0
	buffer[2] = (uint8_t) (BLOCK_MAGIC_NUMBER >> 16);
 8012d90:	f88d 1002 	strb.w	r1, [sp, #2]
	buffer[3] = (uint8_t) (BLOCK_MAGIC_NUMBER >> 24);
 8012d94:	21c0      	movs	r1, #192	; 0xc0
	write(block_id * block_size, buffer, 8);
 8012d96:	6803      	ldr	r3, [r0, #0]
	buffer[3] = (uint8_t) (BLOCK_MAGIC_NUMBER >> 24);
 8012d98:	f88d 1003 	strb.w	r1, [sp, #3]
	write(block_id * block_size, buffer, 8);
 8012d9c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012d9e:	691e      	ldr	r6, [r3, #16]
 8012da0:	2308      	movs	r3, #8
 8012da2:	4361      	muls	r1, r4
	buffer[5] = (uint8_t) (file_id >> 8);
 8012da4:	f88d 2005 	strb.w	r2, [sp, #5]
	write(block_id * block_size, buffer, 8);
 8012da8:	466a      	mov	r2, sp
 8012daa:	47b0      	blx	r6
	updateUsageTable(block_id * block_size, block_id * block_size + 16);
 8012dac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8012dae:	4628      	mov	r0, r5
 8012db0:	4361      	muls	r1, r4
 8012db2:	f101 0210 	add.w	r2, r1, #16
 8012db6:	f7ff ff6d 	bl	8012c94 <_ZN10FileSystem16updateUsageTableEmm>
}
 8012dba:	b002      	add	sp, #8
 8012dbc:	bd70      	pop	{r4, r5, r6, pc}

08012dbe <_ZN10FileSystem20decreaseRelativeTimeEv>:
		decreaseRelativeTime();
	}
}

void FileSystem::decreaseRelativeTime() {
	for(uint16_t block_id = 0; block_id < NUM_BLOCKS; block_id++) {
 8012dbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012dc2:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
		uint8_t* meta = &(partition_table[block_id]);

		if((*meta & 0b00001111) > 0 && (*meta & 0b00001111) < 0xF) {
 8012dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dca:	f002 010f 	and.w	r1, r2, #15
 8012dce:	3901      	subs	r1, #1
 8012dd0:	290d      	cmp	r1, #13
			(*meta)--;
 8012dd2:	bf9c      	itt	ls
 8012dd4:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
 8012dd8:	f803 2c01 	strbls.w	r2, [r3, #-1]
	for(uint16_t block_id = 0; block_id < NUM_BLOCKS; block_id++) {
 8012ddc:	4283      	cmp	r3, r0
 8012dde:	d1f2      	bne.n	8012dc6 <_ZN10FileSystem20decreaseRelativeTimeEv+0x8>
		}
	}
}
 8012de0:	4770      	bx	lr

08012de2 <_ZN10FileSystem18updateRelativeTimeEv>:
	uint8_t available_space = 16 - (total_used_blocks * 16UL) / NUM_BLOCKS; // Ranges from 0 to 15
 8012de2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012de4:	f44f 617f 	mov.w	r1, #4080	; 0xff0
	uint8_t anchor = partition_table[0] & 0xF; // Core block meta is used as a time reference
 8012de8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
	uint8_t available_space = 16 - (total_used_blocks * 16UL) / NUM_BLOCKS; // Ranges from 0 to 15
 8012dec:	011b      	lsls	r3, r3, #4
	if(available_space < anchor) {
 8012dee:	f002 020f 	and.w	r2, r2, #15
	uint8_t available_space = 16 - (total_used_blocks * 16UL) / NUM_BLOCKS; // Ranges from 0 to 15
 8012df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8012df6:	f1c3 0310 	rsb	r3, r3, #16
	if(available_space < anchor) {
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d901      	bls.n	8012e04 <_ZN10FileSystem18updateRelativeTimeEv+0x22>
		decreaseRelativeTime();
 8012e00:	f7ff bfdd 	b.w	8012dbe <_ZN10FileSystem20decreaseRelativeTimeEv>
}
 8012e04:	4770      	bx	lr

08012e06 <_ZN10FileSystem5allocE8FileType>:
uint16_t FileSystem::alloc(FileType type) {
 8012e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e0a:	2708      	movs	r7, #8
 8012e0c:	b085      	sub	sp, #20
 8012e0e:	4604      	mov	r4, r0
 8012e10:	460d      	mov	r5, r1
 8012e12:	f100 0238 	add.w	r2, r0, #56	; 0x38
   uint16_t oldest_block_age = 0xF;
 8012e16:	230f      	movs	r3, #15
	uint16_t oldest_block_id = PROTECTED_BLOCKS;
 8012e18:	463e      	mov	r6, r7
		uint8_t age = (*meta) & 0xF;
 8012e1a:	f812 8b01 	ldrb.w	r8, [r2], #1
 8012e1e:	fa1f f987 	uxth.w	r9, r7
 8012e22:	f008 010f 	and.w	r1, r8, #15
		if(*meta == 0) {
 8012e26:	f1b8 0f00 	cmp.w	r8, #0
 8012e2a:	d126      	bne.n	8012e7a <_ZN10FileSystem5allocE8FileType+0x74>
			total_used_blocks++;
 8012e2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			*meta = (type << 4) | 0b1100;
 8012e2e:	012d      	lsls	r5, r5, #4
		uint8_t* meta = &(partition_table[block_id]);
 8012e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
		    write(address, meta, 1);
 8012e34:	4620      	mov	r0, r4
			total_used_blocks++;
 8012e36:	3301      	adds	r3, #1
			*meta = (type << 4) | 0b1100;
 8012e38:	f045 050c 	orr.w	r5, r5, #12
		    write(address, meta, 1);
 8012e3c:	4422      	add	r2, r4
			return block_id;
 8012e3e:	464e      	mov	r6, r9
			total_used_blocks++;
 8012e40:	62e3      	str	r3, [r4, #44]	; 0x2c
			*meta = (type << 4) | 0b1100;
 8012e42:	19e3      	adds	r3, r4, r7
 8012e44:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
	return block_id * block_size + BLOCK_HEADER_SIZE;
 8012e48:	6a61      	ldr	r1, [r4, #36]	; 0x24
		    write(address, meta, 1);
 8012e4a:	6823      	ldr	r3, [r4, #0]
	return block_id * block_size + BLOCK_HEADER_SIZE;
 8012e4c:	3110      	adds	r1, #16
		    write(address, meta, 1);
 8012e4e:	691d      	ldr	r5, [r3, #16]
 8012e50:	2301      	movs	r3, #1
 8012e52:	4439      	add	r1, r7
 8012e54:	47a8      	blx	r5
			data_blocks[block_id].successor = 0;
 8012e56:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
			updateRelativeTime();
 8012e5a:	4620      	mov	r0, r4
			data_blocks[block_id].successor = 0;
 8012e5c:	3308      	adds	r3, #8
 8012e5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012e62:	f8a3 8002 	strh.w	r8, [r3, #2]
			updateRelativeTime();
 8012e66:	f7ff ffbc 	bl	8012de2 <_ZN10FileSystem18updateRelativeTimeEv>
			erase_block_func(block_size * block_id); // Prepare for writing
 8012e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012e6c:	68e3      	ldr	r3, [r4, #12]
 8012e6e:	4378      	muls	r0, r7
 8012e70:	4798      	blx	r3
}
 8012e72:	4630      	mov	r0, r6
 8012e74:	b005      	add	sp, #20
 8012e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if(age < oldest_block_age){
 8012e7a:	4299      	cmp	r1, r3
	for(uint16_t block_id = PROTECTED_BLOCKS; block_id < NUM_BLOCKS; block_id++) {
 8012e7c:	f107 0701 	add.w	r7, r7, #1
		   oldest_block_age = age;
 8012e80:	bfbc      	itt	lt
 8012e82:	b28b      	uxthlt	r3, r1
 8012e84:	464e      	movlt	r6, r9
	for(uint16_t block_id = PROTECTED_BLOCKS; block_id < NUM_BLOCKS; block_id++) {
 8012e86:	f5b7 6f7f 	cmp.w	r7, #4080	; 0xff0
 8012e8a:	d1c6      	bne.n	8012e1a <_ZN10FileSystem5allocE8FileType+0x14>
	if(oldest_block_age > 0) { // Some correction for a better relative time repartition
 8012e8c:	b113      	cbz	r3, 8012e94 <_ZN10FileSystem5allocE8FileType+0x8e>
		decreaseRelativeTime();
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f7ff ff95 	bl	8012dbe <_ZN10FileSystem20decreaseRelativeTimeEv>
	if(partition_table[oldest_block_id] != ((type << 4) | 0b1100)) {
 8012e94:	19a3      	adds	r3, r4, r6
 8012e96:	012d      	lsls	r5, r5, #4
    read(block_size * oldest_block_id, header, 8);
 8012e98:	4620      	mov	r0, r4
 8012e9a:	eb04 0746 	add.w	r7, r4, r6, lsl #1
	if(partition_table[oldest_block_id] != ((type << 4) | 0b1100)) {
 8012e9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012ea2:	f045 050c 	orr.w	r5, r5, #12
   uint16_t successor_block_id = data_blocks[oldest_block_id].successor;
 8012ea6:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
	if(partition_table[oldest_block_id] != ((type << 4) | 0b1100)) {
 8012eaa:	42aa      	cmp	r2, r5
		partition_table[oldest_block_id] = (type << 4) | 0b1100; // Reset the entry in the partition table
 8012eac:	bf1e      	ittt	ne
 8012eae:	f883 5030 	strbne.w	r5, [r3, #48]	; 0x30
		partition_table_modified = true;
 8012eb2:	2201      	movne	r2, #1
 8012eb4:	f504 5300 	addne.w	r3, r4, #8192	; 0x2000
    read(block_size * oldest_block_id, header, 8);
 8012eb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
		partition_table_modified = true;
 8012eba:	bf18      	it	ne
 8012ebc:	741a      	strbne	r2, [r3, #16]
    read(block_size * oldest_block_id, header, 8);
 8012ebe:	6823      	ldr	r3, [r4, #0]
 8012ec0:	4371      	muls	r1, r6
 8012ec2:	68dd      	ldr	r5, [r3, #12]
 8012ec4:	2308      	movs	r3, #8
 8012ec6:	eb0d 0203 	add.w	r2, sp, r3
 8012eca:	47a8      	blx	r5
   File* old_file = &files[(header[5] << 8) | header[4]];
 8012ecc:	f8bd 500c 	ldrh.w	r5, [sp, #12]
   old_file->length -= 4096;
 8012ed0:	f244 010c 	movw	r1, #16396	; 0x400c
   uint16_t successor_block_id = data_blocks[oldest_block_id].successor;
 8012ed4:	f8b7 8012 	ldrh.w	r8, [r7, #18]
   old_file->length -= 4096;
 8012ed8:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8012edc:	585a      	ldr	r2, [r3, r1]
 8012ede:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8012ee2:	505a      	str	r2, [r3, r1]
   old_file->used_blocks--;
 8012ee4:	f244 0110 	movw	r1, #16400	; 0x4010
 8012ee8:	5a5a      	ldrh	r2, [r3, r1]
 8012eea:	3a01      	subs	r2, #1
 8012eec:	525a      	strh	r2, [r3, r1]
   if(successor_block_id) {
 8012eee:	f1b8 0f00 	cmp.w	r8, #0
 8012ef2:	d022      	beq.n	8012f3a <_ZN10FileSystem5allocE8FileType+0x134>
  	 write(block_size * successor_block_id + 6, lost_predecessor, 2);
 8012ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012ef6:	aa01      	add	r2, sp, #4
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	4620      	mov	r0, r4
 8012efc:	fb01 f108 	mul.w	r1, r1, r8
     data_blocks[old_file->first_block].successor = successor_block_id;
 8012f00:	f505 7500 	add.w	r5, r5, #512	; 0x200
  	 write(block_size * successor_block_id + 6, lost_predecessor, 2);
 8012f04:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8012f08:	2302      	movs	r3, #2
 8012f0a:	3106      	adds	r1, #6
     data_blocks[old_file->first_block].successor = successor_block_id;
 8012f0c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  	 write(block_size * successor_block_id + 6, lost_predecessor, 2);
 8012f10:	47c8      	blx	r9
     partition_table[successor_block_id] |= 0b11110000; // Set the successor block as a lost block
 8012f12:	eb04 0208 	add.w	r2, r4, r8
 8012f16:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8012f1a:	f063 030f 	orn	r3, r3, #15
 8012f1e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
     partition_table_modified = true;
 8012f22:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8012f26:	2201      	movs	r2, #1
 8012f28:	741a      	strb	r2, [r3, #16]
     data_blocks[old_file->first_block].successor = successor_block_id;
 8012f2a:	892b      	ldrh	r3, [r5, #8]
 8012f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f30:	3308      	adds	r3, #8
 8012f32:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012f36:	f8a3 8002 	strh.w	r8, [r3, #2]
   data_blocks[oldest_block_id].successor = 0;
 8012f3a:	2300      	movs	r3, #0
   updateRelativeTime();
 8012f3c:	4620      	mov	r0, r4
   data_blocks[oldest_block_id].successor = 0;
 8012f3e:	827b      	strh	r3, [r7, #18]
   updateRelativeTime();
 8012f40:	f7ff ff4f 	bl	8012de2 <_ZN10FileSystem18updateRelativeTimeEv>
	erase_block_func(block_size * oldest_block_id); // Prepare reallocated block for writing
 8012f44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012f46:	68e3      	ldr	r3, [r4, #12]
 8012f48:	4370      	muls	r0, r6
 8012f4a:	4798      	blx	r3
	return oldest_block_id;
 8012f4c:	e791      	b.n	8012e72 <_ZN10FileSystem5allocE8FileType+0x6c>

08012f4e <_ZN10FileSystem6accessEPmm10AccessType>:
int32_t FileSystem::access(uint32_t* address, uint32_t length, AccessType access_type) {
 8012f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f52:	461e      	mov	r6, r3
	if(allow_unsafe_access) {
 8012f54:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
int32_t FileSystem::access(uint32_t* address, uint32_t length, AccessType access_type) {
 8012f58:	b085      	sub	sp, #20
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	460d      	mov	r5, r1
 8012f5e:	4617      	mov	r7, r2
	if(allow_unsafe_access) {
 8012f60:	b11b      	cbz	r3, 8012f6a <_ZN10FileSystem6accessEPmm10AccessType+0x1c>
		return length; // Bypass software protection mechanism
 8012f62:	4610      	mov	r0, r2
}
 8012f64:	b005      	add	sp, #20
 8012f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   uint32_t internal_address = 1 + (*address - 1) % block_size;
 8012f6a:	680b      	ldr	r3, [r1, #0]
 8012f6c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8012f6e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8012f72:	fbbb f1f2 	udiv	r1, fp, r2
 8012f76:	fb02 bb11 	mls	fp, r2, r1, fp
 8012f7a:	f10b 0b01 	add.w	fp, fp, #1
   uint16_t block_id = (*address - internal_address) / block_size;
 8012f7e:	eba3 030b 	sub.w	r3, r3, fp
   if(internal_address < BLOCK_HEADER_SIZE) {
 8012f82:	f1bb 0f0f 	cmp.w	fp, #15
   uint16_t block_id = (*address - internal_address) / block_size;
 8012f86:	fbb3 f8f2 	udiv	r8, r3, r2
 8012f8a:	fa1f fa88 	uxth.w	sl, r8
   if(internal_address < BLOCK_HEADER_SIZE) {
 8012f8e:	d829      	bhi.n	8012fe4 <_ZN10FileSystem6accessEPmm10AccessType+0x96>
      *address += BLOCK_HEADER_SIZE - internal_address;
 8012f90:	3310      	adds	r3, #16
 8012f92:	602b      	str	r3, [r5, #0]
   uint32_t max_length = block_size;
 8012f94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   if(access_type == READ && *address >= block_size * PROTECTED_BLOCKS) {
 8012f96:	b93e      	cbnz	r6, 8012fa8 <_ZN10FileSystem6accessEPmm10AccessType+0x5a>
 8012f98:	682b      	ldr	r3, [r5, #0]
 8012f9a:	ebb3 0fc0 	cmp.w	r3, r0, lsl #3
 8012f9e:	d303      	bcc.n	8012fa8 <_ZN10FileSystem6accessEPmm10AccessType+0x5a>
	   max_length = computeLength(block_id);
 8012fa0:	4651      	mov	r1, sl
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f7ff fd47 	bl	8012a36 <_ZN10FileSystem13computeLengthEt>
   if(internal_address + length > max_length) {
 8012fa8:	eb0b 0307 	add.w	r3, fp, r7
 8012fac:	4283      	cmp	r3, r0
   if(internal_address != block_size && new_length == 0) { // Goto next block
 8012fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
	   new_length = max_length - internal_address; // Readable/Writable length correction
 8012fb0:	bf8c      	ite	hi
 8012fb2:	eba0 090b 	subhi.w	r9, r0, fp
   uint32_t new_length = length;
 8012fb6:	46b9      	movls	r9, r7
   if(internal_address != block_size && new_length == 0) { // Goto next block
 8012fb8:	455b      	cmp	r3, fp
 8012fba:	d058      	beq.n	801306e <_ZN10FileSystem6accessEPmm10AccessType+0x120>
 8012fbc:	f1b9 0f00 	cmp.w	r9, #0
 8012fc0:	d155      	bne.n	801306e <_ZN10FileSystem6accessEPmm10AccessType+0x120>
	   *address = (block_id + 1) * block_size;
 8012fc2:	fa1f f888 	uxth.w	r8, r8
	   return access(address, length, access_type);
 8012fc6:	463a      	mov	r2, r7
 8012fc8:	4629      	mov	r1, r5
 8012fca:	4620      	mov	r0, r4
	   *address = (block_id + 1) * block_size;
 8012fcc:	fb08 3303 	mla	r3, r8, r3, r3
 8012fd0:	602b      	str	r3, [r5, #0]
	   return access(address, length, access_type);
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8012fd8:	4633      	mov	r3, r6
 8012fda:	46f4      	mov	ip, lr
}
 8012fdc:	b005      	add	sp, #20
 8012fde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	   return access(address, length, access_type);
 8012fe2:	4760      	bx	ip
   } else if(internal_address == block_size) {
 8012fe4:	455a      	cmp	r2, fp
 8012fe6:	d1d5      	bne.n	8012f94 <_ZN10FileSystem6accessEPmm10AccessType+0x46>
      uint16_t successor_block = data_blocks[block_id].successor;
 8012fe8:	fa1f f988 	uxth.w	r9, r8
 8012fec:	eb00 0349 	add.w	r3, r0, r9, lsl #1
 8012ff0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012ff4:	8a59      	ldrh	r1, [r3, #18]
 8012ff6:	9300      	str	r3, [sp, #0]
      if(!successor_block) {
 8012ff8:	bb91      	cbnz	r1, 8013060 <_ZN10FileSystem6accessEPmm10AccessType+0x112>
         switch(access_type) {
 8012ffa:	2e01      	cmp	r6, #1
 8012ffc:	d141      	bne.n	8013082 <_ZN10FileSystem6accessEPmm10AccessType+0x134>
			read(block_id * block_size + 4, buffer, 2); // Read the file identifier
 8012ffe:	6803      	ldr	r3, [r0, #0]
 8013000:	fb09 f102 	mul.w	r1, r9, r2
			FileType file_type = (FileType) (partition_table[block_id] >> 4);
 8013004:	44a1      	add	r9, r4
			read(block_id * block_size + 4, buffer, 2); // Read the file identifier
 8013006:	aa03      	add	r2, sp, #12
 8013008:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801300c:	3104      	adds	r1, #4
 801300e:	2302      	movs	r3, #2
 8013010:	47d8      	blx	fp
			FileType file_type = (FileType) (partition_table[block_id] >> 4);
 8013012:	f899 1030 	ldrb.w	r1, [r9, #48]	; 0x30
 8013016:	f8bd b00c 	ldrh.w	fp, [sp, #12]
			uint16_t new_block_id = alloc(file_type); // Allocate a new block
 801301a:	4620      	mov	r0, r4
 801301c:	0909      	lsrs	r1, r1, #4
 801301e:	f7ff fef2 	bl	8012e06 <_ZN10FileSystem5allocE8FileType>
			writeHeader(new_block_id, file_id, block_id);
 8013022:	465a      	mov	r2, fp
			uint16_t new_block_id = alloc(file_type); // Allocate a new block
 8013024:	4601      	mov	r1, r0
			writeHeader(new_block_id, file_id, block_id);
 8013026:	4653      	mov	r3, sl
 8013028:	9001      	str	r0, [sp, #4]
 801302a:	4620      	mov	r0, r4
 801302c:	f7ff fe9e 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
			file->used_blocks += 1;
 8013030:	f244 0010 	movw	r0, #16400	; 0x4010
 8013034:	eb04 134b 	add.w	r3, r4, fp, lsl #5
			file->last_block = new_block_id;
 8013038:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
 801303c:	9901      	ldr	r1, [sp, #4]
			file->length += block_size;
 801303e:	f244 0c0c 	movw	ip, #16396	; 0x400c
			file->used_blocks += 1;
 8013042:	5a1a      	ldrh	r2, [r3, r0]
			file->last_block = new_block_id;
 8013044:	eb04 1b4b 	add.w	fp, r4, fp, lsl #5
			file->used_blocks += 1;
 8013048:	3201      	adds	r2, #1
 801304a:	521a      	strh	r2, [r3, r0]
			file->last_block = new_block_id;
 801304c:	f8ab 100a 	strh.w	r1, [fp, #10]
			file->length += block_size;
 8013050:	f853 200c 	ldr.w	r2, [r3, ip]
 8013054:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013056:	4402      	add	r2, r0
 8013058:	f843 200c 	str.w	r2, [r3, ip]
			data_blocks[block_id].successor = new_block_id;
 801305c:	9b00      	ldr	r3, [sp, #0]
 801305e:	8259      	strh	r1, [r3, #18]
      *address = successor_block * block_size + BLOCK_HEADER_SIZE;
 8013060:	6a60      	ldr	r0, [r4, #36]	; 0x24
      internal_address = BLOCK_HEADER_SIZE;
 8013062:	f04f 0b10 	mov.w	fp, #16
      *address = successor_block * block_size + BLOCK_HEADER_SIZE;
 8013066:	4348      	muls	r0, r1
 8013068:	3010      	adds	r0, #16
 801306a:	6028      	str	r0, [r5, #0]
      internal_address = BLOCK_HEADER_SIZE;
 801306c:	e792      	b.n	8012f94 <_ZN10FileSystem6accessEPmm10AccessType+0x46>
   if(access_type == WRITE) {
 801306e:	2e01      	cmp	r6, #1
 8013070:	d105      	bne.n	801307e <_ZN10FileSystem6accessEPmm10AccessType+0x130>
	   updateUsageTable(*address, *address + new_length - 1);
 8013072:	6829      	ldr	r1, [r5, #0]
 8013074:	4620      	mov	r0, r4
 8013076:	1e4a      	subs	r2, r1, #1
 8013078:	444a      	add	r2, r9
 801307a:	f7ff fe0b 	bl	8012c94 <_ZN10FileSystem16updateUsageTableEmm>
   return new_length;
 801307e:	4648      	mov	r0, r9
 8013080:	e770      	b.n	8012f64 <_ZN10FileSystem6accessEPmm10AccessType+0x16>
            return -1; // End of file
 8013082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013086:	e76d      	b.n	8012f64 <_ZN10FileSystem6accessEPmm10AccessType+0x16>

08013088 <_Z13filename_copyPKcPc>:


#include "File.h"


void filename_copy(const char* source, char* target) {
 8013088:	b410      	push	{r4}
 801308a:	2300      	movs	r3, #0
 801308c:	460c      	mov	r4, r1
	uint8_t i;

   for(i = 0; i < 16; i++) {
		if(source[i] != '\0') {
 801308e:	5cc1      	ldrb	r1, [r0, r3]
 8013090:	b2da      	uxtb	r2, r3
 8013092:	b939      	cbnz	r1, 80130a4 <_Z13filename_copyPKcPc+0x1c>
			break;
		}
	}

   while(i < 16) {
      target[i++] = '\0';
 8013094:	f1c2 0210 	rsb	r2, r2, #16
 8013098:	18e0      	adds	r0, r4, r3
   }
}
 801309a:	f85d 4b04 	ldr.w	r4, [sp], #4
      target[i++] = '\0';
 801309e:	b2d2      	uxtb	r2, r2
 80130a0:	f003 b876 	b.w	8016190 <memset>
			target[i] = source[i];
 80130a4:	54e1      	strb	r1, [r4, r3]
   for(i = 0; i < 16; i++) {
 80130a6:	3301      	adds	r3, #1
 80130a8:	2b10      	cmp	r3, #16
 80130aa:	d1f0      	bne.n	801308e <_Z13filename_copyPKcPc+0x6>
}
 80130ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130b0:	4770      	bx	lr

080130b2 <_Z15filename_equalsPKcS0_>:

bool filename_equals(const char* first, const char* second) {
	for(uint8_t i = 0; i < 16; i++) {
 80130b2:	1e43      	subs	r3, r0, #1
 80130b4:	3901      	subs	r1, #1
 80130b6:	300f      	adds	r0, #15
bool filename_equals(const char* first, const char* second) {
 80130b8:	b510      	push	{r4, lr}
		if(first[i] != second[i]) {
 80130ba:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80130be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80130c2:	4294      	cmp	r4, r2
 80130c4:	d103      	bne.n	80130ce <_Z15filename_equalsPKcS0_+0x1c>
	for(uint8_t i = 0; i < 16; i++) {
 80130c6:	4283      	cmp	r3, r0
 80130c8:	d1f7      	bne.n	80130ba <_Z15filename_equalsPKcS0_+0x8>
			return false;
		}
	}

	return true;
 80130ca:	2001      	movs	r0, #1
}
 80130cc:	bd10      	pop	{r4, pc}
			return false;
 80130ce:	2000      	movs	r0, #0
 80130d0:	e7fc      	b.n	80130cc <_Z15filename_equalsPKcS0_+0x1a>

080130d2 <_Z13hash_filenamePKc>:


uint32_t hash_filename(const char* name) {
	uint32_t hash = 13;

	for(uint8_t i = 0; i < 16; i++) {
 80130d2:	1e42      	subs	r2, r0, #1
 80130d4:	f100 030f 	add.w	r3, r0, #15
	uint32_t hash = 13;
 80130d8:	200d      	movs	r0, #13
	   if(name[i] != '\0') {
 80130da:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80130de:	b121      	cbz	r1, 80130ea <_Z13hash_filenamePKc+0x18>
         hash = 31 * hash + name[i]; // Java JDK8 String.hashCode() implementation
 80130e0:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
	for(uint8_t i = 0; i < 16; i++) {
 80130e4:	429a      	cmp	r2, r3
         hash = 31 * hash + name[i]; // Java JDK8 String.hashCode() implementation
 80130e6:	4408      	add	r0, r1
	for(uint8_t i = 0; i < 16; i++) {
 80130e8:	d1f7      	bne.n	80130da <_Z13hash_filenamePKc+0x8>
	      break;
	   }
	}

	return hash;
}
 80130ea:	4770      	bx	lr

080130ec <_ZN10FileSystem4readEmPhm>:
	}

	return delta < CORRUPTION_THRESHOLD;
}

void FileSystem::read(uint32_t address, uint8_t* buffer, uint32_t length) {
 80130ec:	b410      	push	{r4}
 80130ee:	4604      	mov	r4, r0
 80130f0:	4608      	mov	r0, r1
 80130f2:	4611      	mov	r1, r2
	read_func(address, buffer, length);
 80130f4:	461a      	mov	r2, r3
 80130f6:	6864      	ldr	r4, [r4, #4]
 80130f8:	4623      	mov	r3, r4
}
 80130fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	read_func(address, buffer, length);
 80130fe:	4718      	bx	r3

08013100 <_ZN10FileSystem5writeEmPhm>:

void FileSystem::write(uint32_t address, uint8_t* buffer, uint32_t length) {
 8013100:	b410      	push	{r4}
 8013102:	4604      	mov	r4, r0
 8013104:	4608      	mov	r0, r1
 8013106:	4611      	mov	r1, r2
	write_func(address, buffer, length);
 8013108:	461a      	mov	r2, r3
 801310a:	68a4      	ldr	r4, [r4, #8]
 801310c:	4623      	mov	r3, r4
}
 801310e:	f85d 4b04 	ldr.w	r4, [sp], #4
	write_func(address, buffer, length);
 8013112:	4718      	bx	r3

08013114 <_ZL8__no_logPKc>:

uint32_t FileSystem::getTotalUsedBlocks() {
	return total_used_blocks;
}

static void __no_log(const char* _) {}
 8013114:	4770      	bx	lr

08013116 <_ZN10FileSystemD1Ev>:


typedef enum StreamMode { OVERWRITE, APPEND } StreamMode;


class FileSystem : public IO {
 8013116:	4770      	bx	lr

08013118 <_ZN10FileSystemD0Ev>:
 8013118:	b510      	push	{r4, lr}
 801311a:	4604      	mov	r4, r0
 801311c:	f244 11f4 	movw	r1, #16884	; 0x41f4
 8013120:	f002 fabe 	bl	80156a0 <_ZdlPvj>
 8013124:	4620      	mov	r0, r4
 8013126:	bd10      	pop	{r4, pc}

08013128 <_ZN10FileSystem5flushEv>:
	if(mounted && partition_table_modified) {
 8013128:	7e83      	ldrb	r3, [r0, #26]
void FileSystem::flush() {
 801312a:	b570      	push	{r4, r5, r6, lr}
 801312c:	4604      	mov	r4, r0
 801312e:	b08c      	sub	sp, #48	; 0x30
	if(mounted && partition_table_modified) {
 8013130:	2b00      	cmp	r3, #0
 8013132:	d052      	beq.n	80131da <_ZN10FileSystem5flushEv+0xb2>
 8013134:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
 8013138:	7c2b      	ldrb	r3, [r5, #16]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d04d      	beq.n	80131da <_ZN10FileSystem5flushEv+0xb2>
		log("Flushing partition table...");
 801313e:	6943      	ldr	r3, [r0, #20]
 8013140:	4827      	ldr	r0, [pc, #156]	; (80131e0 <_ZN10FileSystem5flushEv+0xb8>)
 8013142:	4798      	blx	r3
		partition_table_modified = false;
 8013144:	2300      	movs	r3, #0
 8013146:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
 801314a:	742b      	strb	r3, [r5, #16]
		for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 801314c:	f104 0530 	add.w	r5, r4, #48	; 0x30
		   reverse_partition_table[i] = ~partition_table[i];
 8013150:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013154:	43db      	mvns	r3, r3
		for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 8013156:	4295      	cmp	r5, r2
		   reverse_partition_table[i] = ~partition_table[i];
 8013158:	f885 3fef 	strb.w	r3, [r5, #4079]	; 0xfef
		for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 801315c:	d1f8      	bne.n	8013150 <_ZN10FileSystem5flushEv+0x28>
		uint32_t master_base = getBaseAddress(1);
 801315e:	2101      	movs	r1, #1
 8013160:	4620      	mov	r0, r4
 8013162:	f7ff fd75 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
		uint32_t aux_base = getBaseAddress(2);
 8013166:	2102      	movs	r1, #2
		uint32_t master_base = getBaseAddress(1);
 8013168:	9001      	str	r0, [sp, #4]
		uint32_t aux_base = getBaseAddress(2);
 801316a:	4620      	mov	r0, r4
 801316c:	f7ff fd70 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
 8013170:	4606      	mov	r6, r0
		Stream master_stream(this, master_base, RAW);
 8013172:	2301      	movs	r3, #1
 8013174:	9a01      	ldr	r2, [sp, #4]
 8013176:	4621      	mov	r1, r4
 8013178:	a802      	add	r0, sp, #8
 801317a:	f000 fb95 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
		Stream aux_stream(this, aux_base, RAW);
 801317e:	4632      	mov	r2, r6
 8013180:	4621      	mov	r1, r4
 8013182:	2301      	movs	r3, #1
 8013184:	a807      	add	r0, sp, #28
 8013186:	f000 fb8f 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
		erase_block_func(block_size); // Erase the master partition block
 801318a:	68e3      	ldr	r3, [r4, #12]
 801318c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801318e:	4798      	blx	r3
		master_stream.write(reverse_partition_table, NUM_BLOCKS);
 8013190:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8013194:	4629      	mov	r1, r5
 8013196:	a802      	add	r0, sp, #8
 8013198:	f000 fbe3 	bl	8013962 <_ZN6Stream5writeEPhm>
		master_stream.close();
 801319c:	a802      	add	r0, sp, #8
 801319e:	f000 fb8b 	bl	80138b8 <_ZN6Stream5closeEv>
		writeHeader(1, 0, 0);
 80131a2:	2300      	movs	r3, #0
 80131a4:	2101      	movs	r1, #1
 80131a6:	4620      	mov	r0, r4
 80131a8:	461a      	mov	r2, r3
 80131aa:	f7ff fddf 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
		erase_block_func(2*block_size); // Erase the master partition block
 80131ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80131b0:	68e3      	ldr	r3, [r4, #12]
 80131b2:	0040      	lsls	r0, r0, #1
 80131b4:	4798      	blx	r3
		aux_stream.write(reverse_partition_table, NUM_BLOCKS);
 80131b6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80131ba:	4629      	mov	r1, r5
 80131bc:	a807      	add	r0, sp, #28
 80131be:	f000 fbd0 	bl	8013962 <_ZN6Stream5writeEPhm>
		aux_stream.close();
 80131c2:	a807      	add	r0, sp, #28
 80131c4:	f000 fb78 	bl	80138b8 <_ZN6Stream5closeEv>
		writeHeader(2, 0, 0);
 80131c8:	2300      	movs	r3, #0
 80131ca:	4620      	mov	r0, r4
 80131cc:	2102      	movs	r1, #2
 80131ce:	461a      	mov	r2, r3
 80131d0:	f7ff fdcc 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
		log("Partition table flushed.");
 80131d4:	6963      	ldr	r3, [r4, #20]
 80131d6:	4803      	ldr	r0, [pc, #12]	; (80131e4 <_ZN10FileSystem5flushEv+0xbc>)
 80131d8:	4798      	blx	r3
}
 80131da:	b00c      	add	sp, #48	; 0x30
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	bf00      	nop
 80131e0:	0801d2c5 	.word	0x0801d2c5
 80131e4:	0801d2e1 	.word	0x0801d2e1

080131e8 <_ZN10FileSystemC1EPKcmm>:
FileSystem::FileSystem(const char *id, uint32_t capacity, uint32_t block_size) : IO() {
 80131e8:	b538      	push	{r3, r4, r5, lr}
 80131ea:	4604      	mov	r4, r0
 80131ec:	4822      	ldr	r0, [pc, #136]	; (8013278 <_ZN10FileSystemC1EPKcmm+0x90>)
	if(block_size < NUM_BLOCKS) {
 80131ee:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
FileSystem::FileSystem(const char *id, uint32_t capacity, uint32_t block_size) : IO() {
 80131f2:	6020      	str	r0, [r4, #0]
	this->partition_table_modified = false;
 80131f4:	f504 5000 	add.w	r0, r4, #8192	; 0x2000
	this->block_size = block_size;
 80131f8:	6263      	str	r3, [r4, #36]	; 0x24
	this->addressable_space = capacity;
 80131fa:	e9c4 1207 	strd	r1, r2, [r4, #28]
	this->total_used_blocks = 0;
 80131fe:	f04f 0100 	mov.w	r1, #0
 8013202:	62e1      	str	r1, [r4, #44]	; 0x2c
	this->partition_table_modified = false;
 8013204:	7401      	strb	r1, [r0, #16]
	if(block_size < NUM_BLOCKS) {
 8013206:	d22f      	bcs.n	8013268 <_ZN10FileSystemC1EPKcmm+0x80>
		this->device_configured = false;
 8013208:	2300      	movs	r3, #0
	this->io_bound = false;
 801320a:	2500      	movs	r5, #0
		this->device_configured = true;
 801320c:	7623      	strb	r3, [r4, #24]
	this->log = &__no_log;
 801320e:	4b1b      	ldr	r3, [pc, #108]	; (801327c <_ZN10FileSystemC1EPKcmm+0x94>)
		partition_table[i] = 0;
 8013210:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 8013214:	4629      	mov	r1, r5
 8013216:	f104 0030 	add.w	r0, r4, #48	; 0x30
	this->log = &__no_log;
 801321a:	6163      	str	r3, [r4, #20]
	this->io_bound = false;
 801321c:	7665      	strb	r5, [r4, #25]
	this->mounted = false;
 801321e:	8365      	strh	r5, [r4, #26]
	this->allow_unsafe_access = false;
 8013220:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	this->write_func = nullptr;
 8013224:	e9c4 5501 	strd	r5, r5, [r4, #4]
	this->erase_sector_func = nullptr;
 8013228:	e9c4 5503 	strd	r5, r5, [r4, #12]
		partition_table[i] = 0;
 801322c:	f002 ffb0 	bl	8016190 <memset>
		data_blocks[i].successor = 0;
 8013230:	f504 5000 	add.w	r0, r4, #8192	; 0x2000
 8013234:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 8013238:	4629      	mov	r1, r5
 801323a:	3012      	adds	r0, #18
 801323c:	f002 ffa8 	bl	8016190 <memset>
 8013240:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8013244:	f504 4284 	add.w	r2, r4, #16896	; 0x4200
 8013248:	3304      	adds	r3, #4
 801324a:	3204      	adds	r2, #4
		files[i].first_block = 0;
 801324c:	809d      	strh	r5, [r3, #4]
	for(uint16_t i = 0; i < NUM_FILES; i++) {
 801324e:	3320      	adds	r3, #32
		files[i].last_block = 0;
 8013250:	f823 5c1a 	strh.w	r5, [r3, #-26]
		files[i].hash = 0;
 8013254:	f843 5c20 	str.w	r5, [r3, #-32]
		files[i].length = 0;
 8013258:	f843 5c18 	str.w	r5, [r3, #-24]
		files[i].used_blocks = 0;
 801325c:	f823 5c14 	strh.w	r5, [r3, #-20]
	for(uint16_t i = 0; i < NUM_FILES; i++) {
 8013260:	429a      	cmp	r2, r3
 8013262:	d1f3      	bne.n	801324c <_ZN10FileSystemC1EPKcmm+0x64>
}
 8013264:	4620      	mov	r0, r4
 8013266:	bd38      	pop	{r3, r4, r5, pc}
	} else if(block_size * NUM_BLOCKS > capacity) {
 8013268:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 801326c:	434b      	muls	r3, r1
 801326e:	4293      	cmp	r3, r2
 8013270:	d8ca      	bhi.n	8013208 <_ZN10FileSystemC1EPKcmm+0x20>
		this->device_configured = true;
 8013272:	2301      	movs	r3, #1
 8013274:	e7c9      	b.n	801320a <_ZN10FileSystemC1EPKcmm+0x22>
 8013276:	bf00      	nop
 8013278:	0801d5ac 	.word	0x0801d5ac
 801327c:	08013115 	.word	0x08013115

08013280 <_ZN10FileSystem9setLoggerEPFvPKcE>:
	this->debug = true;
 8013280:	2301      	movs	r3, #1
	this->log = logger;
 8013282:	6141      	str	r1, [r0, #20]
	this->debug = true;
 8013284:	76c3      	strb	r3, [r0, #27]
	log("FileSystem log initialised.");
 8013286:	4801      	ldr	r0, [pc, #4]	; (801328c <_ZN10FileSystem9setLoggerEPFvPKcE+0xc>)
 8013288:	4708      	bx	r1
 801328a:	bf00      	nop
 801328c:	0801d2fa 	.word	0x0801d2fa

08013290 <_ZN10FileSystem4bindEPFvmPhmES2_PFvmE>:
	this->erase_block_func = erase_block;
 8013290:	60c3      	str	r3, [r0, #12]
	this->io_bound = true;
 8013292:	2301      	movs	r3, #1
 8013294:	7643      	strb	r3, [r0, #25]
   if(!this->debug) {
 8013296:	7ec3      	ldrb	r3, [r0, #27]
	this->write_func = write;
 8013298:	e9c0 1201 	strd	r1, r2, [r0, #4]
   if(!this->debug) {
 801329c:	b90b      	cbnz	r3, 80132a2 <_ZN10FileSystem4bindEPFvmPhmES2_PFvmE+0x12>
	   this->log = &__no_log;
 801329e:	4b01      	ldr	r3, [pc, #4]	; (80132a4 <_ZN10FileSystem4bindEPFvmPhmES2_PFvmE+0x14>)
 80132a0:	6143      	str	r3, [r0, #20]
}
 80132a2:	4770      	bx	lr
 80132a4:	08013115 	.word	0x08013115

080132a8 <_ZN10FileSystem6formatEv>:
void FileSystem::format() {
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	4604      	mov	r4, r0
 80132ac:	b08a      	sub	sp, #40	; 0x28
	log("Formatting FileSystem...");
 80132ae:	6943      	ldr	r3, [r0, #20]
 80132b0:	4845      	ldr	r0, [pc, #276]	; (80133c8 <_ZN10FileSystem6formatEv+0x120>)
 80132b2:	4798      	blx	r3
	uint32_t core_base = getBaseAddress(0);
 80132b4:	2100      	movs	r1, #0
 80132b6:	4620      	mov	r0, r4
 80132b8:	f7ff fcca 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
	uint32_t master_base = getBaseAddress(1);
 80132bc:	2101      	movs	r1, #1
	uint32_t core_base = getBaseAddress(0);
 80132be:	4606      	mov	r6, r0
	uint32_t master_base = getBaseAddress(1);
 80132c0:	4620      	mov	r0, r4
 80132c2:	f7ff fcc5 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
 80132c6:	4605      	mov	r5, r0
	erase_block_func(core_base);   // Core block
 80132c8:	68e3      	ldr	r3, [r4, #12]
 80132ca:	4630      	mov	r0, r6
 80132cc:	4798      	blx	r3
	erase_block_func(master_base); // Master partition block
 80132ce:	68e3      	ldr	r3, [r4, #12]
 80132d0:	4628      	mov	r0, r5
 80132d2:	4798      	blx	r3
	Stream core_stream(this, core_base, RAW);
 80132d4:	2301      	movs	r3, #1
 80132d6:	4632      	mov	r2, r6
 80132d8:	4621      	mov	r1, r4
 80132da:	4668      	mov	r0, sp
 80132dc:	f000 fae4 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
	Stream master_stream(this, master_base, RAW);
 80132e0:	2301      	movs	r3, #1
 80132e2:	462a      	mov	r2, r5
 80132e4:	4621      	mov	r1, r4
 80132e6:	a805      	add	r0, sp, #20
 80132e8:	f000 fade 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
	master_stream.write8(~0b00001110); // Core block (used as internal relative clock)
 80132ec:	21f1      	movs	r1, #241	; 0xf1
 80132ee:	a805      	add	r0, sp, #20
 80132f0:	f000 fb62 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Master partition block
 80132f4:	21f0      	movs	r1, #240	; 0xf0
 80132f6:	a805      	add	r0, sp, #20
 80132f8:	f000 fb5e 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Recovery partition block
 80132fc:	21f0      	movs	r1, #240	; 0xf0
 80132fe:	a805      	add	r0, sp, #20
 8013300:	f000 fb5a 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Backup partition block 1
 8013304:	21f0      	movs	r1, #240	; 0xf0
 8013306:	a805      	add	r0, sp, #20
 8013308:	f000 fb56 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Backup partition block 2
 801330c:	21f0      	movs	r1, #240	; 0xf0
 801330e:	a805      	add	r0, sp, #20
 8013310:	f000 fb52 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Backup partition block 3
 8013314:	21f0      	movs	r1, #240	; 0xf0
 8013316:	a805      	add	r0, sp, #20
 8013318:	f000 fb4e 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Backup partition block 4
 801331c:	21f0      	movs	r1, #240	; 0xf0
 801331e:	a805      	add	r0, sp, #20
 8013320:	f000 fb4a 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.write8(~0b00001111); // Journal block
 8013324:	21f0      	movs	r1, #240	; 0xf0
 8013326:	a805      	add	r0, sp, #20
 8013328:	f000 fb46 	bl	80139b8 <_ZN6Stream6write8Eh>
	master_stream.close();
 801332c:	a805      	add	r0, sp, #20
 801332e:	f000 fac3 	bl	80138b8 <_ZN6Stream5closeEv>
	writeHeader(0, 0, 0);
 8013332:	2300      	movs	r3, #0
 8013334:	4620      	mov	r0, r4
 8013336:	461a      	mov	r2, r3
 8013338:	4619      	mov	r1, r3
 801333a:	f7ff fd17 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(1, 0, 0);
 801333e:	2300      	movs	r3, #0
 8013340:	2101      	movs	r1, #1
 8013342:	4620      	mov	r0, r4
 8013344:	461a      	mov	r2, r3
 8013346:	f7ff fd11 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(2, 0, 0);
 801334a:	2300      	movs	r3, #0
 801334c:	2102      	movs	r1, #2
 801334e:	4620      	mov	r0, r4
 8013350:	461a      	mov	r2, r3
 8013352:	f7ff fd0b 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(3, 0, 0);
 8013356:	2300      	movs	r3, #0
 8013358:	2103      	movs	r1, #3
 801335a:	4620      	mov	r0, r4
 801335c:	461a      	mov	r2, r3
 801335e:	f7ff fd05 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(4, 0, 0);
 8013362:	2300      	movs	r3, #0
 8013364:	2104      	movs	r1, #4
 8013366:	4620      	mov	r0, r4
 8013368:	461a      	mov	r2, r3
 801336a:	f7ff fcff 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(5, 0, 0);
 801336e:	2300      	movs	r3, #0
 8013370:	2105      	movs	r1, #5
 8013372:	4620      	mov	r0, r4
 8013374:	461a      	mov	r2, r3
 8013376:	f7ff fcf9 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(6, 0, 0);
 801337a:	2300      	movs	r3, #0
 801337c:	2106      	movs	r1, #6
 801337e:	4620      	mov	r0, r4
 8013380:	461a      	mov	r2, r3
 8013382:	f7ff fcf3 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	writeHeader(7, 0, 0);
 8013386:	2300      	movs	r3, #0
 8013388:	2107      	movs	r1, #7
 801338a:	4620      	mov	r0, r4
 801338c:	461a      	mov	r2, r3
 801338e:	f7ff fced 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
	uint64_t periodic = 0;
 8013392:	2200      	movs	r2, #0
	writeHeader(7, 0, 0);
 8013394:	210a      	movs	r1, #10
	uint64_t periodic = 0;
 8013396:	4613      	mov	r3, r2
		periodic <<= period;
 8013398:	01db      	lsls	r3, r3, #7
	for(uint8_t i = 0; i < 64; i += period) {
 801339a:	3901      	subs	r1, #1
		periodic <<= period;
 801339c:	ea43 6352 	orr.w	r3, r3, r2, lsr #25
	for(uint8_t i = 0; i < 64; i += period) {
 80133a0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
		periodic <<= period;
 80133a4:	ea4f 12c2 	mov.w	r2, r2, lsl #7
		periodic |= period_generator;
 80133a8:	f042 0207 	orr.w	r2, r2, #7
	for(uint8_t i = 0; i < 64; i += period) {
 80133ac:	d1f4      	bne.n	8013398 <_ZN10FileSystem6formatEv+0xf0>
	core_stream.write64(magic);
 80133ae:	4668      	mov	r0, sp
 80133b0:	f000 fb21 	bl	80139f6 <_ZN6Stream7write64Ey>
	core_stream.close();
 80133b4:	4668      	mov	r0, sp
 80133b6:	f000 fa7f 	bl	80138b8 <_ZN6Stream5closeEv>
	total_used_blocks = 8;
 80133ba:	2308      	movs	r3, #8
	log("FileSystem formatted.");
 80133bc:	4803      	ldr	r0, [pc, #12]	; (80133cc <_ZN10FileSystem6formatEv+0x124>)
	total_used_blocks = 8;
 80133be:	62e3      	str	r3, [r4, #44]	; 0x2c
	log("FileSystem formatted.");
 80133c0:	6963      	ldr	r3, [r4, #20]
 80133c2:	4798      	blx	r3
}
 80133c4:	b00a      	add	sp, #40	; 0x28
 80133c6:	bd70      	pop	{r4, r5, r6, pc}
 80133c8:	0801d316 	.word	0x0801d316
 80133cc:	0801d32f 	.word	0x0801d32f

080133d0 <_ZN10FileSystem5mountEv>:
void FileSystem::mount() {
 80133d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d4:	4604      	mov	r4, r0
	log("Mounting filesystem...");
 80133d6:	6943      	ldr	r3, [r0, #20]
 80133d8:	4893      	ldr	r0, [pc, #588]	; (8013628 <_ZN10FileSystem5mountEv+0x258>)
void FileSystem::mount() {
 80133da:	ed2d 8b02 	vpush	{d8}
 80133de:	b08f      	sub	sp, #60	; 0x3c
	log("Mounting filesystem...");
 80133e0:	4798      	blx	r3
	if(this->mounted) {
 80133e2:	7ea7      	ldrb	r7, [r4, #26]
 80133e4:	b13f      	cbz	r7, 80133f6 <_ZN10FileSystem5mountEv+0x26>
		log("Error: FileSystem already mounted.");
 80133e6:	6963      	ldr	r3, [r4, #20]
 80133e8:	4890      	ldr	r0, [pc, #576]	; (801362c <_ZN10FileSystem5mountEv+0x25c>)
}
 80133ea:	b00f      	add	sp, #60	; 0x3c
 80133ec:	ecbd 8b02 	vpop	{d8}
 80133f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		log("Error: FileSystem already mounted.");
 80133f4:	4718      	bx	r3
	uint32_t core_base = getBaseAddress(0);
 80133f6:	4639      	mov	r1, r7
 80133f8:	4620      	mov	r0, r4
 80133fa:	f7ff fc29 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
	uint32_t master_base = getBaseAddress(1);
 80133fe:	2101      	movs	r1, #1
	uint32_t core_base = getBaseAddress(0);
 8013400:	9000      	str	r0, [sp, #0]
	uint32_t master_base = getBaseAddress(1);
 8013402:	4620      	mov	r0, r4
 8013404:	f7ff fc24 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
	uint32_t aux_base = getBaseAddress(2);
 8013408:	2102      	movs	r1, #2
	uint32_t master_base = getBaseAddress(1);
 801340a:	ee08 0a10 	vmov	s16, r0
	uint32_t aux_base = getBaseAddress(2);
 801340e:	4620      	mov	r0, r4
 8013410:	f7ff fc1e 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
	Stream core_stream(this, core_base, RAW);
 8013414:	2301      	movs	r3, #1
 8013416:	9a00      	ldr	r2, [sp, #0]
 8013418:	4621      	mov	r1, r4
	uint32_t aux_base = getBaseAddress(2);
 801341a:	ee08 0a90 	vmov	s17, r0
	Stream core_stream(this, core_base, RAW);
 801341e:	a804      	add	r0, sp, #16
 8013420:	f000 fa42 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
	uint64_t magic = core_stream.read64();
 8013424:	a804      	add	r0, sp, #16
 8013426:	f000 fa92 	bl	801394e <_ZN6Stream6read64Ev>
 801342a:	260a      	movs	r6, #10
 801342c:	4681      	mov	r9, r0
 801342e:	468a      	mov	sl, r1
	uint64_t periodic = 0;
 8013430:	463b      	mov	r3, r7
		periodic <<= period;
 8013432:	ea4f 18c3 	mov.w	r8, r3, lsl #7
	for(uint8_t i = 0; i < 64; i += period) {
 8013436:	3e01      	subs	r6, #1
		periodic <<= period;
 8013438:	ea48 6857 	orr.w	r8, r8, r7, lsr #25
	for(uint8_t i = 0; i < 64; i += period) {
 801343c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		periodic <<= period;
 8013440:	ea4f 17c7 	mov.w	r7, r7, lsl #7
		periodic |= period_generator;
 8013444:	4643      	mov	r3, r8
 8013446:	f047 0707 	orr.w	r7, r7, #7
	for(uint8_t i = 0; i < 64; i += period) {
 801344a:	d1f2      	bne.n	8013432 <_ZN10FileSystem5mountEv+0x62>
	for(i = 0; i < 64; i++) {
 801344c:	4635      	mov	r5, r6
	uint64_t filtered = 0;
 801344e:	4630      	mov	r0, r6
 8013450:	4631      	mov	r1, r6
		filtered <<= 1;
 8013452:	1803      	adds	r3, r0, r0
 8013454:	f1c5 0241 	rsb	r2, r5, #65	; 0x41
		weighted = 0;
 8013458:	f04f 0b00 	mov.w	fp, #0
 801345c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8013648 <_ZN10FileSystem5mountEv+0x278>
		filtered <<= 1;
 8013460:	9300      	str	r3, [sp, #0]
 8013462:	eb41 0301 	adc.w	r3, r1, r1
 8013466:	b2d2      	uxtb	r2, r2
		weighted = 0;
 8013468:	46de      	mov	lr, fp
		filtered <<= 1;
 801346a:	9301      	str	r3, [sp, #4]
		for(j = 0; j < 5; j++) {
 801346c:	f1c5 033c 	rsb	r3, r5, #60	; 0x3c
 8013470:	b2db      	uxtb	r3, r3
 8013472:	9303      	str	r3, [sp, #12]
			weighted += __gaussian_kernel[j] * (__signed_shift(testable_magic, 65 - i - j) & 0b1);
 8013474:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8013478:	9302      	str	r3, [sp, #8]
 801347a:	b253      	sxtb	r3, r2
	if(amount > 0) {
 801347c:	2b00      	cmp	r3, #0
 801347e:	f340 8084 	ble.w	801358a <_ZN10FileSystem5mountEv+0x1ba>
		return input >> amount;
 8013482:	f1c3 0020 	rsb	r0, r3, #32
 8013486:	f1b3 0120 	subs.w	r1, r3, #32
 801348a:	fa29 f303 	lsr.w	r3, r9, r3
 801348e:	fa0a f000 	lsl.w	r0, sl, r0
 8013492:	ea43 0300 	orr.w	r3, r3, r0
 8013496:	d402      	bmi.n	801349e <_ZN10FileSystem5mountEv+0xce>
 8013498:	fa4a f101 	asr.w	r1, sl, r1
 801349c:	430b      	orrs	r3, r1
			weighted += __gaussian_kernel[j] * (__signed_shift(testable_magic, 65 - i - j) & 0b1);
 801349e:	f003 0101 	and.w	r1, r3, #1
 80134a2:	9b02      	ldr	r3, [sp, #8]
		for(j = 0; j < 5; j++) {
 80134a4:	3a01      	subs	r2, #1
			weighted += __gaussian_kernel[j] * (__signed_shift(testable_magic, 65 - i - j) & 0b1);
 80134a6:	fba1 0103 	umull	r0, r1, r1, r3
		for(j = 0; j < 5; j++) {
 80134aa:	9b03      	ldr	r3, [sp, #12]
 80134ac:	b2d2      	uxtb	r2, r2
			weighted += __gaussian_kernel[j] * (__signed_shift(testable_magic, 65 - i - j) & 0b1);
 80134ae:	eb10 000b 	adds.w	r0, r0, fp
 80134b2:	eb4e 0101 	adc.w	r1, lr, r1
		for(j = 0; j < 5; j++) {
 80134b6:	429a      	cmp	r2, r3
			weighted += __gaussian_kernel[j] * (__signed_shift(testable_magic, 65 - i - j) & 0b1);
 80134b8:	4683      	mov	fp, r0
 80134ba:	468e      	mov	lr, r1
		for(j = 0; j < 5; j++) {
 80134bc:	d1da      	bne.n	8013474 <_ZN10FileSystem5mountEv+0xa4>
		if(i < 32) {
 80134be:	2d1f      	cmp	r5, #31
 80134c0:	d86b      	bhi.n	801359a <_ZN10FileSystem5mountEv+0x1ca>
	if(input <= start) {
 80134c2:	2d00      	cmp	r5, #0
 80134c4:	d067      	beq.n	8013596 <_ZN10FileSystem5mountEv+0x1c6>
		return input;
 80134c6:	2d01      	cmp	r5, #1
 80134c8:	bf14      	ite	ne
 80134ca:	2302      	movne	r3, #2
 80134cc:	2301      	moveq	r3, #1
			filtered |=  weighted / __gaussian_divider[__clamp(i, 0, 2)];
 80134ce:	4a58      	ldr	r2, [pc, #352]	; (8013630 <_ZN10FileSystem5mountEv+0x260>)
 80134d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80134d4:	2300      	movs	r3, #0
	for(i = 0; i < 64; i++) {
 80134d6:	3501      	adds	r5, #1
			filtered |= weighted / __gaussian_divider[__clamp(64 - i, 0, 2)];
 80134d8:	f7ed f926 	bl	8000728 <__aeabi_uldivmod>
 80134dc:	9b00      	ldr	r3, [sp, #0]
	for(i = 0; i < 64; i++) {
 80134de:	b2ed      	uxtb	r5, r5
			filtered |= weighted / __gaussian_divider[__clamp(64 - i, 0, 2)];
 80134e0:	4318      	orrs	r0, r3
 80134e2:	9b01      	ldr	r3, [sp, #4]
	for(i = 0; i < 64; i++) {
 80134e4:	2d40      	cmp	r5, #64	; 0x40
			filtered |= weighted / __gaussian_divider[__clamp(64 - i, 0, 2)];
 80134e6:	ea41 0103 	orr.w	r1, r1, r3
	for(i = 0; i < 64; i++) {
 80134ea:	d1b2      	bne.n	8013452 <_ZN10FileSystem5mountEv+0x82>
	filtered ^= hard_coded_magic;
 80134ec:	4078      	eors	r0, r7
 80134ee:	ea81 0108 	eor.w	r1, r1, r8
 80134f2:	2200      	movs	r2, #0
		delta += (filtered >> i) & 0b1;
 80134f4:	f1c2 0720 	rsb	r7, r2, #32
 80134f8:	f1a2 0520 	sub.w	r5, r2, #32
 80134fc:	fa20 f302 	lsr.w	r3, r0, r2
	for(uint8_t i = 0; i < 64; i++) {
 8013500:	3201      	adds	r2, #1
		delta += (filtered >> i) & 0b1;
 8013502:	fa01 f707 	lsl.w	r7, r1, r7
 8013506:	fa21 f505 	lsr.w	r5, r1, r5
	for(uint8_t i = 0; i < 64; i++) {
 801350a:	2a40      	cmp	r2, #64	; 0x40
		delta += (filtered >> i) & 0b1;
 801350c:	ea43 0307 	orr.w	r3, r3, r7
 8013510:	ea43 0305 	orr.w	r3, r3, r5
 8013514:	f003 0301 	and.w	r3, r3, #1
 8013518:	441e      	add	r6, r3
 801351a:	b2f6      	uxtb	r6, r6
	for(uint8_t i = 0; i < 64; i++) {
 801351c:	d1ea      	bne.n	80134f4 <_ZN10FileSystem5mountEv+0x124>
	if(__periodic_magic_match(MAGIC_PERIOD, magic)) {
 801351e:	2e03      	cmp	r6, #3
		log("Reading partition table...");
 8013520:	6963      	ldr	r3, [r4, #20]
	if(__periodic_magic_match(MAGIC_PERIOD, magic)) {
 8013522:	d877      	bhi.n	8013614 <_ZN10FileSystem5mountEv+0x244>
		log("Reading partition table...");
 8013524:	4843      	ldr	r0, [pc, #268]	; (8013634 <_ZN10FileSystem5mountEv+0x264>)
 8013526:	4798      	blx	r3
		if(checkHeader(1)) {
 8013528:	2101      	movs	r1, #1
 801352a:	4620      	mov	r0, r4
 801352c:	f7ff fb94 	bl	8012c58 <_ZN10FileSystem11checkHeaderEt>
 8013530:	2800      	cmp	r0, #0
 8013532:	d03d      	beq.n	80135b0 <_ZN10FileSystem5mountEv+0x1e0>
			master_stream.read(reverse_partition_table, NUM_BLOCKS);
 8013534:	f504 5581 	add.w	r5, r4, #4128	; 0x1020
			Stream master_stream(this, master_base, RAW);
 8013538:	2301      	movs	r3, #1
 801353a:	ee18 2a10 	vmov	r2, s16
 801353e:	4621      	mov	r1, r4
 8013540:	a809      	add	r0, sp, #36	; 0x24
 8013542:	f000 f9b1 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
			master_stream.read(reverse_partition_table, NUM_BLOCKS);
 8013546:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 801354a:	4629      	mov	r1, r5
 801354c:	a809      	add	r0, sp, #36	; 0x24
 801354e:	f000 f9ba 	bl	80138c6 <_ZN6Stream4readEPhm>
			master_stream.close();
 8013552:	a809      	add	r0, sp, #36	; 0x24
 8013554:	f000 f9b0 	bl	80138b8 <_ZN6Stream5closeEv>
			for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 8013558:	f104 0330 	add.w	r3, r4, #48	; 0x30
				partition_table[i] = ~reverse_partition_table[i];
 801355c:	f893 2ff0 	ldrb.w	r2, [r3, #4080]	; 0xff0
 8013560:	43d2      	mvns	r2, r2
 8013562:	f803 2b01 	strb.w	r2, [r3], #1
			for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 8013566:	429d      	cmp	r5, r3
 8013568:	d1f8      	bne.n	801355c <_ZN10FileSystem5mountEv+0x18c>
		initBlockManagement();
 801356a:	4620      	mov	r0, r4
 801356c:	f7ff fa9a 	bl	8012aa4 <_ZN10FileSystem19initBlockManagementEv>
		mounted = true;
 8013570:	2301      	movs	r3, #1
		log("Filesystem mounted.");
 8013572:	4831      	ldr	r0, [pc, #196]	; (8013638 <_ZN10FileSystem5mountEv+0x268>)
		mounted = true;
 8013574:	76a3      	strb	r3, [r4, #26]
		log("Filesystem mounted.");
 8013576:	6963      	ldr	r3, [r4, #20]
 8013578:	4798      	blx	r3
	core_stream.close();
 801357a:	a804      	add	r0, sp, #16
 801357c:	f000 f99c 	bl	80138b8 <_ZN6Stream5closeEv>
}
 8013580:	b00f      	add	sp, #60	; 0x3c
 8013582:	ecbd 8b02 	vpop	{d8}
 8013586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return input << (-amount);
 801358a:	bf16      	itet	ne
 801358c:	425b      	negne	r3, r3
		return input;
 801358e:	464b      	moveq	r3, r9
		return input << (-amount);
 8013590:	fa09 f303 	lslne.w	r3, r9, r3
 8013594:	e783      	b.n	801349e <_ZN10FileSystem5mountEv+0xce>
		return start;
 8013596:	462b      	mov	r3, r5
 8013598:	e799      	b.n	80134ce <_ZN10FileSystem5mountEv+0xfe>
	} else if(input >= end) {
 801359a:	f1c5 0340 	rsb	r3, r5, #64	; 0x40
			filtered |= weighted / __gaussian_divider[__clamp(64 - i, 0, 2)];
 801359e:	4a24      	ldr	r2, [pc, #144]	; (8013630 <_ZN10FileSystem5mountEv+0x260>)
 80135a0:	b2db      	uxtb	r3, r3
		return end;
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	bf18      	it	ne
 80135a6:	2302      	movne	r3, #2
			filtered |= weighted / __gaussian_divider[__clamp(64 - i, 0, 2)];
 80135a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80135ac:	2300      	movs	r3, #0
 80135ae:	e792      	b.n	80134d6 <_ZN10FileSystem5mountEv+0x106>
		} else if(checkHeader(2)) {
 80135b0:	2102      	movs	r1, #2
 80135b2:	4620      	mov	r0, r4
 80135b4:	f7ff fb50 	bl	8012c58 <_ZN10FileSystem11checkHeaderEt>
 80135b8:	6963      	ldr	r3, [r4, #20]
 80135ba:	b328      	cbz	r0, 8013608 <_ZN10FileSystem5mountEv+0x238>
			log("Primary partition table corrupted. Falling back to auxiliary partition table");
 80135bc:	481f      	ldr	r0, [pc, #124]	; (801363c <_ZN10FileSystem5mountEv+0x26c>)
			aux_stream.read(reverse_partition_table, NUM_BLOCKS);
 80135be:	f504 5581 	add.w	r5, r4, #4128	; 0x1020
			log("Primary partition table corrupted. Falling back to auxiliary partition table");
 80135c2:	4798      	blx	r3
			Stream aux_stream(this, aux_base, RAW);
 80135c4:	2301      	movs	r3, #1
 80135c6:	ee18 2a90 	vmov	r2, s17
 80135ca:	4621      	mov	r1, r4
 80135cc:	a809      	add	r0, sp, #36	; 0x24
 80135ce:	f000 f96b 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
			aux_stream.read(reverse_partition_table, NUM_BLOCKS);
 80135d2:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80135d6:	4629      	mov	r1, r5
 80135d8:	a809      	add	r0, sp, #36	; 0x24
 80135da:	f000 f974 	bl	80138c6 <_ZN6Stream4readEPhm>
			aux_stream.close();
 80135de:	a809      	add	r0, sp, #36	; 0x24
 80135e0:	f000 f96a 	bl	80138b8 <_ZN6Stream5closeEv>
			for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 80135e4:	f104 0330 	add.w	r3, r4, #48	; 0x30
				partition_table[i] = ~reverse_partition_table[i];
 80135e8:	f893 2ff0 	ldrb.w	r2, [r3, #4080]	; 0xff0
 80135ec:	43d2      	mvns	r2, r2
 80135ee:	f803 2b01 	strb.w	r2, [r3], #1
			for(uint32_t i = 0; i < NUM_BLOCKS; i++) {
 80135f2:	429d      	cmp	r5, r3
 80135f4:	d1f8      	bne.n	80135e8 <_ZN10FileSystem5mountEv+0x218>
			partition_table_modified = true;
 80135f6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80135fa:	2201      	movs	r2, #1
			flush();
 80135fc:	4620      	mov	r0, r4
			partition_table_modified = true;
 80135fe:	741a      	strb	r2, [r3, #16]
			flush();
 8013600:	6823      	ldr	r3, [r4, #0]
 8013602:	695b      	ldr	r3, [r3, #20]
 8013604:	4798      	blx	r3
 8013606:	e7b0      	b.n	801356a <_ZN10FileSystem5mountEv+0x19a>
			log("Partition tables corrupted. Formatting.");
 8013608:	480d      	ldr	r0, [pc, #52]	; (8013640 <_ZN10FileSystem5mountEv+0x270>)
 801360a:	4798      	blx	r3
			format();
 801360c:	4620      	mov	r0, r4
 801360e:	f7ff fe4b 	bl	80132a8 <_ZN10FileSystem6formatEv>
 8013612:	e7aa      	b.n	801356a <_ZN10FileSystem5mountEv+0x19a>
		log("Mounting filesystem for the first time or filesystem corrupted.");
 8013614:	480b      	ldr	r0, [pc, #44]	; (8013644 <_ZN10FileSystem5mountEv+0x274>)
 8013616:	4798      	blx	r3
		format();
 8013618:	4620      	mov	r0, r4
 801361a:	f7ff fe45 	bl	80132a8 <_ZN10FileSystem6formatEv>
		mount();
 801361e:	4620      	mov	r0, r4
 8013620:	f7ff fed6 	bl	80133d0 <_ZN10FileSystem5mountEv>
 8013624:	e7a9      	b.n	801357a <_ZN10FileSystem5mountEv+0x1aa>
 8013626:	bf00      	nop
 8013628:	0801d345 	.word	0x0801d345
 801362c:	0801d35c 	.word	0x0801d35c
 8013630:	0801d5ce 	.word	0x0801d5ce
 8013634:	0801d37f 	.word	0x0801d37f
 8013638:	0801d40f 	.word	0x0801d40f
 801363c:	0801d39a 	.word	0x0801d39a
 8013640:	0801d3e7 	.word	0x0801d3e7
 8013644:	0801d423 	.word	0x0801d423
 8013648:	0801d5c4 	.word	0x0801d5c4

0801364c <_ZN10FileSystem12checkMountedEv>:
	if(!mounted) {
 801364c:	7e83      	ldrb	r3, [r0, #26]
 801364e:	b913      	cbnz	r3, 8013656 <_ZN10FileSystem12checkMountedEv+0xa>
		log("Error: FileSystem not mounted");
 8013650:	6943      	ldr	r3, [r0, #20]
 8013652:	4801      	ldr	r0, [pc, #4]	; (8013658 <_ZN10FileSystem12checkMountedEv+0xc>)
 8013654:	4718      	bx	r3
}
 8013656:	4770      	bx	lr
 8013658:	0801d463 	.word	0x0801d463

0801365c <_ZN10FileSystem7newFileEPKc8FileType>:
File* FileSystem::newFile(const char* name, FileType type) {
 801365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013660:	4604      	mov	r4, r0
 8013662:	b087      	sub	sp, #28
 8013664:	460f      	mov	r7, r1
 8013666:	4692      	mov	sl, r2
	checkMounted();
 8013668:	f7ff fff0 	bl	801364c <_ZN10FileSystem12checkMountedEv>
	log("Creating new file...");
 801366c:	6963      	ldr	r3, [r4, #20]
 801366e:	483d      	ldr	r0, [pc, #244]	; (8013764 <_ZN10FileSystem7newFileEPKc8FileType+0x108>)
 8013670:	4798      	blx	r3
	filename_copy(name, filename);
 8013672:	a902      	add	r1, sp, #8
 8013674:	4638      	mov	r0, r7
 8013676:	f7ff fd07 	bl	8013088 <_Z13filename_copyPKcPc>
	uint32_t hash = hash_filename(filename);
 801367a:	a802      	add	r0, sp, #8
 801367c:	f7ff fd29 	bl	80130d2 <_Z13hash_filenamePKc>
	uint8_t bucket = hash % NUM_FILES;
 8013680:	f000 060f 	and.w	r6, r0, #15
	uint32_t hash = hash_filename(filename);
 8013684:	4681      	mov	r9, r0
		file = &(files[file_id % NUM_FILES]);
 8013686:	f643 73f4 	movw	r3, #16372	; 0x3ff4
	for(uint8_t file_id = bucket; file_id < bucket + NUM_FILES; file_id++) {
 801368a:	f106 020f 	add.w	r2, r6, #15
 801368e:	9201      	str	r2, [sp, #4]
		file = &(files[file_id % NUM_FILES]);
 8013690:	f006 080f 	and.w	r8, r6, #15
		if(filename_equals(file->filename, name)) {
 8013694:	4639      	mov	r1, r7
 8013696:	4645      	mov	r5, r8
 8013698:	016a      	lsls	r2, r5, #5
		file = &(files[file_id % NUM_FILES]);
 801369a:	eb03 1548 	add.w	r5, r3, r8, lsl #5
 801369e:	9200      	str	r2, [sp, #0]
 80136a0:	4425      	add	r5, r4
		if(filename_equals(file->filename, name)) {
 80136a2:	4628      	mov	r0, r5
 80136a4:	f7ff fd05 	bl	80130b2 <_Z15filename_equalsPKcS0_>
 80136a8:	f643 73f4 	movw	r3, #16372	; 0x3ff4
 80136ac:	4601      	mov	r1, r0
 80136ae:	b150      	cbz	r0, 80136c6 <_ZN10FileSystem7newFileEPKc8FileType+0x6a>
			log("File with the given filename already exists:");
 80136b0:	6963      	ldr	r3, [r4, #20]
			return 0;
 80136b2:	2500      	movs	r5, #0
			log("File with the given filename already exists:");
 80136b4:	482c      	ldr	r0, [pc, #176]	; (8013768 <_ZN10FileSystem7newFileEPKc8FileType+0x10c>)
 80136b6:	4798      	blx	r3
			log(name);
 80136b8:	6963      	ldr	r3, [r4, #20]
 80136ba:	4638      	mov	r0, r7
 80136bc:	4798      	blx	r3
}
 80136be:	4628      	mov	r0, r5
 80136c0:	b007      	add	sp, #28
 80136c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(file->first_block == 0) {
 80136c6:	f508 7000 	add.w	r0, r8, #512	; 0x200
 80136ca:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 80136ce:	f8b0 b008 	ldrh.w	fp, [r0, #8]
 80136d2:	f1bb 0f00 	cmp.w	fp, #0
 80136d6:	d138      	bne.n	801374a <_ZN10FileSystem7newFileEPKc8FileType+0xee>
			uint16_t first_block_id = alloc(type);
 80136d8:	4651      	mov	r1, sl
 80136da:	4620      	mov	r0, r4
 80136dc:	f7ff fb93 	bl	8012e06 <_ZN10FileSystem5allocE8FileType>
 80136e0:	4607      	mov	r7, r0
			writeHeader(first_block_id, file_id, 0);
 80136e2:	465b      	mov	r3, fp
 80136e4:	4632      	mov	r2, r6
 80136e6:	4601      	mov	r1, r0
 80136e8:	4620      	mov	r0, r4
 80136ea:	f7ff fb3f 	bl	8012d6c <_ZN10FileSystem11writeHeaderEttt>
			protect(first_block_id);
 80136ee:	4639      	mov	r1, r7
 80136f0:	4620      	mov	r0, r4
			file->used_blocks = 1;
 80136f2:	eb04 1848 	add.w	r8, r4, r8, lsl #5
			protect(first_block_id);
 80136f6:	f7ff fb26 	bl	8012d46 <_ZN10FileSystem7protectEt>
			uint32_t address = getBaseAddress(first_block_id);
 80136fa:	4639      	mov	r1, r7
 80136fc:	4620      	mov	r0, r4
 80136fe:	f7ff faa7 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
			write(address, (uint8_t*) filename, 16); // Write the filename
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	aa02      	add	r2, sp, #8
			uint32_t address = getBaseAddress(first_block_id);
 8013706:	4601      	mov	r1, r0
			write(address, (uint8_t*) filename, 16); // Write the filename
 8013708:	691e      	ldr	r6, [r3, #16]
 801370a:	4620      	mov	r0, r4
 801370c:	2310      	movs	r3, #16
 801370e:	47b0      	blx	r6
			filename_copy(filename, file->filename);
 8013710:	4629      	mov	r1, r5
 8013712:	a802      	add	r0, sp, #8
 8013714:	f7ff fcb8 	bl	8013088 <_Z13filename_copyPKcPc>
			file->hash = hash;
 8013718:	9e00      	ldr	r6, [sp, #0]
			file->used_blocks = 1;
 801371a:	2201      	movs	r2, #1
 801371c:	f244 0310 	movw	r3, #16400	; 0x4010
 8013720:	4426      	add	r6, r4
			flush();
 8013722:	4620      	mov	r0, r4
			file->hash = hash;
 8013724:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8013728:	f8c6 9004 	str.w	r9, [r6, #4]
			file->first_block = first_block_id;
 801372c:	8137      	strh	r7, [r6, #8]
			file->last_block = first_block_id;
 801372e:	8177      	strh	r7, [r6, #10]
			file->used_blocks = 1;
 8013730:	f828 2003 	strh.w	r2, [r8, r3]
			file->length = 0;
 8013734:	f244 030c 	movw	r3, #16396	; 0x400c
 8013738:	f848 b003 	str.w	fp, [r8, r3]
			flush();
 801373c:	6823      	ldr	r3, [r4, #0]
 801373e:	695b      	ldr	r3, [r3, #20]
 8013740:	4798      	blx	r3
			log("File created.");
 8013742:	6963      	ldr	r3, [r4, #20]
 8013744:	4809      	ldr	r0, [pc, #36]	; (801376c <_ZN10FileSystem7newFileEPKc8FileType+0x110>)
 8013746:	4798      	blx	r3
			return file;
 8013748:	e7b9      	b.n	80136be <_ZN10FileSystem7newFileEPKc8FileType+0x62>
	for(uint8_t file_id = bucket; file_id < bucket + NUM_FILES; file_id++) {
 801374a:	1c72      	adds	r2, r6, #1
 801374c:	b2d6      	uxtb	r6, r2
 801374e:	9a01      	ldr	r2, [sp, #4]
 8013750:	42b2      	cmp	r2, r6
 8013752:	d29d      	bcs.n	8013690 <_ZN10FileSystem7newFileEPKc8FileType+0x34>
	log("Maximal number of files reached.");
 8013754:	6963      	ldr	r3, [r4, #20]
 8013756:	4806      	ldr	r0, [pc, #24]	; (8013770 <_ZN10FileSystem7newFileEPKc8FileType+0x114>)
 8013758:	9100      	str	r1, [sp, #0]
 801375a:	4798      	blx	r3
	return 0;
 801375c:	9900      	ldr	r1, [sp, #0]
 801375e:	460d      	mov	r5, r1
 8013760:	e7ad      	b.n	80136be <_ZN10FileSystem7newFileEPKc8FileType+0x62>
 8013762:	bf00      	nop
 8013764:	0801d481 	.word	0x0801d481
 8013768:	0801d496 	.word	0x0801d496
 801376c:	0801d4c3 	.word	0x0801d4c3
 8013770:	0801d4d1 	.word	0x0801d4d1

08013774 <_ZN10FileSystem7delFileEP4File>:
void FileSystem::delFile(File* file) {
 8013774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013778:	4605      	mov	r5, r0
 801377a:	460e      	mov	r6, r1
	checkMounted();
 801377c:	f7ff ff66 	bl	801364c <_ZN10FileSystem12checkMountedEv>
	log("Deleting file...");
 8013780:	4810      	ldr	r0, [pc, #64]	; (80137c4 <_ZN10FileSystem7delFileEP4File+0x50>)
 8013782:	696b      	ldr	r3, [r5, #20]
 8013784:	4798      	blx	r3
	uint16_t block_id = file->first_block;
 8013786:	8ab4      	ldrh	r4, [r6, #20]
	if(block_id) {
 8013788:	b1cc      	cbz	r4, 80137be <_ZN10FileSystem7delFileEP4File+0x4a>
			block->successor = 0;
 801378a:	2700      	movs	r7, #0
			free(block_id);
 801378c:	4621      	mov	r1, r4
 801378e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8013792:	4628      	mov	r0, r5
 8013794:	f7ff f928 	bl	80129e8 <_ZN10FileSystem4freeEt>
			block_id = block->successor;
 8013798:	f504 5100 	add.w	r1, r4, #8192	; 0x2000
 801379c:	8a4c      	ldrh	r4, [r1, #18]
			block->successor = 0;
 801379e:	824f      	strh	r7, [r1, #18]
		} while(block_id);
 80137a0:	2c00      	cmp	r4, #0
 80137a2:	d1f3      	bne.n	801378c <_ZN10FileSystem7delFileEP4File+0x18>
		flush();
 80137a4:	682b      	ldr	r3, [r5, #0]
 80137a6:	4628      	mov	r0, r5
		file->length = 0;
 80137a8:	61b4      	str	r4, [r6, #24]
		flush();
 80137aa:	695b      	ldr	r3, [r3, #20]
		file->used_blocks = 0;
 80137ac:	83b4      	strh	r4, [r6, #28]
		file->first_block = 0;
 80137ae:	e9c6 4404 	strd	r4, r4, [r6, #16]
		flush();
 80137b2:	4798      	blx	r3
		log("File deleted.");
 80137b4:	696b      	ldr	r3, [r5, #20]
 80137b6:	4804      	ldr	r0, [pc, #16]	; (80137c8 <_ZN10FileSystem7delFileEP4File+0x54>)
}
 80137b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		log("File does not exist.");
 80137bc:	4718      	bx	r3
 80137be:	696b      	ldr	r3, [r5, #20]
 80137c0:	4802      	ldr	r0, [pc, #8]	; (80137cc <_ZN10FileSystem7delFileEP4File+0x58>)
 80137c2:	e7f9      	b.n	80137b8 <_ZN10FileSystem7delFileEP4File+0x44>
 80137c4:	0801d4f2 	.word	0x0801d4f2
 80137c8:	0801d503 	.word	0x0801d503
 80137cc:	0801d511 	.word	0x0801d511

080137d0 <_ZN10FileSystem7getFileEPKc>:
File* FileSystem::getFile(const char* name) {
 80137d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80137d4:	460c      	mov	r4, r1
 80137d6:	4606      	mov	r6, r0
	checkMounted();
 80137d8:	f7ff ff38 	bl	801364c <_ZN10FileSystem12checkMountedEv>
	filename_copy(name, filename);
 80137dc:	4669      	mov	r1, sp
 80137de:	4620      	mov	r0, r4
		file = &(files[file_id % NUM_FILES]);
 80137e0:	2720      	movs	r7, #32
	filename_copy(name, filename);
 80137e2:	f7ff fc51 	bl	8013088 <_Z13filename_copyPKcPc>
	uint32_t hash = hash_filename(filename);
 80137e6:	4668      	mov	r0, sp
 80137e8:	f7ff fc73 	bl	80130d2 <_Z13hash_filenamePKc>
	uint8_t bucket = hash % NUM_FILES;
 80137ec:	f000 050f 	and.w	r5, r0, #15
	for(uint8_t file_id = bucket; file_id < bucket + NUM_FILES; file_id++) {
 80137f0:	f105 080f 	add.w	r8, r5, #15
		file = &(files[file_id % NUM_FILES]);
 80137f4:	f005 040f 	and.w	r4, r5, #15
		if(file->first_block && filename_equals(file->filename, filename)) {
 80137f8:	f504 7300 	add.w	r3, r4, #512	; 0x200
 80137fc:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8013800:	891b      	ldrh	r3, [r3, #8]
 8013802:	b95b      	cbnz	r3, 801381c <_ZN10FileSystem7getFileEPKc+0x4c>
	for(uint8_t file_id = bucket; file_id < bucket + NUM_FILES; file_id++) {
 8013804:	3501      	adds	r5, #1
 8013806:	b2ed      	uxtb	r5, r5
 8013808:	45a8      	cmp	r8, r5
 801380a:	d2f3      	bcs.n	80137f4 <_ZN10FileSystem7getFileEPKc+0x24>
	log("File with the given filename was not found in the filesystem:");
 801380c:	6973      	ldr	r3, [r6, #20]
	return 0;
 801380e:	2400      	movs	r4, #0
	log("File with the given filename was not found in the filesystem:");
 8013810:	480a      	ldr	r0, [pc, #40]	; (801383c <_ZN10FileSystem7getFileEPKc+0x6c>)
 8013812:	4798      	blx	r3
	log(filename);
 8013814:	6973      	ldr	r3, [r6, #20]
 8013816:	4668      	mov	r0, sp
 8013818:	4798      	blx	r3
	return 0;
 801381a:	e00a      	b.n	8013832 <_ZN10FileSystem7getFileEPKc+0x62>
		file = &(files[file_id % NUM_FILES]);
 801381c:	fb07 6404 	mla	r4, r7, r4, r6
		if(file->first_block && filename_equals(file->filename, filename)) {
 8013820:	4669      	mov	r1, sp
		file = &(files[file_id % NUM_FILES]);
 8013822:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 8013826:	3434      	adds	r4, #52	; 0x34
		if(file->first_block && filename_equals(file->filename, filename)) {
 8013828:	4620      	mov	r0, r4
 801382a:	f7ff fc42 	bl	80130b2 <_Z15filename_equalsPKcS0_>
 801382e:	2800      	cmp	r0, #0
 8013830:	d0e8      	beq.n	8013804 <_ZN10FileSystem7getFileEPKc+0x34>
}
 8013832:	4620      	mov	r0, r4
 8013834:	b004      	add	sp, #16
 8013836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801383a:	bf00      	nop
 801383c:	0801d526 	.word	0x0801d526

08013840 <_ZN10FileSystem10openStreamEP4File10StreamMode>:
Stream FileSystem::openStream(File* file, StreamMode mode) {
 8013840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013842:	461f      	mov	r7, r3
 8013844:	4605      	mov	r5, r0
	checkMounted();
 8013846:	4608      	mov	r0, r1
Stream FileSystem::openStream(File* file, StreamMode mode) {
 8013848:	460c      	mov	r4, r1
 801384a:	4616      	mov	r6, r2
	checkMounted();
 801384c:	f7ff fefe 	bl	801364c <_ZN10FileSystem12checkMountedEv>
	switch(mode) {
 8013850:	b13f      	cbz	r7, 8013862 <_ZN10FileSystem10openStreamEP4File10StreamMode+0x22>
 8013852:	2f01      	cmp	r7, #1
 8013854:	d016      	beq.n	8013884 <_ZN10FileSystem10openStreamEP4File10StreamMode+0x44>
		log("Unsupported stream mode");
 8013856:	6963      	ldr	r3, [r4, #20]
 8013858:	4811      	ldr	r0, [pc, #68]	; (80138a0 <_ZN10FileSystem10openStreamEP4File10StreamMode+0x60>)
 801385a:	4798      	blx	r3
		return Stream(this, 0, EMPTY);
 801385c:	2300      	movs	r3, #0
 801385e:	461a      	mov	r2, r3
 8013860:	e00a      	b.n	8013878 <_ZN10FileSystem10openStreamEP4File10StreamMode+0x38>
		uint16_t first_block = file->first_block;
 8013862:	8ab6      	ldrh	r6, [r6, #20]
		uint32_t base_address = getBaseAddress(first_block) + 16; // Do not overwrite the 16-characters long identifier
 8013864:	4620      	mov	r0, r4
 8013866:	4631      	mov	r1, r6
		FileType type = static_cast<FileType>(partition_table[first_block] >> 4);
 8013868:	4426      	add	r6, r4
		uint32_t base_address = getBaseAddress(first_block) + 16; // Do not overwrite the 16-characters long identifier
 801386a:	f7ff f9f1 	bl	8012c50 <_ZN10FileSystem14getBaseAddressEt>
		return Stream(this, base_address, type);
 801386e:	f100 0210 	add.w	r2, r0, #16
		FileType type = static_cast<FileType>(partition_table[first_block] >> 4);
 8013872:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
		return Stream(this, base_address, type);
 8013876:	091b      	lsrs	r3, r3, #4
		return Stream(this, 0, EMPTY);
 8013878:	4621      	mov	r1, r4
 801387a:	4628      	mov	r0, r5
 801387c:	f000 f814 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
}
 8013880:	4628      	mov	r0, r5
 8013882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t last_block = file->last_block;
 8013884:	8af6      	ldrh	r6, [r6, #22]
		uint32_t base_address = last_block * block_size + computeLength(last_block);
 8013886:	4620      	mov	r0, r4
 8013888:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801388a:	4631      	mov	r1, r6
 801388c:	fb02 f706 	mul.w	r7, r2, r6
		FileType type = static_cast<FileType>(partition_table[last_block] >> 4);
 8013890:	4426      	add	r6, r4
		uint32_t base_address = last_block * block_size + computeLength(last_block);
 8013892:	f7ff f8d0 	bl	8012a36 <_ZN10FileSystem13computeLengthEt>
		FileType type = static_cast<FileType>(partition_table[last_block] >> 4);
 8013896:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
		return Stream(this, base_address, type);
 801389a:	183a      	adds	r2, r7, r0
 801389c:	091b      	lsrs	r3, r3, #4
 801389e:	e7eb      	b.n	8013878 <_ZN10FileSystem10openStreamEP4File10StreamMode+0x38>
 80138a0:	0801d564 	.word	0x0801d564

080138a4 <_ZN10FileSystem18getTotalUsedBlocksEv>:
}
 80138a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80138a6:	4770      	bx	lr

080138a8 <_ZN6StreamC1EP2IOm8FileType>:
Stream::Stream(IO* io, uint32_t base_address, FileType type) :
		io(io),
		type(type),
		read_address(base_address),
		write_address(base_address),
		eof(false) {
 80138a8:	7103      	strb	r3, [r0, #4]
 80138aa:	2300      	movs	r3, #0
 80138ac:	6001      	str	r1, [r0, #0]
 80138ae:	7403      	strb	r3, [r0, #16]
Stream::Stream(IO* io, uint32_t base_address, FileType type) :
 80138b0:	b510      	push	{r4, lr}
		eof(false) {
 80138b2:	e9c0 2202 	strd	r2, r2, [r0, #8]
	;
}
 80138b6:	bd10      	pop	{r4, pc}

080138b8 <_ZN6Stream5closeEv>:

void Stream::close() {
	if(type == EMPTY) {
 80138b8:	7903      	ldrb	r3, [r0, #4]
 80138ba:	b11b      	cbz	r3, 80138c4 <_ZN6Stream5closeEv+0xc>
		return;
	}

	io->flush();
 80138bc:	6800      	ldr	r0, [r0, #0]
 80138be:	6803      	ldr	r3, [r0, #0]
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	4718      	bx	r3
}
 80138c4:	4770      	bx	lr

080138c6 <_ZN6Stream4readEPhm>:

int32_t Stream::read(uint8_t* buffer, uint32_t length) {
 80138c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(type == EMPTY) {
 80138ca:	7903      	ldrb	r3, [r0, #4]
int32_t Stream::read(uint8_t* buffer, uint32_t length) {
 80138cc:	4605      	mov	r5, r0
 80138ce:	4688      	mov	r8, r1
 80138d0:	4614      	mov	r4, r2
	if(type == EMPTY) {
 80138d2:	b32b      	cbz	r3, 8013920 <_ZN6Stream4readEPhm+0x5a>
	}

	uint32_t index = 0;
	int32_t readable_length = 0;

	if(length <= 0) {
 80138d4:	b312      	cbz	r2, 801391c <_ZN6Stream4readEPhm+0x56>
	uint32_t index = 0;
 80138d6:	2600      	movs	r6, #0
		return 0;
	}

	do {
		readable_length = io->access(&read_address, length - index, READ); // Transforms the write address (or fails if end of file) if we are at the end of a readable section
 80138d8:	f100 0a08 	add.w	sl, r0, #8
 80138dc:	46b1      	mov	r9, r6
 80138de:	6828      	ldr	r0, [r5, #0]
 80138e0:	1ba2      	subs	r2, r4, r6
 80138e2:	4651      	mov	r1, sl
 80138e4:	6803      	ldr	r3, [r0, #0]
 80138e6:	689f      	ldr	r7, [r3, #8]
 80138e8:	2300      	movs	r3, #0
 80138ea:	47b8      	blx	r7

		if(readable_length <= 0) {
 80138ec:	1e07      	subs	r7, r0, #0
 80138ee:	dc04      	bgt.n	80138fa <_ZN6Stream4readEPhm+0x34>
			eof = true;
 80138f0:	2301      	movs	r3, #1
			return index;
 80138f2:	4630      	mov	r0, r6
			eof = true;
 80138f4:	742b      	strb	r3, [r5, #16]
		index += readable_length;
		read_address += readable_length;
	} while(index < length);

	return length;
}
 80138f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		io->read(read_address, buffer + index, readable_length);
 80138fa:	6828      	ldr	r0, [r5, #0]
 80138fc:	eb08 0206 	add.w	r2, r8, r6
 8013900:	68a9      	ldr	r1, [r5, #8]
		index += readable_length;
 8013902:	443e      	add	r6, r7
		io->read(read_address, buffer + index, readable_length);
 8013904:	6803      	ldr	r3, [r0, #0]
			eof = false;
 8013906:	f885 9010 	strb.w	r9, [r5, #16]
		io->read(read_address, buffer + index, readable_length);
 801390a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801390e:	463b      	mov	r3, r7
 8013910:	47d8      	blx	fp
		read_address += readable_length;
 8013912:	68a8      	ldr	r0, [r5, #8]
	} while(index < length);
 8013914:	42b4      	cmp	r4, r6
		read_address += readable_length;
 8013916:	4438      	add	r0, r7
 8013918:	60a8      	str	r0, [r5, #8]
	} while(index < length);
 801391a:	d8e0      	bhi.n	80138de <_ZN6Stream4readEPhm+0x18>
		return 0;
 801391c:	4620      	mov	r0, r4
 801391e:	e7ea      	b.n	80138f6 <_ZN6Stream4readEPhm+0x30>
		return -1;
 8013920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013924:	e7e7      	b.n	80138f6 <_ZN6Stream4readEPhm+0x30>

08013926 <_ZN6Stream6read16Ev>:
	uint8_t coder; // Used as encoder and decoder
	read(&coder, 1);
	return coder;
}

uint16_t Stream::read16() {
 8013926:	b507      	push	{r0, r1, r2, lr}
	uint8_t coder[2]; // Used as encoder and decoder
	read(coder, 2);
 8013928:	2202      	movs	r2, #2
 801392a:	a901      	add	r1, sp, #4
 801392c:	f7ff ffcb 	bl	80138c6 <_ZN6Stream4readEPhm>

	composition |= (uint16_t) coder[1] << 8;
	composition |= (uint16_t) coder[0];

	return composition;
}
 8013930:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8013934:	b003      	add	sp, #12
 8013936:	f85d fb04 	ldr.w	pc, [sp], #4

0801393a <_ZN6Stream6read32Ev>:

uint32_t Stream::read32() {
 801393a:	b507      	push	{r0, r1, r2, lr}
	uint8_t coder[4]; // Used as encoder and decoder
	read(coder, 4);
 801393c:	2204      	movs	r2, #4
 801393e:	eb0d 0102 	add.w	r1, sp, r2
 8013942:	f7ff ffc0 	bl	80138c6 <_ZN6Stream4readEPhm>
	composition |= (uint64_t) coder[2] << 16;
	composition |= (uint64_t) coder[1] << 8;
	composition |= (uint64_t) coder[0];

	return composition;
}
 8013946:	9801      	ldr	r0, [sp, #4]
 8013948:	b003      	add	sp, #12
 801394a:	f85d fb04 	ldr.w	pc, [sp], #4

0801394e <_ZN6Stream6read64Ev>:

uint64_t Stream::read64() {
 801394e:	b507      	push	{r0, r1, r2, lr}
	uint8_t coder[8]; // Used as encoder and decoder
	read(coder, 8);
 8013950:	2208      	movs	r2, #8
 8013952:	4669      	mov	r1, sp
 8013954:	f7ff ffb7 	bl	80138c6 <_ZN6Stream4readEPhm>
	composition |= (uint64_t) coder[2] << 16;
	composition |= (uint64_t) coder[1] << 8;
	composition |= (uint64_t) coder[0];

	return composition;
}
 8013958:	e9dd 0100 	ldrd	r0, r1, [sp]
 801395c:	b003      	add	sp, #12
 801395e:	f85d fb04 	ldr.w	pc, [sp], #4

08013962 <_ZN6Stream5writeEPhm>:

void Stream::write(uint8_t* buffer, uint32_t length) {
 8013962:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(type == EMPTY) {
 8013966:	7903      	ldrb	r3, [r0, #4]
void Stream::write(uint8_t* buffer, uint32_t length) {
 8013968:	4604      	mov	r4, r0
 801396a:	4688      	mov	r8, r1
 801396c:	4617      	mov	r7, r2
	if(type == EMPTY) {
 801396e:	b17b      	cbz	r3, 8013990 <_ZN6Stream5writeEPhm+0x2e>
	}

   uint32_t index = 0;
   int32_t writable_length = 0;

   if(length <= 0) {
 8013970:	b172      	cbz	r2, 8013990 <_ZN6Stream5writeEPhm+0x2e>
   uint32_t index = 0;
 8013972:	2500      	movs	r5, #0
   		return;
   	}

   do {
      writable_length = io->access(&write_address, length - index, WRITE); // Transforms the write address (or fails if end of file) if we are at the end of a readable section
 8013974:	f100 0a0c 	add.w	sl, r0, #12

      if(writable_length <= 0) {
         eof = true;
         return;
      } else {
         eof = false;
 8013978:	46a9      	mov	r9, r5
      writable_length = io->access(&write_address, length - index, WRITE); // Transforms the write address (or fails if end of file) if we are at the end of a readable section
 801397a:	6820      	ldr	r0, [r4, #0]
 801397c:	1b7a      	subs	r2, r7, r5
 801397e:	4651      	mov	r1, sl
 8013980:	6803      	ldr	r3, [r0, #0]
 8013982:	689e      	ldr	r6, [r3, #8]
 8013984:	2301      	movs	r3, #1
 8013986:	47b0      	blx	r6
      if(writable_length <= 0) {
 8013988:	1e06      	subs	r6, r0, #0
 801398a:	dc03      	bgt.n	8013994 <_ZN6Stream5writeEPhm+0x32>
         eof = true;
 801398c:	2301      	movs	r3, #1
 801398e:	7423      	strb	r3, [r4, #16]
      io->write(write_address, buffer + index, writable_length);

      index += writable_length;
      write_address += writable_length;
   } while(index < length);
}
 8013990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      io->write(write_address, buffer + index, writable_length);
 8013994:	6820      	ldr	r0, [r4, #0]
 8013996:	eb08 0205 	add.w	r2, r8, r5
 801399a:	68e1      	ldr	r1, [r4, #12]
      index += writable_length;
 801399c:	4435      	add	r5, r6
      io->write(write_address, buffer + index, writable_length);
 801399e:	6803      	ldr	r3, [r0, #0]
         eof = false;
 80139a0:	f884 9010 	strb.w	r9, [r4, #16]
      io->write(write_address, buffer + index, writable_length);
 80139a4:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80139a8:	4633      	mov	r3, r6
 80139aa:	47d8      	blx	fp
      write_address += writable_length;
 80139ac:	68e0      	ldr	r0, [r4, #12]
   } while(index < length);
 80139ae:	42af      	cmp	r7, r5
      write_address += writable_length;
 80139b0:	4430      	add	r0, r6
 80139b2:	60e0      	str	r0, [r4, #12]
   } while(index < length);
 80139b4:	d8e1      	bhi.n	801397a <_ZN6Stream5writeEPhm+0x18>
 80139b6:	e7eb      	b.n	8013990 <_ZN6Stream5writeEPhm+0x2e>

080139b8 <_ZN6Stream6write8Eh>:

void Stream::write8(uint8_t data) {
 80139b8:	b507      	push	{r0, r1, r2, lr}
	write(&data, 1);
 80139ba:	2201      	movs	r2, #1
void Stream::write8(uint8_t data) {
 80139bc:	f88d 1007 	strb.w	r1, [sp, #7]
	write(&data, 1);
 80139c0:	f10d 0107 	add.w	r1, sp, #7
 80139c4:	f7ff ffcd 	bl	8013962 <_ZN6Stream5writeEPhm>
}
 80139c8:	b003      	add	sp, #12
 80139ca:	f85d fb04 	ldr.w	pc, [sp], #4

080139ce <_ZN6Stream7write32Em>:

void Stream::write32(uint32_t data) {
	uint8_t coder[4]; // Used as encoder and decoder

	coder[0] = data;
	coder[1] = data >> 8;
 80139ce:	0a0b      	lsrs	r3, r1, #8
void Stream::write32(uint32_t data) {
 80139d0:	b507      	push	{r0, r1, r2, lr}
	coder[2] = data >> 16;
	coder[3] = data >> 24;

	write(coder, 4);
 80139d2:	2204      	movs	r2, #4
	coder[0] = data;
 80139d4:	f88d 1004 	strb.w	r1, [sp, #4]
	coder[1] = data >> 8;
 80139d8:	f88d 3005 	strb.w	r3, [sp, #5]
	coder[2] = data >> 16;
 80139dc:	0c0b      	lsrs	r3, r1, #16
	coder[3] = data >> 24;
 80139de:	0e09      	lsrs	r1, r1, #24
	coder[2] = data >> 16;
 80139e0:	f88d 3006 	strb.w	r3, [sp, #6]
	coder[3] = data >> 24;
 80139e4:	f88d 1007 	strb.w	r1, [sp, #7]
	write(coder, 4);
 80139e8:	eb0d 0102 	add.w	r1, sp, r2
 80139ec:	f7ff ffb9 	bl	8013962 <_ZN6Stream5writeEPhm>
}
 80139f0:	b003      	add	sp, #12
 80139f2:	f85d fb04 	ldr.w	pc, [sp], #4

080139f6 <_ZN6Stream7write64Ey>:

void Stream::write64(uint64_t data) {
 80139f6:	b507      	push	{r0, r1, r2, lr}
	uint8_t coder[8]; // Used as encoder and decoder

	coder[0] = data;
	coder[1] = data >> 8;
 80139f8:	0a11      	lsrs	r1, r2, #8
	coder[0] = data;
 80139fa:	f88d 2000 	strb.w	r2, [sp]
	coder[2] = data >> 16;
	coder[3] = data >> 24;
	coder[4] = data >> 32;
 80139fe:	f88d 3004 	strb.w	r3, [sp, #4]
	coder[1] = data >> 8;
 8013a02:	f88d 1001 	strb.w	r1, [sp, #1]
	coder[2] = data >> 16;
 8013a06:	0c11      	lsrs	r1, r2, #16
	coder[3] = data >> 24;
 8013a08:	0e12      	lsrs	r2, r2, #24
	coder[2] = data >> 16;
 8013a0a:	f88d 1002 	strb.w	r1, [sp, #2]
	coder[5] = data >> 40;
	coder[6] = data >> 48;
	coder[7] = data >> 56;

	write(coder, 8);
 8013a0e:	4669      	mov	r1, sp
	coder[3] = data >> 24;
 8013a10:	f88d 2003 	strb.w	r2, [sp, #3]
	coder[5] = data >> 40;
 8013a14:	0a1a      	lsrs	r2, r3, #8
 8013a16:	f88d 2005 	strb.w	r2, [sp, #5]
	coder[6] = data >> 48;
 8013a1a:	0c1a      	lsrs	r2, r3, #16
	coder[7] = data >> 56;
 8013a1c:	0e1b      	lsrs	r3, r3, #24
	coder[6] = data >> 48;
 8013a1e:	f88d 2006 	strb.w	r2, [sp, #6]
	write(coder, 8);
 8013a22:	2208      	movs	r2, #8
	coder[7] = data >> 56;
 8013a24:	f88d 3007 	strb.w	r3, [sp, #7]
	write(coder, 8);
 8013a28:	f7ff ff9b 	bl	8013962 <_ZN6Stream5writeEPhm>
}
 8013a2c:	b003      	add	sp, #12
 8013a2e:	f85d fb04 	ldr.w	pc, [sp], #4

08013a32 <_ZN6Stream5isEOFEv>:
	this->write_address += index;
}

bool Stream::isEOF() {
	return eof;
}
 8013a32:	7c00      	ldrb	r0, [r0, #16]
 8013a34:	4770      	bx	lr

08013a36 <_ZN6Stream11getFileTypeEv>:

FileType Stream::getFileType() {
	return type;
}
 8013a36:	7900      	ldrb	r0, [r0, #4]
 8013a38:	4770      	bx	lr

08013a3a <_ZN16ExceptionTracker15trackExceptionsEPS_>:

#include "Debug/Debug.h"


void ExceptionTracker::trackExceptions(ExceptionTracker* parent) {
	this->parent = parent;
 8013a3a:	6041      	str	r1, [r0, #4]
}
 8013a3c:	4770      	bx	lr
	...

08013a40 <_ZN16ExceptionTracker10__throwExcEPKcm>:

void ExceptionTracker::__throwExc(const char* name, uint32_t line) {
 8013a40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013a42:	9203      	str	r2, [sp, #12]
 8013a44:	460d      	mov	r5, r1
	console.printf("%s occurred at line %d of %s: \r\n", name, line, __getSource());
 8013a46:	6802      	ldr	r2, [r0, #0]
void ExceptionTracker::__throwExc(const char* name, uint32_t line) {
 8013a48:	4604      	mov	r4, r0

	ExceptionTracker* current = this->parent;

	while(current != nullptr) {
		console.printf("\tUsed by %s\r\n", current->__getSource());
 8013a4a:	4e0d      	ldr	r6, [pc, #52]	; (8013a80 <_ZN16ExceptionTracker10__throwExcEPKcm+0x40>)
	console.printf("%s occurred at line %d of %s: \r\n", name, line, __getSource());
 8013a4c:	6812      	ldr	r2, [r2, #0]
 8013a4e:	4790      	blx	r2
 8013a50:	462a      	mov	r2, r5
 8013a52:	9000      	str	r0, [sp, #0]
 8013a54:	9b03      	ldr	r3, [sp, #12]
 8013a56:	490b      	ldr	r1, [pc, #44]	; (8013a84 <_ZN16ExceptionTracker10__throwExcEPKcm+0x44>)
 8013a58:	480b      	ldr	r0, [pc, #44]	; (8013a88 <_ZN16ExceptionTracker10__throwExcEPKcm+0x48>)
 8013a5a:	f7f7 fe01 	bl	800b660 <_ZN7Console6printfEPKcz>
		console.printf("\tUsed by %s\r\n", current->__getSource());
 8013a5e:	4d0a      	ldr	r5, [pc, #40]	; (8013a88 <_ZN16ExceptionTracker10__throwExcEPKcm+0x48>)
	ExceptionTracker* current = this->parent;
 8013a60:	6864      	ldr	r4, [r4, #4]
	while(current != nullptr) {
 8013a62:	b154      	cbz	r4, 8013a7a <_ZN16ExceptionTracker10__throwExcEPKcm+0x3a>
		console.printf("\tUsed by %s\r\n", current->__getSource());
 8013a64:	6823      	ldr	r3, [r4, #0]
 8013a66:	4620      	mov	r0, r4
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	4798      	blx	r3
 8013a6c:	4631      	mov	r1, r6
 8013a6e:	4602      	mov	r2, r0
 8013a70:	4628      	mov	r0, r5
 8013a72:	f7f7 fdf5 	bl	800b660 <_ZN7Console6printfEPKcz>
		current = current->parent;
 8013a76:	6864      	ldr	r4, [r4, #4]
	while(current != nullptr) {
 8013a78:	e7f3      	b.n	8013a62 <_ZN16ExceptionTracker10__throwExcEPKcm+0x22>
	}
}
 8013a7a:	b004      	add	sp, #16
 8013a7c:	bd70      	pop	{r4, r5, r6, pc}
 8013a7e:	bf00      	nop
 8013a80:	0801d5f5 	.word	0x0801d5f5
 8013a84:	0801d5d4 	.word	0x0801d5d4
 8013a88:	24041060 	.word	0x24041060

08013a8c <_Znwj>:
#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
    return pvPortMalloc(size);
 8013a8c:	f7f7 bce2 	b.w	800b454 <pvPortMalloc>

08013a90 <_ZdlPv>:
void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
    vPortFree(ptr);
 8013a90:	f7f7 bd78 	b.w	800b584 <vPortFree>

08013a94 <_ZN7LoggingD1Ev>:

#include "Thread.h"
#include "Libraries/RoCo/RoCo.h"
#include "Libraries/RocketFS/FileSystem.h"

class Logging : public Thread {
 8013a94:	4770      	bx	lr
	...

08013a98 <_ZN7Logging4initEv>:
{
    this->logging_mutex = xSemaphoreCreateMutex();
    this->process_semaphore = xSemaphoreCreateCounting(3, 0);
}

void Logging::init() {
 8013a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	xSemaphoreTake(logging_mutex, portMAX_DELAY);
 8013a9a:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
void Logging::init() {
 8013a9e:	4604      	mov	r4, r0
	xSemaphoreTake(logging_mutex, portMAX_DELAY);
 8013aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013aa4:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013aa8:	f7f6 fbf2 	bl	800a290 <xQueueSemaphoreTake>

	osDelay(10000 / portTICK_PERIOD_MS); // Avoid damage to memory if in watchdog loop
 8013aac:	f242 7010 	movw	r0, #10000	; 0x2710
 8013ab0:	f7f6 f849 	bl	8009b46 <osDelay>

	fs.setLogger(&__debug);
 8013ab4:	f104 001c 	add.w	r0, r4, #28
 8013ab8:	490d      	ldr	r1, [pc, #52]	; (8013af0 <_ZN7Logging4initEv+0x58>)
 8013aba:	9001      	str	r0, [sp, #4]
 8013abc:	f7ff fbe0 	bl	8013280 <_ZN10FileSystem9setLoggerEPFvPKcE>
	fs.bind(&flash_read, &flash_write, &flash_erase_subsector);
 8013ac0:	4b0c      	ldr	r3, [pc, #48]	; (8013af4 <_ZN7Logging4initEv+0x5c>)
 8013ac2:	4a0d      	ldr	r2, [pc, #52]	; (8013af8 <_ZN7Logging4initEv+0x60>)
 8013ac4:	490d      	ldr	r1, [pc, #52]	; (8013afc <_ZN7Logging4initEv+0x64>)
 8013ac6:	9801      	ldr	r0, [sp, #4]
 8013ac8:	f7ff fbe2 	bl	8013290 <_ZN10FileSystem4bindEPFvmPhmES2_PFvmE>

	fs.mount();
 8013acc:	9801      	ldr	r0, [sp, #4]
 8013ace:	f7ff fc7f 	bl	80133d0 <_ZN10FileSystem5mountEv>

	println("Logging ready");
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	490a      	ldr	r1, [pc, #40]	; (8013b00 <_ZN7Logging4initEv+0x68>)
 8013ad6:	f001 f9cf 	bl	8014e78 <_ZN6Thread7printlnEPKcz>

	xSemaphoreGive(logging_mutex);
 8013ada:	2300      	movs	r3, #0
 8013adc:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	4619      	mov	r1, r3
}
 8013ae4:	b003      	add	sp, #12
 8013ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	xSemaphoreGive(logging_mutex);
 8013aea:	f7f6 ba9b 	b.w	800a024 <xQueueGenericSend>
 8013aee:	bf00      	nop
 8013af0:	08013b05 	.word	0x08013b05
 8013af4:	08010f3f 	.word	0x08010f3f
 8013af8:	08010e99 	.word	0x08010e99
 8013afc:	08010ded 	.word	0x08010ded
 8013b00:	0801d603 	.word	0x0801d603

08013b04 <_ZL7__debugPKc>:
static void __debug(const char *message) {
 8013b04:	4602      	mov	r2, r0
	console.printf("%s\r\n", message);
 8013b06:	4902      	ldr	r1, [pc, #8]	; (8013b10 <_ZL7__debugPKc+0xc>)
 8013b08:	4802      	ldr	r0, [pc, #8]	; (8013b14 <_ZL7__debugPKc+0x10>)
 8013b0a:	f7f7 bda9 	b.w	800b660 <_ZN7Console6printfEPKcz>
 8013b0e:	bf00      	nop
 8013b10:	0801d5fe 	.word	0x0801d5fe
 8013b14:	24041060 	.word	0x24041060

08013b18 <_ZN7Logging4loopEv>:

void Logging::loop() {
 8013b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	PayloadPacket packet;

	if(stream.getFileType() != EMPTY) {
 8013b1c:	f500 4784 	add.w	r7, r0, #16896	; 0x4200
void Logging::loop() {
 8013b20:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8013b24:	4606      	mov	r6, r0
	if(stream.getFileType() != EMPTY) {
 8013b26:	373c      	adds	r7, #60	; 0x3c
 8013b28:	4638      	mov	r0, r7
 8013b2a:	f7ff ff84 	bl	8013a36 <_ZN6Stream11getFileTypeEv>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d06a      	beq.n	8013c08 <_ZN7Logging4loopEv+0xf0>
		uint32_t total_length = 0;
		int32_t length = 0;
 8013b32:	2500      	movs	r5, #0
 8013b34:	f506 4480 	add.w	r4, r6, #16384	; 0x4000

					xSemaphoreGive(logging_mutex);
				}
			}

			console.printf("Uploaded %d bytes\r\n", total_length);
 8013b38:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8013c18 <_ZN7Logging4loopEv+0x100>
		uint32_t total_length = 0;
 8013b3c:	46a8      	mov	r8, r5
			console.printf("Uploaded %d bytes\r\n", total_length);
 8013b3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013c14 <_ZN7Logging4loopEv+0xfc>
		while(!stream.isEOF()) {
 8013b42:	4638      	mov	r0, r7
 8013b44:	f7ff ff75 	bl	8013a32 <_ZN6Stream5isEOFEv>
 8013b48:	4681      	mov	r9, r0
 8013b4a:	bba8      	cbnz	r0, 8013bb8 <_ZN7Logging4loopEv+0xa0>
			if(xSemaphoreTake(process_semaphore, portMAX_DELAY)) {
 8013b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b50:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
 8013b54:	f7f6 fb9c 	bl	800a290 <xQueueSemaphoreTake>
 8013b58:	b340      	cbz	r0, 8013bac <_ZN7Logging4loopEv+0x94>
				if(xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013b5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b5e:	f8d4 0234 	ldr.w	r0, [r4, #564]	; 0x234
 8013b62:	f7f6 fb95 	bl	800a290 <xQueueSemaphoreTake>
 8013b66:	b308      	cbz	r0, 8013bac <_ZN7Logging4loopEv+0x94>
					if(next) {
 8013b68:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
 8013b6c:	b143      	cbz	r3, 8013b80 <_ZN7Logging4loopEv+0x68>
						length = stream.read(packet.payload, 512);
 8013b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b72:	a907      	add	r1, sp, #28
 8013b74:	4638      	mov	r0, r7
 8013b76:	f7ff fea6 	bl	80138c6 <_ZN6Stream4readEPhm>
 8013b7a:	4605      	mov	r5, r0
						this->next = false;
 8013b7c:	f884 9250 	strb.w	r9, [r4, #592]	; 0x250
					if(length >= 0) {
 8013b80:	2d00      	cmp	r5, #0
 8013b82:	db0c      	blt.n	8013b9e <_ZN7Logging4loopEv+0x86>
						MAKE_RELIABLE(packet);
 8013b84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013b88:	a806      	add	r0, sp, #24
						packet.length = length;
 8013b8a:	9506      	str	r5, [sp, #24]
						MAKE_RELIABLE(packet);
 8013b8c:	f7fe ff0c 	bl	80129a8 <_Z5crc16PKht>
						bus->send(&packet);
 8013b90:	a906      	add	r1, sp, #24
						MAKE_RELIABLE(packet);
 8013b92:	f8ad 021c 	strh.w	r0, [sp, #540]	; 0x21c
						bus->send(&packet);
 8013b96:	69b0      	ldr	r0, [r6, #24]
						total_length += length;
 8013b98:	44a8      	add	r8, r5
						bus->send(&packet);
 8013b9a:	f7fe f843 	bl	8011c24 <_ZN10MessageBus4sendI13PayloadPacketEEbPT_>
					xSemaphoreGive(logging_mutex);
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	f8d4 0234 	ldr.w	r0, [r4, #564]	; 0x234
 8013ba4:	461a      	mov	r2, r3
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	f7f6 fa3c 	bl	800a024 <xQueueGenericSend>
			console.printf("Uploaded %d bytes\r\n", total_length);
 8013bac:	4642      	mov	r2, r8
 8013bae:	4659      	mov	r1, fp
 8013bb0:	4650      	mov	r0, sl
 8013bb2:	f7f7 fd55 	bl	800b660 <_ZN7Console6printfEPKcz>
		while(!stream.isEOF()) {
 8013bb6:	e7c4      	b.n	8013b42 <_ZN7Logging4loopEv+0x2a>
		}

		console.printf("Upload finished!\r\n", total_length);

		packet.length = 0;
 8013bb8:	2500      	movs	r5, #0
		console.printf("Upload finished!\r\n", total_length);
 8013bba:	4642      	mov	r2, r8
 8013bbc:	4914      	ldr	r1, [pc, #80]	; (8013c10 <_ZN7Logging4loopEv+0xf8>)
		MAKE_RELIABLE(packet);
		bus->send(&packet);

		stream = Stream(nullptr, 0, EMPTY);
 8013bbe:	f504 740f 	add.w	r4, r4, #572	; 0x23c
		console.printf("Upload finished!\r\n", total_length);
 8013bc2:	4814      	ldr	r0, [pc, #80]	; (8013c14 <_ZN7Logging4loopEv+0xfc>)
 8013bc4:	f7f7 fd4c 	bl	800b660 <_ZN7Console6printfEPKcz>
		MAKE_RELIABLE(packet);
 8013bc8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013bcc:	a806      	add	r0, sp, #24
		packet.length = 0;
 8013bce:	9506      	str	r5, [sp, #24]
		MAKE_RELIABLE(packet);
 8013bd0:	f7fe feea 	bl	80129a8 <_Z5crc16PKht>
		bus->send(&packet);
 8013bd4:	a906      	add	r1, sp, #24
		MAKE_RELIABLE(packet);
 8013bd6:	f8ad 021c 	strh.w	r0, [sp, #540]	; 0x21c
		bus->send(&packet);
 8013bda:	69b0      	ldr	r0, [r6, #24]
 8013bdc:	f7fe f822 	bl	8011c24 <_ZN10MessageBus4sendI13PayloadPacketEEbPT_>
		stream = Stream(nullptr, 0, EMPTY);
 8013be0:	462b      	mov	r3, r5
 8013be2:	462a      	mov	r2, r5
 8013be4:	4629      	mov	r1, r5
 8013be6:	a801      	add	r0, sp, #4
 8013be8:	ad05      	add	r5, sp, #20
 8013bea:	f7ff fe5d 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
 8013bee:	ab01      	add	r3, sp, #4
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	3408      	adds	r4, #8
 8013bf4:	ca03      	ldmia	r2!, {r0, r1}
 8013bf6:	42aa      	cmp	r2, r5
 8013bf8:	f844 0c08 	str.w	r0, [r4, #-8]
 8013bfc:	f844 1c04 	str.w	r1, [r4, #-4]
 8013c00:	4613      	mov	r3, r2
 8013c02:	d1f5      	bne.n	8013bf0 <_ZN7Logging4loopEv+0xd8>
 8013c04:	7813      	ldrb	r3, [r2, #0]
 8013c06:	7023      	strb	r3, [r4, #0]
	}
}
 8013c08:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8013c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c10:	0801d625 	.word	0x0801d625
 8013c14:	24041060 	.word	0x24041060
 8013c18:	0801d611 	.word	0x0801d611

08013c1c <_ZN7LoggingD0Ev>:
 8013c1c:	b510      	push	{r4, lr}
 8013c1e:	4604      	mov	r4, r0
 8013c20:	f244 2158 	movw	r1, #16984	; 0x4258
 8013c24:	f001 fd3c 	bl	80156a0 <_ZdlPvj>
 8013c28:	4620      	mov	r0, r4
 8013c2a:	bd10      	pop	{r4, pc}

08013c2c <_ZN7LoggingC1EP10MessageBus>:
Logging::Logging(MessageBus* bus) : Thread("LoggingThread"),
 8013c2c:	b538      	push	{r3, r4, r5, lr}
 8013c2e:	460d      	mov	r5, r1
									enabled(true)
 8013c30:	491c      	ldr	r1, [pc, #112]	; (8013ca4 <_ZN7LoggingC1EP10MessageBus+0x78>)
Logging::Logging(MessageBus* bus) : Thread("LoggingThread"),
 8013c32:	4604      	mov	r4, r0
									enabled(true)
 8013c34:	f001 f90e 	bl	8014e54 <_ZN6ThreadC1EPKc>
 8013c38:	4b1b      	ldr	r3, [pc, #108]	; (8013ca8 <_ZN7LoggingC1EP10MessageBus+0x7c>)
 8013c3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c3e:	61a5      	str	r5, [r4, #24]
 8013c40:	f104 001c 	add.w	r0, r4, #28
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c4a:	4918      	ldr	r1, [pc, #96]	; (8013cac <_ZN7LoggingC1EP10MessageBus+0x80>)
 8013c4c:	f504 4580 	add.w	r5, r4, #16384	; 0x4000
 8013c50:	f7ff faca 	bl	80131e8 <_ZN10FileSystemC1EPKcmm>
 8013c54:	2300      	movs	r3, #0
 8013c56:	f504 4084 	add.w	r0, r4, #16896	; 0x4200
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	3010      	adds	r0, #16
 8013c60:	f7ff fe22 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
 8013c64:	2100      	movs	r1, #0
 8013c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c6a:	f504 4084 	add.w	r0, r4, #16896	; 0x4200
 8013c6e:	460a      	mov	r2, r1
 8013c70:	f8c5 1224 	str.w	r1, [r5, #548]	; 0x224
 8013c74:	f8c5 3230 	str.w	r3, [r5, #560]	; 0x230
 8013c78:	303c      	adds	r0, #60	; 0x3c
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	f7ff fe14 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
 8013c80:	f44f 7380 	mov.w	r3, #256	; 0x100
    this->logging_mutex = xSemaphoreCreateMutex();
 8013c84:	2001      	movs	r0, #1
									enabled(true)
 8013c86:	f8a5 3250 	strh.w	r3, [r5, #592]	; 0x250
    this->logging_mutex = xSemaphoreCreateMutex();
 8013c8a:	f7f6 fa93 	bl	800a1b4 <xQueueCreateMutex>
    this->process_semaphore = xSemaphoreCreateCounting(3, 0);
 8013c8e:	2100      	movs	r1, #0
    this->logging_mutex = xSemaphoreCreateMutex();
 8013c90:	f8c5 0234 	str.w	r0, [r5, #564]	; 0x234
    this->process_semaphore = xSemaphoreCreateCounting(3, 0);
 8013c94:	2003      	movs	r0, #3
 8013c96:	f7f6 f9a7 	bl	8009fe8 <xQueueCreateCountingSemaphore>
 8013c9a:	f8c5 0238 	str.w	r0, [r5, #568]	; 0x238
}
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	bd38      	pop	{r3, r4, r5, pc}
 8013ca2:	bf00      	nop
 8013ca4:	0801d638 	.word	0x0801d638
 8013ca8:	0801d69c 	.word	0x0801d69c
 8013cac:	0801d646 	.word	0x0801d646

08013cb0 <_ZN7Logging12pauseLoggingEv>:

void Logging::pauseLogging() {
	enabled = false;
 8013cb0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
}
 8013cba:	4770      	bx	lr

08013cbc <_ZN7Logging10newMissionEv>:

void Logging::resumeLogging() {
	enabled = true;
}

void Logging::newMission() {
 8013cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013cbe:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
void Logging::newMission() {
 8013cc2:	b08f      	sub	sp, #60	; 0x3c
 8013cc4:	4605      	mov	r5, r0
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013cc6:	f896 3251 	ldrb.w	r3, [r6, #593]	; 0x251
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d072      	beq.n	8013db4 <_ZN7Logging10newMissionEv+0xf8>
 8013cce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013cd2:	f8d6 0234 	ldr.w	r0, [r6, #564]	; 0x234
 8013cd6:	f7f6 fadb 	bl	800a290 <xQueueSemaphoreTake>
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d06a      	beq.n	8013db4 <_ZN7Logging10newMissionEv+0xf8>
		File* mission_status = fs.getFile("MissionStatus");
 8013cde:	351c      	adds	r5, #28
 8013ce0:	4949      	ldr	r1, [pc, #292]	; (8013e08 <_ZN7Logging10newMissionEv+0x14c>)
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	f7ff fd74 	bl	80137d0 <_ZN10FileSystem7getFileEPKc>
 8013ce8:	4604      	mov	r4, r0
		File* mission_file;

		uint8_t mission_slot;

		osDelay(1000);
 8013cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013cee:	f7f5 ff2a 	bl	8009b46 <osDelay>


		Stream mission_status_stream(nullptr, 0, EMPTY);
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	a804      	add	r0, sp, #16
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	f7ff fdd5 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>


		if(mission_status == nullptr) {
 8013cfe:	2c00      	cmp	r4, #0
 8013d00:	d15a      	bne.n	8013db8 <_ZN7Logging10newMissionEv+0xfc>
			mission_status = fs.newFile("MissionStatus", RAW);
 8013d02:	2201      	movs	r2, #1
 8013d04:	4940      	ldr	r1, [pc, #256]	; (8013e08 <_ZN7Logging10newMissionEv+0x14c>)
 8013d06:	4628      	mov	r0, r5
			mission_status_stream = fs.openStream(mission_status, OVERWRITE);
 8013d08:	af04      	add	r7, sp, #16
			mission_status = fs.newFile("MissionStatus", RAW);
 8013d0a:	f7ff fca7 	bl	801365c <_ZN10FileSystem7newFileEPKc8FileType>
			mission_status_stream = fs.openStream(mission_status, OVERWRITE);
 8013d0e:	4623      	mov	r3, r4
			mission_status = fs.newFile("MissionStatus", RAW);
 8013d10:	4602      	mov	r2, r0
			mission_status_stream = fs.openStream(mission_status, OVERWRITE);
 8013d12:	4629      	mov	r1, r5
 8013d14:	a809      	add	r0, sp, #36	; 0x24
 8013d16:	f7ff fd93 	bl	8013840 <_ZN10FileSystem10openStreamEP4File10StreamMode>
 8013d1a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24

			this->mission_id = 0;
 8013d1e:	f8c6 4230 	str.w	r4, [r6, #560]	; 0x230
			mission_status_stream = fs.openStream(mission_status, OVERWRITE);
 8013d22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013d28:	f8dc 3000 	ldr.w	r3, [ip]
 8013d2c:	703b      	strb	r3, [r7, #0]
			this->mission_id++;

			mission_slot = mission_id % 10;
		}

		mission_status_stream.write32(mission_id);
 8013d2e:	f8d6 1230 	ldr.w	r1, [r6, #560]	; 0x230
 8013d32:	a804      	add	r0, sp, #16
 8013d34:	f7ff fe4b 	bl	80139ce <_ZN6Stream7write32Em>

		mission_status_stream.close();
 8013d38:	a804      	add	r0, sp, #16
 8013d3a:	f7ff fdbd 	bl	80138b8 <_ZN6Stream5closeEv>

		console.printf("Mission UID: %d\r\n", mission_id);
 8013d3e:	f8d6 2230 	ldr.w	r2, [r6, #560]	; 0x230
 8013d42:	4932      	ldr	r1, [pc, #200]	; (8013e0c <_ZN7Logging10newMissionEv+0x150>)

		uint8_t filename[] = "Mission#";
		filename[7] = 48 + mission_slot;
 8013d44:	3430      	adds	r4, #48	; 0x30
		console.printf("Mission UID: %d\r\n", mission_id);
 8013d46:	4832      	ldr	r0, [pc, #200]	; (8013e10 <_ZN7Logging10newMissionEv+0x154>)
 8013d48:	f7f7 fc8a 	bl	800b660 <_ZN7Console6printfEPKcz>
		uint8_t filename[] = "Mission#";
 8013d4c:	4a31      	ldr	r2, [pc, #196]	; (8013e14 <_ZN7Logging10newMissionEv+0x158>)
 8013d4e:	ab01      	add	r3, sp, #4
 8013d50:	6810      	ldr	r0, [r2, #0]
 8013d52:	6851      	ldr	r1, [r2, #4]
 8013d54:	7a12      	ldrb	r2, [r2, #8]
 8013d56:	c303      	stmia	r3!, {r0, r1}

		mission_file = fs.getFile((const char*) filename);
 8013d58:	a901      	add	r1, sp, #4
 8013d5a:	4628      	mov	r0, r5
		uint8_t filename[] = "Mission#";
 8013d5c:	701a      	strb	r2, [r3, #0]
		filename[7] = 48 + mission_slot;
 8013d5e:	f88d 400b 	strb.w	r4, [sp, #11]
		mission_file = fs.getFile((const char*) filename);
 8013d62:	f7ff fd35 	bl	80137d0 <_ZN10FileSystem7getFileEPKc>

		if(mission_file != nullptr) {
 8013d66:	4601      	mov	r1, r0
 8013d68:	b110      	cbz	r0, 8013d70 <_ZN7Logging10newMissionEv+0xb4>
			fs.delFile(mission_file);
 8013d6a:	4628      	mov	r0, r5
 8013d6c:	f7ff fd02 	bl	8013774 <_ZN10FileSystem7delFileEP4File>
		}

		mission_file = fs.newFile((const char*) filename, RAW);
 8013d70:	2201      	movs	r2, #1
 8013d72:	a901      	add	r1, sp, #4
 8013d74:	4628      	mov	r0, r5
 8013d76:	f7ff fc71 	bl	801365c <_ZN10FileSystem7newFileEPKc8FileType>

		this->mission_stream = fs.openStream(mission_file, APPEND);
 8013d7a:	2301      	movs	r3, #1
		mission_file = fs.newFile((const char*) filename, RAW);
 8013d7c:	4602      	mov	r2, r0
		this->mission_stream = fs.openStream(mission_file, APPEND);
 8013d7e:	4629      	mov	r1, r5
 8013d80:	a809      	add	r0, sp, #36	; 0x24
 8013d82:	ad0d      	add	r5, sp, #52	; 0x34
 8013d84:	f7ff fd5c 	bl	8013840 <_ZN10FileSystem10openStreamEP4File10StreamMode>
 8013d88:	ab09      	add	r3, sp, #36	; 0x24
 8013d8a:	f506 7204 	add.w	r2, r6, #528	; 0x210
 8013d8e:	461c      	mov	r4, r3
 8013d90:	3208      	adds	r2, #8
 8013d92:	cc03      	ldmia	r4!, {r0, r1}
 8013d94:	42ac      	cmp	r4, r5
 8013d96:	f842 0c08 	str.w	r0, [r2, #-8]
 8013d9a:	f842 1c04 	str.w	r1, [r2, #-4]
 8013d9e:	4623      	mov	r3, r4
 8013da0:	d1f5      	bne.n	8013d8e <_ZN7Logging10newMissionEv+0xd2>
 8013da2:	7823      	ldrb	r3, [r4, #0]

		xSemaphoreGive(logging_mutex);
 8013da4:	f8d6 0234 	ldr.w	r0, [r6, #564]	; 0x234
		this->mission_stream = fs.openStream(mission_file, APPEND);
 8013da8:	7013      	strb	r3, [r2, #0]
		xSemaphoreGive(logging_mutex);
 8013daa:	2300      	movs	r3, #0
 8013dac:	461a      	mov	r2, r3
 8013dae:	4619      	mov	r1, r3
 8013db0:	f7f6 f938 	bl	800a024 <xQueueGenericSend>
	}
}
 8013db4:	b00f      	add	sp, #60	; 0x3c
 8013db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mission_status_stream = fs.openStream(mission_status, OVERWRITE);
 8013db8:	af09      	add	r7, sp, #36	; 0x24
 8013dba:	4622      	mov	r2, r4
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	a809      	add	r0, sp, #36	; 0x24
 8013dc2:	ac04      	add	r4, sp, #16
 8013dc4:	f7ff fd3c 	bl	8013840 <_ZN10FileSystem10openStreamEP4File10StreamMode>
 8013dc8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	7023      	strb	r3, [r4, #0]
			this->mission_id = 0xFFFFFFFF;
 8013dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dd4:	f8c6 3230 	str.w	r3, [r6, #560]	; 0x230
				uint32_t new_mission_id = mission_status_stream.read32();
 8013dd8:	a804      	add	r0, sp, #16
 8013dda:	f7ff fdae 	bl	801393a <_ZN6Stream6read32Ev>
				if(new_mission_id != mission_id + 1) {
 8013dde:	f8d6 4230 	ldr.w	r4, [r6, #560]	; 0x230
 8013de2:	3401      	adds	r4, #1
 8013de4:	4284      	cmp	r4, r0
			this->mission_id++;
 8013de6:	f8c6 4230 	str.w	r4, [r6, #560]	; 0x230
				if(new_mission_id != mission_id + 1) {
 8013dea:	d105      	bne.n	8013df8 <_ZN7Logging10newMissionEv+0x13c>
					mission_status_stream.write32(0xFFFFFFFF); // Equivalent to writing nothing
 8013dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013df0:	a804      	add	r0, sp, #16
 8013df2:	f7ff fdec 	bl	80139ce <_ZN6Stream7write32Em>
			}
 8013df6:	e7ef      	b.n	8013dd8 <_ZN7Logging10newMissionEv+0x11c>
			mission_slot = mission_id % 10;
 8013df8:	200a      	movs	r0, #10
 8013dfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8013dfe:	fb00 4413 	mls	r4, r0, r3, r4
 8013e02:	b2e4      	uxtb	r4, r4
 8013e04:	e793      	b.n	8013d2e <_ZN7Logging10newMissionEv+0x72>
 8013e06:	bf00      	nop
 8013e08:	0801d650 	.word	0x0801d650
 8013e0c:	0801d65e 	.word	0x0801d65e
 8013e10:	24041060 	.word	0x24041060
 8013e14:	0801d670 	.word	0x0801d670

08013e18 <_ZN7Logging15updateTimestampEy>:

void Logging::updateTimestamp(uint64_t timestamp) {
	this->timestamp = timestamp;
 8013e18:	f500 4084 	add.w	r0, r0, #16896	; 0x4200
 8013e1c:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
}
 8013e20:	4770      	bx	lr
	...

08013e24 <_ZN7Logging10beginBlockEv>:

void Logging::beginBlock() {
 8013e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013e26:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
void Logging::beginBlock() {
 8013e2a:	4604      	mov	r4, r0
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013e2c:	f895 3251 	ldrb.w	r3, [r5, #593]	; 0x251
 8013e30:	b333      	cbz	r3, 8013e80 <_ZN7Logging10beginBlockEv+0x5c>
 8013e32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013e36:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013e3a:	f7f6 fa29 	bl	800a290 <xQueueSemaphoreTake>
 8013e3e:	b1f8      	cbz	r0, 8013e80 <_ZN7Logging10beginBlockEv+0x5c>
		mission_stream.write32(0xC0FFEE);
 8013e40:	f504 4084 	add.w	r0, r4, #16896	; 0x4200
 8013e44:	490f      	ldr	r1, [pc, #60]	; (8013e84 <_ZN7Logging10beginBlockEv+0x60>)
		mission_stream.write32(seq_number++);
		mission_stream.write64(timestamp);
 8013e46:	f504 4484 	add.w	r4, r4, #16896	; 0x4200
		mission_stream.write32(0xC0FFEE);
 8013e4a:	3010      	adds	r0, #16
 8013e4c:	9001      	str	r0, [sp, #4]
 8013e4e:	f7ff fdbe 	bl	80139ce <_ZN6Stream7write32Em>
		mission_stream.write32(seq_number++);
 8013e52:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
 8013e56:	9801      	ldr	r0, [sp, #4]
 8013e58:	1c4b      	adds	r3, r1, #1
 8013e5a:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 8013e5e:	f7ff fdb6 	bl	80139ce <_ZN6Stream7write32Em>
		mission_stream.write64(timestamp);
 8013e62:	9801      	ldr	r0, [sp, #4]
 8013e64:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8013e68:	f7ff fdc5 	bl	80139f6 <_ZN6Stream7write64Ey>
		xSemaphoreGive(logging_mutex);
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013e72:	461a      	mov	r2, r3
 8013e74:	4619      	mov	r1, r3
	}
}
 8013e76:	b003      	add	sp, #12
 8013e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		xSemaphoreGive(logging_mutex);
 8013e7c:	f7f6 b8d2 	b.w	800a024 <xQueueGenericSend>
}
 8013e80:	b003      	add	sp, #12
 8013e82:	bd30      	pop	{r4, r5, pc}
 8013e84:	00c0ffee 	.word	0x00c0ffee

08013e88 <_ZN7Logging9writeDataEf>:

void Logging::writeData(float data) {
 8013e88:	b570      	push	{r4, r5, r6, lr}
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013e8a:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
void Logging::writeData(float data) {
 8013e8e:	4604      	mov	r4, r0
 8013e90:	ee10 6a10 	vmov	r6, s0
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013e94:	f895 3251 	ldrb.w	r3, [r5, #593]	; 0x251
 8013e98:	b1ab      	cbz	r3, 8013ec6 <_ZN7Logging9writeDataEf+0x3e>
 8013e9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013e9e:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013ea2:	f7f6 f9f5 	bl	800a290 <xQueueSemaphoreTake>
 8013ea6:	b170      	cbz	r0, 8013ec6 <_ZN7Logging9writeDataEf+0x3e>
		uint32_t *temp;
		temp = (uint32_t*) &data;
		mission_stream.write32(*temp);
 8013ea8:	f504 4084 	add.w	r0, r4, #16896	; 0x4200
 8013eac:	4631      	mov	r1, r6
 8013eae:	3010      	adds	r0, #16
 8013eb0:	f7ff fd8d 	bl	80139ce <_ZN6Stream7write32Em>
		xSemaphoreGive(logging_mutex);
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013eba:	461a      	mov	r2, r3
 8013ebc:	4619      	mov	r1, r3
	}
}
 8013ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xSemaphoreGive(logging_mutex);
 8013ec2:	f7f6 b8af 	b.w	800a024 <xQueueGenericSend>
}
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}

08013ec8 <_ZN7Logging8endBlockEv>:

void Logging::endBlock() {
 8013ec8:	b570      	push	{r4, r5, r6, lr}
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013eca:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
void Logging::endBlock() {
 8013ece:	4604      	mov	r4, r0
	if(enabled && xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013ed0:	f895 3251 	ldrb.w	r3, [r5, #593]	; 0x251
 8013ed4:	b313      	cbz	r3, 8013f1c <_ZN7Logging8endBlockEv+0x54>
 8013ed6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013eda:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013ede:	f7f6 f9d7 	bl	800a290 <xQueueSemaphoreTake>
 8013ee2:	b1d8      	cbz	r0, 8013f1c <_ZN7Logging8endBlockEv+0x54>
		mission_stream.write32(0xCAFE);
 8013ee4:	f504 4084 	add.w	r0, r4, #16896	; 0x4200
 8013ee8:	f64c 21fe 	movw	r1, #51966	; 0xcafe
 8013eec:	3010      	adds	r0, #16
 8013eee:	f7ff fd6e 	bl	80139ce <_ZN6Stream7write32Em>
 8013ef2:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
 8013ef6:	2264      	movs	r2, #100	; 0x64
 8013ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013efc:	fb02 3311 	mls	r3, r2, r1, r3

		if(seq_number % 100 == 0) {
 8013f00:	b91b      	cbnz	r3, 8013f0a <_ZN7Logging8endBlockEv+0x42>
			fs.flush();
 8013f02:	f104 001c 	add.w	r0, r4, #28
 8013f06:	f7ff f90f 	bl	8013128 <_ZN10FileSystem5flushEv>
		}

		xSemaphoreGive(logging_mutex);
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	f8d5 0234 	ldr.w	r0, [r5, #564]	; 0x234
 8013f10:	461a      	mov	r2, r3
 8013f12:	4619      	mov	r1, r3
	}
}
 8013f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xSemaphoreGive(logging_mutex);
 8013f18:	f7f6 b884 	b.w	800a024 <xQueueGenericSend>
}
 8013f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f20 <_ZN7Logging13getFlashUsageEv>:

float Logging::getFlashUsage() {
 8013f20:	b508      	push	{r3, lr}
	return (float) fs.getTotalUsedBlocks() / NUM_BLOCKS;
 8013f22:	301c      	adds	r0, #28
 8013f24:	f7ff fcbe 	bl	80138a4 <_ZN10FileSystem18getTotalUsedBlocksEv>
 8013f28:	ee07 0a90 	vmov	s15, r0
}
 8013f2c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013f3c <_ZN7Logging13getFlashUsageEv+0x1c>
	return (float) fs.getTotalUsedBlocks() / NUM_BLOCKS;
 8013f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8013f34:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013f38:	bd08      	pop	{r3, pc}
 8013f3a:	bf00      	nop
 8013f3c:	457f0000 	.word	0x457f0000

08013f40 <_ZN7Logging12getMissionIDEv>:

uint32_t Logging::getMissionID() {
	return mission_id;
 8013f40:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
}
 8013f44:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
 8013f48:	4770      	bx	lr
	...

08013f4c <_ZN7Logging10getMissionEm>:

Stream Logging::getMission(uint32_t target_mission_id) {
 8013f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f50:	4615      	mov	r5, r2
 8013f52:	b08f      	sub	sp, #60	; 0x3c
	uint8_t filename[] = "Mission#";
 8013f54:	4a30      	ldr	r2, [pc, #192]	; (8014018 <_ZN7Logging10getMissionEm+0xcc>)
Stream Logging::getMission(uint32_t target_mission_id) {
 8013f56:	460c      	mov	r4, r1
 8013f58:	4606      	mov	r6, r0
	uint8_t filename[] = "Mission#";
 8013f5a:	ab01      	add	r3, sp, #4
 8013f5c:	6810      	ldr	r0, [r2, #0]
	filename[7] = 48 + (target_mission_id % 10);

	if(xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013f5e:	f504 4980 	add.w	r9, r4, #16384	; 0x4000
	uint8_t filename[] = "Mission#";
 8013f62:	6851      	ldr	r1, [r2, #4]
 8013f64:	7a12      	ldrb	r2, [r2, #8]
 8013f66:	c303      	stmia	r3!, {r0, r1}
 8013f68:	701a      	strb	r2, [r3, #0]
	filename[7] = 48 + (target_mission_id % 10);
 8013f6a:	220a      	movs	r2, #10
	if(xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013f70:	f8d9 0234 	ldr.w	r0, [r9, #564]	; 0x234
	filename[7] = 48 + (target_mission_id % 10);
 8013f74:	fbb5 f3f2 	udiv	r3, r5, r2
 8013f78:	fb02 5313 	mls	r3, r2, r3, r5
 8013f7c:	3330      	adds	r3, #48	; 0x30
 8013f7e:	f88d 300b 	strb.w	r3, [sp, #11]
	if(xSemaphoreTake(logging_mutex, portMAX_DELAY)) {
 8013f82:	f7f6 f985 	bl	800a290 <xQueueSemaphoreTake>
 8013f86:	2800      	cmp	r0, #0
 8013f88:	d03f      	beq.n	801400a <_ZN7Logging10getMissionEm+0xbe>
		File* mission_status = fs.getFile("MissionStatus");
 8013f8a:	341c      	adds	r4, #28
 8013f8c:	4923      	ldr	r1, [pc, #140]	; (801401c <_ZN7Logging10getMissionEm+0xd0>)
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f7ff fc1e 	bl	80137d0 <_ZN10FileSystem7getFileEPKc>
 8013f94:	4680      	mov	r8, r0
		File* mission = fs.getFile((const char*) filename);
 8013f96:	a901      	add	r1, sp, #4
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7ff fc19 	bl	80137d0 <_ZN10FileSystem7getFileEPKc>
 8013f9e:	4607      	mov	r7, r0

		if(mission_status != nullptr && mission != nullptr) {
 8013fa0:	f1b8 0f00 	cmp.w	r8, #0
 8013fa4:	d02a      	beq.n	8013ffc <_ZN7Logging10getMissionEm+0xb0>
 8013fa6:	b348      	cbz	r0, 8013ffc <_ZN7Logging10getMissionEm+0xb0>
			Stream mission_status_stream = fs.openStream(mission_status, OVERWRITE);
 8013fa8:	2300      	movs	r3, #0
 8013faa:	4642      	mov	r2, r8
 8013fac:	4621      	mov	r1, r4
 8013fae:	a804      	add	r0, sp, #16
 8013fb0:	f7ff fc46 	bl	8013840 <_ZN10FileSystem10openStreamEP4File10StreamMode>

			uint32_t last_mission_id = 0xFFFFFFFF;
 8013fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

			while(1) {
				uint32_t new_mission_id = mission_status_stream.read32();
 8013fb8:	4698      	mov	r8, r3
 8013fba:	a804      	add	r0, sp, #16
 8013fbc:	f7ff fcbd 	bl	801393a <_ZN6Stream6read32Ev>
 8013fc0:	4603      	mov	r3, r0

				if(new_mission_id != last_mission_id + 1) {
 8013fc2:	f108 0801 	add.w	r8, r8, #1
 8013fc6:	4580      	cmp	r8, r0
 8013fc8:	d118      	bne.n	8013ffc <_ZN7Logging10getMissionEm+0xb0>
					break;
				} else if(new_mission_id == target_mission_id) {
 8013fca:	4285      	cmp	r5, r0
 8013fcc:	d1f4      	bne.n	8013fb8 <_ZN7Logging10getMissionEm+0x6c>
					Stream mission_stream = fs.openStream(mission, OVERWRITE);
 8013fce:	4621      	mov	r1, r4
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	463a      	mov	r2, r7
 8013fd4:	a809      	add	r0, sp, #36	; 0x24
 8013fd6:	f7ff fc33 	bl	8013840 <_ZN10FileSystem10openStreamEP4File10StreamMode>

					xSemaphoreGive(logging_mutex);
 8013fda:	2300      	movs	r3, #0

					return mission_stream;
 8013fdc:	ac09      	add	r4, sp, #36	; 0x24
					xSemaphoreGive(logging_mutex);
 8013fde:	f8d9 0234 	ldr.w	r0, [r9, #564]	; 0x234
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	f7f6 f81d 	bl	800a024 <xQueueGenericSend>
					return mission_stream;
 8013fea:	4635      	mov	r5, r6
 8013fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013ff0:	6823      	ldr	r3, [r4, #0]
 8013ff2:	602b      	str	r3, [r5, #0]

		xSemaphoreGive(logging_mutex);
	}

	return Stream(nullptr, 0, EMPTY);
}
 8013ff4:	4630      	mov	r0, r6
 8013ff6:	b00f      	add	sp, #60	; 0x3c
 8013ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xSemaphoreGive(logging_mutex);
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	f8d9 0234 	ldr.w	r0, [r9, #564]	; 0x234
 8014002:	461a      	mov	r2, r3
 8014004:	4619      	mov	r1, r3
 8014006:	f7f6 f80d 	bl	800a024 <xQueueGenericSend>
	return Stream(nullptr, 0, EMPTY);
 801400a:	2300      	movs	r3, #0
 801400c:	4630      	mov	r0, r6
 801400e:	461a      	mov	r2, r3
 8014010:	4619      	mov	r1, r3
 8014012:	f7ff fc49 	bl	80138a8 <_ZN6StreamC1EP2IOm8FileType>
 8014016:	e7ed      	b.n	8013ff4 <_ZN7Logging10getMissionEm+0xa8>
 8014018:	0801d670 	.word	0x0801d670
 801401c:	0801d650 	.word	0x0801d650

08014020 <_ZN7Logging18missionUploadBeginEm>:

bool Logging::missionUploadBegin(uint32_t target_mission_id) {
 8014020:	b570      	push	{r4, r5, r6, lr}
 8014022:	b086      	sub	sp, #24
 8014024:	4604      	mov	r4, r0
 8014026:	460a      	mov	r2, r1
	this->stream = getMission(target_mission_id);
 8014028:	4601      	mov	r1, r0
 801402a:	a801      	add	r0, sp, #4
 801402c:	ae05      	add	r6, sp, #20
 801402e:	f7ff ff8d 	bl	8013f4c <_ZN7Logging10getMissionEm>
 8014032:	f504 4384 	add.w	r3, r4, #16896	; 0x4200
 8014036:	aa01      	add	r2, sp, #4
 8014038:	333c      	adds	r3, #60	; 0x3c
 801403a:	4615      	mov	r5, r2
 801403c:	3308      	adds	r3, #8
 801403e:	cd03      	ldmia	r5!, {r0, r1}
 8014040:	42b5      	cmp	r5, r6
 8014042:	f843 0c08 	str.w	r0, [r3, #-8]
 8014046:	f843 1c04 	str.w	r1, [r3, #-4]
 801404a:	462a      	mov	r2, r5
 801404c:	d1f5      	bne.n	801403a <_ZN7Logging18missionUploadBeginEm+0x1a>
 801404e:	782a      	ldrb	r2, [r5, #0]
	return stream.getFileType() != EMPTY;
 8014050:	f504 4084 	add.w	r0, r4, #16896	; 0x4200
	this->stream = getMission(target_mission_id);
 8014054:	701a      	strb	r2, [r3, #0]
	return stream.getFileType() != EMPTY;
 8014056:	303c      	adds	r0, #60	; 0x3c
 8014058:	f7ff fced 	bl	8013a36 <_ZN6Stream11getFileTypeEv>
}
 801405c:	3800      	subs	r0, #0
 801405e:	bf18      	it	ne
 8014060:	2001      	movne	r0, #1
 8014062:	b006      	add	sp, #24
 8014064:	bd70      	pop	{r4, r5, r6, pc}

08014066 <_ZN7Logging17missionUploadNextEv>:

void Logging::missionUploadNext() {
	this->next = true;
 8014066:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 801406a:	2301      	movs	r3, #1
 801406c:	f880 3250 	strb.w	r3, [r0, #592]	; 0x250
}
 8014070:	4770      	bx	lr

08014072 <_ZN7Logging20missionUploadProcessEv>:

void Logging::missionUploadProcess() {
	xSemaphoreGive(process_semaphore);
 8014072:	2300      	movs	r3, #0
void Logging::missionUploadProcess() {
 8014074:	b510      	push	{r4, lr}
	xSemaphoreGive(process_semaphore);
 8014076:	f500 4480 	add.w	r4, r0, #16384	; 0x4000
 801407a:	461a      	mov	r2, r3
 801407c:	4619      	mov	r1, r3
 801407e:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
 8014082:	f7f5 ffcf 	bl	800a024 <xQueueGenericSend>
	xSemaphoreGive(process_semaphore);
 8014086:	2300      	movs	r3, #0
 8014088:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
 801408c:	461a      	mov	r2, r3
 801408e:	4619      	mov	r1, r3
 8014090:	f7f5 ffc8 	bl	800a024 <xQueueGenericSend>
	xSemaphoreGive(process_semaphore); // Give three semaphores in case one gets lost
 8014094:	2300      	movs	r3, #0
 8014096:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
 801409a:	461a      	mov	r2, r3
 801409c:	4619      	mov	r1, r3
}
 801409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	xSemaphoreGive(process_semaphore); // Give three semaphores in case one gets lost
 80140a2:	f7f5 bfbf 	b.w	800a024 <xQueueGenericSend>
	...

080140a8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80140a8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80140ac:	4905      	ldr	r1, [pc, #20]	; (80140c4 <__NVIC_SystemReset+0x1c>)
 80140ae:	4b06      	ldr	r3, [pc, #24]	; (80140c8 <__NVIC_SystemReset+0x20>)
 80140b0:	68ca      	ldr	r2, [r1, #12]
 80140b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80140b6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80140b8:	60cb      	str	r3, [r1, #12]
 80140ba:	f3bf 8f4f 	dsb	sy
    __NOP();
 80140be:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80140c0:	e7fd      	b.n	80140be <__NVIC_SystemReset+0x16>
 80140c2:	bf00      	nop
 80140c4:	e000ed00 	.word	0xe000ed00
 80140c8:	05fa0004 	.word	0x05fa0004

080140cc <__tcf_0>:

void systemd_init() {
	//static IMUThread imu(&hi2c4, 0b11010000, "IMU");

	static Terminal terminal;
	static Shell shell(&hlpuart1, &terminal);
 80140cc:	4770      	bx	lr
	...

080140d0 <_Z14handle_requesthP13RequestPacketP10MessageBus>:
void handle_request(uint8_t sender, RequestPacket* packet, MessageBus* bus) {
 80140d0:	b570      	push	{r4, r5, r6, lr}
 80140d2:	460c      	mov	r4, r1
	if(IS_RELIABLE((*packet))) {
 80140d4:	890e      	ldrh	r6, [r1, #8]
void handle_request(uint8_t sender, RequestPacket* packet, MessageBus* bus) {
 80140d6:	b086      	sub	sp, #24
	if(IS_RELIABLE((*packet))) {
 80140d8:	2108      	movs	r1, #8
 80140da:	4620      	mov	r0, r4
void handle_request(uint8_t sender, RequestPacket* packet, MessageBus* bus) {
 80140dc:	4615      	mov	r5, r2
	if(IS_RELIABLE((*packet))) {
 80140de:	f7fe fc63 	bl	80129a8 <_Z5crc16PKht>
 80140e2:	4286      	cmp	r6, r0
 80140e4:	d143      	bne.n	801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
		if(packet->uid != PS_UID_SUPERVISOR) {
 80140e6:	8823      	ldrh	r3, [r4, #0]
 80140e8:	2b42      	cmp	r3, #66	; 0x42
 80140ea:	d140      	bne.n	801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
		uint32_t uid = HAL_GetUIDw0();
 80140ec:	f7ed ff98 	bl	8002020 <HAL_GetUIDw0>
		if(packet->action_id == PS_ACTION_EXE) {
 80140f0:	78a3      	ldrb	r3, [r4, #2]
 80140f2:	2b02      	cmp	r3, #2
 80140f4:	d122      	bne.n	801413c <_Z14handle_requesthP13RequestPacketP10MessageBus+0x6c>
			if(packet->target_id == PS_TARGET_RESET) {
 80140f6:	78e3      	ldrb	r3, [r4, #3]
 80140f8:	2b02      	cmp	r3, #2
 80140fa:	d11a      	bne.n	8014132 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x62>
				if((uid == CTA_UID && packet->payload == CTA) || (uid == CTB_UID && packet->payload == CTB)) {
 80140fc:	4b31      	ldr	r3, [pc, #196]	; (80141c4 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xf4>)
 80140fe:	4298      	cmp	r0, r3
 8014100:	d111      	bne.n	8014126 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x56>
 8014102:	6863      	ldr	r3, [r4, #4]
 8014104:	2b01      	cmp	r3, #1
 8014106:	d132      	bne.n	801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
					state.state = STATE_RESET;
 8014108:	2300      	movs	r3, #0
					MAKE_RELIABLE(state);
 801410a:	2101      	movs	r1, #1
 801410c:	a803      	add	r0, sp, #12
					state.state = STATE_RESET;
 801410e:	f88d 300c 	strb.w	r3, [sp, #12]
					MAKE_RELIABLE(state);
 8014112:	f7fe fc49 	bl	80129a8 <_Z5crc16PKht>
					bus->send(&state);
 8014116:	a903      	add	r1, sp, #12
					MAKE_RELIABLE(state);
 8014118:	f8ad 000d 	strh.w	r0, [sp, #13]
					bus->send(&state);
 801411c:	4628      	mov	r0, r5
 801411e:	f7fd fc01 	bl	8011924 <_ZN10MessageBus4sendI21Power_ControllerStateEEbPT_>
				NVIC_SystemReset();
 8014122:	f7ff ffc1 	bl	80140a8 <__NVIC_SystemReset>
				if((uid == CTA_UID && packet->payload == CTA) || (uid == CTB_UID && packet->payload == CTB)) {
 8014126:	4b28      	ldr	r3, [pc, #160]	; (80141c8 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xf8>)
 8014128:	4298      	cmp	r0, r3
 801412a:	d120      	bne.n	801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
 801412c:	6863      	ldr	r3, [r4, #4]
 801412e:	2b02      	cmp	r3, #2
 8014130:	e7e9      	b.n	8014106 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x36>
			} else if(packet->target_id == PS_TARGET_FLASH_ERASE) {
 8014132:	2b08      	cmp	r3, #8
 8014134:	d11b      	bne.n	801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
				flash_erase_all();
 8014136:	f7fc fef7 	bl	8010f28 <_Z15flash_erase_allv>
 801413a:	e7f2      	b.n	8014122 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x52>
		} else if(packet->action_id == PS_ACTION_GET) {
 801413c:	b9bb      	cbnz	r3, 801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
			if(packet->target_id == PS_TARGET_MISSION_ID) {
 801413e:	78e3      	ldrb	r3, [r4, #3]
 8014140:	2b04      	cmp	r3, #4
 8014142:	d116      	bne.n	8014172 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xa2>
				uint32_t mission_id = logging->getMissionID();
 8014144:	4b21      	ldr	r3, [pc, #132]	; (80141cc <_Z14handle_requesthP13RequestPacketP10MessageBus+0xfc>)
 8014146:	6818      	ldr	r0, [r3, #0]
 8014148:	f7ff fefa 	bl	8013f40 <_ZN7Logging12getMissionIDEv>
				resp.action_id = packet->action_id;
 801414c:	78a3      	ldrb	r3, [r4, #2]
				MAKE_RELIABLE(resp);
 801414e:	2108      	movs	r1, #8
				resp.payload = mission_id;
 8014150:	9004      	str	r0, [sp, #16]
				resp.action_id = packet->action_id;
 8014152:	f88d 300e 	strb.w	r3, [sp, #14]
				MAKE_RELIABLE(resp);
 8014156:	a803      	add	r0, sp, #12
				resp.target_id = packet->target_id;
 8014158:	78e3      	ldrb	r3, [r4, #3]
 801415a:	f88d 300f 	strb.w	r3, [sp, #15]
				MAKE_RELIABLE(resp);
 801415e:	f7fe fc23 	bl	80129a8 <_Z5crc16PKht>
				bus->send(&resp);
 8014162:	a903      	add	r1, sp, #12
				MAKE_RELIABLE(resp);
 8014164:	f8ad 0014 	strh.w	r0, [sp, #20]
				bus->send(&resp);
 8014168:	4628      	mov	r0, r5
 801416a:	f7fd fcdd 	bl	8011b28 <_ZN10MessageBus4sendI14ResponsePacketEEbPT_>
}
 801416e:	b006      	add	sp, #24
 8014170:	bd70      	pop	{r4, r5, r6, pc}
			} else if(packet->target_id == PS_TARGET_DOWNLOAD) {
 8014172:	2b05      	cmp	r3, #5
 8014174:	d11c      	bne.n	80141b0 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xe0>
				uint32_t mission_id = packet->payload;
 8014176:	6862      	ldr	r2, [r4, #4]
				if(logging->missionUploadBegin(mission_id)) {
 8014178:	4c14      	ldr	r4, [pc, #80]	; (80141cc <_Z14handle_requesthP13RequestPacketP10MessageBus+0xfc>)
 801417a:	4611      	mov	r1, r2
 801417c:	9201      	str	r2, [sp, #4]
 801417e:	6820      	ldr	r0, [r4, #0]
 8014180:	f7ff ff4e 	bl	8014020 <_ZN7Logging18missionUploadBeginEm>
 8014184:	9a01      	ldr	r2, [sp, #4]
 8014186:	b160      	cbz	r0, 80141a2 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xd2>
					console.printf("Requested upload for mission ID %d...\r\n", mission_id);
 8014188:	4911      	ldr	r1, [pc, #68]	; (80141d0 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x100>)
 801418a:	4812      	ldr	r0, [pc, #72]	; (80141d4 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x104>)
 801418c:	f7f7 fa68 	bl	800b660 <_ZN7Console6printfEPKcz>
				logging->missionUploadNext();
 8014190:	6820      	ldr	r0, [r4, #0]
 8014192:	f7ff ff68 	bl	8014066 <_ZN7Logging17missionUploadNextEv>
				logging->missionUploadProcess();
 8014196:	6820      	ldr	r0, [r4, #0]
}
 8014198:	b006      	add	sp, #24
 801419a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				logging->missionUploadProcess();
 801419e:	f7ff bf68 	b.w	8014072 <_ZN7Logging20missionUploadProcessEv>
					console.printf("Requested mission ID %d does not exist\r\n", mission_id);
 80141a2:	490d      	ldr	r1, [pc, #52]	; (80141d8 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x108>)
 80141a4:	480b      	ldr	r0, [pc, #44]	; (80141d4 <_Z14handle_requesthP13RequestPacketP10MessageBus+0x104>)
}
 80141a6:	b006      	add	sp, #24
 80141a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					console.printf("Requested mission ID %d does not exist\r\n", mission_id);
 80141ac:	f7f7 ba58 	b.w	800b660 <_ZN7Console6printfEPKcz>
			} else if(packet->target_id == PS_TARGET_ACK) {
 80141b0:	2b06      	cmp	r3, #6
 80141b2:	d101      	bne.n	80141b8 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xe8>
				logging->missionUploadNext();
 80141b4:	4c05      	ldr	r4, [pc, #20]	; (80141cc <_Z14handle_requesthP13RequestPacketP10MessageBus+0xfc>)
 80141b6:	e7eb      	b.n	8014190 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xc0>
			} else if(packet->target_id == PS_TARGET_NACK) {
 80141b8:	2b07      	cmp	r3, #7
 80141ba:	d1d8      	bne.n	801416e <_Z14handle_requesthP13RequestPacketP10MessageBus+0x9e>
				logging->missionUploadProcess();
 80141bc:	4b03      	ldr	r3, [pc, #12]	; (80141cc <_Z14handle_requesthP13RequestPacketP10MessageBus+0xfc>)
 80141be:	6818      	ldr	r0, [r3, #0]
 80141c0:	e7ea      	b.n	8014198 <_Z14handle_requesthP13RequestPacketP10MessageBus+0xc8>
 80141c2:	bf00      	nop
 80141c4:	004e002e 	.word	0x004e002e
 80141c8:	004e002a 	.word	0x004e002a
 80141cc:	240416b4 	.word	0x240416b4
 80141d0:	0801d6b0 	.word	0x0801d6b0
 80141d4:	24041060 	.word	0x24041060
 80141d8:	0801d6d8 	.word	0x0801d6d8

080141dc <_ZL11handle_pinghP10PingPacket>:

		osDelay(1000);
	}
}

static void handle_ping(uint8_t sender, PingPacket* packet) {
 80141dc:	b570      	push	{r4, r5, r6, lr}
 80141de:	460c      	mov	r4, r1
	if(IS_RELIABLE((*packet))) {
 80141e0:	890d      	ldrh	r5, [r1, #8]
 80141e2:	2108      	movs	r1, #8
 80141e4:	4620      	mov	r0, r4
 80141e6:	f7fe fbdf 	bl	80129a8 <_Z5crc16PKht>
 80141ea:	4285      	cmp	r5, r0
 80141ec:	d10a      	bne.n	8014204 <_ZL11handle_pinghP10PingPacket+0x28>
		HAL_IWDG_Refresh(&hiwdg1);
 80141ee:	4809      	ldr	r0, [pc, #36]	; (8014214 <_ZL11handle_pinghP10PingPacket+0x38>)
 80141f0:	f7f0 fec1 	bl	8004f76 <HAL_IWDG_Refresh>
		logging->updateTimestamp(packet->time);
 80141f4:	4908      	ldr	r1, [pc, #32]	; (8014218 <_ZL11handle_pinghP10PingPacket+0x3c>)
 80141f6:	6822      	ldr	r2, [r4, #0]
 80141f8:	6863      	ldr	r3, [r4, #4]
 80141fa:	6808      	ldr	r0, [r1, #0]
	} else {
		console.printf("Pong failed! %x\r\n", packet->time);
	}
}
 80141fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		logging->updateTimestamp(packet->time);
 8014200:	f7ff be0a 	b.w	8013e18 <_ZN7Logging15updateTimestampEy>
		console.printf("Pong failed! %x\r\n", packet->time);
 8014204:	6822      	ldr	r2, [r4, #0]
 8014206:	6863      	ldr	r3, [r4, #4]
 8014208:	4904      	ldr	r1, [pc, #16]	; (801421c <_ZL11handle_pinghP10PingPacket+0x40>)
 801420a:	4805      	ldr	r0, [pc, #20]	; (8014220 <_ZL11handle_pinghP10PingPacket+0x44>)
}
 801420c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		console.printf("Pong failed! %x\r\n", packet->time);
 8014210:	f7f7 ba26 	b.w	800b660 <_ZN7Console6printfEPKcz>
 8014214:	24000780 	.word	0x24000780
 8014218:	240416b4 	.word	0x240416b4
 801421c:	0801d701 	.word	0x0801d701
 8014220:	24041060 	.word	0x24041060

08014224 <_Z15handle_responsehP14ResponsePacket>:
void handle_response(uint8_t sender, ResponsePacket* packet) {
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	460c      	mov	r4, r1
	if(IS_RELIABLE((*packet))) {
 8014228:	890d      	ldrh	r5, [r1, #8]
 801422a:	2108      	movs	r1, #8
 801422c:	4620      	mov	r0, r4
 801422e:	f7fe fbbb 	bl	80129a8 <_Z5crc16PKht>
 8014232:	4285      	cmp	r5, r0
 8014234:	d11c      	bne.n	8014270 <_Z15handle_responsehP14ResponsePacket+0x4c>
		if(packet->uid != PS_UID_SUPERVISOR) {
 8014236:	8823      	ldrh	r3, [r4, #0]
 8014238:	2b42      	cmp	r3, #66	; 0x42
 801423a:	d119      	bne.n	8014270 <_Z15handle_responsehP14ResponsePacket+0x4c>
		if(packet->action_id == PS_ACTION_GET) {
 801423c:	78a3      	ldrb	r3, [r4, #2]
 801423e:	b9bb      	cbnz	r3, 8014270 <_Z15handle_responsehP14ResponsePacket+0x4c>
 8014240:	78e3      	ldrb	r3, [r4, #3]
			if(packet->target_id == PS_TARGET_ACK) {
 8014242:	2b06      	cmp	r3, #6
 8014244:	d10c      	bne.n	8014260 <_Z15handle_responsehP14ResponsePacket+0x3c>
				logging->missionUploadNext();
 8014246:	4c0b      	ldr	r4, [pc, #44]	; (8014274 <_Z15handle_responsehP14ResponsePacket+0x50>)
 8014248:	6820      	ldr	r0, [r4, #0]
 801424a:	f7ff ff0c 	bl	8014066 <_ZN7Logging17missionUploadNextEv>
				logging->missionUploadProcess();
 801424e:	6820      	ldr	r0, [r4, #0]
 8014250:	f7ff ff0f 	bl	8014072 <_ZN7Logging20missionUploadProcessEv>
				console.printf("ACK\r\n");
 8014254:	4908      	ldr	r1, [pc, #32]	; (8014278 <_Z15handle_responsehP14ResponsePacket+0x54>)
				console.printf("NACK\r\n");
 8014256:	4809      	ldr	r0, [pc, #36]	; (801427c <_Z15handle_responsehP14ResponsePacket+0x58>)
}
 8014258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				console.printf("NACK\r\n");
 801425c:	f7f7 ba00 	b.w	800b660 <_ZN7Console6printfEPKcz>
			} else if(packet->target_id == PS_TARGET_NACK) {
 8014260:	2b07      	cmp	r3, #7
 8014262:	d105      	bne.n	8014270 <_Z15handle_responsehP14ResponsePacket+0x4c>
				logging->missionUploadProcess();
 8014264:	4b03      	ldr	r3, [pc, #12]	; (8014274 <_Z15handle_responsehP14ResponsePacket+0x50>)
 8014266:	6818      	ldr	r0, [r3, #0]
 8014268:	f7ff ff03 	bl	8014072 <_ZN7Logging20missionUploadProcessEv>
				console.printf("NACK\r\n");
 801426c:	4904      	ldr	r1, [pc, #16]	; (8014280 <_Z15handle_responsehP14ResponsePacket+0x5c>)
 801426e:	e7f2      	b.n	8014256 <_Z15handle_responsehP14ResponsePacket+0x32>
}
 8014270:	bd38      	pop	{r3, r4, r5, pc}
 8014272:	bf00      	nop
 8014274:	240416b4 	.word	0x240416b4
 8014278:	0801d714 	.word	0x0801d714
 801427c:	24041060 	.word	0x24041060
 8014280:	0801d713 	.word	0x0801d713

08014284 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    return __source._M_access<_Functor*>();
 8014284:	6803      	ldr	r3, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8014286:	b430      	push	{r4, r5}
 8014288:	460d      	mov	r5, r1
 801428a:	4611      	mov	r1, r2
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 801428c:	e9d3 4200 	ldrd	r4, r2, [r3]
 8014290:	7828      	ldrb	r0, [r5, #0]
 8014292:	4623      	mov	r3, r4
 8014294:	6809      	ldr	r1, [r1, #0]
      }
 8014296:	bc30      	pop	{r4, r5}
 8014298:	4718      	bx	r3
	...

0801429c <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	4604      	mov	r4, r0
	switch (__op)
 80142a0:	b13a      	cbz	r2, 80142b2 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x16>
 80142a2:	2a01      	cmp	r2, #1
 80142a4:	d008      	beq.n	80142b8 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x1c>
	  switch (__op)
 80142a6:	2a02      	cmp	r2, #2
 80142a8:	d008      	beq.n	80142bc <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x20>
 80142aa:	2a03      	cmp	r2, #3
 80142ac:	d010      	beq.n	80142d0 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
      }
 80142ae:	2000      	movs	r0, #0
 80142b0:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80142b2:	4b0b      	ldr	r3, [pc, #44]	; (80142e0 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 80142b4:	6023      	str	r3, [r4, #0]
	}
 80142b6:	e7fa      	b.n	80142ae <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 80142b8:	680b      	ldr	r3, [r1, #0]
 80142ba:	e7fb      	b.n	80142b4 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 80142bc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80142be:	2008      	movs	r0, #8
 80142c0:	f7ff fbe4 	bl	8013a8c <_Znwj>
 80142c4:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 80142c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80142ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80142ce:	e7f1      	b.n	80142b4 <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 80142d0:	6800      	ldr	r0, [r0, #0]
 80142d2:	2800      	cmp	r0, #0
 80142d4:	d0eb      	beq.n	80142ae <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x12>
 80142d6:	2108      	movs	r1, #8
 80142d8:	f001 f9e2 	bl	80156a0 <_ZdlPvj>
 80142dc:	e7e7      	b.n	80142ae <_ZNSt17_Function_handlerIFvhP13RequestPacketESt5_BindIFPFvhS1_P10MessageBusESt12_PlaceholderILi1EES8_ILi2EEP8PowerBusEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x12>
 80142de:	bf00      	nop
 80142e0:	0801d9d8 	.word	0x0801d9d8

080142e4 <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 80142e4:	b12a      	cbz	r2, 80142f2 <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 80142e6:	2a01      	cmp	r2, #1
 80142e8:	d006      	beq.n	80142f8 <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	  switch (__op)
 80142ea:	2a02      	cmp	r2, #2
 80142ec:	d105      	bne.n	80142fa <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x16>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80142ee:	680b      	ldr	r3, [r1, #0]
 80142f0:	e000      	b.n	80142f4 <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80142f2:	4b03      	ldr	r3, [pc, #12]	; (8014300 <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80142f4:	6003      	str	r3, [r0, #0]
	      break;
 80142f6:	e000      	b.n	80142fa <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80142f8:	6001      	str	r1, [r0, #0]
      }
 80142fa:	2000      	movs	r0, #0
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop
 8014300:	0801d970 	.word	0x0801d970

08014304 <_ZNSt17_Function_handlerIFvhP14ResponsePacketEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8014304:	b410      	push	{r4}
 8014306:	460c      	mov	r4, r1
 8014308:	6803      	ldr	r3, [r0, #0]
 801430a:	6811      	ldr	r1, [r2, #0]
 801430c:	7820      	ldrb	r0, [r4, #0]
      }
 801430e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014312:	4718      	bx	r3

08014314 <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 8014314:	b12a      	cbz	r2, 8014322 <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 8014316:	2a01      	cmp	r2, #1
 8014318:	d006      	beq.n	8014328 <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	  switch (__op)
 801431a:	2a02      	cmp	r2, #2
 801431c:	d105      	bne.n	801432a <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x16>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 801431e:	680b      	ldr	r3, [r1, #0]
 8014320:	e000      	b.n	8014324 <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014322:	4b03      	ldr	r3, [pc, #12]	; (8014330 <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8014324:	6003      	str	r3, [r0, #0]
	      break;
 8014326:	e000      	b.n	801432a <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8014328:	6001      	str	r1, [r0, #0]
      }
 801432a:	2000      	movs	r0, #0
 801432c:	4770      	bx	lr
 801432e:	bf00      	nop
 8014330:	0801d948 	.word	0x0801d948

08014334 <_ZNSt17_Function_handlerIFvhP10PingPacketEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8014334:	b410      	push	{r4}
 8014336:	460c      	mov	r4, r1
 8014338:	6803      	ldr	r3, [r0, #0]
 801433a:	6811      	ldr	r1, [r2, #0]
 801433c:	7820      	ldrb	r0, [r4, #0]
      }
 801433e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014342:	4718      	bx	r3

08014344 <__tcf_15>:
 8014344:	4770      	bx	lr

08014346 <__tcf_6>:
 8014346:	4770      	bx	lr

08014348 <__tcf_7>:
 8014348:	4770      	bx	lr

0801434a <__tcf_8>:
 801434a:	4770      	bx	lr

0801434c <__tcf_9>:
 801434c:	4770      	bx	lr

0801434e <__tcf_10>:
 801434e:	4770      	bx	lr

08014350 <__tcf_11>:
 8014350:	4770      	bx	lr

08014352 <__tcf_12>:
 8014352:	4770      	bx	lr

08014354 <__tcf_13>:
 8014354:	4770      	bx	lr

08014356 <__tcf_14>:
 8014356:	4770      	bx	lr

08014358 <__tcf_2>:
	static LoopbackDriver loopback_driver;
 8014358:	b508      	push	{r3, lr}
 801435a:	4803      	ldr	r0, [pc, #12]	; (8014368 <__tcf_2+0x10>)
 801435c:	4b03      	ldr	r3, [pc, #12]	; (801436c <__tcf_2+0x14>)
 801435e:	f840 3b04 	str.w	r3, [r0], #4
    class function<_Res(_ArgTypes...)>
 8014362:	f7f7 ff5d 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
 8014366:	bd08      	pop	{r3, pc}
 8014368:	24043abc 	.word	0x24043abc
 801436c:	0801cc84 	.word	0x0801cc84

08014370 <__tcf_3>:
	static PowerBus main_bus(&uart_driver);
 8014370:	b508      	push	{r3, lr}
 8014372:	4803      	ldr	r0, [pc, #12]	; (8014380 <__tcf_3+0x10>)
 8014374:	4b03      	ldr	r3, [pc, #12]	; (8014384 <__tcf_3+0x14>)
 8014376:	6003      	str	r3, [r0, #0]
 8014378:	f7fc fed2 	bl	8011120 <_ZN10MessageBusD1Ev>
 801437c:	bd08      	pop	{r3, pc}
 801437e:	bf00      	nop
 8014380:	24043dfc 	.word	0x24043dfc
 8014384:	0801cc30 	.word	0x0801cc30

08014388 <__tcf_4>:
	static PowerBus internal_bus(&loopback_driver);
 8014388:	b508      	push	{r3, lr}
 801438a:	4803      	ldr	r0, [pc, #12]	; (8014398 <__tcf_4+0x10>)
 801438c:	4b03      	ldr	r3, [pc, #12]	; (801439c <__tcf_4+0x14>)
 801438e:	6003      	str	r3, [r0, #0]
 8014390:	f7fc fec6 	bl	8011120 <_ZN10MessageBusD1Ev>
 8014394:	bd08      	pop	{r3, pc}
 8014396:	bf00      	nop
 8014398:	24041874 	.word	0x24041874
 801439c:	0801cc30 	.word	0x0801cc30

080143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>:
#include <spi.h>
#include <tim.h>

class PowerThread : public Thread {
public:
	PowerThread(SPI_HandleTypeDef* spi, TIM_HandleTypeDef* timer, PowerMonitor monitor_id, uint8_t device_id, MessageBus* bus) :
 80143a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a2:	4604      	mov	r4, r0
		Thread(toString(monitor_id), 2048),
		spi(spi),
		timer(timer),
		monitor_id(monitor_id),
		device_id(device_id),
		bus(bus) {}
 80143a4:	4618      	mov	r0, r3
	PowerThread(SPI_HandleTypeDef* spi, TIM_HandleTypeDef* timer, PowerMonitor monitor_id, uint8_t device_id, MessageBus* bus) :
 80143a6:	461d      	mov	r5, r3
 80143a8:	460f      	mov	r7, r1
 80143aa:	4616      	mov	r6, r2
		bus(bus) {}
 80143ac:	f000 fd90 	bl	8014ed0 <_Z8toString12PowerMonitor>
 80143b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80143b4:	4601      	mov	r1, r0
 80143b6:	4620      	mov	r0, r4
 80143b8:	f000 fd53 	bl	8014e62 <_ZN6ThreadC1EPKcm>
 80143bc:	4b06      	ldr	r3, [pc, #24]	; (80143d8 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus+0x38>)
 80143be:	4620      	mov	r0, r4
 80143c0:	f884 5020 	strb.w	r5, [r4, #32]
 80143c4:	6023      	str	r3, [r4, #0]
 80143c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80143ca:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80143ce:	9b07      	ldr	r3, [sp, #28]
 80143d0:	e9c4 7606 	strd	r7, r6, [r4, #24]
 80143d4:	6263      	str	r3, [r4, #36]	; 0x24
 80143d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143d8:	0801db58 	.word	0x0801db58

080143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>:
void fetch_transmit_log(PowerThread* monitor, PowerMonitor monitorID, MessageBus* bus) {
 80143dc:	b538      	push	{r3, r4, r5, lr}
	if(!monitor->isRunning()) {
 80143de:	7c03      	ldrb	r3, [r0, #16]
void fetch_transmit_log(PowerThread* monitor, PowerMonitor monitorID, MessageBus* bus) {
 80143e0:	4605      	mov	r5, r0
 80143e2:	4c28      	ldr	r4, [pc, #160]	; (8014484 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xa8>)
 80143e4:	ed2d 8b06 	vpush	{d8-d10}
	if(!monitor->isRunning()) {
 80143e8:	b9bb      	cbnz	r3, 801441a <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0x3e>
		logging->writeData(0.0f);
 80143ea:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8014488 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xac>
 80143ee:	6820      	ldr	r0, [r4, #0]
 80143f0:	f7ff fd4a 	bl	8013e88 <_ZN7Logging9writeDataEf>
		logging->writeData(0.0f);
 80143f4:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8014488 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xac>
 80143f8:	6820      	ldr	r0, [r4, #0]
 80143fa:	f7ff fd45 	bl	8013e88 <_ZN7Logging9writeDataEf>
		logging->writeData(0.0f);
 80143fe:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8014488 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xac>
 8014402:	6820      	ldr	r0, [r4, #0]
 8014404:	f7ff fd40 	bl	8013e88 <_ZN7Logging9writeDataEf>
		logging->writeData(0.0f);
 8014408:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8014488 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xac>
	logging->writeData(temperature);
 801440c:	6820      	ldr	r0, [r4, #0]
}
 801440e:	ecbd 8b06 	vpop	{d8-d10}
 8014412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logging->writeData(temperature);
 8014416:	f7ff bd37 	b.w	8013e88 <_ZN7Logging9writeDataEf>
	float power = 0.001f * monitor->getPower() / 16384.0f;
 801441a:	f000 fe6f 	bl	80150fc <_ZN11PowerThread8getPowerEv>
	float energy = 0.001f * monitor->getEnergy() / 16384.0f / 3600000000.0f;
 801441e:	4628      	mov	r0, r5
	float power = 0.001f * monitor->getPower() / 16384.0f;
 8014420:	eeb0 9a40 	vmov.f32	s18, s0
 8014424:	eddf 9a19 	vldr	s19, [pc, #100]	; 801448c <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xb0>
	float energy = 0.001f * monitor->getEnergy() / 16384.0f / 3600000000.0f;
 8014428:	f000 fd66 	bl	8014ef8 <_ZN11PowerThread9getEnergyEv>
	float voltage = 0.001f * monitor->getVoltage() / 1000.0f;
 801442c:	4628      	mov	r0, r5
	float energy = 0.001f * monitor->getEnergy() / 16384.0f / 3600000000.0f;
 801442e:	eeb0 8a40 	vmov.f32	s16, s0
	float voltage = 0.001f * monitor->getVoltage() / 1000.0f;
 8014432:	f000 fe47 	bl	80150c4 <_ZN11PowerThread10getVoltageEv>
	float temperature = 0.001f * monitor->getTemperature();
 8014436:	4628      	mov	r0, r5
	float voltage = 0.001f * monitor->getVoltage() / 1000.0f;
 8014438:	eef0 8a40 	vmov.f32	s17, s0
	float temperature = 0.001f * monitor->getTemperature();
 801443c:	f000 fe52 	bl	80150e4 <_ZN11PowerThread14getTemperatureEv>
	float power = 0.001f * monitor->getPower() / 16384.0f;
 8014440:	ee29 9a29 	vmul.f32	s18, s18, s19
 8014444:	eddf aa12 	vldr	s21, [pc, #72]	; 8014490 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xb4>
	float temperature = 0.001f * monitor->getTemperature();
 8014448:	eeb0 aa40 	vmov.f32	s20, s0
	logging->writeData(power);
 801444c:	6820      	ldr	r0, [r4, #0]
 801444e:	ee29 0a2a 	vmul.f32	s0, s18, s21
 8014452:	f7ff fd19 	bl	8013e88 <_ZN7Logging9writeDataEf>
	float energy = 0.001f * monitor->getEnergy() / 16384.0f / 3600000000.0f;
 8014456:	ee28 8a29 	vmul.f32	s16, s16, s19
	logging->writeData(energy);
 801445a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014494 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xb8>
 801445e:	6820      	ldr	r0, [r4, #0]
	float energy = 0.001f * monitor->getEnergy() / 16384.0f / 3600000000.0f;
 8014460:	ee28 8a2a 	vmul.f32	s16, s16, s21
	logging->writeData(energy);
 8014464:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8014468:	f7ff fd0e 	bl	8013e88 <_ZN7Logging9writeDataEf>
	logging->writeData(voltage);
 801446c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8014498 <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0xbc>
 8014470:	6820      	ldr	r0, [r4, #0]
	float voltage = 0.001f * monitor->getVoltage() / 1000.0f;
 8014472:	ee68 8aa9 	vmul.f32	s17, s17, s19
	logging->writeData(voltage);
 8014476:	ee88 0a80 	vdiv.f32	s0, s17, s0
 801447a:	f7ff fd05 	bl	8013e88 <_ZN7Logging9writeDataEf>
	logging->writeData(temperature);
 801447e:	ee2a 0a29 	vmul.f32	s0, s20, s19
 8014482:	e7c3      	b.n	801440c <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus+0x30>
 8014484:	240416b4 	.word	0x240416b4
 8014488:	00000000 	.word	0x00000000
 801448c:	3a83126f 	.word	0x3a83126f
 8014490:	38800000 	.word	0x38800000
 8014494:	4f5693a4 	.word	0x4f5693a4
 8014498:	447a0000 	.word	0x447a0000

0801449c <systemd_init>:
void systemd_init() {
 801449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static Shell shell(&hlpuart1, &terminal);
 80144a0:	4caa      	ldr	r4, [pc, #680]	; (801474c <systemd_init+0x2b0>)
void systemd_init() {
 80144a2:	ed2d 8b06 	vpush	{d8-d10}
	static Shell shell(&hlpuart1, &terminal);
 80144a6:	7823      	ldrb	r3, [r4, #0]
void systemd_init() {
 80144a8:	b09d      	sub	sp, #116	; 0x74
	static Shell shell(&hlpuart1, &terminal);
 80144aa:	f3bf 8f5b 	dmb	ish
 80144ae:	07db      	lsls	r3, r3, #31
 80144b0:	d40e      	bmi.n	80144d0 <systemd_init+0x34>
 80144b2:	4620      	mov	r0, r4
 80144b4:	f001 f90c 	bl	80156d0 <__cxa_guard_acquire>
 80144b8:	b150      	cbz	r0, 80144d0 <systemd_init+0x34>
 80144ba:	4aa5      	ldr	r2, [pc, #660]	; (8014750 <systemd_init+0x2b4>)
 80144bc:	49a5      	ldr	r1, [pc, #660]	; (8014754 <systemd_init+0x2b8>)
 80144be:	48a6      	ldr	r0, [pc, #664]	; (8014758 <systemd_init+0x2bc>)
 80144c0:	f7f7 f964 	bl	800b78c <_ZN5ShellC1EP20__UART_HandleTypeDefP8Terminal>
 80144c4:	48a5      	ldr	r0, [pc, #660]	; (801475c <systemd_init+0x2c0>)
 80144c6:	f001 fd0d 	bl	8015ee4 <atexit>
 80144ca:	4620      	mov	r0, r4
 80144cc:	f001 f90c 	bl	80156e8 <__cxa_guard_release>
	static STMUARTDriver uart_driver(&huart2);
 80144d0:	4ca3      	ldr	r4, [pc, #652]	; (8014760 <systemd_init+0x2c4>)
	flash_init();
 80144d2:	f7fc fc1f 	bl	8010d14 <_Z10flash_initv>
	static STMUARTDriver uart_driver(&huart2);
 80144d6:	7823      	ldrb	r3, [r4, #0]
 80144d8:	f3bf 8f5b 	dmb	ish
 80144dc:	07df      	lsls	r7, r3, #31
 80144de:	d40d      	bmi.n	80144fc <systemd_init+0x60>
 80144e0:	4620      	mov	r0, r4
 80144e2:	f001 f8f5 	bl	80156d0 <__cxa_guard_acquire>
 80144e6:	b148      	cbz	r0, 80144fc <systemd_init+0x60>
 80144e8:	499e      	ldr	r1, [pc, #632]	; (8014764 <systemd_init+0x2c8>)
 80144ea:	489f      	ldr	r0, [pc, #636]	; (8014768 <systemd_init+0x2cc>)
 80144ec:	f7fe fa04 	bl	80128f8 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
 80144f0:	489e      	ldr	r0, [pc, #632]	; (801476c <systemd_init+0x2d0>)
 80144f2:	f001 fcf7 	bl	8015ee4 <atexit>
 80144f6:	4620      	mov	r0, r4
 80144f8:	f001 f8f6 	bl	80156e8 <__cxa_guard_release>
	static LoopbackDriver loopback_driver;
 80144fc:	4d9c      	ldr	r5, [pc, #624]	; (8014770 <systemd_init+0x2d4>)
 80144fe:	782b      	ldrb	r3, [r5, #0]
 8014500:	f3bf 8f5b 	dmb	ish
 8014504:	f013 0401 	ands.w	r4, r3, #1
 8014508:	d10d      	bne.n	8014526 <systemd_init+0x8a>
 801450a:	4628      	mov	r0, r5
 801450c:	f001 f8e0 	bl	80156d0 <__cxa_guard_acquire>
 8014510:	b148      	cbz	r0, 8014526 <systemd_init+0x8a>
 8014512:	4b98      	ldr	r3, [pc, #608]	; (8014774 <systemd_init+0x2d8>)
 8014514:	4a98      	ldr	r2, [pc, #608]	; (8014778 <systemd_init+0x2dc>)
 8014516:	4899      	ldr	r0, [pc, #612]	; (801477c <systemd_init+0x2e0>)
 8014518:	601a      	str	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 801451a:	60dc      	str	r4, [r3, #12]
 801451c:	f001 fce2 	bl	8015ee4 <atexit>
 8014520:	4628      	mov	r0, r5
 8014522:	f001 f8e1 	bl	80156e8 <__cxa_guard_release>
	static PowerBus main_bus(&uart_driver);
 8014526:	4c96      	ldr	r4, [pc, #600]	; (8014780 <systemd_init+0x2e4>)
 8014528:	7823      	ldrb	r3, [r4, #0]
 801452a:	f3bf 8f5b 	dmb	ish
 801452e:	07de      	lsls	r6, r3, #31
 8014530:	d40d      	bmi.n	801454e <systemd_init+0xb2>
 8014532:	4620      	mov	r0, r4
 8014534:	f001 f8cc 	bl	80156d0 <__cxa_guard_acquire>
 8014538:	b148      	cbz	r0, 801454e <systemd_init+0xb2>
 801453a:	498b      	ldr	r1, [pc, #556]	; (8014768 <systemd_init+0x2cc>)
 801453c:	4891      	ldr	r0, [pc, #580]	; (8014784 <systemd_init+0x2e8>)
 801453e:	f7fe f8cd 	bl	80126dc <_ZN8PowerBusC1EP8IODriver>
 8014542:	4891      	ldr	r0, [pc, #580]	; (8014788 <systemd_init+0x2ec>)
 8014544:	f001 fcce 	bl	8015ee4 <atexit>
 8014548:	4620      	mov	r0, r4
 801454a:	f001 f8cd 	bl	80156e8 <__cxa_guard_release>
	static PowerBus internal_bus(&loopback_driver);
 801454e:	4c8f      	ldr	r4, [pc, #572]	; (801478c <systemd_init+0x2f0>)
 8014550:	7823      	ldrb	r3, [r4, #0]
 8014552:	f3bf 8f5b 	dmb	ish
 8014556:	07dd      	lsls	r5, r3, #31
 8014558:	d40d      	bmi.n	8014576 <systemd_init+0xda>
 801455a:	4620      	mov	r0, r4
 801455c:	f001 f8b8 	bl	80156d0 <__cxa_guard_acquire>
 8014560:	b148      	cbz	r0, 8014576 <systemd_init+0xda>
 8014562:	4984      	ldr	r1, [pc, #528]	; (8014774 <systemd_init+0x2d8>)
 8014564:	488a      	ldr	r0, [pc, #552]	; (8014790 <systemd_init+0x2f4>)
 8014566:	f7fe f8b9 	bl	80126dc <_ZN8PowerBusC1EP8IODriver>
 801456a:	488a      	ldr	r0, [pc, #552]	; (8014794 <systemd_init+0x2f8>)
 801456c:	f001 fcba 	bl	8015ee4 <atexit>
 8014570:	4620      	mov	r0, r4
 8014572:	f001 f8b9 	bl	80156e8 <__cxa_guard_release>
	logging = new Logging(&main_bus);
 8014576:	4c83      	ldr	r4, [pc, #524]	; (8014784 <systemd_init+0x2e8>)
 8014578:	f244 2058 	movw	r0, #16984	; 0x4258
 801457c:	f7ff fa86 	bl	8013a8c <_Znwj>
 8014580:	4f85      	ldr	r7, [pc, #532]	; (8014798 <systemd_init+0x2fc>)
 8014582:	4621      	mov	r1, r4
 8014584:	4605      	mov	r5, r0
 8014586:	f7ff fb51 	bl	8013c2c <_ZN7LoggingC1EP10MessageBus>
	main_bus.forward<PingPacket>(&main_bus); // Loopback pings to the WiFi module
 801458a:	4621      	mov	r1, r4
 801458c:	4620      	mov	r0, r4
	logging = new Logging(&main_bus);
 801458e:	603d      	str	r5, [r7, #0]
	main_bus.forward<PingPacket>(&main_bus); // Loopback pings to the WiFi module
 8014590:	f7fd fa12 	bl	80119b8 <_ZN10MessageBus7forwardI10PingPacketEEbPS_>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8014594:	4b81      	ldr	r3, [pc, #516]	; (801479c <systemd_init+0x300>)
	main_bus.handle<PingPacket>(&handle_ping);
 8014596:	a908      	add	r1, sp, #32
 8014598:	4620      	mov	r0, r4
 801459a:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 801459c:	4b80      	ldr	r3, [pc, #512]	; (80147a0 <systemd_init+0x304>)
 801459e:	4e7c      	ldr	r6, [pc, #496]	; (8014790 <systemd_init+0x2f4>)
 80145a0:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80145a2:	4b80      	ldr	r3, [pc, #512]	; (80147a4 <systemd_init+0x308>)
 80145a4:	930a      	str	r3, [sp, #40]	; 0x28
 80145a6:	f7fd ff8f 	bl	80124c8 <_ZN10MessageBus6handleI10PingPacketEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 80145aa:	a808      	add	r0, sp, #32
 80145ac:	f7f7 fe38 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80145b0:	4b7d      	ldr	r3, [pc, #500]	; (80147a8 <systemd_init+0x30c>)
	main_bus.handle<ResponsePacket>(&handle_response);
 80145b2:	a908      	add	r1, sp, #32
 80145b4:	4620      	mov	r0, r4
 80145b6:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 80145b8:	4b7c      	ldr	r3, [pc, #496]	; (80147ac <systemd_init+0x310>)
 80145ba:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80145bc:	4b7c      	ldr	r3, [pc, #496]	; (80147b0 <systemd_init+0x314>)
 80145be:	930a      	str	r3, [sp, #40]	; 0x28
 80145c0:	f7fe f812 	bl	80125e8 <_ZN10MessageBus6handleI14ResponsePacketEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 80145c4:	a808      	add	r0, sp, #32
 80145c6:	f7f7 fe2b 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
    _Function_base() : _M_manager(nullptr) { }
 80145ca:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80145cc:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
 80145ce:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80145d0:	f7ff fa5c 	bl	8013a8c <_Znwj>
 80145d4:	4b77      	ldr	r3, [pc, #476]	; (80147b4 <systemd_init+0x318>)
	main_bus.handle<RequestPacket>(std::bind(&handle_request, std::placeholders::_1, std::placeholders::_2, &main_bus));
 80145d6:	a908      	add	r1, sp, #32
 80145d8:	9008      	str	r0, [sp, #32]
 80145da:	e9c0 3400 	strd	r3, r4, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 80145de:	4b76      	ldr	r3, [pc, #472]	; (80147b8 <systemd_init+0x31c>)
 80145e0:	4620      	mov	r0, r4
 80145e2:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80145e4:	4b75      	ldr	r3, [pc, #468]	; (80147bc <systemd_init+0x320>)
 80145e6:	930a      	str	r3, [sp, #40]	; 0x28
 80145e8:	f7fd ffb6 	bl	8012558 <_ZN10MessageBus6handleI13RequestPacketEEbSt8functionIFvhPT_EE>
    class function<_Res(_ArgTypes...)>
 80145ec:	a808      	add	r0, sp, #32
 80145ee:	f7f7 fe17 	bl	800c220 <_ZNSt14_Function_baseD1Ev>
	internal_bus.forward<Power_BusInfo>(&main_bus);
 80145f2:	4621      	mov	r1, r4
 80145f4:	4866      	ldr	r0, [pc, #408]	; (8014790 <systemd_init+0x2f4>)
 80145f6:	f7fc ffb3 	bl	8011560 <_ZN10MessageBus7forwardI13Power_BusInfoEEbPS_>
	internal_bus.forward<Power_SupplyInfo>(&main_bus);
 80145fa:	4621      	mov	r1, r4
 80145fc:	4864      	ldr	r0, [pc, #400]	; (8014790 <systemd_init+0x2f4>)
 80145fe:	f7fd f815 	bl	801162c <_ZN10MessageBus7forwardI16Power_SupplyInfoEEbPS_>
	internal_bus.forward<Power_BatteryInfo>(&main_bus);
 8014602:	4621      	mov	r1, r4
 8014604:	4862      	ldr	r0, [pc, #392]	; (8014790 <systemd_init+0x2f4>)
 8014606:	f7fd f8dd 	bl	80117c4 <_ZN10MessageBus7forwardI17Power_BatteryInfoEEbPS_>
	internal_bus.forward<Power_SupplyControl>(&main_bus);
 801460a:	4621      	mov	r1, r4
 801460c:	4860      	ldr	r0, [pc, #384]	; (8014790 <systemd_init+0x2f4>)
 801460e:	f7fd f873 	bl	80116f8 <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_>
	main_bus.forward<Power_SupplyControl>(&internal_bus);
 8014612:	4620      	mov	r0, r4
	static GUIThread gui(&hspi4, &internal_bus);
 8014614:	4c6a      	ldr	r4, [pc, #424]	; (80147c0 <systemd_init+0x324>)
	main_bus.forward<Power_SupplyControl>(&internal_bus);
 8014616:	495e      	ldr	r1, [pc, #376]	; (8014790 <systemd_init+0x2f4>)
 8014618:	f7fd f86e 	bl	80116f8 <_ZN10MessageBus7forwardI19Power_SupplyControlEEbPS_>
	static GUIThread gui(&hspi4, &internal_bus);
 801461c:	7823      	ldrb	r3, [r4, #0]
 801461e:	f3bf 8f5b 	dmb	ish
 8014622:	f013 0f01 	tst.w	r3, #1
 8014626:	d10e      	bne.n	8014646 <systemd_init+0x1aa>
 8014628:	4620      	mov	r0, r4
 801462a:	f001 f851 	bl	80156d0 <__cxa_guard_acquire>
 801462e:	b150      	cbz	r0, 8014646 <systemd_init+0x1aa>
 8014630:	4632      	mov	r2, r6
 8014632:	4964      	ldr	r1, [pc, #400]	; (80147c4 <systemd_init+0x328>)
 8014634:	4864      	ldr	r0, [pc, #400]	; (80147c8 <systemd_init+0x32c>)
 8014636:	f7f8 f983 	bl	800c940 <_ZN9GUIThreadC1EP19__SPI_HandleTypeDefP10MessageBus>
 801463a:	4864      	ldr	r0, [pc, #400]	; (80147cc <systemd_init+0x330>)
 801463c:	f001 fc52 	bl	8015ee4 <atexit>
 8014640:	4620      	mov	r0, r4
 8014642:	f001 f851 	bl	80156e8 <__cxa_guard_release>

static void send_status(MessageBus* bus, uint8_t status) {
	Power_ControllerState state;
	state.state = status;
 8014646:	2101      	movs	r1, #1
	MAKE_RELIABLE(state);
 8014648:	a808      	add	r0, sp, #32
	static PowerThread power_monitor0(&hspi1, &htim2, LVA, 0, &internal_bus);
 801464a:	4d61      	ldr	r5, [pc, #388]	; (80147d0 <systemd_init+0x334>)
	state.state = status;
 801464c:	f88d 1020 	strb.w	r1, [sp, #32]
	MAKE_RELIABLE(state);
 8014650:	f7fe f9aa 	bl	80129a8 <_Z5crc16PKht>
	bus->send(&state);
 8014654:	a908      	add	r1, sp, #32
	MAKE_RELIABLE(state);
 8014656:	f8ad 0021 	strh.w	r0, [sp, #33]	; 0x21
	bus->send(&state);
 801465a:	484a      	ldr	r0, [pc, #296]	; (8014784 <systemd_init+0x2e8>)
 801465c:	f7fd f962 	bl	8011924 <_ZN10MessageBus4sendI21Power_ControllerStateEEbPT_>
	console.printf("Controller UID: %d\r\n", HAL_GetUIDw0());
 8014660:	f7ed fcde 	bl	8002020 <HAL_GetUIDw0>
 8014664:	495b      	ldr	r1, [pc, #364]	; (80147d4 <systemd_init+0x338>)
 8014666:	4602      	mov	r2, r0
 8014668:	485b      	ldr	r0, [pc, #364]	; (80147d8 <systemd_init+0x33c>)
 801466a:	f7f6 fff9 	bl	800b660 <_ZN7Console6printfEPKcz>
	static PowerThread power_monitor0(&hspi1, &htim2, LVA, 0, &internal_bus);
 801466e:	782b      	ldrb	r3, [r5, #0]
 8014670:	f3bf 8f5b 	dmb	ish
 8014674:	f013 0401 	ands.w	r4, r3, #1
 8014678:	d111      	bne.n	801469e <systemd_init+0x202>
 801467a:	4628      	mov	r0, r5
 801467c:	f001 f828 	bl	80156d0 <__cxa_guard_acquire>
 8014680:	b168      	cbz	r0, 801469e <systemd_init+0x202>
 8014682:	2302      	movs	r3, #2
 8014684:	4a55      	ldr	r2, [pc, #340]	; (80147dc <systemd_init+0x340>)
 8014686:	4956      	ldr	r1, [pc, #344]	; (80147e0 <systemd_init+0x344>)
 8014688:	4856      	ldr	r0, [pc, #344]	; (80147e4 <systemd_init+0x348>)
 801468a:	e9cd 4600 	strd	r4, r6, [sp]
 801468e:	f7ff fe87 	bl	80143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>
 8014692:	4855      	ldr	r0, [pc, #340]	; (80147e8 <systemd_init+0x34c>)
 8014694:	f001 fc26 	bl	8015ee4 <atexit>
 8014698:	4628      	mov	r0, r5
 801469a:	f001 f825 	bl	80156e8 <__cxa_guard_release>
	static PowerThread power_monitor1(&hspi1, &htim2, LVB, 4, &internal_bus);
 801469e:	4c53      	ldr	r4, [pc, #332]	; (80147ec <systemd_init+0x350>)
 80146a0:	7823      	ldrb	r3, [r4, #0]
 80146a2:	f3bf 8f5b 	dmb	ish
 80146a6:	07d8      	lsls	r0, r3, #31
 80146a8:	d412      	bmi.n	80146d0 <systemd_init+0x234>
 80146aa:	4620      	mov	r0, r4
 80146ac:	f001 f810 	bl	80156d0 <__cxa_guard_acquire>
 80146b0:	b170      	cbz	r0, 80146d0 <systemd_init+0x234>
 80146b2:	2304      	movs	r3, #4
 80146b4:	4a49      	ldr	r2, [pc, #292]	; (80147dc <systemd_init+0x340>)
 80146b6:	494a      	ldr	r1, [pc, #296]	; (80147e0 <systemd_init+0x344>)
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	2303      	movs	r3, #3
 80146bc:	484c      	ldr	r0, [pc, #304]	; (80147f0 <systemd_init+0x354>)
 80146be:	9601      	str	r6, [sp, #4]
 80146c0:	f7ff fe6e 	bl	80143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>
 80146c4:	484b      	ldr	r0, [pc, #300]	; (80147f4 <systemd_init+0x358>)
 80146c6:	f001 fc0d 	bl	8015ee4 <atexit>
 80146ca:	4620      	mov	r0, r4
 80146cc:	f001 f80c 	bl	80156e8 <__cxa_guard_release>
	static PowerThread power_monitor2(&hspi1, &htim2, HVA, 2, &internal_bus);
 80146d0:	4c49      	ldr	r4, [pc, #292]	; (80147f8 <systemd_init+0x35c>)
 80146d2:	7823      	ldrb	r3, [r4, #0]
 80146d4:	f3bf 8f5b 	dmb	ish
 80146d8:	07d9      	lsls	r1, r3, #31
 80146da:	d412      	bmi.n	8014702 <systemd_init+0x266>
 80146dc:	4620      	mov	r0, r4
 80146de:	f000 fff7 	bl	80156d0 <__cxa_guard_acquire>
 80146e2:	b170      	cbz	r0, 8014702 <systemd_init+0x266>
 80146e4:	2302      	movs	r3, #2
 80146e6:	4a3d      	ldr	r2, [pc, #244]	; (80147dc <systemd_init+0x340>)
 80146e8:	493d      	ldr	r1, [pc, #244]	; (80147e0 <systemd_init+0x344>)
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	2304      	movs	r3, #4
 80146ee:	4843      	ldr	r0, [pc, #268]	; (80147fc <systemd_init+0x360>)
 80146f0:	9601      	str	r6, [sp, #4]
 80146f2:	f7ff fe55 	bl	80143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>
 80146f6:	4842      	ldr	r0, [pc, #264]	; (8014800 <systemd_init+0x364>)
 80146f8:	f001 fbf4 	bl	8015ee4 <atexit>
 80146fc:	4620      	mov	r0, r4
 80146fe:	f000 fff3 	bl	80156e8 <__cxa_guard_release>
	static PowerThread power_monitor3(&hspi1, &htim2, HVB, 6, &internal_bus);
 8014702:	4c40      	ldr	r4, [pc, #256]	; (8014804 <systemd_init+0x368>)
 8014704:	7823      	ldrb	r3, [r4, #0]
 8014706:	f3bf 8f5b 	dmb	ish
 801470a:	07da      	lsls	r2, r3, #31
 801470c:	d412      	bmi.n	8014734 <systemd_init+0x298>
 801470e:	4620      	mov	r0, r4
 8014710:	f000 ffde 	bl	80156d0 <__cxa_guard_acquire>
 8014714:	b170      	cbz	r0, 8014734 <systemd_init+0x298>
 8014716:	2306      	movs	r3, #6
 8014718:	4a30      	ldr	r2, [pc, #192]	; (80147dc <systemd_init+0x340>)
 801471a:	4931      	ldr	r1, [pc, #196]	; (80147e0 <systemd_init+0x344>)
 801471c:	9300      	str	r3, [sp, #0]
 801471e:	2305      	movs	r3, #5
 8014720:	4839      	ldr	r0, [pc, #228]	; (8014808 <systemd_init+0x36c>)
 8014722:	9601      	str	r6, [sp, #4]
 8014724:	f7ff fe3c 	bl	80143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>
 8014728:	4838      	ldr	r0, [pc, #224]	; (801480c <systemd_init+0x370>)
 801472a:	f001 fbdb 	bl	8015ee4 <atexit>
 801472e:	4620      	mov	r0, r4
 8014730:	f000 ffda 	bl	80156e8 <__cxa_guard_release>
	static PowerThread power_monitor4(&hspi1, &htim2, MOTORS, 1, &internal_bus);
 8014734:	4c36      	ldr	r4, [pc, #216]	; (8014810 <systemd_init+0x374>)
 8014736:	7823      	ldrb	r3, [r4, #0]
 8014738:	f3bf 8f5b 	dmb	ish
 801473c:	07db      	lsls	r3, r3, #31
 801473e:	d477      	bmi.n	8014830 <systemd_init+0x394>
 8014740:	4620      	mov	r0, r4
 8014742:	f000 ffc5 	bl	80156d0 <__cxa_guard_acquire>
 8014746:	2800      	cmp	r0, #0
 8014748:	d072      	beq.n	8014830 <systemd_init+0x394>
 801474a:	e063      	b.n	8014814 <systemd_init+0x378>
 801474c:	240416ac 	.word	0x240416ac
 8014750:	24045f24 	.word	0x24045f24
 8014754:	24000dac 	.word	0x24000dac
 8014758:	24043b8c 	.word	0x24043b8c
 801475c:	080140cd 	.word	0x080140cd
 8014760:	24041684 	.word	0x24041684
 8014764:	24000e3c 	.word	0x24000e3c
 8014768:	24041818 	.word	0x24041818
 801476c:	08014dbd 	.word	0x08014dbd
 8014770:	240416a4 	.word	0x240416a4
 8014774:	24043abc 	.word	0x24043abc
 8014778:	0801cc84 	.word	0x0801cc84
 801477c:	08014359 	.word	0x08014359
 8014780:	240416b0 	.word	0x240416b0
 8014784:	24043dfc 	.word	0x24043dfc
 8014788:	08014371 	.word	0x08014371
 801478c:	24041688 	.word	0x24041688
 8014790:	24041874 	.word	0x24041874
 8014794:	08014389 	.word	0x08014389
 8014798:	240416b4 	.word	0x240416b4
 801479c:	080141dd 	.word	0x080141dd
 80147a0:	08014335 	.word	0x08014335
 80147a4:	08014315 	.word	0x08014315
 80147a8:	08014225 	.word	0x08014225
 80147ac:	08014305 	.word	0x08014305
 80147b0:	080142e5 	.word	0x080142e5
 80147b4:	080140d1 	.word	0x080140d1
 80147b8:	08014285 	.word	0x08014285
 80147bc:	0801429d 	.word	0x0801429d
 80147c0:	240416a8 	.word	0x240416a8
 80147c4:	24000b20 	.word	0x24000b20
 80147c8:	24043ad0 	.word	0x24043ad0
 80147cc:	08014db1 	.word	0x08014db1
 80147d0:	2404168c 	.word	0x2404168c
 80147d4:	0801d71a 	.word	0x0801d71a
 80147d8:	24041060 	.word	0x24041060
 80147dc:	24000bf8 	.word	0x24000bf8
 80147e0:	24000a98 	.word	0x24000a98
 80147e4:	2404399c 	.word	0x2404399c
 80147e8:	08014347 	.word	0x08014347
 80147ec:	24041690 	.word	0x24041690
 80147f0:	240439cc 	.word	0x240439cc
 80147f4:	08014349 	.word	0x08014349
 80147f8:	24041694 	.word	0x24041694
 80147fc:	240439fc 	.word	0x240439fc
 8014800:	0801434b 	.word	0x0801434b
 8014804:	24041698 	.word	0x24041698
 8014808:	24043a2c 	.word	0x24043a2c
 801480c:	0801434d 	.word	0x0801434d
 8014810:	2404169c 	.word	0x2404169c
 8014814:	2301      	movs	r3, #1
 8014816:	4acc      	ldr	r2, [pc, #816]	; (8014b48 <systemd_init+0x6ac>)
 8014818:	49cc      	ldr	r1, [pc, #816]	; (8014b4c <systemd_init+0x6b0>)
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	48cc      	ldr	r0, [pc, #816]	; (8014b50 <systemd_init+0x6b4>)
 801481e:	9601      	str	r6, [sp, #4]
 8014820:	f7ff fdbe 	bl	80143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>
 8014824:	48cb      	ldr	r0, [pc, #812]	; (8014b54 <systemd_init+0x6b8>)
 8014826:	f001 fb5d 	bl	8015ee4 <atexit>
 801482a:	4620      	mov	r0, r4
 801482c:	f000 ff5c 	bl	80156e8 <__cxa_guard_release>
	static PowerThread power_monitor5(&hspi1, &htim2, BATTERY, 5, &internal_bus);
 8014830:	4cc9      	ldr	r4, [pc, #804]	; (8014b58 <systemd_init+0x6bc>)
 8014832:	7823      	ldrb	r3, [r4, #0]
 8014834:	f3bf 8f5b 	dmb	ish
 8014838:	f013 0301 	ands.w	r3, r3, #1
 801483c:	d113      	bne.n	8014866 <systemd_init+0x3ca>
 801483e:	4620      	mov	r0, r4
 8014840:	9303      	str	r3, [sp, #12]
 8014842:	f000 ff45 	bl	80156d0 <__cxa_guard_acquire>
 8014846:	9b03      	ldr	r3, [sp, #12]
 8014848:	b168      	cbz	r0, 8014866 <systemd_init+0x3ca>
 801484a:	2205      	movs	r2, #5
 801484c:	49bf      	ldr	r1, [pc, #764]	; (8014b4c <systemd_init+0x6b0>)
 801484e:	48c3      	ldr	r0, [pc, #780]	; (8014b5c <systemd_init+0x6c0>)
 8014850:	9200      	str	r2, [sp, #0]
 8014852:	9601      	str	r6, [sp, #4]
 8014854:	4abc      	ldr	r2, [pc, #752]	; (8014b48 <systemd_init+0x6ac>)
 8014856:	f7ff fda3 	bl	80143a0 <_ZN11PowerThreadC1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDef12PowerMonitorhP10MessageBus>
 801485a:	48c1      	ldr	r0, [pc, #772]	; (8014b60 <systemd_init+0x6c4>)
 801485c:	f001 fb42 	bl	8015ee4 <atexit>
 8014860:	4620      	mov	r0, r4
 8014862:	f000 ff41 	bl	80156e8 <__cxa_guard_release>
	static SupplyThread lva_supply(&hi2c4, LVASupply, &power_monitor5, &power_monitor0, &internal_bus);
 8014866:	f8df a340 	ldr.w	sl, [pc, #832]	; 8014ba8 <systemd_init+0x70c>
 801486a:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8014b5c <systemd_init+0x6c0>
 801486e:	f89a 9000 	ldrb.w	r9, [sl]
 8014872:	f3bf 8f5b 	dmb	ish
 8014876:	f019 0901 	ands.w	r9, r9, #1
 801487a:	d13d      	bne.n	80148f8 <systemd_init+0x45c>
 801487c:	4650      	mov	r0, sl
 801487e:	f000 ff27 	bl	80156d0 <__cxa_guard_acquire>
 8014882:	2800      	cmp	r0, #0
 8014884:	d038      	beq.n	80148f8 <systemd_init+0x45c>
 8014886:	f8df c324 	ldr.w	ip, [pc, #804]	; 8014bac <systemd_init+0x710>
#include <i2c.h>


class SupplyThread : public Thread {
public:
	SupplyThread(I2C_HandleTypeDef* i2c, struct SupplyConfig device, PowerThread* input_sensor, PowerThread* output_sensor, MessageBus* bus) :
 801488a:	ac08      	add	r4, sp, #32
		input_sensor(input_sensor),
		output_sensor(output_sensor),
		bus(bus),
		switching(false),
		supplying(false),
		state(DAC_FAULT) {}
 801488c:	f8df b320 	ldr.w	fp, [pc, #800]	; 8014bb0 <systemd_init+0x714>
 8014890:	4665      	mov	r5, ip
 8014892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801489a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801489e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148a2:	f10b 051c 	add.w	r5, fp, #28
 80148a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80148aa:	f8dc 1000 	ldr.w	r1, [ip]
 80148ae:	4658      	mov	r0, fp
 80148b0:	f000 fad7 	bl	8014e62 <_ZN6ThreadC1EPKcm>
 80148b4:	4bab      	ldr	r3, [pc, #684]	; (8014b64 <systemd_init+0x6c8>)
 80148b6:	f10d 0c20 	add.w	ip, sp, #32
 80148ba:	f8cb 8048 	str.w	r8, [fp, #72]	; 0x48
 80148be:	f8cb 3000 	str.w	r3, [fp]
 80148c2:	4ba9      	ldr	r3, [pc, #676]	; (8014b68 <systemd_init+0x6cc>)
 80148c4:	f8cb 3018 	str.w	r3, [fp, #24]
 80148c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80148ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80148d4:	4ba5      	ldr	r3, [pc, #660]	; (8014b6c <systemd_init+0x6d0>)
 80148d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148da:	e9cb 3613 	strd	r3, r6, [fp, #76]	; 0x4c
 80148de:	2309      	movs	r3, #9
 80148e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80148e4:	f88b 3056 	strb.w	r3, [fp, #86]	; 0x56
 80148e8:	48a1      	ldr	r0, [pc, #644]	; (8014b70 <systemd_init+0x6d4>)
 80148ea:	f8ab 9054 	strh.w	r9, [fp, #84]	; 0x54
 80148ee:	f001 faf9 	bl	8015ee4 <atexit>
 80148f2:	4650      	mov	r0, sl
 80148f4:	f000 fef8 	bl	80156e8 <__cxa_guard_release>
	static SupplyThread lvb_supply(&hi2c4, LVBSupply, &power_monitor5, &power_monitor1, &internal_bus);
 80148f8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8014bb4 <systemd_init+0x718>
 80148fc:	f89a 9000 	ldrb.w	r9, [sl]
 8014900:	f3bf 8f5b 	dmb	ish
 8014904:	f019 0901 	ands.w	r9, r9, #1
 8014908:	d13d      	bne.n	8014986 <systemd_init+0x4ea>
 801490a:	4650      	mov	r0, sl
 801490c:	f000 fee0 	bl	80156d0 <__cxa_guard_acquire>
 8014910:	2800      	cmp	r0, #0
 8014912:	d038      	beq.n	8014986 <systemd_init+0x4ea>
 8014914:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8014bb8 <systemd_init+0x71c>
	SupplyThread(I2C_HandleTypeDef* i2c, struct SupplyConfig device, PowerThread* input_sensor, PowerThread* output_sensor, MessageBus* bus) :
 8014918:	ac08      	add	r4, sp, #32
		state(DAC_FAULT) {}
 801491a:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8014bbc <systemd_init+0x720>
 801491e:	4665      	mov	r5, ip
 8014920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014928:	e895 0003 	ldmia.w	r5, {r0, r1}
 801492c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014930:	f10b 051c 	add.w	r5, fp, #28
 8014934:	e884 0003 	stmia.w	r4, {r0, r1}
 8014938:	f8dc 1000 	ldr.w	r1, [ip]
 801493c:	4658      	mov	r0, fp
 801493e:	f000 fa90 	bl	8014e62 <_ZN6ThreadC1EPKcm>
 8014942:	4b88      	ldr	r3, [pc, #544]	; (8014b64 <systemd_init+0x6c8>)
 8014944:	f10d 0c20 	add.w	ip, sp, #32
 8014948:	f8cb 8048 	str.w	r8, [fp, #72]	; 0x48
 801494c:	f8cb 3000 	str.w	r3, [fp]
 8014950:	4b85      	ldr	r3, [pc, #532]	; (8014b68 <systemd_init+0x6cc>)
 8014952:	f8cb 3018 	str.w	r3, [fp, #24]
 8014956:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801495a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801495c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014962:	4b84      	ldr	r3, [pc, #528]	; (8014b74 <systemd_init+0x6d8>)
 8014964:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014968:	e9cb 3613 	strd	r3, r6, [fp, #76]	; 0x4c
 801496c:	2309      	movs	r3, #9
 801496e:	e885 0003 	stmia.w	r5, {r0, r1}
 8014972:	f88b 3056 	strb.w	r3, [fp, #86]	; 0x56
 8014976:	4880      	ldr	r0, [pc, #512]	; (8014b78 <systemd_init+0x6dc>)
 8014978:	f8ab 9054 	strh.w	r9, [fp, #84]	; 0x54
 801497c:	f001 fab2 	bl	8015ee4 <atexit>
 8014980:	4650      	mov	r0, sl
 8014982:	f000 feb1 	bl	80156e8 <__cxa_guard_release>
	static SupplyThread hva_supply(&hi2c4, HVASupply, &power_monitor5, &power_monitor2, &internal_bus);
 8014986:	f8df a238 	ldr.w	sl, [pc, #568]	; 8014bc0 <systemd_init+0x724>
 801498a:	f89a 9000 	ldrb.w	r9, [sl]
 801498e:	f3bf 8f5b 	dmb	ish
 8014992:	f019 0901 	ands.w	r9, r9, #1
 8014996:	d13d      	bne.n	8014a14 <systemd_init+0x578>
 8014998:	4650      	mov	r0, sl
 801499a:	f000 fe99 	bl	80156d0 <__cxa_guard_acquire>
 801499e:	2800      	cmp	r0, #0
 80149a0:	d038      	beq.n	8014a14 <systemd_init+0x578>
 80149a2:	f8df c220 	ldr.w	ip, [pc, #544]	; 8014bc4 <systemd_init+0x728>
	SupplyThread(I2C_HandleTypeDef* i2c, struct SupplyConfig device, PowerThread* input_sensor, PowerThread* output_sensor, MessageBus* bus) :
 80149a6:	ac08      	add	r4, sp, #32
		state(DAC_FAULT) {}
 80149a8:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8014bc8 <systemd_init+0x72c>
 80149ac:	4665      	mov	r5, ip
 80149ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80149b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80149ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80149be:	f10b 051c 	add.w	r5, fp, #28
 80149c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80149c6:	f8dc 1000 	ldr.w	r1, [ip]
 80149ca:	4658      	mov	r0, fp
 80149cc:	f000 fa49 	bl	8014e62 <_ZN6ThreadC1EPKcm>
 80149d0:	4b64      	ldr	r3, [pc, #400]	; (8014b64 <systemd_init+0x6c8>)
 80149d2:	f10d 0c20 	add.w	ip, sp, #32
 80149d6:	f8cb 8048 	str.w	r8, [fp, #72]	; 0x48
 80149da:	f8cb 3000 	str.w	r3, [fp]
 80149de:	4b62      	ldr	r3, [pc, #392]	; (8014b68 <systemd_init+0x6cc>)
 80149e0:	f8cb 3018 	str.w	r3, [fp, #24]
 80149e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149f0:	4b62      	ldr	r3, [pc, #392]	; (8014b7c <systemd_init+0x6e0>)
 80149f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80149f6:	e9cb 3613 	strd	r3, r6, [fp, #76]	; 0x4c
 80149fa:	2309      	movs	r3, #9
 80149fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8014a00:	f88b 3056 	strb.w	r3, [fp, #86]	; 0x56
 8014a04:	485e      	ldr	r0, [pc, #376]	; (8014b80 <systemd_init+0x6e4>)
 8014a06:	f8ab 9054 	strh.w	r9, [fp, #84]	; 0x54
 8014a0a:	f001 fa6b 	bl	8015ee4 <atexit>
 8014a0e:	4650      	mov	r0, sl
 8014a10:	f000 fe6a 	bl	80156e8 <__cxa_guard_release>
	static SupplyThread hvb_supply(&hi2c4, HVBSupply, &power_monitor5, &power_monitor3, &internal_bus);
 8014a14:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8014bcc <systemd_init+0x730>
 8014a18:	f89a 9000 	ldrb.w	r9, [sl]
 8014a1c:	f3bf 8f5b 	dmb	ish
 8014a20:	f019 0901 	ands.w	r9, r9, #1
 8014a24:	d13d      	bne.n	8014aa2 <systemd_init+0x606>
 8014a26:	4650      	mov	r0, sl
 8014a28:	f000 fe52 	bl	80156d0 <__cxa_guard_acquire>
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	d038      	beq.n	8014aa2 <systemd_init+0x606>
 8014a30:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8014bd0 <systemd_init+0x734>
	SupplyThread(I2C_HandleTypeDef* i2c, struct SupplyConfig device, PowerThread* input_sensor, PowerThread* output_sensor, MessageBus* bus) :
 8014a34:	ac08      	add	r4, sp, #32
		state(DAC_FAULT) {}
 8014a36:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8014bd4 <systemd_init+0x738>
 8014a3a:	4665      	mov	r5, ip
 8014a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a4c:	f10b 051c 	add.w	r5, fp, #28
 8014a50:	e884 0003 	stmia.w	r4, {r0, r1}
 8014a54:	f8dc 1000 	ldr.w	r1, [ip]
 8014a58:	4658      	mov	r0, fp
 8014a5a:	f000 fa02 	bl	8014e62 <_ZN6ThreadC1EPKcm>
 8014a5e:	4b41      	ldr	r3, [pc, #260]	; (8014b64 <systemd_init+0x6c8>)
 8014a60:	f10d 0c20 	add.w	ip, sp, #32
 8014a64:	f8cb 8048 	str.w	r8, [fp, #72]	; 0x48
 8014a68:	f8cb 3000 	str.w	r3, [fp]
 8014a6c:	4b3e      	ldr	r3, [pc, #248]	; (8014b68 <systemd_init+0x6cc>)
 8014a6e:	f8cb 3018 	str.w	r3, [fp, #24]
 8014a72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a7e:	4b41      	ldr	r3, [pc, #260]	; (8014b84 <systemd_init+0x6e8>)
 8014a80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014a84:	e9cb 3613 	strd	r3, r6, [fp, #76]	; 0x4c
 8014a88:	2309      	movs	r3, #9
 8014a8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014a8e:	f88b 3056 	strb.w	r3, [fp, #86]	; 0x56
 8014a92:	483d      	ldr	r0, [pc, #244]	; (8014b88 <systemd_init+0x6ec>)
 8014a94:	f8ab 9054 	strh.w	r9, [fp, #84]	; 0x54
 8014a98:	f001 fa24 	bl	8015ee4 <atexit>
 8014a9c:	4650      	mov	r0, sl
 8014a9e:	f000 fe23 	bl	80156e8 <__cxa_guard_release>
	logging->pauseLogging(); // To remove for mission
 8014aa2:	6838      	ldr	r0, [r7, #0]
 8014aa4:	f7ff f904 	bl	8013cb0 <_ZN7Logging12pauseLoggingEv>
	logging->newMission();
 8014aa8:	6838      	ldr	r0, [r7, #0]
 8014aaa:	f7ff f907 	bl	8013cbc <_ZN7Logging10newMissionEv>
	state.state = status;
 8014aae:	2302      	movs	r3, #2
	MAKE_RELIABLE(state);
 8014ab0:	2101      	movs	r1, #1
 8014ab2:	a808      	add	r0, sp, #32
	state.state = status;
 8014ab4:	f88d 3020 	strb.w	r3, [sp, #32]
	MAKE_RELIABLE(state);
 8014ab8:	f7fd ff76 	bl	80129a8 <_Z5crc16PKht>
		float energy = general_monitor->getEnergy();
 8014abc:	4d27      	ldr	r5, [pc, #156]	; (8014b5c <systemd_init+0x6c0>)
	bus->send(&state);
 8014abe:	a908      	add	r1, sp, #32
	MAKE_RELIABLE(state);
 8014ac0:	f8ad 0021 	strh.w	r0, [sp, #33]	; 0x21
		float soc = 100.0f * (1.0f - energy / BATTERY_CHARGE);
 8014ac4:	eddf aa31 	vldr	s21, [pc, #196]	; 8014b8c <systemd_init+0x6f0>
	bus->send(&state);
 8014ac8:	4831      	ldr	r0, [pc, #196]	; (8014b90 <systemd_init+0x6f4>)
			internal_bus.send(&batt_info);
 8014aca:	4c32      	ldr	r4, [pc, #200]	; (8014b94 <systemd_init+0x6f8>)
	bus->send(&state);
 8014acc:	f7fc ff2a 	bl	8011924 <_ZN10MessageBus4sendI21Power_ControllerStateEEbPT_>
	console.printf("Power system V4 is now ready\r\n", HAL_GetUIDw0());
 8014ad0:	f7ed faa6 	bl	8002020 <HAL_GetUIDw0>
 8014ad4:	4930      	ldr	r1, [pc, #192]	; (8014b98 <systemd_init+0x6fc>)
 8014ad6:	4602      	mov	r2, r0
 8014ad8:	4830      	ldr	r0, [pc, #192]	; (8014b9c <systemd_init+0x700>)
 8014ada:	f7f6 fdc1 	bl	800b660 <_ZN7Console6printfEPKcz>
		float energy = general_monitor->getEnergy();
 8014ade:	4628      	mov	r0, r5
		float soc = 100.0f * (1.0f - energy / BATTERY_CHARGE);
 8014ae0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		float energy = general_monitor->getEnergy();
 8014ae4:	f000 fa08 	bl	8014ef8 <_ZN11PowerThread9getEnergyEv>
		float soc = 100.0f * (1.0f - energy / BATTERY_CHARGE);
 8014ae8:	eec0 7a2a 	vdiv.f32	s15, s0, s21
		if(general_monitor->isRunning()) {
 8014aec:	f898 3010 	ldrb.w	r3, [r8, #16]
		float soc = 100.0f * (1.0f - energy / BATTERY_CHARGE);
 8014af0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014af4:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014ba0 <systemd_init+0x704>
 8014af8:	ee28 8a27 	vmul.f32	s16, s16, s15
		if(general_monitor->isRunning()) {
 8014afc:	b19b      	cbz	r3, 8014b26 <systemd_init+0x68a>
			batt_info.charge = soc / 100.0f;
 8014afe:	ee88 7a27 	vdiv.f32	s14, s16, s15
			batt_info.estimated_runtime = soc * 1.2f;
 8014b02:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014ba4 <systemd_init+0x708>
			MAKE_RELIABLE(batt_info);
 8014b06:	2108      	movs	r1, #8
 8014b08:	a808      	add	r0, sp, #32
			batt_info.estimated_runtime = soc * 1.2f;
 8014b0a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014b0e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
			batt_info.charge = soc / 100.0f;
 8014b12:	ed8d 7a08 	vstr	s14, [sp, #32]
			MAKE_RELIABLE(batt_info);
 8014b16:	f7fd ff47 	bl	80129a8 <_Z5crc16PKht>
			internal_bus.send(&batt_info);
 8014b1a:	a908      	add	r1, sp, #32
			MAKE_RELIABLE(batt_info);
 8014b1c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
			internal_bus.send(&batt_info);
 8014b20:	4620      	mov	r0, r4
 8014b22:	f7fc fe6b 	bl	80117fc <_ZN10MessageBus4sendI17Power_BatteryInfoEEbPT_>
		logging->beginBlock();
 8014b26:	6838      	ldr	r0, [r7, #0]
 8014b28:	f7ff f97c 	bl	8013e24 <_ZN7Logging10beginBlockEv>
		fetch_transmit_log(&power_monitor0, LVA, &internal_bus);
 8014b2c:	4622      	mov	r2, r4
 8014b2e:	2102      	movs	r1, #2
 8014b30:	480e      	ldr	r0, [pc, #56]	; (8014b6c <systemd_init+0x6d0>)
 8014b32:	f7ff fc53 	bl	80143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>
		fetch_transmit_log(&power_monitor1, LVB, &internal_bus);
 8014b36:	4622      	mov	r2, r4
 8014b38:	2103      	movs	r1, #3
 8014b3a:	480e      	ldr	r0, [pc, #56]	; (8014b74 <systemd_init+0x6d8>)
 8014b3c:	f7ff fc4e 	bl	80143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>
		fetch_transmit_log(&power_monitor2, HVA, &internal_bus);
 8014b40:	4622      	mov	r2, r4
 8014b42:	2104      	movs	r1, #4
 8014b44:	e048      	b.n	8014bd8 <systemd_init+0x73c>
 8014b46:	bf00      	nop
 8014b48:	24000bf8 	.word	0x24000bf8
 8014b4c:	24000a98 	.word	0x24000a98
 8014b50:	24043a5c 	.word	0x24043a5c
 8014b54:	0801434f 	.word	0x0801434f
 8014b58:	240416a0 	.word	0x240416a0
 8014b5c:	24043a8c 	.word	0x24043a8c
 8014b60:	08014351 	.word	0x08014351
 8014b64:	0801ddb4 	.word	0x0801ddb4
 8014b68:	24000734 	.word	0x24000734
 8014b6c:	2404399c 	.word	0x2404399c
 8014b70:	08014353 	.word	0x08014353
 8014b74:	240439cc 	.word	0x240439cc
 8014b78:	08014355 	.word	0x08014355
 8014b7c:	240439fc 	.word	0x240439fc
 8014b80:	08014357 	.word	0x08014357
 8014b84:	24043a2c 	.word	0x24043a2c
 8014b88:	08014345 	.word	0x08014345
 8014b8c:	44160000 	.word	0x44160000
 8014b90:	24043dfc 	.word	0x24043dfc
 8014b94:	24041874 	.word	0x24041874
 8014b98:	0801d72f 	.word	0x0801d72f
 8014b9c:	24041060 	.word	0x24041060
 8014ba0:	42c80000 	.word	0x42c80000
 8014ba4:	3f99999a 	.word	0x3f99999a
 8014ba8:	2404167c 	.word	0x2404167c
 8014bac:	24000064 	.word	0x24000064
 8014bb0:	24041768 	.word	0x24041768
 8014bb4:	24041680 	.word	0x24041680
 8014bb8:	2400008c 	.word	0x2400008c
 8014bbc:	240417c0 	.word	0x240417c0
 8014bc0:	24041674 	.word	0x24041674
 8014bc4:	24000014 	.word	0x24000014
 8014bc8:	240416b8 	.word	0x240416b8
 8014bcc:	24041678 	.word	0x24041678
 8014bd0:	2400003c 	.word	0x2400003c
 8014bd4:	24041710 	.word	0x24041710
 8014bd8:	485f      	ldr	r0, [pc, #380]	; (8014d58 <systemd_init+0x8bc>)
 8014bda:	f7ff fbff 	bl	80143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>
		fetch_transmit_log(&power_monitor3, HVB, &internal_bus);
 8014bde:	4622      	mov	r2, r4
 8014be0:	2105      	movs	r1, #5
 8014be2:	485e      	ldr	r0, [pc, #376]	; (8014d5c <systemd_init+0x8c0>)
 8014be4:	f7ff fbfa 	bl	80143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>
		fetch_transmit_log(&power_monitor4, MOTORS, &internal_bus);
 8014be8:	4622      	mov	r2, r4
 8014bea:	2101      	movs	r1, #1
 8014bec:	485c      	ldr	r0, [pc, #368]	; (8014d60 <systemd_init+0x8c4>)
 8014bee:	f7ff fbf5 	bl	80143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>
		fetch_transmit_log(&power_monitor5, BATTERY, &internal_bus);
 8014bf2:	4622      	mov	r2, r4
 8014bf4:	2100      	movs	r1, #0
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f7ff fbf0 	bl	80143dc <_Z18fetch_transmit_logP11PowerThread12PowerMonitorP10MessageBus>
		logging->endBlock();
 8014bfc:	6838      	ldr	r0, [r7, #0]
 8014bfe:	f7ff f963 	bl	8013ec8 <_ZN7Logging8endBlockEv>
		health.heap = (float) (configTOTAL_HEAP_SIZE - xPortGetFreeHeapSize()) / configTOTAL_HEAP_SIZE;
 8014c02:	f7f6 fcfd 	bl	800b600 <xPortGetFreeHeapSize>
 8014c06:	f5c0 2380 	rsb	r3, r0, #262144	; 0x40000
		health.flash = logging->getFlashUsage();
 8014c0a:	6838      	ldr	r0, [r7, #0]
		health.heap = (float) (configTOTAL_HEAP_SIZE - xPortGetFreeHeapSize()) / configTOTAL_HEAP_SIZE;
 8014c0c:	ee07 3a90 	vmov	s15, r3
 8014c10:	eefb 7ac7 	vcvt.f32.u32	s15, s15, #18
 8014c14:	edcd 7a05 	vstr	s15, [sp, #20]
		health.flash = logging->getFlashUsage();
 8014c18:	f7ff f982 	bl	8013f20 <_ZN7Logging13getFlashUsageEv>
		MAKE_RELIABLE(health);
 8014c1c:	2108      	movs	r1, #8
 8014c1e:	a805      	add	r0, sp, #20
		health.flash = logging->getFlashUsage();
 8014c20:	ed8d 0a06 	vstr	s0, [sp, #24]
		MAKE_RELIABLE(health);
 8014c24:	f7fd fec0 	bl	80129a8 <_Z5crc16PKht>
		main_bus.send(&health);
 8014c28:	a905      	add	r1, sp, #20
		MAKE_RELIABLE(health);
 8014c2a:	f8ad 001c 	strh.w	r0, [sp, #28]
		main_bus.send(&health);
 8014c2e:	484d      	ldr	r0, [pc, #308]	; (8014d64 <systemd_init+0x8c8>)
 8014c30:	f7fc fe2e 	bl	8011890 <_ZN10MessageBus4sendI22Power_ControllerHealthEEbPT_>
		if(general_monitor->isRunning() && (AUTO_SUMMARY || monitor.enter(SUMMARY_MONITOR))) {
 8014c34:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	f000 8088 	beq.w	8014d4e <systemd_init+0x8b2>
 8014c3e:	2101      	movs	r1, #1
 8014c40:	4849      	ldr	r0, [pc, #292]	; (8014d68 <systemd_init+0x8cc>)
 8014c42:	f7f6 fd2f 	bl	800b6a4 <_ZN7Monitor5enterEh>
 8014c46:	2800      	cmp	r0, #0
 8014c48:	f000 8081 	beq.w	8014d4e <systemd_init+0x8b2>
			float general_power = general_monitor->getPower();
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	f000 fa55 	bl	80150fc <_ZN11PowerThread8getPowerEv>
			float general_energy = general_monitor->getEnergy();
 8014c52:	4628      	mov	r0, r5
			float general_power = general_monitor->getPower();
 8014c54:	eeb0 aa40 	vmov.f32	s20, s0
			float general_energy = general_monitor->getEnergy();
 8014c58:	f000 f94e 	bl	8014ef8 <_ZN11PowerThread9getEnergyEv>
			float general_voltage = general_monitor->getVoltage();
 8014c5c:	4628      	mov	r0, r5
			float general_energy = general_monitor->getEnergy();
 8014c5e:	eef0 9a40 	vmov.f32	s19, s0
			float general_voltage = general_monitor->getVoltage();
 8014c62:	f000 fa2f 	bl	80150c4 <_ZN11PowerThread10getVoltageEv>
			float general_temperature = general_monitor->getTemperature();
 8014c66:	4628      	mov	r0, r5
			float general_voltage = general_monitor->getVoltage();
 8014c68:	eeb0 9a40 	vmov.f32	s18, s0
			float general_temperature = general_monitor->getTemperature();
 8014c6c:	f000 fa3a 	bl	80150e4 <_ZN11PowerThread14getTemperatureEv>
			uint8_t range = (uint8_t) (soc * 0.78f);
 8014c70:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8014d6c <systemd_init+0x8d0>
				battery_charge[i] = '=';
 8014c74:	213d      	movs	r1, #61	; 0x3d
 8014c76:	a808      	add	r0, sp, #32
			float general_temperature = general_monitor->getTemperature();
 8014c78:	eef0 8a40 	vmov.f32	s17, s0
			uint8_t range = (uint8_t) (soc * 0.78f);
 8014c7c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c84:	edcd 7a03 	vstr	s15, [sp, #12]
 8014c88:	f89d 600c 	ldrb.w	r6, [sp, #12]
				battery_charge[i] = '=';
 8014c8c:	4632      	mov	r2, r6
 8014c8e:	f001 fa7f 	bl	8016190 <memset>
				battery_charge[i] = ' ';
 8014c92:	2120      	movs	r1, #32
 8014c94:	f1c6 024e 	rsb	r2, r6, #78	; 0x4e
 8014c98:	eb0d 0301 	add.w	r3, sp, r1
 8014c9c:	b2d2      	uxtb	r2, r2
 8014c9e:	1998      	adds	r0, r3, r6
 8014ca0:	f001 fa76 	bl	8016190 <memset>
			console.printf("Power: %.3fW\x1b[K\r\n", general_power);
 8014ca4:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 8014ca8:	4931      	ldr	r1, [pc, #196]	; (8014d70 <systemd_init+0x8d4>)
 8014caa:	4832      	ldr	r0, [pc, #200]	; (8014d74 <systemd_init+0x8d8>)
 8014cac:	ec53 2b17 	vmov	r2, r3, d7
 8014cb0:	f7f6 fcd6 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("Energy: %.3fWh\x1b[K\r\n", general_energy);
 8014cb4:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
 8014cb8:	492f      	ldr	r1, [pc, #188]	; (8014d78 <systemd_init+0x8dc>)
 8014cba:	482e      	ldr	r0, [pc, #184]	; (8014d74 <systemd_init+0x8d8>)
 8014cbc:	ec53 2b17 	vmov	r2, r3, d7
 8014cc0:	f7f6 fcce 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("Bus voltage: %.3fV\x1b[K\r\n", general_voltage);
 8014cc4:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
 8014cc8:	492c      	ldr	r1, [pc, #176]	; (8014d7c <systemd_init+0x8e0>)
 8014cca:	482a      	ldr	r0, [pc, #168]	; (8014d74 <systemd_init+0x8d8>)
 8014ccc:	ec53 2b17 	vmov	r2, r3, d7
 8014cd0:	f7f6 fcc6 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("Bus temperature: %.3f°C\x1b[K\r\n", general_temperature);
 8014cd4:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8014cd8:	4929      	ldr	r1, [pc, #164]	; (8014d80 <systemd_init+0x8e4>)
 8014cda:	4826      	ldr	r0, [pc, #152]	; (8014d74 <systemd_init+0x8d8>)
 8014cdc:	ec53 2b17 	vmov	r2, r3, d7
 8014ce0:	f7f6 fcbe 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("LVA status: %s\x1b[K\r\n", lva_supply.getStatus());
 8014ce4:	4827      	ldr	r0, [pc, #156]	; (8014d84 <systemd_init+0x8e8>)
 8014ce6:	f000 fc63 	bl	80155b0 <_ZN12SupplyThread9getStatusEv>
 8014cea:	4927      	ldr	r1, [pc, #156]	; (8014d88 <systemd_init+0x8ec>)
 8014cec:	4602      	mov	r2, r0
 8014cee:	4821      	ldr	r0, [pc, #132]	; (8014d74 <systemd_init+0x8d8>)
 8014cf0:	f7f6 fcb6 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("LVB status: %s\x1b[K\r\n", lvb_supply.getStatus());
 8014cf4:	4825      	ldr	r0, [pc, #148]	; (8014d8c <systemd_init+0x8f0>)
 8014cf6:	f000 fc5b 	bl	80155b0 <_ZN12SupplyThread9getStatusEv>
 8014cfa:	4925      	ldr	r1, [pc, #148]	; (8014d90 <systemd_init+0x8f4>)
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	481d      	ldr	r0, [pc, #116]	; (8014d74 <systemd_init+0x8d8>)
 8014d00:	f7f6 fcae 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("HVA status: %s\x1b[K\r\n", hva_supply.getStatus());
 8014d04:	4823      	ldr	r0, [pc, #140]	; (8014d94 <systemd_init+0x8f8>)
 8014d06:	f000 fc53 	bl	80155b0 <_ZN12SupplyThread9getStatusEv>
 8014d0a:	4923      	ldr	r1, [pc, #140]	; (8014d98 <systemd_init+0x8fc>)
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	4819      	ldr	r0, [pc, #100]	; (8014d74 <systemd_init+0x8d8>)
 8014d10:	f7f6 fca6 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("HVB status: %s\x1b[K\r\n", hvb_supply.getStatus());
 8014d14:	4821      	ldr	r0, [pc, #132]	; (8014d9c <systemd_init+0x900>)
 8014d16:	f000 fc4b 	bl	80155b0 <_ZN12SupplyThread9getStatusEv>
 8014d1a:	4921      	ldr	r1, [pc, #132]	; (8014da0 <systemd_init+0x904>)
 8014d1c:	4602      	mov	r2, r0
 8014d1e:	4815      	ldr	r0, [pc, #84]	; (8014d74 <systemd_init+0x8d8>)
 8014d20:	f7f6 fc9e 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("Battery: %.3f%%\x1b[K\r\n", soc);
 8014d24:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8014d28:	491e      	ldr	r1, [pc, #120]	; (8014da4 <systemd_init+0x908>)
 8014d2a:	4812      	ldr	r0, [pc, #72]	; (8014d74 <systemd_init+0x8d8>)
 8014d2c:	ec53 2b17 	vmov	r2, r3, d7
 8014d30:	f7f6 fc96 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("\x1b[K\r\n");
 8014d34:	491c      	ldr	r1, [pc, #112]	; (8014da8 <systemd_init+0x90c>)
 8014d36:	480f      	ldr	r0, [pc, #60]	; (8014d74 <systemd_init+0x8d8>)
 8014d38:	f7f6 fc92 	bl	800b660 <_ZN7Console6printfEPKcz>
			console.printf("[%s]\n", battery_charge);
 8014d3c:	491b      	ldr	r1, [pc, #108]	; (8014dac <systemd_init+0x910>)
 8014d3e:	480d      	ldr	r0, [pc, #52]	; (8014d74 <systemd_init+0x8d8>)
 8014d40:	aa08      	add	r2, sp, #32
 8014d42:	f7f6 fc8d 	bl	800b660 <_ZN7Console6printfEPKcz>
				monitor.exit(SUMMARY_MONITOR);
 8014d46:	2101      	movs	r1, #1
 8014d48:	4807      	ldr	r0, [pc, #28]	; (8014d68 <systemd_init+0x8cc>)
 8014d4a:	f7f6 fcd5 	bl	800b6f8 <_ZN7Monitor4exitEh>
		osDelay(1000);
 8014d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d52:	f7f4 fef8 	bl	8009b46 <osDelay>
	}
 8014d56:	e6c2      	b.n	8014ade <systemd_init+0x642>
 8014d58:	240439fc 	.word	0x240439fc
 8014d5c:	24043a2c 	.word	0x24043a2c
 8014d60:	24043a5c 	.word	0x24043a5c
 8014d64:	24043dfc 	.word	0x24043dfc
 8014d68:	24041168 	.word	0x24041168
 8014d6c:	3f47ae14 	.word	0x3f47ae14
 8014d70:	0801d74e 	.word	0x0801d74e
 8014d74:	24041060 	.word	0x24041060
 8014d78:	0801d760 	.word	0x0801d760
 8014d7c:	0801d774 	.word	0x0801d774
 8014d80:	0801d78c 	.word	0x0801d78c
 8014d84:	24041768 	.word	0x24041768
 8014d88:	0801d7aa 	.word	0x0801d7aa
 8014d8c:	240417c0 	.word	0x240417c0
 8014d90:	0801d7be 	.word	0x0801d7be
 8014d94:	240416b8 	.word	0x240416b8
 8014d98:	0801d7d2 	.word	0x0801d7d2
 8014d9c:	24041710 	.word	0x24041710
 8014da0:	0801d7e6 	.word	0x0801d7e6
 8014da4:	0801d7fa 	.word	0x0801d7fa
 8014da8:	0801d809 	.word	0x0801d809
 8014dac:	0801d80f 	.word	0x0801d80f

08014db0 <__tcf_5>:
	static GUIThread gui(&hspi4, &internal_bus);
 8014db0:	4801      	ldr	r0, [pc, #4]	; (8014db8 <__tcf_5+0x8>)
 8014db2:	f7f7 bde5 	b.w	800c980 <_ZN9GUIThreadD1Ev>
 8014db6:	bf00      	nop
 8014db8:	24043ad0 	.word	0x24043ad0

08014dbc <__tcf_1>:
	static STMUARTDriver uart_driver(&huart2);
 8014dbc:	4801      	ldr	r0, [pc, #4]	; (8014dc4 <__tcf_1+0x8>)
 8014dbe:	f7fd bcd9 	b.w	8012774 <_ZN13STMUARTDriverD1Ev>
 8014dc2:	bf00      	nop
 8014dc4:	24041818 	.word	0x24041818

08014dc8 <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (2048) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 8014dc8:	b510      	push	{r4, lr}
 8014dca:	4604      	mov	r4, r0
	Thread* thread = (Thread*) arg;

	osDelay(100 / portTICK_PERIOD_MS);
 8014dcc:	2064      	movs	r0, #100	; 0x64
 8014dce:	f7f4 feba 	bl	8009b46 <osDelay>

	thread->init();
 8014dd2:	6823      	ldr	r3, [r4, #0]
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	4798      	blx	r3

	while(thread->isRunning()) {
 8014dda:	7c20      	ldrb	r0, [r4, #16]
 8014ddc:	b138      	cbz	r0, 8014dee <_Z10__task_runPKv+0x26>
		thread->loop();
 8014dde:	6823      	ldr	r3, [r4, #0]
 8014de0:	4620      	mov	r0, r4
 8014de2:	691b      	ldr	r3, [r3, #16]
 8014de4:	4798      	blx	r3
		osDelay(thread->getTickDelay() / portTICK_PERIOD_MS);
 8014de6:	6960      	ldr	r0, [r4, #20]
 8014de8:	f7f4 fead 	bl	8009b46 <osDelay>
	while(thread->isRunning()) {
 8014dec:	e7f5      	b.n	8014dda <_Z10__task_runPKv+0x12>
	}

	vTaskDelete(nullptr);
 8014dee:	f7f5 fd71 	bl	800a8d4 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 8014df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014df6:	f7f4 fea6 	bl	8009b46 <osDelay>
	while(true) {
 8014dfa:	e7fa      	b.n	8014df2 <_Z10__task_runPKv+0x2a>

08014dfc <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) : delay(10) {
 8014dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dfe:	461e      	mov	r6, r3
 8014e00:	4b0e      	ldr	r3, [pc, #56]	; (8014e3c <_ZN6ThreadC1EPKc10osPrioritym+0x40>)
 8014e02:	b089      	sub	sp, #36	; 0x24
 8014e04:	4604      	mov	r4, r0
 8014e06:	6003      	str	r3, [r0, #0]
 8014e08:	2301      	movs	r3, #1
 8014e0a:	460d      	mov	r5, r1
 8014e0c:	4617      	mov	r7, r2
 8014e0e:	7403      	strb	r3, [r0, #16]
 8014e10:	230a      	movs	r3, #10
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 8014e12:	2214      	movs	r2, #20
 8014e14:	2100      	movs	r1, #0
Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) : delay(10) {
 8014e16:	6143      	str	r3, [r0, #20]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 8014e18:	a803      	add	r0, sp, #12
 8014e1a:	f001 f9b9 	bl	8016190 <memset>
 8014e1e:	4b08      	ldr	r3, [pc, #32]	; (8014e40 <_ZN6ThreadC1EPKc10osPrioritym+0x44>)
	this->handle = osThreadCreate(&thread, this);
 8014e20:	4621      	mov	r1, r4
 8014e22:	a801      	add	r0, sp, #4
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 8014e24:	f8ad 700c 	strh.w	r7, [sp, #12]
 8014e28:	9605      	str	r6, [sp, #20]
 8014e2a:	e9cd 5301 	strd	r5, r3, [sp, #4]
	this->handle = osThreadCreate(&thread, this);
 8014e2e:	f7f4 fe62 	bl	8009af6 <osThreadCreate>
	this->name = name;
 8014e32:	e9c4 0502 	strd	r0, r5, [r4, #8]
}
 8014e36:	4620      	mov	r0, r4
 8014e38:	b009      	add	sp, #36	; 0x24
 8014e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e3c:	0801d9f4 	.word	0x0801d9f4
 8014e40:	08014dc9 	.word	0x08014dc9

08014e44 <_ZN6ThreadC1EPKc10osPriority>:
Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 8014e44:	b510      	push	{r4, lr}
 8014e46:	4604      	mov	r4, r0
 8014e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e4c:	f7ff ffd6 	bl	8014dfc <_ZN6ThreadC1EPKc10osPrioritym>
}
 8014e50:	4620      	mov	r0, r4
 8014e52:	bd10      	pop	{r4, pc}

08014e54 <_ZN6ThreadC1EPKc>:
Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
 8014e54:	b510      	push	{r4, lr}
 8014e56:	4604      	mov	r4, r0
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f7ff fff3 	bl	8014e44 <_ZN6ThreadC1EPKc10osPriority>
}
 8014e5e:	4620      	mov	r0, r4
 8014e60:	bd10      	pop	{r4, pc}

08014e62 <_ZN6ThreadC1EPKcm>:
Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
 8014e62:	b510      	push	{r4, lr}
 8014e64:	4604      	mov	r4, r0
 8014e66:	4613      	mov	r3, r2
 8014e68:	2200      	movs	r2, #0
 8014e6a:	f7ff ffc7 	bl	8014dfc <_ZN6ThreadC1EPKc10osPrioritym>
}
 8014e6e:	4620      	mov	r0, r4
 8014e70:	bd10      	pop	{r4, pc}

08014e72 <_ZN6Thread9terminateEv>:
osThreadId Thread::getHandle() {
	return handle;
}

void Thread::terminate() {
	this->running = false;
 8014e72:	2300      	movs	r3, #0
 8014e74:	7403      	strb	r3, [r0, #16]
}
 8014e76:	4770      	bx	lr

08014e78 <_ZN6Thread7printlnEPKcz>:

void Thread::println(const char* format, ...) {
 8014e78:	b40e      	push	{r1, r2, r3}
 8014e7a:	b533      	push	{r0, r1, r4, r5, lr}
 8014e7c:	ab05      	add	r3, sp, #20
	va_list args;
	va_start(args, format);

	sprintf(buffer, "[%s] ", name);
 8014e7e:	4c0f      	ldr	r4, [pc, #60]	; (8014ebc <_ZN6Thread7printlnEPKcz+0x44>)
 8014e80:	68c2      	ldr	r2, [r0, #12]
void Thread::println(const char* format, ...) {
 8014e82:	f853 5b04 	ldr.w	r5, [r3], #4
	sprintf(buffer, "[%s] ", name);
 8014e86:	4620      	mov	r0, r4
 8014e88:	490d      	ldr	r1, [pc, #52]	; (8014ec0 <_ZN6Thread7printlnEPKcz+0x48>)
	va_start(args, format);
 8014e8a:	9301      	str	r3, [sp, #4]
	sprintf(buffer, "[%s] ", name);
 8014e8c:	f002 f95c 	bl	8017148 <siprintf>
	vsprintf(buffer + strlen(buffer), format, args);
 8014e90:	4620      	mov	r0, r4
 8014e92:	f7eb fa2f 	bl	80002f4 <strlen>
 8014e96:	9a01      	ldr	r2, [sp, #4]
 8014e98:	4629      	mov	r1, r5
 8014e9a:	4420      	add	r0, r4
 8014e9c:	f003 f88e 	bl	8017fbc <vsiprintf>
	strcat(buffer, "\r\n");
 8014ea0:	4908      	ldr	r1, [pc, #32]	; (8014ec4 <_ZN6Thread7printlnEPKcz+0x4c>)
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	f002 f9b3 	bl	801720e <strcat>

	console.print(buffer);
 8014ea8:	4621      	mov	r1, r4
 8014eaa:	4807      	ldr	r0, [pc, #28]	; (8014ec8 <_ZN6Thread7printlnEPKcz+0x50>)
 8014eac:	f7f6 fbc7 	bl	800b63e <_ZN7Console5printEPKc>

	va_end(args);
}
 8014eb0:	b002      	add	sp, #8
 8014eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014eb6:	b003      	add	sp, #12
 8014eb8:	4770      	bx	lr
 8014eba:	bf00      	nop
 8014ebc:	24045f25 	.word	0x24045f25
 8014ec0:	0801d9e4 	.word	0x0801d9e4
 8014ec4:	0801d5f2 	.word	0x0801d5f2
 8014ec8:	24041060 	.word	0x24041060

08014ecc <_ZN6Thread12setTickDelayEm>:

void Thread::setTickDelay(uint32_t ms) {
	this->delay = ms;
 8014ecc:	6141      	str	r1, [r0, #20]
}
 8014ece:	4770      	bx	lr

08014ed0 <_Z8toString12PowerMonitor>:
 */

#include "PowerMonitors.h"

const char* toString(PowerMonitor monitor) {
	switch(monitor) {
 8014ed0:	2805      	cmp	r0, #5
 8014ed2:	bf9a      	itte	ls
 8014ed4:	4b02      	ldrls	r3, [pc, #8]	; (8014ee0 <_Z8toString12PowerMonitor+0x10>)
 8014ed6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* toString(PowerMonitor monitor) {
 8014eda:	4802      	ldrhi	r0, [pc, #8]	; (8014ee4 <_Z8toString12PowerMonitor+0x14>)
	case HVB:
		return "HVB";
	}

	return "Unknown";
}
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	0801da30 	.word	0x0801da30
 8014ee4:	0801da08 	.word	0x0801da08

08014ee8 <_ZN11PowerThreadD1Ev>:
class PowerThread : public Thread {
 8014ee8:	4770      	bx	lr

08014eea <_ZN11PowerThreadD0Ev>:
 8014eea:	b510      	push	{r4, lr}
 8014eec:	4604      	mov	r4, r0
 8014eee:	2130      	movs	r1, #48	; 0x30
 8014ef0:	f000 fbd6 	bl	80156a0 <_ZdlPvj>
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	bd10      	pop	{r4, pc}

08014ef8 <_ZN11PowerThread9getEnergyEv>:
	read(INA239_POWER_REG, (uint8_t*) &value, 3);
	return 1E-3f * ((1000 * value * MAX_CURRENT / 5) >> 14);
}

float PowerThread::getEnergy() {
	return 1E-6f * energy / 3600;
 8014ef8:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8014efc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8014f10 <_ZN11PowerThread9getEnergyEv+0x18>
 8014f00:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8014f04:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014f14 <_ZN11PowerThread9getEnergyEv+0x1c>
 8014f08:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	358637bd 	.word	0x358637bd
 8014f14:	45610000 	.word	0x45610000

08014f18 <_ZN11PowerThread5writeEhPhh>:

bool PowerThread::set(uint8_t reg, uint16_t value) {
	return write(reg, (uint8_t*) &value, 2);
}

bool PowerThread::write(uint8_t reg, uint8_t *data, uint8_t size) {
 8014f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t tx_buffer[4];
	tx_buffer[0] = (reg << 2) | 0b00;
 8014f1a:	0089      	lsls	r1, r1, #2
bool PowerThread::write(uint8_t reg, uint8_t *data, uint8_t size) {
 8014f1c:	461c      	mov	r4, r3
 8014f1e:	4605      	mov	r5, r0
	tx_buffer[0] = (reg << 2) | 0b00;
 8014f20:	f88d 1004 	strb.w	r1, [sp, #4]

	for(uint8_t i = 0; i < size; i++) {
 8014f24:	18d1      	adds	r1, r2, r3
 8014f26:	ab01      	add	r3, sp, #4
 8014f28:	461e      	mov	r6, r3
 8014f2a:	4291      	cmp	r1, r2
 8014f2c:	f103 0301 	add.w	r3, r3, #1
 8014f30:	d003      	beq.n	8014f3a <_ZN11PowerThread5writeEhPhh+0x22>
		tx_buffer[i+1] = data[size-i-1];
 8014f32:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8014f36:	7018      	strb	r0, [r3, #0]
	for(uint8_t i = 0; i < size; i++) {
 8014f38:	e7f7      	b.n	8014f2a <_ZN11PowerThread5writeEhPhh+0x12>
  __ASM volatile ("cpsid i" : : : "memory");
 8014f3a:	b672      	cpsid	i
	}

	__disable_irq();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	210e      	movs	r1, #14
 8014f40:	480e      	ldr	r0, [pc, #56]	; (8014f7c <_ZN11PowerThread5writeEhPhh+0x64>)
 8014f42:	f7ef fd5f 	bl	8004a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, device_id << 1, GPIO_PIN_SET);
 8014f46:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	480b      	ldr	r0, [pc, #44]	; (8014f7c <_ZN11PowerThread5writeEhPhh+0x64>)
 8014f4e:	4091      	lsls	r1, r2
 8014f50:	f7ef fd58 	bl	8004a04 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, tx_buffer, size+1, 10 / portTICK_PERIOD_MS);
 8014f54:	1c62      	adds	r2, r4, #1
 8014f56:	230a      	movs	r3, #10
 8014f58:	4631      	mov	r1, r6
 8014f5a:	b2d2      	uxtb	r2, r2
 8014f5c:	69a8      	ldr	r0, [r5, #24]
 8014f5e:	f7f2 fef2 	bl	8007d46 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8014f62:	2201      	movs	r2, #1
	HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, tx_buffer, size+1, 10 / portTICK_PERIOD_MS);
 8014f64:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8014f66:	210e      	movs	r1, #14
 8014f68:	4804      	ldr	r0, [pc, #16]	; (8014f7c <_ZN11PowerThread5writeEhPhh+0x64>)
 8014f6a:	f7ef fd4b 	bl	8004a04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8014f6e:	b662      	cpsie	i
	__enable_irq();

	return status == HAL_OK;
}
 8014f70:	fab4 f084 	clz	r0, r4
 8014f74:	0940      	lsrs	r0, r0, #5
 8014f76:	b002      	add	sp, #8
 8014f78:	bd70      	pop	{r4, r5, r6, pc}
 8014f7a:	bf00      	nop
 8014f7c:	58020000 	.word	0x58020000

08014f80 <_ZN11PowerThread3setEht>:
bool PowerThread::set(uint8_t reg, uint16_t value) {
 8014f80:	b507      	push	{r0, r1, r2, lr}
	return write(reg, (uint8_t*) &value, 2);
 8014f82:	2302      	movs	r3, #2
bool PowerThread::set(uint8_t reg, uint16_t value) {
 8014f84:	f8ad 2006 	strh.w	r2, [sp, #6]
	return write(reg, (uint8_t*) &value, 2);
 8014f88:	f10d 0206 	add.w	r2, sp, #6
 8014f8c:	f7ff ffc4 	bl	8014f18 <_ZN11PowerThread5writeEhPhh>
}
 8014f90:	b003      	add	sp, #12
 8014f92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014f98 <_ZN11PowerThread4readEhPhh>:

bool PowerThread::read(uint8_t reg, uint8_t *data, uint8_t size) {
	uint8_t rx_buffer[4];
	rx_buffer[0] = (reg << 2) | 0b01;
 8014f98:	0089      	lsls	r1, r1, #2
bool PowerThread::read(uint8_t reg, uint8_t *data, uint8_t size) {
 8014f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
	rx_buffer[0] = (reg << 2) | 0b01;
 8014f9c:	f041 0101 	orr.w	r1, r1, #1
bool PowerThread::read(uint8_t reg, uint8_t *data, uint8_t size) {
 8014fa0:	b085      	sub	sp, #20
 8014fa2:	4607      	mov	r7, r0
 8014fa4:	4615      	mov	r5, r2
 8014fa6:	461c      	mov	r4, r3
	rx_buffer[0] = (reg << 2) | 0b01;
 8014fa8:	f88d 100c 	strb.w	r1, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014fac:	b672      	cpsid	i

	__disable_irq();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8014fae:	2200      	movs	r2, #0
 8014fb0:	210e      	movs	r1, #14
 8014fb2:	4814      	ldr	r0, [pc, #80]	; (8015004 <_ZN11PowerThread4readEhPhh+0x6c>)
	HAL_GPIO_WritePin(GPIOA, device_id << 1, GPIO_PIN_SET);
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(spi, rx_buffer, rx_buffer, size+1, 100 / portTICK_PERIOD_MS);
 8014fb4:	ae03      	add	r6, sp, #12
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8014fb6:	f7ef fd25 	bl	8004a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, device_id << 1, GPIO_PIN_SET);
 8014fba:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	4810      	ldr	r0, [pc, #64]	; (8015004 <_ZN11PowerThread4readEhPhh+0x6c>)
 8014fc2:	4091      	lsls	r1, r2
 8014fc4:	f7ef fd1e 	bl	8004a04 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(spi, rx_buffer, rx_buffer, size+1, 100 / portTICK_PERIOD_MS);
 8014fc8:	2364      	movs	r3, #100	; 0x64
 8014fca:	4632      	mov	r2, r6
 8014fcc:	4631      	mov	r1, r6
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	1c63      	adds	r3, r4, #1
 8014fd2:	69b8      	ldr	r0, [r7, #24]
 8014fd4:	f7f2 ffd6 	bl	8007f84 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8014fd8:	2201      	movs	r2, #1
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(spi, rx_buffer, rx_buffer, size+1, 100 / portTICK_PERIOD_MS);
 8014fda:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8014fdc:	210e      	movs	r1, #14
 8014fde:	4809      	ldr	r0, [pc, #36]	; (8015004 <_ZN11PowerThread4readEhPhh+0x6c>)
 8014fe0:	f7ef fd10 	bl	8004a04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8014fe4:	b662      	cpsie	i
	__enable_irq();

	for(uint8_t i = 0; i < size; i++) {
 8014fe6:	1933      	adds	r3, r6, r4
 8014fe8:	1e6a      	subs	r2, r5, #1
 8014fea:	42b3      	cmp	r3, r6
 8014fec:	d004      	beq.n	8014ff8 <_ZN11PowerThread4readEhPhh+0x60>
		data[i] = rx_buffer[size-i];
 8014fee:	f813 1901 	ldrb.w	r1, [r3], #-1
 8014ff2:	f802 1f01 	strb.w	r1, [r2, #1]!
	for(uint8_t i = 0; i < size; i++) {
 8014ff6:	e7f8      	b.n	8014fea <_ZN11PowerThread4readEhPhh+0x52>
	}

	return status == HAL_OK;
}
 8014ff8:	fab7 f087 	clz	r0, r7
 8014ffc:	0940      	lsrs	r0, r0, #5
 8014ffe:	b005      	add	sp, #20
 8015000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015002:	bf00      	nop
 8015004:	58020000 	.word	0x58020000

08015008 <_ZN11PowerThread3getEh>:
	uint16_t value = 0;
 8015008:	2300      	movs	r3, #0
uint16_t PowerThread::get(uint8_t reg) {
 801500a:	b507      	push	{r0, r1, r2, lr}
	uint16_t value = 0;
 801500c:	f8ad 3006 	strh.w	r3, [sp, #6]
	read(reg, (uint8_t*) &value, 2);
 8015010:	f10d 0206 	add.w	r2, sp, #6
 8015014:	2302      	movs	r3, #2
 8015016:	f7ff ffbf 	bl	8014f98 <_ZN11PowerThread4readEhPhh>
}
 801501a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801501e:	b003      	add	sp, #12
 8015020:	f85d fb04 	ldr.w	pc, [sp], #4

08015024 <_ZN11PowerThread4initEv>:
void PowerThread::init() {
 8015024:	b570      	push	{r4, r5, r6, lr}
 8015026:	4604      	mov	r4, r0
	osDelay(100 / portTICK_PERIOD_MS);
 8015028:	2064      	movs	r0, #100	; 0x64
 801502a:	f7f4 fd8c 	bl	8009b46 <osDelay>
	if(device_id < 7) {
 801502e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8015032:	2a06      	cmp	r2, #6
 8015034:	d837      	bhi.n	80150a6 <_ZN11PowerThread4initEv+0x82>
 8015036:	2504      	movs	r5, #4
			if(get(INA239_DEVICE_ID_REG) == INA239_DEV_ID) {
 8015038:	f242 3691 	movw	r6, #9105	; 0x2391
		while(attempts-- > 0) {
 801503c:	3d01      	subs	r5, #1
 801503e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8015042:	d032      	beq.n	80150aa <_ZN11PowerThread4initEv+0x86>
			if(get(INA239_DEVICE_ID_REG) == INA239_DEV_ID) {
 8015044:	213f      	movs	r1, #63	; 0x3f
 8015046:	4620      	mov	r0, r4
 8015048:	f7ff ffde 	bl	8015008 <_ZN11PowerThread3getEh>
 801504c:	42b0      	cmp	r0, r6
 801504e:	d1f5      	bne.n	801503c <_ZN11PowerThread4initEv+0x18>
			bool status = set(INA239_CONFIG_REG, INA239_CONFIG_ADCRANGE);
 8015050:	2210      	movs	r2, #16
 8015052:	2100      	movs	r1, #0
 8015054:	4620      	mov	r0, r4
 8015056:	f7ff ff93 	bl	8014f80 <_ZN11PowerThread3setEht>
 801505a:	4605      	mov	r5, r0
			status |= set(INA239_ADC_CONFIG_REG, adc_config);
 801505c:	f24f 42bb 	movw	r2, #62651	; 0xf4bb
 8015060:	2101      	movs	r1, #1
 8015062:	4620      	mov	r0, r4
 8015064:	f7ff ff8c 	bl	8014f80 <_ZN11PowerThread3setEht>
 8015068:	4328      	orrs	r0, r5
			status |= set(INA239_SHUNT_CAL_REG, MAX_CURRENT * SHUNT_VALUE / 5);
 801506a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801506e:	2102      	movs	r1, #2
			status |= set(INA239_ADC_CONFIG_REG, adc_config);
 8015070:	b2c5      	uxtb	r5, r0
			status |= set(INA239_SHUNT_CAL_REG, MAX_CURRENT * SHUNT_VALUE / 5);
 8015072:	4620      	mov	r0, r4
 8015074:	f7ff ff84 	bl	8014f80 <_ZN11PowerThread3setEht>
			if(status) {
 8015078:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 801507c:	b905      	cbnz	r5, 8015080 <_ZN11PowerThread4initEv+0x5c>
 801507e:	b150      	cbz	r0, 8015096 <_ZN11PowerThread4initEv+0x72>
				println("Device ID %d initialized successfully", device_id);
 8015080:	490c      	ldr	r1, [pc, #48]	; (80150b4 <_ZN11PowerThread4initEv+0x90>)
 8015082:	4620      	mov	r0, r4
 8015084:	f7ff fef8 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
	timer->Instance->CR1 |= TIM_CR1_CEN;
 8015088:	69e3      	ldr	r3, [r4, #28]
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	6813      	ldr	r3, [r2, #0]
 801508e:	f043 0301 	orr.w	r3, r3, #1
 8015092:	6013      	str	r3, [r2, #0]
}
 8015094:	bd70      	pop	{r4, r5, r6, pc}
				println("Failed to configure device ID %d", device_id);
 8015096:	4908      	ldr	r1, [pc, #32]	; (80150b8 <_ZN11PowerThread4initEv+0x94>)
		println("Failed to initialize device ID %d (ID out of range)", device_id);
 8015098:	4620      	mov	r0, r4
 801509a:	f7ff feed 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
		terminate();
 801509e:	4620      	mov	r0, r4
 80150a0:	f7ff fee7 	bl	8014e72 <_ZN6Thread9terminateEv>
 80150a4:	e7f0      	b.n	8015088 <_ZN11PowerThread4initEv+0x64>
		println("Failed to initialize device ID %d (ID out of range)", device_id);
 80150a6:	4905      	ldr	r1, [pc, #20]	; (80150bc <_ZN11PowerThread4initEv+0x98>)
 80150a8:	e7f6      	b.n	8015098 <_ZN11PowerThread4initEv+0x74>
			println("Failed to initialize device ID %d", device_id);
 80150aa:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80150ae:	4904      	ldr	r1, [pc, #16]	; (80150c0 <_ZN11PowerThread4initEv+0x9c>)
 80150b0:	e7f2      	b.n	8015098 <_ZN11PowerThread4initEv+0x74>
 80150b2:	bf00      	nop
 80150b4:	0801da48 	.word	0x0801da48
 80150b8:	0801da6e 	.word	0x0801da6e
 80150bc:	0801da8f 	.word	0x0801da8f
 80150c0:	0801dac3 	.word	0x0801dac3

080150c4 <_ZN11PowerThread10getVoltageEv>:
	return 1E-6f * 3125 * get(INA239_VBUS_REG);
 80150c4:	2105      	movs	r1, #5
float PowerThread::getVoltage() {
 80150c6:	b508      	push	{r3, lr}
	return 1E-6f * 3125 * get(INA239_VBUS_REG);
 80150c8:	f7ff ff9e 	bl	8015008 <_ZN11PowerThread3getEh>
 80150cc:	ee07 0a90 	vmov	s15, r0
}
 80150d0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80150e0 <_ZN11PowerThread10getVoltageEv+0x1c>
	return 1E-6f * 3125 * get(INA239_VBUS_REG);
 80150d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80150d8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80150dc:	bd08      	pop	{r3, pc}
 80150de:	bf00      	nop
 80150e0:	3b4ccccd 	.word	0x3b4ccccd

080150e4 <_ZN11PowerThread14getTemperatureEv>:
float PowerThread::getTemperature() {
 80150e4:	b508      	push	{r3, lr}
	return 1E-3f * 125 * ((int16_t) get(INA239_DIETEMP_REG) >> INA239_DIETEMP_BIT);
 80150e6:	2106      	movs	r1, #6
 80150e8:	f7ff ff8e 	bl	8015008 <_ZN11PowerThread3getEh>
 80150ec:	f340 130b 	sbfx	r3, r0, #4, #12
 80150f0:	ee00 3a10 	vmov	s0, r3
}
 80150f4:	eeba 0aee 	vcvt.f32.s32	s0, s0, #3
 80150f8:	bd08      	pop	{r3, pc}
	...

080150fc <_ZN11PowerThread8getPowerEv>:
	int32_t value = 0;
 80150fc:	2300      	movs	r3, #0
float PowerThread::getPower() {
 80150fe:	b507      	push	{r0, r1, r2, lr}
	read(INA239_POWER_REG, (uint8_t*) &value, 3);
 8015100:	2108      	movs	r1, #8
 8015102:	aa01      	add	r2, sp, #4
	int32_t value = 0;
 8015104:	9301      	str	r3, [sp, #4]
	read(INA239_POWER_REG, (uint8_t*) &value, 3);
 8015106:	2303      	movs	r3, #3
 8015108:	f7ff ff46 	bl	8014f98 <_ZN11PowerThread4readEhPhh>
	return 1E-3f * ((1000 * value * MAX_CURRENT / 5) >> 14);
 801510c:	9b01      	ldr	r3, [sp, #4]
 801510e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
}
 8015112:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801512c <_ZN11PowerThread8getPowerEv+0x30>
	return 1E-3f * ((1000 * value * MAX_CURRENT / 5) >> 14);
 8015116:	4353      	muls	r3, r2
 8015118:	139b      	asrs	r3, r3, #14
 801511a:	ee07 3a90 	vmov	s15, r3
 801511e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8015122:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015126:	b003      	add	sp, #12
 8015128:	f85d fb04 	ldr.w	pc, [sp], #4
 801512c:	3a83126f 	.word	0x3a83126f

08015130 <_ZN11PowerThread4loopEv>:
void PowerThread::loop() {
 8015130:	b510      	push	{r4, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	ed2d 8b02 	vpush	{d8}
 8015138:	b086      	sub	sp, #24
	float power = getPower();
 801513a:	f7ff ffdf 	bl	80150fc <_ZN11PowerThread8getPowerEv>
	uint32_t current_t = timer->Instance->CNT;
 801513e:	69e3      	ldr	r3, [r4, #28]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	int32_t delta_t = current_t - last_time;
 8015144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	this->last_time = current_t;
 8015146:	62a2      	str	r2, [r4, #40]	; 0x28
	int32_t delta_t = current_t - last_time;
 8015148:	1ad3      	subs	r3, r2, r3
	if(delta_t > 0) {
 801514a:	2b00      	cmp	r3, #0
 801514c:	dd09      	ble.n	8015162 <_ZN11PowerThread4loopEv+0x32>
		energy += delta_t * power;
 801514e:	ee07 3a90 	vmov	s15, r3
 8015152:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8015156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801515a:	eea7 7a80 	vfma.f32	s14, s15, s0
 801515e:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
	info.bus_id = monitor_id;
 8015162:	f894 3020 	ldrb.w	r3, [r4, #32]
	info.voltage = getVoltage();
 8015166:	4620      	mov	r0, r4
	return 1E-6f * energy / 3600;
 8015168:	eddf 8a37 	vldr	s17, [pc, #220]	; 8015248 <_ZN11PowerThread4loopEv+0x118>
	info.bus_id = monitor_id;
 801516c:	f88d 3000 	strb.w	r3, [sp]
	info.voltage = getVoltage();
 8015170:	f7ff ffa8 	bl	80150c4 <_ZN11PowerThread10getVoltageEv>
 8015174:	ee10 3a10 	vmov	r3, s0
	info.power = getPower();
 8015178:	4620      	mov	r0, r4
	return 1E-6f * energy / 3600;
 801517a:	ed9f 8a34 	vldr	s16, [pc, #208]	; 801524c <_ZN11PowerThread4loopEv+0x11c>
	info.voltage = getVoltage();
 801517e:	f8cd 3001 	str.w	r3, [sp, #1]
	info.power = getPower();
 8015182:	f7ff ffbb 	bl	80150fc <_ZN11PowerThread8getPowerEv>
	return 1E-6f * energy / 3600;
 8015186:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
	info.power = getPower();
 801518a:	ee10 3a10 	vmov	r3, s0
	info.temperature = getTemperature();
 801518e:	4620      	mov	r0, r4
	return 1E-6f * energy / 3600;
 8015190:	ee27 7a28 	vmul.f32	s14, s14, s17
	info.power = getPower();
 8015194:	f8cd 3005 	str.w	r3, [sp, #5]
	info.energy = getEnergy();
 8015198:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801519c:	ee17 3a90 	vmov	r3, s15
 80151a0:	f8cd 3009 	str.w	r3, [sp, #9]
	info.temperature = getTemperature();
 80151a4:	f7ff ff9e 	bl	80150e4 <_ZN11PowerThread14getTemperatureEv>
 80151a8:	ee10 3a10 	vmov	r3, s0
	MAKE_RELIABLE(info);
 80151ac:	2115      	movs	r1, #21
 80151ae:	4668      	mov	r0, sp
	info.temperature = getTemperature();
 80151b0:	f8cd 3011 	str.w	r3, [sp, #17]
	MAKE_RELIABLE(info);
 80151b4:	f7fd fbf8 	bl	80129a8 <_Z5crc16PKht>
	bus->send(&info);
 80151b8:	4669      	mov	r1, sp
	MAKE_RELIABLE(info);
 80151ba:	f8ad 0015 	strh.w	r0, [sp, #21]
	bus->send(&info);
 80151be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80151c0:	f7fc f9ea 	bl	8011598 <_ZN10MessageBus4sendI13Power_BusInfoEEbPT_>
	if(monitor.enter(POWER_MONITORS | device_id)) {
 80151c4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80151c8:	4821      	ldr	r0, [pc, #132]	; (8015250 <_ZN11PowerThread4loopEv+0x120>)
 80151ca:	f041 0108 	orr.w	r1, r1, #8
 80151ce:	f7f6 fa69 	bl	800b6a4 <_ZN7Monitor5enterEh>
 80151d2:	b3a8      	cbz	r0, 8015240 <_ZN11PowerThread4loopEv+0x110>
	return 1E-6f * energy / 3600;
 80151d4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
		println("Energy: %.3fWh\x1b[K", getEnergy());
 80151d8:	4620      	mov	r0, r4
 80151da:	491e      	ldr	r1, [pc, #120]	; (8015254 <_ZN11PowerThread4loopEv+0x124>)
	return 1E-6f * energy / 3600;
 80151dc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80151e0:	ee87 7a88 	vdiv.f32	s14, s15, s16
		println("Energy: %.3fWh\x1b[K", getEnergy());
 80151e4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80151e8:	ec53 2b17 	vmov	r2, r3, d7
 80151ec:	f7ff fe44 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
		println("Power: %.3fW\x1b[K", getPower());
 80151f0:	4620      	mov	r0, r4
 80151f2:	f7ff ff83 	bl	80150fc <_ZN11PowerThread8getPowerEv>
 80151f6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80151fa:	4917      	ldr	r1, [pc, #92]	; (8015258 <_ZN11PowerThread4loopEv+0x128>)
 80151fc:	4620      	mov	r0, r4
 80151fe:	ec53 2b17 	vmov	r2, r3, d7
 8015202:	f7ff fe39 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
		println("Voltage: %.3fV\x1b[K", getVoltage());
 8015206:	4620      	mov	r0, r4
 8015208:	f7ff ff5c 	bl	80150c4 <_ZN11PowerThread10getVoltageEv>
 801520c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8015210:	4912      	ldr	r1, [pc, #72]	; (801525c <_ZN11PowerThread4loopEv+0x12c>)
 8015212:	4620      	mov	r0, r4
 8015214:	ec53 2b17 	vmov	r2, r3, d7
 8015218:	f7ff fe2e 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
		println("Temperature: %.3f°C\x1b[K", getTemperature());
 801521c:	4620      	mov	r0, r4
 801521e:	f7ff ff61 	bl	80150e4 <_ZN11PowerThread14getTemperatureEv>
 8015222:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8015226:	490e      	ldr	r1, [pc, #56]	; (8015260 <_ZN11PowerThread4loopEv+0x130>)
 8015228:	4620      	mov	r0, r4
 801522a:	ec53 2b17 	vmov	r2, r3, d7
 801522e:	f7ff fe23 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
		monitor.exit(POWER_MONITORS | device_id);
 8015232:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8015236:	4806      	ldr	r0, [pc, #24]	; (8015250 <_ZN11PowerThread4loopEv+0x120>)
 8015238:	f041 0108 	orr.w	r1, r1, #8
 801523c:	f7f6 fa5c 	bl	800b6f8 <_ZN7Monitor4exitEh>
}
 8015240:	b006      	add	sp, #24
 8015242:	ecbd 8b02 	vpop	{d8}
 8015246:	bd10      	pop	{r4, pc}
 8015248:	358637bd 	.word	0x358637bd
 801524c:	45610000 	.word	0x45610000
 8015250:	24041168 	.word	0x24041168
 8015254:	0801dae5 	.word	0x0801dae5
 8015258:	0801daf7 	.word	0x0801daf7
 801525c:	0801db07 	.word	0x0801db07
 8015260:	0801db19 	.word	0x0801db19

08015264 <_Z8toString11SupplyState>:

#include "SupplyStates.h"


const char* toString(SupplyState state) {
	switch(state) {
 8015264:	2809      	cmp	r0, #9
 8015266:	bf9a      	itte	ls
 8015268:	4b02      	ldrls	r3, [pc, #8]	; (8015274 <_Z8toString11SupplyState+0x10>)
 801526a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* toString(SupplyState state) {
 801526e:	4802      	ldrhi	r0, [pc, #8]	; (8015278 <_Z8toString11SupplyState+0x14>)
	case DAC_FAULT:
		return "DAC fault";
	}

	return "Unknown";
}
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	0801dc08 	.word	0x0801dc08
 8015278:	0801da08 	.word	0x0801da08

0801527c <_ZN12SupplyThreadD1Ev>:
class SupplyThread : public Thread {
 801527c:	4770      	bx	lr

0801527e <_ZN12SupplyThreadD0Ev>:
 801527e:	b510      	push	{r4, lr}
 8015280:	4604      	mov	r4, r0
 8015282:	2158      	movs	r1, #88	; 0x58
 8015284:	f000 fa0c 	bl	80156a0 <_ZdlPvj>
 8015288:	4620      	mov	r0, r4
 801528a:	bd10      	pop	{r4, pc}

0801528c <_ZN12SupplyThread4loopEv>:

	bus->handle<Power_SupplyControl>(std::bind(&SupplyThread::handleControlCommands, this, std::placeholders::_1, std::placeholders::_2));
}


void SupplyThread::loop() {
 801528c:	b530      	push	{r4, r5, lr}
 801528e:	4604      	mov	r4, r0
	float input_voltage = input_sensor->getVoltage();
 8015290:	6c80      	ldr	r0, [r0, #72]	; 0x48
void SupplyThread::loop() {
 8015292:	ed2d 8b02 	vpush	{d8}
 8015296:	b083      	sub	sp, #12
	float input_voltage = input_sensor->getVoltage();
 8015298:	f7ff ff14 	bl	80150c4 <_ZN11PowerThread10getVoltageEv>
	float output_voltage = output_sensor->getVoltage();
 801529c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
	float input_voltage = input_sensor->getVoltage();
 801529e:	eeb0 8a40 	vmov.f32	s16, s0
	float output_voltage = output_sensor->getVoltage();
 80152a2:	f7ff ff0f 	bl	80150c4 <_ZN11PowerThread10getVoltageEv>
	float output_power = output_sensor->getPower();
 80152a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
	float output_voltage = output_sensor->getVoltage();
 80152a8:	eef0 8a40 	vmov.f32	s17, s0
	float output_power = output_sensor->getPower();
 80152ac:	f7ff ff26 	bl	80150fc <_ZN11PowerThread8getPowerEv>

	if(switching) {
 80152b0:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80152b4:	b112      	cbz	r2, 80152bc <_ZN12SupplyThread4loopEv+0x30>
		this->state = SWITCHING;
 80152b6:	2301      	movs	r3, #1
 80152b8:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	}

	if(supplying) {
 80152bc:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80152c0:	b113      	cbz	r3, 80152c8 <_ZN12SupplyThread4loopEv+0x3c>
		this->state = SUPPLYING;
 80152c2:	2102      	movs	r1, #2
 80152c4:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
	}

	if(output_voltage < device.uvlo && supplying && switching) {
 80152c8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80152cc:	eef4 7ae8 	vcmpe.f32	s15, s17
 80152d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d4:	dd04      	ble.n	80152e0 <_ZN12SupplyThread4loopEv+0x54>
 80152d6:	b11b      	cbz	r3, 80152e0 <_ZN12SupplyThread4loopEv+0x54>
 80152d8:	b112      	cbz	r2, 80152e0 <_ZN12SupplyThread4loopEv+0x54>
		this->state = UNDERVOLTAGE;
 80152da:	2303      	movs	r3, #3
 80152dc:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	}

	if(output_voltage > device.ovlo) {
 80152e0:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
	if(input_voltage > device.max_vin) {
		this->state = VIN_TOO_HIGH;
	}

	if(state == SWITCHING || state == SUPPLYING || state == UNDERVOLTAGE) {
		HAL_GPIO_WritePin(device.gpio, device.ctrl, switching ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80152e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if(output_voltage > device.ovlo) {
 80152e6:	eef4 7ae8 	vcmpe.f32	s15, s17
	if(output_power > device.max_power) {
 80152ea:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
	if(output_voltage > device.ovlo) {
 80152ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if(output_power > device.max_power) {
 80152f2:	eef4 7ac0 	vcmpe.f32	s15, s0
	if(input_voltage < device.min_vin) {
 80152f6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
		this->state = OVERVOLTAGE;
 80152fa:	bf44      	itt	mi
 80152fc:	2304      	movmi	r3, #4
 80152fe:	f884 3056 	strbmi.w	r3, [r4, #86]	; 0x56
	if(output_power > device.max_power) {
 8015302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if(input_voltage < device.min_vin) {
 8015306:	eef4 7ac8 	vcmpe.f32	s15, s16
	if(input_voltage > device.max_vin) {
 801530a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		this->state = OVERCURRENT;
 801530e:	bf44      	itt	mi
 8015310:	2305      	movmi	r3, #5
 8015312:	f884 3056 	strbmi.w	r3, [r4, #86]	; 0x56
	if(input_voltage < device.min_vin) {
 8015316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if(input_voltage > device.max_vin) {
 801531a:	eef4 7ac8 	vcmpe.f32	s15, s16
		this->state = VIN_TOO_LOW;
 801531e:	bfc4      	itt	gt
 8015320:	2306      	movgt	r3, #6
 8015322:	f884 3056 	strbgt.w	r3, [r4, #86]	; 0x56
	if(input_voltage > device.max_vin) {
 8015326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801532a:	d511      	bpl.n	8015350 <_ZN12SupplyThread4loopEv+0xc4>
		this->state = VIN_TOO_HIGH;
 801532c:	2307      	movs	r3, #7
 801532e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
		HAL_GPIO_WritePin(device.gpio, device.shdn, supplying ? GPIO_PIN_RESET : GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(device.gpio, device.shdn, GPIO_PIN_SET);
		this->supplying = false;
 8015332:	2500      	movs	r5, #0
		HAL_GPIO_WritePin(device.gpio, device.shdn, GPIO_PIN_SET);
 8015334:	2201      	movs	r2, #1
 8015336:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8015338:	f7ef fb64 	bl	8004a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(device.gpio, device.ctrl, GPIO_PIN_RESET);
 801533c:	462a      	mov	r2, r5
 801533e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8015340:	6a60      	ldr	r0, [r4, #36]	; 0x24
		this->supplying = false;
 8015342:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
		HAL_GPIO_WritePin(device.gpio, device.ctrl, GPIO_PIN_RESET);
 8015346:	f7ef fb5d 	bl	8004a04 <HAL_GPIO_WritePin>
		this->switching = false;
 801534a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 801534e:	e00f      	b.n	8015370 <_ZN12SupplyThread4loopEv+0xe4>
	if(state == SWITCHING || state == SUPPLYING || state == UNDERVOLTAGE) {
 8015350:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8015354:	3b01      	subs	r3, #1
 8015356:	2b02      	cmp	r3, #2
 8015358:	d8eb      	bhi.n	8015332 <_ZN12SupplyThread4loopEv+0xa6>
		HAL_GPIO_WritePin(device.gpio, device.ctrl, switching ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801535a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801535c:	f7ef fb52 	bl	8004a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(device.gpio, device.shdn, supplying ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8015360:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 8015364:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8015366:	f082 0201 	eor.w	r2, r2, #1
 801536a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801536c:	f7ef fb4a 	bl	8004a04 <HAL_GPIO_WritePin>
	}

	Power_SupplyInfo packet;
	packet.bus_id = device.associated_monitor;
 8015370:	f894 3020 	ldrb.w	r3, [r4, #32]
	packet.state = state;

	MAKE_RELIABLE(packet);
 8015374:	2102      	movs	r1, #2
 8015376:	a801      	add	r0, sp, #4
	packet.bus_id = device.associated_monitor;
 8015378:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.state = state;
 801537c:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8015380:	f88d 3005 	strb.w	r3, [sp, #5]
	MAKE_RELIABLE(packet);
 8015384:	f7fd fb10 	bl	80129a8 <_Z5crc16PKht>

	bus->send(&packet);
 8015388:	a901      	add	r1, sp, #4
	MAKE_RELIABLE(packet);
 801538a:	f8ad 0006 	strh.w	r0, [sp, #6]
	bus->send(&packet);
 801538e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8015390:	f7fc f968 	bl	8011664 <_ZN10MessageBus4sendI16Power_SupplyInfoEEbPT_>
}
 8015394:	b003      	add	sp, #12
 8015396:	ecbd 8b02 	vpop	{d8}
 801539a:	bd30      	pop	{r4, r5, pc}

0801539c <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOhOS1_>:
	    return __source._M_access<_Functor*>();
 801539c:	6803      	ldr	r3, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 801539e:	6812      	ldr	r2, [r2, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80153a0:	b470      	push	{r4, r5, r6}
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80153a2:	689d      	ldr	r5, [r3, #8]
 80153a4:	685c      	ldr	r4, [r3, #4]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	1066      	asrs	r6, r4, #1
 80153aa:	7809      	ldrb	r1, [r1, #0]
 80153ac:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80153b0:	07e4      	lsls	r4, r4, #31
 80153b2:	bf44      	itt	mi
 80153b4:	59ac      	ldrmi	r4, [r5, r6]
 80153b6:	58e3      	ldrmi	r3, [r4, r3]
      }
 80153b8:	bc70      	pop	{r4, r5, r6}
 80153ba:	4718      	bx	r3

080153bc <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80153bc:	b538      	push	{r3, r4, r5, lr}
 80153be:	4604      	mov	r4, r0
	switch (__op)
 80153c0:	b13a      	cbz	r2, 80153d2 <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 80153c2:	2a01      	cmp	r2, #1
 80153c4:	d008      	beq.n	80153d8 <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>
	  switch (__op)
 80153c6:	2a02      	cmp	r2, #2
 80153c8:	d008      	beq.n	80153dc <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x20>
 80153ca:	2a03      	cmp	r2, #3
 80153cc:	d010      	beq.n	80153f0 <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
      }
 80153ce:	2000      	movs	r0, #0
 80153d0:	bd38      	pop	{r3, r4, r5, pc}
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80153d2:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x44>)
	  __dest._M_access<_Functor*>() =
 80153d4:	6023      	str	r3, [r4, #0]
	}
 80153d6:	e7fa      	b.n	80153ce <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 80153d8:	680b      	ldr	r3, [r1, #0]
 80153da:	e7fb      	b.n	80153d4 <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  __dest._M_access<_Functor*>() =
 80153dc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80153de:	200c      	movs	r0, #12
 80153e0:	f7fe fb54 	bl	8013a8c <_Znwj>
 80153e4:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 80153e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80153ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80153ee:	e7f1      	b.n	80153d4 <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
	  delete __victim._M_access<_Functor*>();
 80153f0:	6800      	ldr	r0, [r0, #0]
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d0eb      	beq.n	80153ce <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80153f6:	210c      	movs	r1, #12
 80153f8:	f000 f952 	bl	80156a0 <_ZdlPvj>
 80153fc:	e7e7      	b.n	80153ce <_ZNSt17_Function_handlerIFvhP19Power_SupplyControlESt5_BindIFM12SupplyThreadFvhS1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80153fe:	bf00      	nop
 8015400:	0801dd84 	.word	0x0801dd84

08015404 <_ZN12SupplyThread4readEhPhh>:
	if(!write(reg, buffer, 2)) {
		error = true;
	}
}

bool SupplyThread::read(uint8_t reg, uint8_t* data, uint8_t size) {
 8015404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015406:	b085      	sub	sp, #20
 8015408:	4604      	mov	r4, r0
 801540a:	460d      	mov	r5, r1
 801540c:	4616      	mov	r6, r2
 801540e:	461f      	mov	r7, r3
	vTaskSuspendAll();
 8015410:	f7f5 fb0c 	bl	800aa2c <vTaskSuspendAll>
	bool ok = HAL_I2C_Mem_Read(i2c, device.address, reg | MCP47_READ_CMD, 1, data, size, 10 / portTICK_PERIOD_MS) == HAL_OK;
 8015414:	230a      	movs	r3, #10
 8015416:	9600      	str	r6, [sp, #0]
 8015418:	f045 0206 	orr.w	r2, r5, #6
 801541c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015420:	2301      	movs	r3, #1
 8015422:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8015426:	69a0      	ldr	r0, [r4, #24]
 8015428:	f7ef fc9e 	bl	8004d68 <HAL_I2C_Mem_Read>
 801542c:	4604      	mov	r4, r0
	xTaskResumeAll();
 801542e:	f7f5 fb9b 	bl	800ab68 <xTaskResumeAll>
	return ok;
}
 8015432:	fab4 f084 	clz	r0, r4
 8015436:	0940      	lsrs	r0, r0, #5
 8015438:	b005      	add	sp, #20
 801543a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801543c <_ZN12SupplyThread3getEh>:
uint16_t SupplyThread::get(uint8_t reg) {
 801543c:	b513      	push	{r0, r1, r4, lr}
	if(!read(reg, buffer, 2)) {
 801543e:	2302      	movs	r3, #2
 8015440:	aa01      	add	r2, sp, #4
uint16_t SupplyThread::get(uint8_t reg) {
 8015442:	4604      	mov	r4, r0
	if(!read(reg, buffer, 2)) {
 8015444:	f7ff ffde 	bl	8015404 <_ZN12SupplyThread4readEhPhh>
 8015448:	b910      	cbnz	r0, 8015450 <_ZN12SupplyThread3getEh+0x14>
		error = true;
 801544a:	2301      	movs	r3, #1
 801544c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	return (buffer[0] << 8) | buffer[1];
 8015450:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8015454:	ba40      	rev16	r0, r0
}
 8015456:	b280      	uxth	r0, r0
 8015458:	b002      	add	sp, #8
 801545a:	bd10      	pop	{r4, pc}

0801545c <_ZN12SupplyThread12setSwitchingEb>:
void SupplyThread::setSwitching(bool switching) {
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	4604      	mov	r4, r0
 8015460:	460d      	mov	r5, r1
	uint8_t value = get(device.dac_reg);
 8015462:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
 8015466:	f7ff ffe9 	bl	801543c <_ZN12SupplyThread3getEh>
	xTaskResumeAll();
	return ok;
}

bool SupplyThread::hasNewErrors() {
	bool output = error;
 801546a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
	error = false;
 801546e:	2200      	movs	r2, #0
 8015470:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if(!hasNewErrors()) {
 8015474:	b95b      	cbnz	r3, 801548e <_ZN12SupplyThread12setSwitchingEb+0x32>
		if(value == device.reference_voltage) {
 8015476:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801547a:	b2c0      	uxtb	r0, r0
 801547c:	4283      	cmp	r3, r0
 801547e:	d102      	bne.n	8015486 <_ZN12SupplyThread12setSwitchingEb+0x2a>
			this->switching = switching;
 8015480:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8015484:	bd38      	pop	{r3, r4, r5, pc}
			this->state = DAC_FAULT;
 8015486:	2309      	movs	r3, #9
		this->state = NO_DAC;
 8015488:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
}
 801548c:	e7fa      	b.n	8015484 <_ZN12SupplyThread12setSwitchingEb+0x28>
		this->state = NO_DAC;
 801548e:	2308      	movs	r3, #8
 8015490:	e7fa      	b.n	8015488 <_ZN12SupplyThread12setSwitchingEb+0x2c>

08015492 <_ZN12SupplyThread12setSupplyingEb>:
void SupplyThread::setSupplying(bool supplying) {
 8015492:	b538      	push	{r3, r4, r5, lr}
 8015494:	4604      	mov	r4, r0
 8015496:	460d      	mov	r5, r1
	uint8_t value = get(device.dac_reg);
 8015498:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
 801549c:	f7ff ffce 	bl	801543c <_ZN12SupplyThread3getEh>
	bool output = error;
 80154a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
	error = false;
 80154a4:	2200      	movs	r2, #0
 80154a6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if(!hasNewErrors()) {
 80154aa:	b95b      	cbnz	r3, 80154c4 <_ZN12SupplyThread12setSupplyingEb+0x32>
		if(value == device.reference_voltage) {
 80154ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80154b0:	b2c0      	uxtb	r0, r0
 80154b2:	4283      	cmp	r3, r0
 80154b4:	d102      	bne.n	80154bc <_ZN12SupplyThread12setSupplyingEb+0x2a>
			this->supplying = supplying;
 80154b6:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
}
 80154ba:	bd38      	pop	{r3, r4, r5, pc}
			this->state = DAC_FAULT;
 80154bc:	2309      	movs	r3, #9
		this->state = NO_DAC;
 80154be:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
}
 80154c2:	e7fa      	b.n	80154ba <_ZN12SupplyThread12setSupplyingEb+0x28>
		this->state = NO_DAC;
 80154c4:	2308      	movs	r3, #8
 80154c6:	e7fa      	b.n	80154be <_ZN12SupplyThread12setSupplyingEb+0x2c>

080154c8 <_ZN12SupplyThread21handleControlCommandsEhP19Power_SupplyControl>:
	if(packet->bus_id == device.associated_monitor) {
 80154c8:	7811      	ldrb	r1, [r2, #0]
 80154ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80154ce:	4299      	cmp	r1, r3
 80154d0:	d10e      	bne.n	80154f0 <_ZN12SupplyThread21handleControlCommandsEhP19Power_SupplyControl+0x28>
		if(packet->command_mask & 0b10) { // Command switching state
 80154d2:	7853      	ldrb	r3, [r2, #1]
 80154d4:	0799      	lsls	r1, r3, #30
 80154d6:	d504      	bpl.n	80154e2 <_ZN12SupplyThread21handleControlCommandsEhP19Power_SupplyControl+0x1a>
			setSwitching(packet->command_val & 0b10);
 80154d8:	7891      	ldrb	r1, [r2, #2]
 80154da:	f3c1 0140 	ubfx	r1, r1, #1, #1
 80154de:	f7ff bfbd 	b.w	801545c <_ZN12SupplyThread12setSwitchingEb>
		} else if(packet->command_mask & 0b01) { // Command supplying state
 80154e2:	07db      	lsls	r3, r3, #31
 80154e4:	d504      	bpl.n	80154f0 <_ZN12SupplyThread21handleControlCommandsEhP19Power_SupplyControl+0x28>
			setSupplying(packet->command_val & 0b01);
 80154e6:	7891      	ldrb	r1, [r2, #2]
 80154e8:	f001 0101 	and.w	r1, r1, #1
 80154ec:	f7ff bfd1 	b.w	8015492 <_ZN12SupplyThread12setSupplyingEb>
}
 80154f0:	4770      	bx	lr
	...

080154f4 <_ZN12SupplyThread4initEv>:
void SupplyThread::init() {
 80154f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80154f6:	4604      	mov	r4, r0
	osDelay(100 / portTICK_PERIOD_MS);
 80154f8:	2064      	movs	r0, #100	; 0x64
 80154fa:	f7f4 fb24 	bl	8009b46 <osDelay>
	uint16_t value = get(device.dac_reg);
 80154fe:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff ff9a 	bl	801543c <_ZN12SupplyThread3getEh>
	bool output = error;
 8015508:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
	error = false;
 801550c:	2300      	movs	r3, #0
 801550e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8015512:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if(!hasNewErrors()) {
 8015516:	2d00      	cmp	r5, #0
 8015518:	d136      	bne.n	8015588 <_ZN12SupplyThread4initEv+0x94>
		if(value == device.reference_voltage) {
 801551a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801551e:	4283      	cmp	r3, r0
 8015520:	d12a      	bne.n	8015578 <_ZN12SupplyThread4initEv+0x84>
			println("Device ID %d initialized successfully", device.address);
 8015522:	491c      	ldr	r1, [pc, #112]	; (8015594 <_ZN12SupplyThread4initEv+0xa0>)
 8015524:	4620      	mov	r0, r4
 8015526:	f7ff fca7 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
			this->switching = true;
 801552a:	f240 1301 	movw	r3, #257	; 0x101
			println("Device ID %d started", device.address);
 801552e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8015532:	4620      	mov	r0, r4
 8015534:	4918      	ldr	r1, [pc, #96]	; (8015598 <_ZN12SupplyThread4initEv+0xa4>)
			this->switching = true;
 8015536:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
			this->state = OFF;
 801553a:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
			println("Device ID %d started", device.address);
 801553e:	f7ff fc9b 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
    _Function_base() : _M_manager(nullptr) { }
 8015542:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8015544:	200c      	movs	r0, #12
	bus->handle<Power_SupplyControl>(std::bind(&SupplyThread::handleControlCommands, this, std::placeholders::_1, std::placeholders::_2));
 8015546:	6d26      	ldr	r6, [r4, #80]	; 0x50
    _Function_base() : _M_manager(nullptr) { }
 8015548:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801554a:	f7fe fa9f 	bl	8013a8c <_Znwj>
      _Bind(_Bind&&) = default;
 801554e:	4b13      	ldr	r3, [pc, #76]	; (801559c <_ZN12SupplyThread4initEv+0xa8>)
 8015550:	4669      	mov	r1, sp
 8015552:	6084      	str	r4, [r0, #8]
 8015554:	9000      	str	r0, [sp, #0]
 8015556:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
 801555a:	4b11      	ldr	r3, [pc, #68]	; (80155a0 <_ZN12SupplyThread4initEv+0xac>)
 801555c:	4630      	mov	r0, r6
 801555e:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8015560:	4b10      	ldr	r3, [pc, #64]	; (80155a4 <_ZN12SupplyThread4initEv+0xb0>)
 8015562:	9302      	str	r3, [sp, #8]
 8015564:	f7fc ff20 	bl	80123a8 <_ZN10MessageBus6handleI19Power_SupplyControlEEbSt8functionIFvhPT_EE>
      if (_M_manager)
 8015568:	9b02      	ldr	r3, [sp, #8]
 801556a:	b11b      	cbz	r3, 8015574 <_ZN12SupplyThread4initEv+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 801556c:	4669      	mov	r1, sp
 801556e:	2203      	movs	r2, #3
 8015570:	4608      	mov	r0, r1
 8015572:	4798      	blx	r3
}
 8015574:	b004      	add	sp, #16
 8015576:	bd70      	pop	{r4, r5, r6, pc}
			println("Device ID %d incorrectly configured. Please reflash device.", device.address);
 8015578:	490b      	ldr	r1, [pc, #44]	; (80155a8 <_ZN12SupplyThread4initEv+0xb4>)
 801557a:	4620      	mov	r0, r4
 801557c:	f7ff fc7c 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
			this->state = DAC_FAULT;
 8015580:	2309      	movs	r3, #9
		this->state = NO_DAC;
 8015582:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8015586:	e7dc      	b.n	8015542 <_ZN12SupplyThread4initEv+0x4e>
		println("Failed to initialize device ID %d", device.address);
 8015588:	4908      	ldr	r1, [pc, #32]	; (80155ac <_ZN12SupplyThread4initEv+0xb8>)
 801558a:	4620      	mov	r0, r4
 801558c:	f7ff fc74 	bl	8014e78 <_ZN6Thread7printlnEPKcz>
		this->state = NO_DAC;
 8015590:	2308      	movs	r3, #8
 8015592:	e7f6      	b.n	8015582 <_ZN12SupplyThread4initEv+0x8e>
 8015594:	0801da48 	.word	0x0801da48
 8015598:	0801dc30 	.word	0x0801dc30
 801559c:	080154c9 	.word	0x080154c9
 80155a0:	0801539d 	.word	0x0801539d
 80155a4:	080153bd 	.word	0x080153bd
 80155a8:	0801dc45 	.word	0x0801dc45
 80155ac:	0801dac3 	.word	0x0801dac3

080155b0 <_ZN12SupplyThread9getStatusEv>:
	return output;
}


const char* SupplyThread::getStatus() {
	return toString(state);
 80155b0:	f890 0056 	ldrb.w	r0, [r0, #86]	; 0x56
 80155b4:	f7ff be56 	b.w	8015264 <_Z8toString11SupplyState>

080155b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80155b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80155ba:	2400      	movs	r4, #0
 80155bc:	2310      	movs	r3, #16
 80155be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80155c2:	6803      	ldr	r3, [r0, #0]
 80155c4:	4615      	mov	r5, r2
 80155c6:	699e      	ldr	r6, [r3, #24]
 80155c8:	6812      	ldr	r2, [r2, #0]
 80155ca:	466b      	mov	r3, sp
 80155cc:	e9cd 4400 	strd	r4, r4, [sp]
 80155d0:	47b0      	blx	r6
 80155d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80155d6:	f003 0306 	and.w	r3, r3, #6
 80155da:	2b06      	cmp	r3, #6
 80155dc:	bf03      	ittte	eq
 80155de:	9b00      	ldreq	r3, [sp, #0]
 80155e0:	602b      	streq	r3, [r5, #0]
 80155e2:	2001      	moveq	r0, #1
 80155e4:	4620      	movne	r0, r4
 80155e6:	b004      	add	sp, #16
 80155e8:	bd70      	pop	{r4, r5, r6, pc}

080155ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80155ea:	9800      	ldr	r0, [sp, #0]
 80155ec:	4290      	cmp	r0, r2
 80155ee:	bf14      	ite	ne
 80155f0:	2001      	movne	r0, #1
 80155f2:	2006      	moveq	r0, #6
 80155f4:	4770      	bx	lr
	...

080155f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80155f8:	b510      	push	{r4, lr}
 80155fa:	4b03      	ldr	r3, [pc, #12]	; (8015608 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80155fc:	6003      	str	r3, [r0, #0]
 80155fe:	4604      	mov	r4, r0
 8015600:	f000 f965 	bl	80158ce <_ZNSt9type_infoD1Ev>
 8015604:	4620      	mov	r0, r4
 8015606:	bd10      	pop	{r4, pc}
 8015608:	0801de00 	.word	0x0801de00

0801560c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801560c:	b510      	push	{r4, lr}
 801560e:	4604      	mov	r4, r0
 8015610:	f7ff fff2 	bl	80155f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8015614:	4620      	mov	r0, r4
 8015616:	2108      	movs	r1, #8
 8015618:	f000 f842 	bl	80156a0 <_ZdlPvj>
 801561c:	4620      	mov	r0, r4
 801561e:	bd10      	pop	{r4, pc}

08015620 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8015620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015624:	461f      	mov	r7, r3
 8015626:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801562a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801562e:	4598      	cmp	r8, r3
 8015630:	4606      	mov	r6, r0
 8015632:	4615      	mov	r5, r2
 8015634:	d107      	bne.n	8015646 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8015636:	9907      	ldr	r1, [sp, #28]
 8015638:	f000 f94e 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 801563c:	b118      	cbz	r0, 8015646 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801563e:	7165      	strb	r5, [r4, #5]
 8015640:	2000      	movs	r0, #0
 8015642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015646:	4639      	mov	r1, r7
 8015648:	4630      	mov	r0, r6
 801564a:	f000 f945 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 801564e:	2800      	cmp	r0, #0
 8015650:	d0f6      	beq.n	8015640 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8015652:	2301      	movs	r3, #1
 8015654:	f8c4 8000 	str.w	r8, [r4]
 8015658:	7125      	strb	r5, [r4, #4]
 801565a:	71a3      	strb	r3, [r4, #6]
 801565c:	e7f0      	b.n	8015640 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801565e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801565e:	b538      	push	{r3, r4, r5, lr}
 8015660:	4615      	mov	r5, r2
 8015662:	461c      	mov	r4, r3
 8015664:	f000 f938 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015668:	b120      	cbz	r0, 8015674 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801566a:	2308      	movs	r3, #8
 801566c:	60e3      	str	r3, [r4, #12]
 801566e:	2306      	movs	r3, #6
 8015670:	6025      	str	r5, [r4, #0]
 8015672:	7123      	strb	r3, [r4, #4]
 8015674:	bd38      	pop	{r3, r4, r5, pc}

08015676 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8015676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015678:	4605      	mov	r5, r0
 801567a:	460c      	mov	r4, r1
 801567c:	9201      	str	r2, [sp, #4]
 801567e:	461e      	mov	r6, r3
 8015680:	f000 f92a 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015684:	b950      	cbnz	r0, 801569c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8015686:	2e03      	cmp	r6, #3
 8015688:	d808      	bhi.n	801569c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801568a:	6823      	ldr	r3, [r4, #0]
 801568c:	9a01      	ldr	r2, [sp, #4]
 801568e:	695b      	ldr	r3, [r3, #20]
 8015690:	4629      	mov	r1, r5
 8015692:	4620      	mov	r0, r4
 8015694:	b002      	add	sp, #8
 8015696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801569a:	4718      	bx	r3
 801569c:	b002      	add	sp, #8
 801569e:	bd70      	pop	{r4, r5, r6, pc}

080156a0 <_ZdlPvj>:
 80156a0:	f7fe b9f6 	b.w	8013a90 <_ZdlPv>

080156a4 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
 80156a4:	2001      	movs	r0, #1
 80156a6:	4770      	bx	lr

080156a8 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
 80156a8:	b510      	push	{r4, lr}
 80156aa:	4b03      	ldr	r3, [pc, #12]	; (80156b8 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
 80156ac:	6003      	str	r3, [r0, #0]
 80156ae:	4604      	mov	r4, r0
 80156b0:	f000 f90d 	bl	80158ce <_ZNSt9type_infoD1Ev>
 80156b4:	4620      	mov	r0, r4
 80156b6:	bd10      	pop	{r4, pc}
 80156b8:	0801de60 	.word	0x0801de60

080156bc <_ZN10__cxxabiv120__function_type_infoD0Ev>:
 80156bc:	b510      	push	{r4, lr}
 80156be:	4604      	mov	r4, r0
 80156c0:	f7ff fff2 	bl	80156a8 <_ZN10__cxxabiv120__function_type_infoD1Ev>
 80156c4:	4620      	mov	r0, r4
 80156c6:	2108      	movs	r1, #8
 80156c8:	f7ff ffea 	bl	80156a0 <_ZdlPvj>
 80156cc:	4620      	mov	r0, r4
 80156ce:	bd10      	pop	{r4, pc}

080156d0 <__cxa_guard_acquire>:
 80156d0:	6803      	ldr	r3, [r0, #0]
 80156d2:	07db      	lsls	r3, r3, #31
 80156d4:	d406      	bmi.n	80156e4 <__cxa_guard_acquire+0x14>
 80156d6:	7843      	ldrb	r3, [r0, #1]
 80156d8:	b103      	cbz	r3, 80156dc <__cxa_guard_acquire+0xc>
 80156da:	deff      	udf	#255	; 0xff
 80156dc:	2301      	movs	r3, #1
 80156de:	7043      	strb	r3, [r0, #1]
 80156e0:	4618      	mov	r0, r3
 80156e2:	4770      	bx	lr
 80156e4:	2000      	movs	r0, #0
 80156e6:	4770      	bx	lr

080156e8 <__cxa_guard_release>:
 80156e8:	2301      	movs	r3, #1
 80156ea:	6003      	str	r3, [r0, #0]
 80156ec:	4770      	bx	lr
	...

080156f0 <_ZSt11_Hash_bytesPKvjj>:
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	4c18      	ldr	r4, [pc, #96]	; (8015754 <_ZSt11_Hash_bytesPKvjj+0x64>)
 80156f4:	404a      	eors	r2, r1
 80156f6:	460d      	mov	r5, r1
 80156f8:	1846      	adds	r6, r0, r1
 80156fa:	2d03      	cmp	r5, #3
 80156fc:	eba6 0305 	sub.w	r3, r6, r5
 8015700:	d908      	bls.n	8015714 <_ZSt11_Hash_bytesPKvjj+0x24>
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	4363      	muls	r3, r4
 8015706:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 801570a:	4362      	muls	r2, r4
 801570c:	4363      	muls	r3, r4
 801570e:	405a      	eors	r2, r3
 8015710:	3d04      	subs	r5, #4
 8015712:	e7f2      	b.n	80156fa <_ZSt11_Hash_bytesPKvjj+0xa>
 8015714:	088b      	lsrs	r3, r1, #2
 8015716:	f06f 0503 	mvn.w	r5, #3
 801571a:	fb05 1103 	mla	r1, r5, r3, r1
 801571e:	2902      	cmp	r1, #2
 8015720:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8015724:	d011      	beq.n	801574a <_ZSt11_Hash_bytesPKvjj+0x5a>
 8015726:	2903      	cmp	r1, #3
 8015728:	d00c      	beq.n	8015744 <_ZSt11_Hash_bytesPKvjj+0x54>
 801572a:	2901      	cmp	r1, #1
 801572c:	d103      	bne.n	8015736 <_ZSt11_Hash_bytesPKvjj+0x46>
 801572e:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 8015732:	4042      	eors	r2, r0
 8015734:	4362      	muls	r2, r4
 8015736:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 801573a:	fb04 f002 	mul.w	r0, r4, r2
 801573e:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	78a9      	ldrb	r1, [r5, #2]
 8015746:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 801574a:	7869      	ldrb	r1, [r5, #1]
 801574c:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 8015750:	e7ed      	b.n	801572e <_ZSt11_Hash_bytesPKvjj+0x3e>
 8015752:	bf00      	nop
 8015754:	5bd1e995 	.word	0x5bd1e995

08015758 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 8015758:	2001      	movs	r0, #1
 801575a:	4770      	bx	lr

0801575c <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 801575c:	b510      	push	{r4, lr}
 801575e:	4b03      	ldr	r3, [pc, #12]	; (801576c <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8015760:	6003      	str	r3, [r0, #0]
 8015762:	4604      	mov	r4, r0
 8015764:	f000 fb38 	bl	8015dd8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8015768:	4620      	mov	r0, r4
 801576a:	bd10      	pop	{r4, pc}
 801576c:	0801deb0 	.word	0x0801deb0

08015770 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8015770:	b510      	push	{r4, lr}
 8015772:	4604      	mov	r4, r0
 8015774:	f7ff fff2 	bl	801575c <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 8015778:	4620      	mov	r0, r4
 801577a:	2110      	movs	r1, #16
 801577c:	f7ff ff90 	bl	80156a0 <_ZdlPvj>
 8015780:	4620      	mov	r0, r4
 8015782:	bd10      	pop	{r4, pc}

08015784 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 8015784:	2b01      	cmp	r3, #1
 8015786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015788:	4606      	mov	r6, r0
 801578a:	460c      	mov	r4, r1
 801578c:	461d      	mov	r5, r3
 801578e:	d806      	bhi.n	801579e <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 8015790:	490c      	ldr	r1, [pc, #48]	; (80157c4 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 8015792:	68c0      	ldr	r0, [r0, #12]
 8015794:	9201      	str	r2, [sp, #4]
 8015796:	f000 f89f 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 801579a:	9a01      	ldr	r2, [sp, #4]
 801579c:	b948      	cbnz	r0, 80157b2 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 801579e:	68f0      	ldr	r0, [r6, #12]
 80157a0:	68e1      	ldr	r1, [r4, #12]
 80157a2:	6803      	ldr	r3, [r0, #0]
 80157a4:	691e      	ldr	r6, [r3, #16]
 80157a6:	1cab      	adds	r3, r5, #2
 80157a8:	46b4      	mov	ip, r6
 80157aa:	b002      	add	sp, #8
 80157ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157b0:	4760      	bx	ip
 80157b2:	68e0      	ldr	r0, [r4, #12]
 80157b4:	6803      	ldr	r3, [r0, #0]
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	4798      	blx	r3
 80157ba:	f080 0001 	eor.w	r0, r0, #1
 80157be:	b2c0      	uxtb	r0, r0
 80157c0:	b002      	add	sp, #8
 80157c2:	bd70      	pop	{r4, r5, r6, pc}
 80157c4:	0801dfb4 	.word	0x0801dfb4

080157c8 <__cxa_pure_virtual>:
 80157c8:	b508      	push	{r3, lr}
 80157ca:	f000 fae1 	bl	8015d90 <_ZSt9terminatev>
	...

080157d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80157d0:	b510      	push	{r4, lr}
 80157d2:	4b03      	ldr	r3, [pc, #12]	; (80157e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80157d4:	6003      	str	r3, [r0, #0]
 80157d6:	4604      	mov	r4, r0
 80157d8:	f7ff ff0e 	bl	80155f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80157dc:	4620      	mov	r0, r4
 80157de:	bd10      	pop	{r4, pc}
 80157e0:	0801df08 	.word	0x0801df08

080157e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80157e4:	b510      	push	{r4, lr}
 80157e6:	4604      	mov	r4, r0
 80157e8:	f7ff fff2 	bl	80157d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80157ec:	4620      	mov	r0, r4
 80157ee:	210c      	movs	r1, #12
 80157f0:	f7ff ff56 	bl	80156a0 <_ZdlPvj>
 80157f4:	4620      	mov	r0, r4
 80157f6:	bd10      	pop	{r4, pc}

080157f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80157f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80157fa:	9f08      	ldr	r7, [sp, #32]
 80157fc:	4297      	cmp	r7, r2
 80157fe:	4605      	mov	r5, r0
 8015800:	460e      	mov	r6, r1
 8015802:	4614      	mov	r4, r2
 8015804:	d00a      	beq.n	801581c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8015806:	68a8      	ldr	r0, [r5, #8]
 8015808:	6802      	ldr	r2, [r0, #0]
 801580a:	9708      	str	r7, [sp, #32]
 801580c:	6a15      	ldr	r5, [r2, #32]
 801580e:	4631      	mov	r1, r6
 8015810:	4622      	mov	r2, r4
 8015812:	46ac      	mov	ip, r5
 8015814:	b003      	add	sp, #12
 8015816:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801581a:	4760      	bx	ip
 801581c:	4619      	mov	r1, r3
 801581e:	9301      	str	r3, [sp, #4]
 8015820:	f000 f85a 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015824:	9b01      	ldr	r3, [sp, #4]
 8015826:	2800      	cmp	r0, #0
 8015828:	d0ed      	beq.n	8015806 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801582a:	2006      	movs	r0, #6
 801582c:	b003      	add	sp, #12
 801582e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015830 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8015830:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015834:	460d      	mov	r5, r1
 8015836:	4619      	mov	r1, r3
 8015838:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 801583c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8015840:	4681      	mov	r9, r0
 8015842:	4617      	mov	r7, r2
 8015844:	4698      	mov	r8, r3
 8015846:	f000 f847 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 801584a:	b190      	cbz	r0, 8015872 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801584c:	2d00      	cmp	r5, #0
 801584e:	6034      	str	r4, [r6, #0]
 8015850:	7137      	strb	r7, [r6, #4]
 8015852:	db09      	blt.n	8015868 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8015854:	1961      	adds	r1, r4, r5
 8015856:	458a      	cmp	sl, r1
 8015858:	bf0c      	ite	eq
 801585a:	2106      	moveq	r1, #6
 801585c:	2101      	movne	r1, #1
 801585e:	71b1      	strb	r1, [r6, #6]
 8015860:	2000      	movs	r0, #0
 8015862:	b001      	add	sp, #4
 8015864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015868:	3502      	adds	r5, #2
 801586a:	d1f9      	bne.n	8015860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801586c:	2301      	movs	r3, #1
 801586e:	71b3      	strb	r3, [r6, #6]
 8015870:	e7f6      	b.n	8015860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8015872:	4554      	cmp	r4, sl
 8015874:	d106      	bne.n	8015884 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8015876:	4659      	mov	r1, fp
 8015878:	4648      	mov	r0, r9
 801587a:	f000 f82d 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 801587e:	b108      	cbz	r0, 8015884 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8015880:	7177      	strb	r7, [r6, #5]
 8015882:	e7ed      	b.n	8015860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8015884:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8015888:	6803      	ldr	r3, [r0, #0]
 801588a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 801588e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8015892:	69dc      	ldr	r4, [r3, #28]
 8015894:	463a      	mov	r2, r7
 8015896:	4643      	mov	r3, r8
 8015898:	4629      	mov	r1, r5
 801589a:	46a4      	mov	ip, r4
 801589c:	b001      	add	sp, #4
 801589e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a2:	4760      	bx	ip

080158a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80158a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a8:	4607      	mov	r7, r0
 80158aa:	460c      	mov	r4, r1
 80158ac:	4615      	mov	r5, r2
 80158ae:	461e      	mov	r6, r3
 80158b0:	f7ff fed5 	bl	801565e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80158b4:	b948      	cbnz	r0, 80158ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80158b6:	68b8      	ldr	r0, [r7, #8]
 80158b8:	6803      	ldr	r3, [r0, #0]
 80158ba:	699f      	ldr	r7, [r3, #24]
 80158bc:	462a      	mov	r2, r5
 80158be:	4633      	mov	r3, r6
 80158c0:	4621      	mov	r1, r4
 80158c2:	46bc      	mov	ip, r7
 80158c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158c8:	4760      	bx	ip
 80158ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158ce <_ZNSt9type_infoD1Ev>:
 80158ce:	4770      	bx	lr

080158d0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80158d0:	2000      	movs	r0, #0
 80158d2:	4770      	bx	lr

080158d4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 80158d4:	2000      	movs	r0, #0
 80158d6:	4770      	bx	lr

080158d8 <_ZNKSt9type_infoeqERKS_>:
 80158d8:	4281      	cmp	r1, r0
 80158da:	b508      	push	{r3, lr}
 80158dc:	d00e      	beq.n	80158fc <_ZNKSt9type_infoeqERKS_+0x24>
 80158de:	6840      	ldr	r0, [r0, #4]
 80158e0:	7803      	ldrb	r3, [r0, #0]
 80158e2:	2b2a      	cmp	r3, #42	; 0x2a
 80158e4:	d00c      	beq.n	8015900 <_ZNKSt9type_infoeqERKS_+0x28>
 80158e6:	6849      	ldr	r1, [r1, #4]
 80158e8:	780b      	ldrb	r3, [r1, #0]
 80158ea:	2b2a      	cmp	r3, #42	; 0x2a
 80158ec:	bf08      	it	eq
 80158ee:	3101      	addeq	r1, #1
 80158f0:	f7ea fcf6 	bl	80002e0 <strcmp>
 80158f4:	fab0 f080 	clz	r0, r0
 80158f8:	0940      	lsrs	r0, r0, #5
 80158fa:	bd08      	pop	{r3, pc}
 80158fc:	2001      	movs	r0, #1
 80158fe:	e7fc      	b.n	80158fa <_ZNKSt9type_infoeqERKS_+0x22>
 8015900:	2000      	movs	r0, #0
 8015902:	e7fa      	b.n	80158fa <_ZNKSt9type_infoeqERKS_+0x22>

08015904 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8015904:	f7ff bfe8 	b.w	80158d8 <_ZNKSt9type_infoeqERKS_>

08015908 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8015908:	b510      	push	{r4, lr}
 801590a:	4b03      	ldr	r3, [pc, #12]	; (8015918 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 801590c:	6003      	str	r3, [r0, #0]
 801590e:	4604      	mov	r4, r0
 8015910:	f7ff fe72 	bl	80155f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8015914:	4620      	mov	r0, r4
 8015916:	bd10      	pop	{r4, pc}
 8015918:	0801df80 	.word	0x0801df80

0801591c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 801591c:	b510      	push	{r4, lr}
 801591e:	4604      	mov	r4, r0
 8015920:	f7ff fff2 	bl	8015908 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8015924:	4620      	mov	r0, r4
 8015926:	2118      	movs	r1, #24
 8015928:	f7ff feba 	bl	80156a0 <_ZdlPvj>
 801592c:	4620      	mov	r0, r4
 801592e:	bd10      	pop	{r4, pc}

08015930 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8015930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015934:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8015938:	454a      	cmp	r2, r9
 801593a:	4604      	mov	r4, r0
 801593c:	460f      	mov	r7, r1
 801593e:	4616      	mov	r6, r2
 8015940:	469a      	mov	sl, r3
 8015942:	d024      	beq.n	801598e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8015944:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8015948:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 801594c:	f1b8 0f00 	cmp.w	r8, #0
 8015950:	d028      	beq.n	80159a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 8015952:	68e5      	ldr	r5, [r4, #12]
 8015954:	07aa      	lsls	r2, r5, #30
 8015956:	d521      	bpl.n	801599c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8015958:	122a      	asrs	r2, r5, #8
 801595a:	f015 0501 	ands.w	r5, r5, #1
 801595e:	d003      	beq.n	8015968 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8015960:	1cfb      	adds	r3, r7, #3
 8015962:	d01b      	beq.n	801599c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8015964:	6833      	ldr	r3, [r6, #0]
 8015966:	589a      	ldr	r2, [r3, r2]
 8015968:	68a0      	ldr	r0, [r4, #8]
 801596a:	6803      	ldr	r3, [r0, #0]
 801596c:	f8cd 9000 	str.w	r9, [sp]
 8015970:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8015974:	4432      	add	r2, r6
 8015976:	4653      	mov	r3, sl
 8015978:	4639      	mov	r1, r7
 801597a:	47d8      	blx	fp
 801597c:	2803      	cmp	r0, #3
 801597e:	d90d      	bls.n	801599c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8015980:	b115      	cbz	r5, 8015988 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8015982:	f040 0001 	orr.w	r0, r0, #1
 8015986:	b2c0      	uxtb	r0, r0
 8015988:	b003      	add	sp, #12
 801598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598e:	4619      	mov	r1, r3
 8015990:	f7ff ffa2 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015994:	2800      	cmp	r0, #0
 8015996:	d0d5      	beq.n	8015944 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8015998:	2006      	movs	r0, #6
 801599a:	e7f5      	b.n	8015988 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 801599c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80159a0:	3c08      	subs	r4, #8
 80159a2:	e7d3      	b.n	801594c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 80159a4:	2001      	movs	r0, #1
 80159a6:	e7ef      	b.n	8015988 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

080159a8 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 80159a8:	b4f0      	push	{r4, r5, r6, r7}
 80159aa:	1e0d      	subs	r5, r1, #0
 80159ac:	9c04      	ldr	r4, [sp, #16]
 80159ae:	db06      	blt.n	80159be <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 80159b0:	1950      	adds	r0, r2, r5
 80159b2:	4284      	cmp	r4, r0
 80159b4:	bf14      	ite	ne
 80159b6:	2001      	movne	r0, #1
 80159b8:	2006      	moveq	r0, #6
 80159ba:	bcf0      	pop	{r4, r5, r6, r7}
 80159bc:	4770      	bx	lr
 80159be:	3502      	adds	r5, #2
 80159c0:	d005      	beq.n	80159ce <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 80159c2:	6805      	ldr	r5, [r0, #0]
 80159c4:	9404      	str	r4, [sp, #16]
 80159c6:	6a2c      	ldr	r4, [r5, #32]
 80159c8:	46a4      	mov	ip, r4
 80159ca:	bcf0      	pop	{r4, r5, r6, r7}
 80159cc:	4760      	bx	ip
 80159ce:	2001      	movs	r0, #1
 80159d0:	e7f3      	b.n	80159ba <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

080159d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80159d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d6:	b091      	sub	sp, #68	; 0x44
 80159d8:	469a      	mov	sl, r3
 80159da:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80159dc:	9206      	str	r2, [sp, #24]
 80159de:	68a3      	ldr	r3, [r4, #8]
 80159e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80159e2:	4688      	mov	r8, r1
 80159e4:	06d9      	lsls	r1, r3, #27
 80159e6:	bf44      	itt	mi
 80159e8:	6883      	ldrmi	r3, [r0, #8]
 80159ea:	60a3      	strmi	r3, [r4, #8]
 80159ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80159ee:	4293      	cmp	r3, r2
 80159f0:	4681      	mov	r9, r0
 80159f2:	d107      	bne.n	8015a04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 80159f4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80159f6:	f7ff ff6f 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 80159fa:	b118      	cbz	r0, 8015a04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 80159fc:	9b06      	ldr	r3, [sp, #24]
 80159fe:	7163      	strb	r3, [r4, #5]
 8015a00:	2700      	movs	r7, #0
 8015a02:	e07f      	b.n	8015b04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 8015a04:	4651      	mov	r1, sl
 8015a06:	4648      	mov	r0, r9
 8015a08:	f7ff ff66 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015a0c:	b1c0      	cbz	r0, 8015a40 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8015a0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015a10:	6023      	str	r3, [r4, #0]
 8015a12:	f1b8 0f00 	cmp.w	r8, #0
 8015a16:	9b06      	ldr	r3, [sp, #24]
 8015a18:	7123      	strb	r3, [r4, #4]
 8015a1a:	db0b      	blt.n	8015a34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 8015a1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015a1e:	4498      	add	r8, r3
 8015a20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015a22:	4543      	cmp	r3, r8
 8015a24:	bf0c      	ite	eq
 8015a26:	f04f 0806 	moveq.w	r8, #6
 8015a2a:	f04f 0801 	movne.w	r8, #1
 8015a2e:	f884 8006 	strb.w	r8, [r4, #6]
 8015a32:	e7e5      	b.n	8015a00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8015a34:	f118 0f02 	cmn.w	r8, #2
 8015a38:	d1e2      	bne.n	8015a00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	71a3      	strb	r3, [r4, #6]
 8015a3e:	e7df      	b.n	8015a00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8015a40:	f1b8 0f00 	cmp.w	r8, #0
 8015a44:	bfa9      	itett	ge
 8015a46:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8015a48:	9007      	strlt	r0, [sp, #28]
 8015a4a:	eba3 0308 	subge.w	r3, r3, r8
 8015a4e:	9307      	strge	r3, [sp, #28]
 8015a50:	2700      	movs	r7, #0
 8015a52:	2302      	movs	r3, #2
 8015a54:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 8015a58:	2301      	movs	r3, #1
 8015a5a:	9308      	str	r3, [sp, #32]
 8015a5c:	9b06      	ldr	r3, [sp, #24]
 8015a5e:	f043 0301 	orr.w	r3, r3, #1
 8015a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a64:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8015a68:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	f1bb 0f00 	cmp.w	fp, #0
 8015a72:	f000 80d4 	beq.w	8015c1e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 8015a76:	2300      	movs	r3, #0
 8015a78:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8015a7c:	9b05      	ldr	r3, [sp, #20]
 8015a7e:	68a5      	ldr	r5, [r4, #8]
 8015a80:	68db      	ldr	r3, [r3, #12]
 8015a82:	950f      	str	r5, [sp, #60]	; 0x3c
 8015a84:	07da      	lsls	r2, r3, #31
 8015a86:	bf43      	ittte	mi
 8015a88:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8015a8a:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8015a8c:	6800      	ldrmi	r0, [r0, #0]
 8015a8e:	9a06      	ldrpl	r2, [sp, #24]
 8015a90:	ea4f 2123 	mov.w	r1, r3, asr #8
 8015a94:	bf48      	it	mi
 8015a96:	5841      	ldrmi	r1, [r0, r1]
 8015a98:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015a9a:	4401      	add	r1, r0
 8015a9c:	9807      	ldr	r0, [sp, #28]
 8015a9e:	b138      	cbz	r0, 8015ab0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xde>
 8015aa0:	4288      	cmp	r0, r1
 8015aa2:	9e08      	ldr	r6, [sp, #32]
 8015aa4:	bf2c      	ite	cs
 8015aa6:	2000      	movcs	r0, #0
 8015aa8:	2001      	movcc	r0, #1
 8015aaa:	42b0      	cmp	r0, r6
 8015aac:	f000 80b3 	beq.w	8015c16 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 8015ab0:	079b      	lsls	r3, r3, #30
 8015ab2:	d407      	bmi.n	8015ac4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf2>
 8015ab4:	f118 0f02 	cmn.w	r8, #2
 8015ab8:	d102      	bne.n	8015ac0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xee>
 8015aba:	07ae      	lsls	r6, r5, #30
 8015abc:	f000 80ad 	beq.w	8015c1a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 8015ac0:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8015ac4:	9b05      	ldr	r3, [sp, #20]
 8015ac6:	6898      	ldr	r0, [r3, #8]
 8015ac8:	ad0d      	add	r5, sp, #52	; 0x34
 8015aca:	6803      	ldr	r3, [r0, #0]
 8015acc:	9503      	str	r5, [sp, #12]
 8015ace:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015ad0:	9502      	str	r5, [sp, #8]
 8015ad2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015ad4:	e9cd 1500 	strd	r1, r5, [sp]
 8015ad8:	4641      	mov	r1, r8
 8015ada:	69dd      	ldr	r5, [r3, #28]
 8015adc:	4653      	mov	r3, sl
 8015ade:	47a8      	blx	r5
 8015ae0:	7963      	ldrb	r3, [r4, #5]
 8015ae2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8015ae6:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8015aea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015aec:	4313      	orrs	r3, r2
 8015aee:	2d06      	cmp	r5, #6
 8015af0:	7163      	strb	r3, [r4, #5]
 8015af2:	d001      	beq.n	8015af8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x126>
 8015af4:	2d02      	cmp	r5, #2
 8015af6:	d109      	bne.n	8015b0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 8015af8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8015afc:	6021      	str	r1, [r4, #0]
 8015afe:	7123      	strb	r3, [r4, #4]
 8015b00:	71a5      	strb	r5, [r4, #6]
 8015b02:	4607      	mov	r7, r0
 8015b04:	4638      	mov	r0, r7
 8015b06:	b011      	add	sp, #68	; 0x44
 8015b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b0c:	6822      	ldr	r2, [r4, #0]
 8015b0e:	b9a7      	cbnz	r7, 8015b3a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 8015b10:	b9aa      	cbnz	r2, 8015b3e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 8015b12:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8015b16:	6021      	str	r1, [r4, #0]
 8015b18:	7122      	strb	r2, [r4, #4]
 8015b1a:	b121      	cbz	r1, 8015b26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015b1c:	b11b      	cbz	r3, 8015b26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015b1e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015b22:	07dd      	lsls	r5, r3, #31
 8015b24:	d5ed      	bpl.n	8015b02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015b26:	7963      	ldrb	r3, [r4, #5]
 8015b28:	2b04      	cmp	r3, #4
 8015b2a:	d0ea      	beq.n	8015b02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015b2c:	9b05      	ldr	r3, [sp, #20]
 8015b2e:	3b08      	subs	r3, #8
 8015b30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015b34:	9305      	str	r3, [sp, #20]
 8015b36:	4607      	mov	r7, r0
 8015b38:	e799      	b.n	8015a6e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 8015b3a:	2a00      	cmp	r2, #0
 8015b3c:	d037      	beq.n	8015bae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
 8015b3e:	4291      	cmp	r1, r2
 8015b40:	d106      	bne.n	8015b50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17e>
 8015b42:	7923      	ldrb	r3, [r4, #4]
 8015b44:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8015b48:	4313      	orrs	r3, r2
 8015b4a:	7123      	strb	r3, [r4, #4]
 8015b4c:	4638      	mov	r0, r7
 8015b4e:	e7ea      	b.n	8015b26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015b50:	b909      	cbnz	r1, 8015b56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d0fa      	beq.n	8015b4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8015b56:	2b03      	cmp	r3, #3
 8015b58:	79a6      	ldrb	r6, [r4, #6]
 8015b5a:	d904      	bls.n	8015b66 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
 8015b5c:	07d9      	lsls	r1, r3, #31
 8015b5e:	d529      	bpl.n	8015bb4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 8015b60:	68a3      	ldr	r3, [r4, #8]
 8015b62:	079b      	lsls	r3, r3, #30
 8015b64:	d526      	bpl.n	8015bb4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 8015b66:	b97e      	cbnz	r6, 8015b88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b6>
 8015b68:	2d03      	cmp	r5, #3
 8015b6a:	d905      	bls.n	8015b78 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a6>
 8015b6c:	07ee      	lsls	r6, r5, #31
 8015b6e:	d541      	bpl.n	8015bf4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 8015b70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015b74:	0798      	lsls	r0, r3, #30
 8015b76:	d53d      	bpl.n	8015bf4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 8015b78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015b7a:	9300      	str	r3, [sp, #0]
 8015b7c:	4641      	mov	r1, r8
 8015b7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b80:	4650      	mov	r0, sl
 8015b82:	f7ff ff11 	bl	80159a8 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8015b86:	4606      	mov	r6, r0
 8015b88:	b9e5      	cbnz	r5, 8015bc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015b8a:	2e03      	cmp	r6, #3
 8015b8c:	d905      	bls.n	8015b9a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c8>
 8015b8e:	07f1      	lsls	r1, r6, #31
 8015b90:	d532      	bpl.n	8015bf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8015b92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015b96:	079a      	lsls	r2, r3, #30
 8015b98:	d52e      	bpl.n	8015bf8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 8015b9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015b9c:	9300      	str	r3, [sp, #0]
 8015b9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ba0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ba2:	4641      	mov	r1, r8
 8015ba4:	4650      	mov	r0, sl
 8015ba6:	f7ff feff 	bl	80159a8 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8015baa:	4605      	mov	r5, r0
 8015bac:	e00a      	b.n	8015bc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015bae:	2900      	cmp	r1, #0
 8015bb0:	d1d1      	bne.n	8015b56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8015bb2:	e7cb      	b.n	8015b4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8015bb4:	2e01      	cmp	r6, #1
 8015bb6:	bf38      	it	cc
 8015bb8:	2601      	movcc	r6, #1
 8015bba:	2d01      	cmp	r5, #1
 8015bbc:	bf38      	it	cc
 8015bbe:	2501      	movcc	r5, #1
 8015bc0:	b2f6      	uxtb	r6, r6
 8015bc2:	b2ed      	uxtb	r5, r5
 8015bc4:	ea85 0306 	eor.w	r3, r5, r6
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b03      	cmp	r3, #3
 8015bcc:	d916      	bls.n	8015bfc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22a>
 8015bce:	2d03      	cmp	r5, #3
 8015bd0:	bf81      	itttt	hi
 8015bd2:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8015bd4:	6023      	strhi	r3, [r4, #0]
 8015bd6:	462e      	movhi	r6, r5
 8015bd8:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8015bdc:	bf86      	itte	hi
 8015bde:	7123      	strbhi	r3, [r4, #4]
 8015be0:	2000      	movhi	r0, #0
 8015be2:	4638      	movls	r0, r7
 8015be4:	07b3      	lsls	r3, r6, #30
 8015be6:	71a6      	strb	r6, [r4, #6]
 8015be8:	d402      	bmi.n	8015bf0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x21e>
 8015bea:	f016 0601 	ands.w	r6, r6, #1
 8015bee:	d19a      	bne.n	8015b26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	e786      	b.n	8015b02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015bf4:	2601      	movs	r6, #1
 8015bf6:	e7e5      	b.n	8015bc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015bf8:	2501      	movs	r5, #1
 8015bfa:	e7e3      	b.n	8015bc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015bfc:	4035      	ands	r5, r6
 8015bfe:	b2ed      	uxtb	r5, r5
 8015c00:	2300      	movs	r3, #0
 8015c02:	2d03      	cmp	r5, #3
 8015c04:	6023      	str	r3, [r4, #0]
 8015c06:	d903      	bls.n	8015c10 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 8015c08:	2302      	movs	r3, #2
 8015c0a:	71a3      	strb	r3, [r4, #6]
 8015c0c:	2001      	movs	r0, #1
 8015c0e:	e778      	b.n	8015b02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015c10:	2001      	movs	r0, #1
 8015c12:	71a0      	strb	r0, [r4, #6]
 8015c14:	e787      	b.n	8015b26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015c16:	2301      	movs	r3, #1
 8015c18:	9309      	str	r3, [sp, #36]	; 0x24
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	e786      	b.n	8015b2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8015c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f43f af6f 	beq.w	8015b04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 8015c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c28:	2b01      	cmp	r3, #1
 8015c2a:	f43f af6b 	beq.w	8015b04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 8015c2e:	2301      	movs	r3, #1
 8015c30:	930a      	str	r3, [sp, #40]	; 0x28
 8015c32:	f8cd b020 	str.w	fp, [sp, #32]
 8015c36:	e715      	b.n	8015a64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

08015c38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8015c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c3c:	ed2d 8b02 	vpush	{d8}
 8015c40:	b089      	sub	sp, #36	; 0x24
 8015c42:	ee08 1a10 	vmov	s16, r1
 8015c46:	4606      	mov	r6, r0
 8015c48:	4617      	mov	r7, r2
 8015c4a:	461c      	mov	r4, r3
 8015c4c:	f7ff fd07 	bl	801565e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8015c50:	4605      	mov	r5, r0
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d15f      	bne.n	8015d16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015c56:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8015c5a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8015c5e:	f019 0f10 	tst.w	r9, #16
 8015c62:	bf18      	it	ne
 8015c64:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8015c68:	f009 0301 	and.w	r3, r9, #1
 8015c6c:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8015c70:	9303      	str	r3, [sp, #12]
 8015c72:	f10d 0b10 	add.w	fp, sp, #16
 8015c76:	f1ba 0f00 	cmp.w	sl, #0
 8015c7a:	d074      	beq.n	8015d66 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8015c82:	9304      	str	r3, [sp, #16]
 8015c84:	f88d 3014 	strb.w	r3, [sp, #20]
 8015c88:	2300      	movs	r3, #0
 8015c8a:	9307      	str	r3, [sp, #28]
 8015c8c:	f002 0301 	and.w	r3, r2, #1
 8015c90:	9301      	str	r3, [sp, #4]
 8015c92:	f002 0302 	and.w	r3, r2, #2
 8015c96:	9302      	str	r3, [sp, #8]
 8015c98:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8015c9c:	430b      	orrs	r3, r1
 8015c9e:	f8cd 9018 	str.w	r9, [sp, #24]
 8015ca2:	d104      	bne.n	8015cae <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 8015ca4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015ca8:	f1a8 0808 	sub.w	r8, r8, #8
 8015cac:	e7e3      	b.n	8015c76 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 8015cae:	2f00      	cmp	r7, #0
 8015cb0:	d037      	beq.n	8015d22 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 8015cb2:	9b01      	ldr	r3, [sp, #4]
 8015cb4:	1212      	asrs	r2, r2, #8
 8015cb6:	b10b      	cbz	r3, 8015cbc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	589a      	ldr	r2, [r3, r2]
 8015cbc:	443a      	add	r2, r7
 8015cbe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015cc2:	6803      	ldr	r3, [r0, #0]
 8015cc4:	ee18 1a10 	vmov	r1, s16
 8015cc8:	699d      	ldr	r5, [r3, #24]
 8015cca:	465b      	mov	r3, fp
 8015ccc:	47a8      	blx	r5
 8015cce:	4605      	mov	r5, r0
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d0e7      	beq.n	8015ca4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8015cd4:	9b07      	ldr	r3, [sp, #28]
 8015cd6:	2b08      	cmp	r3, #8
 8015cd8:	d104      	bne.n	8015ce4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 8015cda:	9b01      	ldr	r3, [sp, #4]
 8015cdc:	b113      	cbz	r3, 8015ce4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 8015cde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ce2:	9307      	str	r3, [sp, #28]
 8015ce4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015ce8:	2b03      	cmp	r3, #3
 8015cea:	d905      	bls.n	8015cf8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8015cec:	9a02      	ldr	r2, [sp, #8]
 8015cee:	b91a      	cbnz	r2, 8015cf8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8015cf0:	f023 0302 	bic.w	r3, r3, #2
 8015cf4:	f88d 3014 	strb.w	r3, [sp, #20]
 8015cf8:	68e1      	ldr	r1, [r4, #12]
 8015cfa:	b9d1      	cbnz	r1, 8015d32 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 8015cfc:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015d04:	7923      	ldrb	r3, [r4, #4]
 8015d06:	2b03      	cmp	r3, #3
 8015d08:	d905      	bls.n	8015d16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015d0a:	079a      	lsls	r2, r3, #30
 8015d0c:	d50b      	bpl.n	8015d26 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 8015d0e:	68b3      	ldr	r3, [r6, #8]
 8015d10:	f013 0f01 	tst.w	r3, #1
 8015d14:	d1c6      	bne.n	8015ca4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8015d16:	4628      	mov	r0, r5
 8015d18:	b009      	add	sp, #36	; 0x24
 8015d1a:	ecbd 8b02 	vpop	{d8}
 8015d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d22:	463a      	mov	r2, r7
 8015d24:	e7cb      	b.n	8015cbe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 8015d26:	07db      	lsls	r3, r3, #31
 8015d28:	d5f5      	bpl.n	8015d16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015d2a:	68b3      	ldr	r3, [r6, #8]
 8015d2c:	f013 0f02 	tst.w	r3, #2
 8015d30:	e7f0      	b.n	8015d14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	9a04      	ldr	r2, [sp, #16]
 8015d36:	4293      	cmp	r3, r2
 8015d38:	d004      	beq.n	8015d44 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	2302      	movs	r3, #2
 8015d40:	7123      	strb	r3, [r4, #4]
 8015d42:	e7e8      	b.n	8015d16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015d44:	b12b      	cbz	r3, 8015d52 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 8015d46:	7923      	ldrb	r3, [r4, #4]
 8015d48:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015d4c:	4313      	orrs	r3, r2
 8015d4e:	7123      	strb	r3, [r4, #4]
 8015d50:	e7a8      	b.n	8015ca4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8015d52:	9807      	ldr	r0, [sp, #28]
 8015d54:	2808      	cmp	r0, #8
 8015d56:	d0f2      	beq.n	8015d3e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8015d58:	2908      	cmp	r1, #8
 8015d5a:	d0f0      	beq.n	8015d3e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8015d5c:	f7ff fdbc 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d1f0      	bne.n	8015d46 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 8015d64:	e7eb      	b.n	8015d3e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8015d66:	7925      	ldrb	r5, [r4, #4]
 8015d68:	3d00      	subs	r5, #0
 8015d6a:	bf18      	it	ne
 8015d6c:	2501      	movne	r5, #1
 8015d6e:	e7d2      	b.n	8015d16 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

08015d70 <_ZSt25__throw_bad_function_callv>:
 8015d70:	b508      	push	{r3, lr}
 8015d72:	f000 f8b0 	bl	8015ed6 <abort>

08015d76 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015d76:	b508      	push	{r3, lr}
 8015d78:	4780      	blx	r0
 8015d7a:	f000 f8ac 	bl	8015ed6 <abort>
	...

08015d80 <_ZSt13get_terminatev>:
 8015d80:	4b02      	ldr	r3, [pc, #8]	; (8015d8c <_ZSt13get_terminatev+0xc>)
 8015d82:	6818      	ldr	r0, [r3, #0]
 8015d84:	f3bf 8f5b 	dmb	ish
 8015d88:	4770      	bx	lr
 8015d8a:	bf00      	nop
 8015d8c:	240000b4 	.word	0x240000b4

08015d90 <_ZSt9terminatev>:
 8015d90:	b508      	push	{r3, lr}
 8015d92:	f7ff fff5 	bl	8015d80 <_ZSt13get_terminatev>
 8015d96:	f7ff ffee 	bl	8015d76 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08015d9c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8015d9c:	b510      	push	{r4, lr}
 8015d9e:	4b03      	ldr	r3, [pc, #12]	; (8015dac <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8015da0:	6003      	str	r3, [r0, #0]
 8015da2:	4604      	mov	r4, r0
 8015da4:	f7ff fd93 	bl	80158ce <_ZNSt9type_infoD1Ev>
 8015da8:	4620      	mov	r0, r4
 8015daa:	bd10      	pop	{r4, pc}
 8015dac:	0801dff8 	.word	0x0801dff8

08015db0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8015db0:	b510      	push	{r4, lr}
 8015db2:	4604      	mov	r4, r0
 8015db4:	f7ff fff2 	bl	8015d9c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 8015db8:	4620      	mov	r0, r4
 8015dba:	2108      	movs	r1, #8
 8015dbc:	f7ff fc70 	bl	80156a0 <_ZdlPvj>
 8015dc0:	4620      	mov	r0, r4
 8015dc2:	bd10      	pop	{r4, pc}

08015dc4 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 8015dc4:	68c0      	ldr	r0, [r0, #12]
 8015dc6:	68c9      	ldr	r1, [r1, #12]
 8015dc8:	b410      	push	{r4}
 8015dca:	6804      	ldr	r4, [r0, #0]
 8015dcc:	6924      	ldr	r4, [r4, #16]
 8015dce:	3302      	adds	r3, #2
 8015dd0:	46a4      	mov	ip, r4
 8015dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015dd6:	4760      	bx	ip

08015dd8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 8015dd8:	b510      	push	{r4, lr}
 8015dda:	4b03      	ldr	r3, [pc, #12]	; (8015de8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 8015ddc:	6003      	str	r3, [r0, #0]
 8015dde:	4604      	mov	r4, r0
 8015de0:	f7ff fd75 	bl	80158ce <_ZNSt9type_infoD1Ev>
 8015de4:	4620      	mov	r0, r4
 8015de6:	bd10      	pop	{r4, pc}
 8015de8:	0801e048 	.word	0x0801e048

08015dec <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 8015dec:	b510      	push	{r4, lr}
 8015dee:	4604      	mov	r4, r0
 8015df0:	f7ff fff2 	bl	8015dd8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8015df4:	4620      	mov	r0, r4
 8015df6:	2110      	movs	r1, #16
 8015df8:	f7ff fc52 	bl	80156a0 <_ZdlPvj>
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	bd10      	pop	{r4, pc}

08015e00 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 8015e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e04:	4605      	mov	r5, r0
 8015e06:	460e      	mov	r6, r1
 8015e08:	4617      	mov	r7, r2
 8015e0a:	4698      	mov	r8, r3
 8015e0c:	f7ff fd64 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015e10:	4604      	mov	r4, r0
 8015e12:	b9f0      	cbnz	r0, 8015e52 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015e14:	4929      	ldr	r1, [pc, #164]	; (8015ebc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 8015e16:	4630      	mov	r0, r6
 8015e18:	f7ff fd5e 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015e1c:	b300      	cbz	r0, 8015e60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 8015e1e:	682b      	ldr	r3, [r5, #0]
 8015e20:	4927      	ldr	r1, [pc, #156]	; (8015ec0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 8015e22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015e26:	f7ff fd57 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015e2a:	b110      	cbz	r0, 8015e32 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 8015e2c:	603c      	str	r4, [r7, #0]
 8015e2e:	4604      	mov	r4, r0
 8015e30:	e00f      	b.n	8015e52 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015e32:	682b      	ldr	r3, [r5, #0]
 8015e34:	4923      	ldr	r1, [pc, #140]	; (8015ec4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 8015e36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015e3a:	f7ff fd4d 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015e3e:	4681      	mov	r9, r0
 8015e40:	b170      	cbz	r0, 8015e60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 8015e42:	68e8      	ldr	r0, [r5, #12]
 8015e44:	6803      	ldr	r3, [r0, #0]
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	4798      	blx	r3
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	b120      	cbz	r0, 8015e58 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 8015e4e:	4b1e      	ldr	r3, [pc, #120]	; (8015ec8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 8015e50:	603b      	str	r3, [r7, #0]
 8015e52:	4620      	mov	r0, r4
 8015e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e58:	4b1c      	ldr	r3, [pc, #112]	; (8015ecc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 8015e5a:	603b      	str	r3, [r7, #0]
 8015e5c:	464c      	mov	r4, r9
 8015e5e:	e7f8      	b.n	8015e52 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015e60:	682b      	ldr	r3, [r5, #0]
 8015e62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015e66:	b33e      	cbz	r6, 8015eb8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 8015e68:	6833      	ldr	r3, [r6, #0]
 8015e6a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015e6e:	f7ff fd33 	bl	80158d8 <_ZNKSt9type_infoeqERKS_>
 8015e72:	2800      	cmp	r0, #0
 8015e74:	d0db      	beq.n	8015e2e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 8015e76:	f018 0f01 	tst.w	r8, #1
 8015e7a:	d0ea      	beq.n	8015e52 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015e7c:	68b3      	ldr	r3, [r6, #8]
 8015e7e:	68a9      	ldr	r1, [r5, #8]
 8015e80:	f003 0060 	and.w	r0, r3, #96	; 0x60
 8015e84:	f001 0260 	and.w	r2, r1, #96	; 0x60
 8015e88:	ea30 0c02 	bics.w	ip, r0, r2
 8015e8c:	bf18      	it	ne
 8015e8e:	4013      	andne	r3, r2
 8015e90:	ea23 0301 	bic.w	r3, r3, r1
 8015e94:	ea22 0200 	bic.w	r2, r2, r0
 8015e98:	4313      	orrs	r3, r2
 8015e9a:	d1da      	bne.n	8015e52 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015e9c:	07cb      	lsls	r3, r1, #31
 8015e9e:	682b      	ldr	r3, [r5, #0]
 8015ea0:	699c      	ldr	r4, [r3, #24]
 8015ea2:	bf58      	it	pl
 8015ea4:	f028 0801 	bicpl.w	r8, r8, #1
 8015ea8:	4643      	mov	r3, r8
 8015eaa:	463a      	mov	r2, r7
 8015eac:	4631      	mov	r1, r6
 8015eae:	4628      	mov	r0, r5
 8015eb0:	46a4      	mov	ip, r4
 8015eb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eb6:	4760      	bx	ip
 8015eb8:	f000 f80a 	bl	8015ed0 <__cxa_bad_typeid>
 8015ebc:	0801dfac 	.word	0x0801dfac
 8015ec0:	0801de78 	.word	0x0801de78
 8015ec4:	0801e070 	.word	0x0801e070
 8015ec8:	0801e068 	.word	0x0801e068
 8015ecc:	0801e064 	.word	0x0801e064

08015ed0 <__cxa_bad_typeid>:
 8015ed0:	b508      	push	{r3, lr}
 8015ed2:	f000 f800 	bl	8015ed6 <abort>

08015ed6 <abort>:
 8015ed6:	b508      	push	{r3, lr}
 8015ed8:	2006      	movs	r0, #6
 8015eda:	f001 f8e5 	bl	80170a8 <raise>
 8015ede:	2001      	movs	r0, #1
 8015ee0:	f7eb fde4 	bl	8001aac <_exit>

08015ee4 <atexit>:
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	4601      	mov	r1, r0
 8015ee8:	461a      	mov	r2, r3
 8015eea:	4618      	mov	r0, r3
 8015eec:	f002 b882 	b.w	8017ff4 <__register_exitproc>

08015ef0 <atoi>:
 8015ef0:	220a      	movs	r2, #10
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	f002 b808 	b.w	8017f08 <strtol>

08015ef8 <__errno>:
 8015ef8:	4b01      	ldr	r3, [pc, #4]	; (8015f00 <__errno+0x8>)
 8015efa:	6818      	ldr	r0, [r3, #0]
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	240000b8 	.word	0x240000b8

08015f04 <std>:
 8015f04:	2300      	movs	r3, #0
 8015f06:	b510      	push	{r4, lr}
 8015f08:	4604      	mov	r4, r0
 8015f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8015f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f12:	6083      	str	r3, [r0, #8]
 8015f14:	8181      	strh	r1, [r0, #12]
 8015f16:	6643      	str	r3, [r0, #100]	; 0x64
 8015f18:	81c2      	strh	r2, [r0, #14]
 8015f1a:	6183      	str	r3, [r0, #24]
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	2208      	movs	r2, #8
 8015f20:	305c      	adds	r0, #92	; 0x5c
 8015f22:	f000 f935 	bl	8016190 <memset>
 8015f26:	4b05      	ldr	r3, [pc, #20]	; (8015f3c <std+0x38>)
 8015f28:	6263      	str	r3, [r4, #36]	; 0x24
 8015f2a:	4b05      	ldr	r3, [pc, #20]	; (8015f40 <std+0x3c>)
 8015f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f2e:	4b05      	ldr	r3, [pc, #20]	; (8015f44 <std+0x40>)
 8015f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f32:	4b05      	ldr	r3, [pc, #20]	; (8015f48 <std+0x44>)
 8015f34:	6224      	str	r4, [r4, #32]
 8015f36:	6323      	str	r3, [r4, #48]	; 0x30
 8015f38:	bd10      	pop	{r4, pc}
 8015f3a:	bf00      	nop
 8015f3c:	08017189 	.word	0x08017189
 8015f40:	080171ab 	.word	0x080171ab
 8015f44:	080171e3 	.word	0x080171e3
 8015f48:	08017207 	.word	0x08017207

08015f4c <_cleanup_r>:
 8015f4c:	4901      	ldr	r1, [pc, #4]	; (8015f54 <_cleanup_r+0x8>)
 8015f4e:	f000 b8af 	b.w	80160b0 <_fwalk_reent>
 8015f52:	bf00      	nop
 8015f54:	08018dd9 	.word	0x08018dd9

08015f58 <__sfmoreglue>:
 8015f58:	b570      	push	{r4, r5, r6, lr}
 8015f5a:	2268      	movs	r2, #104	; 0x68
 8015f5c:	1e4d      	subs	r5, r1, #1
 8015f5e:	4355      	muls	r5, r2
 8015f60:	460e      	mov	r6, r1
 8015f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f66:	f000 f93b 	bl	80161e0 <_malloc_r>
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	b140      	cbz	r0, 8015f80 <__sfmoreglue+0x28>
 8015f6e:	2100      	movs	r1, #0
 8015f70:	e9c0 1600 	strd	r1, r6, [r0]
 8015f74:	300c      	adds	r0, #12
 8015f76:	60a0      	str	r0, [r4, #8]
 8015f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f7c:	f000 f908 	bl	8016190 <memset>
 8015f80:	4620      	mov	r0, r4
 8015f82:	bd70      	pop	{r4, r5, r6, pc}

08015f84 <__sfp_lock_acquire>:
 8015f84:	4801      	ldr	r0, [pc, #4]	; (8015f8c <__sfp_lock_acquire+0x8>)
 8015f86:	f000 b8d8 	b.w	801613a <__retarget_lock_acquire_recursive>
 8015f8a:	bf00      	nop
 8015f8c:	24045fa7 	.word	0x24045fa7

08015f90 <__sfp_lock_release>:
 8015f90:	4801      	ldr	r0, [pc, #4]	; (8015f98 <__sfp_lock_release+0x8>)
 8015f92:	f000 b8d4 	b.w	801613e <__retarget_lock_release_recursive>
 8015f96:	bf00      	nop
 8015f98:	24045fa7 	.word	0x24045fa7

08015f9c <__sinit_lock_acquire>:
 8015f9c:	4801      	ldr	r0, [pc, #4]	; (8015fa4 <__sinit_lock_acquire+0x8>)
 8015f9e:	f000 b8cc 	b.w	801613a <__retarget_lock_acquire_recursive>
 8015fa2:	bf00      	nop
 8015fa4:	24045fa8 	.word	0x24045fa8

08015fa8 <__sinit_lock_release>:
 8015fa8:	4801      	ldr	r0, [pc, #4]	; (8015fb0 <__sinit_lock_release+0x8>)
 8015faa:	f000 b8c8 	b.w	801613e <__retarget_lock_release_recursive>
 8015fae:	bf00      	nop
 8015fb0:	24045fa8 	.word	0x24045fa8

08015fb4 <__sinit>:
 8015fb4:	b510      	push	{r4, lr}
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	f7ff fff0 	bl	8015f9c <__sinit_lock_acquire>
 8015fbc:	69a3      	ldr	r3, [r4, #24]
 8015fbe:	b11b      	cbz	r3, 8015fc8 <__sinit+0x14>
 8015fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fc4:	f7ff bff0 	b.w	8015fa8 <__sinit_lock_release>
 8015fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8015fce:	4b13      	ldr	r3, [pc, #76]	; (801601c <__sinit+0x68>)
 8015fd0:	4a13      	ldr	r2, [pc, #76]	; (8016020 <__sinit+0x6c>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fd6:	42a3      	cmp	r3, r4
 8015fd8:	bf04      	itt	eq
 8015fda:	2301      	moveq	r3, #1
 8015fdc:	61a3      	streq	r3, [r4, #24]
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f000 f820 	bl	8016024 <__sfp>
 8015fe4:	6060      	str	r0, [r4, #4]
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f000 f81c 	bl	8016024 <__sfp>
 8015fec:	60a0      	str	r0, [r4, #8]
 8015fee:	4620      	mov	r0, r4
 8015ff0:	f000 f818 	bl	8016024 <__sfp>
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	60e0      	str	r0, [r4, #12]
 8015ff8:	2104      	movs	r1, #4
 8015ffa:	6860      	ldr	r0, [r4, #4]
 8015ffc:	f7ff ff82 	bl	8015f04 <std>
 8016000:	68a0      	ldr	r0, [r4, #8]
 8016002:	2201      	movs	r2, #1
 8016004:	2109      	movs	r1, #9
 8016006:	f7ff ff7d 	bl	8015f04 <std>
 801600a:	68e0      	ldr	r0, [r4, #12]
 801600c:	2202      	movs	r2, #2
 801600e:	2112      	movs	r1, #18
 8016010:	f7ff ff78 	bl	8015f04 <std>
 8016014:	2301      	movs	r3, #1
 8016016:	61a3      	str	r3, [r4, #24]
 8016018:	e7d2      	b.n	8015fc0 <__sinit+0xc>
 801601a:	bf00      	nop
 801601c:	0801e10c 	.word	0x0801e10c
 8016020:	08015f4d 	.word	0x08015f4d

08016024 <__sfp>:
 8016024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016026:	4607      	mov	r7, r0
 8016028:	f7ff ffac 	bl	8015f84 <__sfp_lock_acquire>
 801602c:	4b1e      	ldr	r3, [pc, #120]	; (80160a8 <__sfp+0x84>)
 801602e:	681e      	ldr	r6, [r3, #0]
 8016030:	69b3      	ldr	r3, [r6, #24]
 8016032:	b913      	cbnz	r3, 801603a <__sfp+0x16>
 8016034:	4630      	mov	r0, r6
 8016036:	f7ff ffbd 	bl	8015fb4 <__sinit>
 801603a:	3648      	adds	r6, #72	; 0x48
 801603c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016040:	3b01      	subs	r3, #1
 8016042:	d503      	bpl.n	801604c <__sfp+0x28>
 8016044:	6833      	ldr	r3, [r6, #0]
 8016046:	b30b      	cbz	r3, 801608c <__sfp+0x68>
 8016048:	6836      	ldr	r6, [r6, #0]
 801604a:	e7f7      	b.n	801603c <__sfp+0x18>
 801604c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016050:	b9d5      	cbnz	r5, 8016088 <__sfp+0x64>
 8016052:	4b16      	ldr	r3, [pc, #88]	; (80160ac <__sfp+0x88>)
 8016054:	60e3      	str	r3, [r4, #12]
 8016056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801605a:	6665      	str	r5, [r4, #100]	; 0x64
 801605c:	f000 f86c 	bl	8016138 <__retarget_lock_init_recursive>
 8016060:	f7ff ff96 	bl	8015f90 <__sfp_lock_release>
 8016064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801606c:	6025      	str	r5, [r4, #0]
 801606e:	61a5      	str	r5, [r4, #24]
 8016070:	2208      	movs	r2, #8
 8016072:	4629      	mov	r1, r5
 8016074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016078:	f000 f88a 	bl	8016190 <memset>
 801607c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016084:	4620      	mov	r0, r4
 8016086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016088:	3468      	adds	r4, #104	; 0x68
 801608a:	e7d9      	b.n	8016040 <__sfp+0x1c>
 801608c:	2104      	movs	r1, #4
 801608e:	4638      	mov	r0, r7
 8016090:	f7ff ff62 	bl	8015f58 <__sfmoreglue>
 8016094:	4604      	mov	r4, r0
 8016096:	6030      	str	r0, [r6, #0]
 8016098:	2800      	cmp	r0, #0
 801609a:	d1d5      	bne.n	8016048 <__sfp+0x24>
 801609c:	f7ff ff78 	bl	8015f90 <__sfp_lock_release>
 80160a0:	230c      	movs	r3, #12
 80160a2:	603b      	str	r3, [r7, #0]
 80160a4:	e7ee      	b.n	8016084 <__sfp+0x60>
 80160a6:	bf00      	nop
 80160a8:	0801e10c 	.word	0x0801e10c
 80160ac:	ffff0001 	.word	0xffff0001

080160b0 <_fwalk_reent>:
 80160b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160b4:	4606      	mov	r6, r0
 80160b6:	4688      	mov	r8, r1
 80160b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160bc:	2700      	movs	r7, #0
 80160be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160c2:	f1b9 0901 	subs.w	r9, r9, #1
 80160c6:	d505      	bpl.n	80160d4 <_fwalk_reent+0x24>
 80160c8:	6824      	ldr	r4, [r4, #0]
 80160ca:	2c00      	cmp	r4, #0
 80160cc:	d1f7      	bne.n	80160be <_fwalk_reent+0xe>
 80160ce:	4638      	mov	r0, r7
 80160d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160d4:	89ab      	ldrh	r3, [r5, #12]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d907      	bls.n	80160ea <_fwalk_reent+0x3a>
 80160da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160de:	3301      	adds	r3, #1
 80160e0:	d003      	beq.n	80160ea <_fwalk_reent+0x3a>
 80160e2:	4629      	mov	r1, r5
 80160e4:	4630      	mov	r0, r6
 80160e6:	47c0      	blx	r8
 80160e8:	4307      	orrs	r7, r0
 80160ea:	3568      	adds	r5, #104	; 0x68
 80160ec:	e7e9      	b.n	80160c2 <_fwalk_reent+0x12>
	...

080160f0 <__libc_init_array>:
 80160f0:	b570      	push	{r4, r5, r6, lr}
 80160f2:	4d0d      	ldr	r5, [pc, #52]	; (8016128 <__libc_init_array+0x38>)
 80160f4:	4c0d      	ldr	r4, [pc, #52]	; (801612c <__libc_init_array+0x3c>)
 80160f6:	1b64      	subs	r4, r4, r5
 80160f8:	10a4      	asrs	r4, r4, #2
 80160fa:	2600      	movs	r6, #0
 80160fc:	42a6      	cmp	r6, r4
 80160fe:	d109      	bne.n	8016114 <__libc_init_array+0x24>
 8016100:	4d0b      	ldr	r5, [pc, #44]	; (8016130 <__libc_init_array+0x40>)
 8016102:	4c0c      	ldr	r4, [pc, #48]	; (8016134 <__libc_init_array+0x44>)
 8016104:	f004 fc12 	bl	801a92c <_init>
 8016108:	1b64      	subs	r4, r4, r5
 801610a:	10a4      	asrs	r4, r4, #2
 801610c:	2600      	movs	r6, #0
 801610e:	42a6      	cmp	r6, r4
 8016110:	d105      	bne.n	801611e <__libc_init_array+0x2e>
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	f855 3b04 	ldr.w	r3, [r5], #4
 8016118:	4798      	blx	r3
 801611a:	3601      	adds	r6, #1
 801611c:	e7ee      	b.n	80160fc <__libc_init_array+0xc>
 801611e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016122:	4798      	blx	r3
 8016124:	3601      	adds	r6, #1
 8016126:	e7f2      	b.n	801610e <__libc_init_array+0x1e>
 8016128:	0801e55c 	.word	0x0801e55c
 801612c:	0801e55c 	.word	0x0801e55c
 8016130:	0801e55c 	.word	0x0801e55c
 8016134:	0801e564 	.word	0x0801e564

08016138 <__retarget_lock_init_recursive>:
 8016138:	4770      	bx	lr

0801613a <__retarget_lock_acquire_recursive>:
 801613a:	4770      	bx	lr

0801613c <__retarget_lock_release>:
 801613c:	4770      	bx	lr

0801613e <__retarget_lock_release_recursive>:
 801613e:	4770      	bx	lr

08016140 <memcpy>:
 8016140:	440a      	add	r2, r1
 8016142:	4291      	cmp	r1, r2
 8016144:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016148:	d100      	bne.n	801614c <memcpy+0xc>
 801614a:	4770      	bx	lr
 801614c:	b510      	push	{r4, lr}
 801614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016156:	4291      	cmp	r1, r2
 8016158:	d1f9      	bne.n	801614e <memcpy+0xe>
 801615a:	bd10      	pop	{r4, pc}

0801615c <memmove>:
 801615c:	4288      	cmp	r0, r1
 801615e:	b510      	push	{r4, lr}
 8016160:	eb01 0402 	add.w	r4, r1, r2
 8016164:	d902      	bls.n	801616c <memmove+0x10>
 8016166:	4284      	cmp	r4, r0
 8016168:	4623      	mov	r3, r4
 801616a:	d807      	bhi.n	801617c <memmove+0x20>
 801616c:	1e43      	subs	r3, r0, #1
 801616e:	42a1      	cmp	r1, r4
 8016170:	d008      	beq.n	8016184 <memmove+0x28>
 8016172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016176:	f803 2f01 	strb.w	r2, [r3, #1]!
 801617a:	e7f8      	b.n	801616e <memmove+0x12>
 801617c:	4402      	add	r2, r0
 801617e:	4601      	mov	r1, r0
 8016180:	428a      	cmp	r2, r1
 8016182:	d100      	bne.n	8016186 <memmove+0x2a>
 8016184:	bd10      	pop	{r4, pc}
 8016186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801618a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801618e:	e7f7      	b.n	8016180 <memmove+0x24>

08016190 <memset>:
 8016190:	4402      	add	r2, r0
 8016192:	4603      	mov	r3, r0
 8016194:	4293      	cmp	r3, r2
 8016196:	d100      	bne.n	801619a <memset+0xa>
 8016198:	4770      	bx	lr
 801619a:	f803 1b01 	strb.w	r1, [r3], #1
 801619e:	e7f9      	b.n	8016194 <memset+0x4>

080161a0 <sbrk_aligned>:
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	4e0e      	ldr	r6, [pc, #56]	; (80161dc <sbrk_aligned+0x3c>)
 80161a4:	460c      	mov	r4, r1
 80161a6:	6831      	ldr	r1, [r6, #0]
 80161a8:	4605      	mov	r5, r0
 80161aa:	b911      	cbnz	r1, 80161b2 <sbrk_aligned+0x12>
 80161ac:	f000 ff3e 	bl	801702c <_sbrk_r>
 80161b0:	6030      	str	r0, [r6, #0]
 80161b2:	4621      	mov	r1, r4
 80161b4:	4628      	mov	r0, r5
 80161b6:	f000 ff39 	bl	801702c <_sbrk_r>
 80161ba:	1c43      	adds	r3, r0, #1
 80161bc:	d00a      	beq.n	80161d4 <sbrk_aligned+0x34>
 80161be:	1cc4      	adds	r4, r0, #3
 80161c0:	f024 0403 	bic.w	r4, r4, #3
 80161c4:	42a0      	cmp	r0, r4
 80161c6:	d007      	beq.n	80161d8 <sbrk_aligned+0x38>
 80161c8:	1a21      	subs	r1, r4, r0
 80161ca:	4628      	mov	r0, r5
 80161cc:	f000 ff2e 	bl	801702c <_sbrk_r>
 80161d0:	3001      	adds	r0, #1
 80161d2:	d101      	bne.n	80161d8 <sbrk_aligned+0x38>
 80161d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80161d8:	4620      	mov	r0, r4
 80161da:	bd70      	pop	{r4, r5, r6, pc}
 80161dc:	24045fb0 	.word	0x24045fb0

080161e0 <_malloc_r>:
 80161e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161e4:	1ccd      	adds	r5, r1, #3
 80161e6:	f025 0503 	bic.w	r5, r5, #3
 80161ea:	3508      	adds	r5, #8
 80161ec:	2d0c      	cmp	r5, #12
 80161ee:	bf38      	it	cc
 80161f0:	250c      	movcc	r5, #12
 80161f2:	2d00      	cmp	r5, #0
 80161f4:	4607      	mov	r7, r0
 80161f6:	db01      	blt.n	80161fc <_malloc_r+0x1c>
 80161f8:	42a9      	cmp	r1, r5
 80161fa:	d905      	bls.n	8016208 <_malloc_r+0x28>
 80161fc:	230c      	movs	r3, #12
 80161fe:	603b      	str	r3, [r7, #0]
 8016200:	2600      	movs	r6, #0
 8016202:	4630      	mov	r0, r6
 8016204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016208:	4e2e      	ldr	r6, [pc, #184]	; (80162c4 <_malloc_r+0xe4>)
 801620a:	f003 f9c1 	bl	8019590 <__malloc_lock>
 801620e:	6833      	ldr	r3, [r6, #0]
 8016210:	461c      	mov	r4, r3
 8016212:	bb34      	cbnz	r4, 8016262 <_malloc_r+0x82>
 8016214:	4629      	mov	r1, r5
 8016216:	4638      	mov	r0, r7
 8016218:	f7ff ffc2 	bl	80161a0 <sbrk_aligned>
 801621c:	1c43      	adds	r3, r0, #1
 801621e:	4604      	mov	r4, r0
 8016220:	d14d      	bne.n	80162be <_malloc_r+0xde>
 8016222:	6834      	ldr	r4, [r6, #0]
 8016224:	4626      	mov	r6, r4
 8016226:	2e00      	cmp	r6, #0
 8016228:	d140      	bne.n	80162ac <_malloc_r+0xcc>
 801622a:	6823      	ldr	r3, [r4, #0]
 801622c:	4631      	mov	r1, r6
 801622e:	4638      	mov	r0, r7
 8016230:	eb04 0803 	add.w	r8, r4, r3
 8016234:	f000 fefa 	bl	801702c <_sbrk_r>
 8016238:	4580      	cmp	r8, r0
 801623a:	d13a      	bne.n	80162b2 <_malloc_r+0xd2>
 801623c:	6821      	ldr	r1, [r4, #0]
 801623e:	3503      	adds	r5, #3
 8016240:	1a6d      	subs	r5, r5, r1
 8016242:	f025 0503 	bic.w	r5, r5, #3
 8016246:	3508      	adds	r5, #8
 8016248:	2d0c      	cmp	r5, #12
 801624a:	bf38      	it	cc
 801624c:	250c      	movcc	r5, #12
 801624e:	4629      	mov	r1, r5
 8016250:	4638      	mov	r0, r7
 8016252:	f7ff ffa5 	bl	80161a0 <sbrk_aligned>
 8016256:	3001      	adds	r0, #1
 8016258:	d02b      	beq.n	80162b2 <_malloc_r+0xd2>
 801625a:	6823      	ldr	r3, [r4, #0]
 801625c:	442b      	add	r3, r5
 801625e:	6023      	str	r3, [r4, #0]
 8016260:	e00e      	b.n	8016280 <_malloc_r+0xa0>
 8016262:	6822      	ldr	r2, [r4, #0]
 8016264:	1b52      	subs	r2, r2, r5
 8016266:	d41e      	bmi.n	80162a6 <_malloc_r+0xc6>
 8016268:	2a0b      	cmp	r2, #11
 801626a:	d916      	bls.n	801629a <_malloc_r+0xba>
 801626c:	1961      	adds	r1, r4, r5
 801626e:	42a3      	cmp	r3, r4
 8016270:	6025      	str	r5, [r4, #0]
 8016272:	bf18      	it	ne
 8016274:	6059      	strne	r1, [r3, #4]
 8016276:	6863      	ldr	r3, [r4, #4]
 8016278:	bf08      	it	eq
 801627a:	6031      	streq	r1, [r6, #0]
 801627c:	5162      	str	r2, [r4, r5]
 801627e:	604b      	str	r3, [r1, #4]
 8016280:	4638      	mov	r0, r7
 8016282:	f104 060b 	add.w	r6, r4, #11
 8016286:	f003 f989 	bl	801959c <__malloc_unlock>
 801628a:	f026 0607 	bic.w	r6, r6, #7
 801628e:	1d23      	adds	r3, r4, #4
 8016290:	1af2      	subs	r2, r6, r3
 8016292:	d0b6      	beq.n	8016202 <_malloc_r+0x22>
 8016294:	1b9b      	subs	r3, r3, r6
 8016296:	50a3      	str	r3, [r4, r2]
 8016298:	e7b3      	b.n	8016202 <_malloc_r+0x22>
 801629a:	6862      	ldr	r2, [r4, #4]
 801629c:	42a3      	cmp	r3, r4
 801629e:	bf0c      	ite	eq
 80162a0:	6032      	streq	r2, [r6, #0]
 80162a2:	605a      	strne	r2, [r3, #4]
 80162a4:	e7ec      	b.n	8016280 <_malloc_r+0xa0>
 80162a6:	4623      	mov	r3, r4
 80162a8:	6864      	ldr	r4, [r4, #4]
 80162aa:	e7b2      	b.n	8016212 <_malloc_r+0x32>
 80162ac:	4634      	mov	r4, r6
 80162ae:	6876      	ldr	r6, [r6, #4]
 80162b0:	e7b9      	b.n	8016226 <_malloc_r+0x46>
 80162b2:	230c      	movs	r3, #12
 80162b4:	603b      	str	r3, [r7, #0]
 80162b6:	4638      	mov	r0, r7
 80162b8:	f003 f970 	bl	801959c <__malloc_unlock>
 80162bc:	e7a1      	b.n	8016202 <_malloc_r+0x22>
 80162be:	6025      	str	r5, [r4, #0]
 80162c0:	e7de      	b.n	8016280 <_malloc_r+0xa0>
 80162c2:	bf00      	nop
 80162c4:	24045fac 	.word	0x24045fac

080162c8 <__cvt>:
 80162c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162ca:	ed2d 8b02 	vpush	{d8}
 80162ce:	eeb0 8b40 	vmov.f64	d8, d0
 80162d2:	b085      	sub	sp, #20
 80162d4:	4617      	mov	r7, r2
 80162d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80162d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80162da:	ee18 2a90 	vmov	r2, s17
 80162de:	f025 0520 	bic.w	r5, r5, #32
 80162e2:	2a00      	cmp	r2, #0
 80162e4:	bfb6      	itet	lt
 80162e6:	222d      	movlt	r2, #45	; 0x2d
 80162e8:	2200      	movge	r2, #0
 80162ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80162ee:	2d46      	cmp	r5, #70	; 0x46
 80162f0:	460c      	mov	r4, r1
 80162f2:	701a      	strb	r2, [r3, #0]
 80162f4:	d004      	beq.n	8016300 <__cvt+0x38>
 80162f6:	2d45      	cmp	r5, #69	; 0x45
 80162f8:	d100      	bne.n	80162fc <__cvt+0x34>
 80162fa:	3401      	adds	r4, #1
 80162fc:	2102      	movs	r1, #2
 80162fe:	e000      	b.n	8016302 <__cvt+0x3a>
 8016300:	2103      	movs	r1, #3
 8016302:	ab03      	add	r3, sp, #12
 8016304:	9301      	str	r3, [sp, #4]
 8016306:	ab02      	add	r3, sp, #8
 8016308:	9300      	str	r3, [sp, #0]
 801630a:	4622      	mov	r2, r4
 801630c:	4633      	mov	r3, r6
 801630e:	eeb0 0b48 	vmov.f64	d0, d8
 8016312:	f001 ff6d 	bl	80181f0 <_dtoa_r>
 8016316:	2d47      	cmp	r5, #71	; 0x47
 8016318:	d101      	bne.n	801631e <__cvt+0x56>
 801631a:	07fb      	lsls	r3, r7, #31
 801631c:	d51a      	bpl.n	8016354 <__cvt+0x8c>
 801631e:	2d46      	cmp	r5, #70	; 0x46
 8016320:	eb00 0204 	add.w	r2, r0, r4
 8016324:	d10c      	bne.n	8016340 <__cvt+0x78>
 8016326:	7803      	ldrb	r3, [r0, #0]
 8016328:	2b30      	cmp	r3, #48	; 0x30
 801632a:	d107      	bne.n	801633c <__cvt+0x74>
 801632c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016334:	bf1c      	itt	ne
 8016336:	f1c4 0401 	rsbne	r4, r4, #1
 801633a:	6034      	strne	r4, [r6, #0]
 801633c:	6833      	ldr	r3, [r6, #0]
 801633e:	441a      	add	r2, r3
 8016340:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016348:	bf08      	it	eq
 801634a:	9203      	streq	r2, [sp, #12]
 801634c:	2130      	movs	r1, #48	; 0x30
 801634e:	9b03      	ldr	r3, [sp, #12]
 8016350:	4293      	cmp	r3, r2
 8016352:	d307      	bcc.n	8016364 <__cvt+0x9c>
 8016354:	9b03      	ldr	r3, [sp, #12]
 8016356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016358:	1a1b      	subs	r3, r3, r0
 801635a:	6013      	str	r3, [r2, #0]
 801635c:	b005      	add	sp, #20
 801635e:	ecbd 8b02 	vpop	{d8}
 8016362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016364:	1c5c      	adds	r4, r3, #1
 8016366:	9403      	str	r4, [sp, #12]
 8016368:	7019      	strb	r1, [r3, #0]
 801636a:	e7f0      	b.n	801634e <__cvt+0x86>

0801636c <__exponent>:
 801636c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801636e:	4603      	mov	r3, r0
 8016370:	2900      	cmp	r1, #0
 8016372:	bfb8      	it	lt
 8016374:	4249      	neglt	r1, r1
 8016376:	f803 2b02 	strb.w	r2, [r3], #2
 801637a:	bfb4      	ite	lt
 801637c:	222d      	movlt	r2, #45	; 0x2d
 801637e:	222b      	movge	r2, #43	; 0x2b
 8016380:	2909      	cmp	r1, #9
 8016382:	7042      	strb	r2, [r0, #1]
 8016384:	dd2a      	ble.n	80163dc <__exponent+0x70>
 8016386:	f10d 0407 	add.w	r4, sp, #7
 801638a:	46a4      	mov	ip, r4
 801638c:	270a      	movs	r7, #10
 801638e:	46a6      	mov	lr, r4
 8016390:	460a      	mov	r2, r1
 8016392:	fb91 f6f7 	sdiv	r6, r1, r7
 8016396:	fb07 1516 	mls	r5, r7, r6, r1
 801639a:	3530      	adds	r5, #48	; 0x30
 801639c:	2a63      	cmp	r2, #99	; 0x63
 801639e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80163a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80163a6:	4631      	mov	r1, r6
 80163a8:	dcf1      	bgt.n	801638e <__exponent+0x22>
 80163aa:	3130      	adds	r1, #48	; 0x30
 80163ac:	f1ae 0502 	sub.w	r5, lr, #2
 80163b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80163b4:	1c44      	adds	r4, r0, #1
 80163b6:	4629      	mov	r1, r5
 80163b8:	4561      	cmp	r1, ip
 80163ba:	d30a      	bcc.n	80163d2 <__exponent+0x66>
 80163bc:	f10d 0209 	add.w	r2, sp, #9
 80163c0:	eba2 020e 	sub.w	r2, r2, lr
 80163c4:	4565      	cmp	r5, ip
 80163c6:	bf88      	it	hi
 80163c8:	2200      	movhi	r2, #0
 80163ca:	4413      	add	r3, r2
 80163cc:	1a18      	subs	r0, r3, r0
 80163ce:	b003      	add	sp, #12
 80163d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80163da:	e7ed      	b.n	80163b8 <__exponent+0x4c>
 80163dc:	2330      	movs	r3, #48	; 0x30
 80163de:	3130      	adds	r1, #48	; 0x30
 80163e0:	7083      	strb	r3, [r0, #2]
 80163e2:	70c1      	strb	r1, [r0, #3]
 80163e4:	1d03      	adds	r3, r0, #4
 80163e6:	e7f1      	b.n	80163cc <__exponent+0x60>

080163e8 <_printf_float>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	b08b      	sub	sp, #44	; 0x2c
 80163ee:	460c      	mov	r4, r1
 80163f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80163f4:	4616      	mov	r6, r2
 80163f6:	461f      	mov	r7, r3
 80163f8:	4605      	mov	r5, r0
 80163fa:	f003 f899 	bl	8019530 <_localeconv_r>
 80163fe:	f8d0 b000 	ldr.w	fp, [r0]
 8016402:	4658      	mov	r0, fp
 8016404:	f7e9 ff76 	bl	80002f4 <strlen>
 8016408:	2300      	movs	r3, #0
 801640a:	9308      	str	r3, [sp, #32]
 801640c:	f8d8 3000 	ldr.w	r3, [r8]
 8016410:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016414:	6822      	ldr	r2, [r4, #0]
 8016416:	3307      	adds	r3, #7
 8016418:	f023 0307 	bic.w	r3, r3, #7
 801641c:	f103 0108 	add.w	r1, r3, #8
 8016420:	f8c8 1000 	str.w	r1, [r8]
 8016424:	4682      	mov	sl, r0
 8016426:	e9d3 0100 	ldrd	r0, r1, [r3]
 801642a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801642e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016690 <_printf_float+0x2a8>
 8016432:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8016436:	eeb0 6bc0 	vabs.f64	d6, d0
 801643a:	eeb4 6b47 	vcmp.f64	d6, d7
 801643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016442:	dd24      	ble.n	801648e <_printf_float+0xa6>
 8016444:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644c:	d502      	bpl.n	8016454 <_printf_float+0x6c>
 801644e:	232d      	movs	r3, #45	; 0x2d
 8016450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016454:	4b90      	ldr	r3, [pc, #576]	; (8016698 <_printf_float+0x2b0>)
 8016456:	4891      	ldr	r0, [pc, #580]	; (801669c <_printf_float+0x2b4>)
 8016458:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801645c:	bf94      	ite	ls
 801645e:	4698      	movls	r8, r3
 8016460:	4680      	movhi	r8, r0
 8016462:	2303      	movs	r3, #3
 8016464:	6123      	str	r3, [r4, #16]
 8016466:	f022 0204 	bic.w	r2, r2, #4
 801646a:	2300      	movs	r3, #0
 801646c:	6022      	str	r2, [r4, #0]
 801646e:	9304      	str	r3, [sp, #16]
 8016470:	9700      	str	r7, [sp, #0]
 8016472:	4633      	mov	r3, r6
 8016474:	aa09      	add	r2, sp, #36	; 0x24
 8016476:	4621      	mov	r1, r4
 8016478:	4628      	mov	r0, r5
 801647a:	f000 f9d3 	bl	8016824 <_printf_common>
 801647e:	3001      	adds	r0, #1
 8016480:	f040 808a 	bne.w	8016598 <_printf_float+0x1b0>
 8016484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016488:	b00b      	add	sp, #44	; 0x2c
 801648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648e:	eeb4 0b40 	vcmp.f64	d0, d0
 8016492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016496:	d709      	bvc.n	80164ac <_printf_float+0xc4>
 8016498:	ee10 3a90 	vmov	r3, s1
 801649c:	2b00      	cmp	r3, #0
 801649e:	bfbc      	itt	lt
 80164a0:	232d      	movlt	r3, #45	; 0x2d
 80164a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80164a6:	487e      	ldr	r0, [pc, #504]	; (80166a0 <_printf_float+0x2b8>)
 80164a8:	4b7e      	ldr	r3, [pc, #504]	; (80166a4 <_printf_float+0x2bc>)
 80164aa:	e7d5      	b.n	8016458 <_printf_float+0x70>
 80164ac:	6863      	ldr	r3, [r4, #4]
 80164ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80164b2:	9104      	str	r1, [sp, #16]
 80164b4:	1c59      	adds	r1, r3, #1
 80164b6:	d13c      	bne.n	8016532 <_printf_float+0x14a>
 80164b8:	2306      	movs	r3, #6
 80164ba:	6063      	str	r3, [r4, #4]
 80164bc:	2300      	movs	r3, #0
 80164be:	9303      	str	r3, [sp, #12]
 80164c0:	ab08      	add	r3, sp, #32
 80164c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80164c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80164ca:	ab07      	add	r3, sp, #28
 80164cc:	6861      	ldr	r1, [r4, #4]
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	6022      	str	r2, [r4, #0]
 80164d2:	f10d 031b 	add.w	r3, sp, #27
 80164d6:	4628      	mov	r0, r5
 80164d8:	f7ff fef6 	bl	80162c8 <__cvt>
 80164dc:	9b04      	ldr	r3, [sp, #16]
 80164de:	9907      	ldr	r1, [sp, #28]
 80164e0:	2b47      	cmp	r3, #71	; 0x47
 80164e2:	4680      	mov	r8, r0
 80164e4:	d108      	bne.n	80164f8 <_printf_float+0x110>
 80164e6:	1cc8      	adds	r0, r1, #3
 80164e8:	db02      	blt.n	80164f0 <_printf_float+0x108>
 80164ea:	6863      	ldr	r3, [r4, #4]
 80164ec:	4299      	cmp	r1, r3
 80164ee:	dd41      	ble.n	8016574 <_printf_float+0x18c>
 80164f0:	f1a9 0902 	sub.w	r9, r9, #2
 80164f4:	fa5f f989 	uxtb.w	r9, r9
 80164f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80164fc:	d820      	bhi.n	8016540 <_printf_float+0x158>
 80164fe:	3901      	subs	r1, #1
 8016500:	464a      	mov	r2, r9
 8016502:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016506:	9107      	str	r1, [sp, #28]
 8016508:	f7ff ff30 	bl	801636c <__exponent>
 801650c:	9a08      	ldr	r2, [sp, #32]
 801650e:	9004      	str	r0, [sp, #16]
 8016510:	1813      	adds	r3, r2, r0
 8016512:	2a01      	cmp	r2, #1
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	dc02      	bgt.n	801651e <_printf_float+0x136>
 8016518:	6822      	ldr	r2, [r4, #0]
 801651a:	07d2      	lsls	r2, r2, #31
 801651c:	d501      	bpl.n	8016522 <_printf_float+0x13a>
 801651e:	3301      	adds	r3, #1
 8016520:	6123      	str	r3, [r4, #16]
 8016522:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d0a2      	beq.n	8016470 <_printf_float+0x88>
 801652a:	232d      	movs	r3, #45	; 0x2d
 801652c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016530:	e79e      	b.n	8016470 <_printf_float+0x88>
 8016532:	9904      	ldr	r1, [sp, #16]
 8016534:	2947      	cmp	r1, #71	; 0x47
 8016536:	d1c1      	bne.n	80164bc <_printf_float+0xd4>
 8016538:	2b00      	cmp	r3, #0
 801653a:	d1bf      	bne.n	80164bc <_printf_float+0xd4>
 801653c:	2301      	movs	r3, #1
 801653e:	e7bc      	b.n	80164ba <_printf_float+0xd2>
 8016540:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016544:	d118      	bne.n	8016578 <_printf_float+0x190>
 8016546:	2900      	cmp	r1, #0
 8016548:	6863      	ldr	r3, [r4, #4]
 801654a:	dd0b      	ble.n	8016564 <_printf_float+0x17c>
 801654c:	6121      	str	r1, [r4, #16]
 801654e:	b913      	cbnz	r3, 8016556 <_printf_float+0x16e>
 8016550:	6822      	ldr	r2, [r4, #0]
 8016552:	07d0      	lsls	r0, r2, #31
 8016554:	d502      	bpl.n	801655c <_printf_float+0x174>
 8016556:	3301      	adds	r3, #1
 8016558:	440b      	add	r3, r1
 801655a:	6123      	str	r3, [r4, #16]
 801655c:	2300      	movs	r3, #0
 801655e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016560:	9304      	str	r3, [sp, #16]
 8016562:	e7de      	b.n	8016522 <_printf_float+0x13a>
 8016564:	b913      	cbnz	r3, 801656c <_printf_float+0x184>
 8016566:	6822      	ldr	r2, [r4, #0]
 8016568:	07d2      	lsls	r2, r2, #31
 801656a:	d501      	bpl.n	8016570 <_printf_float+0x188>
 801656c:	3302      	adds	r3, #2
 801656e:	e7f4      	b.n	801655a <_printf_float+0x172>
 8016570:	2301      	movs	r3, #1
 8016572:	e7f2      	b.n	801655a <_printf_float+0x172>
 8016574:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016578:	9b08      	ldr	r3, [sp, #32]
 801657a:	4299      	cmp	r1, r3
 801657c:	db05      	blt.n	801658a <_printf_float+0x1a2>
 801657e:	6823      	ldr	r3, [r4, #0]
 8016580:	6121      	str	r1, [r4, #16]
 8016582:	07d8      	lsls	r0, r3, #31
 8016584:	d5ea      	bpl.n	801655c <_printf_float+0x174>
 8016586:	1c4b      	adds	r3, r1, #1
 8016588:	e7e7      	b.n	801655a <_printf_float+0x172>
 801658a:	2900      	cmp	r1, #0
 801658c:	bfd4      	ite	le
 801658e:	f1c1 0202 	rsble	r2, r1, #2
 8016592:	2201      	movgt	r2, #1
 8016594:	4413      	add	r3, r2
 8016596:	e7e0      	b.n	801655a <_printf_float+0x172>
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	055a      	lsls	r2, r3, #21
 801659c:	d407      	bmi.n	80165ae <_printf_float+0x1c6>
 801659e:	6923      	ldr	r3, [r4, #16]
 80165a0:	4642      	mov	r2, r8
 80165a2:	4631      	mov	r1, r6
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b8      	blx	r7
 80165a8:	3001      	adds	r0, #1
 80165aa:	d12a      	bne.n	8016602 <_printf_float+0x21a>
 80165ac:	e76a      	b.n	8016484 <_printf_float+0x9c>
 80165ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80165b2:	f240 80e2 	bls.w	801677a <_printf_float+0x392>
 80165b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80165ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c2:	d133      	bne.n	801662c <_printf_float+0x244>
 80165c4:	4a38      	ldr	r2, [pc, #224]	; (80166a8 <_printf_float+0x2c0>)
 80165c6:	2301      	movs	r3, #1
 80165c8:	4631      	mov	r1, r6
 80165ca:	4628      	mov	r0, r5
 80165cc:	47b8      	blx	r7
 80165ce:	3001      	adds	r0, #1
 80165d0:	f43f af58 	beq.w	8016484 <_printf_float+0x9c>
 80165d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80165d8:	429a      	cmp	r2, r3
 80165da:	db02      	blt.n	80165e2 <_printf_float+0x1fa>
 80165dc:	6823      	ldr	r3, [r4, #0]
 80165de:	07d8      	lsls	r0, r3, #31
 80165e0:	d50f      	bpl.n	8016602 <_printf_float+0x21a>
 80165e2:	4653      	mov	r3, sl
 80165e4:	465a      	mov	r2, fp
 80165e6:	4631      	mov	r1, r6
 80165e8:	4628      	mov	r0, r5
 80165ea:	47b8      	blx	r7
 80165ec:	3001      	adds	r0, #1
 80165ee:	f43f af49 	beq.w	8016484 <_printf_float+0x9c>
 80165f2:	f04f 0800 	mov.w	r8, #0
 80165f6:	f104 091a 	add.w	r9, r4, #26
 80165fa:	9b08      	ldr	r3, [sp, #32]
 80165fc:	3b01      	subs	r3, #1
 80165fe:	4543      	cmp	r3, r8
 8016600:	dc09      	bgt.n	8016616 <_printf_float+0x22e>
 8016602:	6823      	ldr	r3, [r4, #0]
 8016604:	079b      	lsls	r3, r3, #30
 8016606:	f100 8108 	bmi.w	801681a <_printf_float+0x432>
 801660a:	68e0      	ldr	r0, [r4, #12]
 801660c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801660e:	4298      	cmp	r0, r3
 8016610:	bfb8      	it	lt
 8016612:	4618      	movlt	r0, r3
 8016614:	e738      	b.n	8016488 <_printf_float+0xa0>
 8016616:	2301      	movs	r3, #1
 8016618:	464a      	mov	r2, r9
 801661a:	4631      	mov	r1, r6
 801661c:	4628      	mov	r0, r5
 801661e:	47b8      	blx	r7
 8016620:	3001      	adds	r0, #1
 8016622:	f43f af2f 	beq.w	8016484 <_printf_float+0x9c>
 8016626:	f108 0801 	add.w	r8, r8, #1
 801662a:	e7e6      	b.n	80165fa <_printf_float+0x212>
 801662c:	9b07      	ldr	r3, [sp, #28]
 801662e:	2b00      	cmp	r3, #0
 8016630:	dc3c      	bgt.n	80166ac <_printf_float+0x2c4>
 8016632:	4a1d      	ldr	r2, [pc, #116]	; (80166a8 <_printf_float+0x2c0>)
 8016634:	2301      	movs	r3, #1
 8016636:	4631      	mov	r1, r6
 8016638:	4628      	mov	r0, r5
 801663a:	47b8      	blx	r7
 801663c:	3001      	adds	r0, #1
 801663e:	f43f af21 	beq.w	8016484 <_printf_float+0x9c>
 8016642:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016646:	4313      	orrs	r3, r2
 8016648:	d102      	bne.n	8016650 <_printf_float+0x268>
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	07d9      	lsls	r1, r3, #31
 801664e:	d5d8      	bpl.n	8016602 <_printf_float+0x21a>
 8016650:	4653      	mov	r3, sl
 8016652:	465a      	mov	r2, fp
 8016654:	4631      	mov	r1, r6
 8016656:	4628      	mov	r0, r5
 8016658:	47b8      	blx	r7
 801665a:	3001      	adds	r0, #1
 801665c:	f43f af12 	beq.w	8016484 <_printf_float+0x9c>
 8016660:	f04f 0900 	mov.w	r9, #0
 8016664:	f104 0a1a 	add.w	sl, r4, #26
 8016668:	9b07      	ldr	r3, [sp, #28]
 801666a:	425b      	negs	r3, r3
 801666c:	454b      	cmp	r3, r9
 801666e:	dc01      	bgt.n	8016674 <_printf_float+0x28c>
 8016670:	9b08      	ldr	r3, [sp, #32]
 8016672:	e795      	b.n	80165a0 <_printf_float+0x1b8>
 8016674:	2301      	movs	r3, #1
 8016676:	4652      	mov	r2, sl
 8016678:	4631      	mov	r1, r6
 801667a:	4628      	mov	r0, r5
 801667c:	47b8      	blx	r7
 801667e:	3001      	adds	r0, #1
 8016680:	f43f af00 	beq.w	8016484 <_printf_float+0x9c>
 8016684:	f109 0901 	add.w	r9, r9, #1
 8016688:	e7ee      	b.n	8016668 <_printf_float+0x280>
 801668a:	bf00      	nop
 801668c:	f3af 8000 	nop.w
 8016690:	ffffffff 	.word	0xffffffff
 8016694:	7fefffff 	.word	0x7fefffff
 8016698:	0801e110 	.word	0x0801e110
 801669c:	0801e114 	.word	0x0801e114
 80166a0:	0801e11c 	.word	0x0801e11c
 80166a4:	0801e118 	.word	0x0801e118
 80166a8:	0801e120 	.word	0x0801e120
 80166ac:	9a08      	ldr	r2, [sp, #32]
 80166ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80166b0:	429a      	cmp	r2, r3
 80166b2:	bfa8      	it	ge
 80166b4:	461a      	movge	r2, r3
 80166b6:	2a00      	cmp	r2, #0
 80166b8:	4691      	mov	r9, r2
 80166ba:	dc38      	bgt.n	801672e <_printf_float+0x346>
 80166bc:	2300      	movs	r3, #0
 80166be:	9305      	str	r3, [sp, #20]
 80166c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80166c4:	f104 021a 	add.w	r2, r4, #26
 80166c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80166ca:	9905      	ldr	r1, [sp, #20]
 80166cc:	9304      	str	r3, [sp, #16]
 80166ce:	eba3 0309 	sub.w	r3, r3, r9
 80166d2:	428b      	cmp	r3, r1
 80166d4:	dc33      	bgt.n	801673e <_printf_float+0x356>
 80166d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80166da:	429a      	cmp	r2, r3
 80166dc:	db3c      	blt.n	8016758 <_printf_float+0x370>
 80166de:	6823      	ldr	r3, [r4, #0]
 80166e0:	07da      	lsls	r2, r3, #31
 80166e2:	d439      	bmi.n	8016758 <_printf_float+0x370>
 80166e4:	9b08      	ldr	r3, [sp, #32]
 80166e6:	9a04      	ldr	r2, [sp, #16]
 80166e8:	9907      	ldr	r1, [sp, #28]
 80166ea:	1a9a      	subs	r2, r3, r2
 80166ec:	eba3 0901 	sub.w	r9, r3, r1
 80166f0:	4591      	cmp	r9, r2
 80166f2:	bfa8      	it	ge
 80166f4:	4691      	movge	r9, r2
 80166f6:	f1b9 0f00 	cmp.w	r9, #0
 80166fa:	dc35      	bgt.n	8016768 <_printf_float+0x380>
 80166fc:	f04f 0800 	mov.w	r8, #0
 8016700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016704:	f104 0a1a 	add.w	sl, r4, #26
 8016708:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801670c:	1a9b      	subs	r3, r3, r2
 801670e:	eba3 0309 	sub.w	r3, r3, r9
 8016712:	4543      	cmp	r3, r8
 8016714:	f77f af75 	ble.w	8016602 <_printf_float+0x21a>
 8016718:	2301      	movs	r3, #1
 801671a:	4652      	mov	r2, sl
 801671c:	4631      	mov	r1, r6
 801671e:	4628      	mov	r0, r5
 8016720:	47b8      	blx	r7
 8016722:	3001      	adds	r0, #1
 8016724:	f43f aeae 	beq.w	8016484 <_printf_float+0x9c>
 8016728:	f108 0801 	add.w	r8, r8, #1
 801672c:	e7ec      	b.n	8016708 <_printf_float+0x320>
 801672e:	4613      	mov	r3, r2
 8016730:	4631      	mov	r1, r6
 8016732:	4642      	mov	r2, r8
 8016734:	4628      	mov	r0, r5
 8016736:	47b8      	blx	r7
 8016738:	3001      	adds	r0, #1
 801673a:	d1bf      	bne.n	80166bc <_printf_float+0x2d4>
 801673c:	e6a2      	b.n	8016484 <_printf_float+0x9c>
 801673e:	2301      	movs	r3, #1
 8016740:	4631      	mov	r1, r6
 8016742:	4628      	mov	r0, r5
 8016744:	9204      	str	r2, [sp, #16]
 8016746:	47b8      	blx	r7
 8016748:	3001      	adds	r0, #1
 801674a:	f43f ae9b 	beq.w	8016484 <_printf_float+0x9c>
 801674e:	9b05      	ldr	r3, [sp, #20]
 8016750:	9a04      	ldr	r2, [sp, #16]
 8016752:	3301      	adds	r3, #1
 8016754:	9305      	str	r3, [sp, #20]
 8016756:	e7b7      	b.n	80166c8 <_printf_float+0x2e0>
 8016758:	4653      	mov	r3, sl
 801675a:	465a      	mov	r2, fp
 801675c:	4631      	mov	r1, r6
 801675e:	4628      	mov	r0, r5
 8016760:	47b8      	blx	r7
 8016762:	3001      	adds	r0, #1
 8016764:	d1be      	bne.n	80166e4 <_printf_float+0x2fc>
 8016766:	e68d      	b.n	8016484 <_printf_float+0x9c>
 8016768:	9a04      	ldr	r2, [sp, #16]
 801676a:	464b      	mov	r3, r9
 801676c:	4442      	add	r2, r8
 801676e:	4631      	mov	r1, r6
 8016770:	4628      	mov	r0, r5
 8016772:	47b8      	blx	r7
 8016774:	3001      	adds	r0, #1
 8016776:	d1c1      	bne.n	80166fc <_printf_float+0x314>
 8016778:	e684      	b.n	8016484 <_printf_float+0x9c>
 801677a:	9a08      	ldr	r2, [sp, #32]
 801677c:	2a01      	cmp	r2, #1
 801677e:	dc01      	bgt.n	8016784 <_printf_float+0x39c>
 8016780:	07db      	lsls	r3, r3, #31
 8016782:	d537      	bpl.n	80167f4 <_printf_float+0x40c>
 8016784:	2301      	movs	r3, #1
 8016786:	4642      	mov	r2, r8
 8016788:	4631      	mov	r1, r6
 801678a:	4628      	mov	r0, r5
 801678c:	47b8      	blx	r7
 801678e:	3001      	adds	r0, #1
 8016790:	f43f ae78 	beq.w	8016484 <_printf_float+0x9c>
 8016794:	4653      	mov	r3, sl
 8016796:	465a      	mov	r2, fp
 8016798:	4631      	mov	r1, r6
 801679a:	4628      	mov	r0, r5
 801679c:	47b8      	blx	r7
 801679e:	3001      	adds	r0, #1
 80167a0:	f43f ae70 	beq.w	8016484 <_printf_float+0x9c>
 80167a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80167a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80167ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b0:	d01b      	beq.n	80167ea <_printf_float+0x402>
 80167b2:	9b08      	ldr	r3, [sp, #32]
 80167b4:	f108 0201 	add.w	r2, r8, #1
 80167b8:	3b01      	subs	r3, #1
 80167ba:	4631      	mov	r1, r6
 80167bc:	4628      	mov	r0, r5
 80167be:	47b8      	blx	r7
 80167c0:	3001      	adds	r0, #1
 80167c2:	d10e      	bne.n	80167e2 <_printf_float+0x3fa>
 80167c4:	e65e      	b.n	8016484 <_printf_float+0x9c>
 80167c6:	2301      	movs	r3, #1
 80167c8:	464a      	mov	r2, r9
 80167ca:	4631      	mov	r1, r6
 80167cc:	4628      	mov	r0, r5
 80167ce:	47b8      	blx	r7
 80167d0:	3001      	adds	r0, #1
 80167d2:	f43f ae57 	beq.w	8016484 <_printf_float+0x9c>
 80167d6:	f108 0801 	add.w	r8, r8, #1
 80167da:	9b08      	ldr	r3, [sp, #32]
 80167dc:	3b01      	subs	r3, #1
 80167de:	4543      	cmp	r3, r8
 80167e0:	dcf1      	bgt.n	80167c6 <_printf_float+0x3de>
 80167e2:	9b04      	ldr	r3, [sp, #16]
 80167e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80167e8:	e6db      	b.n	80165a2 <_printf_float+0x1ba>
 80167ea:	f04f 0800 	mov.w	r8, #0
 80167ee:	f104 091a 	add.w	r9, r4, #26
 80167f2:	e7f2      	b.n	80167da <_printf_float+0x3f2>
 80167f4:	2301      	movs	r3, #1
 80167f6:	4642      	mov	r2, r8
 80167f8:	e7df      	b.n	80167ba <_printf_float+0x3d2>
 80167fa:	2301      	movs	r3, #1
 80167fc:	464a      	mov	r2, r9
 80167fe:	4631      	mov	r1, r6
 8016800:	4628      	mov	r0, r5
 8016802:	47b8      	blx	r7
 8016804:	3001      	adds	r0, #1
 8016806:	f43f ae3d 	beq.w	8016484 <_printf_float+0x9c>
 801680a:	f108 0801 	add.w	r8, r8, #1
 801680e:	68e3      	ldr	r3, [r4, #12]
 8016810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016812:	1a5b      	subs	r3, r3, r1
 8016814:	4543      	cmp	r3, r8
 8016816:	dcf0      	bgt.n	80167fa <_printf_float+0x412>
 8016818:	e6f7      	b.n	801660a <_printf_float+0x222>
 801681a:	f04f 0800 	mov.w	r8, #0
 801681e:	f104 0919 	add.w	r9, r4, #25
 8016822:	e7f4      	b.n	801680e <_printf_float+0x426>

08016824 <_printf_common>:
 8016824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016828:	4616      	mov	r6, r2
 801682a:	4699      	mov	r9, r3
 801682c:	688a      	ldr	r2, [r1, #8]
 801682e:	690b      	ldr	r3, [r1, #16]
 8016830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016834:	4293      	cmp	r3, r2
 8016836:	bfb8      	it	lt
 8016838:	4613      	movlt	r3, r2
 801683a:	6033      	str	r3, [r6, #0]
 801683c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016840:	4607      	mov	r7, r0
 8016842:	460c      	mov	r4, r1
 8016844:	b10a      	cbz	r2, 801684a <_printf_common+0x26>
 8016846:	3301      	adds	r3, #1
 8016848:	6033      	str	r3, [r6, #0]
 801684a:	6823      	ldr	r3, [r4, #0]
 801684c:	0699      	lsls	r1, r3, #26
 801684e:	bf42      	ittt	mi
 8016850:	6833      	ldrmi	r3, [r6, #0]
 8016852:	3302      	addmi	r3, #2
 8016854:	6033      	strmi	r3, [r6, #0]
 8016856:	6825      	ldr	r5, [r4, #0]
 8016858:	f015 0506 	ands.w	r5, r5, #6
 801685c:	d106      	bne.n	801686c <_printf_common+0x48>
 801685e:	f104 0a19 	add.w	sl, r4, #25
 8016862:	68e3      	ldr	r3, [r4, #12]
 8016864:	6832      	ldr	r2, [r6, #0]
 8016866:	1a9b      	subs	r3, r3, r2
 8016868:	42ab      	cmp	r3, r5
 801686a:	dc26      	bgt.n	80168ba <_printf_common+0x96>
 801686c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016870:	1e13      	subs	r3, r2, #0
 8016872:	6822      	ldr	r2, [r4, #0]
 8016874:	bf18      	it	ne
 8016876:	2301      	movne	r3, #1
 8016878:	0692      	lsls	r2, r2, #26
 801687a:	d42b      	bmi.n	80168d4 <_printf_common+0xb0>
 801687c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016880:	4649      	mov	r1, r9
 8016882:	4638      	mov	r0, r7
 8016884:	47c0      	blx	r8
 8016886:	3001      	adds	r0, #1
 8016888:	d01e      	beq.n	80168c8 <_printf_common+0xa4>
 801688a:	6823      	ldr	r3, [r4, #0]
 801688c:	68e5      	ldr	r5, [r4, #12]
 801688e:	6832      	ldr	r2, [r6, #0]
 8016890:	f003 0306 	and.w	r3, r3, #6
 8016894:	2b04      	cmp	r3, #4
 8016896:	bf08      	it	eq
 8016898:	1aad      	subeq	r5, r5, r2
 801689a:	68a3      	ldr	r3, [r4, #8]
 801689c:	6922      	ldr	r2, [r4, #16]
 801689e:	bf0c      	ite	eq
 80168a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168a4:	2500      	movne	r5, #0
 80168a6:	4293      	cmp	r3, r2
 80168a8:	bfc4      	itt	gt
 80168aa:	1a9b      	subgt	r3, r3, r2
 80168ac:	18ed      	addgt	r5, r5, r3
 80168ae:	2600      	movs	r6, #0
 80168b0:	341a      	adds	r4, #26
 80168b2:	42b5      	cmp	r5, r6
 80168b4:	d11a      	bne.n	80168ec <_printf_common+0xc8>
 80168b6:	2000      	movs	r0, #0
 80168b8:	e008      	b.n	80168cc <_printf_common+0xa8>
 80168ba:	2301      	movs	r3, #1
 80168bc:	4652      	mov	r2, sl
 80168be:	4649      	mov	r1, r9
 80168c0:	4638      	mov	r0, r7
 80168c2:	47c0      	blx	r8
 80168c4:	3001      	adds	r0, #1
 80168c6:	d103      	bne.n	80168d0 <_printf_common+0xac>
 80168c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80168cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168d0:	3501      	adds	r5, #1
 80168d2:	e7c6      	b.n	8016862 <_printf_common+0x3e>
 80168d4:	18e1      	adds	r1, r4, r3
 80168d6:	1c5a      	adds	r2, r3, #1
 80168d8:	2030      	movs	r0, #48	; 0x30
 80168da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80168de:	4422      	add	r2, r4
 80168e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80168e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80168e8:	3302      	adds	r3, #2
 80168ea:	e7c7      	b.n	801687c <_printf_common+0x58>
 80168ec:	2301      	movs	r3, #1
 80168ee:	4622      	mov	r2, r4
 80168f0:	4649      	mov	r1, r9
 80168f2:	4638      	mov	r0, r7
 80168f4:	47c0      	blx	r8
 80168f6:	3001      	adds	r0, #1
 80168f8:	d0e6      	beq.n	80168c8 <_printf_common+0xa4>
 80168fa:	3601      	adds	r6, #1
 80168fc:	e7d9      	b.n	80168b2 <_printf_common+0x8e>
	...

08016900 <_printf_i>:
 8016900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016904:	7e0f      	ldrb	r7, [r1, #24]
 8016906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016908:	2f78      	cmp	r7, #120	; 0x78
 801690a:	4691      	mov	r9, r2
 801690c:	4680      	mov	r8, r0
 801690e:	460c      	mov	r4, r1
 8016910:	469a      	mov	sl, r3
 8016912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016916:	d807      	bhi.n	8016928 <_printf_i+0x28>
 8016918:	2f62      	cmp	r7, #98	; 0x62
 801691a:	d80a      	bhi.n	8016932 <_printf_i+0x32>
 801691c:	2f00      	cmp	r7, #0
 801691e:	f000 80d8 	beq.w	8016ad2 <_printf_i+0x1d2>
 8016922:	2f58      	cmp	r7, #88	; 0x58
 8016924:	f000 80a3 	beq.w	8016a6e <_printf_i+0x16e>
 8016928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801692c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016930:	e03a      	b.n	80169a8 <_printf_i+0xa8>
 8016932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016936:	2b15      	cmp	r3, #21
 8016938:	d8f6      	bhi.n	8016928 <_printf_i+0x28>
 801693a:	a101      	add	r1, pc, #4	; (adr r1, 8016940 <_printf_i+0x40>)
 801693c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016940:	08016999 	.word	0x08016999
 8016944:	080169ad 	.word	0x080169ad
 8016948:	08016929 	.word	0x08016929
 801694c:	08016929 	.word	0x08016929
 8016950:	08016929 	.word	0x08016929
 8016954:	08016929 	.word	0x08016929
 8016958:	080169ad 	.word	0x080169ad
 801695c:	08016929 	.word	0x08016929
 8016960:	08016929 	.word	0x08016929
 8016964:	08016929 	.word	0x08016929
 8016968:	08016929 	.word	0x08016929
 801696c:	08016ab9 	.word	0x08016ab9
 8016970:	080169dd 	.word	0x080169dd
 8016974:	08016a9b 	.word	0x08016a9b
 8016978:	08016929 	.word	0x08016929
 801697c:	08016929 	.word	0x08016929
 8016980:	08016adb 	.word	0x08016adb
 8016984:	08016929 	.word	0x08016929
 8016988:	080169dd 	.word	0x080169dd
 801698c:	08016929 	.word	0x08016929
 8016990:	08016929 	.word	0x08016929
 8016994:	08016aa3 	.word	0x08016aa3
 8016998:	682b      	ldr	r3, [r5, #0]
 801699a:	1d1a      	adds	r2, r3, #4
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	602a      	str	r2, [r5, #0]
 80169a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80169a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80169a8:	2301      	movs	r3, #1
 80169aa:	e0a3      	b.n	8016af4 <_printf_i+0x1f4>
 80169ac:	6820      	ldr	r0, [r4, #0]
 80169ae:	6829      	ldr	r1, [r5, #0]
 80169b0:	0606      	lsls	r6, r0, #24
 80169b2:	f101 0304 	add.w	r3, r1, #4
 80169b6:	d50a      	bpl.n	80169ce <_printf_i+0xce>
 80169b8:	680e      	ldr	r6, [r1, #0]
 80169ba:	602b      	str	r3, [r5, #0]
 80169bc:	2e00      	cmp	r6, #0
 80169be:	da03      	bge.n	80169c8 <_printf_i+0xc8>
 80169c0:	232d      	movs	r3, #45	; 0x2d
 80169c2:	4276      	negs	r6, r6
 80169c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169c8:	485e      	ldr	r0, [pc, #376]	; (8016b44 <_printf_i+0x244>)
 80169ca:	230a      	movs	r3, #10
 80169cc:	e019      	b.n	8016a02 <_printf_i+0x102>
 80169ce:	680e      	ldr	r6, [r1, #0]
 80169d0:	602b      	str	r3, [r5, #0]
 80169d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80169d6:	bf18      	it	ne
 80169d8:	b236      	sxthne	r6, r6
 80169da:	e7ef      	b.n	80169bc <_printf_i+0xbc>
 80169dc:	682b      	ldr	r3, [r5, #0]
 80169de:	6820      	ldr	r0, [r4, #0]
 80169e0:	1d19      	adds	r1, r3, #4
 80169e2:	6029      	str	r1, [r5, #0]
 80169e4:	0601      	lsls	r1, r0, #24
 80169e6:	d501      	bpl.n	80169ec <_printf_i+0xec>
 80169e8:	681e      	ldr	r6, [r3, #0]
 80169ea:	e002      	b.n	80169f2 <_printf_i+0xf2>
 80169ec:	0646      	lsls	r6, r0, #25
 80169ee:	d5fb      	bpl.n	80169e8 <_printf_i+0xe8>
 80169f0:	881e      	ldrh	r6, [r3, #0]
 80169f2:	4854      	ldr	r0, [pc, #336]	; (8016b44 <_printf_i+0x244>)
 80169f4:	2f6f      	cmp	r7, #111	; 0x6f
 80169f6:	bf0c      	ite	eq
 80169f8:	2308      	moveq	r3, #8
 80169fa:	230a      	movne	r3, #10
 80169fc:	2100      	movs	r1, #0
 80169fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016a02:	6865      	ldr	r5, [r4, #4]
 8016a04:	60a5      	str	r5, [r4, #8]
 8016a06:	2d00      	cmp	r5, #0
 8016a08:	bfa2      	ittt	ge
 8016a0a:	6821      	ldrge	r1, [r4, #0]
 8016a0c:	f021 0104 	bicge.w	r1, r1, #4
 8016a10:	6021      	strge	r1, [r4, #0]
 8016a12:	b90e      	cbnz	r6, 8016a18 <_printf_i+0x118>
 8016a14:	2d00      	cmp	r5, #0
 8016a16:	d04d      	beq.n	8016ab4 <_printf_i+0x1b4>
 8016a18:	4615      	mov	r5, r2
 8016a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8016a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8016a22:	5dc7      	ldrb	r7, [r0, r7]
 8016a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016a28:	4637      	mov	r7, r6
 8016a2a:	42bb      	cmp	r3, r7
 8016a2c:	460e      	mov	r6, r1
 8016a2e:	d9f4      	bls.n	8016a1a <_printf_i+0x11a>
 8016a30:	2b08      	cmp	r3, #8
 8016a32:	d10b      	bne.n	8016a4c <_printf_i+0x14c>
 8016a34:	6823      	ldr	r3, [r4, #0]
 8016a36:	07de      	lsls	r6, r3, #31
 8016a38:	d508      	bpl.n	8016a4c <_printf_i+0x14c>
 8016a3a:	6923      	ldr	r3, [r4, #16]
 8016a3c:	6861      	ldr	r1, [r4, #4]
 8016a3e:	4299      	cmp	r1, r3
 8016a40:	bfde      	ittt	le
 8016a42:	2330      	movle	r3, #48	; 0x30
 8016a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016a48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016a4c:	1b52      	subs	r2, r2, r5
 8016a4e:	6122      	str	r2, [r4, #16]
 8016a50:	f8cd a000 	str.w	sl, [sp]
 8016a54:	464b      	mov	r3, r9
 8016a56:	aa03      	add	r2, sp, #12
 8016a58:	4621      	mov	r1, r4
 8016a5a:	4640      	mov	r0, r8
 8016a5c:	f7ff fee2 	bl	8016824 <_printf_common>
 8016a60:	3001      	adds	r0, #1
 8016a62:	d14c      	bne.n	8016afe <_printf_i+0x1fe>
 8016a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a68:	b004      	add	sp, #16
 8016a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a6e:	4835      	ldr	r0, [pc, #212]	; (8016b44 <_printf_i+0x244>)
 8016a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016a74:	6829      	ldr	r1, [r5, #0]
 8016a76:	6823      	ldr	r3, [r4, #0]
 8016a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8016a7c:	6029      	str	r1, [r5, #0]
 8016a7e:	061d      	lsls	r5, r3, #24
 8016a80:	d514      	bpl.n	8016aac <_printf_i+0x1ac>
 8016a82:	07df      	lsls	r7, r3, #31
 8016a84:	bf44      	itt	mi
 8016a86:	f043 0320 	orrmi.w	r3, r3, #32
 8016a8a:	6023      	strmi	r3, [r4, #0]
 8016a8c:	b91e      	cbnz	r6, 8016a96 <_printf_i+0x196>
 8016a8e:	6823      	ldr	r3, [r4, #0]
 8016a90:	f023 0320 	bic.w	r3, r3, #32
 8016a94:	6023      	str	r3, [r4, #0]
 8016a96:	2310      	movs	r3, #16
 8016a98:	e7b0      	b.n	80169fc <_printf_i+0xfc>
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	f043 0320 	orr.w	r3, r3, #32
 8016aa0:	6023      	str	r3, [r4, #0]
 8016aa2:	2378      	movs	r3, #120	; 0x78
 8016aa4:	4828      	ldr	r0, [pc, #160]	; (8016b48 <_printf_i+0x248>)
 8016aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016aaa:	e7e3      	b.n	8016a74 <_printf_i+0x174>
 8016aac:	0659      	lsls	r1, r3, #25
 8016aae:	bf48      	it	mi
 8016ab0:	b2b6      	uxthmi	r6, r6
 8016ab2:	e7e6      	b.n	8016a82 <_printf_i+0x182>
 8016ab4:	4615      	mov	r5, r2
 8016ab6:	e7bb      	b.n	8016a30 <_printf_i+0x130>
 8016ab8:	682b      	ldr	r3, [r5, #0]
 8016aba:	6826      	ldr	r6, [r4, #0]
 8016abc:	6961      	ldr	r1, [r4, #20]
 8016abe:	1d18      	adds	r0, r3, #4
 8016ac0:	6028      	str	r0, [r5, #0]
 8016ac2:	0635      	lsls	r5, r6, #24
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	d501      	bpl.n	8016acc <_printf_i+0x1cc>
 8016ac8:	6019      	str	r1, [r3, #0]
 8016aca:	e002      	b.n	8016ad2 <_printf_i+0x1d2>
 8016acc:	0670      	lsls	r0, r6, #25
 8016ace:	d5fb      	bpl.n	8016ac8 <_printf_i+0x1c8>
 8016ad0:	8019      	strh	r1, [r3, #0]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	6123      	str	r3, [r4, #16]
 8016ad6:	4615      	mov	r5, r2
 8016ad8:	e7ba      	b.n	8016a50 <_printf_i+0x150>
 8016ada:	682b      	ldr	r3, [r5, #0]
 8016adc:	1d1a      	adds	r2, r3, #4
 8016ade:	602a      	str	r2, [r5, #0]
 8016ae0:	681d      	ldr	r5, [r3, #0]
 8016ae2:	6862      	ldr	r2, [r4, #4]
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	f7e9 fc12 	bl	8000310 <memchr>
 8016aec:	b108      	cbz	r0, 8016af2 <_printf_i+0x1f2>
 8016aee:	1b40      	subs	r0, r0, r5
 8016af0:	6060      	str	r0, [r4, #4]
 8016af2:	6863      	ldr	r3, [r4, #4]
 8016af4:	6123      	str	r3, [r4, #16]
 8016af6:	2300      	movs	r3, #0
 8016af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016afc:	e7a8      	b.n	8016a50 <_printf_i+0x150>
 8016afe:	6923      	ldr	r3, [r4, #16]
 8016b00:	462a      	mov	r2, r5
 8016b02:	4649      	mov	r1, r9
 8016b04:	4640      	mov	r0, r8
 8016b06:	47d0      	blx	sl
 8016b08:	3001      	adds	r0, #1
 8016b0a:	d0ab      	beq.n	8016a64 <_printf_i+0x164>
 8016b0c:	6823      	ldr	r3, [r4, #0]
 8016b0e:	079b      	lsls	r3, r3, #30
 8016b10:	d413      	bmi.n	8016b3a <_printf_i+0x23a>
 8016b12:	68e0      	ldr	r0, [r4, #12]
 8016b14:	9b03      	ldr	r3, [sp, #12]
 8016b16:	4298      	cmp	r0, r3
 8016b18:	bfb8      	it	lt
 8016b1a:	4618      	movlt	r0, r3
 8016b1c:	e7a4      	b.n	8016a68 <_printf_i+0x168>
 8016b1e:	2301      	movs	r3, #1
 8016b20:	4632      	mov	r2, r6
 8016b22:	4649      	mov	r1, r9
 8016b24:	4640      	mov	r0, r8
 8016b26:	47d0      	blx	sl
 8016b28:	3001      	adds	r0, #1
 8016b2a:	d09b      	beq.n	8016a64 <_printf_i+0x164>
 8016b2c:	3501      	adds	r5, #1
 8016b2e:	68e3      	ldr	r3, [r4, #12]
 8016b30:	9903      	ldr	r1, [sp, #12]
 8016b32:	1a5b      	subs	r3, r3, r1
 8016b34:	42ab      	cmp	r3, r5
 8016b36:	dcf2      	bgt.n	8016b1e <_printf_i+0x21e>
 8016b38:	e7eb      	b.n	8016b12 <_printf_i+0x212>
 8016b3a:	2500      	movs	r5, #0
 8016b3c:	f104 0619 	add.w	r6, r4, #25
 8016b40:	e7f5      	b.n	8016b2e <_printf_i+0x22e>
 8016b42:	bf00      	nop
 8016b44:	0801e122 	.word	0x0801e122
 8016b48:	0801e133 	.word	0x0801e133

08016b4c <_scanf_float>:
 8016b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b50:	b087      	sub	sp, #28
 8016b52:	4617      	mov	r7, r2
 8016b54:	9303      	str	r3, [sp, #12]
 8016b56:	688b      	ldr	r3, [r1, #8]
 8016b58:	1e5a      	subs	r2, r3, #1
 8016b5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016b5e:	bf83      	ittte	hi
 8016b60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016b64:	195b      	addhi	r3, r3, r5
 8016b66:	9302      	strhi	r3, [sp, #8]
 8016b68:	2300      	movls	r3, #0
 8016b6a:	bf86      	itte	hi
 8016b6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016b70:	608b      	strhi	r3, [r1, #8]
 8016b72:	9302      	strls	r3, [sp, #8]
 8016b74:	680b      	ldr	r3, [r1, #0]
 8016b76:	468b      	mov	fp, r1
 8016b78:	2500      	movs	r5, #0
 8016b7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016b7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8016b82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016b86:	4680      	mov	r8, r0
 8016b88:	460c      	mov	r4, r1
 8016b8a:	465e      	mov	r6, fp
 8016b8c:	46aa      	mov	sl, r5
 8016b8e:	46a9      	mov	r9, r5
 8016b90:	9501      	str	r5, [sp, #4]
 8016b92:	68a2      	ldr	r2, [r4, #8]
 8016b94:	b152      	cbz	r2, 8016bac <_scanf_float+0x60>
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	2b4e      	cmp	r3, #78	; 0x4e
 8016b9c:	d864      	bhi.n	8016c68 <_scanf_float+0x11c>
 8016b9e:	2b40      	cmp	r3, #64	; 0x40
 8016ba0:	d83c      	bhi.n	8016c1c <_scanf_float+0xd0>
 8016ba2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016ba6:	b2c8      	uxtb	r0, r1
 8016ba8:	280e      	cmp	r0, #14
 8016baa:	d93a      	bls.n	8016c22 <_scanf_float+0xd6>
 8016bac:	f1b9 0f00 	cmp.w	r9, #0
 8016bb0:	d003      	beq.n	8016bba <_scanf_float+0x6e>
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016bb8:	6023      	str	r3, [r4, #0]
 8016bba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016bbe:	f1ba 0f01 	cmp.w	sl, #1
 8016bc2:	f200 8113 	bhi.w	8016dec <_scanf_float+0x2a0>
 8016bc6:	455e      	cmp	r6, fp
 8016bc8:	f200 8105 	bhi.w	8016dd6 <_scanf_float+0x28a>
 8016bcc:	2501      	movs	r5, #1
 8016bce:	4628      	mov	r0, r5
 8016bd0:	b007      	add	sp, #28
 8016bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016bda:	2a0d      	cmp	r2, #13
 8016bdc:	d8e6      	bhi.n	8016bac <_scanf_float+0x60>
 8016bde:	a101      	add	r1, pc, #4	; (adr r1, 8016be4 <_scanf_float+0x98>)
 8016be0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016be4:	08016d23 	.word	0x08016d23
 8016be8:	08016bad 	.word	0x08016bad
 8016bec:	08016bad 	.word	0x08016bad
 8016bf0:	08016bad 	.word	0x08016bad
 8016bf4:	08016d83 	.word	0x08016d83
 8016bf8:	08016d5b 	.word	0x08016d5b
 8016bfc:	08016bad 	.word	0x08016bad
 8016c00:	08016bad 	.word	0x08016bad
 8016c04:	08016d31 	.word	0x08016d31
 8016c08:	08016bad 	.word	0x08016bad
 8016c0c:	08016bad 	.word	0x08016bad
 8016c10:	08016bad 	.word	0x08016bad
 8016c14:	08016bad 	.word	0x08016bad
 8016c18:	08016ce9 	.word	0x08016ce9
 8016c1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016c20:	e7db      	b.n	8016bda <_scanf_float+0x8e>
 8016c22:	290e      	cmp	r1, #14
 8016c24:	d8c2      	bhi.n	8016bac <_scanf_float+0x60>
 8016c26:	a001      	add	r0, pc, #4	; (adr r0, 8016c2c <_scanf_float+0xe0>)
 8016c28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016c2c:	08016cdb 	.word	0x08016cdb
 8016c30:	08016bad 	.word	0x08016bad
 8016c34:	08016cdb 	.word	0x08016cdb
 8016c38:	08016d6f 	.word	0x08016d6f
 8016c3c:	08016bad 	.word	0x08016bad
 8016c40:	08016c89 	.word	0x08016c89
 8016c44:	08016cc5 	.word	0x08016cc5
 8016c48:	08016cc5 	.word	0x08016cc5
 8016c4c:	08016cc5 	.word	0x08016cc5
 8016c50:	08016cc5 	.word	0x08016cc5
 8016c54:	08016cc5 	.word	0x08016cc5
 8016c58:	08016cc5 	.word	0x08016cc5
 8016c5c:	08016cc5 	.word	0x08016cc5
 8016c60:	08016cc5 	.word	0x08016cc5
 8016c64:	08016cc5 	.word	0x08016cc5
 8016c68:	2b6e      	cmp	r3, #110	; 0x6e
 8016c6a:	d809      	bhi.n	8016c80 <_scanf_float+0x134>
 8016c6c:	2b60      	cmp	r3, #96	; 0x60
 8016c6e:	d8b2      	bhi.n	8016bd6 <_scanf_float+0x8a>
 8016c70:	2b54      	cmp	r3, #84	; 0x54
 8016c72:	d077      	beq.n	8016d64 <_scanf_float+0x218>
 8016c74:	2b59      	cmp	r3, #89	; 0x59
 8016c76:	d199      	bne.n	8016bac <_scanf_float+0x60>
 8016c78:	2d07      	cmp	r5, #7
 8016c7a:	d197      	bne.n	8016bac <_scanf_float+0x60>
 8016c7c:	2508      	movs	r5, #8
 8016c7e:	e029      	b.n	8016cd4 <_scanf_float+0x188>
 8016c80:	2b74      	cmp	r3, #116	; 0x74
 8016c82:	d06f      	beq.n	8016d64 <_scanf_float+0x218>
 8016c84:	2b79      	cmp	r3, #121	; 0x79
 8016c86:	e7f6      	b.n	8016c76 <_scanf_float+0x12a>
 8016c88:	6821      	ldr	r1, [r4, #0]
 8016c8a:	05c8      	lsls	r0, r1, #23
 8016c8c:	d51a      	bpl.n	8016cc4 <_scanf_float+0x178>
 8016c8e:	9b02      	ldr	r3, [sp, #8]
 8016c90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016c94:	6021      	str	r1, [r4, #0]
 8016c96:	f109 0901 	add.w	r9, r9, #1
 8016c9a:	b11b      	cbz	r3, 8016ca4 <_scanf_float+0x158>
 8016c9c:	3b01      	subs	r3, #1
 8016c9e:	3201      	adds	r2, #1
 8016ca0:	9302      	str	r3, [sp, #8]
 8016ca2:	60a2      	str	r2, [r4, #8]
 8016ca4:	68a3      	ldr	r3, [r4, #8]
 8016ca6:	3b01      	subs	r3, #1
 8016ca8:	60a3      	str	r3, [r4, #8]
 8016caa:	6923      	ldr	r3, [r4, #16]
 8016cac:	3301      	adds	r3, #1
 8016cae:	6123      	str	r3, [r4, #16]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	3b01      	subs	r3, #1
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	607b      	str	r3, [r7, #4]
 8016cb8:	f340 8084 	ble.w	8016dc4 <_scanf_float+0x278>
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	3301      	adds	r3, #1
 8016cc0:	603b      	str	r3, [r7, #0]
 8016cc2:	e766      	b.n	8016b92 <_scanf_float+0x46>
 8016cc4:	eb1a 0f05 	cmn.w	sl, r5
 8016cc8:	f47f af70 	bne.w	8016bac <_scanf_float+0x60>
 8016ccc:	6822      	ldr	r2, [r4, #0]
 8016cce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016cd2:	6022      	str	r2, [r4, #0]
 8016cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8016cd8:	e7e4      	b.n	8016ca4 <_scanf_float+0x158>
 8016cda:	6822      	ldr	r2, [r4, #0]
 8016cdc:	0610      	lsls	r0, r2, #24
 8016cde:	f57f af65 	bpl.w	8016bac <_scanf_float+0x60>
 8016ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ce6:	e7f4      	b.n	8016cd2 <_scanf_float+0x186>
 8016ce8:	f1ba 0f00 	cmp.w	sl, #0
 8016cec:	d10e      	bne.n	8016d0c <_scanf_float+0x1c0>
 8016cee:	f1b9 0f00 	cmp.w	r9, #0
 8016cf2:	d10e      	bne.n	8016d12 <_scanf_float+0x1c6>
 8016cf4:	6822      	ldr	r2, [r4, #0]
 8016cf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016cfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016cfe:	d108      	bne.n	8016d12 <_scanf_float+0x1c6>
 8016d00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016d04:	6022      	str	r2, [r4, #0]
 8016d06:	f04f 0a01 	mov.w	sl, #1
 8016d0a:	e7e3      	b.n	8016cd4 <_scanf_float+0x188>
 8016d0c:	f1ba 0f02 	cmp.w	sl, #2
 8016d10:	d055      	beq.n	8016dbe <_scanf_float+0x272>
 8016d12:	2d01      	cmp	r5, #1
 8016d14:	d002      	beq.n	8016d1c <_scanf_float+0x1d0>
 8016d16:	2d04      	cmp	r5, #4
 8016d18:	f47f af48 	bne.w	8016bac <_scanf_float+0x60>
 8016d1c:	3501      	adds	r5, #1
 8016d1e:	b2ed      	uxtb	r5, r5
 8016d20:	e7d8      	b.n	8016cd4 <_scanf_float+0x188>
 8016d22:	f1ba 0f01 	cmp.w	sl, #1
 8016d26:	f47f af41 	bne.w	8016bac <_scanf_float+0x60>
 8016d2a:	f04f 0a02 	mov.w	sl, #2
 8016d2e:	e7d1      	b.n	8016cd4 <_scanf_float+0x188>
 8016d30:	b97d      	cbnz	r5, 8016d52 <_scanf_float+0x206>
 8016d32:	f1b9 0f00 	cmp.w	r9, #0
 8016d36:	f47f af3c 	bne.w	8016bb2 <_scanf_float+0x66>
 8016d3a:	6822      	ldr	r2, [r4, #0]
 8016d3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016d40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016d44:	f47f af39 	bne.w	8016bba <_scanf_float+0x6e>
 8016d48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016d4c:	6022      	str	r2, [r4, #0]
 8016d4e:	2501      	movs	r5, #1
 8016d50:	e7c0      	b.n	8016cd4 <_scanf_float+0x188>
 8016d52:	2d03      	cmp	r5, #3
 8016d54:	d0e2      	beq.n	8016d1c <_scanf_float+0x1d0>
 8016d56:	2d05      	cmp	r5, #5
 8016d58:	e7de      	b.n	8016d18 <_scanf_float+0x1cc>
 8016d5a:	2d02      	cmp	r5, #2
 8016d5c:	f47f af26 	bne.w	8016bac <_scanf_float+0x60>
 8016d60:	2503      	movs	r5, #3
 8016d62:	e7b7      	b.n	8016cd4 <_scanf_float+0x188>
 8016d64:	2d06      	cmp	r5, #6
 8016d66:	f47f af21 	bne.w	8016bac <_scanf_float+0x60>
 8016d6a:	2507      	movs	r5, #7
 8016d6c:	e7b2      	b.n	8016cd4 <_scanf_float+0x188>
 8016d6e:	6822      	ldr	r2, [r4, #0]
 8016d70:	0591      	lsls	r1, r2, #22
 8016d72:	f57f af1b 	bpl.w	8016bac <_scanf_float+0x60>
 8016d76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016d7a:	6022      	str	r2, [r4, #0]
 8016d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016d80:	e7a8      	b.n	8016cd4 <_scanf_float+0x188>
 8016d82:	6822      	ldr	r2, [r4, #0]
 8016d84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016d88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016d8c:	d006      	beq.n	8016d9c <_scanf_float+0x250>
 8016d8e:	0550      	lsls	r0, r2, #21
 8016d90:	f57f af0c 	bpl.w	8016bac <_scanf_float+0x60>
 8016d94:	f1b9 0f00 	cmp.w	r9, #0
 8016d98:	f43f af0f 	beq.w	8016bba <_scanf_float+0x6e>
 8016d9c:	0591      	lsls	r1, r2, #22
 8016d9e:	bf58      	it	pl
 8016da0:	9901      	ldrpl	r1, [sp, #4]
 8016da2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016da6:	bf58      	it	pl
 8016da8:	eba9 0101 	subpl.w	r1, r9, r1
 8016dac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016db0:	bf58      	it	pl
 8016db2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016db6:	6022      	str	r2, [r4, #0]
 8016db8:	f04f 0900 	mov.w	r9, #0
 8016dbc:	e78a      	b.n	8016cd4 <_scanf_float+0x188>
 8016dbe:	f04f 0a03 	mov.w	sl, #3
 8016dc2:	e787      	b.n	8016cd4 <_scanf_float+0x188>
 8016dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016dc8:	4639      	mov	r1, r7
 8016dca:	4640      	mov	r0, r8
 8016dcc:	4798      	blx	r3
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	f43f aedf 	beq.w	8016b92 <_scanf_float+0x46>
 8016dd4:	e6ea      	b.n	8016bac <_scanf_float+0x60>
 8016dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016dde:	463a      	mov	r2, r7
 8016de0:	4640      	mov	r0, r8
 8016de2:	4798      	blx	r3
 8016de4:	6923      	ldr	r3, [r4, #16]
 8016de6:	3b01      	subs	r3, #1
 8016de8:	6123      	str	r3, [r4, #16]
 8016dea:	e6ec      	b.n	8016bc6 <_scanf_float+0x7a>
 8016dec:	1e6b      	subs	r3, r5, #1
 8016dee:	2b06      	cmp	r3, #6
 8016df0:	d825      	bhi.n	8016e3e <_scanf_float+0x2f2>
 8016df2:	2d02      	cmp	r5, #2
 8016df4:	d836      	bhi.n	8016e64 <_scanf_float+0x318>
 8016df6:	455e      	cmp	r6, fp
 8016df8:	f67f aee8 	bls.w	8016bcc <_scanf_float+0x80>
 8016dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e04:	463a      	mov	r2, r7
 8016e06:	4640      	mov	r0, r8
 8016e08:	4798      	blx	r3
 8016e0a:	6923      	ldr	r3, [r4, #16]
 8016e0c:	3b01      	subs	r3, #1
 8016e0e:	6123      	str	r3, [r4, #16]
 8016e10:	e7f1      	b.n	8016df6 <_scanf_float+0x2aa>
 8016e12:	9802      	ldr	r0, [sp, #8]
 8016e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016e1c:	9002      	str	r0, [sp, #8]
 8016e1e:	463a      	mov	r2, r7
 8016e20:	4640      	mov	r0, r8
 8016e22:	4798      	blx	r3
 8016e24:	6923      	ldr	r3, [r4, #16]
 8016e26:	3b01      	subs	r3, #1
 8016e28:	6123      	str	r3, [r4, #16]
 8016e2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016e2e:	fa5f fa8a 	uxtb.w	sl, sl
 8016e32:	f1ba 0f02 	cmp.w	sl, #2
 8016e36:	d1ec      	bne.n	8016e12 <_scanf_float+0x2c6>
 8016e38:	3d03      	subs	r5, #3
 8016e3a:	b2ed      	uxtb	r5, r5
 8016e3c:	1b76      	subs	r6, r6, r5
 8016e3e:	6823      	ldr	r3, [r4, #0]
 8016e40:	05da      	lsls	r2, r3, #23
 8016e42:	d52f      	bpl.n	8016ea4 <_scanf_float+0x358>
 8016e44:	055b      	lsls	r3, r3, #21
 8016e46:	d510      	bpl.n	8016e6a <_scanf_float+0x31e>
 8016e48:	455e      	cmp	r6, fp
 8016e4a:	f67f aebf 	bls.w	8016bcc <_scanf_float+0x80>
 8016e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e56:	463a      	mov	r2, r7
 8016e58:	4640      	mov	r0, r8
 8016e5a:	4798      	blx	r3
 8016e5c:	6923      	ldr	r3, [r4, #16]
 8016e5e:	3b01      	subs	r3, #1
 8016e60:	6123      	str	r3, [r4, #16]
 8016e62:	e7f1      	b.n	8016e48 <_scanf_float+0x2fc>
 8016e64:	46aa      	mov	sl, r5
 8016e66:	9602      	str	r6, [sp, #8]
 8016e68:	e7df      	b.n	8016e2a <_scanf_float+0x2de>
 8016e6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016e6e:	6923      	ldr	r3, [r4, #16]
 8016e70:	2965      	cmp	r1, #101	; 0x65
 8016e72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8016e76:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8016e7a:	6123      	str	r3, [r4, #16]
 8016e7c:	d00c      	beq.n	8016e98 <_scanf_float+0x34c>
 8016e7e:	2945      	cmp	r1, #69	; 0x45
 8016e80:	d00a      	beq.n	8016e98 <_scanf_float+0x34c>
 8016e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e86:	463a      	mov	r2, r7
 8016e88:	4640      	mov	r0, r8
 8016e8a:	4798      	blx	r3
 8016e8c:	6923      	ldr	r3, [r4, #16]
 8016e8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016e92:	3b01      	subs	r3, #1
 8016e94:	1eb5      	subs	r5, r6, #2
 8016e96:	6123      	str	r3, [r4, #16]
 8016e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e9c:	463a      	mov	r2, r7
 8016e9e:	4640      	mov	r0, r8
 8016ea0:	4798      	blx	r3
 8016ea2:	462e      	mov	r6, r5
 8016ea4:	6825      	ldr	r5, [r4, #0]
 8016ea6:	f015 0510 	ands.w	r5, r5, #16
 8016eaa:	d14e      	bne.n	8016f4a <_scanf_float+0x3fe>
 8016eac:	7035      	strb	r5, [r6, #0]
 8016eae:	6823      	ldr	r3, [r4, #0]
 8016eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016eb8:	d119      	bne.n	8016eee <_scanf_float+0x3a2>
 8016eba:	9b01      	ldr	r3, [sp, #4]
 8016ebc:	454b      	cmp	r3, r9
 8016ebe:	eba3 0209 	sub.w	r2, r3, r9
 8016ec2:	d121      	bne.n	8016f08 <_scanf_float+0x3bc>
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	4659      	mov	r1, fp
 8016ec8:	4640      	mov	r0, r8
 8016eca:	f000 ff93 	bl	8017df4 <_strtod_r>
 8016ece:	6822      	ldr	r2, [r4, #0]
 8016ed0:	9b03      	ldr	r3, [sp, #12]
 8016ed2:	f012 0f02 	tst.w	r2, #2
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	d021      	beq.n	8016f1e <_scanf_float+0x3d2>
 8016eda:	9903      	ldr	r1, [sp, #12]
 8016edc:	1d1a      	adds	r2, r3, #4
 8016ede:	600a      	str	r2, [r1, #0]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	ed83 0b00 	vstr	d0, [r3]
 8016ee6:	68e3      	ldr	r3, [r4, #12]
 8016ee8:	3301      	adds	r3, #1
 8016eea:	60e3      	str	r3, [r4, #12]
 8016eec:	e66f      	b.n	8016bce <_scanf_float+0x82>
 8016eee:	9b04      	ldr	r3, [sp, #16]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d0e7      	beq.n	8016ec4 <_scanf_float+0x378>
 8016ef4:	9905      	ldr	r1, [sp, #20]
 8016ef6:	230a      	movs	r3, #10
 8016ef8:	462a      	mov	r2, r5
 8016efa:	3101      	adds	r1, #1
 8016efc:	4640      	mov	r0, r8
 8016efe:	f001 f801 	bl	8017f04 <_strtol_r>
 8016f02:	9b04      	ldr	r3, [sp, #16]
 8016f04:	9e05      	ldr	r6, [sp, #20]
 8016f06:	1ac2      	subs	r2, r0, r3
 8016f08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016f0c:	429e      	cmp	r6, r3
 8016f0e:	bf28      	it	cs
 8016f10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016f14:	490e      	ldr	r1, [pc, #56]	; (8016f50 <_scanf_float+0x404>)
 8016f16:	4630      	mov	r0, r6
 8016f18:	f000 f916 	bl	8017148 <siprintf>
 8016f1c:	e7d2      	b.n	8016ec4 <_scanf_float+0x378>
 8016f1e:	9903      	ldr	r1, [sp, #12]
 8016f20:	f012 0f04 	tst.w	r2, #4
 8016f24:	f103 0204 	add.w	r2, r3, #4
 8016f28:	600a      	str	r2, [r1, #0]
 8016f2a:	d1d9      	bne.n	8016ee0 <_scanf_float+0x394>
 8016f2c:	eeb4 0b40 	vcmp.f64	d0, d0
 8016f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f34:	681e      	ldr	r6, [r3, #0]
 8016f36:	d705      	bvc.n	8016f44 <_scanf_float+0x3f8>
 8016f38:	4806      	ldr	r0, [pc, #24]	; (8016f54 <_scanf_float+0x408>)
 8016f3a:	f000 f887 	bl	801704c <nanf>
 8016f3e:	ed86 0a00 	vstr	s0, [r6]
 8016f42:	e7d0      	b.n	8016ee6 <_scanf_float+0x39a>
 8016f44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016f48:	e7f9      	b.n	8016f3e <_scanf_float+0x3f2>
 8016f4a:	2500      	movs	r5, #0
 8016f4c:	e63f      	b.n	8016bce <_scanf_float+0x82>
 8016f4e:	bf00      	nop
 8016f50:	0801e144 	.word	0x0801e144
 8016f54:	0801d5f4 	.word	0x0801d5f4

08016f58 <cleanup_glue>:
 8016f58:	b538      	push	{r3, r4, r5, lr}
 8016f5a:	460c      	mov	r4, r1
 8016f5c:	6809      	ldr	r1, [r1, #0]
 8016f5e:	4605      	mov	r5, r0
 8016f60:	b109      	cbz	r1, 8016f66 <cleanup_glue+0xe>
 8016f62:	f7ff fff9 	bl	8016f58 <cleanup_glue>
 8016f66:	4621      	mov	r1, r4
 8016f68:	4628      	mov	r0, r5
 8016f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f6e:	f002 bfef 	b.w	8019f50 <_free_r>
	...

08016f74 <_reclaim_reent>:
 8016f74:	4b2c      	ldr	r3, [pc, #176]	; (8017028 <_reclaim_reent+0xb4>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	4283      	cmp	r3, r0
 8016f7a:	b570      	push	{r4, r5, r6, lr}
 8016f7c:	4604      	mov	r4, r0
 8016f7e:	d051      	beq.n	8017024 <_reclaim_reent+0xb0>
 8016f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016f82:	b143      	cbz	r3, 8016f96 <_reclaim_reent+0x22>
 8016f84:	68db      	ldr	r3, [r3, #12]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d14a      	bne.n	8017020 <_reclaim_reent+0xac>
 8016f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f8c:	6819      	ldr	r1, [r3, #0]
 8016f8e:	b111      	cbz	r1, 8016f96 <_reclaim_reent+0x22>
 8016f90:	4620      	mov	r0, r4
 8016f92:	f002 ffdd 	bl	8019f50 <_free_r>
 8016f96:	6961      	ldr	r1, [r4, #20]
 8016f98:	b111      	cbz	r1, 8016fa0 <_reclaim_reent+0x2c>
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	f002 ffd8 	bl	8019f50 <_free_r>
 8016fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016fa2:	b111      	cbz	r1, 8016faa <_reclaim_reent+0x36>
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f002 ffd3 	bl	8019f50 <_free_r>
 8016faa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fac:	b111      	cbz	r1, 8016fb4 <_reclaim_reent+0x40>
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f002 ffce 	bl	8019f50 <_free_r>
 8016fb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016fb6:	b111      	cbz	r1, 8016fbe <_reclaim_reent+0x4a>
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f002 ffc9 	bl	8019f50 <_free_r>
 8016fbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016fc0:	b111      	cbz	r1, 8016fc8 <_reclaim_reent+0x54>
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f002 ffc4 	bl	8019f50 <_free_r>
 8016fc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016fca:	b111      	cbz	r1, 8016fd2 <_reclaim_reent+0x5e>
 8016fcc:	4620      	mov	r0, r4
 8016fce:	f002 ffbf 	bl	8019f50 <_free_r>
 8016fd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016fd4:	b111      	cbz	r1, 8016fdc <_reclaim_reent+0x68>
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	f002 ffba 	bl	8019f50 <_free_r>
 8016fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fde:	b111      	cbz	r1, 8016fe6 <_reclaim_reent+0x72>
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f002 ffb5 	bl	8019f50 <_free_r>
 8016fe6:	69a3      	ldr	r3, [r4, #24]
 8016fe8:	b1e3      	cbz	r3, 8017024 <_reclaim_reent+0xb0>
 8016fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016fec:	4620      	mov	r0, r4
 8016fee:	4798      	blx	r3
 8016ff0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016ff2:	b1b9      	cbz	r1, 8017024 <_reclaim_reent+0xb0>
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ffa:	f7ff bfad 	b.w	8016f58 <cleanup_glue>
 8016ffe:	5949      	ldr	r1, [r1, r5]
 8017000:	b941      	cbnz	r1, 8017014 <_reclaim_reent+0xa0>
 8017002:	3504      	adds	r5, #4
 8017004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017006:	2d80      	cmp	r5, #128	; 0x80
 8017008:	68d9      	ldr	r1, [r3, #12]
 801700a:	d1f8      	bne.n	8016ffe <_reclaim_reent+0x8a>
 801700c:	4620      	mov	r0, r4
 801700e:	f002 ff9f 	bl	8019f50 <_free_r>
 8017012:	e7ba      	b.n	8016f8a <_reclaim_reent+0x16>
 8017014:	680e      	ldr	r6, [r1, #0]
 8017016:	4620      	mov	r0, r4
 8017018:	f002 ff9a 	bl	8019f50 <_free_r>
 801701c:	4631      	mov	r1, r6
 801701e:	e7ef      	b.n	8017000 <_reclaim_reent+0x8c>
 8017020:	2500      	movs	r5, #0
 8017022:	e7ef      	b.n	8017004 <_reclaim_reent+0x90>
 8017024:	bd70      	pop	{r4, r5, r6, pc}
 8017026:	bf00      	nop
 8017028:	240000b8 	.word	0x240000b8

0801702c <_sbrk_r>:
 801702c:	b538      	push	{r3, r4, r5, lr}
 801702e:	4d06      	ldr	r5, [pc, #24]	; (8017048 <_sbrk_r+0x1c>)
 8017030:	2300      	movs	r3, #0
 8017032:	4604      	mov	r4, r0
 8017034:	4608      	mov	r0, r1
 8017036:	602b      	str	r3, [r5, #0]
 8017038:	f7ea fd66 	bl	8001b08 <_sbrk>
 801703c:	1c43      	adds	r3, r0, #1
 801703e:	d102      	bne.n	8017046 <_sbrk_r+0x1a>
 8017040:	682b      	ldr	r3, [r5, #0]
 8017042:	b103      	cbz	r3, 8017046 <_sbrk_r+0x1a>
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	bd38      	pop	{r3, r4, r5, pc}
 8017048:	24045fb4 	.word	0x24045fb4

0801704c <nanf>:
 801704c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017054 <nanf+0x8>
 8017050:	4770      	bx	lr
 8017052:	bf00      	nop
 8017054:	7fc00000 	.word	0x7fc00000

08017058 <_raise_r>:
 8017058:	291f      	cmp	r1, #31
 801705a:	b538      	push	{r3, r4, r5, lr}
 801705c:	4604      	mov	r4, r0
 801705e:	460d      	mov	r5, r1
 8017060:	d904      	bls.n	801706c <_raise_r+0x14>
 8017062:	2316      	movs	r3, #22
 8017064:	6003      	str	r3, [r0, #0]
 8017066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801706a:	bd38      	pop	{r3, r4, r5, pc}
 801706c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801706e:	b112      	cbz	r2, 8017076 <_raise_r+0x1e>
 8017070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017074:	b94b      	cbnz	r3, 801708a <_raise_r+0x32>
 8017076:	4620      	mov	r0, r4
 8017078:	f000 f830 	bl	80170dc <_getpid_r>
 801707c:	462a      	mov	r2, r5
 801707e:	4601      	mov	r1, r0
 8017080:	4620      	mov	r0, r4
 8017082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017086:	f000 b817 	b.w	80170b8 <_kill_r>
 801708a:	2b01      	cmp	r3, #1
 801708c:	d00a      	beq.n	80170a4 <_raise_r+0x4c>
 801708e:	1c59      	adds	r1, r3, #1
 8017090:	d103      	bne.n	801709a <_raise_r+0x42>
 8017092:	2316      	movs	r3, #22
 8017094:	6003      	str	r3, [r0, #0]
 8017096:	2001      	movs	r0, #1
 8017098:	e7e7      	b.n	801706a <_raise_r+0x12>
 801709a:	2400      	movs	r4, #0
 801709c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80170a0:	4628      	mov	r0, r5
 80170a2:	4798      	blx	r3
 80170a4:	2000      	movs	r0, #0
 80170a6:	e7e0      	b.n	801706a <_raise_r+0x12>

080170a8 <raise>:
 80170a8:	4b02      	ldr	r3, [pc, #8]	; (80170b4 <raise+0xc>)
 80170aa:	4601      	mov	r1, r0
 80170ac:	6818      	ldr	r0, [r3, #0]
 80170ae:	f7ff bfd3 	b.w	8017058 <_raise_r>
 80170b2:	bf00      	nop
 80170b4:	240000b8 	.word	0x240000b8

080170b8 <_kill_r>:
 80170b8:	b538      	push	{r3, r4, r5, lr}
 80170ba:	4d07      	ldr	r5, [pc, #28]	; (80170d8 <_kill_r+0x20>)
 80170bc:	2300      	movs	r3, #0
 80170be:	4604      	mov	r4, r0
 80170c0:	4608      	mov	r0, r1
 80170c2:	4611      	mov	r1, r2
 80170c4:	602b      	str	r3, [r5, #0]
 80170c6:	f7ea fce9 	bl	8001a9c <_kill>
 80170ca:	1c43      	adds	r3, r0, #1
 80170cc:	d102      	bne.n	80170d4 <_kill_r+0x1c>
 80170ce:	682b      	ldr	r3, [r5, #0]
 80170d0:	b103      	cbz	r3, 80170d4 <_kill_r+0x1c>
 80170d2:	6023      	str	r3, [r4, #0]
 80170d4:	bd38      	pop	{r3, r4, r5, pc}
 80170d6:	bf00      	nop
 80170d8:	24045fb4 	.word	0x24045fb4

080170dc <_getpid_r>:
 80170dc:	f7ea bcdc 	b.w	8001a98 <_getpid>

080170e0 <sniprintf>:
 80170e0:	b40c      	push	{r2, r3}
 80170e2:	b530      	push	{r4, r5, lr}
 80170e4:	4b17      	ldr	r3, [pc, #92]	; (8017144 <sniprintf+0x64>)
 80170e6:	1e0c      	subs	r4, r1, #0
 80170e8:	681d      	ldr	r5, [r3, #0]
 80170ea:	b09d      	sub	sp, #116	; 0x74
 80170ec:	da08      	bge.n	8017100 <sniprintf+0x20>
 80170ee:	238b      	movs	r3, #139	; 0x8b
 80170f0:	602b      	str	r3, [r5, #0]
 80170f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170f6:	b01d      	add	sp, #116	; 0x74
 80170f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170fc:	b002      	add	sp, #8
 80170fe:	4770      	bx	lr
 8017100:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017104:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017108:	bf14      	ite	ne
 801710a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801710e:	4623      	moveq	r3, r4
 8017110:	9304      	str	r3, [sp, #16]
 8017112:	9307      	str	r3, [sp, #28]
 8017114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017118:	9002      	str	r0, [sp, #8]
 801711a:	9006      	str	r0, [sp, #24]
 801711c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017122:	ab21      	add	r3, sp, #132	; 0x84
 8017124:	a902      	add	r1, sp, #8
 8017126:	4628      	mov	r0, r5
 8017128:	9301      	str	r3, [sp, #4]
 801712a:	f002 ffb9 	bl	801a0a0 <_svfiprintf_r>
 801712e:	1c43      	adds	r3, r0, #1
 8017130:	bfbc      	itt	lt
 8017132:	238b      	movlt	r3, #139	; 0x8b
 8017134:	602b      	strlt	r3, [r5, #0]
 8017136:	2c00      	cmp	r4, #0
 8017138:	d0dd      	beq.n	80170f6 <sniprintf+0x16>
 801713a:	9b02      	ldr	r3, [sp, #8]
 801713c:	2200      	movs	r2, #0
 801713e:	701a      	strb	r2, [r3, #0]
 8017140:	e7d9      	b.n	80170f6 <sniprintf+0x16>
 8017142:	bf00      	nop
 8017144:	240000b8 	.word	0x240000b8

08017148 <siprintf>:
 8017148:	b40e      	push	{r1, r2, r3}
 801714a:	b500      	push	{lr}
 801714c:	b09c      	sub	sp, #112	; 0x70
 801714e:	ab1d      	add	r3, sp, #116	; 0x74
 8017150:	9002      	str	r0, [sp, #8]
 8017152:	9006      	str	r0, [sp, #24]
 8017154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017158:	4809      	ldr	r0, [pc, #36]	; (8017180 <siprintf+0x38>)
 801715a:	9107      	str	r1, [sp, #28]
 801715c:	9104      	str	r1, [sp, #16]
 801715e:	4909      	ldr	r1, [pc, #36]	; (8017184 <siprintf+0x3c>)
 8017160:	f853 2b04 	ldr.w	r2, [r3], #4
 8017164:	9105      	str	r1, [sp, #20]
 8017166:	6800      	ldr	r0, [r0, #0]
 8017168:	9301      	str	r3, [sp, #4]
 801716a:	a902      	add	r1, sp, #8
 801716c:	f002 ff98 	bl	801a0a0 <_svfiprintf_r>
 8017170:	9b02      	ldr	r3, [sp, #8]
 8017172:	2200      	movs	r2, #0
 8017174:	701a      	strb	r2, [r3, #0]
 8017176:	b01c      	add	sp, #112	; 0x70
 8017178:	f85d eb04 	ldr.w	lr, [sp], #4
 801717c:	b003      	add	sp, #12
 801717e:	4770      	bx	lr
 8017180:	240000b8 	.word	0x240000b8
 8017184:	ffff0208 	.word	0xffff0208

08017188 <__sread>:
 8017188:	b510      	push	{r4, lr}
 801718a:	460c      	mov	r4, r1
 801718c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017190:	f003 f886 	bl	801a2a0 <_read_r>
 8017194:	2800      	cmp	r0, #0
 8017196:	bfab      	itete	ge
 8017198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801719a:	89a3      	ldrhlt	r3, [r4, #12]
 801719c:	181b      	addge	r3, r3, r0
 801719e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80171a2:	bfac      	ite	ge
 80171a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80171a6:	81a3      	strhlt	r3, [r4, #12]
 80171a8:	bd10      	pop	{r4, pc}

080171aa <__swrite>:
 80171aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ae:	461f      	mov	r7, r3
 80171b0:	898b      	ldrh	r3, [r1, #12]
 80171b2:	05db      	lsls	r3, r3, #23
 80171b4:	4605      	mov	r5, r0
 80171b6:	460c      	mov	r4, r1
 80171b8:	4616      	mov	r6, r2
 80171ba:	d505      	bpl.n	80171c8 <__swrite+0x1e>
 80171bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171c0:	2302      	movs	r3, #2
 80171c2:	2200      	movs	r2, #0
 80171c4:	f002 f9b8 	bl	8019538 <_lseek_r>
 80171c8:	89a3      	ldrh	r3, [r4, #12]
 80171ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80171d2:	81a3      	strh	r3, [r4, #12]
 80171d4:	4632      	mov	r2, r6
 80171d6:	463b      	mov	r3, r7
 80171d8:	4628      	mov	r0, r5
 80171da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171de:	f000 bef7 	b.w	8017fd0 <_write_r>

080171e2 <__sseek>:
 80171e2:	b510      	push	{r4, lr}
 80171e4:	460c      	mov	r4, r1
 80171e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171ea:	f002 f9a5 	bl	8019538 <_lseek_r>
 80171ee:	1c43      	adds	r3, r0, #1
 80171f0:	89a3      	ldrh	r3, [r4, #12]
 80171f2:	bf15      	itete	ne
 80171f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80171f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80171fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80171fe:	81a3      	strheq	r3, [r4, #12]
 8017200:	bf18      	it	ne
 8017202:	81a3      	strhne	r3, [r4, #12]
 8017204:	bd10      	pop	{r4, pc}

08017206 <__sclose>:
 8017206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801720a:	f000 bf55 	b.w	80180b8 <_close_r>

0801720e <strcat>:
 801720e:	b510      	push	{r4, lr}
 8017210:	4602      	mov	r2, r0
 8017212:	7814      	ldrb	r4, [r2, #0]
 8017214:	4613      	mov	r3, r2
 8017216:	3201      	adds	r2, #1
 8017218:	2c00      	cmp	r4, #0
 801721a:	d1fa      	bne.n	8017212 <strcat+0x4>
 801721c:	3b01      	subs	r3, #1
 801721e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017226:	2a00      	cmp	r2, #0
 8017228:	d1f9      	bne.n	801721e <strcat+0x10>
 801722a:	bd10      	pop	{r4, pc}

0801722c <strncpy>:
 801722c:	b510      	push	{r4, lr}
 801722e:	3901      	subs	r1, #1
 8017230:	4603      	mov	r3, r0
 8017232:	b132      	cbz	r2, 8017242 <strncpy+0x16>
 8017234:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017238:	f803 4b01 	strb.w	r4, [r3], #1
 801723c:	3a01      	subs	r2, #1
 801723e:	2c00      	cmp	r4, #0
 8017240:	d1f7      	bne.n	8017232 <strncpy+0x6>
 8017242:	441a      	add	r2, r3
 8017244:	2100      	movs	r1, #0
 8017246:	4293      	cmp	r3, r2
 8017248:	d100      	bne.n	801724c <strncpy+0x20>
 801724a:	bd10      	pop	{r4, pc}
 801724c:	f803 1b01 	strb.w	r1, [r3], #1
 8017250:	e7f9      	b.n	8017246 <strncpy+0x1a>

08017252 <sulp>:
 8017252:	b570      	push	{r4, r5, r6, lr}
 8017254:	4604      	mov	r4, r0
 8017256:	460d      	mov	r5, r1
 8017258:	4616      	mov	r6, r2
 801725a:	ec45 4b10 	vmov	d0, r4, r5
 801725e:	f002 fd15 	bl	8019c8c <__ulp>
 8017262:	b17e      	cbz	r6, 8017284 <sulp+0x32>
 8017264:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017268:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801726c:	2b00      	cmp	r3, #0
 801726e:	dd09      	ble.n	8017284 <sulp+0x32>
 8017270:	051b      	lsls	r3, r3, #20
 8017272:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017276:	2000      	movs	r0, #0
 8017278:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801727c:	ec41 0b17 	vmov	d7, r0, r1
 8017280:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017284:	bd70      	pop	{r4, r5, r6, pc}
	...

08017288 <_strtod_l>:
 8017288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728c:	ed2d 8b0e 	vpush	{d8-d14}
 8017290:	b097      	sub	sp, #92	; 0x5c
 8017292:	461f      	mov	r7, r3
 8017294:	2300      	movs	r3, #0
 8017296:	9312      	str	r3, [sp, #72]	; 0x48
 8017298:	4ba1      	ldr	r3, [pc, #644]	; (8017520 <_strtod_l+0x298>)
 801729a:	920d      	str	r2, [sp, #52]	; 0x34
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	9307      	str	r3, [sp, #28]
 80172a0:	4604      	mov	r4, r0
 80172a2:	4618      	mov	r0, r3
 80172a4:	468b      	mov	fp, r1
 80172a6:	f7e9 f825 	bl	80002f4 <strlen>
 80172aa:	f04f 0800 	mov.w	r8, #0
 80172ae:	4605      	mov	r5, r0
 80172b0:	f04f 0900 	mov.w	r9, #0
 80172b4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80172b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80172ba:	7813      	ldrb	r3, [r2, #0]
 80172bc:	2b2b      	cmp	r3, #43	; 0x2b
 80172be:	d04d      	beq.n	801735c <_strtod_l+0xd4>
 80172c0:	d83a      	bhi.n	8017338 <_strtod_l+0xb0>
 80172c2:	2b0d      	cmp	r3, #13
 80172c4:	d833      	bhi.n	801732e <_strtod_l+0xa6>
 80172c6:	2b08      	cmp	r3, #8
 80172c8:	d833      	bhi.n	8017332 <_strtod_l+0xaa>
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d03d      	beq.n	801734a <_strtod_l+0xc2>
 80172ce:	2300      	movs	r3, #0
 80172d0:	9308      	str	r3, [sp, #32]
 80172d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80172d4:	7833      	ldrb	r3, [r6, #0]
 80172d6:	2b30      	cmp	r3, #48	; 0x30
 80172d8:	f040 80b0 	bne.w	801743c <_strtod_l+0x1b4>
 80172dc:	7873      	ldrb	r3, [r6, #1]
 80172de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80172e2:	2b58      	cmp	r3, #88	; 0x58
 80172e4:	d167      	bne.n	80173b6 <_strtod_l+0x12e>
 80172e6:	9b08      	ldr	r3, [sp, #32]
 80172e8:	9301      	str	r3, [sp, #4]
 80172ea:	ab12      	add	r3, sp, #72	; 0x48
 80172ec:	9702      	str	r7, [sp, #8]
 80172ee:	9300      	str	r3, [sp, #0]
 80172f0:	4a8c      	ldr	r2, [pc, #560]	; (8017524 <_strtod_l+0x29c>)
 80172f2:	ab13      	add	r3, sp, #76	; 0x4c
 80172f4:	a911      	add	r1, sp, #68	; 0x44
 80172f6:	4620      	mov	r0, r4
 80172f8:	f001 fe12 	bl	8018f20 <__gethex>
 80172fc:	f010 0507 	ands.w	r5, r0, #7
 8017300:	4607      	mov	r7, r0
 8017302:	d005      	beq.n	8017310 <_strtod_l+0x88>
 8017304:	2d06      	cmp	r5, #6
 8017306:	d12b      	bne.n	8017360 <_strtod_l+0xd8>
 8017308:	3601      	adds	r6, #1
 801730a:	2300      	movs	r3, #0
 801730c:	9611      	str	r6, [sp, #68]	; 0x44
 801730e:	9308      	str	r3, [sp, #32]
 8017310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017312:	2b00      	cmp	r3, #0
 8017314:	f040 854e 	bne.w	8017db4 <_strtod_l+0xb2c>
 8017318:	9b08      	ldr	r3, [sp, #32]
 801731a:	b1e3      	cbz	r3, 8017356 <_strtod_l+0xce>
 801731c:	ec49 8b17 	vmov	d7, r8, r9
 8017320:	eeb1 0b47 	vneg.f64	d0, d7
 8017324:	b017      	add	sp, #92	; 0x5c
 8017326:	ecbd 8b0e 	vpop	{d8-d14}
 801732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801732e:	2b20      	cmp	r3, #32
 8017330:	d1cd      	bne.n	80172ce <_strtod_l+0x46>
 8017332:	3201      	adds	r2, #1
 8017334:	9211      	str	r2, [sp, #68]	; 0x44
 8017336:	e7bf      	b.n	80172b8 <_strtod_l+0x30>
 8017338:	2b2d      	cmp	r3, #45	; 0x2d
 801733a:	d1c8      	bne.n	80172ce <_strtod_l+0x46>
 801733c:	2301      	movs	r3, #1
 801733e:	9308      	str	r3, [sp, #32]
 8017340:	1c53      	adds	r3, r2, #1
 8017342:	9311      	str	r3, [sp, #68]	; 0x44
 8017344:	7853      	ldrb	r3, [r2, #1]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d1c3      	bne.n	80172d2 <_strtod_l+0x4a>
 801734a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801734c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017350:	2b00      	cmp	r3, #0
 8017352:	f040 852d 	bne.w	8017db0 <_strtod_l+0xb28>
 8017356:	ec49 8b10 	vmov	d0, r8, r9
 801735a:	e7e3      	b.n	8017324 <_strtod_l+0x9c>
 801735c:	2300      	movs	r3, #0
 801735e:	e7ee      	b.n	801733e <_strtod_l+0xb6>
 8017360:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017362:	b13a      	cbz	r2, 8017374 <_strtod_l+0xec>
 8017364:	2135      	movs	r1, #53	; 0x35
 8017366:	a814      	add	r0, sp, #80	; 0x50
 8017368:	f002 fd98 	bl	8019e9c <__copybits>
 801736c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801736e:	4620      	mov	r0, r4
 8017370:	f002 f95a 	bl	8019628 <_Bfree>
 8017374:	3d01      	subs	r5, #1
 8017376:	2d04      	cmp	r5, #4
 8017378:	d806      	bhi.n	8017388 <_strtod_l+0x100>
 801737a:	e8df f005 	tbb	[pc, r5]
 801737e:	030a      	.short	0x030a
 8017380:	1714      	.short	0x1714
 8017382:	0a          	.byte	0x0a
 8017383:	00          	.byte	0x00
 8017384:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8017388:	073f      	lsls	r7, r7, #28
 801738a:	d5c1      	bpl.n	8017310 <_strtod_l+0x88>
 801738c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017390:	e7be      	b.n	8017310 <_strtod_l+0x88>
 8017392:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8017396:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017398:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801739c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80173a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80173a4:	e7f0      	b.n	8017388 <_strtod_l+0x100>
 80173a6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017528 <_strtod_l+0x2a0>
 80173aa:	e7ed      	b.n	8017388 <_strtod_l+0x100>
 80173ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80173b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80173b4:	e7e8      	b.n	8017388 <_strtod_l+0x100>
 80173b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173b8:	1c5a      	adds	r2, r3, #1
 80173ba:	9211      	str	r2, [sp, #68]	; 0x44
 80173bc:	785b      	ldrb	r3, [r3, #1]
 80173be:	2b30      	cmp	r3, #48	; 0x30
 80173c0:	d0f9      	beq.n	80173b6 <_strtod_l+0x12e>
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d0a4      	beq.n	8017310 <_strtod_l+0x88>
 80173c6:	2301      	movs	r3, #1
 80173c8:	f04f 0a00 	mov.w	sl, #0
 80173cc:	9304      	str	r3, [sp, #16]
 80173ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173d0:	930a      	str	r3, [sp, #40]	; 0x28
 80173d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80173d6:	f8cd a018 	str.w	sl, [sp, #24]
 80173da:	220a      	movs	r2, #10
 80173dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80173de:	7807      	ldrb	r7, [r0, #0]
 80173e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80173e4:	b2d9      	uxtb	r1, r3
 80173e6:	2909      	cmp	r1, #9
 80173e8:	d92a      	bls.n	8017440 <_strtod_l+0x1b8>
 80173ea:	9907      	ldr	r1, [sp, #28]
 80173ec:	462a      	mov	r2, r5
 80173ee:	f002 ff73 	bl	801a2d8 <strncmp>
 80173f2:	2800      	cmp	r0, #0
 80173f4:	d033      	beq.n	801745e <_strtod_l+0x1d6>
 80173f6:	2000      	movs	r0, #0
 80173f8:	9b06      	ldr	r3, [sp, #24]
 80173fa:	463a      	mov	r2, r7
 80173fc:	4601      	mov	r1, r0
 80173fe:	4607      	mov	r7, r0
 8017400:	2a65      	cmp	r2, #101	; 0x65
 8017402:	d001      	beq.n	8017408 <_strtod_l+0x180>
 8017404:	2a45      	cmp	r2, #69	; 0x45
 8017406:	d117      	bne.n	8017438 <_strtod_l+0x1b0>
 8017408:	b91b      	cbnz	r3, 8017412 <_strtod_l+0x18a>
 801740a:	9b04      	ldr	r3, [sp, #16]
 801740c:	4303      	orrs	r3, r0
 801740e:	d09c      	beq.n	801734a <_strtod_l+0xc2>
 8017410:	2300      	movs	r3, #0
 8017412:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8017416:	f10b 0201 	add.w	r2, fp, #1
 801741a:	9211      	str	r2, [sp, #68]	; 0x44
 801741c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8017420:	2a2b      	cmp	r2, #43	; 0x2b
 8017422:	d071      	beq.n	8017508 <_strtod_l+0x280>
 8017424:	2a2d      	cmp	r2, #45	; 0x2d
 8017426:	d077      	beq.n	8017518 <_strtod_l+0x290>
 8017428:	f04f 0e00 	mov.w	lr, #0
 801742c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8017430:	2d09      	cmp	r5, #9
 8017432:	d97f      	bls.n	8017534 <_strtod_l+0x2ac>
 8017434:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017438:	2500      	movs	r5, #0
 801743a:	e09b      	b.n	8017574 <_strtod_l+0x2ec>
 801743c:	2300      	movs	r3, #0
 801743e:	e7c3      	b.n	80173c8 <_strtod_l+0x140>
 8017440:	9906      	ldr	r1, [sp, #24]
 8017442:	2908      	cmp	r1, #8
 8017444:	bfdd      	ittte	le
 8017446:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017448:	fb02 3301 	mlale	r3, r2, r1, r3
 801744c:	9309      	strle	r3, [sp, #36]	; 0x24
 801744e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017452:	9b06      	ldr	r3, [sp, #24]
 8017454:	3001      	adds	r0, #1
 8017456:	3301      	adds	r3, #1
 8017458:	9306      	str	r3, [sp, #24]
 801745a:	9011      	str	r0, [sp, #68]	; 0x44
 801745c:	e7be      	b.n	80173dc <_strtod_l+0x154>
 801745e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017460:	195a      	adds	r2, r3, r5
 8017462:	9211      	str	r2, [sp, #68]	; 0x44
 8017464:	5d5a      	ldrb	r2, [r3, r5]
 8017466:	9b06      	ldr	r3, [sp, #24]
 8017468:	b3a3      	cbz	r3, 80174d4 <_strtod_l+0x24c>
 801746a:	4607      	mov	r7, r0
 801746c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017470:	2909      	cmp	r1, #9
 8017472:	d912      	bls.n	801749a <_strtod_l+0x212>
 8017474:	2101      	movs	r1, #1
 8017476:	e7c3      	b.n	8017400 <_strtod_l+0x178>
 8017478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801747a:	1c5a      	adds	r2, r3, #1
 801747c:	9211      	str	r2, [sp, #68]	; 0x44
 801747e:	785a      	ldrb	r2, [r3, #1]
 8017480:	3001      	adds	r0, #1
 8017482:	2a30      	cmp	r2, #48	; 0x30
 8017484:	d0f8      	beq.n	8017478 <_strtod_l+0x1f0>
 8017486:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801748a:	2b08      	cmp	r3, #8
 801748c:	f200 8497 	bhi.w	8017dbe <_strtod_l+0xb36>
 8017490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017492:	930a      	str	r3, [sp, #40]	; 0x28
 8017494:	4607      	mov	r7, r0
 8017496:	2000      	movs	r0, #0
 8017498:	4603      	mov	r3, r0
 801749a:	3a30      	subs	r2, #48	; 0x30
 801749c:	f100 0101 	add.w	r1, r0, #1
 80174a0:	d012      	beq.n	80174c8 <_strtod_l+0x240>
 80174a2:	440f      	add	r7, r1
 80174a4:	eb00 0c03 	add.w	ip, r0, r3
 80174a8:	4619      	mov	r1, r3
 80174aa:	250a      	movs	r5, #10
 80174ac:	4561      	cmp	r1, ip
 80174ae:	d113      	bne.n	80174d8 <_strtod_l+0x250>
 80174b0:	1819      	adds	r1, r3, r0
 80174b2:	2908      	cmp	r1, #8
 80174b4:	f103 0301 	add.w	r3, r3, #1
 80174b8:	4403      	add	r3, r0
 80174ba:	dc1c      	bgt.n	80174f6 <_strtod_l+0x26e>
 80174bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174be:	210a      	movs	r1, #10
 80174c0:	fb01 2200 	mla	r2, r1, r0, r2
 80174c4:	9209      	str	r2, [sp, #36]	; 0x24
 80174c6:	2100      	movs	r1, #0
 80174c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80174ca:	1c50      	adds	r0, r2, #1
 80174cc:	9011      	str	r0, [sp, #68]	; 0x44
 80174ce:	7852      	ldrb	r2, [r2, #1]
 80174d0:	4608      	mov	r0, r1
 80174d2:	e7cb      	b.n	801746c <_strtod_l+0x1e4>
 80174d4:	9806      	ldr	r0, [sp, #24]
 80174d6:	e7d4      	b.n	8017482 <_strtod_l+0x1fa>
 80174d8:	2908      	cmp	r1, #8
 80174da:	dc04      	bgt.n	80174e6 <_strtod_l+0x25e>
 80174dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80174de:	436e      	muls	r6, r5
 80174e0:	9609      	str	r6, [sp, #36]	; 0x24
 80174e2:	3101      	adds	r1, #1
 80174e4:	e7e2      	b.n	80174ac <_strtod_l+0x224>
 80174e6:	f101 0e01 	add.w	lr, r1, #1
 80174ea:	f1be 0f10 	cmp.w	lr, #16
 80174ee:	bfd8      	it	le
 80174f0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80174f4:	e7f5      	b.n	80174e2 <_strtod_l+0x25a>
 80174f6:	2b10      	cmp	r3, #16
 80174f8:	bfdc      	itt	le
 80174fa:	210a      	movle	r1, #10
 80174fc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8017500:	e7e1      	b.n	80174c6 <_strtod_l+0x23e>
 8017502:	2700      	movs	r7, #0
 8017504:	2101      	movs	r1, #1
 8017506:	e780      	b.n	801740a <_strtod_l+0x182>
 8017508:	f04f 0e00 	mov.w	lr, #0
 801750c:	f10b 0202 	add.w	r2, fp, #2
 8017510:	9211      	str	r2, [sp, #68]	; 0x44
 8017512:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8017516:	e789      	b.n	801742c <_strtod_l+0x1a4>
 8017518:	f04f 0e01 	mov.w	lr, #1
 801751c:	e7f6      	b.n	801750c <_strtod_l+0x284>
 801751e:	bf00      	nop
 8017520:	0801e394 	.word	0x0801e394
 8017524:	0801e14c 	.word	0x0801e14c
 8017528:	7ff00000 	.word	0x7ff00000
 801752c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801752e:	1c55      	adds	r5, r2, #1
 8017530:	9511      	str	r5, [sp, #68]	; 0x44
 8017532:	7852      	ldrb	r2, [r2, #1]
 8017534:	2a30      	cmp	r2, #48	; 0x30
 8017536:	d0f9      	beq.n	801752c <_strtod_l+0x2a4>
 8017538:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801753c:	2d08      	cmp	r5, #8
 801753e:	f63f af7b 	bhi.w	8017438 <_strtod_l+0x1b0>
 8017542:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8017546:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017548:	9207      	str	r2, [sp, #28]
 801754a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801754c:	1c55      	adds	r5, r2, #1
 801754e:	9511      	str	r5, [sp, #68]	; 0x44
 8017550:	7852      	ldrb	r2, [r2, #1]
 8017552:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8017556:	2e09      	cmp	r6, #9
 8017558:	d937      	bls.n	80175ca <_strtod_l+0x342>
 801755a:	9e07      	ldr	r6, [sp, #28]
 801755c:	1bad      	subs	r5, r5, r6
 801755e:	2d08      	cmp	r5, #8
 8017560:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8017564:	dc02      	bgt.n	801756c <_strtod_l+0x2e4>
 8017566:	4565      	cmp	r5, ip
 8017568:	bfa8      	it	ge
 801756a:	4665      	movge	r5, ip
 801756c:	f1be 0f00 	cmp.w	lr, #0
 8017570:	d000      	beq.n	8017574 <_strtod_l+0x2ec>
 8017572:	426d      	negs	r5, r5
 8017574:	2b00      	cmp	r3, #0
 8017576:	d14d      	bne.n	8017614 <_strtod_l+0x38c>
 8017578:	9b04      	ldr	r3, [sp, #16]
 801757a:	4303      	orrs	r3, r0
 801757c:	f47f aec8 	bne.w	8017310 <_strtod_l+0x88>
 8017580:	2900      	cmp	r1, #0
 8017582:	f47f aee2 	bne.w	801734a <_strtod_l+0xc2>
 8017586:	2a69      	cmp	r2, #105	; 0x69
 8017588:	d027      	beq.n	80175da <_strtod_l+0x352>
 801758a:	dc24      	bgt.n	80175d6 <_strtod_l+0x34e>
 801758c:	2a49      	cmp	r2, #73	; 0x49
 801758e:	d024      	beq.n	80175da <_strtod_l+0x352>
 8017590:	2a4e      	cmp	r2, #78	; 0x4e
 8017592:	f47f aeda 	bne.w	801734a <_strtod_l+0xc2>
 8017596:	4996      	ldr	r1, [pc, #600]	; (80177f0 <_strtod_l+0x568>)
 8017598:	a811      	add	r0, sp, #68	; 0x44
 801759a:	f001 ff19 	bl	80193d0 <__match>
 801759e:	2800      	cmp	r0, #0
 80175a0:	f43f aed3 	beq.w	801734a <_strtod_l+0xc2>
 80175a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175a6:	781b      	ldrb	r3, [r3, #0]
 80175a8:	2b28      	cmp	r3, #40	; 0x28
 80175aa:	d12d      	bne.n	8017608 <_strtod_l+0x380>
 80175ac:	4991      	ldr	r1, [pc, #580]	; (80177f4 <_strtod_l+0x56c>)
 80175ae:	aa14      	add	r2, sp, #80	; 0x50
 80175b0:	a811      	add	r0, sp, #68	; 0x44
 80175b2:	f001 ff21 	bl	80193f8 <__hexnan>
 80175b6:	2805      	cmp	r0, #5
 80175b8:	d126      	bne.n	8017608 <_strtod_l+0x380>
 80175ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175bc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80175c0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80175c4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80175c8:	e6a2      	b.n	8017310 <_strtod_l+0x88>
 80175ca:	250a      	movs	r5, #10
 80175cc:	fb05 250c 	mla	r5, r5, ip, r2
 80175d0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80175d4:	e7b9      	b.n	801754a <_strtod_l+0x2c2>
 80175d6:	2a6e      	cmp	r2, #110	; 0x6e
 80175d8:	e7db      	b.n	8017592 <_strtod_l+0x30a>
 80175da:	4987      	ldr	r1, [pc, #540]	; (80177f8 <_strtod_l+0x570>)
 80175dc:	a811      	add	r0, sp, #68	; 0x44
 80175de:	f001 fef7 	bl	80193d0 <__match>
 80175e2:	2800      	cmp	r0, #0
 80175e4:	f43f aeb1 	beq.w	801734a <_strtod_l+0xc2>
 80175e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175ea:	4984      	ldr	r1, [pc, #528]	; (80177fc <_strtod_l+0x574>)
 80175ec:	3b01      	subs	r3, #1
 80175ee:	a811      	add	r0, sp, #68	; 0x44
 80175f0:	9311      	str	r3, [sp, #68]	; 0x44
 80175f2:	f001 feed 	bl	80193d0 <__match>
 80175f6:	b910      	cbnz	r0, 80175fe <_strtod_l+0x376>
 80175f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175fa:	3301      	adds	r3, #1
 80175fc:	9311      	str	r3, [sp, #68]	; 0x44
 80175fe:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8017810 <_strtod_l+0x588>
 8017602:	f04f 0800 	mov.w	r8, #0
 8017606:	e683      	b.n	8017310 <_strtod_l+0x88>
 8017608:	487d      	ldr	r0, [pc, #500]	; (8017800 <_strtod_l+0x578>)
 801760a:	f002 fe5d 	bl	801a2c8 <nan>
 801760e:	ec59 8b10 	vmov	r8, r9, d0
 8017612:	e67d      	b.n	8017310 <_strtod_l+0x88>
 8017614:	1bea      	subs	r2, r5, r7
 8017616:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801761a:	9207      	str	r2, [sp, #28]
 801761c:	9a06      	ldr	r2, [sp, #24]
 801761e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017622:	2a00      	cmp	r2, #0
 8017624:	bf08      	it	eq
 8017626:	461a      	moveq	r2, r3
 8017628:	2b10      	cmp	r3, #16
 801762a:	9206      	str	r2, [sp, #24]
 801762c:	461a      	mov	r2, r3
 801762e:	bfa8      	it	ge
 8017630:	2210      	movge	r2, #16
 8017632:	2b09      	cmp	r3, #9
 8017634:	ec59 8b17 	vmov	r8, r9, d7
 8017638:	dd0c      	ble.n	8017654 <_strtod_l+0x3cc>
 801763a:	4972      	ldr	r1, [pc, #456]	; (8017804 <_strtod_l+0x57c>)
 801763c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017640:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8017644:	ee06 aa90 	vmov	s13, sl
 8017648:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801764c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017650:	ec59 8b16 	vmov	r8, r9, d6
 8017654:	2b0f      	cmp	r3, #15
 8017656:	dc36      	bgt.n	80176c6 <_strtod_l+0x43e>
 8017658:	9907      	ldr	r1, [sp, #28]
 801765a:	2900      	cmp	r1, #0
 801765c:	f43f ae58 	beq.w	8017310 <_strtod_l+0x88>
 8017660:	dd23      	ble.n	80176aa <_strtod_l+0x422>
 8017662:	2916      	cmp	r1, #22
 8017664:	dc0b      	bgt.n	801767e <_strtod_l+0x3f6>
 8017666:	4b67      	ldr	r3, [pc, #412]	; (8017804 <_strtod_l+0x57c>)
 8017668:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801766c:	ed93 7b00 	vldr	d7, [r3]
 8017670:	ec49 8b16 	vmov	d6, r8, r9
 8017674:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017678:	ec59 8b17 	vmov	r8, r9, d7
 801767c:	e648      	b.n	8017310 <_strtod_l+0x88>
 801767e:	9807      	ldr	r0, [sp, #28]
 8017680:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8017684:	4281      	cmp	r1, r0
 8017686:	db1e      	blt.n	80176c6 <_strtod_l+0x43e>
 8017688:	4a5e      	ldr	r2, [pc, #376]	; (8017804 <_strtod_l+0x57c>)
 801768a:	f1c3 030f 	rsb	r3, r3, #15
 801768e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017692:	ed91 7b00 	vldr	d7, [r1]
 8017696:	ec49 8b16 	vmov	d6, r8, r9
 801769a:	1ac3      	subs	r3, r0, r3
 801769c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80176a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80176a4:	ed92 6b00 	vldr	d6, [r2]
 80176a8:	e7e4      	b.n	8017674 <_strtod_l+0x3ec>
 80176aa:	9907      	ldr	r1, [sp, #28]
 80176ac:	3116      	adds	r1, #22
 80176ae:	db0a      	blt.n	80176c6 <_strtod_l+0x43e>
 80176b0:	4b54      	ldr	r3, [pc, #336]	; (8017804 <_strtod_l+0x57c>)
 80176b2:	1b7d      	subs	r5, r7, r5
 80176b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80176b8:	ed95 7b00 	vldr	d7, [r5]
 80176bc:	ec49 8b16 	vmov	d6, r8, r9
 80176c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80176c4:	e7d8      	b.n	8017678 <_strtod_l+0x3f0>
 80176c6:	9907      	ldr	r1, [sp, #28]
 80176c8:	1a9a      	subs	r2, r3, r2
 80176ca:	440a      	add	r2, r1
 80176cc:	2a00      	cmp	r2, #0
 80176ce:	dd6f      	ble.n	80177b0 <_strtod_l+0x528>
 80176d0:	f012 000f 	ands.w	r0, r2, #15
 80176d4:	d00a      	beq.n	80176ec <_strtod_l+0x464>
 80176d6:	494b      	ldr	r1, [pc, #300]	; (8017804 <_strtod_l+0x57c>)
 80176d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80176dc:	ed91 7b00 	vldr	d7, [r1]
 80176e0:	ec49 8b16 	vmov	d6, r8, r9
 80176e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80176e8:	ec59 8b17 	vmov	r8, r9, d7
 80176ec:	f032 020f 	bics.w	r2, r2, #15
 80176f0:	d04f      	beq.n	8017792 <_strtod_l+0x50a>
 80176f2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80176f6:	dd22      	ble.n	801773e <_strtod_l+0x4b6>
 80176f8:	2500      	movs	r5, #0
 80176fa:	462e      	mov	r6, r5
 80176fc:	9506      	str	r5, [sp, #24]
 80176fe:	462f      	mov	r7, r5
 8017700:	2322      	movs	r3, #34	; 0x22
 8017702:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8017810 <_strtod_l+0x588>
 8017706:	6023      	str	r3, [r4, #0]
 8017708:	f04f 0800 	mov.w	r8, #0
 801770c:	9b06      	ldr	r3, [sp, #24]
 801770e:	2b00      	cmp	r3, #0
 8017710:	f43f adfe 	beq.w	8017310 <_strtod_l+0x88>
 8017714:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017716:	4620      	mov	r0, r4
 8017718:	f001 ff86 	bl	8019628 <_Bfree>
 801771c:	4639      	mov	r1, r7
 801771e:	4620      	mov	r0, r4
 8017720:	f001 ff82 	bl	8019628 <_Bfree>
 8017724:	4631      	mov	r1, r6
 8017726:	4620      	mov	r0, r4
 8017728:	f001 ff7e 	bl	8019628 <_Bfree>
 801772c:	9906      	ldr	r1, [sp, #24]
 801772e:	4620      	mov	r0, r4
 8017730:	f001 ff7a 	bl	8019628 <_Bfree>
 8017734:	4629      	mov	r1, r5
 8017736:	4620      	mov	r0, r4
 8017738:	f001 ff76 	bl	8019628 <_Bfree>
 801773c:	e5e8      	b.n	8017310 <_strtod_l+0x88>
 801773e:	2000      	movs	r0, #0
 8017740:	ec49 8b17 	vmov	d7, r8, r9
 8017744:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8017808 <_strtod_l+0x580>
 8017748:	1112      	asrs	r2, r2, #4
 801774a:	4601      	mov	r1, r0
 801774c:	2a01      	cmp	r2, #1
 801774e:	dc23      	bgt.n	8017798 <_strtod_l+0x510>
 8017750:	b108      	cbz	r0, 8017756 <_strtod_l+0x4ce>
 8017752:	ec59 8b17 	vmov	r8, r9, d7
 8017756:	4a2c      	ldr	r2, [pc, #176]	; (8017808 <_strtod_l+0x580>)
 8017758:	482c      	ldr	r0, [pc, #176]	; (801780c <_strtod_l+0x584>)
 801775a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801775e:	ed92 7b00 	vldr	d7, [r2]
 8017762:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017766:	ec49 8b16 	vmov	d6, r8, r9
 801776a:	4a29      	ldr	r2, [pc, #164]	; (8017810 <_strtod_l+0x588>)
 801776c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017770:	ee17 1a90 	vmov	r1, s15
 8017774:	400a      	ands	r2, r1
 8017776:	4282      	cmp	r2, r0
 8017778:	ec59 8b17 	vmov	r8, r9, d7
 801777c:	d8bc      	bhi.n	80176f8 <_strtod_l+0x470>
 801777e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8017782:	4282      	cmp	r2, r0
 8017784:	bf86      	itte	hi
 8017786:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8017814 <_strtod_l+0x58c>
 801778a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801778e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8017792:	2200      	movs	r2, #0
 8017794:	9204      	str	r2, [sp, #16]
 8017796:	e078      	b.n	801788a <_strtod_l+0x602>
 8017798:	07d6      	lsls	r6, r2, #31
 801779a:	d504      	bpl.n	80177a6 <_strtod_l+0x51e>
 801779c:	ed9c 6b00 	vldr	d6, [ip]
 80177a0:	2001      	movs	r0, #1
 80177a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80177a6:	3101      	adds	r1, #1
 80177a8:	1052      	asrs	r2, r2, #1
 80177aa:	f10c 0c08 	add.w	ip, ip, #8
 80177ae:	e7cd      	b.n	801774c <_strtod_l+0x4c4>
 80177b0:	d0ef      	beq.n	8017792 <_strtod_l+0x50a>
 80177b2:	4252      	negs	r2, r2
 80177b4:	f012 000f 	ands.w	r0, r2, #15
 80177b8:	d00a      	beq.n	80177d0 <_strtod_l+0x548>
 80177ba:	4912      	ldr	r1, [pc, #72]	; (8017804 <_strtod_l+0x57c>)
 80177bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80177c0:	ed91 7b00 	vldr	d7, [r1]
 80177c4:	ec49 8b16 	vmov	d6, r8, r9
 80177c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80177cc:	ec59 8b17 	vmov	r8, r9, d7
 80177d0:	1112      	asrs	r2, r2, #4
 80177d2:	d0de      	beq.n	8017792 <_strtod_l+0x50a>
 80177d4:	2a1f      	cmp	r2, #31
 80177d6:	dd1f      	ble.n	8017818 <_strtod_l+0x590>
 80177d8:	2500      	movs	r5, #0
 80177da:	462e      	mov	r6, r5
 80177dc:	9506      	str	r5, [sp, #24]
 80177de:	462f      	mov	r7, r5
 80177e0:	2322      	movs	r3, #34	; 0x22
 80177e2:	f04f 0800 	mov.w	r8, #0
 80177e6:	f04f 0900 	mov.w	r9, #0
 80177ea:	6023      	str	r3, [r4, #0]
 80177ec:	e78e      	b.n	801770c <_strtod_l+0x484>
 80177ee:	bf00      	nop
 80177f0:	0801e11d 	.word	0x0801e11d
 80177f4:	0801e160 	.word	0x0801e160
 80177f8:	0801e115 	.word	0x0801e115
 80177fc:	0801e2a4 	.word	0x0801e2a4
 8017800:	0801d5f4 	.word	0x0801d5f4
 8017804:	0801e430 	.word	0x0801e430
 8017808:	0801e408 	.word	0x0801e408
 801780c:	7ca00000 	.word	0x7ca00000
 8017810:	7ff00000 	.word	0x7ff00000
 8017814:	7fefffff 	.word	0x7fefffff
 8017818:	f012 0110 	ands.w	r1, r2, #16
 801781c:	bf18      	it	ne
 801781e:	216a      	movne	r1, #106	; 0x6a
 8017820:	9104      	str	r1, [sp, #16]
 8017822:	ec49 8b17 	vmov	d7, r8, r9
 8017826:	49be      	ldr	r1, [pc, #760]	; (8017b20 <_strtod_l+0x898>)
 8017828:	2000      	movs	r0, #0
 801782a:	07d6      	lsls	r6, r2, #31
 801782c:	d504      	bpl.n	8017838 <_strtod_l+0x5b0>
 801782e:	ed91 6b00 	vldr	d6, [r1]
 8017832:	2001      	movs	r0, #1
 8017834:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017838:	1052      	asrs	r2, r2, #1
 801783a:	f101 0108 	add.w	r1, r1, #8
 801783e:	d1f4      	bne.n	801782a <_strtod_l+0x5a2>
 8017840:	b108      	cbz	r0, 8017846 <_strtod_l+0x5be>
 8017842:	ec59 8b17 	vmov	r8, r9, d7
 8017846:	9a04      	ldr	r2, [sp, #16]
 8017848:	b1c2      	cbz	r2, 801787c <_strtod_l+0x5f4>
 801784a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801784e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8017852:	2a00      	cmp	r2, #0
 8017854:	4648      	mov	r0, r9
 8017856:	dd11      	ble.n	801787c <_strtod_l+0x5f4>
 8017858:	2a1f      	cmp	r2, #31
 801785a:	f340 812e 	ble.w	8017aba <_strtod_l+0x832>
 801785e:	2a34      	cmp	r2, #52	; 0x34
 8017860:	bfde      	ittt	le
 8017862:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8017866:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801786a:	fa02 f101 	lslle.w	r1, r2, r1
 801786e:	f04f 0800 	mov.w	r8, #0
 8017872:	bfcc      	ite	gt
 8017874:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017878:	ea01 0900 	andle.w	r9, r1, r0
 801787c:	ec49 8b17 	vmov	d7, r8, r9
 8017880:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017888:	d0a6      	beq.n	80177d8 <_strtod_l+0x550>
 801788a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801788c:	9200      	str	r2, [sp, #0]
 801788e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017890:	9a06      	ldr	r2, [sp, #24]
 8017892:	4620      	mov	r0, r4
 8017894:	f001 ff30 	bl	80196f8 <__s2b>
 8017898:	9006      	str	r0, [sp, #24]
 801789a:	2800      	cmp	r0, #0
 801789c:	f43f af2c 	beq.w	80176f8 <_strtod_l+0x470>
 80178a0:	9b07      	ldr	r3, [sp, #28]
 80178a2:	1b7d      	subs	r5, r7, r5
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	bfb4      	ite	lt
 80178a8:	462b      	movlt	r3, r5
 80178aa:	2300      	movge	r3, #0
 80178ac:	9309      	str	r3, [sp, #36]	; 0x24
 80178ae:	9b07      	ldr	r3, [sp, #28]
 80178b0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8017b00 <_strtod_l+0x878>
 80178b4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8017b08 <_strtod_l+0x880>
 80178b8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8017b10 <_strtod_l+0x888>
 80178bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80178c0:	2500      	movs	r5, #0
 80178c2:	930c      	str	r3, [sp, #48]	; 0x30
 80178c4:	462e      	mov	r6, r5
 80178c6:	9b06      	ldr	r3, [sp, #24]
 80178c8:	4620      	mov	r0, r4
 80178ca:	6859      	ldr	r1, [r3, #4]
 80178cc:	f001 fe6c 	bl	80195a8 <_Balloc>
 80178d0:	4607      	mov	r7, r0
 80178d2:	2800      	cmp	r0, #0
 80178d4:	f43f af14 	beq.w	8017700 <_strtod_l+0x478>
 80178d8:	9b06      	ldr	r3, [sp, #24]
 80178da:	691a      	ldr	r2, [r3, #16]
 80178dc:	3202      	adds	r2, #2
 80178de:	f103 010c 	add.w	r1, r3, #12
 80178e2:	0092      	lsls	r2, r2, #2
 80178e4:	300c      	adds	r0, #12
 80178e6:	f7fe fc2b 	bl	8016140 <memcpy>
 80178ea:	ec49 8b10 	vmov	d0, r8, r9
 80178ee:	aa14      	add	r2, sp, #80	; 0x50
 80178f0:	a913      	add	r1, sp, #76	; 0x4c
 80178f2:	4620      	mov	r0, r4
 80178f4:	f002 fa46 	bl	8019d84 <__d2b>
 80178f8:	ec49 8b18 	vmov	d8, r8, r9
 80178fc:	9012      	str	r0, [sp, #72]	; 0x48
 80178fe:	2800      	cmp	r0, #0
 8017900:	f43f aefe 	beq.w	8017700 <_strtod_l+0x478>
 8017904:	2101      	movs	r1, #1
 8017906:	4620      	mov	r0, r4
 8017908:	f001 ff90 	bl	801982c <__i2b>
 801790c:	4606      	mov	r6, r0
 801790e:	2800      	cmp	r0, #0
 8017910:	f43f aef6 	beq.w	8017700 <_strtod_l+0x478>
 8017914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017916:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017918:	2b00      	cmp	r3, #0
 801791a:	bfab      	itete	ge
 801791c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801791e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8017920:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8017924:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8017928:	bfac      	ite	ge
 801792a:	eb03 0b02 	addge.w	fp, r3, r2
 801792e:	eba2 0a03 	sublt.w	sl, r2, r3
 8017932:	9a04      	ldr	r2, [sp, #16]
 8017934:	1a9b      	subs	r3, r3, r2
 8017936:	440b      	add	r3, r1
 8017938:	4a7a      	ldr	r2, [pc, #488]	; (8017b24 <_strtod_l+0x89c>)
 801793a:	3b01      	subs	r3, #1
 801793c:	4293      	cmp	r3, r2
 801793e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8017942:	f280 80cd 	bge.w	8017ae0 <_strtod_l+0x858>
 8017946:	1ad2      	subs	r2, r2, r3
 8017948:	2a1f      	cmp	r2, #31
 801794a:	eba1 0102 	sub.w	r1, r1, r2
 801794e:	f04f 0001 	mov.w	r0, #1
 8017952:	f300 80b9 	bgt.w	8017ac8 <_strtod_l+0x840>
 8017956:	fa00 f302 	lsl.w	r3, r0, r2
 801795a:	930b      	str	r3, [sp, #44]	; 0x2c
 801795c:	2300      	movs	r3, #0
 801795e:	930a      	str	r3, [sp, #40]	; 0x28
 8017960:	eb0b 0301 	add.w	r3, fp, r1
 8017964:	9a04      	ldr	r2, [sp, #16]
 8017966:	459b      	cmp	fp, r3
 8017968:	448a      	add	sl, r1
 801796a:	4492      	add	sl, r2
 801796c:	465a      	mov	r2, fp
 801796e:	bfa8      	it	ge
 8017970:	461a      	movge	r2, r3
 8017972:	4552      	cmp	r2, sl
 8017974:	bfa8      	it	ge
 8017976:	4652      	movge	r2, sl
 8017978:	2a00      	cmp	r2, #0
 801797a:	bfc2      	ittt	gt
 801797c:	1a9b      	subgt	r3, r3, r2
 801797e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8017982:	ebab 0b02 	subgt.w	fp, fp, r2
 8017986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017988:	2a00      	cmp	r2, #0
 801798a:	dd18      	ble.n	80179be <_strtod_l+0x736>
 801798c:	4631      	mov	r1, r6
 801798e:	4620      	mov	r0, r4
 8017990:	930f      	str	r3, [sp, #60]	; 0x3c
 8017992:	f002 f80b 	bl	80199ac <__pow5mult>
 8017996:	4606      	mov	r6, r0
 8017998:	2800      	cmp	r0, #0
 801799a:	f43f aeb1 	beq.w	8017700 <_strtod_l+0x478>
 801799e:	4601      	mov	r1, r0
 80179a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80179a2:	4620      	mov	r0, r4
 80179a4:	f001 ff58 	bl	8019858 <__multiply>
 80179a8:	900e      	str	r0, [sp, #56]	; 0x38
 80179aa:	2800      	cmp	r0, #0
 80179ac:	f43f aea8 	beq.w	8017700 <_strtod_l+0x478>
 80179b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80179b2:	4620      	mov	r0, r4
 80179b4:	f001 fe38 	bl	8019628 <_Bfree>
 80179b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179bc:	9212      	str	r2, [sp, #72]	; 0x48
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f300 8093 	bgt.w	8017aea <_strtod_l+0x862>
 80179c4:	9b07      	ldr	r3, [sp, #28]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	dd08      	ble.n	80179dc <_strtod_l+0x754>
 80179ca:	4639      	mov	r1, r7
 80179cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80179ce:	4620      	mov	r0, r4
 80179d0:	f001 ffec 	bl	80199ac <__pow5mult>
 80179d4:	4607      	mov	r7, r0
 80179d6:	2800      	cmp	r0, #0
 80179d8:	f43f ae92 	beq.w	8017700 <_strtod_l+0x478>
 80179dc:	f1ba 0f00 	cmp.w	sl, #0
 80179e0:	dd08      	ble.n	80179f4 <_strtod_l+0x76c>
 80179e2:	4639      	mov	r1, r7
 80179e4:	4652      	mov	r2, sl
 80179e6:	4620      	mov	r0, r4
 80179e8:	f002 f83a 	bl	8019a60 <__lshift>
 80179ec:	4607      	mov	r7, r0
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f43f ae86 	beq.w	8017700 <_strtod_l+0x478>
 80179f4:	f1bb 0f00 	cmp.w	fp, #0
 80179f8:	dd08      	ble.n	8017a0c <_strtod_l+0x784>
 80179fa:	4631      	mov	r1, r6
 80179fc:	465a      	mov	r2, fp
 80179fe:	4620      	mov	r0, r4
 8017a00:	f002 f82e 	bl	8019a60 <__lshift>
 8017a04:	4606      	mov	r6, r0
 8017a06:	2800      	cmp	r0, #0
 8017a08:	f43f ae7a 	beq.w	8017700 <_strtod_l+0x478>
 8017a0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017a0e:	463a      	mov	r2, r7
 8017a10:	4620      	mov	r0, r4
 8017a12:	f002 f8b1 	bl	8019b78 <__mdiff>
 8017a16:	4605      	mov	r5, r0
 8017a18:	2800      	cmp	r0, #0
 8017a1a:	f43f ae71 	beq.w	8017700 <_strtod_l+0x478>
 8017a1e:	2300      	movs	r3, #0
 8017a20:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8017a24:	60c3      	str	r3, [r0, #12]
 8017a26:	4631      	mov	r1, r6
 8017a28:	f002 f88a 	bl	8019b40 <__mcmp>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	da7d      	bge.n	8017b2c <_strtod_l+0x8a4>
 8017a30:	ea5a 0308 	orrs.w	r3, sl, r8
 8017a34:	f040 80a3 	bne.w	8017b7e <_strtod_l+0x8f6>
 8017a38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	f040 809e 	bne.w	8017b7e <_strtod_l+0x8f6>
 8017a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017a46:	0d1b      	lsrs	r3, r3, #20
 8017a48:	051b      	lsls	r3, r3, #20
 8017a4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017a4e:	f240 8096 	bls.w	8017b7e <_strtod_l+0x8f6>
 8017a52:	696b      	ldr	r3, [r5, #20]
 8017a54:	b91b      	cbnz	r3, 8017a5e <_strtod_l+0x7d6>
 8017a56:	692b      	ldr	r3, [r5, #16]
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	f340 8090 	ble.w	8017b7e <_strtod_l+0x8f6>
 8017a5e:	4629      	mov	r1, r5
 8017a60:	2201      	movs	r2, #1
 8017a62:	4620      	mov	r0, r4
 8017a64:	f001 fffc 	bl	8019a60 <__lshift>
 8017a68:	4631      	mov	r1, r6
 8017a6a:	4605      	mov	r5, r0
 8017a6c:	f002 f868 	bl	8019b40 <__mcmp>
 8017a70:	2800      	cmp	r0, #0
 8017a72:	f340 8084 	ble.w	8017b7e <_strtod_l+0x8f6>
 8017a76:	9904      	ldr	r1, [sp, #16]
 8017a78:	4a2b      	ldr	r2, [pc, #172]	; (8017b28 <_strtod_l+0x8a0>)
 8017a7a:	464b      	mov	r3, r9
 8017a7c:	2900      	cmp	r1, #0
 8017a7e:	f000 809d 	beq.w	8017bbc <_strtod_l+0x934>
 8017a82:	ea02 0109 	and.w	r1, r2, r9
 8017a86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017a8a:	f300 8097 	bgt.w	8017bbc <_strtod_l+0x934>
 8017a8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017a92:	f77f aea5 	ble.w	80177e0 <_strtod_l+0x558>
 8017a96:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017b18 <_strtod_l+0x890>
 8017a9a:	ec49 8b16 	vmov	d6, r8, r9
 8017a9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017aa2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017aa6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017aaa:	4313      	orrs	r3, r2
 8017aac:	bf08      	it	eq
 8017aae:	2322      	moveq	r3, #34	; 0x22
 8017ab0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8017ab4:	bf08      	it	eq
 8017ab6:	6023      	streq	r3, [r4, #0]
 8017ab8:	e62c      	b.n	8017714 <_strtod_l+0x48c>
 8017aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017abe:	fa01 f202 	lsl.w	r2, r1, r2
 8017ac2:	ea02 0808 	and.w	r8, r2, r8
 8017ac6:	e6d9      	b.n	801787c <_strtod_l+0x5f4>
 8017ac8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017acc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017ad0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8017ad4:	33e2      	adds	r3, #226	; 0xe2
 8017ad6:	fa00 f303 	lsl.w	r3, r0, r3
 8017ada:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8017ade:	e73f      	b.n	8017960 <_strtod_l+0x6d8>
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ae8:	e73a      	b.n	8017960 <_strtod_l+0x6d8>
 8017aea:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017aec:	461a      	mov	r2, r3
 8017aee:	4620      	mov	r0, r4
 8017af0:	f001 ffb6 	bl	8019a60 <__lshift>
 8017af4:	9012      	str	r0, [sp, #72]	; 0x48
 8017af6:	2800      	cmp	r0, #0
 8017af8:	f47f af64 	bne.w	80179c4 <_strtod_l+0x73c>
 8017afc:	e600      	b.n	8017700 <_strtod_l+0x478>
 8017afe:	bf00      	nop
 8017b00:	94a03595 	.word	0x94a03595
 8017b04:	3fcfffff 	.word	0x3fcfffff
 8017b08:	94a03595 	.word	0x94a03595
 8017b0c:	3fdfffff 	.word	0x3fdfffff
 8017b10:	35afe535 	.word	0x35afe535
 8017b14:	3fe00000 	.word	0x3fe00000
 8017b18:	00000000 	.word	0x00000000
 8017b1c:	39500000 	.word	0x39500000
 8017b20:	0801e178 	.word	0x0801e178
 8017b24:	fffffc02 	.word	0xfffffc02
 8017b28:	7ff00000 	.word	0x7ff00000
 8017b2c:	46cb      	mov	fp, r9
 8017b2e:	d15f      	bne.n	8017bf0 <_strtod_l+0x968>
 8017b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017b34:	f1ba 0f00 	cmp.w	sl, #0
 8017b38:	d02a      	beq.n	8017b90 <_strtod_l+0x908>
 8017b3a:	4aa7      	ldr	r2, [pc, #668]	; (8017dd8 <_strtod_l+0xb50>)
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d12b      	bne.n	8017b98 <_strtod_l+0x910>
 8017b40:	9b04      	ldr	r3, [sp, #16]
 8017b42:	4642      	mov	r2, r8
 8017b44:	b1fb      	cbz	r3, 8017b86 <_strtod_l+0x8fe>
 8017b46:	4ba5      	ldr	r3, [pc, #660]	; (8017ddc <_strtod_l+0xb54>)
 8017b48:	ea09 0303 	and.w	r3, r9, r3
 8017b4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017b54:	d81a      	bhi.n	8017b8c <_strtod_l+0x904>
 8017b56:	0d1b      	lsrs	r3, r3, #20
 8017b58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8017b60:	429a      	cmp	r2, r3
 8017b62:	d119      	bne.n	8017b98 <_strtod_l+0x910>
 8017b64:	4b9e      	ldr	r3, [pc, #632]	; (8017de0 <_strtod_l+0xb58>)
 8017b66:	459b      	cmp	fp, r3
 8017b68:	d102      	bne.n	8017b70 <_strtod_l+0x8e8>
 8017b6a:	3201      	adds	r2, #1
 8017b6c:	f43f adc8 	beq.w	8017700 <_strtod_l+0x478>
 8017b70:	4b9a      	ldr	r3, [pc, #616]	; (8017ddc <_strtod_l+0xb54>)
 8017b72:	ea0b 0303 	and.w	r3, fp, r3
 8017b76:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017b7a:	f04f 0800 	mov.w	r8, #0
 8017b7e:	9b04      	ldr	r3, [sp, #16]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d188      	bne.n	8017a96 <_strtod_l+0x80e>
 8017b84:	e5c6      	b.n	8017714 <_strtod_l+0x48c>
 8017b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b8a:	e7e9      	b.n	8017b60 <_strtod_l+0x8d8>
 8017b8c:	460b      	mov	r3, r1
 8017b8e:	e7e7      	b.n	8017b60 <_strtod_l+0x8d8>
 8017b90:	ea53 0308 	orrs.w	r3, r3, r8
 8017b94:	f43f af6f 	beq.w	8017a76 <_strtod_l+0x7ee>
 8017b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b9a:	b1cb      	cbz	r3, 8017bd0 <_strtod_l+0x948>
 8017b9c:	ea13 0f0b 	tst.w	r3, fp
 8017ba0:	d0ed      	beq.n	8017b7e <_strtod_l+0x8f6>
 8017ba2:	9a04      	ldr	r2, [sp, #16]
 8017ba4:	4640      	mov	r0, r8
 8017ba6:	4649      	mov	r1, r9
 8017ba8:	f1ba 0f00 	cmp.w	sl, #0
 8017bac:	d014      	beq.n	8017bd8 <_strtod_l+0x950>
 8017bae:	f7ff fb50 	bl	8017252 <sulp>
 8017bb2:	ee38 7b00 	vadd.f64	d7, d8, d0
 8017bb6:	ec59 8b17 	vmov	r8, r9, d7
 8017bba:	e7e0      	b.n	8017b7e <_strtod_l+0x8f6>
 8017bbc:	4013      	ands	r3, r2
 8017bbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017bc2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8017bc6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017bca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017bce:	e7d6      	b.n	8017b7e <_strtod_l+0x8f6>
 8017bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bd2:	ea13 0f08 	tst.w	r3, r8
 8017bd6:	e7e3      	b.n	8017ba0 <_strtod_l+0x918>
 8017bd8:	f7ff fb3b 	bl	8017252 <sulp>
 8017bdc:	ee38 0b40 	vsub.f64	d0, d8, d0
 8017be0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017be8:	ec59 8b10 	vmov	r8, r9, d0
 8017bec:	d1c7      	bne.n	8017b7e <_strtod_l+0x8f6>
 8017bee:	e5f7      	b.n	80177e0 <_strtod_l+0x558>
 8017bf0:	4631      	mov	r1, r6
 8017bf2:	4628      	mov	r0, r5
 8017bf4:	f002 f922 	bl	8019e3c <__ratio>
 8017bf8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8017bfc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c04:	d865      	bhi.n	8017cd2 <_strtod_l+0xa4a>
 8017c06:	f1ba 0f00 	cmp.w	sl, #0
 8017c0a:	d042      	beq.n	8017c92 <_strtod_l+0xa0a>
 8017c0c:	4b75      	ldr	r3, [pc, #468]	; (8017de4 <_strtod_l+0xb5c>)
 8017c0e:	2200      	movs	r2, #0
 8017c10:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8017c14:	4871      	ldr	r0, [pc, #452]	; (8017ddc <_strtod_l+0xb54>)
 8017c16:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8017df0 <_strtod_l+0xb68>
 8017c1a:	ea0b 0100 	and.w	r1, fp, r0
 8017c1e:	4561      	cmp	r1, ip
 8017c20:	f040 808e 	bne.w	8017d40 <_strtod_l+0xab8>
 8017c24:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8017c28:	ec49 8b10 	vmov	d0, r8, r9
 8017c2c:	ec43 2b1c 	vmov	d12, r2, r3
 8017c30:	910a      	str	r1, [sp, #40]	; 0x28
 8017c32:	f002 f82b 	bl	8019c8c <__ulp>
 8017c36:	ec49 8b1e 	vmov	d14, r8, r9
 8017c3a:	4868      	ldr	r0, [pc, #416]	; (8017ddc <_strtod_l+0xb54>)
 8017c3c:	eeac eb00 	vfma.f64	d14, d12, d0
 8017c40:	ee1e 3a90 	vmov	r3, s29
 8017c44:	4a68      	ldr	r2, [pc, #416]	; (8017de8 <_strtod_l+0xb60>)
 8017c46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017c48:	4018      	ands	r0, r3
 8017c4a:	4290      	cmp	r0, r2
 8017c4c:	ec59 8b1e 	vmov	r8, r9, d14
 8017c50:	d94e      	bls.n	8017cf0 <_strtod_l+0xa68>
 8017c52:	ee18 3a90 	vmov	r3, s17
 8017c56:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017c5a:	4293      	cmp	r3, r2
 8017c5c:	d104      	bne.n	8017c68 <_strtod_l+0x9e0>
 8017c5e:	ee18 3a10 	vmov	r3, s16
 8017c62:	3301      	adds	r3, #1
 8017c64:	f43f ad4c 	beq.w	8017700 <_strtod_l+0x478>
 8017c68:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8017de0 <_strtod_l+0xb58>
 8017c6c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017c70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017c72:	4620      	mov	r0, r4
 8017c74:	f001 fcd8 	bl	8019628 <_Bfree>
 8017c78:	4639      	mov	r1, r7
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	f001 fcd4 	bl	8019628 <_Bfree>
 8017c80:	4631      	mov	r1, r6
 8017c82:	4620      	mov	r0, r4
 8017c84:	f001 fcd0 	bl	8019628 <_Bfree>
 8017c88:	4629      	mov	r1, r5
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	f001 fccc 	bl	8019628 <_Bfree>
 8017c90:	e619      	b.n	80178c6 <_strtod_l+0x63e>
 8017c92:	f1b8 0f00 	cmp.w	r8, #0
 8017c96:	d112      	bne.n	8017cbe <_strtod_l+0xa36>
 8017c98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017c9c:	b9b3      	cbnz	r3, 8017ccc <_strtod_l+0xa44>
 8017c9e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8017ca2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017caa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017cae:	bf58      	it	pl
 8017cb0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8017cb4:	eeb1 7b4d 	vneg.f64	d7, d13
 8017cb8:	ec53 2b17 	vmov	r2, r3, d7
 8017cbc:	e7aa      	b.n	8017c14 <_strtod_l+0x98c>
 8017cbe:	f1b8 0f01 	cmp.w	r8, #1
 8017cc2:	d103      	bne.n	8017ccc <_strtod_l+0xa44>
 8017cc4:	f1b9 0f00 	cmp.w	r9, #0
 8017cc8:	f43f ad8a 	beq.w	80177e0 <_strtod_l+0x558>
 8017ccc:	4b47      	ldr	r3, [pc, #284]	; (8017dec <_strtod_l+0xb64>)
 8017cce:	2200      	movs	r2, #0
 8017cd0:	e79e      	b.n	8017c10 <_strtod_l+0x988>
 8017cd2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017cd6:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017cda:	f1ba 0f00 	cmp.w	sl, #0
 8017cde:	d104      	bne.n	8017cea <_strtod_l+0xa62>
 8017ce0:	eeb1 7b4d 	vneg.f64	d7, d13
 8017ce4:	ec53 2b17 	vmov	r2, r3, d7
 8017ce8:	e794      	b.n	8017c14 <_strtod_l+0x98c>
 8017cea:	eeb0 7b4d 	vmov.f64	d7, d13
 8017cee:	e7f9      	b.n	8017ce4 <_strtod_l+0xa5c>
 8017cf0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017cf4:	9b04      	ldr	r3, [sp, #16]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d1ba      	bne.n	8017c70 <_strtod_l+0x9e8>
 8017cfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017cfe:	0d1b      	lsrs	r3, r3, #20
 8017d00:	051b      	lsls	r3, r3, #20
 8017d02:	4299      	cmp	r1, r3
 8017d04:	d1b4      	bne.n	8017c70 <_strtod_l+0x9e8>
 8017d06:	ec51 0b1d 	vmov	r0, r1, d13
 8017d0a:	f7e8 fd25 	bl	8000758 <__aeabi_d2lz>
 8017d0e:	f7e8 fcdd 	bl	80006cc <__aeabi_l2d>
 8017d12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d16:	ec41 0b17 	vmov	d7, r0, r1
 8017d1a:	ea43 0308 	orr.w	r3, r3, r8
 8017d1e:	ea53 030a 	orrs.w	r3, r3, sl
 8017d22:	ee3d db47 	vsub.f64	d13, d13, d7
 8017d26:	d03c      	beq.n	8017da2 <_strtod_l+0xb1a>
 8017d28:	eeb4 dbca 	vcmpe.f64	d13, d10
 8017d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d30:	f53f acf0 	bmi.w	8017714 <_strtod_l+0x48c>
 8017d34:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8017d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d3c:	dd98      	ble.n	8017c70 <_strtod_l+0x9e8>
 8017d3e:	e4e9      	b.n	8017714 <_strtod_l+0x48c>
 8017d40:	9804      	ldr	r0, [sp, #16]
 8017d42:	b1f0      	cbz	r0, 8017d82 <_strtod_l+0xafa>
 8017d44:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017d48:	d81b      	bhi.n	8017d82 <_strtod_l+0xafa>
 8017d4a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017dd0 <_strtod_l+0xb48>
 8017d4e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8017d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d56:	d811      	bhi.n	8017d7c <_strtod_l+0xaf4>
 8017d58:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8017d5c:	ee1d 3a10 	vmov	r3, s26
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	bf38      	it	cc
 8017d64:	2301      	movcc	r3, #1
 8017d66:	ee0d 3a10 	vmov	s26, r3
 8017d6a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8017d6e:	f1ba 0f00 	cmp.w	sl, #0
 8017d72:	d113      	bne.n	8017d9c <_strtod_l+0xb14>
 8017d74:	eeb1 7b4d 	vneg.f64	d7, d13
 8017d78:	ec53 2b17 	vmov	r2, r3, d7
 8017d7c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8017d80:	1a43      	subs	r3, r0, r1
 8017d82:	eeb0 0b48 	vmov.f64	d0, d8
 8017d86:	ec43 2b1c 	vmov	d12, r2, r3
 8017d8a:	910a      	str	r1, [sp, #40]	; 0x28
 8017d8c:	f001 ff7e 	bl	8019c8c <__ulp>
 8017d90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017d92:	eeac 8b00 	vfma.f64	d8, d12, d0
 8017d96:	ec59 8b18 	vmov	r8, r9, d8
 8017d9a:	e7ab      	b.n	8017cf4 <_strtod_l+0xa6c>
 8017d9c:	eeb0 7b4d 	vmov.f64	d7, d13
 8017da0:	e7ea      	b.n	8017d78 <_strtod_l+0xaf0>
 8017da2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8017da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017daa:	f57f af61 	bpl.w	8017c70 <_strtod_l+0x9e8>
 8017dae:	e4b1      	b.n	8017714 <_strtod_l+0x48c>
 8017db0:	2300      	movs	r3, #0
 8017db2:	9308      	str	r3, [sp, #32]
 8017db4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017db8:	6013      	str	r3, [r2, #0]
 8017dba:	f7ff baad 	b.w	8017318 <_strtod_l+0x90>
 8017dbe:	2a65      	cmp	r2, #101	; 0x65
 8017dc0:	f43f ab9f 	beq.w	8017502 <_strtod_l+0x27a>
 8017dc4:	2a45      	cmp	r2, #69	; 0x45
 8017dc6:	f43f ab9c 	beq.w	8017502 <_strtod_l+0x27a>
 8017dca:	2101      	movs	r1, #1
 8017dcc:	f7ff bbd4 	b.w	8017578 <_strtod_l+0x2f0>
 8017dd0:	ffc00000 	.word	0xffc00000
 8017dd4:	41dfffff 	.word	0x41dfffff
 8017dd8:	000fffff 	.word	0x000fffff
 8017ddc:	7ff00000 	.word	0x7ff00000
 8017de0:	7fefffff 	.word	0x7fefffff
 8017de4:	3ff00000 	.word	0x3ff00000
 8017de8:	7c9fffff 	.word	0x7c9fffff
 8017dec:	bff00000 	.word	0xbff00000
 8017df0:	7fe00000 	.word	0x7fe00000

08017df4 <_strtod_r>:
 8017df4:	4b01      	ldr	r3, [pc, #4]	; (8017dfc <_strtod_r+0x8>)
 8017df6:	f7ff ba47 	b.w	8017288 <_strtod_l>
 8017dfa:	bf00      	nop
 8017dfc:	24000124 	.word	0x24000124

08017e00 <_strtol_l.constprop.0>:
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e06:	d001      	beq.n	8017e0c <_strtol_l.constprop.0+0xc>
 8017e08:	2b24      	cmp	r3, #36	; 0x24
 8017e0a:	d906      	bls.n	8017e1a <_strtol_l.constprop.0+0x1a>
 8017e0c:	f7fe f874 	bl	8015ef8 <__errno>
 8017e10:	2316      	movs	r3, #22
 8017e12:	6003      	str	r3, [r0, #0]
 8017e14:	2000      	movs	r0, #0
 8017e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017f00 <_strtol_l.constprop.0+0x100>
 8017e1e:	460d      	mov	r5, r1
 8017e20:	462e      	mov	r6, r5
 8017e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e26:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017e2a:	f017 0708 	ands.w	r7, r7, #8
 8017e2e:	d1f7      	bne.n	8017e20 <_strtol_l.constprop.0+0x20>
 8017e30:	2c2d      	cmp	r4, #45	; 0x2d
 8017e32:	d132      	bne.n	8017e9a <_strtol_l.constprop.0+0x9a>
 8017e34:	782c      	ldrb	r4, [r5, #0]
 8017e36:	2701      	movs	r7, #1
 8017e38:	1cb5      	adds	r5, r6, #2
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d05b      	beq.n	8017ef6 <_strtol_l.constprop.0+0xf6>
 8017e3e:	2b10      	cmp	r3, #16
 8017e40:	d109      	bne.n	8017e56 <_strtol_l.constprop.0+0x56>
 8017e42:	2c30      	cmp	r4, #48	; 0x30
 8017e44:	d107      	bne.n	8017e56 <_strtol_l.constprop.0+0x56>
 8017e46:	782c      	ldrb	r4, [r5, #0]
 8017e48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017e4c:	2c58      	cmp	r4, #88	; 0x58
 8017e4e:	d14d      	bne.n	8017eec <_strtol_l.constprop.0+0xec>
 8017e50:	786c      	ldrb	r4, [r5, #1]
 8017e52:	2310      	movs	r3, #16
 8017e54:	3502      	adds	r5, #2
 8017e56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017e5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8017e5e:	f04f 0c00 	mov.w	ip, #0
 8017e62:	fbb8 f9f3 	udiv	r9, r8, r3
 8017e66:	4666      	mov	r6, ip
 8017e68:	fb03 8a19 	mls	sl, r3, r9, r8
 8017e6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017e70:	f1be 0f09 	cmp.w	lr, #9
 8017e74:	d816      	bhi.n	8017ea4 <_strtol_l.constprop.0+0xa4>
 8017e76:	4674      	mov	r4, lr
 8017e78:	42a3      	cmp	r3, r4
 8017e7a:	dd24      	ble.n	8017ec6 <_strtol_l.constprop.0+0xc6>
 8017e7c:	f1bc 0f00 	cmp.w	ip, #0
 8017e80:	db1e      	blt.n	8017ec0 <_strtol_l.constprop.0+0xc0>
 8017e82:	45b1      	cmp	r9, r6
 8017e84:	d31c      	bcc.n	8017ec0 <_strtol_l.constprop.0+0xc0>
 8017e86:	d101      	bne.n	8017e8c <_strtol_l.constprop.0+0x8c>
 8017e88:	45a2      	cmp	sl, r4
 8017e8a:	db19      	blt.n	8017ec0 <_strtol_l.constprop.0+0xc0>
 8017e8c:	fb06 4603 	mla	r6, r6, r3, r4
 8017e90:	f04f 0c01 	mov.w	ip, #1
 8017e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e98:	e7e8      	b.n	8017e6c <_strtol_l.constprop.0+0x6c>
 8017e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8017e9c:	bf04      	itt	eq
 8017e9e:	782c      	ldrbeq	r4, [r5, #0]
 8017ea0:	1cb5      	addeq	r5, r6, #2
 8017ea2:	e7ca      	b.n	8017e3a <_strtol_l.constprop.0+0x3a>
 8017ea4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017ea8:	f1be 0f19 	cmp.w	lr, #25
 8017eac:	d801      	bhi.n	8017eb2 <_strtol_l.constprop.0+0xb2>
 8017eae:	3c37      	subs	r4, #55	; 0x37
 8017eb0:	e7e2      	b.n	8017e78 <_strtol_l.constprop.0+0x78>
 8017eb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017eb6:	f1be 0f19 	cmp.w	lr, #25
 8017eba:	d804      	bhi.n	8017ec6 <_strtol_l.constprop.0+0xc6>
 8017ebc:	3c57      	subs	r4, #87	; 0x57
 8017ebe:	e7db      	b.n	8017e78 <_strtol_l.constprop.0+0x78>
 8017ec0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017ec4:	e7e6      	b.n	8017e94 <_strtol_l.constprop.0+0x94>
 8017ec6:	f1bc 0f00 	cmp.w	ip, #0
 8017eca:	da05      	bge.n	8017ed8 <_strtol_l.constprop.0+0xd8>
 8017ecc:	2322      	movs	r3, #34	; 0x22
 8017ece:	6003      	str	r3, [r0, #0]
 8017ed0:	4646      	mov	r6, r8
 8017ed2:	b942      	cbnz	r2, 8017ee6 <_strtol_l.constprop.0+0xe6>
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	e79e      	b.n	8017e16 <_strtol_l.constprop.0+0x16>
 8017ed8:	b107      	cbz	r7, 8017edc <_strtol_l.constprop.0+0xdc>
 8017eda:	4276      	negs	r6, r6
 8017edc:	2a00      	cmp	r2, #0
 8017ede:	d0f9      	beq.n	8017ed4 <_strtol_l.constprop.0+0xd4>
 8017ee0:	f1bc 0f00 	cmp.w	ip, #0
 8017ee4:	d000      	beq.n	8017ee8 <_strtol_l.constprop.0+0xe8>
 8017ee6:	1e69      	subs	r1, r5, #1
 8017ee8:	6011      	str	r1, [r2, #0]
 8017eea:	e7f3      	b.n	8017ed4 <_strtol_l.constprop.0+0xd4>
 8017eec:	2430      	movs	r4, #48	; 0x30
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d1b1      	bne.n	8017e56 <_strtol_l.constprop.0+0x56>
 8017ef2:	2308      	movs	r3, #8
 8017ef4:	e7af      	b.n	8017e56 <_strtol_l.constprop.0+0x56>
 8017ef6:	2c30      	cmp	r4, #48	; 0x30
 8017ef8:	d0a5      	beq.n	8017e46 <_strtol_l.constprop.0+0x46>
 8017efa:	230a      	movs	r3, #10
 8017efc:	e7ab      	b.n	8017e56 <_strtol_l.constprop.0+0x56>
 8017efe:	bf00      	nop
 8017f00:	0801e1a1 	.word	0x0801e1a1

08017f04 <_strtol_r>:
 8017f04:	f7ff bf7c 	b.w	8017e00 <_strtol_l.constprop.0>

08017f08 <strtol>:
 8017f08:	4613      	mov	r3, r2
 8017f0a:	460a      	mov	r2, r1
 8017f0c:	4601      	mov	r1, r0
 8017f0e:	4802      	ldr	r0, [pc, #8]	; (8017f18 <strtol+0x10>)
 8017f10:	6800      	ldr	r0, [r0, #0]
 8017f12:	f7ff bf75 	b.w	8017e00 <_strtol_l.constprop.0>
 8017f16:	bf00      	nop
 8017f18:	240000b8 	.word	0x240000b8

08017f1c <_vsniprintf_r>:
 8017f1c:	b530      	push	{r4, r5, lr}
 8017f1e:	4614      	mov	r4, r2
 8017f20:	2c00      	cmp	r4, #0
 8017f22:	b09b      	sub	sp, #108	; 0x6c
 8017f24:	4605      	mov	r5, r0
 8017f26:	461a      	mov	r2, r3
 8017f28:	da05      	bge.n	8017f36 <_vsniprintf_r+0x1a>
 8017f2a:	238b      	movs	r3, #139	; 0x8b
 8017f2c:	6003      	str	r3, [r0, #0]
 8017f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f32:	b01b      	add	sp, #108	; 0x6c
 8017f34:	bd30      	pop	{r4, r5, pc}
 8017f36:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017f3a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017f3e:	bf14      	ite	ne
 8017f40:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017f44:	4623      	moveq	r3, r4
 8017f46:	9302      	str	r3, [sp, #8]
 8017f48:	9305      	str	r3, [sp, #20]
 8017f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f4e:	9100      	str	r1, [sp, #0]
 8017f50:	9104      	str	r1, [sp, #16]
 8017f52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017f56:	4669      	mov	r1, sp
 8017f58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017f5a:	f002 f8a1 	bl	801a0a0 <_svfiprintf_r>
 8017f5e:	1c43      	adds	r3, r0, #1
 8017f60:	bfbc      	itt	lt
 8017f62:	238b      	movlt	r3, #139	; 0x8b
 8017f64:	602b      	strlt	r3, [r5, #0]
 8017f66:	2c00      	cmp	r4, #0
 8017f68:	d0e3      	beq.n	8017f32 <_vsniprintf_r+0x16>
 8017f6a:	9b00      	ldr	r3, [sp, #0]
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	701a      	strb	r2, [r3, #0]
 8017f70:	e7df      	b.n	8017f32 <_vsniprintf_r+0x16>
	...

08017f74 <vsniprintf>:
 8017f74:	b507      	push	{r0, r1, r2, lr}
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	4613      	mov	r3, r2
 8017f7a:	460a      	mov	r2, r1
 8017f7c:	4601      	mov	r1, r0
 8017f7e:	4803      	ldr	r0, [pc, #12]	; (8017f8c <vsniprintf+0x18>)
 8017f80:	6800      	ldr	r0, [r0, #0]
 8017f82:	f7ff ffcb 	bl	8017f1c <_vsniprintf_r>
 8017f86:	b003      	add	sp, #12
 8017f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f8c:	240000b8 	.word	0x240000b8

08017f90 <_vsiprintf_r>:
 8017f90:	b500      	push	{lr}
 8017f92:	b09b      	sub	sp, #108	; 0x6c
 8017f94:	9100      	str	r1, [sp, #0]
 8017f96:	9104      	str	r1, [sp, #16]
 8017f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f9c:	9105      	str	r1, [sp, #20]
 8017f9e:	9102      	str	r1, [sp, #8]
 8017fa0:	4905      	ldr	r1, [pc, #20]	; (8017fb8 <_vsiprintf_r+0x28>)
 8017fa2:	9103      	str	r1, [sp, #12]
 8017fa4:	4669      	mov	r1, sp
 8017fa6:	f002 f87b 	bl	801a0a0 <_svfiprintf_r>
 8017faa:	9b00      	ldr	r3, [sp, #0]
 8017fac:	2200      	movs	r2, #0
 8017fae:	701a      	strb	r2, [r3, #0]
 8017fb0:	b01b      	add	sp, #108	; 0x6c
 8017fb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8017fb6:	bf00      	nop
 8017fb8:	ffff0208 	.word	0xffff0208

08017fbc <vsiprintf>:
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	460a      	mov	r2, r1
 8017fc0:	4601      	mov	r1, r0
 8017fc2:	4802      	ldr	r0, [pc, #8]	; (8017fcc <vsiprintf+0x10>)
 8017fc4:	6800      	ldr	r0, [r0, #0]
 8017fc6:	f7ff bfe3 	b.w	8017f90 <_vsiprintf_r>
 8017fca:	bf00      	nop
 8017fcc:	240000b8 	.word	0x240000b8

08017fd0 <_write_r>:
 8017fd0:	b538      	push	{r3, r4, r5, lr}
 8017fd2:	4d07      	ldr	r5, [pc, #28]	; (8017ff0 <_write_r+0x20>)
 8017fd4:	4604      	mov	r4, r0
 8017fd6:	4608      	mov	r0, r1
 8017fd8:	4611      	mov	r1, r2
 8017fda:	2200      	movs	r2, #0
 8017fdc:	602a      	str	r2, [r5, #0]
 8017fde:	461a      	mov	r2, r3
 8017fe0:	f7e9 fd78 	bl	8001ad4 <_write>
 8017fe4:	1c43      	adds	r3, r0, #1
 8017fe6:	d102      	bne.n	8017fee <_write_r+0x1e>
 8017fe8:	682b      	ldr	r3, [r5, #0]
 8017fea:	b103      	cbz	r3, 8017fee <_write_r+0x1e>
 8017fec:	6023      	str	r3, [r4, #0]
 8017fee:	bd38      	pop	{r3, r4, r5, pc}
 8017ff0:	24045fb4 	.word	0x24045fb4

08017ff4 <__register_exitproc>:
 8017ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ff8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80180b4 <__register_exitproc+0xc0>
 8017ffc:	4606      	mov	r6, r0
 8017ffe:	f8d8 0000 	ldr.w	r0, [r8]
 8018002:	461f      	mov	r7, r3
 8018004:	460d      	mov	r5, r1
 8018006:	4691      	mov	r9, r2
 8018008:	f7fe f897 	bl	801613a <__retarget_lock_acquire_recursive>
 801800c:	4b25      	ldr	r3, [pc, #148]	; (80180a4 <__register_exitproc+0xb0>)
 801800e:	681c      	ldr	r4, [r3, #0]
 8018010:	b934      	cbnz	r4, 8018020 <__register_exitproc+0x2c>
 8018012:	4c25      	ldr	r4, [pc, #148]	; (80180a8 <__register_exitproc+0xb4>)
 8018014:	601c      	str	r4, [r3, #0]
 8018016:	4b25      	ldr	r3, [pc, #148]	; (80180ac <__register_exitproc+0xb8>)
 8018018:	b113      	cbz	r3, 8018020 <__register_exitproc+0x2c>
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8018020:	6863      	ldr	r3, [r4, #4]
 8018022:	2b1f      	cmp	r3, #31
 8018024:	dd07      	ble.n	8018036 <__register_exitproc+0x42>
 8018026:	f8d8 0000 	ldr.w	r0, [r8]
 801802a:	f7fe f888 	bl	801613e <__retarget_lock_release_recursive>
 801802e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018036:	b34e      	cbz	r6, 801808c <__register_exitproc+0x98>
 8018038:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801803c:	b988      	cbnz	r0, 8018062 <__register_exitproc+0x6e>
 801803e:	4b1c      	ldr	r3, [pc, #112]	; (80180b0 <__register_exitproc+0xbc>)
 8018040:	b923      	cbnz	r3, 801804c <__register_exitproc+0x58>
 8018042:	f8d8 0000 	ldr.w	r0, [r8]
 8018046:	f7fe f879 	bl	801613c <__retarget_lock_release>
 801804a:	e7f0      	b.n	801802e <__register_exitproc+0x3a>
 801804c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8018050:	f001 fa84 	bl	801955c <malloc>
 8018054:	2800      	cmp	r0, #0
 8018056:	d0f4      	beq.n	8018042 <__register_exitproc+0x4e>
 8018058:	2300      	movs	r3, #0
 801805a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801805e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8018062:	6863      	ldr	r3, [r4, #4]
 8018064:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8018068:	2201      	movs	r2, #1
 801806a:	409a      	lsls	r2, r3
 801806c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8018070:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8018074:	4313      	orrs	r3, r2
 8018076:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801807a:	2e02      	cmp	r6, #2
 801807c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8018080:	bf02      	ittt	eq
 8018082:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8018086:	4313      	orreq	r3, r2
 8018088:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801808c:	6863      	ldr	r3, [r4, #4]
 801808e:	f8d8 0000 	ldr.w	r0, [r8]
 8018092:	1c5a      	adds	r2, r3, #1
 8018094:	3302      	adds	r3, #2
 8018096:	6062      	str	r2, [r4, #4]
 8018098:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801809c:	f7fe f84f 	bl	801613e <__retarget_lock_release_recursive>
 80180a0:	2000      	movs	r0, #0
 80180a2:	e7c6      	b.n	8018032 <__register_exitproc+0x3e>
 80180a4:	24046044 	.word	0x24046044
 80180a8:	24045fb8 	.word	0x24045fb8
 80180ac:	00000000 	.word	0x00000000
 80180b0:	0801955d 	.word	0x0801955d
 80180b4:	2400011c 	.word	0x2400011c

080180b8 <_close_r>:
 80180b8:	b538      	push	{r3, r4, r5, lr}
 80180ba:	4d06      	ldr	r5, [pc, #24]	; (80180d4 <_close_r+0x1c>)
 80180bc:	2300      	movs	r3, #0
 80180be:	4604      	mov	r4, r0
 80180c0:	4608      	mov	r0, r1
 80180c2:	602b      	str	r3, [r5, #0]
 80180c4:	f7e9 fd14 	bl	8001af0 <_close>
 80180c8:	1c43      	adds	r3, r0, #1
 80180ca:	d102      	bne.n	80180d2 <_close_r+0x1a>
 80180cc:	682b      	ldr	r3, [r5, #0]
 80180ce:	b103      	cbz	r3, 80180d2 <_close_r+0x1a>
 80180d0:	6023      	str	r3, [r4, #0]
 80180d2:	bd38      	pop	{r3, r4, r5, pc}
 80180d4:	24045fb4 	.word	0x24045fb4

080180d8 <quorem>:
 80180d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180dc:	6903      	ldr	r3, [r0, #16]
 80180de:	690c      	ldr	r4, [r1, #16]
 80180e0:	42a3      	cmp	r3, r4
 80180e2:	4607      	mov	r7, r0
 80180e4:	f2c0 8081 	blt.w	80181ea <quorem+0x112>
 80180e8:	3c01      	subs	r4, #1
 80180ea:	f101 0814 	add.w	r8, r1, #20
 80180ee:	f100 0514 	add.w	r5, r0, #20
 80180f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80180f6:	9301      	str	r3, [sp, #4]
 80180f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80180fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018100:	3301      	adds	r3, #1
 8018102:	429a      	cmp	r2, r3
 8018104:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018108:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801810c:	fbb2 f6f3 	udiv	r6, r2, r3
 8018110:	d331      	bcc.n	8018176 <quorem+0x9e>
 8018112:	f04f 0e00 	mov.w	lr, #0
 8018116:	4640      	mov	r0, r8
 8018118:	46ac      	mov	ip, r5
 801811a:	46f2      	mov	sl, lr
 801811c:	f850 2b04 	ldr.w	r2, [r0], #4
 8018120:	b293      	uxth	r3, r2
 8018122:	fb06 e303 	mla	r3, r6, r3, lr
 8018126:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801812a:	b29b      	uxth	r3, r3
 801812c:	ebaa 0303 	sub.w	r3, sl, r3
 8018130:	f8dc a000 	ldr.w	sl, [ip]
 8018134:	0c12      	lsrs	r2, r2, #16
 8018136:	fa13 f38a 	uxtah	r3, r3, sl
 801813a:	fb06 e202 	mla	r2, r6, r2, lr
 801813e:	9300      	str	r3, [sp, #0]
 8018140:	9b00      	ldr	r3, [sp, #0]
 8018142:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018146:	b292      	uxth	r2, r2
 8018148:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801814c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018150:	f8bd 3000 	ldrh.w	r3, [sp]
 8018154:	4581      	cmp	r9, r0
 8018156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801815a:	f84c 3b04 	str.w	r3, [ip], #4
 801815e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018162:	d2db      	bcs.n	801811c <quorem+0x44>
 8018164:	f855 300b 	ldr.w	r3, [r5, fp]
 8018168:	b92b      	cbnz	r3, 8018176 <quorem+0x9e>
 801816a:	9b01      	ldr	r3, [sp, #4]
 801816c:	3b04      	subs	r3, #4
 801816e:	429d      	cmp	r5, r3
 8018170:	461a      	mov	r2, r3
 8018172:	d32e      	bcc.n	80181d2 <quorem+0xfa>
 8018174:	613c      	str	r4, [r7, #16]
 8018176:	4638      	mov	r0, r7
 8018178:	f001 fce2 	bl	8019b40 <__mcmp>
 801817c:	2800      	cmp	r0, #0
 801817e:	db24      	blt.n	80181ca <quorem+0xf2>
 8018180:	3601      	adds	r6, #1
 8018182:	4628      	mov	r0, r5
 8018184:	f04f 0c00 	mov.w	ip, #0
 8018188:	f858 2b04 	ldr.w	r2, [r8], #4
 801818c:	f8d0 e000 	ldr.w	lr, [r0]
 8018190:	b293      	uxth	r3, r2
 8018192:	ebac 0303 	sub.w	r3, ip, r3
 8018196:	0c12      	lsrs	r2, r2, #16
 8018198:	fa13 f38e 	uxtah	r3, r3, lr
 801819c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80181a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80181aa:	45c1      	cmp	r9, r8
 80181ac:	f840 3b04 	str.w	r3, [r0], #4
 80181b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80181b4:	d2e8      	bcs.n	8018188 <quorem+0xb0>
 80181b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80181ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80181be:	b922      	cbnz	r2, 80181ca <quorem+0xf2>
 80181c0:	3b04      	subs	r3, #4
 80181c2:	429d      	cmp	r5, r3
 80181c4:	461a      	mov	r2, r3
 80181c6:	d30a      	bcc.n	80181de <quorem+0x106>
 80181c8:	613c      	str	r4, [r7, #16]
 80181ca:	4630      	mov	r0, r6
 80181cc:	b003      	add	sp, #12
 80181ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d2:	6812      	ldr	r2, [r2, #0]
 80181d4:	3b04      	subs	r3, #4
 80181d6:	2a00      	cmp	r2, #0
 80181d8:	d1cc      	bne.n	8018174 <quorem+0x9c>
 80181da:	3c01      	subs	r4, #1
 80181dc:	e7c7      	b.n	801816e <quorem+0x96>
 80181de:	6812      	ldr	r2, [r2, #0]
 80181e0:	3b04      	subs	r3, #4
 80181e2:	2a00      	cmp	r2, #0
 80181e4:	d1f0      	bne.n	80181c8 <quorem+0xf0>
 80181e6:	3c01      	subs	r4, #1
 80181e8:	e7eb      	b.n	80181c2 <quorem+0xea>
 80181ea:	2000      	movs	r0, #0
 80181ec:	e7ee      	b.n	80181cc <quorem+0xf4>
	...

080181f0 <_dtoa_r>:
 80181f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f4:	ed2d 8b02 	vpush	{d8}
 80181f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80181fa:	b091      	sub	sp, #68	; 0x44
 80181fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018200:	ec59 8b10 	vmov	r8, r9, d0
 8018204:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018206:	9106      	str	r1, [sp, #24]
 8018208:	4606      	mov	r6, r0
 801820a:	9208      	str	r2, [sp, #32]
 801820c:	930c      	str	r3, [sp, #48]	; 0x30
 801820e:	b975      	cbnz	r5, 801822e <_dtoa_r+0x3e>
 8018210:	2010      	movs	r0, #16
 8018212:	f001 f9a3 	bl	801955c <malloc>
 8018216:	4602      	mov	r2, r0
 8018218:	6270      	str	r0, [r6, #36]	; 0x24
 801821a:	b920      	cbnz	r0, 8018226 <_dtoa_r+0x36>
 801821c:	4baa      	ldr	r3, [pc, #680]	; (80184c8 <_dtoa_r+0x2d8>)
 801821e:	21ea      	movs	r1, #234	; 0xea
 8018220:	48aa      	ldr	r0, [pc, #680]	; (80184cc <_dtoa_r+0x2dc>)
 8018222:	f002 f87b 	bl	801a31c <__assert_func>
 8018226:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801822a:	6005      	str	r5, [r0, #0]
 801822c:	60c5      	str	r5, [r0, #12]
 801822e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018230:	6819      	ldr	r1, [r3, #0]
 8018232:	b151      	cbz	r1, 801824a <_dtoa_r+0x5a>
 8018234:	685a      	ldr	r2, [r3, #4]
 8018236:	604a      	str	r2, [r1, #4]
 8018238:	2301      	movs	r3, #1
 801823a:	4093      	lsls	r3, r2
 801823c:	608b      	str	r3, [r1, #8]
 801823e:	4630      	mov	r0, r6
 8018240:	f001 f9f2 	bl	8019628 <_Bfree>
 8018244:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018246:	2200      	movs	r2, #0
 8018248:	601a      	str	r2, [r3, #0]
 801824a:	f1b9 0300 	subs.w	r3, r9, #0
 801824e:	bfbb      	ittet	lt
 8018250:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018254:	9303      	strlt	r3, [sp, #12]
 8018256:	2300      	movge	r3, #0
 8018258:	2201      	movlt	r2, #1
 801825a:	bfac      	ite	ge
 801825c:	6023      	strge	r3, [r4, #0]
 801825e:	6022      	strlt	r2, [r4, #0]
 8018260:	4b9b      	ldr	r3, [pc, #620]	; (80184d0 <_dtoa_r+0x2e0>)
 8018262:	9c03      	ldr	r4, [sp, #12]
 8018264:	43a3      	bics	r3, r4
 8018266:	d11c      	bne.n	80182a2 <_dtoa_r+0xb2>
 8018268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801826a:	f242 730f 	movw	r3, #9999	; 0x270f
 801826e:	6013      	str	r3, [r2, #0]
 8018270:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018274:	ea53 0308 	orrs.w	r3, r3, r8
 8018278:	f000 84fd 	beq.w	8018c76 <_dtoa_r+0xa86>
 801827c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801827e:	b963      	cbnz	r3, 801829a <_dtoa_r+0xaa>
 8018280:	4b94      	ldr	r3, [pc, #592]	; (80184d4 <_dtoa_r+0x2e4>)
 8018282:	e01f      	b.n	80182c4 <_dtoa_r+0xd4>
 8018284:	4b94      	ldr	r3, [pc, #592]	; (80184d8 <_dtoa_r+0x2e8>)
 8018286:	9301      	str	r3, [sp, #4]
 8018288:	3308      	adds	r3, #8
 801828a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801828c:	6013      	str	r3, [r2, #0]
 801828e:	9801      	ldr	r0, [sp, #4]
 8018290:	b011      	add	sp, #68	; 0x44
 8018292:	ecbd 8b02 	vpop	{d8}
 8018296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829a:	4b8e      	ldr	r3, [pc, #568]	; (80184d4 <_dtoa_r+0x2e4>)
 801829c:	9301      	str	r3, [sp, #4]
 801829e:	3303      	adds	r3, #3
 80182a0:	e7f3      	b.n	801828a <_dtoa_r+0x9a>
 80182a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80182a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80182aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ae:	d10b      	bne.n	80182c8 <_dtoa_r+0xd8>
 80182b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182b2:	2301      	movs	r3, #1
 80182b4:	6013      	str	r3, [r2, #0]
 80182b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	f000 84d9 	beq.w	8018c70 <_dtoa_r+0xa80>
 80182be:	4887      	ldr	r0, [pc, #540]	; (80184dc <_dtoa_r+0x2ec>)
 80182c0:	6018      	str	r0, [r3, #0]
 80182c2:	1e43      	subs	r3, r0, #1
 80182c4:	9301      	str	r3, [sp, #4]
 80182c6:	e7e2      	b.n	801828e <_dtoa_r+0x9e>
 80182c8:	a90f      	add	r1, sp, #60	; 0x3c
 80182ca:	aa0e      	add	r2, sp, #56	; 0x38
 80182cc:	4630      	mov	r0, r6
 80182ce:	eeb0 0b48 	vmov.f64	d0, d8
 80182d2:	f001 fd57 	bl	8019d84 <__d2b>
 80182d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80182da:	4605      	mov	r5, r0
 80182dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80182de:	2900      	cmp	r1, #0
 80182e0:	d046      	beq.n	8018370 <_dtoa_r+0x180>
 80182e2:	ee18 4a90 	vmov	r4, s17
 80182e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80182ea:	ec53 2b18 	vmov	r2, r3, d8
 80182ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80182f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80182f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80182fa:	2400      	movs	r4, #0
 80182fc:	ec43 2b16 	vmov	d6, r2, r3
 8018300:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8018304:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80184b0 <_dtoa_r+0x2c0>
 8018308:	ee36 7b47 	vsub.f64	d7, d6, d7
 801830c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80184b8 <_dtoa_r+0x2c8>
 8018310:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018314:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80184c0 <_dtoa_r+0x2d0>
 8018318:	ee07 1a90 	vmov	s15, r1
 801831c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018320:	eeb0 7b46 	vmov.f64	d7, d6
 8018324:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018328:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801832c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018334:	ee16 ba90 	vmov	fp, s13
 8018338:	940a      	str	r4, [sp, #40]	; 0x28
 801833a:	d508      	bpl.n	801834e <_dtoa_r+0x15e>
 801833c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018340:	eeb4 6b47 	vcmp.f64	d6, d7
 8018344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018348:	bf18      	it	ne
 801834a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801834e:	f1bb 0f16 	cmp.w	fp, #22
 8018352:	d82f      	bhi.n	80183b4 <_dtoa_r+0x1c4>
 8018354:	4b62      	ldr	r3, [pc, #392]	; (80184e0 <_dtoa_r+0x2f0>)
 8018356:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801835a:	ed93 7b00 	vldr	d7, [r3]
 801835e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018366:	d501      	bpl.n	801836c <_dtoa_r+0x17c>
 8018368:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801836c:	2300      	movs	r3, #0
 801836e:	e022      	b.n	80183b6 <_dtoa_r+0x1c6>
 8018370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018372:	4401      	add	r1, r0
 8018374:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8018378:	2b20      	cmp	r3, #32
 801837a:	bfc1      	itttt	gt
 801837c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018380:	fa04 f303 	lslgt.w	r3, r4, r3
 8018384:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8018388:	fa28 f804 	lsrgt.w	r8, r8, r4
 801838c:	bfd6      	itet	le
 801838e:	f1c3 0320 	rsble	r3, r3, #32
 8018392:	ea43 0808 	orrgt.w	r8, r3, r8
 8018396:	fa08 f803 	lslle.w	r8, r8, r3
 801839a:	ee07 8a90 	vmov	s15, r8
 801839e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80183a2:	3901      	subs	r1, #1
 80183a4:	ee17 4a90 	vmov	r4, s15
 80183a8:	ec53 2b17 	vmov	r2, r3, d7
 80183ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80183b0:	2401      	movs	r4, #1
 80183b2:	e7a3      	b.n	80182fc <_dtoa_r+0x10c>
 80183b4:	2301      	movs	r3, #1
 80183b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80183b8:	1a43      	subs	r3, r0, r1
 80183ba:	1e5a      	subs	r2, r3, #1
 80183bc:	bf45      	ittet	mi
 80183be:	f1c3 0301 	rsbmi	r3, r3, #1
 80183c2:	9304      	strmi	r3, [sp, #16]
 80183c4:	2300      	movpl	r3, #0
 80183c6:	2300      	movmi	r3, #0
 80183c8:	9205      	str	r2, [sp, #20]
 80183ca:	bf54      	ite	pl
 80183cc:	9304      	strpl	r3, [sp, #16]
 80183ce:	9305      	strmi	r3, [sp, #20]
 80183d0:	f1bb 0f00 	cmp.w	fp, #0
 80183d4:	db18      	blt.n	8018408 <_dtoa_r+0x218>
 80183d6:	9b05      	ldr	r3, [sp, #20]
 80183d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80183dc:	445b      	add	r3, fp
 80183de:	9305      	str	r3, [sp, #20]
 80183e0:	2300      	movs	r3, #0
 80183e2:	9a06      	ldr	r2, [sp, #24]
 80183e4:	2a09      	cmp	r2, #9
 80183e6:	d849      	bhi.n	801847c <_dtoa_r+0x28c>
 80183e8:	2a05      	cmp	r2, #5
 80183ea:	bfc4      	itt	gt
 80183ec:	3a04      	subgt	r2, #4
 80183ee:	9206      	strgt	r2, [sp, #24]
 80183f0:	9a06      	ldr	r2, [sp, #24]
 80183f2:	f1a2 0202 	sub.w	r2, r2, #2
 80183f6:	bfcc      	ite	gt
 80183f8:	2400      	movgt	r4, #0
 80183fa:	2401      	movle	r4, #1
 80183fc:	2a03      	cmp	r2, #3
 80183fe:	d848      	bhi.n	8018492 <_dtoa_r+0x2a2>
 8018400:	e8df f002 	tbb	[pc, r2]
 8018404:	3a2c2e0b 	.word	0x3a2c2e0b
 8018408:	9b04      	ldr	r3, [sp, #16]
 801840a:	2200      	movs	r2, #0
 801840c:	eba3 030b 	sub.w	r3, r3, fp
 8018410:	9304      	str	r3, [sp, #16]
 8018412:	9209      	str	r2, [sp, #36]	; 0x24
 8018414:	f1cb 0300 	rsb	r3, fp, #0
 8018418:	e7e3      	b.n	80183e2 <_dtoa_r+0x1f2>
 801841a:	2200      	movs	r2, #0
 801841c:	9207      	str	r2, [sp, #28]
 801841e:	9a08      	ldr	r2, [sp, #32]
 8018420:	2a00      	cmp	r2, #0
 8018422:	dc39      	bgt.n	8018498 <_dtoa_r+0x2a8>
 8018424:	f04f 0a01 	mov.w	sl, #1
 8018428:	46d1      	mov	r9, sl
 801842a:	4652      	mov	r2, sl
 801842c:	f8cd a020 	str.w	sl, [sp, #32]
 8018430:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8018432:	2100      	movs	r1, #0
 8018434:	6079      	str	r1, [r7, #4]
 8018436:	2004      	movs	r0, #4
 8018438:	f100 0c14 	add.w	ip, r0, #20
 801843c:	4594      	cmp	ip, r2
 801843e:	6879      	ldr	r1, [r7, #4]
 8018440:	d92f      	bls.n	80184a2 <_dtoa_r+0x2b2>
 8018442:	4630      	mov	r0, r6
 8018444:	930d      	str	r3, [sp, #52]	; 0x34
 8018446:	f001 f8af 	bl	80195a8 <_Balloc>
 801844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801844c:	9001      	str	r0, [sp, #4]
 801844e:	4602      	mov	r2, r0
 8018450:	2800      	cmp	r0, #0
 8018452:	d149      	bne.n	80184e8 <_dtoa_r+0x2f8>
 8018454:	4b23      	ldr	r3, [pc, #140]	; (80184e4 <_dtoa_r+0x2f4>)
 8018456:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801845a:	e6e1      	b.n	8018220 <_dtoa_r+0x30>
 801845c:	2201      	movs	r2, #1
 801845e:	e7dd      	b.n	801841c <_dtoa_r+0x22c>
 8018460:	2200      	movs	r2, #0
 8018462:	9207      	str	r2, [sp, #28]
 8018464:	9a08      	ldr	r2, [sp, #32]
 8018466:	eb0b 0a02 	add.w	sl, fp, r2
 801846a:	f10a 0901 	add.w	r9, sl, #1
 801846e:	464a      	mov	r2, r9
 8018470:	2a01      	cmp	r2, #1
 8018472:	bfb8      	it	lt
 8018474:	2201      	movlt	r2, #1
 8018476:	e7db      	b.n	8018430 <_dtoa_r+0x240>
 8018478:	2201      	movs	r2, #1
 801847a:	e7f2      	b.n	8018462 <_dtoa_r+0x272>
 801847c:	2401      	movs	r4, #1
 801847e:	2200      	movs	r2, #0
 8018480:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8018484:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018488:	2100      	movs	r1, #0
 801848a:	46d1      	mov	r9, sl
 801848c:	2212      	movs	r2, #18
 801848e:	9108      	str	r1, [sp, #32]
 8018490:	e7ce      	b.n	8018430 <_dtoa_r+0x240>
 8018492:	2201      	movs	r2, #1
 8018494:	9207      	str	r2, [sp, #28]
 8018496:	e7f5      	b.n	8018484 <_dtoa_r+0x294>
 8018498:	f8dd a020 	ldr.w	sl, [sp, #32]
 801849c:	46d1      	mov	r9, sl
 801849e:	4652      	mov	r2, sl
 80184a0:	e7c6      	b.n	8018430 <_dtoa_r+0x240>
 80184a2:	3101      	adds	r1, #1
 80184a4:	6079      	str	r1, [r7, #4]
 80184a6:	0040      	lsls	r0, r0, #1
 80184a8:	e7c6      	b.n	8018438 <_dtoa_r+0x248>
 80184aa:	bf00      	nop
 80184ac:	f3af 8000 	nop.w
 80184b0:	636f4361 	.word	0x636f4361
 80184b4:	3fd287a7 	.word	0x3fd287a7
 80184b8:	8b60c8b3 	.word	0x8b60c8b3
 80184bc:	3fc68a28 	.word	0x3fc68a28
 80184c0:	509f79fb 	.word	0x509f79fb
 80184c4:	3fd34413 	.word	0x3fd34413
 80184c8:	0801e2ae 	.word	0x0801e2ae
 80184cc:	0801e2c5 	.word	0x0801e2c5
 80184d0:	7ff00000 	.word	0x7ff00000
 80184d4:	0801e2aa 	.word	0x0801e2aa
 80184d8:	0801e2a1 	.word	0x0801e2a1
 80184dc:	0801e121 	.word	0x0801e121
 80184e0:	0801e430 	.word	0x0801e430
 80184e4:	0801e320 	.word	0x0801e320
 80184e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80184ea:	9901      	ldr	r1, [sp, #4]
 80184ec:	6011      	str	r1, [r2, #0]
 80184ee:	f1b9 0f0e 	cmp.w	r9, #14
 80184f2:	d86c      	bhi.n	80185ce <_dtoa_r+0x3de>
 80184f4:	2c00      	cmp	r4, #0
 80184f6:	d06a      	beq.n	80185ce <_dtoa_r+0x3de>
 80184f8:	f1bb 0f00 	cmp.w	fp, #0
 80184fc:	f340 80a0 	ble.w	8018640 <_dtoa_r+0x450>
 8018500:	49c1      	ldr	r1, [pc, #772]	; (8018808 <_dtoa_r+0x618>)
 8018502:	f00b 020f 	and.w	r2, fp, #15
 8018506:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801850a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801850e:	ed92 7b00 	vldr	d7, [r2]
 8018512:	ea4f 112b 	mov.w	r1, fp, asr #4
 8018516:	f000 8087 	beq.w	8018628 <_dtoa_r+0x438>
 801851a:	4abc      	ldr	r2, [pc, #752]	; (801880c <_dtoa_r+0x61c>)
 801851c:	ed92 6b08 	vldr	d6, [r2, #32]
 8018520:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018524:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018528:	f001 010f 	and.w	r1, r1, #15
 801852c:	2203      	movs	r2, #3
 801852e:	48b7      	ldr	r0, [pc, #732]	; (801880c <_dtoa_r+0x61c>)
 8018530:	2900      	cmp	r1, #0
 8018532:	d17b      	bne.n	801862c <_dtoa_r+0x43c>
 8018534:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018538:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801853c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018542:	2900      	cmp	r1, #0
 8018544:	f000 80a2 	beq.w	801868c <_dtoa_r+0x49c>
 8018548:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801854c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018550:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018558:	f140 8098 	bpl.w	801868c <_dtoa_r+0x49c>
 801855c:	f1b9 0f00 	cmp.w	r9, #0
 8018560:	f000 8094 	beq.w	801868c <_dtoa_r+0x49c>
 8018564:	f1ba 0f00 	cmp.w	sl, #0
 8018568:	dd2f      	ble.n	80185ca <_dtoa_r+0x3da>
 801856a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801856e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018572:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018576:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801857a:	3201      	adds	r2, #1
 801857c:	4650      	mov	r0, sl
 801857e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018582:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8018586:	ee07 2a90 	vmov	s15, r2
 801858a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801858e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018592:	ee15 4a90 	vmov	r4, s11
 8018596:	ec52 1b15 	vmov	r1, r2, d5
 801859a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801859e:	2800      	cmp	r0, #0
 80185a0:	d177      	bne.n	8018692 <_dtoa_r+0x4a2>
 80185a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80185a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80185aa:	ec42 1b17 	vmov	d7, r1, r2
 80185ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80185b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b6:	f300 8263 	bgt.w	8018a80 <_dtoa_r+0x890>
 80185ba:	eeb1 7b47 	vneg.f64	d7, d7
 80185be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80185c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c6:	f100 8258 	bmi.w	8018a7a <_dtoa_r+0x88a>
 80185ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80185ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80185d0:	2a00      	cmp	r2, #0
 80185d2:	f2c0 811d 	blt.w	8018810 <_dtoa_r+0x620>
 80185d6:	f1bb 0f0e 	cmp.w	fp, #14
 80185da:	f300 8119 	bgt.w	8018810 <_dtoa_r+0x620>
 80185de:	4b8a      	ldr	r3, [pc, #552]	; (8018808 <_dtoa_r+0x618>)
 80185e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80185e4:	ed93 6b00 	vldr	d6, [r3]
 80185e8:	9b08      	ldr	r3, [sp, #32]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	f280 80b7 	bge.w	801875e <_dtoa_r+0x56e>
 80185f0:	f1b9 0f00 	cmp.w	r9, #0
 80185f4:	f300 80b3 	bgt.w	801875e <_dtoa_r+0x56e>
 80185f8:	f040 823f 	bne.w	8018a7a <_dtoa_r+0x88a>
 80185fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018600:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018608:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018610:	464c      	mov	r4, r9
 8018612:	464f      	mov	r7, r9
 8018614:	f280 8215 	bge.w	8018a42 <_dtoa_r+0x852>
 8018618:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801861c:	2331      	movs	r3, #49	; 0x31
 801861e:	f808 3b01 	strb.w	r3, [r8], #1
 8018622:	f10b 0b01 	add.w	fp, fp, #1
 8018626:	e211      	b.n	8018a4c <_dtoa_r+0x85c>
 8018628:	2202      	movs	r2, #2
 801862a:	e780      	b.n	801852e <_dtoa_r+0x33e>
 801862c:	07cc      	lsls	r4, r1, #31
 801862e:	d504      	bpl.n	801863a <_dtoa_r+0x44a>
 8018630:	ed90 6b00 	vldr	d6, [r0]
 8018634:	3201      	adds	r2, #1
 8018636:	ee27 7b06 	vmul.f64	d7, d7, d6
 801863a:	1049      	asrs	r1, r1, #1
 801863c:	3008      	adds	r0, #8
 801863e:	e777      	b.n	8018530 <_dtoa_r+0x340>
 8018640:	d022      	beq.n	8018688 <_dtoa_r+0x498>
 8018642:	f1cb 0100 	rsb	r1, fp, #0
 8018646:	4a70      	ldr	r2, [pc, #448]	; (8018808 <_dtoa_r+0x618>)
 8018648:	f001 000f 	and.w	r0, r1, #15
 801864c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018650:	ed92 7b00 	vldr	d7, [r2]
 8018654:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018658:	ed8d 7b02 	vstr	d7, [sp, #8]
 801865c:	486b      	ldr	r0, [pc, #428]	; (801880c <_dtoa_r+0x61c>)
 801865e:	1109      	asrs	r1, r1, #4
 8018660:	2400      	movs	r4, #0
 8018662:	2202      	movs	r2, #2
 8018664:	b929      	cbnz	r1, 8018672 <_dtoa_r+0x482>
 8018666:	2c00      	cmp	r4, #0
 8018668:	f43f af6a 	beq.w	8018540 <_dtoa_r+0x350>
 801866c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018670:	e766      	b.n	8018540 <_dtoa_r+0x350>
 8018672:	07cf      	lsls	r7, r1, #31
 8018674:	d505      	bpl.n	8018682 <_dtoa_r+0x492>
 8018676:	ed90 6b00 	vldr	d6, [r0]
 801867a:	3201      	adds	r2, #1
 801867c:	2401      	movs	r4, #1
 801867e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018682:	1049      	asrs	r1, r1, #1
 8018684:	3008      	adds	r0, #8
 8018686:	e7ed      	b.n	8018664 <_dtoa_r+0x474>
 8018688:	2202      	movs	r2, #2
 801868a:	e759      	b.n	8018540 <_dtoa_r+0x350>
 801868c:	465f      	mov	r7, fp
 801868e:	4648      	mov	r0, r9
 8018690:	e775      	b.n	801857e <_dtoa_r+0x38e>
 8018692:	ec42 1b17 	vmov	d7, r1, r2
 8018696:	4a5c      	ldr	r2, [pc, #368]	; (8018808 <_dtoa_r+0x618>)
 8018698:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801869c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80186a0:	9a01      	ldr	r2, [sp, #4]
 80186a2:	1814      	adds	r4, r2, r0
 80186a4:	9a07      	ldr	r2, [sp, #28]
 80186a6:	b352      	cbz	r2, 80186fe <_dtoa_r+0x50e>
 80186a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80186ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80186b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80186b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80186b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80186bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80186c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80186c4:	ee14 2a90 	vmov	r2, s9
 80186c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80186cc:	3230      	adds	r2, #48	; 0x30
 80186ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80186d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80186d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186da:	f808 2b01 	strb.w	r2, [r8], #1
 80186de:	d439      	bmi.n	8018754 <_dtoa_r+0x564>
 80186e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80186e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80186e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ec:	d472      	bmi.n	80187d4 <_dtoa_r+0x5e4>
 80186ee:	45a0      	cmp	r8, r4
 80186f0:	f43f af6b 	beq.w	80185ca <_dtoa_r+0x3da>
 80186f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80186f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80186fc:	e7e0      	b.n	80186c0 <_dtoa_r+0x4d0>
 80186fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018702:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018706:	4621      	mov	r1, r4
 8018708:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801870c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018710:	ee14 2a90 	vmov	r2, s9
 8018714:	3230      	adds	r2, #48	; 0x30
 8018716:	f808 2b01 	strb.w	r2, [r8], #1
 801871a:	45a0      	cmp	r8, r4
 801871c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018720:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018724:	d118      	bne.n	8018758 <_dtoa_r+0x568>
 8018726:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801872a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801872e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018736:	dc4d      	bgt.n	80187d4 <_dtoa_r+0x5e4>
 8018738:	ee35 7b47 	vsub.f64	d7, d5, d7
 801873c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018744:	f57f af41 	bpl.w	80185ca <_dtoa_r+0x3da>
 8018748:	4688      	mov	r8, r1
 801874a:	3901      	subs	r1, #1
 801874c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018750:	2b30      	cmp	r3, #48	; 0x30
 8018752:	d0f9      	beq.n	8018748 <_dtoa_r+0x558>
 8018754:	46bb      	mov	fp, r7
 8018756:	e02a      	b.n	80187ae <_dtoa_r+0x5be>
 8018758:	ee26 6b03 	vmul.f64	d6, d6, d3
 801875c:	e7d6      	b.n	801870c <_dtoa_r+0x51c>
 801875e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018762:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018766:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801876a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801876e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018772:	ee15 3a10 	vmov	r3, s10
 8018776:	3330      	adds	r3, #48	; 0x30
 8018778:	f808 3b01 	strb.w	r3, [r8], #1
 801877c:	9b01      	ldr	r3, [sp, #4]
 801877e:	eba8 0303 	sub.w	r3, r8, r3
 8018782:	4599      	cmp	r9, r3
 8018784:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018788:	eea3 7b46 	vfms.f64	d7, d3, d6
 801878c:	d133      	bne.n	80187f6 <_dtoa_r+0x606>
 801878e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879a:	dc1a      	bgt.n	80187d2 <_dtoa_r+0x5e2>
 801879c:	eeb4 7b46 	vcmp.f64	d7, d6
 80187a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a4:	d103      	bne.n	80187ae <_dtoa_r+0x5be>
 80187a6:	ee15 3a10 	vmov	r3, s10
 80187aa:	07d9      	lsls	r1, r3, #31
 80187ac:	d411      	bmi.n	80187d2 <_dtoa_r+0x5e2>
 80187ae:	4629      	mov	r1, r5
 80187b0:	4630      	mov	r0, r6
 80187b2:	f000 ff39 	bl	8019628 <_Bfree>
 80187b6:	2300      	movs	r3, #0
 80187b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80187ba:	f888 3000 	strb.w	r3, [r8]
 80187be:	f10b 0301 	add.w	r3, fp, #1
 80187c2:	6013      	str	r3, [r2, #0]
 80187c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	f43f ad61 	beq.w	801828e <_dtoa_r+0x9e>
 80187cc:	f8c3 8000 	str.w	r8, [r3]
 80187d0:	e55d      	b.n	801828e <_dtoa_r+0x9e>
 80187d2:	465f      	mov	r7, fp
 80187d4:	4643      	mov	r3, r8
 80187d6:	4698      	mov	r8, r3
 80187d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80187dc:	2a39      	cmp	r2, #57	; 0x39
 80187de:	d106      	bne.n	80187ee <_dtoa_r+0x5fe>
 80187e0:	9a01      	ldr	r2, [sp, #4]
 80187e2:	429a      	cmp	r2, r3
 80187e4:	d1f7      	bne.n	80187d6 <_dtoa_r+0x5e6>
 80187e6:	9901      	ldr	r1, [sp, #4]
 80187e8:	2230      	movs	r2, #48	; 0x30
 80187ea:	3701      	adds	r7, #1
 80187ec:	700a      	strb	r2, [r1, #0]
 80187ee:	781a      	ldrb	r2, [r3, #0]
 80187f0:	3201      	adds	r2, #1
 80187f2:	701a      	strb	r2, [r3, #0]
 80187f4:	e7ae      	b.n	8018754 <_dtoa_r+0x564>
 80187f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80187fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80187fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018802:	d1b2      	bne.n	801876a <_dtoa_r+0x57a>
 8018804:	e7d3      	b.n	80187ae <_dtoa_r+0x5be>
 8018806:	bf00      	nop
 8018808:	0801e430 	.word	0x0801e430
 801880c:	0801e408 	.word	0x0801e408
 8018810:	9907      	ldr	r1, [sp, #28]
 8018812:	2900      	cmp	r1, #0
 8018814:	f000 80d0 	beq.w	80189b8 <_dtoa_r+0x7c8>
 8018818:	9906      	ldr	r1, [sp, #24]
 801881a:	2901      	cmp	r1, #1
 801881c:	f300 80b4 	bgt.w	8018988 <_dtoa_r+0x798>
 8018820:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018822:	2900      	cmp	r1, #0
 8018824:	f000 80ac 	beq.w	8018980 <_dtoa_r+0x790>
 8018828:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801882c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018830:	461c      	mov	r4, r3
 8018832:	930a      	str	r3, [sp, #40]	; 0x28
 8018834:	9b04      	ldr	r3, [sp, #16]
 8018836:	4413      	add	r3, r2
 8018838:	9304      	str	r3, [sp, #16]
 801883a:	9b05      	ldr	r3, [sp, #20]
 801883c:	2101      	movs	r1, #1
 801883e:	4413      	add	r3, r2
 8018840:	4630      	mov	r0, r6
 8018842:	9305      	str	r3, [sp, #20]
 8018844:	f000 fff2 	bl	801982c <__i2b>
 8018848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801884a:	4607      	mov	r7, r0
 801884c:	f1b8 0f00 	cmp.w	r8, #0
 8018850:	dd0d      	ble.n	801886e <_dtoa_r+0x67e>
 8018852:	9a05      	ldr	r2, [sp, #20]
 8018854:	2a00      	cmp	r2, #0
 8018856:	dd0a      	ble.n	801886e <_dtoa_r+0x67e>
 8018858:	4542      	cmp	r2, r8
 801885a:	9904      	ldr	r1, [sp, #16]
 801885c:	bfa8      	it	ge
 801885e:	4642      	movge	r2, r8
 8018860:	1a89      	subs	r1, r1, r2
 8018862:	9104      	str	r1, [sp, #16]
 8018864:	9905      	ldr	r1, [sp, #20]
 8018866:	eba8 0802 	sub.w	r8, r8, r2
 801886a:	1a8a      	subs	r2, r1, r2
 801886c:	9205      	str	r2, [sp, #20]
 801886e:	b303      	cbz	r3, 80188b2 <_dtoa_r+0x6c2>
 8018870:	9a07      	ldr	r2, [sp, #28]
 8018872:	2a00      	cmp	r2, #0
 8018874:	f000 80a5 	beq.w	80189c2 <_dtoa_r+0x7d2>
 8018878:	2c00      	cmp	r4, #0
 801887a:	dd13      	ble.n	80188a4 <_dtoa_r+0x6b4>
 801887c:	4639      	mov	r1, r7
 801887e:	4622      	mov	r2, r4
 8018880:	4630      	mov	r0, r6
 8018882:	930d      	str	r3, [sp, #52]	; 0x34
 8018884:	f001 f892 	bl	80199ac <__pow5mult>
 8018888:	462a      	mov	r2, r5
 801888a:	4601      	mov	r1, r0
 801888c:	4607      	mov	r7, r0
 801888e:	4630      	mov	r0, r6
 8018890:	f000 ffe2 	bl	8019858 <__multiply>
 8018894:	4629      	mov	r1, r5
 8018896:	900a      	str	r0, [sp, #40]	; 0x28
 8018898:	4630      	mov	r0, r6
 801889a:	f000 fec5 	bl	8019628 <_Bfree>
 801889e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188a2:	4615      	mov	r5, r2
 80188a4:	1b1a      	subs	r2, r3, r4
 80188a6:	d004      	beq.n	80188b2 <_dtoa_r+0x6c2>
 80188a8:	4629      	mov	r1, r5
 80188aa:	4630      	mov	r0, r6
 80188ac:	f001 f87e 	bl	80199ac <__pow5mult>
 80188b0:	4605      	mov	r5, r0
 80188b2:	2101      	movs	r1, #1
 80188b4:	4630      	mov	r0, r6
 80188b6:	f000 ffb9 	bl	801982c <__i2b>
 80188ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188bc:	2b00      	cmp	r3, #0
 80188be:	4604      	mov	r4, r0
 80188c0:	f340 8081 	ble.w	80189c6 <_dtoa_r+0x7d6>
 80188c4:	461a      	mov	r2, r3
 80188c6:	4601      	mov	r1, r0
 80188c8:	4630      	mov	r0, r6
 80188ca:	f001 f86f 	bl	80199ac <__pow5mult>
 80188ce:	9b06      	ldr	r3, [sp, #24]
 80188d0:	2b01      	cmp	r3, #1
 80188d2:	4604      	mov	r4, r0
 80188d4:	dd7a      	ble.n	80189cc <_dtoa_r+0x7dc>
 80188d6:	2300      	movs	r3, #0
 80188d8:	930a      	str	r3, [sp, #40]	; 0x28
 80188da:	6922      	ldr	r2, [r4, #16]
 80188dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80188e0:	6910      	ldr	r0, [r2, #16]
 80188e2:	f000 ff53 	bl	801978c <__hi0bits>
 80188e6:	f1c0 0020 	rsb	r0, r0, #32
 80188ea:	9b05      	ldr	r3, [sp, #20]
 80188ec:	4418      	add	r0, r3
 80188ee:	f010 001f 	ands.w	r0, r0, #31
 80188f2:	f000 808c 	beq.w	8018a0e <_dtoa_r+0x81e>
 80188f6:	f1c0 0220 	rsb	r2, r0, #32
 80188fa:	2a04      	cmp	r2, #4
 80188fc:	f340 8085 	ble.w	8018a0a <_dtoa_r+0x81a>
 8018900:	f1c0 001c 	rsb	r0, r0, #28
 8018904:	9b04      	ldr	r3, [sp, #16]
 8018906:	4403      	add	r3, r0
 8018908:	9304      	str	r3, [sp, #16]
 801890a:	9b05      	ldr	r3, [sp, #20]
 801890c:	4403      	add	r3, r0
 801890e:	4480      	add	r8, r0
 8018910:	9305      	str	r3, [sp, #20]
 8018912:	9b04      	ldr	r3, [sp, #16]
 8018914:	2b00      	cmp	r3, #0
 8018916:	dd05      	ble.n	8018924 <_dtoa_r+0x734>
 8018918:	4629      	mov	r1, r5
 801891a:	461a      	mov	r2, r3
 801891c:	4630      	mov	r0, r6
 801891e:	f001 f89f 	bl	8019a60 <__lshift>
 8018922:	4605      	mov	r5, r0
 8018924:	9b05      	ldr	r3, [sp, #20]
 8018926:	2b00      	cmp	r3, #0
 8018928:	dd05      	ble.n	8018936 <_dtoa_r+0x746>
 801892a:	4621      	mov	r1, r4
 801892c:	461a      	mov	r2, r3
 801892e:	4630      	mov	r0, r6
 8018930:	f001 f896 	bl	8019a60 <__lshift>
 8018934:	4604      	mov	r4, r0
 8018936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018938:	2b00      	cmp	r3, #0
 801893a:	d06a      	beq.n	8018a12 <_dtoa_r+0x822>
 801893c:	4621      	mov	r1, r4
 801893e:	4628      	mov	r0, r5
 8018940:	f001 f8fe 	bl	8019b40 <__mcmp>
 8018944:	2800      	cmp	r0, #0
 8018946:	da64      	bge.n	8018a12 <_dtoa_r+0x822>
 8018948:	2300      	movs	r3, #0
 801894a:	4629      	mov	r1, r5
 801894c:	220a      	movs	r2, #10
 801894e:	4630      	mov	r0, r6
 8018950:	f000 fe8c 	bl	801966c <__multadd>
 8018954:	9b07      	ldr	r3, [sp, #28]
 8018956:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801895a:	4605      	mov	r5, r0
 801895c:	2b00      	cmp	r3, #0
 801895e:	f000 8191 	beq.w	8018c84 <_dtoa_r+0xa94>
 8018962:	4639      	mov	r1, r7
 8018964:	2300      	movs	r3, #0
 8018966:	220a      	movs	r2, #10
 8018968:	4630      	mov	r0, r6
 801896a:	f000 fe7f 	bl	801966c <__multadd>
 801896e:	f1ba 0f00 	cmp.w	sl, #0
 8018972:	4607      	mov	r7, r0
 8018974:	f300 808d 	bgt.w	8018a92 <_dtoa_r+0x8a2>
 8018978:	9b06      	ldr	r3, [sp, #24]
 801897a:	2b02      	cmp	r3, #2
 801897c:	dc50      	bgt.n	8018a20 <_dtoa_r+0x830>
 801897e:	e088      	b.n	8018a92 <_dtoa_r+0x8a2>
 8018980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018982:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018986:	e751      	b.n	801882c <_dtoa_r+0x63c>
 8018988:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801898c:	42a3      	cmp	r3, r4
 801898e:	bfbf      	itttt	lt
 8018990:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8018992:	1ae3      	sublt	r3, r4, r3
 8018994:	18d2      	addlt	r2, r2, r3
 8018996:	9209      	strlt	r2, [sp, #36]	; 0x24
 8018998:	bfb6      	itet	lt
 801899a:	4623      	movlt	r3, r4
 801899c:	1b1c      	subge	r4, r3, r4
 801899e:	2400      	movlt	r4, #0
 80189a0:	f1b9 0f00 	cmp.w	r9, #0
 80189a4:	bfb5      	itete	lt
 80189a6:	9a04      	ldrlt	r2, [sp, #16]
 80189a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80189ac:	eba2 0809 	sublt.w	r8, r2, r9
 80189b0:	464a      	movge	r2, r9
 80189b2:	bfb8      	it	lt
 80189b4:	2200      	movlt	r2, #0
 80189b6:	e73c      	b.n	8018832 <_dtoa_r+0x642>
 80189b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80189bc:	9f07      	ldr	r7, [sp, #28]
 80189be:	461c      	mov	r4, r3
 80189c0:	e744      	b.n	801884c <_dtoa_r+0x65c>
 80189c2:	461a      	mov	r2, r3
 80189c4:	e770      	b.n	80188a8 <_dtoa_r+0x6b8>
 80189c6:	9b06      	ldr	r3, [sp, #24]
 80189c8:	2b01      	cmp	r3, #1
 80189ca:	dc18      	bgt.n	80189fe <_dtoa_r+0x80e>
 80189cc:	9b02      	ldr	r3, [sp, #8]
 80189ce:	b9b3      	cbnz	r3, 80189fe <_dtoa_r+0x80e>
 80189d0:	9b03      	ldr	r3, [sp, #12]
 80189d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80189d6:	b9a2      	cbnz	r2, 8018a02 <_dtoa_r+0x812>
 80189d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80189dc:	0d12      	lsrs	r2, r2, #20
 80189de:	0512      	lsls	r2, r2, #20
 80189e0:	b18a      	cbz	r2, 8018a06 <_dtoa_r+0x816>
 80189e2:	9b04      	ldr	r3, [sp, #16]
 80189e4:	3301      	adds	r3, #1
 80189e6:	9304      	str	r3, [sp, #16]
 80189e8:	9b05      	ldr	r3, [sp, #20]
 80189ea:	3301      	adds	r3, #1
 80189ec:	9305      	str	r3, [sp, #20]
 80189ee:	2301      	movs	r3, #1
 80189f0:	930a      	str	r3, [sp, #40]	; 0x28
 80189f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f47f af70 	bne.w	80188da <_dtoa_r+0x6ea>
 80189fa:	2001      	movs	r0, #1
 80189fc:	e775      	b.n	80188ea <_dtoa_r+0x6fa>
 80189fe:	2300      	movs	r3, #0
 8018a00:	e7f6      	b.n	80189f0 <_dtoa_r+0x800>
 8018a02:	9b02      	ldr	r3, [sp, #8]
 8018a04:	e7f4      	b.n	80189f0 <_dtoa_r+0x800>
 8018a06:	920a      	str	r2, [sp, #40]	; 0x28
 8018a08:	e7f3      	b.n	80189f2 <_dtoa_r+0x802>
 8018a0a:	d082      	beq.n	8018912 <_dtoa_r+0x722>
 8018a0c:	4610      	mov	r0, r2
 8018a0e:	301c      	adds	r0, #28
 8018a10:	e778      	b.n	8018904 <_dtoa_r+0x714>
 8018a12:	f1b9 0f00 	cmp.w	r9, #0
 8018a16:	dc37      	bgt.n	8018a88 <_dtoa_r+0x898>
 8018a18:	9b06      	ldr	r3, [sp, #24]
 8018a1a:	2b02      	cmp	r3, #2
 8018a1c:	dd34      	ble.n	8018a88 <_dtoa_r+0x898>
 8018a1e:	46ca      	mov	sl, r9
 8018a20:	f1ba 0f00 	cmp.w	sl, #0
 8018a24:	d10d      	bne.n	8018a42 <_dtoa_r+0x852>
 8018a26:	4621      	mov	r1, r4
 8018a28:	4653      	mov	r3, sl
 8018a2a:	2205      	movs	r2, #5
 8018a2c:	4630      	mov	r0, r6
 8018a2e:	f000 fe1d 	bl	801966c <__multadd>
 8018a32:	4601      	mov	r1, r0
 8018a34:	4604      	mov	r4, r0
 8018a36:	4628      	mov	r0, r5
 8018a38:	f001 f882 	bl	8019b40 <__mcmp>
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	f73f adeb 	bgt.w	8018618 <_dtoa_r+0x428>
 8018a42:	9b08      	ldr	r3, [sp, #32]
 8018a44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018a48:	ea6f 0b03 	mvn.w	fp, r3
 8018a4c:	f04f 0900 	mov.w	r9, #0
 8018a50:	4621      	mov	r1, r4
 8018a52:	4630      	mov	r0, r6
 8018a54:	f000 fde8 	bl	8019628 <_Bfree>
 8018a58:	2f00      	cmp	r7, #0
 8018a5a:	f43f aea8 	beq.w	80187ae <_dtoa_r+0x5be>
 8018a5e:	f1b9 0f00 	cmp.w	r9, #0
 8018a62:	d005      	beq.n	8018a70 <_dtoa_r+0x880>
 8018a64:	45b9      	cmp	r9, r7
 8018a66:	d003      	beq.n	8018a70 <_dtoa_r+0x880>
 8018a68:	4649      	mov	r1, r9
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	f000 fddc 	bl	8019628 <_Bfree>
 8018a70:	4639      	mov	r1, r7
 8018a72:	4630      	mov	r0, r6
 8018a74:	f000 fdd8 	bl	8019628 <_Bfree>
 8018a78:	e699      	b.n	80187ae <_dtoa_r+0x5be>
 8018a7a:	2400      	movs	r4, #0
 8018a7c:	4627      	mov	r7, r4
 8018a7e:	e7e0      	b.n	8018a42 <_dtoa_r+0x852>
 8018a80:	46bb      	mov	fp, r7
 8018a82:	4604      	mov	r4, r0
 8018a84:	4607      	mov	r7, r0
 8018a86:	e5c7      	b.n	8018618 <_dtoa_r+0x428>
 8018a88:	9b07      	ldr	r3, [sp, #28]
 8018a8a:	46ca      	mov	sl, r9
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f000 8100 	beq.w	8018c92 <_dtoa_r+0xaa2>
 8018a92:	f1b8 0f00 	cmp.w	r8, #0
 8018a96:	dd05      	ble.n	8018aa4 <_dtoa_r+0x8b4>
 8018a98:	4639      	mov	r1, r7
 8018a9a:	4642      	mov	r2, r8
 8018a9c:	4630      	mov	r0, r6
 8018a9e:	f000 ffdf 	bl	8019a60 <__lshift>
 8018aa2:	4607      	mov	r7, r0
 8018aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d05d      	beq.n	8018b66 <_dtoa_r+0x976>
 8018aaa:	6879      	ldr	r1, [r7, #4]
 8018aac:	4630      	mov	r0, r6
 8018aae:	f000 fd7b 	bl	80195a8 <_Balloc>
 8018ab2:	4680      	mov	r8, r0
 8018ab4:	b928      	cbnz	r0, 8018ac2 <_dtoa_r+0x8d2>
 8018ab6:	4b82      	ldr	r3, [pc, #520]	; (8018cc0 <_dtoa_r+0xad0>)
 8018ab8:	4602      	mov	r2, r0
 8018aba:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018abe:	f7ff bbaf 	b.w	8018220 <_dtoa_r+0x30>
 8018ac2:	693a      	ldr	r2, [r7, #16]
 8018ac4:	3202      	adds	r2, #2
 8018ac6:	0092      	lsls	r2, r2, #2
 8018ac8:	f107 010c 	add.w	r1, r7, #12
 8018acc:	300c      	adds	r0, #12
 8018ace:	f7fd fb37 	bl	8016140 <memcpy>
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	4641      	mov	r1, r8
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	f000 ffc2 	bl	8019a60 <__lshift>
 8018adc:	9b01      	ldr	r3, [sp, #4]
 8018ade:	3301      	adds	r3, #1
 8018ae0:	9304      	str	r3, [sp, #16]
 8018ae2:	9b01      	ldr	r3, [sp, #4]
 8018ae4:	4453      	add	r3, sl
 8018ae6:	9308      	str	r3, [sp, #32]
 8018ae8:	9b02      	ldr	r3, [sp, #8]
 8018aea:	f003 0301 	and.w	r3, r3, #1
 8018aee:	46b9      	mov	r9, r7
 8018af0:	9307      	str	r3, [sp, #28]
 8018af2:	4607      	mov	r7, r0
 8018af4:	9b04      	ldr	r3, [sp, #16]
 8018af6:	4621      	mov	r1, r4
 8018af8:	3b01      	subs	r3, #1
 8018afa:	4628      	mov	r0, r5
 8018afc:	9302      	str	r3, [sp, #8]
 8018afe:	f7ff faeb 	bl	80180d8 <quorem>
 8018b02:	4603      	mov	r3, r0
 8018b04:	3330      	adds	r3, #48	; 0x30
 8018b06:	9005      	str	r0, [sp, #20]
 8018b08:	4649      	mov	r1, r9
 8018b0a:	4628      	mov	r0, r5
 8018b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b0e:	f001 f817 	bl	8019b40 <__mcmp>
 8018b12:	463a      	mov	r2, r7
 8018b14:	4682      	mov	sl, r0
 8018b16:	4621      	mov	r1, r4
 8018b18:	4630      	mov	r0, r6
 8018b1a:	f001 f82d 	bl	8019b78 <__mdiff>
 8018b1e:	68c2      	ldr	r2, [r0, #12]
 8018b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b22:	4680      	mov	r8, r0
 8018b24:	bb0a      	cbnz	r2, 8018b6a <_dtoa_r+0x97a>
 8018b26:	4601      	mov	r1, r0
 8018b28:	4628      	mov	r0, r5
 8018b2a:	f001 f809 	bl	8019b40 <__mcmp>
 8018b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b30:	4602      	mov	r2, r0
 8018b32:	4641      	mov	r1, r8
 8018b34:	4630      	mov	r0, r6
 8018b36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018b3a:	f000 fd75 	bl	8019628 <_Bfree>
 8018b3e:	9b06      	ldr	r3, [sp, #24]
 8018b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018b46:	ea43 0102 	orr.w	r1, r3, r2
 8018b4a:	9b07      	ldr	r3, [sp, #28]
 8018b4c:	430b      	orrs	r3, r1
 8018b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b50:	d10d      	bne.n	8018b6e <_dtoa_r+0x97e>
 8018b52:	2b39      	cmp	r3, #57	; 0x39
 8018b54:	d029      	beq.n	8018baa <_dtoa_r+0x9ba>
 8018b56:	f1ba 0f00 	cmp.w	sl, #0
 8018b5a:	dd01      	ble.n	8018b60 <_dtoa_r+0x970>
 8018b5c:	9b05      	ldr	r3, [sp, #20]
 8018b5e:	3331      	adds	r3, #49	; 0x31
 8018b60:	9a02      	ldr	r2, [sp, #8]
 8018b62:	7013      	strb	r3, [r2, #0]
 8018b64:	e774      	b.n	8018a50 <_dtoa_r+0x860>
 8018b66:	4638      	mov	r0, r7
 8018b68:	e7b8      	b.n	8018adc <_dtoa_r+0x8ec>
 8018b6a:	2201      	movs	r2, #1
 8018b6c:	e7e1      	b.n	8018b32 <_dtoa_r+0x942>
 8018b6e:	f1ba 0f00 	cmp.w	sl, #0
 8018b72:	db06      	blt.n	8018b82 <_dtoa_r+0x992>
 8018b74:	9906      	ldr	r1, [sp, #24]
 8018b76:	ea41 0a0a 	orr.w	sl, r1, sl
 8018b7a:	9907      	ldr	r1, [sp, #28]
 8018b7c:	ea5a 0101 	orrs.w	r1, sl, r1
 8018b80:	d120      	bne.n	8018bc4 <_dtoa_r+0x9d4>
 8018b82:	2a00      	cmp	r2, #0
 8018b84:	ddec      	ble.n	8018b60 <_dtoa_r+0x970>
 8018b86:	4629      	mov	r1, r5
 8018b88:	2201      	movs	r2, #1
 8018b8a:	4630      	mov	r0, r6
 8018b8c:	9304      	str	r3, [sp, #16]
 8018b8e:	f000 ff67 	bl	8019a60 <__lshift>
 8018b92:	4621      	mov	r1, r4
 8018b94:	4605      	mov	r5, r0
 8018b96:	f000 ffd3 	bl	8019b40 <__mcmp>
 8018b9a:	2800      	cmp	r0, #0
 8018b9c:	9b04      	ldr	r3, [sp, #16]
 8018b9e:	dc02      	bgt.n	8018ba6 <_dtoa_r+0x9b6>
 8018ba0:	d1de      	bne.n	8018b60 <_dtoa_r+0x970>
 8018ba2:	07da      	lsls	r2, r3, #31
 8018ba4:	d5dc      	bpl.n	8018b60 <_dtoa_r+0x970>
 8018ba6:	2b39      	cmp	r3, #57	; 0x39
 8018ba8:	d1d8      	bne.n	8018b5c <_dtoa_r+0x96c>
 8018baa:	9a02      	ldr	r2, [sp, #8]
 8018bac:	2339      	movs	r3, #57	; 0x39
 8018bae:	7013      	strb	r3, [r2, #0]
 8018bb0:	4643      	mov	r3, r8
 8018bb2:	4698      	mov	r8, r3
 8018bb4:	3b01      	subs	r3, #1
 8018bb6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018bba:	2a39      	cmp	r2, #57	; 0x39
 8018bbc:	d051      	beq.n	8018c62 <_dtoa_r+0xa72>
 8018bbe:	3201      	adds	r2, #1
 8018bc0:	701a      	strb	r2, [r3, #0]
 8018bc2:	e745      	b.n	8018a50 <_dtoa_r+0x860>
 8018bc4:	2a00      	cmp	r2, #0
 8018bc6:	dd03      	ble.n	8018bd0 <_dtoa_r+0x9e0>
 8018bc8:	2b39      	cmp	r3, #57	; 0x39
 8018bca:	d0ee      	beq.n	8018baa <_dtoa_r+0x9ba>
 8018bcc:	3301      	adds	r3, #1
 8018bce:	e7c7      	b.n	8018b60 <_dtoa_r+0x970>
 8018bd0:	9a04      	ldr	r2, [sp, #16]
 8018bd2:	9908      	ldr	r1, [sp, #32]
 8018bd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018bd8:	428a      	cmp	r2, r1
 8018bda:	d02b      	beq.n	8018c34 <_dtoa_r+0xa44>
 8018bdc:	4629      	mov	r1, r5
 8018bde:	2300      	movs	r3, #0
 8018be0:	220a      	movs	r2, #10
 8018be2:	4630      	mov	r0, r6
 8018be4:	f000 fd42 	bl	801966c <__multadd>
 8018be8:	45b9      	cmp	r9, r7
 8018bea:	4605      	mov	r5, r0
 8018bec:	f04f 0300 	mov.w	r3, #0
 8018bf0:	f04f 020a 	mov.w	r2, #10
 8018bf4:	4649      	mov	r1, r9
 8018bf6:	4630      	mov	r0, r6
 8018bf8:	d107      	bne.n	8018c0a <_dtoa_r+0xa1a>
 8018bfa:	f000 fd37 	bl	801966c <__multadd>
 8018bfe:	4681      	mov	r9, r0
 8018c00:	4607      	mov	r7, r0
 8018c02:	9b04      	ldr	r3, [sp, #16]
 8018c04:	3301      	adds	r3, #1
 8018c06:	9304      	str	r3, [sp, #16]
 8018c08:	e774      	b.n	8018af4 <_dtoa_r+0x904>
 8018c0a:	f000 fd2f 	bl	801966c <__multadd>
 8018c0e:	4639      	mov	r1, r7
 8018c10:	4681      	mov	r9, r0
 8018c12:	2300      	movs	r3, #0
 8018c14:	220a      	movs	r2, #10
 8018c16:	4630      	mov	r0, r6
 8018c18:	f000 fd28 	bl	801966c <__multadd>
 8018c1c:	4607      	mov	r7, r0
 8018c1e:	e7f0      	b.n	8018c02 <_dtoa_r+0xa12>
 8018c20:	f1ba 0f00 	cmp.w	sl, #0
 8018c24:	9a01      	ldr	r2, [sp, #4]
 8018c26:	bfcc      	ite	gt
 8018c28:	46d0      	movgt	r8, sl
 8018c2a:	f04f 0801 	movle.w	r8, #1
 8018c2e:	4490      	add	r8, r2
 8018c30:	f04f 0900 	mov.w	r9, #0
 8018c34:	4629      	mov	r1, r5
 8018c36:	2201      	movs	r2, #1
 8018c38:	4630      	mov	r0, r6
 8018c3a:	9302      	str	r3, [sp, #8]
 8018c3c:	f000 ff10 	bl	8019a60 <__lshift>
 8018c40:	4621      	mov	r1, r4
 8018c42:	4605      	mov	r5, r0
 8018c44:	f000 ff7c 	bl	8019b40 <__mcmp>
 8018c48:	2800      	cmp	r0, #0
 8018c4a:	dcb1      	bgt.n	8018bb0 <_dtoa_r+0x9c0>
 8018c4c:	d102      	bne.n	8018c54 <_dtoa_r+0xa64>
 8018c4e:	9b02      	ldr	r3, [sp, #8]
 8018c50:	07db      	lsls	r3, r3, #31
 8018c52:	d4ad      	bmi.n	8018bb0 <_dtoa_r+0x9c0>
 8018c54:	4643      	mov	r3, r8
 8018c56:	4698      	mov	r8, r3
 8018c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c5c:	2a30      	cmp	r2, #48	; 0x30
 8018c5e:	d0fa      	beq.n	8018c56 <_dtoa_r+0xa66>
 8018c60:	e6f6      	b.n	8018a50 <_dtoa_r+0x860>
 8018c62:	9a01      	ldr	r2, [sp, #4]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d1a4      	bne.n	8018bb2 <_dtoa_r+0x9c2>
 8018c68:	f10b 0b01 	add.w	fp, fp, #1
 8018c6c:	2331      	movs	r3, #49	; 0x31
 8018c6e:	e778      	b.n	8018b62 <_dtoa_r+0x972>
 8018c70:	4b14      	ldr	r3, [pc, #80]	; (8018cc4 <_dtoa_r+0xad4>)
 8018c72:	f7ff bb27 	b.w	80182c4 <_dtoa_r+0xd4>
 8018c76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	f47f ab03 	bne.w	8018284 <_dtoa_r+0x94>
 8018c7e:	4b12      	ldr	r3, [pc, #72]	; (8018cc8 <_dtoa_r+0xad8>)
 8018c80:	f7ff bb20 	b.w	80182c4 <_dtoa_r+0xd4>
 8018c84:	f1ba 0f00 	cmp.w	sl, #0
 8018c88:	dc03      	bgt.n	8018c92 <_dtoa_r+0xaa2>
 8018c8a:	9b06      	ldr	r3, [sp, #24]
 8018c8c:	2b02      	cmp	r3, #2
 8018c8e:	f73f aec7 	bgt.w	8018a20 <_dtoa_r+0x830>
 8018c92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018c96:	4621      	mov	r1, r4
 8018c98:	4628      	mov	r0, r5
 8018c9a:	f7ff fa1d 	bl	80180d8 <quorem>
 8018c9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018ca2:	f808 3b01 	strb.w	r3, [r8], #1
 8018ca6:	9a01      	ldr	r2, [sp, #4]
 8018ca8:	eba8 0202 	sub.w	r2, r8, r2
 8018cac:	4592      	cmp	sl, r2
 8018cae:	ddb7      	ble.n	8018c20 <_dtoa_r+0xa30>
 8018cb0:	4629      	mov	r1, r5
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	220a      	movs	r2, #10
 8018cb6:	4630      	mov	r0, r6
 8018cb8:	f000 fcd8 	bl	801966c <__multadd>
 8018cbc:	4605      	mov	r5, r0
 8018cbe:	e7ea      	b.n	8018c96 <_dtoa_r+0xaa6>
 8018cc0:	0801e320 	.word	0x0801e320
 8018cc4:	0801e120 	.word	0x0801e120
 8018cc8:	0801e2a1 	.word	0x0801e2a1

08018ccc <__sflush_r>:
 8018ccc:	898a      	ldrh	r2, [r1, #12]
 8018cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd2:	4605      	mov	r5, r0
 8018cd4:	0710      	lsls	r0, r2, #28
 8018cd6:	460c      	mov	r4, r1
 8018cd8:	d458      	bmi.n	8018d8c <__sflush_r+0xc0>
 8018cda:	684b      	ldr	r3, [r1, #4]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	dc05      	bgt.n	8018cec <__sflush_r+0x20>
 8018ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	dc02      	bgt.n	8018cec <__sflush_r+0x20>
 8018ce6:	2000      	movs	r0, #0
 8018ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018cee:	2e00      	cmp	r6, #0
 8018cf0:	d0f9      	beq.n	8018ce6 <__sflush_r+0x1a>
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018cf8:	682f      	ldr	r7, [r5, #0]
 8018cfa:	602b      	str	r3, [r5, #0]
 8018cfc:	d032      	beq.n	8018d64 <__sflush_r+0x98>
 8018cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018d00:	89a3      	ldrh	r3, [r4, #12]
 8018d02:	075a      	lsls	r2, r3, #29
 8018d04:	d505      	bpl.n	8018d12 <__sflush_r+0x46>
 8018d06:	6863      	ldr	r3, [r4, #4]
 8018d08:	1ac0      	subs	r0, r0, r3
 8018d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d0c:	b10b      	cbz	r3, 8018d12 <__sflush_r+0x46>
 8018d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d10:	1ac0      	subs	r0, r0, r3
 8018d12:	2300      	movs	r3, #0
 8018d14:	4602      	mov	r2, r0
 8018d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d18:	6a21      	ldr	r1, [r4, #32]
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	47b0      	blx	r6
 8018d1e:	1c43      	adds	r3, r0, #1
 8018d20:	89a3      	ldrh	r3, [r4, #12]
 8018d22:	d106      	bne.n	8018d32 <__sflush_r+0x66>
 8018d24:	6829      	ldr	r1, [r5, #0]
 8018d26:	291d      	cmp	r1, #29
 8018d28:	d82c      	bhi.n	8018d84 <__sflush_r+0xb8>
 8018d2a:	4a2a      	ldr	r2, [pc, #168]	; (8018dd4 <__sflush_r+0x108>)
 8018d2c:	40ca      	lsrs	r2, r1
 8018d2e:	07d6      	lsls	r6, r2, #31
 8018d30:	d528      	bpl.n	8018d84 <__sflush_r+0xb8>
 8018d32:	2200      	movs	r2, #0
 8018d34:	6062      	str	r2, [r4, #4]
 8018d36:	04d9      	lsls	r1, r3, #19
 8018d38:	6922      	ldr	r2, [r4, #16]
 8018d3a:	6022      	str	r2, [r4, #0]
 8018d3c:	d504      	bpl.n	8018d48 <__sflush_r+0x7c>
 8018d3e:	1c42      	adds	r2, r0, #1
 8018d40:	d101      	bne.n	8018d46 <__sflush_r+0x7a>
 8018d42:	682b      	ldr	r3, [r5, #0]
 8018d44:	b903      	cbnz	r3, 8018d48 <__sflush_r+0x7c>
 8018d46:	6560      	str	r0, [r4, #84]	; 0x54
 8018d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d4a:	602f      	str	r7, [r5, #0]
 8018d4c:	2900      	cmp	r1, #0
 8018d4e:	d0ca      	beq.n	8018ce6 <__sflush_r+0x1a>
 8018d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d54:	4299      	cmp	r1, r3
 8018d56:	d002      	beq.n	8018d5e <__sflush_r+0x92>
 8018d58:	4628      	mov	r0, r5
 8018d5a:	f001 f8f9 	bl	8019f50 <_free_r>
 8018d5e:	2000      	movs	r0, #0
 8018d60:	6360      	str	r0, [r4, #52]	; 0x34
 8018d62:	e7c1      	b.n	8018ce8 <__sflush_r+0x1c>
 8018d64:	6a21      	ldr	r1, [r4, #32]
 8018d66:	2301      	movs	r3, #1
 8018d68:	4628      	mov	r0, r5
 8018d6a:	47b0      	blx	r6
 8018d6c:	1c41      	adds	r1, r0, #1
 8018d6e:	d1c7      	bne.n	8018d00 <__sflush_r+0x34>
 8018d70:	682b      	ldr	r3, [r5, #0]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d0c4      	beq.n	8018d00 <__sflush_r+0x34>
 8018d76:	2b1d      	cmp	r3, #29
 8018d78:	d001      	beq.n	8018d7e <__sflush_r+0xb2>
 8018d7a:	2b16      	cmp	r3, #22
 8018d7c:	d101      	bne.n	8018d82 <__sflush_r+0xb6>
 8018d7e:	602f      	str	r7, [r5, #0]
 8018d80:	e7b1      	b.n	8018ce6 <__sflush_r+0x1a>
 8018d82:	89a3      	ldrh	r3, [r4, #12]
 8018d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d88:	81a3      	strh	r3, [r4, #12]
 8018d8a:	e7ad      	b.n	8018ce8 <__sflush_r+0x1c>
 8018d8c:	690f      	ldr	r7, [r1, #16]
 8018d8e:	2f00      	cmp	r7, #0
 8018d90:	d0a9      	beq.n	8018ce6 <__sflush_r+0x1a>
 8018d92:	0793      	lsls	r3, r2, #30
 8018d94:	680e      	ldr	r6, [r1, #0]
 8018d96:	bf08      	it	eq
 8018d98:	694b      	ldreq	r3, [r1, #20]
 8018d9a:	600f      	str	r7, [r1, #0]
 8018d9c:	bf18      	it	ne
 8018d9e:	2300      	movne	r3, #0
 8018da0:	eba6 0807 	sub.w	r8, r6, r7
 8018da4:	608b      	str	r3, [r1, #8]
 8018da6:	f1b8 0f00 	cmp.w	r8, #0
 8018daa:	dd9c      	ble.n	8018ce6 <__sflush_r+0x1a>
 8018dac:	6a21      	ldr	r1, [r4, #32]
 8018dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018db0:	4643      	mov	r3, r8
 8018db2:	463a      	mov	r2, r7
 8018db4:	4628      	mov	r0, r5
 8018db6:	47b0      	blx	r6
 8018db8:	2800      	cmp	r0, #0
 8018dba:	dc06      	bgt.n	8018dca <__sflush_r+0xfe>
 8018dbc:	89a3      	ldrh	r3, [r4, #12]
 8018dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018dc2:	81a3      	strh	r3, [r4, #12]
 8018dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018dc8:	e78e      	b.n	8018ce8 <__sflush_r+0x1c>
 8018dca:	4407      	add	r7, r0
 8018dcc:	eba8 0800 	sub.w	r8, r8, r0
 8018dd0:	e7e9      	b.n	8018da6 <__sflush_r+0xda>
 8018dd2:	bf00      	nop
 8018dd4:	20400001 	.word	0x20400001

08018dd8 <_fflush_r>:
 8018dd8:	b538      	push	{r3, r4, r5, lr}
 8018dda:	690b      	ldr	r3, [r1, #16]
 8018ddc:	4605      	mov	r5, r0
 8018dde:	460c      	mov	r4, r1
 8018de0:	b913      	cbnz	r3, 8018de8 <_fflush_r+0x10>
 8018de2:	2500      	movs	r5, #0
 8018de4:	4628      	mov	r0, r5
 8018de6:	bd38      	pop	{r3, r4, r5, pc}
 8018de8:	b118      	cbz	r0, 8018df2 <_fflush_r+0x1a>
 8018dea:	6983      	ldr	r3, [r0, #24]
 8018dec:	b90b      	cbnz	r3, 8018df2 <_fflush_r+0x1a>
 8018dee:	f7fd f8e1 	bl	8015fb4 <__sinit>
 8018df2:	4b14      	ldr	r3, [pc, #80]	; (8018e44 <_fflush_r+0x6c>)
 8018df4:	429c      	cmp	r4, r3
 8018df6:	d11b      	bne.n	8018e30 <_fflush_r+0x58>
 8018df8:	686c      	ldr	r4, [r5, #4]
 8018dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d0ef      	beq.n	8018de2 <_fflush_r+0xa>
 8018e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018e04:	07d0      	lsls	r0, r2, #31
 8018e06:	d404      	bmi.n	8018e12 <_fflush_r+0x3a>
 8018e08:	0599      	lsls	r1, r3, #22
 8018e0a:	d402      	bmi.n	8018e12 <_fflush_r+0x3a>
 8018e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e0e:	f7fd f994 	bl	801613a <__retarget_lock_acquire_recursive>
 8018e12:	4628      	mov	r0, r5
 8018e14:	4621      	mov	r1, r4
 8018e16:	f7ff ff59 	bl	8018ccc <__sflush_r>
 8018e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e1c:	07da      	lsls	r2, r3, #31
 8018e1e:	4605      	mov	r5, r0
 8018e20:	d4e0      	bmi.n	8018de4 <_fflush_r+0xc>
 8018e22:	89a3      	ldrh	r3, [r4, #12]
 8018e24:	059b      	lsls	r3, r3, #22
 8018e26:	d4dd      	bmi.n	8018de4 <_fflush_r+0xc>
 8018e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e2a:	f7fd f988 	bl	801613e <__retarget_lock_release_recursive>
 8018e2e:	e7d9      	b.n	8018de4 <_fflush_r+0xc>
 8018e30:	4b05      	ldr	r3, [pc, #20]	; (8018e48 <_fflush_r+0x70>)
 8018e32:	429c      	cmp	r4, r3
 8018e34:	d101      	bne.n	8018e3a <_fflush_r+0x62>
 8018e36:	68ac      	ldr	r4, [r5, #8]
 8018e38:	e7df      	b.n	8018dfa <_fflush_r+0x22>
 8018e3a:	4b04      	ldr	r3, [pc, #16]	; (8018e4c <_fflush_r+0x74>)
 8018e3c:	429c      	cmp	r4, r3
 8018e3e:	bf08      	it	eq
 8018e40:	68ec      	ldreq	r4, [r5, #12]
 8018e42:	e7da      	b.n	8018dfa <_fflush_r+0x22>
 8018e44:	0801e0cc 	.word	0x0801e0cc
 8018e48:	0801e0ec 	.word	0x0801e0ec
 8018e4c:	0801e0ac 	.word	0x0801e0ac

08018e50 <rshift>:
 8018e50:	6903      	ldr	r3, [r0, #16]
 8018e52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018e5e:	f100 0414 	add.w	r4, r0, #20
 8018e62:	dd45      	ble.n	8018ef0 <rshift+0xa0>
 8018e64:	f011 011f 	ands.w	r1, r1, #31
 8018e68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018e6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018e70:	d10c      	bne.n	8018e8c <rshift+0x3c>
 8018e72:	f100 0710 	add.w	r7, r0, #16
 8018e76:	4629      	mov	r1, r5
 8018e78:	42b1      	cmp	r1, r6
 8018e7a:	d334      	bcc.n	8018ee6 <rshift+0x96>
 8018e7c:	1a9b      	subs	r3, r3, r2
 8018e7e:	009b      	lsls	r3, r3, #2
 8018e80:	1eea      	subs	r2, r5, #3
 8018e82:	4296      	cmp	r6, r2
 8018e84:	bf38      	it	cc
 8018e86:	2300      	movcc	r3, #0
 8018e88:	4423      	add	r3, r4
 8018e8a:	e015      	b.n	8018eb8 <rshift+0x68>
 8018e8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018e90:	f1c1 0820 	rsb	r8, r1, #32
 8018e94:	40cf      	lsrs	r7, r1
 8018e96:	f105 0e04 	add.w	lr, r5, #4
 8018e9a:	46a1      	mov	r9, r4
 8018e9c:	4576      	cmp	r6, lr
 8018e9e:	46f4      	mov	ip, lr
 8018ea0:	d815      	bhi.n	8018ece <rshift+0x7e>
 8018ea2:	1a9a      	subs	r2, r3, r2
 8018ea4:	0092      	lsls	r2, r2, #2
 8018ea6:	3a04      	subs	r2, #4
 8018ea8:	3501      	adds	r5, #1
 8018eaa:	42ae      	cmp	r6, r5
 8018eac:	bf38      	it	cc
 8018eae:	2200      	movcc	r2, #0
 8018eb0:	18a3      	adds	r3, r4, r2
 8018eb2:	50a7      	str	r7, [r4, r2]
 8018eb4:	b107      	cbz	r7, 8018eb8 <rshift+0x68>
 8018eb6:	3304      	adds	r3, #4
 8018eb8:	1b1a      	subs	r2, r3, r4
 8018eba:	42a3      	cmp	r3, r4
 8018ebc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018ec0:	bf08      	it	eq
 8018ec2:	2300      	moveq	r3, #0
 8018ec4:	6102      	str	r2, [r0, #16]
 8018ec6:	bf08      	it	eq
 8018ec8:	6143      	streq	r3, [r0, #20]
 8018eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ece:	f8dc c000 	ldr.w	ip, [ip]
 8018ed2:	fa0c fc08 	lsl.w	ip, ip, r8
 8018ed6:	ea4c 0707 	orr.w	r7, ip, r7
 8018eda:	f849 7b04 	str.w	r7, [r9], #4
 8018ede:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018ee2:	40cf      	lsrs	r7, r1
 8018ee4:	e7da      	b.n	8018e9c <rshift+0x4c>
 8018ee6:	f851 cb04 	ldr.w	ip, [r1], #4
 8018eea:	f847 cf04 	str.w	ip, [r7, #4]!
 8018eee:	e7c3      	b.n	8018e78 <rshift+0x28>
 8018ef0:	4623      	mov	r3, r4
 8018ef2:	e7e1      	b.n	8018eb8 <rshift+0x68>

08018ef4 <__hexdig_fun>:
 8018ef4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018ef8:	2b09      	cmp	r3, #9
 8018efa:	d802      	bhi.n	8018f02 <__hexdig_fun+0xe>
 8018efc:	3820      	subs	r0, #32
 8018efe:	b2c0      	uxtb	r0, r0
 8018f00:	4770      	bx	lr
 8018f02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018f06:	2b05      	cmp	r3, #5
 8018f08:	d801      	bhi.n	8018f0e <__hexdig_fun+0x1a>
 8018f0a:	3847      	subs	r0, #71	; 0x47
 8018f0c:	e7f7      	b.n	8018efe <__hexdig_fun+0xa>
 8018f0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018f12:	2b05      	cmp	r3, #5
 8018f14:	d801      	bhi.n	8018f1a <__hexdig_fun+0x26>
 8018f16:	3827      	subs	r0, #39	; 0x27
 8018f18:	e7f1      	b.n	8018efe <__hexdig_fun+0xa>
 8018f1a:	2000      	movs	r0, #0
 8018f1c:	4770      	bx	lr
	...

08018f20 <__gethex>:
 8018f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f24:	ed2d 8b02 	vpush	{d8}
 8018f28:	b089      	sub	sp, #36	; 0x24
 8018f2a:	ee08 0a10 	vmov	s16, r0
 8018f2e:	9304      	str	r3, [sp, #16]
 8018f30:	4bb4      	ldr	r3, [pc, #720]	; (8019204 <__gethex+0x2e4>)
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	9301      	str	r3, [sp, #4]
 8018f36:	4618      	mov	r0, r3
 8018f38:	468b      	mov	fp, r1
 8018f3a:	4690      	mov	r8, r2
 8018f3c:	f7e7 f9da 	bl	80002f4 <strlen>
 8018f40:	9b01      	ldr	r3, [sp, #4]
 8018f42:	f8db 2000 	ldr.w	r2, [fp]
 8018f46:	4403      	add	r3, r0
 8018f48:	4682      	mov	sl, r0
 8018f4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018f4e:	9305      	str	r3, [sp, #20]
 8018f50:	1c93      	adds	r3, r2, #2
 8018f52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018f56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018f5a:	32fe      	adds	r2, #254	; 0xfe
 8018f5c:	18d1      	adds	r1, r2, r3
 8018f5e:	461f      	mov	r7, r3
 8018f60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018f64:	9100      	str	r1, [sp, #0]
 8018f66:	2830      	cmp	r0, #48	; 0x30
 8018f68:	d0f8      	beq.n	8018f5c <__gethex+0x3c>
 8018f6a:	f7ff ffc3 	bl	8018ef4 <__hexdig_fun>
 8018f6e:	4604      	mov	r4, r0
 8018f70:	2800      	cmp	r0, #0
 8018f72:	d13a      	bne.n	8018fea <__gethex+0xca>
 8018f74:	9901      	ldr	r1, [sp, #4]
 8018f76:	4652      	mov	r2, sl
 8018f78:	4638      	mov	r0, r7
 8018f7a:	f001 f9ad 	bl	801a2d8 <strncmp>
 8018f7e:	4605      	mov	r5, r0
 8018f80:	2800      	cmp	r0, #0
 8018f82:	d168      	bne.n	8019056 <__gethex+0x136>
 8018f84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018f88:	eb07 060a 	add.w	r6, r7, sl
 8018f8c:	f7ff ffb2 	bl	8018ef4 <__hexdig_fun>
 8018f90:	2800      	cmp	r0, #0
 8018f92:	d062      	beq.n	801905a <__gethex+0x13a>
 8018f94:	4633      	mov	r3, r6
 8018f96:	7818      	ldrb	r0, [r3, #0]
 8018f98:	2830      	cmp	r0, #48	; 0x30
 8018f9a:	461f      	mov	r7, r3
 8018f9c:	f103 0301 	add.w	r3, r3, #1
 8018fa0:	d0f9      	beq.n	8018f96 <__gethex+0x76>
 8018fa2:	f7ff ffa7 	bl	8018ef4 <__hexdig_fun>
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	fab0 f480 	clz	r4, r0
 8018fac:	0964      	lsrs	r4, r4, #5
 8018fae:	4635      	mov	r5, r6
 8018fb0:	9300      	str	r3, [sp, #0]
 8018fb2:	463a      	mov	r2, r7
 8018fb4:	4616      	mov	r6, r2
 8018fb6:	3201      	adds	r2, #1
 8018fb8:	7830      	ldrb	r0, [r6, #0]
 8018fba:	f7ff ff9b 	bl	8018ef4 <__hexdig_fun>
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	d1f8      	bne.n	8018fb4 <__gethex+0x94>
 8018fc2:	9901      	ldr	r1, [sp, #4]
 8018fc4:	4652      	mov	r2, sl
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f001 f986 	bl	801a2d8 <strncmp>
 8018fcc:	b980      	cbnz	r0, 8018ff0 <__gethex+0xd0>
 8018fce:	b94d      	cbnz	r5, 8018fe4 <__gethex+0xc4>
 8018fd0:	eb06 050a 	add.w	r5, r6, sl
 8018fd4:	462a      	mov	r2, r5
 8018fd6:	4616      	mov	r6, r2
 8018fd8:	3201      	adds	r2, #1
 8018fda:	7830      	ldrb	r0, [r6, #0]
 8018fdc:	f7ff ff8a 	bl	8018ef4 <__hexdig_fun>
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	d1f8      	bne.n	8018fd6 <__gethex+0xb6>
 8018fe4:	1bad      	subs	r5, r5, r6
 8018fe6:	00ad      	lsls	r5, r5, #2
 8018fe8:	e004      	b.n	8018ff4 <__gethex+0xd4>
 8018fea:	2400      	movs	r4, #0
 8018fec:	4625      	mov	r5, r4
 8018fee:	e7e0      	b.n	8018fb2 <__gethex+0x92>
 8018ff0:	2d00      	cmp	r5, #0
 8018ff2:	d1f7      	bne.n	8018fe4 <__gethex+0xc4>
 8018ff4:	7833      	ldrb	r3, [r6, #0]
 8018ff6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018ffa:	2b50      	cmp	r3, #80	; 0x50
 8018ffc:	d13b      	bne.n	8019076 <__gethex+0x156>
 8018ffe:	7873      	ldrb	r3, [r6, #1]
 8019000:	2b2b      	cmp	r3, #43	; 0x2b
 8019002:	d02c      	beq.n	801905e <__gethex+0x13e>
 8019004:	2b2d      	cmp	r3, #45	; 0x2d
 8019006:	d02e      	beq.n	8019066 <__gethex+0x146>
 8019008:	1c71      	adds	r1, r6, #1
 801900a:	f04f 0900 	mov.w	r9, #0
 801900e:	7808      	ldrb	r0, [r1, #0]
 8019010:	f7ff ff70 	bl	8018ef4 <__hexdig_fun>
 8019014:	1e43      	subs	r3, r0, #1
 8019016:	b2db      	uxtb	r3, r3
 8019018:	2b18      	cmp	r3, #24
 801901a:	d82c      	bhi.n	8019076 <__gethex+0x156>
 801901c:	f1a0 0210 	sub.w	r2, r0, #16
 8019020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019024:	f7ff ff66 	bl	8018ef4 <__hexdig_fun>
 8019028:	1e43      	subs	r3, r0, #1
 801902a:	b2db      	uxtb	r3, r3
 801902c:	2b18      	cmp	r3, #24
 801902e:	d91d      	bls.n	801906c <__gethex+0x14c>
 8019030:	f1b9 0f00 	cmp.w	r9, #0
 8019034:	d000      	beq.n	8019038 <__gethex+0x118>
 8019036:	4252      	negs	r2, r2
 8019038:	4415      	add	r5, r2
 801903a:	f8cb 1000 	str.w	r1, [fp]
 801903e:	b1e4      	cbz	r4, 801907a <__gethex+0x15a>
 8019040:	9b00      	ldr	r3, [sp, #0]
 8019042:	2b00      	cmp	r3, #0
 8019044:	bf14      	ite	ne
 8019046:	2700      	movne	r7, #0
 8019048:	2706      	moveq	r7, #6
 801904a:	4638      	mov	r0, r7
 801904c:	b009      	add	sp, #36	; 0x24
 801904e:	ecbd 8b02 	vpop	{d8}
 8019052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019056:	463e      	mov	r6, r7
 8019058:	4625      	mov	r5, r4
 801905a:	2401      	movs	r4, #1
 801905c:	e7ca      	b.n	8018ff4 <__gethex+0xd4>
 801905e:	f04f 0900 	mov.w	r9, #0
 8019062:	1cb1      	adds	r1, r6, #2
 8019064:	e7d3      	b.n	801900e <__gethex+0xee>
 8019066:	f04f 0901 	mov.w	r9, #1
 801906a:	e7fa      	b.n	8019062 <__gethex+0x142>
 801906c:	230a      	movs	r3, #10
 801906e:	fb03 0202 	mla	r2, r3, r2, r0
 8019072:	3a10      	subs	r2, #16
 8019074:	e7d4      	b.n	8019020 <__gethex+0x100>
 8019076:	4631      	mov	r1, r6
 8019078:	e7df      	b.n	801903a <__gethex+0x11a>
 801907a:	1bf3      	subs	r3, r6, r7
 801907c:	3b01      	subs	r3, #1
 801907e:	4621      	mov	r1, r4
 8019080:	2b07      	cmp	r3, #7
 8019082:	dc0b      	bgt.n	801909c <__gethex+0x17c>
 8019084:	ee18 0a10 	vmov	r0, s16
 8019088:	f000 fa8e 	bl	80195a8 <_Balloc>
 801908c:	4604      	mov	r4, r0
 801908e:	b940      	cbnz	r0, 80190a2 <__gethex+0x182>
 8019090:	4b5d      	ldr	r3, [pc, #372]	; (8019208 <__gethex+0x2e8>)
 8019092:	4602      	mov	r2, r0
 8019094:	21de      	movs	r1, #222	; 0xde
 8019096:	485d      	ldr	r0, [pc, #372]	; (801920c <__gethex+0x2ec>)
 8019098:	f001 f940 	bl	801a31c <__assert_func>
 801909c:	3101      	adds	r1, #1
 801909e:	105b      	asrs	r3, r3, #1
 80190a0:	e7ee      	b.n	8019080 <__gethex+0x160>
 80190a2:	f100 0914 	add.w	r9, r0, #20
 80190a6:	f04f 0b00 	mov.w	fp, #0
 80190aa:	f1ca 0301 	rsb	r3, sl, #1
 80190ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80190b2:	f8cd b000 	str.w	fp, [sp]
 80190b6:	9306      	str	r3, [sp, #24]
 80190b8:	42b7      	cmp	r7, r6
 80190ba:	d340      	bcc.n	801913e <__gethex+0x21e>
 80190bc:	9802      	ldr	r0, [sp, #8]
 80190be:	9b00      	ldr	r3, [sp, #0]
 80190c0:	f840 3b04 	str.w	r3, [r0], #4
 80190c4:	eba0 0009 	sub.w	r0, r0, r9
 80190c8:	1080      	asrs	r0, r0, #2
 80190ca:	0146      	lsls	r6, r0, #5
 80190cc:	6120      	str	r0, [r4, #16]
 80190ce:	4618      	mov	r0, r3
 80190d0:	f000 fb5c 	bl	801978c <__hi0bits>
 80190d4:	1a30      	subs	r0, r6, r0
 80190d6:	f8d8 6000 	ldr.w	r6, [r8]
 80190da:	42b0      	cmp	r0, r6
 80190dc:	dd63      	ble.n	80191a6 <__gethex+0x286>
 80190de:	1b87      	subs	r7, r0, r6
 80190e0:	4639      	mov	r1, r7
 80190e2:	4620      	mov	r0, r4
 80190e4:	f000 fefd 	bl	8019ee2 <__any_on>
 80190e8:	4682      	mov	sl, r0
 80190ea:	b1a8      	cbz	r0, 8019118 <__gethex+0x1f8>
 80190ec:	1e7b      	subs	r3, r7, #1
 80190ee:	1159      	asrs	r1, r3, #5
 80190f0:	f003 021f 	and.w	r2, r3, #31
 80190f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80190f8:	f04f 0a01 	mov.w	sl, #1
 80190fc:	fa0a f202 	lsl.w	r2, sl, r2
 8019100:	420a      	tst	r2, r1
 8019102:	d009      	beq.n	8019118 <__gethex+0x1f8>
 8019104:	4553      	cmp	r3, sl
 8019106:	dd05      	ble.n	8019114 <__gethex+0x1f4>
 8019108:	1eb9      	subs	r1, r7, #2
 801910a:	4620      	mov	r0, r4
 801910c:	f000 fee9 	bl	8019ee2 <__any_on>
 8019110:	2800      	cmp	r0, #0
 8019112:	d145      	bne.n	80191a0 <__gethex+0x280>
 8019114:	f04f 0a02 	mov.w	sl, #2
 8019118:	4639      	mov	r1, r7
 801911a:	4620      	mov	r0, r4
 801911c:	f7ff fe98 	bl	8018e50 <rshift>
 8019120:	443d      	add	r5, r7
 8019122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019126:	42ab      	cmp	r3, r5
 8019128:	da4c      	bge.n	80191c4 <__gethex+0x2a4>
 801912a:	ee18 0a10 	vmov	r0, s16
 801912e:	4621      	mov	r1, r4
 8019130:	f000 fa7a 	bl	8019628 <_Bfree>
 8019134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019136:	2300      	movs	r3, #0
 8019138:	6013      	str	r3, [r2, #0]
 801913a:	27a3      	movs	r7, #163	; 0xa3
 801913c:	e785      	b.n	801904a <__gethex+0x12a>
 801913e:	1e73      	subs	r3, r6, #1
 8019140:	9a05      	ldr	r2, [sp, #20]
 8019142:	9303      	str	r3, [sp, #12]
 8019144:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019148:	4293      	cmp	r3, r2
 801914a:	d019      	beq.n	8019180 <__gethex+0x260>
 801914c:	f1bb 0f20 	cmp.w	fp, #32
 8019150:	d107      	bne.n	8019162 <__gethex+0x242>
 8019152:	9b02      	ldr	r3, [sp, #8]
 8019154:	9a00      	ldr	r2, [sp, #0]
 8019156:	f843 2b04 	str.w	r2, [r3], #4
 801915a:	9302      	str	r3, [sp, #8]
 801915c:	2300      	movs	r3, #0
 801915e:	9300      	str	r3, [sp, #0]
 8019160:	469b      	mov	fp, r3
 8019162:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019166:	f7ff fec5 	bl	8018ef4 <__hexdig_fun>
 801916a:	9b00      	ldr	r3, [sp, #0]
 801916c:	f000 000f 	and.w	r0, r0, #15
 8019170:	fa00 f00b 	lsl.w	r0, r0, fp
 8019174:	4303      	orrs	r3, r0
 8019176:	9300      	str	r3, [sp, #0]
 8019178:	f10b 0b04 	add.w	fp, fp, #4
 801917c:	9b03      	ldr	r3, [sp, #12]
 801917e:	e00d      	b.n	801919c <__gethex+0x27c>
 8019180:	9b03      	ldr	r3, [sp, #12]
 8019182:	9a06      	ldr	r2, [sp, #24]
 8019184:	4413      	add	r3, r2
 8019186:	42bb      	cmp	r3, r7
 8019188:	d3e0      	bcc.n	801914c <__gethex+0x22c>
 801918a:	4618      	mov	r0, r3
 801918c:	9901      	ldr	r1, [sp, #4]
 801918e:	9307      	str	r3, [sp, #28]
 8019190:	4652      	mov	r2, sl
 8019192:	f001 f8a1 	bl	801a2d8 <strncmp>
 8019196:	9b07      	ldr	r3, [sp, #28]
 8019198:	2800      	cmp	r0, #0
 801919a:	d1d7      	bne.n	801914c <__gethex+0x22c>
 801919c:	461e      	mov	r6, r3
 801919e:	e78b      	b.n	80190b8 <__gethex+0x198>
 80191a0:	f04f 0a03 	mov.w	sl, #3
 80191a4:	e7b8      	b.n	8019118 <__gethex+0x1f8>
 80191a6:	da0a      	bge.n	80191be <__gethex+0x29e>
 80191a8:	1a37      	subs	r7, r6, r0
 80191aa:	4621      	mov	r1, r4
 80191ac:	ee18 0a10 	vmov	r0, s16
 80191b0:	463a      	mov	r2, r7
 80191b2:	f000 fc55 	bl	8019a60 <__lshift>
 80191b6:	1bed      	subs	r5, r5, r7
 80191b8:	4604      	mov	r4, r0
 80191ba:	f100 0914 	add.w	r9, r0, #20
 80191be:	f04f 0a00 	mov.w	sl, #0
 80191c2:	e7ae      	b.n	8019122 <__gethex+0x202>
 80191c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80191c8:	42a8      	cmp	r0, r5
 80191ca:	dd72      	ble.n	80192b2 <__gethex+0x392>
 80191cc:	1b45      	subs	r5, r0, r5
 80191ce:	42ae      	cmp	r6, r5
 80191d0:	dc36      	bgt.n	8019240 <__gethex+0x320>
 80191d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191d6:	2b02      	cmp	r3, #2
 80191d8:	d02a      	beq.n	8019230 <__gethex+0x310>
 80191da:	2b03      	cmp	r3, #3
 80191dc:	d02c      	beq.n	8019238 <__gethex+0x318>
 80191de:	2b01      	cmp	r3, #1
 80191e0:	d11c      	bne.n	801921c <__gethex+0x2fc>
 80191e2:	42ae      	cmp	r6, r5
 80191e4:	d11a      	bne.n	801921c <__gethex+0x2fc>
 80191e6:	2e01      	cmp	r6, #1
 80191e8:	d112      	bne.n	8019210 <__gethex+0x2f0>
 80191ea:	9a04      	ldr	r2, [sp, #16]
 80191ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80191f0:	6013      	str	r3, [r2, #0]
 80191f2:	2301      	movs	r3, #1
 80191f4:	6123      	str	r3, [r4, #16]
 80191f6:	f8c9 3000 	str.w	r3, [r9]
 80191fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80191fc:	2762      	movs	r7, #98	; 0x62
 80191fe:	601c      	str	r4, [r3, #0]
 8019200:	e723      	b.n	801904a <__gethex+0x12a>
 8019202:	bf00      	nop
 8019204:	0801e394 	.word	0x0801e394
 8019208:	0801e320 	.word	0x0801e320
 801920c:	0801e331 	.word	0x0801e331
 8019210:	1e71      	subs	r1, r6, #1
 8019212:	4620      	mov	r0, r4
 8019214:	f000 fe65 	bl	8019ee2 <__any_on>
 8019218:	2800      	cmp	r0, #0
 801921a:	d1e6      	bne.n	80191ea <__gethex+0x2ca>
 801921c:	ee18 0a10 	vmov	r0, s16
 8019220:	4621      	mov	r1, r4
 8019222:	f000 fa01 	bl	8019628 <_Bfree>
 8019226:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019228:	2300      	movs	r3, #0
 801922a:	6013      	str	r3, [r2, #0]
 801922c:	2750      	movs	r7, #80	; 0x50
 801922e:	e70c      	b.n	801904a <__gethex+0x12a>
 8019230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019232:	2b00      	cmp	r3, #0
 8019234:	d1f2      	bne.n	801921c <__gethex+0x2fc>
 8019236:	e7d8      	b.n	80191ea <__gethex+0x2ca>
 8019238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801923a:	2b00      	cmp	r3, #0
 801923c:	d1d5      	bne.n	80191ea <__gethex+0x2ca>
 801923e:	e7ed      	b.n	801921c <__gethex+0x2fc>
 8019240:	1e6f      	subs	r7, r5, #1
 8019242:	f1ba 0f00 	cmp.w	sl, #0
 8019246:	d131      	bne.n	80192ac <__gethex+0x38c>
 8019248:	b127      	cbz	r7, 8019254 <__gethex+0x334>
 801924a:	4639      	mov	r1, r7
 801924c:	4620      	mov	r0, r4
 801924e:	f000 fe48 	bl	8019ee2 <__any_on>
 8019252:	4682      	mov	sl, r0
 8019254:	117b      	asrs	r3, r7, #5
 8019256:	2101      	movs	r1, #1
 8019258:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801925c:	f007 071f 	and.w	r7, r7, #31
 8019260:	fa01 f707 	lsl.w	r7, r1, r7
 8019264:	421f      	tst	r7, r3
 8019266:	4629      	mov	r1, r5
 8019268:	4620      	mov	r0, r4
 801926a:	bf18      	it	ne
 801926c:	f04a 0a02 	orrne.w	sl, sl, #2
 8019270:	1b76      	subs	r6, r6, r5
 8019272:	f7ff fded 	bl	8018e50 <rshift>
 8019276:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801927a:	2702      	movs	r7, #2
 801927c:	f1ba 0f00 	cmp.w	sl, #0
 8019280:	d048      	beq.n	8019314 <__gethex+0x3f4>
 8019282:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019286:	2b02      	cmp	r3, #2
 8019288:	d015      	beq.n	80192b6 <__gethex+0x396>
 801928a:	2b03      	cmp	r3, #3
 801928c:	d017      	beq.n	80192be <__gethex+0x39e>
 801928e:	2b01      	cmp	r3, #1
 8019290:	d109      	bne.n	80192a6 <__gethex+0x386>
 8019292:	f01a 0f02 	tst.w	sl, #2
 8019296:	d006      	beq.n	80192a6 <__gethex+0x386>
 8019298:	f8d9 0000 	ldr.w	r0, [r9]
 801929c:	ea4a 0a00 	orr.w	sl, sl, r0
 80192a0:	f01a 0f01 	tst.w	sl, #1
 80192a4:	d10e      	bne.n	80192c4 <__gethex+0x3a4>
 80192a6:	f047 0710 	orr.w	r7, r7, #16
 80192aa:	e033      	b.n	8019314 <__gethex+0x3f4>
 80192ac:	f04f 0a01 	mov.w	sl, #1
 80192b0:	e7d0      	b.n	8019254 <__gethex+0x334>
 80192b2:	2701      	movs	r7, #1
 80192b4:	e7e2      	b.n	801927c <__gethex+0x35c>
 80192b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192b8:	f1c3 0301 	rsb	r3, r3, #1
 80192bc:	9315      	str	r3, [sp, #84]	; 0x54
 80192be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d0f0      	beq.n	80192a6 <__gethex+0x386>
 80192c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80192c8:	f104 0314 	add.w	r3, r4, #20
 80192cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80192d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80192d4:	f04f 0c00 	mov.w	ip, #0
 80192d8:	4618      	mov	r0, r3
 80192da:	f853 2b04 	ldr.w	r2, [r3], #4
 80192de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80192e2:	d01c      	beq.n	801931e <__gethex+0x3fe>
 80192e4:	3201      	adds	r2, #1
 80192e6:	6002      	str	r2, [r0, #0]
 80192e8:	2f02      	cmp	r7, #2
 80192ea:	f104 0314 	add.w	r3, r4, #20
 80192ee:	d13f      	bne.n	8019370 <__gethex+0x450>
 80192f0:	f8d8 2000 	ldr.w	r2, [r8]
 80192f4:	3a01      	subs	r2, #1
 80192f6:	42b2      	cmp	r2, r6
 80192f8:	d10a      	bne.n	8019310 <__gethex+0x3f0>
 80192fa:	1171      	asrs	r1, r6, #5
 80192fc:	2201      	movs	r2, #1
 80192fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019302:	f006 061f 	and.w	r6, r6, #31
 8019306:	fa02 f606 	lsl.w	r6, r2, r6
 801930a:	421e      	tst	r6, r3
 801930c:	bf18      	it	ne
 801930e:	4617      	movne	r7, r2
 8019310:	f047 0720 	orr.w	r7, r7, #32
 8019314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019316:	601c      	str	r4, [r3, #0]
 8019318:	9b04      	ldr	r3, [sp, #16]
 801931a:	601d      	str	r5, [r3, #0]
 801931c:	e695      	b.n	801904a <__gethex+0x12a>
 801931e:	4299      	cmp	r1, r3
 8019320:	f843 cc04 	str.w	ip, [r3, #-4]
 8019324:	d8d8      	bhi.n	80192d8 <__gethex+0x3b8>
 8019326:	68a3      	ldr	r3, [r4, #8]
 8019328:	459b      	cmp	fp, r3
 801932a:	db19      	blt.n	8019360 <__gethex+0x440>
 801932c:	6861      	ldr	r1, [r4, #4]
 801932e:	ee18 0a10 	vmov	r0, s16
 8019332:	3101      	adds	r1, #1
 8019334:	f000 f938 	bl	80195a8 <_Balloc>
 8019338:	4681      	mov	r9, r0
 801933a:	b918      	cbnz	r0, 8019344 <__gethex+0x424>
 801933c:	4b1a      	ldr	r3, [pc, #104]	; (80193a8 <__gethex+0x488>)
 801933e:	4602      	mov	r2, r0
 8019340:	2184      	movs	r1, #132	; 0x84
 8019342:	e6a8      	b.n	8019096 <__gethex+0x176>
 8019344:	6922      	ldr	r2, [r4, #16]
 8019346:	3202      	adds	r2, #2
 8019348:	f104 010c 	add.w	r1, r4, #12
 801934c:	0092      	lsls	r2, r2, #2
 801934e:	300c      	adds	r0, #12
 8019350:	f7fc fef6 	bl	8016140 <memcpy>
 8019354:	4621      	mov	r1, r4
 8019356:	ee18 0a10 	vmov	r0, s16
 801935a:	f000 f965 	bl	8019628 <_Bfree>
 801935e:	464c      	mov	r4, r9
 8019360:	6923      	ldr	r3, [r4, #16]
 8019362:	1c5a      	adds	r2, r3, #1
 8019364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019368:	6122      	str	r2, [r4, #16]
 801936a:	2201      	movs	r2, #1
 801936c:	615a      	str	r2, [r3, #20]
 801936e:	e7bb      	b.n	80192e8 <__gethex+0x3c8>
 8019370:	6922      	ldr	r2, [r4, #16]
 8019372:	455a      	cmp	r2, fp
 8019374:	dd0b      	ble.n	801938e <__gethex+0x46e>
 8019376:	2101      	movs	r1, #1
 8019378:	4620      	mov	r0, r4
 801937a:	f7ff fd69 	bl	8018e50 <rshift>
 801937e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019382:	3501      	adds	r5, #1
 8019384:	42ab      	cmp	r3, r5
 8019386:	f6ff aed0 	blt.w	801912a <__gethex+0x20a>
 801938a:	2701      	movs	r7, #1
 801938c:	e7c0      	b.n	8019310 <__gethex+0x3f0>
 801938e:	f016 061f 	ands.w	r6, r6, #31
 8019392:	d0fa      	beq.n	801938a <__gethex+0x46a>
 8019394:	4453      	add	r3, sl
 8019396:	f1c6 0620 	rsb	r6, r6, #32
 801939a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801939e:	f000 f9f5 	bl	801978c <__hi0bits>
 80193a2:	42b0      	cmp	r0, r6
 80193a4:	dbe7      	blt.n	8019376 <__gethex+0x456>
 80193a6:	e7f0      	b.n	801938a <__gethex+0x46a>
 80193a8:	0801e320 	.word	0x0801e320

080193ac <L_shift>:
 80193ac:	f1c2 0208 	rsb	r2, r2, #8
 80193b0:	0092      	lsls	r2, r2, #2
 80193b2:	b570      	push	{r4, r5, r6, lr}
 80193b4:	f1c2 0620 	rsb	r6, r2, #32
 80193b8:	6843      	ldr	r3, [r0, #4]
 80193ba:	6804      	ldr	r4, [r0, #0]
 80193bc:	fa03 f506 	lsl.w	r5, r3, r6
 80193c0:	432c      	orrs	r4, r5
 80193c2:	40d3      	lsrs	r3, r2
 80193c4:	6004      	str	r4, [r0, #0]
 80193c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80193ca:	4288      	cmp	r0, r1
 80193cc:	d3f4      	bcc.n	80193b8 <L_shift+0xc>
 80193ce:	bd70      	pop	{r4, r5, r6, pc}

080193d0 <__match>:
 80193d0:	b530      	push	{r4, r5, lr}
 80193d2:	6803      	ldr	r3, [r0, #0]
 80193d4:	3301      	adds	r3, #1
 80193d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193da:	b914      	cbnz	r4, 80193e2 <__match+0x12>
 80193dc:	6003      	str	r3, [r0, #0]
 80193de:	2001      	movs	r0, #1
 80193e0:	bd30      	pop	{r4, r5, pc}
 80193e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80193ea:	2d19      	cmp	r5, #25
 80193ec:	bf98      	it	ls
 80193ee:	3220      	addls	r2, #32
 80193f0:	42a2      	cmp	r2, r4
 80193f2:	d0f0      	beq.n	80193d6 <__match+0x6>
 80193f4:	2000      	movs	r0, #0
 80193f6:	e7f3      	b.n	80193e0 <__match+0x10>

080193f8 <__hexnan>:
 80193f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193fc:	680b      	ldr	r3, [r1, #0]
 80193fe:	115e      	asrs	r6, r3, #5
 8019400:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019404:	f013 031f 	ands.w	r3, r3, #31
 8019408:	b087      	sub	sp, #28
 801940a:	bf18      	it	ne
 801940c:	3604      	addne	r6, #4
 801940e:	2500      	movs	r5, #0
 8019410:	1f37      	subs	r7, r6, #4
 8019412:	4690      	mov	r8, r2
 8019414:	6802      	ldr	r2, [r0, #0]
 8019416:	9301      	str	r3, [sp, #4]
 8019418:	4682      	mov	sl, r0
 801941a:	f846 5c04 	str.w	r5, [r6, #-4]
 801941e:	46b9      	mov	r9, r7
 8019420:	463c      	mov	r4, r7
 8019422:	9502      	str	r5, [sp, #8]
 8019424:	46ab      	mov	fp, r5
 8019426:	7851      	ldrb	r1, [r2, #1]
 8019428:	1c53      	adds	r3, r2, #1
 801942a:	9303      	str	r3, [sp, #12]
 801942c:	b341      	cbz	r1, 8019480 <__hexnan+0x88>
 801942e:	4608      	mov	r0, r1
 8019430:	9205      	str	r2, [sp, #20]
 8019432:	9104      	str	r1, [sp, #16]
 8019434:	f7ff fd5e 	bl	8018ef4 <__hexdig_fun>
 8019438:	2800      	cmp	r0, #0
 801943a:	d14f      	bne.n	80194dc <__hexnan+0xe4>
 801943c:	9904      	ldr	r1, [sp, #16]
 801943e:	9a05      	ldr	r2, [sp, #20]
 8019440:	2920      	cmp	r1, #32
 8019442:	d818      	bhi.n	8019476 <__hexnan+0x7e>
 8019444:	9b02      	ldr	r3, [sp, #8]
 8019446:	459b      	cmp	fp, r3
 8019448:	dd13      	ble.n	8019472 <__hexnan+0x7a>
 801944a:	454c      	cmp	r4, r9
 801944c:	d206      	bcs.n	801945c <__hexnan+0x64>
 801944e:	2d07      	cmp	r5, #7
 8019450:	dc04      	bgt.n	801945c <__hexnan+0x64>
 8019452:	462a      	mov	r2, r5
 8019454:	4649      	mov	r1, r9
 8019456:	4620      	mov	r0, r4
 8019458:	f7ff ffa8 	bl	80193ac <L_shift>
 801945c:	4544      	cmp	r4, r8
 801945e:	d950      	bls.n	8019502 <__hexnan+0x10a>
 8019460:	2300      	movs	r3, #0
 8019462:	f1a4 0904 	sub.w	r9, r4, #4
 8019466:	f844 3c04 	str.w	r3, [r4, #-4]
 801946a:	f8cd b008 	str.w	fp, [sp, #8]
 801946e:	464c      	mov	r4, r9
 8019470:	461d      	mov	r5, r3
 8019472:	9a03      	ldr	r2, [sp, #12]
 8019474:	e7d7      	b.n	8019426 <__hexnan+0x2e>
 8019476:	2929      	cmp	r1, #41	; 0x29
 8019478:	d156      	bne.n	8019528 <__hexnan+0x130>
 801947a:	3202      	adds	r2, #2
 801947c:	f8ca 2000 	str.w	r2, [sl]
 8019480:	f1bb 0f00 	cmp.w	fp, #0
 8019484:	d050      	beq.n	8019528 <__hexnan+0x130>
 8019486:	454c      	cmp	r4, r9
 8019488:	d206      	bcs.n	8019498 <__hexnan+0xa0>
 801948a:	2d07      	cmp	r5, #7
 801948c:	dc04      	bgt.n	8019498 <__hexnan+0xa0>
 801948e:	462a      	mov	r2, r5
 8019490:	4649      	mov	r1, r9
 8019492:	4620      	mov	r0, r4
 8019494:	f7ff ff8a 	bl	80193ac <L_shift>
 8019498:	4544      	cmp	r4, r8
 801949a:	d934      	bls.n	8019506 <__hexnan+0x10e>
 801949c:	f1a8 0204 	sub.w	r2, r8, #4
 80194a0:	4623      	mov	r3, r4
 80194a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80194a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80194aa:	429f      	cmp	r7, r3
 80194ac:	d2f9      	bcs.n	80194a2 <__hexnan+0xaa>
 80194ae:	1b3b      	subs	r3, r7, r4
 80194b0:	f023 0303 	bic.w	r3, r3, #3
 80194b4:	3304      	adds	r3, #4
 80194b6:	3401      	adds	r4, #1
 80194b8:	3e03      	subs	r6, #3
 80194ba:	42b4      	cmp	r4, r6
 80194bc:	bf88      	it	hi
 80194be:	2304      	movhi	r3, #4
 80194c0:	4443      	add	r3, r8
 80194c2:	2200      	movs	r2, #0
 80194c4:	f843 2b04 	str.w	r2, [r3], #4
 80194c8:	429f      	cmp	r7, r3
 80194ca:	d2fb      	bcs.n	80194c4 <__hexnan+0xcc>
 80194cc:	683b      	ldr	r3, [r7, #0]
 80194ce:	b91b      	cbnz	r3, 80194d8 <__hexnan+0xe0>
 80194d0:	4547      	cmp	r7, r8
 80194d2:	d127      	bne.n	8019524 <__hexnan+0x12c>
 80194d4:	2301      	movs	r3, #1
 80194d6:	603b      	str	r3, [r7, #0]
 80194d8:	2005      	movs	r0, #5
 80194da:	e026      	b.n	801952a <__hexnan+0x132>
 80194dc:	3501      	adds	r5, #1
 80194de:	2d08      	cmp	r5, #8
 80194e0:	f10b 0b01 	add.w	fp, fp, #1
 80194e4:	dd06      	ble.n	80194f4 <__hexnan+0xfc>
 80194e6:	4544      	cmp	r4, r8
 80194e8:	d9c3      	bls.n	8019472 <__hexnan+0x7a>
 80194ea:	2300      	movs	r3, #0
 80194ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80194f0:	2501      	movs	r5, #1
 80194f2:	3c04      	subs	r4, #4
 80194f4:	6822      	ldr	r2, [r4, #0]
 80194f6:	f000 000f 	and.w	r0, r0, #15
 80194fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80194fe:	6022      	str	r2, [r4, #0]
 8019500:	e7b7      	b.n	8019472 <__hexnan+0x7a>
 8019502:	2508      	movs	r5, #8
 8019504:	e7b5      	b.n	8019472 <__hexnan+0x7a>
 8019506:	9b01      	ldr	r3, [sp, #4]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d0df      	beq.n	80194cc <__hexnan+0xd4>
 801950c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019510:	f1c3 0320 	rsb	r3, r3, #32
 8019514:	fa22 f303 	lsr.w	r3, r2, r3
 8019518:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801951c:	401a      	ands	r2, r3
 801951e:	f846 2c04 	str.w	r2, [r6, #-4]
 8019522:	e7d3      	b.n	80194cc <__hexnan+0xd4>
 8019524:	3f04      	subs	r7, #4
 8019526:	e7d1      	b.n	80194cc <__hexnan+0xd4>
 8019528:	2004      	movs	r0, #4
 801952a:	b007      	add	sp, #28
 801952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019530 <_localeconv_r>:
 8019530:	4800      	ldr	r0, [pc, #0]	; (8019534 <_localeconv_r+0x4>)
 8019532:	4770      	bx	lr
 8019534:	24000214 	.word	0x24000214

08019538 <_lseek_r>:
 8019538:	b538      	push	{r3, r4, r5, lr}
 801953a:	4d07      	ldr	r5, [pc, #28]	; (8019558 <_lseek_r+0x20>)
 801953c:	4604      	mov	r4, r0
 801953e:	4608      	mov	r0, r1
 8019540:	4611      	mov	r1, r2
 8019542:	2200      	movs	r2, #0
 8019544:	602a      	str	r2, [r5, #0]
 8019546:	461a      	mov	r2, r3
 8019548:	f7e8 fadc 	bl	8001b04 <_lseek>
 801954c:	1c43      	adds	r3, r0, #1
 801954e:	d102      	bne.n	8019556 <_lseek_r+0x1e>
 8019550:	682b      	ldr	r3, [r5, #0]
 8019552:	b103      	cbz	r3, 8019556 <_lseek_r+0x1e>
 8019554:	6023      	str	r3, [r4, #0]
 8019556:	bd38      	pop	{r3, r4, r5, pc}
 8019558:	24045fb4 	.word	0x24045fb4

0801955c <malloc>:
 801955c:	4b02      	ldr	r3, [pc, #8]	; (8019568 <malloc+0xc>)
 801955e:	4601      	mov	r1, r0
 8019560:	6818      	ldr	r0, [r3, #0]
 8019562:	f7fc be3d 	b.w	80161e0 <_malloc_r>
 8019566:	bf00      	nop
 8019568:	240000b8 	.word	0x240000b8

0801956c <__ascii_mbtowc>:
 801956c:	b082      	sub	sp, #8
 801956e:	b901      	cbnz	r1, 8019572 <__ascii_mbtowc+0x6>
 8019570:	a901      	add	r1, sp, #4
 8019572:	b142      	cbz	r2, 8019586 <__ascii_mbtowc+0x1a>
 8019574:	b14b      	cbz	r3, 801958a <__ascii_mbtowc+0x1e>
 8019576:	7813      	ldrb	r3, [r2, #0]
 8019578:	600b      	str	r3, [r1, #0]
 801957a:	7812      	ldrb	r2, [r2, #0]
 801957c:	1e10      	subs	r0, r2, #0
 801957e:	bf18      	it	ne
 8019580:	2001      	movne	r0, #1
 8019582:	b002      	add	sp, #8
 8019584:	4770      	bx	lr
 8019586:	4610      	mov	r0, r2
 8019588:	e7fb      	b.n	8019582 <__ascii_mbtowc+0x16>
 801958a:	f06f 0001 	mvn.w	r0, #1
 801958e:	e7f8      	b.n	8019582 <__ascii_mbtowc+0x16>

08019590 <__malloc_lock>:
 8019590:	4801      	ldr	r0, [pc, #4]	; (8019598 <__malloc_lock+0x8>)
 8019592:	f7fc bdd2 	b.w	801613a <__retarget_lock_acquire_recursive>
 8019596:	bf00      	nop
 8019598:	24045fa6 	.word	0x24045fa6

0801959c <__malloc_unlock>:
 801959c:	4801      	ldr	r0, [pc, #4]	; (80195a4 <__malloc_unlock+0x8>)
 801959e:	f7fc bdce 	b.w	801613e <__retarget_lock_release_recursive>
 80195a2:	bf00      	nop
 80195a4:	24045fa6 	.word	0x24045fa6

080195a8 <_Balloc>:
 80195a8:	b570      	push	{r4, r5, r6, lr}
 80195aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80195ac:	4604      	mov	r4, r0
 80195ae:	460d      	mov	r5, r1
 80195b0:	b976      	cbnz	r6, 80195d0 <_Balloc+0x28>
 80195b2:	2010      	movs	r0, #16
 80195b4:	f7ff ffd2 	bl	801955c <malloc>
 80195b8:	4602      	mov	r2, r0
 80195ba:	6260      	str	r0, [r4, #36]	; 0x24
 80195bc:	b920      	cbnz	r0, 80195c8 <_Balloc+0x20>
 80195be:	4b18      	ldr	r3, [pc, #96]	; (8019620 <_Balloc+0x78>)
 80195c0:	4818      	ldr	r0, [pc, #96]	; (8019624 <_Balloc+0x7c>)
 80195c2:	2166      	movs	r1, #102	; 0x66
 80195c4:	f000 feaa 	bl	801a31c <__assert_func>
 80195c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80195cc:	6006      	str	r6, [r0, #0]
 80195ce:	60c6      	str	r6, [r0, #12]
 80195d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80195d2:	68f3      	ldr	r3, [r6, #12]
 80195d4:	b183      	cbz	r3, 80195f8 <_Balloc+0x50>
 80195d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195d8:	68db      	ldr	r3, [r3, #12]
 80195da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80195de:	b9b8      	cbnz	r0, 8019610 <_Balloc+0x68>
 80195e0:	2101      	movs	r1, #1
 80195e2:	fa01 f605 	lsl.w	r6, r1, r5
 80195e6:	1d72      	adds	r2, r6, #5
 80195e8:	0092      	lsls	r2, r2, #2
 80195ea:	4620      	mov	r0, r4
 80195ec:	f000 fc9a 	bl	8019f24 <_calloc_r>
 80195f0:	b160      	cbz	r0, 801960c <_Balloc+0x64>
 80195f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80195f6:	e00e      	b.n	8019616 <_Balloc+0x6e>
 80195f8:	2221      	movs	r2, #33	; 0x21
 80195fa:	2104      	movs	r1, #4
 80195fc:	4620      	mov	r0, r4
 80195fe:	f000 fc91 	bl	8019f24 <_calloc_r>
 8019602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019604:	60f0      	str	r0, [r6, #12]
 8019606:	68db      	ldr	r3, [r3, #12]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d1e4      	bne.n	80195d6 <_Balloc+0x2e>
 801960c:	2000      	movs	r0, #0
 801960e:	bd70      	pop	{r4, r5, r6, pc}
 8019610:	6802      	ldr	r2, [r0, #0]
 8019612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019616:	2300      	movs	r3, #0
 8019618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801961c:	e7f7      	b.n	801960e <_Balloc+0x66>
 801961e:	bf00      	nop
 8019620:	0801e2ae 	.word	0x0801e2ae
 8019624:	0801e3a6 	.word	0x0801e3a6

08019628 <_Bfree>:
 8019628:	b570      	push	{r4, r5, r6, lr}
 801962a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801962c:	4605      	mov	r5, r0
 801962e:	460c      	mov	r4, r1
 8019630:	b976      	cbnz	r6, 8019650 <_Bfree+0x28>
 8019632:	2010      	movs	r0, #16
 8019634:	f7ff ff92 	bl	801955c <malloc>
 8019638:	4602      	mov	r2, r0
 801963a:	6268      	str	r0, [r5, #36]	; 0x24
 801963c:	b920      	cbnz	r0, 8019648 <_Bfree+0x20>
 801963e:	4b09      	ldr	r3, [pc, #36]	; (8019664 <_Bfree+0x3c>)
 8019640:	4809      	ldr	r0, [pc, #36]	; (8019668 <_Bfree+0x40>)
 8019642:	218a      	movs	r1, #138	; 0x8a
 8019644:	f000 fe6a 	bl	801a31c <__assert_func>
 8019648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801964c:	6006      	str	r6, [r0, #0]
 801964e:	60c6      	str	r6, [r0, #12]
 8019650:	b13c      	cbz	r4, 8019662 <_Bfree+0x3a>
 8019652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019654:	6862      	ldr	r2, [r4, #4]
 8019656:	68db      	ldr	r3, [r3, #12]
 8019658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801965c:	6021      	str	r1, [r4, #0]
 801965e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019662:	bd70      	pop	{r4, r5, r6, pc}
 8019664:	0801e2ae 	.word	0x0801e2ae
 8019668:	0801e3a6 	.word	0x0801e3a6

0801966c <__multadd>:
 801966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019670:	690d      	ldr	r5, [r1, #16]
 8019672:	4607      	mov	r7, r0
 8019674:	460c      	mov	r4, r1
 8019676:	461e      	mov	r6, r3
 8019678:	f101 0c14 	add.w	ip, r1, #20
 801967c:	2000      	movs	r0, #0
 801967e:	f8dc 3000 	ldr.w	r3, [ip]
 8019682:	b299      	uxth	r1, r3
 8019684:	fb02 6101 	mla	r1, r2, r1, r6
 8019688:	0c1e      	lsrs	r6, r3, #16
 801968a:	0c0b      	lsrs	r3, r1, #16
 801968c:	fb02 3306 	mla	r3, r2, r6, r3
 8019690:	b289      	uxth	r1, r1
 8019692:	3001      	adds	r0, #1
 8019694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019698:	4285      	cmp	r5, r0
 801969a:	f84c 1b04 	str.w	r1, [ip], #4
 801969e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80196a2:	dcec      	bgt.n	801967e <__multadd+0x12>
 80196a4:	b30e      	cbz	r6, 80196ea <__multadd+0x7e>
 80196a6:	68a3      	ldr	r3, [r4, #8]
 80196a8:	42ab      	cmp	r3, r5
 80196aa:	dc19      	bgt.n	80196e0 <__multadd+0x74>
 80196ac:	6861      	ldr	r1, [r4, #4]
 80196ae:	4638      	mov	r0, r7
 80196b0:	3101      	adds	r1, #1
 80196b2:	f7ff ff79 	bl	80195a8 <_Balloc>
 80196b6:	4680      	mov	r8, r0
 80196b8:	b928      	cbnz	r0, 80196c6 <__multadd+0x5a>
 80196ba:	4602      	mov	r2, r0
 80196bc:	4b0c      	ldr	r3, [pc, #48]	; (80196f0 <__multadd+0x84>)
 80196be:	480d      	ldr	r0, [pc, #52]	; (80196f4 <__multadd+0x88>)
 80196c0:	21b5      	movs	r1, #181	; 0xb5
 80196c2:	f000 fe2b 	bl	801a31c <__assert_func>
 80196c6:	6922      	ldr	r2, [r4, #16]
 80196c8:	3202      	adds	r2, #2
 80196ca:	f104 010c 	add.w	r1, r4, #12
 80196ce:	0092      	lsls	r2, r2, #2
 80196d0:	300c      	adds	r0, #12
 80196d2:	f7fc fd35 	bl	8016140 <memcpy>
 80196d6:	4621      	mov	r1, r4
 80196d8:	4638      	mov	r0, r7
 80196da:	f7ff ffa5 	bl	8019628 <_Bfree>
 80196de:	4644      	mov	r4, r8
 80196e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80196e4:	3501      	adds	r5, #1
 80196e6:	615e      	str	r6, [r3, #20]
 80196e8:	6125      	str	r5, [r4, #16]
 80196ea:	4620      	mov	r0, r4
 80196ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f0:	0801e320 	.word	0x0801e320
 80196f4:	0801e3a6 	.word	0x0801e3a6

080196f8 <__s2b>:
 80196f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196fc:	460c      	mov	r4, r1
 80196fe:	4615      	mov	r5, r2
 8019700:	461f      	mov	r7, r3
 8019702:	2209      	movs	r2, #9
 8019704:	3308      	adds	r3, #8
 8019706:	4606      	mov	r6, r0
 8019708:	fb93 f3f2 	sdiv	r3, r3, r2
 801970c:	2100      	movs	r1, #0
 801970e:	2201      	movs	r2, #1
 8019710:	429a      	cmp	r2, r3
 8019712:	db09      	blt.n	8019728 <__s2b+0x30>
 8019714:	4630      	mov	r0, r6
 8019716:	f7ff ff47 	bl	80195a8 <_Balloc>
 801971a:	b940      	cbnz	r0, 801972e <__s2b+0x36>
 801971c:	4602      	mov	r2, r0
 801971e:	4b19      	ldr	r3, [pc, #100]	; (8019784 <__s2b+0x8c>)
 8019720:	4819      	ldr	r0, [pc, #100]	; (8019788 <__s2b+0x90>)
 8019722:	21ce      	movs	r1, #206	; 0xce
 8019724:	f000 fdfa 	bl	801a31c <__assert_func>
 8019728:	0052      	lsls	r2, r2, #1
 801972a:	3101      	adds	r1, #1
 801972c:	e7f0      	b.n	8019710 <__s2b+0x18>
 801972e:	9b08      	ldr	r3, [sp, #32]
 8019730:	6143      	str	r3, [r0, #20]
 8019732:	2d09      	cmp	r5, #9
 8019734:	f04f 0301 	mov.w	r3, #1
 8019738:	6103      	str	r3, [r0, #16]
 801973a:	dd16      	ble.n	801976a <__s2b+0x72>
 801973c:	f104 0909 	add.w	r9, r4, #9
 8019740:	46c8      	mov	r8, r9
 8019742:	442c      	add	r4, r5
 8019744:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019748:	4601      	mov	r1, r0
 801974a:	3b30      	subs	r3, #48	; 0x30
 801974c:	220a      	movs	r2, #10
 801974e:	4630      	mov	r0, r6
 8019750:	f7ff ff8c 	bl	801966c <__multadd>
 8019754:	45a0      	cmp	r8, r4
 8019756:	d1f5      	bne.n	8019744 <__s2b+0x4c>
 8019758:	f1a5 0408 	sub.w	r4, r5, #8
 801975c:	444c      	add	r4, r9
 801975e:	1b2d      	subs	r5, r5, r4
 8019760:	1963      	adds	r3, r4, r5
 8019762:	42bb      	cmp	r3, r7
 8019764:	db04      	blt.n	8019770 <__s2b+0x78>
 8019766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801976a:	340a      	adds	r4, #10
 801976c:	2509      	movs	r5, #9
 801976e:	e7f6      	b.n	801975e <__s2b+0x66>
 8019770:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019774:	4601      	mov	r1, r0
 8019776:	3b30      	subs	r3, #48	; 0x30
 8019778:	220a      	movs	r2, #10
 801977a:	4630      	mov	r0, r6
 801977c:	f7ff ff76 	bl	801966c <__multadd>
 8019780:	e7ee      	b.n	8019760 <__s2b+0x68>
 8019782:	bf00      	nop
 8019784:	0801e320 	.word	0x0801e320
 8019788:	0801e3a6 	.word	0x0801e3a6

0801978c <__hi0bits>:
 801978c:	0c03      	lsrs	r3, r0, #16
 801978e:	041b      	lsls	r3, r3, #16
 8019790:	b9d3      	cbnz	r3, 80197c8 <__hi0bits+0x3c>
 8019792:	0400      	lsls	r0, r0, #16
 8019794:	2310      	movs	r3, #16
 8019796:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801979a:	bf04      	itt	eq
 801979c:	0200      	lsleq	r0, r0, #8
 801979e:	3308      	addeq	r3, #8
 80197a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80197a4:	bf04      	itt	eq
 80197a6:	0100      	lsleq	r0, r0, #4
 80197a8:	3304      	addeq	r3, #4
 80197aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80197ae:	bf04      	itt	eq
 80197b0:	0080      	lsleq	r0, r0, #2
 80197b2:	3302      	addeq	r3, #2
 80197b4:	2800      	cmp	r0, #0
 80197b6:	db05      	blt.n	80197c4 <__hi0bits+0x38>
 80197b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80197bc:	f103 0301 	add.w	r3, r3, #1
 80197c0:	bf08      	it	eq
 80197c2:	2320      	moveq	r3, #32
 80197c4:	4618      	mov	r0, r3
 80197c6:	4770      	bx	lr
 80197c8:	2300      	movs	r3, #0
 80197ca:	e7e4      	b.n	8019796 <__hi0bits+0xa>

080197cc <__lo0bits>:
 80197cc:	6803      	ldr	r3, [r0, #0]
 80197ce:	f013 0207 	ands.w	r2, r3, #7
 80197d2:	4601      	mov	r1, r0
 80197d4:	d00b      	beq.n	80197ee <__lo0bits+0x22>
 80197d6:	07da      	lsls	r2, r3, #31
 80197d8:	d423      	bmi.n	8019822 <__lo0bits+0x56>
 80197da:	0798      	lsls	r0, r3, #30
 80197dc:	bf49      	itett	mi
 80197de:	085b      	lsrmi	r3, r3, #1
 80197e0:	089b      	lsrpl	r3, r3, #2
 80197e2:	2001      	movmi	r0, #1
 80197e4:	600b      	strmi	r3, [r1, #0]
 80197e6:	bf5c      	itt	pl
 80197e8:	600b      	strpl	r3, [r1, #0]
 80197ea:	2002      	movpl	r0, #2
 80197ec:	4770      	bx	lr
 80197ee:	b298      	uxth	r0, r3
 80197f0:	b9a8      	cbnz	r0, 801981e <__lo0bits+0x52>
 80197f2:	0c1b      	lsrs	r3, r3, #16
 80197f4:	2010      	movs	r0, #16
 80197f6:	b2da      	uxtb	r2, r3
 80197f8:	b90a      	cbnz	r2, 80197fe <__lo0bits+0x32>
 80197fa:	3008      	adds	r0, #8
 80197fc:	0a1b      	lsrs	r3, r3, #8
 80197fe:	071a      	lsls	r2, r3, #28
 8019800:	bf04      	itt	eq
 8019802:	091b      	lsreq	r3, r3, #4
 8019804:	3004      	addeq	r0, #4
 8019806:	079a      	lsls	r2, r3, #30
 8019808:	bf04      	itt	eq
 801980a:	089b      	lsreq	r3, r3, #2
 801980c:	3002      	addeq	r0, #2
 801980e:	07da      	lsls	r2, r3, #31
 8019810:	d403      	bmi.n	801981a <__lo0bits+0x4e>
 8019812:	085b      	lsrs	r3, r3, #1
 8019814:	f100 0001 	add.w	r0, r0, #1
 8019818:	d005      	beq.n	8019826 <__lo0bits+0x5a>
 801981a:	600b      	str	r3, [r1, #0]
 801981c:	4770      	bx	lr
 801981e:	4610      	mov	r0, r2
 8019820:	e7e9      	b.n	80197f6 <__lo0bits+0x2a>
 8019822:	2000      	movs	r0, #0
 8019824:	4770      	bx	lr
 8019826:	2020      	movs	r0, #32
 8019828:	4770      	bx	lr
	...

0801982c <__i2b>:
 801982c:	b510      	push	{r4, lr}
 801982e:	460c      	mov	r4, r1
 8019830:	2101      	movs	r1, #1
 8019832:	f7ff feb9 	bl	80195a8 <_Balloc>
 8019836:	4602      	mov	r2, r0
 8019838:	b928      	cbnz	r0, 8019846 <__i2b+0x1a>
 801983a:	4b05      	ldr	r3, [pc, #20]	; (8019850 <__i2b+0x24>)
 801983c:	4805      	ldr	r0, [pc, #20]	; (8019854 <__i2b+0x28>)
 801983e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019842:	f000 fd6b 	bl	801a31c <__assert_func>
 8019846:	2301      	movs	r3, #1
 8019848:	6144      	str	r4, [r0, #20]
 801984a:	6103      	str	r3, [r0, #16]
 801984c:	bd10      	pop	{r4, pc}
 801984e:	bf00      	nop
 8019850:	0801e320 	.word	0x0801e320
 8019854:	0801e3a6 	.word	0x0801e3a6

08019858 <__multiply>:
 8019858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801985c:	4691      	mov	r9, r2
 801985e:	690a      	ldr	r2, [r1, #16]
 8019860:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019864:	429a      	cmp	r2, r3
 8019866:	bfb8      	it	lt
 8019868:	460b      	movlt	r3, r1
 801986a:	460c      	mov	r4, r1
 801986c:	bfbc      	itt	lt
 801986e:	464c      	movlt	r4, r9
 8019870:	4699      	movlt	r9, r3
 8019872:	6927      	ldr	r7, [r4, #16]
 8019874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019878:	68a3      	ldr	r3, [r4, #8]
 801987a:	6861      	ldr	r1, [r4, #4]
 801987c:	eb07 060a 	add.w	r6, r7, sl
 8019880:	42b3      	cmp	r3, r6
 8019882:	b085      	sub	sp, #20
 8019884:	bfb8      	it	lt
 8019886:	3101      	addlt	r1, #1
 8019888:	f7ff fe8e 	bl	80195a8 <_Balloc>
 801988c:	b930      	cbnz	r0, 801989c <__multiply+0x44>
 801988e:	4602      	mov	r2, r0
 8019890:	4b44      	ldr	r3, [pc, #272]	; (80199a4 <__multiply+0x14c>)
 8019892:	4845      	ldr	r0, [pc, #276]	; (80199a8 <__multiply+0x150>)
 8019894:	f240 115d 	movw	r1, #349	; 0x15d
 8019898:	f000 fd40 	bl	801a31c <__assert_func>
 801989c:	f100 0514 	add.w	r5, r0, #20
 80198a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80198a4:	462b      	mov	r3, r5
 80198a6:	2200      	movs	r2, #0
 80198a8:	4543      	cmp	r3, r8
 80198aa:	d321      	bcc.n	80198f0 <__multiply+0x98>
 80198ac:	f104 0314 	add.w	r3, r4, #20
 80198b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80198b4:	f109 0314 	add.w	r3, r9, #20
 80198b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80198bc:	9202      	str	r2, [sp, #8]
 80198be:	1b3a      	subs	r2, r7, r4
 80198c0:	3a15      	subs	r2, #21
 80198c2:	f022 0203 	bic.w	r2, r2, #3
 80198c6:	3204      	adds	r2, #4
 80198c8:	f104 0115 	add.w	r1, r4, #21
 80198cc:	428f      	cmp	r7, r1
 80198ce:	bf38      	it	cc
 80198d0:	2204      	movcc	r2, #4
 80198d2:	9201      	str	r2, [sp, #4]
 80198d4:	9a02      	ldr	r2, [sp, #8]
 80198d6:	9303      	str	r3, [sp, #12]
 80198d8:	429a      	cmp	r2, r3
 80198da:	d80c      	bhi.n	80198f6 <__multiply+0x9e>
 80198dc:	2e00      	cmp	r6, #0
 80198de:	dd03      	ble.n	80198e8 <__multiply+0x90>
 80198e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d05a      	beq.n	801999e <__multiply+0x146>
 80198e8:	6106      	str	r6, [r0, #16]
 80198ea:	b005      	add	sp, #20
 80198ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198f0:	f843 2b04 	str.w	r2, [r3], #4
 80198f4:	e7d8      	b.n	80198a8 <__multiply+0x50>
 80198f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80198fa:	f1ba 0f00 	cmp.w	sl, #0
 80198fe:	d024      	beq.n	801994a <__multiply+0xf2>
 8019900:	f104 0e14 	add.w	lr, r4, #20
 8019904:	46a9      	mov	r9, r5
 8019906:	f04f 0c00 	mov.w	ip, #0
 801990a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801990e:	f8d9 1000 	ldr.w	r1, [r9]
 8019912:	fa1f fb82 	uxth.w	fp, r2
 8019916:	b289      	uxth	r1, r1
 8019918:	fb0a 110b 	mla	r1, sl, fp, r1
 801991c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019920:	f8d9 2000 	ldr.w	r2, [r9]
 8019924:	4461      	add	r1, ip
 8019926:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801992a:	fb0a c20b 	mla	r2, sl, fp, ip
 801992e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019932:	b289      	uxth	r1, r1
 8019934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019938:	4577      	cmp	r7, lr
 801993a:	f849 1b04 	str.w	r1, [r9], #4
 801993e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019942:	d8e2      	bhi.n	801990a <__multiply+0xb2>
 8019944:	9a01      	ldr	r2, [sp, #4]
 8019946:	f845 c002 	str.w	ip, [r5, r2]
 801994a:	9a03      	ldr	r2, [sp, #12]
 801994c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019950:	3304      	adds	r3, #4
 8019952:	f1b9 0f00 	cmp.w	r9, #0
 8019956:	d020      	beq.n	801999a <__multiply+0x142>
 8019958:	6829      	ldr	r1, [r5, #0]
 801995a:	f104 0c14 	add.w	ip, r4, #20
 801995e:	46ae      	mov	lr, r5
 8019960:	f04f 0a00 	mov.w	sl, #0
 8019964:	f8bc b000 	ldrh.w	fp, [ip]
 8019968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801996c:	fb09 220b 	mla	r2, r9, fp, r2
 8019970:	4492      	add	sl, r2
 8019972:	b289      	uxth	r1, r1
 8019974:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019978:	f84e 1b04 	str.w	r1, [lr], #4
 801997c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019980:	f8be 1000 	ldrh.w	r1, [lr]
 8019984:	0c12      	lsrs	r2, r2, #16
 8019986:	fb09 1102 	mla	r1, r9, r2, r1
 801998a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801998e:	4567      	cmp	r7, ip
 8019990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019994:	d8e6      	bhi.n	8019964 <__multiply+0x10c>
 8019996:	9a01      	ldr	r2, [sp, #4]
 8019998:	50a9      	str	r1, [r5, r2]
 801999a:	3504      	adds	r5, #4
 801999c:	e79a      	b.n	80198d4 <__multiply+0x7c>
 801999e:	3e01      	subs	r6, #1
 80199a0:	e79c      	b.n	80198dc <__multiply+0x84>
 80199a2:	bf00      	nop
 80199a4:	0801e320 	.word	0x0801e320
 80199a8:	0801e3a6 	.word	0x0801e3a6

080199ac <__pow5mult>:
 80199ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199b0:	4615      	mov	r5, r2
 80199b2:	f012 0203 	ands.w	r2, r2, #3
 80199b6:	4606      	mov	r6, r0
 80199b8:	460f      	mov	r7, r1
 80199ba:	d007      	beq.n	80199cc <__pow5mult+0x20>
 80199bc:	4c25      	ldr	r4, [pc, #148]	; (8019a54 <__pow5mult+0xa8>)
 80199be:	3a01      	subs	r2, #1
 80199c0:	2300      	movs	r3, #0
 80199c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80199c6:	f7ff fe51 	bl	801966c <__multadd>
 80199ca:	4607      	mov	r7, r0
 80199cc:	10ad      	asrs	r5, r5, #2
 80199ce:	d03d      	beq.n	8019a4c <__pow5mult+0xa0>
 80199d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80199d2:	b97c      	cbnz	r4, 80199f4 <__pow5mult+0x48>
 80199d4:	2010      	movs	r0, #16
 80199d6:	f7ff fdc1 	bl	801955c <malloc>
 80199da:	4602      	mov	r2, r0
 80199dc:	6270      	str	r0, [r6, #36]	; 0x24
 80199de:	b928      	cbnz	r0, 80199ec <__pow5mult+0x40>
 80199e0:	4b1d      	ldr	r3, [pc, #116]	; (8019a58 <__pow5mult+0xac>)
 80199e2:	481e      	ldr	r0, [pc, #120]	; (8019a5c <__pow5mult+0xb0>)
 80199e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80199e8:	f000 fc98 	bl	801a31c <__assert_func>
 80199ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80199f0:	6004      	str	r4, [r0, #0]
 80199f2:	60c4      	str	r4, [r0, #12]
 80199f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80199f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80199fc:	b94c      	cbnz	r4, 8019a12 <__pow5mult+0x66>
 80199fe:	f240 2171 	movw	r1, #625	; 0x271
 8019a02:	4630      	mov	r0, r6
 8019a04:	f7ff ff12 	bl	801982c <__i2b>
 8019a08:	2300      	movs	r3, #0
 8019a0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8019a0e:	4604      	mov	r4, r0
 8019a10:	6003      	str	r3, [r0, #0]
 8019a12:	f04f 0900 	mov.w	r9, #0
 8019a16:	07eb      	lsls	r3, r5, #31
 8019a18:	d50a      	bpl.n	8019a30 <__pow5mult+0x84>
 8019a1a:	4639      	mov	r1, r7
 8019a1c:	4622      	mov	r2, r4
 8019a1e:	4630      	mov	r0, r6
 8019a20:	f7ff ff1a 	bl	8019858 <__multiply>
 8019a24:	4639      	mov	r1, r7
 8019a26:	4680      	mov	r8, r0
 8019a28:	4630      	mov	r0, r6
 8019a2a:	f7ff fdfd 	bl	8019628 <_Bfree>
 8019a2e:	4647      	mov	r7, r8
 8019a30:	106d      	asrs	r5, r5, #1
 8019a32:	d00b      	beq.n	8019a4c <__pow5mult+0xa0>
 8019a34:	6820      	ldr	r0, [r4, #0]
 8019a36:	b938      	cbnz	r0, 8019a48 <__pow5mult+0x9c>
 8019a38:	4622      	mov	r2, r4
 8019a3a:	4621      	mov	r1, r4
 8019a3c:	4630      	mov	r0, r6
 8019a3e:	f7ff ff0b 	bl	8019858 <__multiply>
 8019a42:	6020      	str	r0, [r4, #0]
 8019a44:	f8c0 9000 	str.w	r9, [r0]
 8019a48:	4604      	mov	r4, r0
 8019a4a:	e7e4      	b.n	8019a16 <__pow5mult+0x6a>
 8019a4c:	4638      	mov	r0, r7
 8019a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a52:	bf00      	nop
 8019a54:	0801e4f8 	.word	0x0801e4f8
 8019a58:	0801e2ae 	.word	0x0801e2ae
 8019a5c:	0801e3a6 	.word	0x0801e3a6

08019a60 <__lshift>:
 8019a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a64:	460c      	mov	r4, r1
 8019a66:	6849      	ldr	r1, [r1, #4]
 8019a68:	6923      	ldr	r3, [r4, #16]
 8019a6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019a6e:	68a3      	ldr	r3, [r4, #8]
 8019a70:	4607      	mov	r7, r0
 8019a72:	4691      	mov	r9, r2
 8019a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a78:	f108 0601 	add.w	r6, r8, #1
 8019a7c:	42b3      	cmp	r3, r6
 8019a7e:	db0b      	blt.n	8019a98 <__lshift+0x38>
 8019a80:	4638      	mov	r0, r7
 8019a82:	f7ff fd91 	bl	80195a8 <_Balloc>
 8019a86:	4605      	mov	r5, r0
 8019a88:	b948      	cbnz	r0, 8019a9e <__lshift+0x3e>
 8019a8a:	4602      	mov	r2, r0
 8019a8c:	4b2a      	ldr	r3, [pc, #168]	; (8019b38 <__lshift+0xd8>)
 8019a8e:	482b      	ldr	r0, [pc, #172]	; (8019b3c <__lshift+0xdc>)
 8019a90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019a94:	f000 fc42 	bl	801a31c <__assert_func>
 8019a98:	3101      	adds	r1, #1
 8019a9a:	005b      	lsls	r3, r3, #1
 8019a9c:	e7ee      	b.n	8019a7c <__lshift+0x1c>
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	f100 0114 	add.w	r1, r0, #20
 8019aa4:	f100 0210 	add.w	r2, r0, #16
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	4553      	cmp	r3, sl
 8019aac:	db37      	blt.n	8019b1e <__lshift+0xbe>
 8019aae:	6920      	ldr	r0, [r4, #16]
 8019ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019ab4:	f104 0314 	add.w	r3, r4, #20
 8019ab8:	f019 091f 	ands.w	r9, r9, #31
 8019abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019ac4:	d02f      	beq.n	8019b26 <__lshift+0xc6>
 8019ac6:	f1c9 0e20 	rsb	lr, r9, #32
 8019aca:	468a      	mov	sl, r1
 8019acc:	f04f 0c00 	mov.w	ip, #0
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	fa02 f209 	lsl.w	r2, r2, r9
 8019ad6:	ea42 020c 	orr.w	r2, r2, ip
 8019ada:	f84a 2b04 	str.w	r2, [sl], #4
 8019ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ae2:	4298      	cmp	r0, r3
 8019ae4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019ae8:	d8f2      	bhi.n	8019ad0 <__lshift+0x70>
 8019aea:	1b03      	subs	r3, r0, r4
 8019aec:	3b15      	subs	r3, #21
 8019aee:	f023 0303 	bic.w	r3, r3, #3
 8019af2:	3304      	adds	r3, #4
 8019af4:	f104 0215 	add.w	r2, r4, #21
 8019af8:	4290      	cmp	r0, r2
 8019afa:	bf38      	it	cc
 8019afc:	2304      	movcc	r3, #4
 8019afe:	f841 c003 	str.w	ip, [r1, r3]
 8019b02:	f1bc 0f00 	cmp.w	ip, #0
 8019b06:	d001      	beq.n	8019b0c <__lshift+0xac>
 8019b08:	f108 0602 	add.w	r6, r8, #2
 8019b0c:	3e01      	subs	r6, #1
 8019b0e:	4638      	mov	r0, r7
 8019b10:	612e      	str	r6, [r5, #16]
 8019b12:	4621      	mov	r1, r4
 8019b14:	f7ff fd88 	bl	8019628 <_Bfree>
 8019b18:	4628      	mov	r0, r5
 8019b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019b22:	3301      	adds	r3, #1
 8019b24:	e7c1      	b.n	8019aaa <__lshift+0x4a>
 8019b26:	3904      	subs	r1, #4
 8019b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019b30:	4298      	cmp	r0, r3
 8019b32:	d8f9      	bhi.n	8019b28 <__lshift+0xc8>
 8019b34:	e7ea      	b.n	8019b0c <__lshift+0xac>
 8019b36:	bf00      	nop
 8019b38:	0801e320 	.word	0x0801e320
 8019b3c:	0801e3a6 	.word	0x0801e3a6

08019b40 <__mcmp>:
 8019b40:	b530      	push	{r4, r5, lr}
 8019b42:	6902      	ldr	r2, [r0, #16]
 8019b44:	690c      	ldr	r4, [r1, #16]
 8019b46:	1b12      	subs	r2, r2, r4
 8019b48:	d10e      	bne.n	8019b68 <__mcmp+0x28>
 8019b4a:	f100 0314 	add.w	r3, r0, #20
 8019b4e:	3114      	adds	r1, #20
 8019b50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019b54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019b58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019b5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019b60:	42a5      	cmp	r5, r4
 8019b62:	d003      	beq.n	8019b6c <__mcmp+0x2c>
 8019b64:	d305      	bcc.n	8019b72 <__mcmp+0x32>
 8019b66:	2201      	movs	r2, #1
 8019b68:	4610      	mov	r0, r2
 8019b6a:	bd30      	pop	{r4, r5, pc}
 8019b6c:	4283      	cmp	r3, r0
 8019b6e:	d3f3      	bcc.n	8019b58 <__mcmp+0x18>
 8019b70:	e7fa      	b.n	8019b68 <__mcmp+0x28>
 8019b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b76:	e7f7      	b.n	8019b68 <__mcmp+0x28>

08019b78 <__mdiff>:
 8019b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b7c:	460c      	mov	r4, r1
 8019b7e:	4606      	mov	r6, r0
 8019b80:	4611      	mov	r1, r2
 8019b82:	4620      	mov	r0, r4
 8019b84:	4690      	mov	r8, r2
 8019b86:	f7ff ffdb 	bl	8019b40 <__mcmp>
 8019b8a:	1e05      	subs	r5, r0, #0
 8019b8c:	d110      	bne.n	8019bb0 <__mdiff+0x38>
 8019b8e:	4629      	mov	r1, r5
 8019b90:	4630      	mov	r0, r6
 8019b92:	f7ff fd09 	bl	80195a8 <_Balloc>
 8019b96:	b930      	cbnz	r0, 8019ba6 <__mdiff+0x2e>
 8019b98:	4b3a      	ldr	r3, [pc, #232]	; (8019c84 <__mdiff+0x10c>)
 8019b9a:	4602      	mov	r2, r0
 8019b9c:	f240 2132 	movw	r1, #562	; 0x232
 8019ba0:	4839      	ldr	r0, [pc, #228]	; (8019c88 <__mdiff+0x110>)
 8019ba2:	f000 fbbb 	bl	801a31c <__assert_func>
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb0:	bfa4      	itt	ge
 8019bb2:	4643      	movge	r3, r8
 8019bb4:	46a0      	movge	r8, r4
 8019bb6:	4630      	mov	r0, r6
 8019bb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019bbc:	bfa6      	itte	ge
 8019bbe:	461c      	movge	r4, r3
 8019bc0:	2500      	movge	r5, #0
 8019bc2:	2501      	movlt	r5, #1
 8019bc4:	f7ff fcf0 	bl	80195a8 <_Balloc>
 8019bc8:	b920      	cbnz	r0, 8019bd4 <__mdiff+0x5c>
 8019bca:	4b2e      	ldr	r3, [pc, #184]	; (8019c84 <__mdiff+0x10c>)
 8019bcc:	4602      	mov	r2, r0
 8019bce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019bd2:	e7e5      	b.n	8019ba0 <__mdiff+0x28>
 8019bd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019bd8:	6926      	ldr	r6, [r4, #16]
 8019bda:	60c5      	str	r5, [r0, #12]
 8019bdc:	f104 0914 	add.w	r9, r4, #20
 8019be0:	f108 0514 	add.w	r5, r8, #20
 8019be4:	f100 0e14 	add.w	lr, r0, #20
 8019be8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019bec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019bf0:	f108 0210 	add.w	r2, r8, #16
 8019bf4:	46f2      	mov	sl, lr
 8019bf6:	2100      	movs	r1, #0
 8019bf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8019bfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019c00:	fa1f f883 	uxth.w	r8, r3
 8019c04:	fa11 f18b 	uxtah	r1, r1, fp
 8019c08:	0c1b      	lsrs	r3, r3, #16
 8019c0a:	eba1 0808 	sub.w	r8, r1, r8
 8019c0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019c12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019c16:	fa1f f888 	uxth.w	r8, r8
 8019c1a:	1419      	asrs	r1, r3, #16
 8019c1c:	454e      	cmp	r6, r9
 8019c1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019c22:	f84a 3b04 	str.w	r3, [sl], #4
 8019c26:	d8e7      	bhi.n	8019bf8 <__mdiff+0x80>
 8019c28:	1b33      	subs	r3, r6, r4
 8019c2a:	3b15      	subs	r3, #21
 8019c2c:	f023 0303 	bic.w	r3, r3, #3
 8019c30:	3304      	adds	r3, #4
 8019c32:	3415      	adds	r4, #21
 8019c34:	42a6      	cmp	r6, r4
 8019c36:	bf38      	it	cc
 8019c38:	2304      	movcc	r3, #4
 8019c3a:	441d      	add	r5, r3
 8019c3c:	4473      	add	r3, lr
 8019c3e:	469e      	mov	lr, r3
 8019c40:	462e      	mov	r6, r5
 8019c42:	4566      	cmp	r6, ip
 8019c44:	d30e      	bcc.n	8019c64 <__mdiff+0xec>
 8019c46:	f10c 0203 	add.w	r2, ip, #3
 8019c4a:	1b52      	subs	r2, r2, r5
 8019c4c:	f022 0203 	bic.w	r2, r2, #3
 8019c50:	3d03      	subs	r5, #3
 8019c52:	45ac      	cmp	ip, r5
 8019c54:	bf38      	it	cc
 8019c56:	2200      	movcc	r2, #0
 8019c58:	441a      	add	r2, r3
 8019c5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019c5e:	b17b      	cbz	r3, 8019c80 <__mdiff+0x108>
 8019c60:	6107      	str	r7, [r0, #16]
 8019c62:	e7a3      	b.n	8019bac <__mdiff+0x34>
 8019c64:	f856 8b04 	ldr.w	r8, [r6], #4
 8019c68:	fa11 f288 	uxtah	r2, r1, r8
 8019c6c:	1414      	asrs	r4, r2, #16
 8019c6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019c72:	b292      	uxth	r2, r2
 8019c74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019c78:	f84e 2b04 	str.w	r2, [lr], #4
 8019c7c:	1421      	asrs	r1, r4, #16
 8019c7e:	e7e0      	b.n	8019c42 <__mdiff+0xca>
 8019c80:	3f01      	subs	r7, #1
 8019c82:	e7ea      	b.n	8019c5a <__mdiff+0xe2>
 8019c84:	0801e320 	.word	0x0801e320
 8019c88:	0801e3a6 	.word	0x0801e3a6

08019c8c <__ulp>:
 8019c8c:	b082      	sub	sp, #8
 8019c8e:	ed8d 0b00 	vstr	d0, [sp]
 8019c92:	9b01      	ldr	r3, [sp, #4]
 8019c94:	4912      	ldr	r1, [pc, #72]	; (8019ce0 <__ulp+0x54>)
 8019c96:	4019      	ands	r1, r3
 8019c98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019c9c:	2900      	cmp	r1, #0
 8019c9e:	dd05      	ble.n	8019cac <__ulp+0x20>
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	ec43 2b10 	vmov	d0, r2, r3
 8019ca8:	b002      	add	sp, #8
 8019caa:	4770      	bx	lr
 8019cac:	4249      	negs	r1, r1
 8019cae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019cb2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019cb6:	f04f 0200 	mov.w	r2, #0
 8019cba:	f04f 0300 	mov.w	r3, #0
 8019cbe:	da04      	bge.n	8019cca <__ulp+0x3e>
 8019cc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019cc4:	fa41 f300 	asr.w	r3, r1, r0
 8019cc8:	e7ec      	b.n	8019ca4 <__ulp+0x18>
 8019cca:	f1a0 0114 	sub.w	r1, r0, #20
 8019cce:	291e      	cmp	r1, #30
 8019cd0:	bfda      	itte	le
 8019cd2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019cd6:	fa20 f101 	lsrle.w	r1, r0, r1
 8019cda:	2101      	movgt	r1, #1
 8019cdc:	460a      	mov	r2, r1
 8019cde:	e7e1      	b.n	8019ca4 <__ulp+0x18>
 8019ce0:	7ff00000 	.word	0x7ff00000

08019ce4 <__b2d>:
 8019ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ce6:	6905      	ldr	r5, [r0, #16]
 8019ce8:	f100 0714 	add.w	r7, r0, #20
 8019cec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019cf0:	1f2e      	subs	r6, r5, #4
 8019cf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	f7ff fd48 	bl	801978c <__hi0bits>
 8019cfc:	f1c0 0320 	rsb	r3, r0, #32
 8019d00:	280a      	cmp	r0, #10
 8019d02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019d80 <__b2d+0x9c>
 8019d06:	600b      	str	r3, [r1, #0]
 8019d08:	dc14      	bgt.n	8019d34 <__b2d+0x50>
 8019d0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8019d0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019d12:	42b7      	cmp	r7, r6
 8019d14:	ea41 030c 	orr.w	r3, r1, ip
 8019d18:	bf34      	ite	cc
 8019d1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d1e:	2100      	movcs	r1, #0
 8019d20:	3015      	adds	r0, #21
 8019d22:	fa04 f000 	lsl.w	r0, r4, r0
 8019d26:	fa21 f10e 	lsr.w	r1, r1, lr
 8019d2a:	ea40 0201 	orr.w	r2, r0, r1
 8019d2e:	ec43 2b10 	vmov	d0, r2, r3
 8019d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d34:	42b7      	cmp	r7, r6
 8019d36:	bf3a      	itte	cc
 8019d38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019d3c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019d40:	2100      	movcs	r1, #0
 8019d42:	380b      	subs	r0, #11
 8019d44:	d017      	beq.n	8019d76 <__b2d+0x92>
 8019d46:	f1c0 0c20 	rsb	ip, r0, #32
 8019d4a:	fa04 f500 	lsl.w	r5, r4, r0
 8019d4e:	42be      	cmp	r6, r7
 8019d50:	fa21 f40c 	lsr.w	r4, r1, ip
 8019d54:	ea45 0504 	orr.w	r5, r5, r4
 8019d58:	bf8c      	ite	hi
 8019d5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019d5e:	2400      	movls	r4, #0
 8019d60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019d64:	fa01 f000 	lsl.w	r0, r1, r0
 8019d68:	fa24 f40c 	lsr.w	r4, r4, ip
 8019d6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019d70:	ea40 0204 	orr.w	r2, r0, r4
 8019d74:	e7db      	b.n	8019d2e <__b2d+0x4a>
 8019d76:	ea44 030c 	orr.w	r3, r4, ip
 8019d7a:	460a      	mov	r2, r1
 8019d7c:	e7d7      	b.n	8019d2e <__b2d+0x4a>
 8019d7e:	bf00      	nop
 8019d80:	3ff00000 	.word	0x3ff00000

08019d84 <__d2b>:
 8019d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019d88:	4689      	mov	r9, r1
 8019d8a:	2101      	movs	r1, #1
 8019d8c:	ec57 6b10 	vmov	r6, r7, d0
 8019d90:	4690      	mov	r8, r2
 8019d92:	f7ff fc09 	bl	80195a8 <_Balloc>
 8019d96:	4604      	mov	r4, r0
 8019d98:	b930      	cbnz	r0, 8019da8 <__d2b+0x24>
 8019d9a:	4602      	mov	r2, r0
 8019d9c:	4b25      	ldr	r3, [pc, #148]	; (8019e34 <__d2b+0xb0>)
 8019d9e:	4826      	ldr	r0, [pc, #152]	; (8019e38 <__d2b+0xb4>)
 8019da0:	f240 310a 	movw	r1, #778	; 0x30a
 8019da4:	f000 faba 	bl	801a31c <__assert_func>
 8019da8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019dac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019db0:	bb35      	cbnz	r5, 8019e00 <__d2b+0x7c>
 8019db2:	2e00      	cmp	r6, #0
 8019db4:	9301      	str	r3, [sp, #4]
 8019db6:	d028      	beq.n	8019e0a <__d2b+0x86>
 8019db8:	4668      	mov	r0, sp
 8019dba:	9600      	str	r6, [sp, #0]
 8019dbc:	f7ff fd06 	bl	80197cc <__lo0bits>
 8019dc0:	9900      	ldr	r1, [sp, #0]
 8019dc2:	b300      	cbz	r0, 8019e06 <__d2b+0x82>
 8019dc4:	9a01      	ldr	r2, [sp, #4]
 8019dc6:	f1c0 0320 	rsb	r3, r0, #32
 8019dca:	fa02 f303 	lsl.w	r3, r2, r3
 8019dce:	430b      	orrs	r3, r1
 8019dd0:	40c2      	lsrs	r2, r0
 8019dd2:	6163      	str	r3, [r4, #20]
 8019dd4:	9201      	str	r2, [sp, #4]
 8019dd6:	9b01      	ldr	r3, [sp, #4]
 8019dd8:	61a3      	str	r3, [r4, #24]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	bf14      	ite	ne
 8019dde:	2202      	movne	r2, #2
 8019de0:	2201      	moveq	r2, #1
 8019de2:	6122      	str	r2, [r4, #16]
 8019de4:	b1d5      	cbz	r5, 8019e1c <__d2b+0x98>
 8019de6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019dea:	4405      	add	r5, r0
 8019dec:	f8c9 5000 	str.w	r5, [r9]
 8019df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019df4:	f8c8 0000 	str.w	r0, [r8]
 8019df8:	4620      	mov	r0, r4
 8019dfa:	b003      	add	sp, #12
 8019dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019e04:	e7d5      	b.n	8019db2 <__d2b+0x2e>
 8019e06:	6161      	str	r1, [r4, #20]
 8019e08:	e7e5      	b.n	8019dd6 <__d2b+0x52>
 8019e0a:	a801      	add	r0, sp, #4
 8019e0c:	f7ff fcde 	bl	80197cc <__lo0bits>
 8019e10:	9b01      	ldr	r3, [sp, #4]
 8019e12:	6163      	str	r3, [r4, #20]
 8019e14:	2201      	movs	r2, #1
 8019e16:	6122      	str	r2, [r4, #16]
 8019e18:	3020      	adds	r0, #32
 8019e1a:	e7e3      	b.n	8019de4 <__d2b+0x60>
 8019e1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019e20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019e24:	f8c9 0000 	str.w	r0, [r9]
 8019e28:	6918      	ldr	r0, [r3, #16]
 8019e2a:	f7ff fcaf 	bl	801978c <__hi0bits>
 8019e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019e32:	e7df      	b.n	8019df4 <__d2b+0x70>
 8019e34:	0801e320 	.word	0x0801e320
 8019e38:	0801e3a6 	.word	0x0801e3a6

08019e3c <__ratio>:
 8019e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	4688      	mov	r8, r1
 8019e42:	4669      	mov	r1, sp
 8019e44:	4681      	mov	r9, r0
 8019e46:	f7ff ff4d 	bl	8019ce4 <__b2d>
 8019e4a:	a901      	add	r1, sp, #4
 8019e4c:	4640      	mov	r0, r8
 8019e4e:	ec55 4b10 	vmov	r4, r5, d0
 8019e52:	ee10 aa10 	vmov	sl, s0
 8019e56:	f7ff ff45 	bl	8019ce4 <__b2d>
 8019e5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019e5e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019e62:	1a59      	subs	r1, r3, r1
 8019e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e68:	1ad3      	subs	r3, r2, r3
 8019e6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8019e6e:	ec57 6b10 	vmov	r6, r7, d0
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	bfd6      	itet	le
 8019e76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019e7a:	462a      	movgt	r2, r5
 8019e7c:	463a      	movle	r2, r7
 8019e7e:	46ab      	mov	fp, r5
 8019e80:	bfd6      	itet	le
 8019e82:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019e86:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019e8a:	ee00 3a90 	vmovle	s1, r3
 8019e8e:	ec4b ab17 	vmov	d7, sl, fp
 8019e92:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019e96:	b003      	add	sp, #12
 8019e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e9c <__copybits>:
 8019e9c:	3901      	subs	r1, #1
 8019e9e:	b570      	push	{r4, r5, r6, lr}
 8019ea0:	1149      	asrs	r1, r1, #5
 8019ea2:	6914      	ldr	r4, [r2, #16]
 8019ea4:	3101      	adds	r1, #1
 8019ea6:	f102 0314 	add.w	r3, r2, #20
 8019eaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019eb2:	1f05      	subs	r5, r0, #4
 8019eb4:	42a3      	cmp	r3, r4
 8019eb6:	d30c      	bcc.n	8019ed2 <__copybits+0x36>
 8019eb8:	1aa3      	subs	r3, r4, r2
 8019eba:	3b11      	subs	r3, #17
 8019ebc:	f023 0303 	bic.w	r3, r3, #3
 8019ec0:	3211      	adds	r2, #17
 8019ec2:	42a2      	cmp	r2, r4
 8019ec4:	bf88      	it	hi
 8019ec6:	2300      	movhi	r3, #0
 8019ec8:	4418      	add	r0, r3
 8019eca:	2300      	movs	r3, #0
 8019ecc:	4288      	cmp	r0, r1
 8019ece:	d305      	bcc.n	8019edc <__copybits+0x40>
 8019ed0:	bd70      	pop	{r4, r5, r6, pc}
 8019ed2:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ed6:	f845 6f04 	str.w	r6, [r5, #4]!
 8019eda:	e7eb      	b.n	8019eb4 <__copybits+0x18>
 8019edc:	f840 3b04 	str.w	r3, [r0], #4
 8019ee0:	e7f4      	b.n	8019ecc <__copybits+0x30>

08019ee2 <__any_on>:
 8019ee2:	f100 0214 	add.w	r2, r0, #20
 8019ee6:	6900      	ldr	r0, [r0, #16]
 8019ee8:	114b      	asrs	r3, r1, #5
 8019eea:	4298      	cmp	r0, r3
 8019eec:	b510      	push	{r4, lr}
 8019eee:	db11      	blt.n	8019f14 <__any_on+0x32>
 8019ef0:	dd0a      	ble.n	8019f08 <__any_on+0x26>
 8019ef2:	f011 011f 	ands.w	r1, r1, #31
 8019ef6:	d007      	beq.n	8019f08 <__any_on+0x26>
 8019ef8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019efc:	fa24 f001 	lsr.w	r0, r4, r1
 8019f00:	fa00 f101 	lsl.w	r1, r0, r1
 8019f04:	428c      	cmp	r4, r1
 8019f06:	d10b      	bne.n	8019f20 <__any_on+0x3e>
 8019f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019f0c:	4293      	cmp	r3, r2
 8019f0e:	d803      	bhi.n	8019f18 <__any_on+0x36>
 8019f10:	2000      	movs	r0, #0
 8019f12:	bd10      	pop	{r4, pc}
 8019f14:	4603      	mov	r3, r0
 8019f16:	e7f7      	b.n	8019f08 <__any_on+0x26>
 8019f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019f1c:	2900      	cmp	r1, #0
 8019f1e:	d0f5      	beq.n	8019f0c <__any_on+0x2a>
 8019f20:	2001      	movs	r0, #1
 8019f22:	e7f6      	b.n	8019f12 <__any_on+0x30>

08019f24 <_calloc_r>:
 8019f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f26:	fba1 2402 	umull	r2, r4, r1, r2
 8019f2a:	b94c      	cbnz	r4, 8019f40 <_calloc_r+0x1c>
 8019f2c:	4611      	mov	r1, r2
 8019f2e:	9201      	str	r2, [sp, #4]
 8019f30:	f7fc f956 	bl	80161e0 <_malloc_r>
 8019f34:	9a01      	ldr	r2, [sp, #4]
 8019f36:	4605      	mov	r5, r0
 8019f38:	b930      	cbnz	r0, 8019f48 <_calloc_r+0x24>
 8019f3a:	4628      	mov	r0, r5
 8019f3c:	b003      	add	sp, #12
 8019f3e:	bd30      	pop	{r4, r5, pc}
 8019f40:	220c      	movs	r2, #12
 8019f42:	6002      	str	r2, [r0, #0]
 8019f44:	2500      	movs	r5, #0
 8019f46:	e7f8      	b.n	8019f3a <_calloc_r+0x16>
 8019f48:	4621      	mov	r1, r4
 8019f4a:	f7fc f921 	bl	8016190 <memset>
 8019f4e:	e7f4      	b.n	8019f3a <_calloc_r+0x16>

08019f50 <_free_r>:
 8019f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f52:	2900      	cmp	r1, #0
 8019f54:	d044      	beq.n	8019fe0 <_free_r+0x90>
 8019f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f5a:	9001      	str	r0, [sp, #4]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8019f62:	bfb8      	it	lt
 8019f64:	18e4      	addlt	r4, r4, r3
 8019f66:	f7ff fb13 	bl	8019590 <__malloc_lock>
 8019f6a:	4a1e      	ldr	r2, [pc, #120]	; (8019fe4 <_free_r+0x94>)
 8019f6c:	9801      	ldr	r0, [sp, #4]
 8019f6e:	6813      	ldr	r3, [r2, #0]
 8019f70:	b933      	cbnz	r3, 8019f80 <_free_r+0x30>
 8019f72:	6063      	str	r3, [r4, #4]
 8019f74:	6014      	str	r4, [r2, #0]
 8019f76:	b003      	add	sp, #12
 8019f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f7c:	f7ff bb0e 	b.w	801959c <__malloc_unlock>
 8019f80:	42a3      	cmp	r3, r4
 8019f82:	d908      	bls.n	8019f96 <_free_r+0x46>
 8019f84:	6825      	ldr	r5, [r4, #0]
 8019f86:	1961      	adds	r1, r4, r5
 8019f88:	428b      	cmp	r3, r1
 8019f8a:	bf01      	itttt	eq
 8019f8c:	6819      	ldreq	r1, [r3, #0]
 8019f8e:	685b      	ldreq	r3, [r3, #4]
 8019f90:	1949      	addeq	r1, r1, r5
 8019f92:	6021      	streq	r1, [r4, #0]
 8019f94:	e7ed      	b.n	8019f72 <_free_r+0x22>
 8019f96:	461a      	mov	r2, r3
 8019f98:	685b      	ldr	r3, [r3, #4]
 8019f9a:	b10b      	cbz	r3, 8019fa0 <_free_r+0x50>
 8019f9c:	42a3      	cmp	r3, r4
 8019f9e:	d9fa      	bls.n	8019f96 <_free_r+0x46>
 8019fa0:	6811      	ldr	r1, [r2, #0]
 8019fa2:	1855      	adds	r5, r2, r1
 8019fa4:	42a5      	cmp	r5, r4
 8019fa6:	d10b      	bne.n	8019fc0 <_free_r+0x70>
 8019fa8:	6824      	ldr	r4, [r4, #0]
 8019faa:	4421      	add	r1, r4
 8019fac:	1854      	adds	r4, r2, r1
 8019fae:	42a3      	cmp	r3, r4
 8019fb0:	6011      	str	r1, [r2, #0]
 8019fb2:	d1e0      	bne.n	8019f76 <_free_r+0x26>
 8019fb4:	681c      	ldr	r4, [r3, #0]
 8019fb6:	685b      	ldr	r3, [r3, #4]
 8019fb8:	6053      	str	r3, [r2, #4]
 8019fba:	4421      	add	r1, r4
 8019fbc:	6011      	str	r1, [r2, #0]
 8019fbe:	e7da      	b.n	8019f76 <_free_r+0x26>
 8019fc0:	d902      	bls.n	8019fc8 <_free_r+0x78>
 8019fc2:	230c      	movs	r3, #12
 8019fc4:	6003      	str	r3, [r0, #0]
 8019fc6:	e7d6      	b.n	8019f76 <_free_r+0x26>
 8019fc8:	6825      	ldr	r5, [r4, #0]
 8019fca:	1961      	adds	r1, r4, r5
 8019fcc:	428b      	cmp	r3, r1
 8019fce:	bf04      	itt	eq
 8019fd0:	6819      	ldreq	r1, [r3, #0]
 8019fd2:	685b      	ldreq	r3, [r3, #4]
 8019fd4:	6063      	str	r3, [r4, #4]
 8019fd6:	bf04      	itt	eq
 8019fd8:	1949      	addeq	r1, r1, r5
 8019fda:	6021      	streq	r1, [r4, #0]
 8019fdc:	6054      	str	r4, [r2, #4]
 8019fde:	e7ca      	b.n	8019f76 <_free_r+0x26>
 8019fe0:	b003      	add	sp, #12
 8019fe2:	bd30      	pop	{r4, r5, pc}
 8019fe4:	24045fac 	.word	0x24045fac

08019fe8 <__ssputs_r>:
 8019fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fec:	688e      	ldr	r6, [r1, #8]
 8019fee:	429e      	cmp	r6, r3
 8019ff0:	4682      	mov	sl, r0
 8019ff2:	460c      	mov	r4, r1
 8019ff4:	4690      	mov	r8, r2
 8019ff6:	461f      	mov	r7, r3
 8019ff8:	d838      	bhi.n	801a06c <__ssputs_r+0x84>
 8019ffa:	898a      	ldrh	r2, [r1, #12]
 8019ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a000:	d032      	beq.n	801a068 <__ssputs_r+0x80>
 801a002:	6825      	ldr	r5, [r4, #0]
 801a004:	6909      	ldr	r1, [r1, #16]
 801a006:	eba5 0901 	sub.w	r9, r5, r1
 801a00a:	6965      	ldr	r5, [r4, #20]
 801a00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a014:	3301      	adds	r3, #1
 801a016:	444b      	add	r3, r9
 801a018:	106d      	asrs	r5, r5, #1
 801a01a:	429d      	cmp	r5, r3
 801a01c:	bf38      	it	cc
 801a01e:	461d      	movcc	r5, r3
 801a020:	0553      	lsls	r3, r2, #21
 801a022:	d531      	bpl.n	801a088 <__ssputs_r+0xa0>
 801a024:	4629      	mov	r1, r5
 801a026:	f7fc f8db 	bl	80161e0 <_malloc_r>
 801a02a:	4606      	mov	r6, r0
 801a02c:	b950      	cbnz	r0, 801a044 <__ssputs_r+0x5c>
 801a02e:	230c      	movs	r3, #12
 801a030:	f8ca 3000 	str.w	r3, [sl]
 801a034:	89a3      	ldrh	r3, [r4, #12]
 801a036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a03a:	81a3      	strh	r3, [r4, #12]
 801a03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a044:	6921      	ldr	r1, [r4, #16]
 801a046:	464a      	mov	r2, r9
 801a048:	f7fc f87a 	bl	8016140 <memcpy>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a056:	81a3      	strh	r3, [r4, #12]
 801a058:	6126      	str	r6, [r4, #16]
 801a05a:	6165      	str	r5, [r4, #20]
 801a05c:	444e      	add	r6, r9
 801a05e:	eba5 0509 	sub.w	r5, r5, r9
 801a062:	6026      	str	r6, [r4, #0]
 801a064:	60a5      	str	r5, [r4, #8]
 801a066:	463e      	mov	r6, r7
 801a068:	42be      	cmp	r6, r7
 801a06a:	d900      	bls.n	801a06e <__ssputs_r+0x86>
 801a06c:	463e      	mov	r6, r7
 801a06e:	6820      	ldr	r0, [r4, #0]
 801a070:	4632      	mov	r2, r6
 801a072:	4641      	mov	r1, r8
 801a074:	f7fc f872 	bl	801615c <memmove>
 801a078:	68a3      	ldr	r3, [r4, #8]
 801a07a:	1b9b      	subs	r3, r3, r6
 801a07c:	60a3      	str	r3, [r4, #8]
 801a07e:	6823      	ldr	r3, [r4, #0]
 801a080:	4433      	add	r3, r6
 801a082:	6023      	str	r3, [r4, #0]
 801a084:	2000      	movs	r0, #0
 801a086:	e7db      	b.n	801a040 <__ssputs_r+0x58>
 801a088:	462a      	mov	r2, r5
 801a08a:	f000 f977 	bl	801a37c <_realloc_r>
 801a08e:	4606      	mov	r6, r0
 801a090:	2800      	cmp	r0, #0
 801a092:	d1e1      	bne.n	801a058 <__ssputs_r+0x70>
 801a094:	6921      	ldr	r1, [r4, #16]
 801a096:	4650      	mov	r0, sl
 801a098:	f7ff ff5a 	bl	8019f50 <_free_r>
 801a09c:	e7c7      	b.n	801a02e <__ssputs_r+0x46>
	...

0801a0a0 <_svfiprintf_r>:
 801a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a4:	4698      	mov	r8, r3
 801a0a6:	898b      	ldrh	r3, [r1, #12]
 801a0a8:	061b      	lsls	r3, r3, #24
 801a0aa:	b09d      	sub	sp, #116	; 0x74
 801a0ac:	4607      	mov	r7, r0
 801a0ae:	460d      	mov	r5, r1
 801a0b0:	4614      	mov	r4, r2
 801a0b2:	d50e      	bpl.n	801a0d2 <_svfiprintf_r+0x32>
 801a0b4:	690b      	ldr	r3, [r1, #16]
 801a0b6:	b963      	cbnz	r3, 801a0d2 <_svfiprintf_r+0x32>
 801a0b8:	2140      	movs	r1, #64	; 0x40
 801a0ba:	f7fc f891 	bl	80161e0 <_malloc_r>
 801a0be:	6028      	str	r0, [r5, #0]
 801a0c0:	6128      	str	r0, [r5, #16]
 801a0c2:	b920      	cbnz	r0, 801a0ce <_svfiprintf_r+0x2e>
 801a0c4:	230c      	movs	r3, #12
 801a0c6:	603b      	str	r3, [r7, #0]
 801a0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0cc:	e0d1      	b.n	801a272 <_svfiprintf_r+0x1d2>
 801a0ce:	2340      	movs	r3, #64	; 0x40
 801a0d0:	616b      	str	r3, [r5, #20]
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	9309      	str	r3, [sp, #36]	; 0x24
 801a0d6:	2320      	movs	r3, #32
 801a0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0e0:	2330      	movs	r3, #48	; 0x30
 801a0e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a28c <_svfiprintf_r+0x1ec>
 801a0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0ea:	f04f 0901 	mov.w	r9, #1
 801a0ee:	4623      	mov	r3, r4
 801a0f0:	469a      	mov	sl, r3
 801a0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0f6:	b10a      	cbz	r2, 801a0fc <_svfiprintf_r+0x5c>
 801a0f8:	2a25      	cmp	r2, #37	; 0x25
 801a0fa:	d1f9      	bne.n	801a0f0 <_svfiprintf_r+0x50>
 801a0fc:	ebba 0b04 	subs.w	fp, sl, r4
 801a100:	d00b      	beq.n	801a11a <_svfiprintf_r+0x7a>
 801a102:	465b      	mov	r3, fp
 801a104:	4622      	mov	r2, r4
 801a106:	4629      	mov	r1, r5
 801a108:	4638      	mov	r0, r7
 801a10a:	f7ff ff6d 	bl	8019fe8 <__ssputs_r>
 801a10e:	3001      	adds	r0, #1
 801a110:	f000 80aa 	beq.w	801a268 <_svfiprintf_r+0x1c8>
 801a114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a116:	445a      	add	r2, fp
 801a118:	9209      	str	r2, [sp, #36]	; 0x24
 801a11a:	f89a 3000 	ldrb.w	r3, [sl]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	f000 80a2 	beq.w	801a268 <_svfiprintf_r+0x1c8>
 801a124:	2300      	movs	r3, #0
 801a126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a12e:	f10a 0a01 	add.w	sl, sl, #1
 801a132:	9304      	str	r3, [sp, #16]
 801a134:	9307      	str	r3, [sp, #28]
 801a136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a13a:	931a      	str	r3, [sp, #104]	; 0x68
 801a13c:	4654      	mov	r4, sl
 801a13e:	2205      	movs	r2, #5
 801a140:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a144:	4851      	ldr	r0, [pc, #324]	; (801a28c <_svfiprintf_r+0x1ec>)
 801a146:	f7e6 f8e3 	bl	8000310 <memchr>
 801a14a:	9a04      	ldr	r2, [sp, #16]
 801a14c:	b9d8      	cbnz	r0, 801a186 <_svfiprintf_r+0xe6>
 801a14e:	06d0      	lsls	r0, r2, #27
 801a150:	bf44      	itt	mi
 801a152:	2320      	movmi	r3, #32
 801a154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a158:	0711      	lsls	r1, r2, #28
 801a15a:	bf44      	itt	mi
 801a15c:	232b      	movmi	r3, #43	; 0x2b
 801a15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a162:	f89a 3000 	ldrb.w	r3, [sl]
 801a166:	2b2a      	cmp	r3, #42	; 0x2a
 801a168:	d015      	beq.n	801a196 <_svfiprintf_r+0xf6>
 801a16a:	9a07      	ldr	r2, [sp, #28]
 801a16c:	4654      	mov	r4, sl
 801a16e:	2000      	movs	r0, #0
 801a170:	f04f 0c0a 	mov.w	ip, #10
 801a174:	4621      	mov	r1, r4
 801a176:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a17a:	3b30      	subs	r3, #48	; 0x30
 801a17c:	2b09      	cmp	r3, #9
 801a17e:	d94e      	bls.n	801a21e <_svfiprintf_r+0x17e>
 801a180:	b1b0      	cbz	r0, 801a1b0 <_svfiprintf_r+0x110>
 801a182:	9207      	str	r2, [sp, #28]
 801a184:	e014      	b.n	801a1b0 <_svfiprintf_r+0x110>
 801a186:	eba0 0308 	sub.w	r3, r0, r8
 801a18a:	fa09 f303 	lsl.w	r3, r9, r3
 801a18e:	4313      	orrs	r3, r2
 801a190:	9304      	str	r3, [sp, #16]
 801a192:	46a2      	mov	sl, r4
 801a194:	e7d2      	b.n	801a13c <_svfiprintf_r+0x9c>
 801a196:	9b03      	ldr	r3, [sp, #12]
 801a198:	1d19      	adds	r1, r3, #4
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	9103      	str	r1, [sp, #12]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	bfbb      	ittet	lt
 801a1a2:	425b      	neglt	r3, r3
 801a1a4:	f042 0202 	orrlt.w	r2, r2, #2
 801a1a8:	9307      	strge	r3, [sp, #28]
 801a1aa:	9307      	strlt	r3, [sp, #28]
 801a1ac:	bfb8      	it	lt
 801a1ae:	9204      	strlt	r2, [sp, #16]
 801a1b0:	7823      	ldrb	r3, [r4, #0]
 801a1b2:	2b2e      	cmp	r3, #46	; 0x2e
 801a1b4:	d10c      	bne.n	801a1d0 <_svfiprintf_r+0x130>
 801a1b6:	7863      	ldrb	r3, [r4, #1]
 801a1b8:	2b2a      	cmp	r3, #42	; 0x2a
 801a1ba:	d135      	bne.n	801a228 <_svfiprintf_r+0x188>
 801a1bc:	9b03      	ldr	r3, [sp, #12]
 801a1be:	1d1a      	adds	r2, r3, #4
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	9203      	str	r2, [sp, #12]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	bfb8      	it	lt
 801a1c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a1cc:	3402      	adds	r4, #2
 801a1ce:	9305      	str	r3, [sp, #20]
 801a1d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a29c <_svfiprintf_r+0x1fc>
 801a1d4:	7821      	ldrb	r1, [r4, #0]
 801a1d6:	2203      	movs	r2, #3
 801a1d8:	4650      	mov	r0, sl
 801a1da:	f7e6 f899 	bl	8000310 <memchr>
 801a1de:	b140      	cbz	r0, 801a1f2 <_svfiprintf_r+0x152>
 801a1e0:	2340      	movs	r3, #64	; 0x40
 801a1e2:	eba0 000a 	sub.w	r0, r0, sl
 801a1e6:	fa03 f000 	lsl.w	r0, r3, r0
 801a1ea:	9b04      	ldr	r3, [sp, #16]
 801a1ec:	4303      	orrs	r3, r0
 801a1ee:	3401      	adds	r4, #1
 801a1f0:	9304      	str	r3, [sp, #16]
 801a1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1f6:	4826      	ldr	r0, [pc, #152]	; (801a290 <_svfiprintf_r+0x1f0>)
 801a1f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1fc:	2206      	movs	r2, #6
 801a1fe:	f7e6 f887 	bl	8000310 <memchr>
 801a202:	2800      	cmp	r0, #0
 801a204:	d038      	beq.n	801a278 <_svfiprintf_r+0x1d8>
 801a206:	4b23      	ldr	r3, [pc, #140]	; (801a294 <_svfiprintf_r+0x1f4>)
 801a208:	bb1b      	cbnz	r3, 801a252 <_svfiprintf_r+0x1b2>
 801a20a:	9b03      	ldr	r3, [sp, #12]
 801a20c:	3307      	adds	r3, #7
 801a20e:	f023 0307 	bic.w	r3, r3, #7
 801a212:	3308      	adds	r3, #8
 801a214:	9303      	str	r3, [sp, #12]
 801a216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a218:	4433      	add	r3, r6
 801a21a:	9309      	str	r3, [sp, #36]	; 0x24
 801a21c:	e767      	b.n	801a0ee <_svfiprintf_r+0x4e>
 801a21e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a222:	460c      	mov	r4, r1
 801a224:	2001      	movs	r0, #1
 801a226:	e7a5      	b.n	801a174 <_svfiprintf_r+0xd4>
 801a228:	2300      	movs	r3, #0
 801a22a:	3401      	adds	r4, #1
 801a22c:	9305      	str	r3, [sp, #20]
 801a22e:	4619      	mov	r1, r3
 801a230:	f04f 0c0a 	mov.w	ip, #10
 801a234:	4620      	mov	r0, r4
 801a236:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a23a:	3a30      	subs	r2, #48	; 0x30
 801a23c:	2a09      	cmp	r2, #9
 801a23e:	d903      	bls.n	801a248 <_svfiprintf_r+0x1a8>
 801a240:	2b00      	cmp	r3, #0
 801a242:	d0c5      	beq.n	801a1d0 <_svfiprintf_r+0x130>
 801a244:	9105      	str	r1, [sp, #20]
 801a246:	e7c3      	b.n	801a1d0 <_svfiprintf_r+0x130>
 801a248:	fb0c 2101 	mla	r1, ip, r1, r2
 801a24c:	4604      	mov	r4, r0
 801a24e:	2301      	movs	r3, #1
 801a250:	e7f0      	b.n	801a234 <_svfiprintf_r+0x194>
 801a252:	ab03      	add	r3, sp, #12
 801a254:	9300      	str	r3, [sp, #0]
 801a256:	462a      	mov	r2, r5
 801a258:	4b0f      	ldr	r3, [pc, #60]	; (801a298 <_svfiprintf_r+0x1f8>)
 801a25a:	a904      	add	r1, sp, #16
 801a25c:	4638      	mov	r0, r7
 801a25e:	f7fc f8c3 	bl	80163e8 <_printf_float>
 801a262:	1c42      	adds	r2, r0, #1
 801a264:	4606      	mov	r6, r0
 801a266:	d1d6      	bne.n	801a216 <_svfiprintf_r+0x176>
 801a268:	89ab      	ldrh	r3, [r5, #12]
 801a26a:	065b      	lsls	r3, r3, #25
 801a26c:	f53f af2c 	bmi.w	801a0c8 <_svfiprintf_r+0x28>
 801a270:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a272:	b01d      	add	sp, #116	; 0x74
 801a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a278:	ab03      	add	r3, sp, #12
 801a27a:	9300      	str	r3, [sp, #0]
 801a27c:	462a      	mov	r2, r5
 801a27e:	4b06      	ldr	r3, [pc, #24]	; (801a298 <_svfiprintf_r+0x1f8>)
 801a280:	a904      	add	r1, sp, #16
 801a282:	4638      	mov	r0, r7
 801a284:	f7fc fb3c 	bl	8016900 <_printf_i>
 801a288:	e7eb      	b.n	801a262 <_svfiprintf_r+0x1c2>
 801a28a:	bf00      	nop
 801a28c:	0801e504 	.word	0x0801e504
 801a290:	0801e50e 	.word	0x0801e50e
 801a294:	080163e9 	.word	0x080163e9
 801a298:	08019fe9 	.word	0x08019fe9
 801a29c:	0801e50a 	.word	0x0801e50a

0801a2a0 <_read_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4d07      	ldr	r5, [pc, #28]	; (801a2c0 <_read_r+0x20>)
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	4608      	mov	r0, r1
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	602a      	str	r2, [r5, #0]
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	f7e7 fc02 	bl	8001ab8 <_read>
 801a2b4:	1c43      	adds	r3, r0, #1
 801a2b6:	d102      	bne.n	801a2be <_read_r+0x1e>
 801a2b8:	682b      	ldr	r3, [r5, #0]
 801a2ba:	b103      	cbz	r3, 801a2be <_read_r+0x1e>
 801a2bc:	6023      	str	r3, [r4, #0]
 801a2be:	bd38      	pop	{r3, r4, r5, pc}
 801a2c0:	24045fb4 	.word	0x24045fb4
 801a2c4:	00000000 	.word	0x00000000

0801a2c8 <nan>:
 801a2c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a2d0 <nan+0x8>
 801a2cc:	4770      	bx	lr
 801a2ce:	bf00      	nop
 801a2d0:	00000000 	.word	0x00000000
 801a2d4:	7ff80000 	.word	0x7ff80000

0801a2d8 <strncmp>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	b17a      	cbz	r2, 801a2fc <strncmp+0x24>
 801a2dc:	4603      	mov	r3, r0
 801a2de:	3901      	subs	r1, #1
 801a2e0:	1884      	adds	r4, r0, r2
 801a2e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a2e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a2ea:	4290      	cmp	r0, r2
 801a2ec:	d101      	bne.n	801a2f2 <strncmp+0x1a>
 801a2ee:	42a3      	cmp	r3, r4
 801a2f0:	d101      	bne.n	801a2f6 <strncmp+0x1e>
 801a2f2:	1a80      	subs	r0, r0, r2
 801a2f4:	bd10      	pop	{r4, pc}
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d1f3      	bne.n	801a2e2 <strncmp+0xa>
 801a2fa:	e7fa      	b.n	801a2f2 <strncmp+0x1a>
 801a2fc:	4610      	mov	r0, r2
 801a2fe:	e7f9      	b.n	801a2f4 <strncmp+0x1c>

0801a300 <__ascii_wctomb>:
 801a300:	b149      	cbz	r1, 801a316 <__ascii_wctomb+0x16>
 801a302:	2aff      	cmp	r2, #255	; 0xff
 801a304:	bf85      	ittet	hi
 801a306:	238a      	movhi	r3, #138	; 0x8a
 801a308:	6003      	strhi	r3, [r0, #0]
 801a30a:	700a      	strbls	r2, [r1, #0]
 801a30c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a310:	bf98      	it	ls
 801a312:	2001      	movls	r0, #1
 801a314:	4770      	bx	lr
 801a316:	4608      	mov	r0, r1
 801a318:	4770      	bx	lr
	...

0801a31c <__assert_func>:
 801a31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a31e:	4614      	mov	r4, r2
 801a320:	461a      	mov	r2, r3
 801a322:	4b09      	ldr	r3, [pc, #36]	; (801a348 <__assert_func+0x2c>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4605      	mov	r5, r0
 801a328:	68d8      	ldr	r0, [r3, #12]
 801a32a:	b14c      	cbz	r4, 801a340 <__assert_func+0x24>
 801a32c:	4b07      	ldr	r3, [pc, #28]	; (801a34c <__assert_func+0x30>)
 801a32e:	9100      	str	r1, [sp, #0]
 801a330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a334:	4906      	ldr	r1, [pc, #24]	; (801a350 <__assert_func+0x34>)
 801a336:	462b      	mov	r3, r5
 801a338:	f000 f80e 	bl	801a358 <fiprintf>
 801a33c:	f7fb fdcb 	bl	8015ed6 <abort>
 801a340:	4b04      	ldr	r3, [pc, #16]	; (801a354 <__assert_func+0x38>)
 801a342:	461c      	mov	r4, r3
 801a344:	e7f3      	b.n	801a32e <__assert_func+0x12>
 801a346:	bf00      	nop
 801a348:	240000b8 	.word	0x240000b8
 801a34c:	0801e515 	.word	0x0801e515
 801a350:	0801e522 	.word	0x0801e522
 801a354:	0801d5f4 	.word	0x0801d5f4

0801a358 <fiprintf>:
 801a358:	b40e      	push	{r1, r2, r3}
 801a35a:	b503      	push	{r0, r1, lr}
 801a35c:	4601      	mov	r1, r0
 801a35e:	ab03      	add	r3, sp, #12
 801a360:	4805      	ldr	r0, [pc, #20]	; (801a378 <fiprintf+0x20>)
 801a362:	f853 2b04 	ldr.w	r2, [r3], #4
 801a366:	6800      	ldr	r0, [r0, #0]
 801a368:	9301      	str	r3, [sp, #4]
 801a36a:	f000 f85f 	bl	801a42c <_vfiprintf_r>
 801a36e:	b002      	add	sp, #8
 801a370:	f85d eb04 	ldr.w	lr, [sp], #4
 801a374:	b003      	add	sp, #12
 801a376:	4770      	bx	lr
 801a378:	240000b8 	.word	0x240000b8

0801a37c <_realloc_r>:
 801a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a380:	4680      	mov	r8, r0
 801a382:	4614      	mov	r4, r2
 801a384:	460e      	mov	r6, r1
 801a386:	b921      	cbnz	r1, 801a392 <_realloc_r+0x16>
 801a388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a38c:	4611      	mov	r1, r2
 801a38e:	f7fb bf27 	b.w	80161e0 <_malloc_r>
 801a392:	b92a      	cbnz	r2, 801a3a0 <_realloc_r+0x24>
 801a394:	f7ff fddc 	bl	8019f50 <_free_r>
 801a398:	4625      	mov	r5, r4
 801a39a:	4628      	mov	r0, r5
 801a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3a0:	f000 fa9a 	bl	801a8d8 <_malloc_usable_size_r>
 801a3a4:	4284      	cmp	r4, r0
 801a3a6:	4607      	mov	r7, r0
 801a3a8:	d802      	bhi.n	801a3b0 <_realloc_r+0x34>
 801a3aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a3ae:	d812      	bhi.n	801a3d6 <_realloc_r+0x5a>
 801a3b0:	4621      	mov	r1, r4
 801a3b2:	4640      	mov	r0, r8
 801a3b4:	f7fb ff14 	bl	80161e0 <_malloc_r>
 801a3b8:	4605      	mov	r5, r0
 801a3ba:	2800      	cmp	r0, #0
 801a3bc:	d0ed      	beq.n	801a39a <_realloc_r+0x1e>
 801a3be:	42bc      	cmp	r4, r7
 801a3c0:	4622      	mov	r2, r4
 801a3c2:	4631      	mov	r1, r6
 801a3c4:	bf28      	it	cs
 801a3c6:	463a      	movcs	r2, r7
 801a3c8:	f7fb feba 	bl	8016140 <memcpy>
 801a3cc:	4631      	mov	r1, r6
 801a3ce:	4640      	mov	r0, r8
 801a3d0:	f7ff fdbe 	bl	8019f50 <_free_r>
 801a3d4:	e7e1      	b.n	801a39a <_realloc_r+0x1e>
 801a3d6:	4635      	mov	r5, r6
 801a3d8:	e7df      	b.n	801a39a <_realloc_r+0x1e>

0801a3da <__sfputc_r>:
 801a3da:	6893      	ldr	r3, [r2, #8]
 801a3dc:	3b01      	subs	r3, #1
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	b410      	push	{r4}
 801a3e2:	6093      	str	r3, [r2, #8]
 801a3e4:	da08      	bge.n	801a3f8 <__sfputc_r+0x1e>
 801a3e6:	6994      	ldr	r4, [r2, #24]
 801a3e8:	42a3      	cmp	r3, r4
 801a3ea:	db01      	blt.n	801a3f0 <__sfputc_r+0x16>
 801a3ec:	290a      	cmp	r1, #10
 801a3ee:	d103      	bne.n	801a3f8 <__sfputc_r+0x1e>
 801a3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3f4:	f000 b94a 	b.w	801a68c <__swbuf_r>
 801a3f8:	6813      	ldr	r3, [r2, #0]
 801a3fa:	1c58      	adds	r0, r3, #1
 801a3fc:	6010      	str	r0, [r2, #0]
 801a3fe:	7019      	strb	r1, [r3, #0]
 801a400:	4608      	mov	r0, r1
 801a402:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a406:	4770      	bx	lr

0801a408 <__sfputs_r>:
 801a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a40a:	4606      	mov	r6, r0
 801a40c:	460f      	mov	r7, r1
 801a40e:	4614      	mov	r4, r2
 801a410:	18d5      	adds	r5, r2, r3
 801a412:	42ac      	cmp	r4, r5
 801a414:	d101      	bne.n	801a41a <__sfputs_r+0x12>
 801a416:	2000      	movs	r0, #0
 801a418:	e007      	b.n	801a42a <__sfputs_r+0x22>
 801a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a41e:	463a      	mov	r2, r7
 801a420:	4630      	mov	r0, r6
 801a422:	f7ff ffda 	bl	801a3da <__sfputc_r>
 801a426:	1c43      	adds	r3, r0, #1
 801a428:	d1f3      	bne.n	801a412 <__sfputs_r+0xa>
 801a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a42c <_vfiprintf_r>:
 801a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a430:	460d      	mov	r5, r1
 801a432:	b09d      	sub	sp, #116	; 0x74
 801a434:	4614      	mov	r4, r2
 801a436:	4698      	mov	r8, r3
 801a438:	4606      	mov	r6, r0
 801a43a:	b118      	cbz	r0, 801a444 <_vfiprintf_r+0x18>
 801a43c:	6983      	ldr	r3, [r0, #24]
 801a43e:	b90b      	cbnz	r3, 801a444 <_vfiprintf_r+0x18>
 801a440:	f7fb fdb8 	bl	8015fb4 <__sinit>
 801a444:	4b89      	ldr	r3, [pc, #548]	; (801a66c <_vfiprintf_r+0x240>)
 801a446:	429d      	cmp	r5, r3
 801a448:	d11b      	bne.n	801a482 <_vfiprintf_r+0x56>
 801a44a:	6875      	ldr	r5, [r6, #4]
 801a44c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a44e:	07d9      	lsls	r1, r3, #31
 801a450:	d405      	bmi.n	801a45e <_vfiprintf_r+0x32>
 801a452:	89ab      	ldrh	r3, [r5, #12]
 801a454:	059a      	lsls	r2, r3, #22
 801a456:	d402      	bmi.n	801a45e <_vfiprintf_r+0x32>
 801a458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a45a:	f7fb fe6e 	bl	801613a <__retarget_lock_acquire_recursive>
 801a45e:	89ab      	ldrh	r3, [r5, #12]
 801a460:	071b      	lsls	r3, r3, #28
 801a462:	d501      	bpl.n	801a468 <_vfiprintf_r+0x3c>
 801a464:	692b      	ldr	r3, [r5, #16]
 801a466:	b9eb      	cbnz	r3, 801a4a4 <_vfiprintf_r+0x78>
 801a468:	4629      	mov	r1, r5
 801a46a:	4630      	mov	r0, r6
 801a46c:	f000 f960 	bl	801a730 <__swsetup_r>
 801a470:	b1c0      	cbz	r0, 801a4a4 <_vfiprintf_r+0x78>
 801a472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a474:	07dc      	lsls	r4, r3, #31
 801a476:	d50e      	bpl.n	801a496 <_vfiprintf_r+0x6a>
 801a478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a47c:	b01d      	add	sp, #116	; 0x74
 801a47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a482:	4b7b      	ldr	r3, [pc, #492]	; (801a670 <_vfiprintf_r+0x244>)
 801a484:	429d      	cmp	r5, r3
 801a486:	d101      	bne.n	801a48c <_vfiprintf_r+0x60>
 801a488:	68b5      	ldr	r5, [r6, #8]
 801a48a:	e7df      	b.n	801a44c <_vfiprintf_r+0x20>
 801a48c:	4b79      	ldr	r3, [pc, #484]	; (801a674 <_vfiprintf_r+0x248>)
 801a48e:	429d      	cmp	r5, r3
 801a490:	bf08      	it	eq
 801a492:	68f5      	ldreq	r5, [r6, #12]
 801a494:	e7da      	b.n	801a44c <_vfiprintf_r+0x20>
 801a496:	89ab      	ldrh	r3, [r5, #12]
 801a498:	0598      	lsls	r0, r3, #22
 801a49a:	d4ed      	bmi.n	801a478 <_vfiprintf_r+0x4c>
 801a49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a49e:	f7fb fe4e 	bl	801613e <__retarget_lock_release_recursive>
 801a4a2:	e7e9      	b.n	801a478 <_vfiprintf_r+0x4c>
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	9309      	str	r3, [sp, #36]	; 0x24
 801a4a8:	2320      	movs	r3, #32
 801a4aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a4ae:	f8cd 800c 	str.w	r8, [sp, #12]
 801a4b2:	2330      	movs	r3, #48	; 0x30
 801a4b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a678 <_vfiprintf_r+0x24c>
 801a4b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a4bc:	f04f 0901 	mov.w	r9, #1
 801a4c0:	4623      	mov	r3, r4
 801a4c2:	469a      	mov	sl, r3
 801a4c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4c8:	b10a      	cbz	r2, 801a4ce <_vfiprintf_r+0xa2>
 801a4ca:	2a25      	cmp	r2, #37	; 0x25
 801a4cc:	d1f9      	bne.n	801a4c2 <_vfiprintf_r+0x96>
 801a4ce:	ebba 0b04 	subs.w	fp, sl, r4
 801a4d2:	d00b      	beq.n	801a4ec <_vfiprintf_r+0xc0>
 801a4d4:	465b      	mov	r3, fp
 801a4d6:	4622      	mov	r2, r4
 801a4d8:	4629      	mov	r1, r5
 801a4da:	4630      	mov	r0, r6
 801a4dc:	f7ff ff94 	bl	801a408 <__sfputs_r>
 801a4e0:	3001      	adds	r0, #1
 801a4e2:	f000 80aa 	beq.w	801a63a <_vfiprintf_r+0x20e>
 801a4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4e8:	445a      	add	r2, fp
 801a4ea:	9209      	str	r2, [sp, #36]	; 0x24
 801a4ec:	f89a 3000 	ldrb.w	r3, [sl]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	f000 80a2 	beq.w	801a63a <_vfiprintf_r+0x20e>
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a4fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a500:	f10a 0a01 	add.w	sl, sl, #1
 801a504:	9304      	str	r3, [sp, #16]
 801a506:	9307      	str	r3, [sp, #28]
 801a508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a50c:	931a      	str	r3, [sp, #104]	; 0x68
 801a50e:	4654      	mov	r4, sl
 801a510:	2205      	movs	r2, #5
 801a512:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a516:	4858      	ldr	r0, [pc, #352]	; (801a678 <_vfiprintf_r+0x24c>)
 801a518:	f7e5 fefa 	bl	8000310 <memchr>
 801a51c:	9a04      	ldr	r2, [sp, #16]
 801a51e:	b9d8      	cbnz	r0, 801a558 <_vfiprintf_r+0x12c>
 801a520:	06d1      	lsls	r1, r2, #27
 801a522:	bf44      	itt	mi
 801a524:	2320      	movmi	r3, #32
 801a526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a52a:	0713      	lsls	r3, r2, #28
 801a52c:	bf44      	itt	mi
 801a52e:	232b      	movmi	r3, #43	; 0x2b
 801a530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a534:	f89a 3000 	ldrb.w	r3, [sl]
 801a538:	2b2a      	cmp	r3, #42	; 0x2a
 801a53a:	d015      	beq.n	801a568 <_vfiprintf_r+0x13c>
 801a53c:	9a07      	ldr	r2, [sp, #28]
 801a53e:	4654      	mov	r4, sl
 801a540:	2000      	movs	r0, #0
 801a542:	f04f 0c0a 	mov.w	ip, #10
 801a546:	4621      	mov	r1, r4
 801a548:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a54c:	3b30      	subs	r3, #48	; 0x30
 801a54e:	2b09      	cmp	r3, #9
 801a550:	d94e      	bls.n	801a5f0 <_vfiprintf_r+0x1c4>
 801a552:	b1b0      	cbz	r0, 801a582 <_vfiprintf_r+0x156>
 801a554:	9207      	str	r2, [sp, #28]
 801a556:	e014      	b.n	801a582 <_vfiprintf_r+0x156>
 801a558:	eba0 0308 	sub.w	r3, r0, r8
 801a55c:	fa09 f303 	lsl.w	r3, r9, r3
 801a560:	4313      	orrs	r3, r2
 801a562:	9304      	str	r3, [sp, #16]
 801a564:	46a2      	mov	sl, r4
 801a566:	e7d2      	b.n	801a50e <_vfiprintf_r+0xe2>
 801a568:	9b03      	ldr	r3, [sp, #12]
 801a56a:	1d19      	adds	r1, r3, #4
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	9103      	str	r1, [sp, #12]
 801a570:	2b00      	cmp	r3, #0
 801a572:	bfbb      	ittet	lt
 801a574:	425b      	neglt	r3, r3
 801a576:	f042 0202 	orrlt.w	r2, r2, #2
 801a57a:	9307      	strge	r3, [sp, #28]
 801a57c:	9307      	strlt	r3, [sp, #28]
 801a57e:	bfb8      	it	lt
 801a580:	9204      	strlt	r2, [sp, #16]
 801a582:	7823      	ldrb	r3, [r4, #0]
 801a584:	2b2e      	cmp	r3, #46	; 0x2e
 801a586:	d10c      	bne.n	801a5a2 <_vfiprintf_r+0x176>
 801a588:	7863      	ldrb	r3, [r4, #1]
 801a58a:	2b2a      	cmp	r3, #42	; 0x2a
 801a58c:	d135      	bne.n	801a5fa <_vfiprintf_r+0x1ce>
 801a58e:	9b03      	ldr	r3, [sp, #12]
 801a590:	1d1a      	adds	r2, r3, #4
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	9203      	str	r2, [sp, #12]
 801a596:	2b00      	cmp	r3, #0
 801a598:	bfb8      	it	lt
 801a59a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a59e:	3402      	adds	r4, #2
 801a5a0:	9305      	str	r3, [sp, #20]
 801a5a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a688 <_vfiprintf_r+0x25c>
 801a5a6:	7821      	ldrb	r1, [r4, #0]
 801a5a8:	2203      	movs	r2, #3
 801a5aa:	4650      	mov	r0, sl
 801a5ac:	f7e5 feb0 	bl	8000310 <memchr>
 801a5b0:	b140      	cbz	r0, 801a5c4 <_vfiprintf_r+0x198>
 801a5b2:	2340      	movs	r3, #64	; 0x40
 801a5b4:	eba0 000a 	sub.w	r0, r0, sl
 801a5b8:	fa03 f000 	lsl.w	r0, r3, r0
 801a5bc:	9b04      	ldr	r3, [sp, #16]
 801a5be:	4303      	orrs	r3, r0
 801a5c0:	3401      	adds	r4, #1
 801a5c2:	9304      	str	r3, [sp, #16]
 801a5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5c8:	482c      	ldr	r0, [pc, #176]	; (801a67c <_vfiprintf_r+0x250>)
 801a5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a5ce:	2206      	movs	r2, #6
 801a5d0:	f7e5 fe9e 	bl	8000310 <memchr>
 801a5d4:	2800      	cmp	r0, #0
 801a5d6:	d03f      	beq.n	801a658 <_vfiprintf_r+0x22c>
 801a5d8:	4b29      	ldr	r3, [pc, #164]	; (801a680 <_vfiprintf_r+0x254>)
 801a5da:	bb1b      	cbnz	r3, 801a624 <_vfiprintf_r+0x1f8>
 801a5dc:	9b03      	ldr	r3, [sp, #12]
 801a5de:	3307      	adds	r3, #7
 801a5e0:	f023 0307 	bic.w	r3, r3, #7
 801a5e4:	3308      	adds	r3, #8
 801a5e6:	9303      	str	r3, [sp, #12]
 801a5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5ea:	443b      	add	r3, r7
 801a5ec:	9309      	str	r3, [sp, #36]	; 0x24
 801a5ee:	e767      	b.n	801a4c0 <_vfiprintf_r+0x94>
 801a5f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5f4:	460c      	mov	r4, r1
 801a5f6:	2001      	movs	r0, #1
 801a5f8:	e7a5      	b.n	801a546 <_vfiprintf_r+0x11a>
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	3401      	adds	r4, #1
 801a5fe:	9305      	str	r3, [sp, #20]
 801a600:	4619      	mov	r1, r3
 801a602:	f04f 0c0a 	mov.w	ip, #10
 801a606:	4620      	mov	r0, r4
 801a608:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a60c:	3a30      	subs	r2, #48	; 0x30
 801a60e:	2a09      	cmp	r2, #9
 801a610:	d903      	bls.n	801a61a <_vfiprintf_r+0x1ee>
 801a612:	2b00      	cmp	r3, #0
 801a614:	d0c5      	beq.n	801a5a2 <_vfiprintf_r+0x176>
 801a616:	9105      	str	r1, [sp, #20]
 801a618:	e7c3      	b.n	801a5a2 <_vfiprintf_r+0x176>
 801a61a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a61e:	4604      	mov	r4, r0
 801a620:	2301      	movs	r3, #1
 801a622:	e7f0      	b.n	801a606 <_vfiprintf_r+0x1da>
 801a624:	ab03      	add	r3, sp, #12
 801a626:	9300      	str	r3, [sp, #0]
 801a628:	462a      	mov	r2, r5
 801a62a:	4b16      	ldr	r3, [pc, #88]	; (801a684 <_vfiprintf_r+0x258>)
 801a62c:	a904      	add	r1, sp, #16
 801a62e:	4630      	mov	r0, r6
 801a630:	f7fb feda 	bl	80163e8 <_printf_float>
 801a634:	4607      	mov	r7, r0
 801a636:	1c78      	adds	r0, r7, #1
 801a638:	d1d6      	bne.n	801a5e8 <_vfiprintf_r+0x1bc>
 801a63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a63c:	07d9      	lsls	r1, r3, #31
 801a63e:	d405      	bmi.n	801a64c <_vfiprintf_r+0x220>
 801a640:	89ab      	ldrh	r3, [r5, #12]
 801a642:	059a      	lsls	r2, r3, #22
 801a644:	d402      	bmi.n	801a64c <_vfiprintf_r+0x220>
 801a646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a648:	f7fb fd79 	bl	801613e <__retarget_lock_release_recursive>
 801a64c:	89ab      	ldrh	r3, [r5, #12]
 801a64e:	065b      	lsls	r3, r3, #25
 801a650:	f53f af12 	bmi.w	801a478 <_vfiprintf_r+0x4c>
 801a654:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a656:	e711      	b.n	801a47c <_vfiprintf_r+0x50>
 801a658:	ab03      	add	r3, sp, #12
 801a65a:	9300      	str	r3, [sp, #0]
 801a65c:	462a      	mov	r2, r5
 801a65e:	4b09      	ldr	r3, [pc, #36]	; (801a684 <_vfiprintf_r+0x258>)
 801a660:	a904      	add	r1, sp, #16
 801a662:	4630      	mov	r0, r6
 801a664:	f7fc f94c 	bl	8016900 <_printf_i>
 801a668:	e7e4      	b.n	801a634 <_vfiprintf_r+0x208>
 801a66a:	bf00      	nop
 801a66c:	0801e0cc 	.word	0x0801e0cc
 801a670:	0801e0ec 	.word	0x0801e0ec
 801a674:	0801e0ac 	.word	0x0801e0ac
 801a678:	0801e504 	.word	0x0801e504
 801a67c:	0801e50e 	.word	0x0801e50e
 801a680:	080163e9 	.word	0x080163e9
 801a684:	0801a409 	.word	0x0801a409
 801a688:	0801e50a 	.word	0x0801e50a

0801a68c <__swbuf_r>:
 801a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a68e:	460e      	mov	r6, r1
 801a690:	4614      	mov	r4, r2
 801a692:	4605      	mov	r5, r0
 801a694:	b118      	cbz	r0, 801a69e <__swbuf_r+0x12>
 801a696:	6983      	ldr	r3, [r0, #24]
 801a698:	b90b      	cbnz	r3, 801a69e <__swbuf_r+0x12>
 801a69a:	f7fb fc8b 	bl	8015fb4 <__sinit>
 801a69e:	4b21      	ldr	r3, [pc, #132]	; (801a724 <__swbuf_r+0x98>)
 801a6a0:	429c      	cmp	r4, r3
 801a6a2:	d12b      	bne.n	801a6fc <__swbuf_r+0x70>
 801a6a4:	686c      	ldr	r4, [r5, #4]
 801a6a6:	69a3      	ldr	r3, [r4, #24]
 801a6a8:	60a3      	str	r3, [r4, #8]
 801a6aa:	89a3      	ldrh	r3, [r4, #12]
 801a6ac:	071a      	lsls	r2, r3, #28
 801a6ae:	d52f      	bpl.n	801a710 <__swbuf_r+0x84>
 801a6b0:	6923      	ldr	r3, [r4, #16]
 801a6b2:	b36b      	cbz	r3, 801a710 <__swbuf_r+0x84>
 801a6b4:	6923      	ldr	r3, [r4, #16]
 801a6b6:	6820      	ldr	r0, [r4, #0]
 801a6b8:	1ac0      	subs	r0, r0, r3
 801a6ba:	6963      	ldr	r3, [r4, #20]
 801a6bc:	b2f6      	uxtb	r6, r6
 801a6be:	4283      	cmp	r3, r0
 801a6c0:	4637      	mov	r7, r6
 801a6c2:	dc04      	bgt.n	801a6ce <__swbuf_r+0x42>
 801a6c4:	4621      	mov	r1, r4
 801a6c6:	4628      	mov	r0, r5
 801a6c8:	f7fe fb86 	bl	8018dd8 <_fflush_r>
 801a6cc:	bb30      	cbnz	r0, 801a71c <__swbuf_r+0x90>
 801a6ce:	68a3      	ldr	r3, [r4, #8]
 801a6d0:	3b01      	subs	r3, #1
 801a6d2:	60a3      	str	r3, [r4, #8]
 801a6d4:	6823      	ldr	r3, [r4, #0]
 801a6d6:	1c5a      	adds	r2, r3, #1
 801a6d8:	6022      	str	r2, [r4, #0]
 801a6da:	701e      	strb	r6, [r3, #0]
 801a6dc:	6963      	ldr	r3, [r4, #20]
 801a6de:	3001      	adds	r0, #1
 801a6e0:	4283      	cmp	r3, r0
 801a6e2:	d004      	beq.n	801a6ee <__swbuf_r+0x62>
 801a6e4:	89a3      	ldrh	r3, [r4, #12]
 801a6e6:	07db      	lsls	r3, r3, #31
 801a6e8:	d506      	bpl.n	801a6f8 <__swbuf_r+0x6c>
 801a6ea:	2e0a      	cmp	r6, #10
 801a6ec:	d104      	bne.n	801a6f8 <__swbuf_r+0x6c>
 801a6ee:	4621      	mov	r1, r4
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	f7fe fb71 	bl	8018dd8 <_fflush_r>
 801a6f6:	b988      	cbnz	r0, 801a71c <__swbuf_r+0x90>
 801a6f8:	4638      	mov	r0, r7
 801a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6fc:	4b0a      	ldr	r3, [pc, #40]	; (801a728 <__swbuf_r+0x9c>)
 801a6fe:	429c      	cmp	r4, r3
 801a700:	d101      	bne.n	801a706 <__swbuf_r+0x7a>
 801a702:	68ac      	ldr	r4, [r5, #8]
 801a704:	e7cf      	b.n	801a6a6 <__swbuf_r+0x1a>
 801a706:	4b09      	ldr	r3, [pc, #36]	; (801a72c <__swbuf_r+0xa0>)
 801a708:	429c      	cmp	r4, r3
 801a70a:	bf08      	it	eq
 801a70c:	68ec      	ldreq	r4, [r5, #12]
 801a70e:	e7ca      	b.n	801a6a6 <__swbuf_r+0x1a>
 801a710:	4621      	mov	r1, r4
 801a712:	4628      	mov	r0, r5
 801a714:	f000 f80c 	bl	801a730 <__swsetup_r>
 801a718:	2800      	cmp	r0, #0
 801a71a:	d0cb      	beq.n	801a6b4 <__swbuf_r+0x28>
 801a71c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a720:	e7ea      	b.n	801a6f8 <__swbuf_r+0x6c>
 801a722:	bf00      	nop
 801a724:	0801e0cc 	.word	0x0801e0cc
 801a728:	0801e0ec 	.word	0x0801e0ec
 801a72c:	0801e0ac 	.word	0x0801e0ac

0801a730 <__swsetup_r>:
 801a730:	4b32      	ldr	r3, [pc, #200]	; (801a7fc <__swsetup_r+0xcc>)
 801a732:	b570      	push	{r4, r5, r6, lr}
 801a734:	681d      	ldr	r5, [r3, #0]
 801a736:	4606      	mov	r6, r0
 801a738:	460c      	mov	r4, r1
 801a73a:	b125      	cbz	r5, 801a746 <__swsetup_r+0x16>
 801a73c:	69ab      	ldr	r3, [r5, #24]
 801a73e:	b913      	cbnz	r3, 801a746 <__swsetup_r+0x16>
 801a740:	4628      	mov	r0, r5
 801a742:	f7fb fc37 	bl	8015fb4 <__sinit>
 801a746:	4b2e      	ldr	r3, [pc, #184]	; (801a800 <__swsetup_r+0xd0>)
 801a748:	429c      	cmp	r4, r3
 801a74a:	d10f      	bne.n	801a76c <__swsetup_r+0x3c>
 801a74c:	686c      	ldr	r4, [r5, #4]
 801a74e:	89a3      	ldrh	r3, [r4, #12]
 801a750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a754:	0719      	lsls	r1, r3, #28
 801a756:	d42c      	bmi.n	801a7b2 <__swsetup_r+0x82>
 801a758:	06dd      	lsls	r5, r3, #27
 801a75a:	d411      	bmi.n	801a780 <__swsetup_r+0x50>
 801a75c:	2309      	movs	r3, #9
 801a75e:	6033      	str	r3, [r6, #0]
 801a760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a764:	81a3      	strh	r3, [r4, #12]
 801a766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a76a:	e03e      	b.n	801a7ea <__swsetup_r+0xba>
 801a76c:	4b25      	ldr	r3, [pc, #148]	; (801a804 <__swsetup_r+0xd4>)
 801a76e:	429c      	cmp	r4, r3
 801a770:	d101      	bne.n	801a776 <__swsetup_r+0x46>
 801a772:	68ac      	ldr	r4, [r5, #8]
 801a774:	e7eb      	b.n	801a74e <__swsetup_r+0x1e>
 801a776:	4b24      	ldr	r3, [pc, #144]	; (801a808 <__swsetup_r+0xd8>)
 801a778:	429c      	cmp	r4, r3
 801a77a:	bf08      	it	eq
 801a77c:	68ec      	ldreq	r4, [r5, #12]
 801a77e:	e7e6      	b.n	801a74e <__swsetup_r+0x1e>
 801a780:	0758      	lsls	r0, r3, #29
 801a782:	d512      	bpl.n	801a7aa <__swsetup_r+0x7a>
 801a784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a786:	b141      	cbz	r1, 801a79a <__swsetup_r+0x6a>
 801a788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a78c:	4299      	cmp	r1, r3
 801a78e:	d002      	beq.n	801a796 <__swsetup_r+0x66>
 801a790:	4630      	mov	r0, r6
 801a792:	f7ff fbdd 	bl	8019f50 <_free_r>
 801a796:	2300      	movs	r3, #0
 801a798:	6363      	str	r3, [r4, #52]	; 0x34
 801a79a:	89a3      	ldrh	r3, [r4, #12]
 801a79c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a7a0:	81a3      	strh	r3, [r4, #12]
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	6063      	str	r3, [r4, #4]
 801a7a6:	6923      	ldr	r3, [r4, #16]
 801a7a8:	6023      	str	r3, [r4, #0]
 801a7aa:	89a3      	ldrh	r3, [r4, #12]
 801a7ac:	f043 0308 	orr.w	r3, r3, #8
 801a7b0:	81a3      	strh	r3, [r4, #12]
 801a7b2:	6923      	ldr	r3, [r4, #16]
 801a7b4:	b94b      	cbnz	r3, 801a7ca <__swsetup_r+0x9a>
 801a7b6:	89a3      	ldrh	r3, [r4, #12]
 801a7b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a7c0:	d003      	beq.n	801a7ca <__swsetup_r+0x9a>
 801a7c2:	4621      	mov	r1, r4
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	f000 f847 	bl	801a858 <__smakebuf_r>
 801a7ca:	89a0      	ldrh	r0, [r4, #12]
 801a7cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a7d0:	f010 0301 	ands.w	r3, r0, #1
 801a7d4:	d00a      	beq.n	801a7ec <__swsetup_r+0xbc>
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	60a3      	str	r3, [r4, #8]
 801a7da:	6963      	ldr	r3, [r4, #20]
 801a7dc:	425b      	negs	r3, r3
 801a7de:	61a3      	str	r3, [r4, #24]
 801a7e0:	6923      	ldr	r3, [r4, #16]
 801a7e2:	b943      	cbnz	r3, 801a7f6 <__swsetup_r+0xc6>
 801a7e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a7e8:	d1ba      	bne.n	801a760 <__swsetup_r+0x30>
 801a7ea:	bd70      	pop	{r4, r5, r6, pc}
 801a7ec:	0781      	lsls	r1, r0, #30
 801a7ee:	bf58      	it	pl
 801a7f0:	6963      	ldrpl	r3, [r4, #20]
 801a7f2:	60a3      	str	r3, [r4, #8]
 801a7f4:	e7f4      	b.n	801a7e0 <__swsetup_r+0xb0>
 801a7f6:	2000      	movs	r0, #0
 801a7f8:	e7f7      	b.n	801a7ea <__swsetup_r+0xba>
 801a7fa:	bf00      	nop
 801a7fc:	240000b8 	.word	0x240000b8
 801a800:	0801e0cc 	.word	0x0801e0cc
 801a804:	0801e0ec 	.word	0x0801e0ec
 801a808:	0801e0ac 	.word	0x0801e0ac

0801a80c <__swhatbuf_r>:
 801a80c:	b570      	push	{r4, r5, r6, lr}
 801a80e:	460e      	mov	r6, r1
 801a810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a814:	2900      	cmp	r1, #0
 801a816:	b096      	sub	sp, #88	; 0x58
 801a818:	4614      	mov	r4, r2
 801a81a:	461d      	mov	r5, r3
 801a81c:	da08      	bge.n	801a830 <__swhatbuf_r+0x24>
 801a81e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a822:	2200      	movs	r2, #0
 801a824:	602a      	str	r2, [r5, #0]
 801a826:	061a      	lsls	r2, r3, #24
 801a828:	d410      	bmi.n	801a84c <__swhatbuf_r+0x40>
 801a82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a82e:	e00e      	b.n	801a84e <__swhatbuf_r+0x42>
 801a830:	466a      	mov	r2, sp
 801a832:	f000 f859 	bl	801a8e8 <_fstat_r>
 801a836:	2800      	cmp	r0, #0
 801a838:	dbf1      	blt.n	801a81e <__swhatbuf_r+0x12>
 801a83a:	9a01      	ldr	r2, [sp, #4]
 801a83c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a844:	425a      	negs	r2, r3
 801a846:	415a      	adcs	r2, r3
 801a848:	602a      	str	r2, [r5, #0]
 801a84a:	e7ee      	b.n	801a82a <__swhatbuf_r+0x1e>
 801a84c:	2340      	movs	r3, #64	; 0x40
 801a84e:	2000      	movs	r0, #0
 801a850:	6023      	str	r3, [r4, #0]
 801a852:	b016      	add	sp, #88	; 0x58
 801a854:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a858 <__smakebuf_r>:
 801a858:	898b      	ldrh	r3, [r1, #12]
 801a85a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a85c:	079d      	lsls	r5, r3, #30
 801a85e:	4606      	mov	r6, r0
 801a860:	460c      	mov	r4, r1
 801a862:	d507      	bpl.n	801a874 <__smakebuf_r+0x1c>
 801a864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a868:	6023      	str	r3, [r4, #0]
 801a86a:	6123      	str	r3, [r4, #16]
 801a86c:	2301      	movs	r3, #1
 801a86e:	6163      	str	r3, [r4, #20]
 801a870:	b002      	add	sp, #8
 801a872:	bd70      	pop	{r4, r5, r6, pc}
 801a874:	ab01      	add	r3, sp, #4
 801a876:	466a      	mov	r2, sp
 801a878:	f7ff ffc8 	bl	801a80c <__swhatbuf_r>
 801a87c:	9900      	ldr	r1, [sp, #0]
 801a87e:	4605      	mov	r5, r0
 801a880:	4630      	mov	r0, r6
 801a882:	f7fb fcad 	bl	80161e0 <_malloc_r>
 801a886:	b948      	cbnz	r0, 801a89c <__smakebuf_r+0x44>
 801a888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a88c:	059a      	lsls	r2, r3, #22
 801a88e:	d4ef      	bmi.n	801a870 <__smakebuf_r+0x18>
 801a890:	f023 0303 	bic.w	r3, r3, #3
 801a894:	f043 0302 	orr.w	r3, r3, #2
 801a898:	81a3      	strh	r3, [r4, #12]
 801a89a:	e7e3      	b.n	801a864 <__smakebuf_r+0xc>
 801a89c:	4b0d      	ldr	r3, [pc, #52]	; (801a8d4 <__smakebuf_r+0x7c>)
 801a89e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a8a0:	89a3      	ldrh	r3, [r4, #12]
 801a8a2:	6020      	str	r0, [r4, #0]
 801a8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8a8:	81a3      	strh	r3, [r4, #12]
 801a8aa:	9b00      	ldr	r3, [sp, #0]
 801a8ac:	6163      	str	r3, [r4, #20]
 801a8ae:	9b01      	ldr	r3, [sp, #4]
 801a8b0:	6120      	str	r0, [r4, #16]
 801a8b2:	b15b      	cbz	r3, 801a8cc <__smakebuf_r+0x74>
 801a8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8b8:	4630      	mov	r0, r6
 801a8ba:	f000 f827 	bl	801a90c <_isatty_r>
 801a8be:	b128      	cbz	r0, 801a8cc <__smakebuf_r+0x74>
 801a8c0:	89a3      	ldrh	r3, [r4, #12]
 801a8c2:	f023 0303 	bic.w	r3, r3, #3
 801a8c6:	f043 0301 	orr.w	r3, r3, #1
 801a8ca:	81a3      	strh	r3, [r4, #12]
 801a8cc:	89a0      	ldrh	r0, [r4, #12]
 801a8ce:	4305      	orrs	r5, r0
 801a8d0:	81a5      	strh	r5, [r4, #12]
 801a8d2:	e7cd      	b.n	801a870 <__smakebuf_r+0x18>
 801a8d4:	08015f4d 	.word	0x08015f4d

0801a8d8 <_malloc_usable_size_r>:
 801a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a8dc:	1f18      	subs	r0, r3, #4
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	bfbc      	itt	lt
 801a8e2:	580b      	ldrlt	r3, [r1, r0]
 801a8e4:	18c0      	addlt	r0, r0, r3
 801a8e6:	4770      	bx	lr

0801a8e8 <_fstat_r>:
 801a8e8:	b538      	push	{r3, r4, r5, lr}
 801a8ea:	4d07      	ldr	r5, [pc, #28]	; (801a908 <_fstat_r+0x20>)
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	4604      	mov	r4, r0
 801a8f0:	4608      	mov	r0, r1
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	602b      	str	r3, [r5, #0]
 801a8f6:	f7e7 f8fe 	bl	8001af6 <_fstat>
 801a8fa:	1c43      	adds	r3, r0, #1
 801a8fc:	d102      	bne.n	801a904 <_fstat_r+0x1c>
 801a8fe:	682b      	ldr	r3, [r5, #0]
 801a900:	b103      	cbz	r3, 801a904 <_fstat_r+0x1c>
 801a902:	6023      	str	r3, [r4, #0]
 801a904:	bd38      	pop	{r3, r4, r5, pc}
 801a906:	bf00      	nop
 801a908:	24045fb4 	.word	0x24045fb4

0801a90c <_isatty_r>:
 801a90c:	b538      	push	{r3, r4, r5, lr}
 801a90e:	4d06      	ldr	r5, [pc, #24]	; (801a928 <_isatty_r+0x1c>)
 801a910:	2300      	movs	r3, #0
 801a912:	4604      	mov	r4, r0
 801a914:	4608      	mov	r0, r1
 801a916:	602b      	str	r3, [r5, #0]
 801a918:	f7e7 f8f2 	bl	8001b00 <_isatty>
 801a91c:	1c43      	adds	r3, r0, #1
 801a91e:	d102      	bne.n	801a926 <_isatty_r+0x1a>
 801a920:	682b      	ldr	r3, [r5, #0]
 801a922:	b103      	cbz	r3, 801a926 <_isatty_r+0x1a>
 801a924:	6023      	str	r3, [r4, #0]
 801a926:	bd38      	pop	{r3, r4, r5, pc}
 801a928:	24045fb4 	.word	0x24045fb4

0801a92c <_init>:
 801a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a92e:	bf00      	nop
 801a930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a932:	bc08      	pop	{r3}
 801a934:	469e      	mov	lr, r3
 801a936:	4770      	bx	lr

0801a938 <_fini>:
 801a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a93a:	bf00      	nop
 801a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a93e:	bc08      	pop	{r3}
 801a940:	469e      	mov	lr, r3
 801a942:	4770      	bx	lr
