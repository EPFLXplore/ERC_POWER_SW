
ERC_BMS_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012978  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08012b78  08012b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e60  08012e60  0001415c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08012e60  08012e60  0001415c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08012e60  08012e60  0001415c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e60  08012e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e64  08012e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08012e68  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb0  2000015c  08012fc4  0001415c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000500c  08012fc4  0001500c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001415c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000371a7  00000000  00000000  00014192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007bce  00000000  00000000  0004b339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f18  00000000  00000000  00052f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023df  00000000  00000000  00055e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034fa9  00000000  00000000  000581ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035f3f  00000000  00000000  0008d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00136d24  00000000  00000000  000c30e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f9e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c94c  00000000  00000000  001f9e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0020679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000015c 	.word	0x2000015c
 800021c:	00000000 	.word	0x00000000
 8000220:	08012b60 	.word	0x08012b60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000160 	.word	0x20000160
 800023c:	08012b60 	.word	0x08012b60

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <LTC6811_init>:
bool dischargeEnable = false;	//holds if conditions are met to enable discharge
bool System_OK = true;			//holds if the MCU and BMS_ICs are OK, turned off by watchdog, Comm errors or failed BMS Selftests(Green LED)


//Initializes the LTC's registers and the SPI communication
void LTC6811_init(){
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b089      	sub	sp, #36	@ 0x24
 8000a80:	af06      	add	r7, sp, #24
	//LTC6811_Initialize();	//Initializes the SPI communication at 1MHz
	LTC6811_init_cfg(TOTAL_IC, bms_ic);	//Initializes the confiugration registers to all 0s
 8000a82:	491b      	ldr	r1, [pc, #108]	@ (8000af0 <LTC6811_init+0x74>)
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 f966 	bl	8000d56 <LTC6811_init_cfg>
	//This for loop initializes the configuration register variables
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e018      	b.n	8000ac2 <LTC6811_init+0x46>
		LTC6811_set_cfgr(current_ic,bms_ic,REFON,ADCOPT,gpioBits_a,dccBits_a,dctoBits_a,uv_a,ov_a); // write LTC config like defined above
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <LTC6811_init+0x78>)
 8000a92:	7819      	ldrb	r1, [r3, #0]
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <LTC6811_init+0x7c>)
 8000a96:	781c      	ldrb	r4, [r3, #0]
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <LTC6811_init+0x80>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <LTC6811_init+0x84>)
 8000a9e:	8812      	ldrh	r2, [r2, #0]
 8000aa0:	79f8      	ldrb	r0, [r7, #7]
 8000aa2:	9204      	str	r2, [sp, #16]
 8000aa4:	9303      	str	r3, [sp, #12]
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <LTC6811_init+0x88>)
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <LTC6811_init+0x8c>)
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <LTC6811_init+0x90>)
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	490e      	ldr	r1, [pc, #56]	@ (8000af0 <LTC6811_init+0x74>)
 8000ab8:	f000 f95c 	bl	8000d74 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0e3      	beq.n	8000a90 <LTC6811_init+0x14>
    }
	LTC6811_reset_crc_count(TOTAL_IC,bms_ic);	//sets the CRC count to 0
 8000ac8:	4909      	ldr	r1, [pc, #36]	@ (8000af0 <LTC6811_init+0x74>)
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 f934 	bl	8000d38 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, bms_ic);	//Initializes the LTC's register limits for LTC6811 (because the generic LTC681x libraries can also be used for LTC6813 and others)
 8000ad0:	4907      	ldr	r1, [pc, #28]	@ (8000af0 <LTC6811_init+0x74>)
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 f880 	bl	8000bd8 <LTC6811_init_reg_limits>
	wakeup_sleep(TOTAL_IC);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 f987 	bl	8000dec <wakeup_sleep>
	LTC6811_wrcfg(TOTAL_IC,bms_ic);	//writes the configuration variables in the configuration registers via SPI
 8000ade:	4904      	ldr	r1, [pc, #16]	@ (8000af0 <LTC6811_init+0x74>)
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 f91a 	bl	8000d1a <LTC6811_wrcfg>
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000178 	.word	0x20000178
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000001 	.word	0x20000001
 8000afc:	20000002 	.word	0x20000002
 8000b00:	20000004 	.word	0x20000004
 8000b04:	20000298 	.word	0x20000298
 8000b08:	2000028c 	.word	0x2000028c
 8000b0c:	20000284 	.word	0x20000284

08000b10 <readVoltages>:
			temperatures[current_ic][sensor] = 1/((1/ThermB)*log(((bms_ic[current_ic].aux.a_codes[sensor]/bms_ic[0].aux.a_codes[AUX_CH_VREF2])+1)*ThermRs/ThermR25)+1/(298.15))-273.15;
		}
	}
}

void readVoltages(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	cvError = LTC6811_rdcv(CELL_CH_ALL, TOTAL_IC, bms_ic); // Reads and parses the LTC6811 cell voltage registers.
 8000b16:	4a24      	ldr	r2, [pc, #144]	@ (8000ba8 <readVoltages+0x98>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f8ce 	bl	8000cbc <LTC6811_rdcv>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <readVoltages+0x9c>)
 8000b26:	701a      	strb	r2, [r3, #0]
//		uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
//		                     uint8_t total_ic, // the number of ICs in the system
//		                     cell_asic ic[] // Array of the parsed cell codes
//		                    )
	for(int i=0; i<TOTAL_IC; i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	e02f      	b.n	8000b8e <readVoltages+0x7e>
		for(int j=0; j<CellsNbS; j++){
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	e026      	b.n	8000b82 <readVoltages+0x72>
			voltages[i][j] = bms_ic[i].cells.c_codes[j] * 0.0001; //convert the cell voltage codes to voltages
 8000b34:	491c      	ldr	r1, [pc, #112]	@ (8000ba8 <readVoltages+0x98>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2274      	movs	r2, #116	@ 0x74
 8000b3a:	fb03 f202 	mul.w	r2, r3, r2
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	330c      	adds	r3, #12
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	440b      	add	r3, r1
 8000b48:	88db      	ldrh	r3, [r3, #6]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fcca 	bl	80004e4 <__aeabi_i2d>
 8000b50:	a313      	add	r3, pc, #76	@ (adr r3, 8000ba0 <readVoltages+0x90>)
 8000b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b56:	f7ff fd2f 	bl	80005b8 <__aeabi_dmul>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4610      	mov	r0, r2
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff ff3b 	bl	80009dc <__aeabi_d2f>
 8000b66:	4601      	mov	r1, r0
 8000b68:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <readVoltages+0xa0>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4403      	add	r3, r0
 8000b7a:	6019      	str	r1, [r3, #0]
		for(int j=0; j<CellsNbS; j++){
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	ddd5      	ble.n	8000b34 <readVoltages+0x24>
	for(int i=0; i<TOTAL_IC; i++){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	ddcc      	ble.n	8000b2e <readVoltages+0x1e>
		}
	}
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	eb1c432d 	.word	0xeb1c432d
 8000ba4:	3f1a36e2 	.word	0x3f1a36e2
 8000ba8:	20000178 	.word	0x20000178
 8000bac:	2000029c 	.word	0x2000029c
 8000bb0:	20000260 	.word	0x20000260

08000bb4 <readTemperatures>:
void readTemperatures(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	auxError = LTC6811_rdaux(AUX_CH_ALL, TOTAL_IC, bms_ic);
 8000bb8:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <readTemperatures+0x1c>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f894 	bl	8000cea <LTC6811_rdaux>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <readTemperatures+0x20>)
 8000bc8:	701a      	strb	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000178 	.word	0x20000178
 8000bd4:	2000029d 	.word	0x2000029d

08000bd8 <LTC6811_init_reg_limits>:
#include "stdint.h"
#include "LTC6811.h"
#include "LTC681x.h"

void LTC6811_init_reg_limits(uint8_t total_ic, cell_asic ic[])
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e038      	b.n	8000c5c <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	22e8      	movs	r2, #232	@ 0xe8
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	22e8      	movs	r2, #232	@ 0xe8
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	2204      	movs	r2, #4
 8000c0a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	22e8      	movs	r2, #232	@ 0xe8
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	22e8      	movs	r2, #232	@ 0xe8
 8000c24:	fb02 f303 	mul.w	r3, r2, r3
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	22e8      	movs	r2, #232	@ 0xe8
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2202      	movs	r2, #2
 8000c40:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	22e8      	movs	r2, #232	@ 0xe8
 8000c48:	fb02 f303 	mul.w	r3, r2, r3
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2203      	movs	r2, #3
 8000c52:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3c2      	bcc.n	8000bea <LTC6811_init_reg_limits+0x12>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LTC6811_adcv>:
void LTC6811_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	71bb      	strb	r3, [r7, #6]
 8000c80:	4613      	mov	r3, r2
 8000c82:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8000c84:	797a      	ldrb	r2, [r7, #5]
 8000c86:	79b9      	ldrb	r1, [r7, #6]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f9b0 	bl	8000ff0 <LTC681x_adcv>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LTC6811_adax>:
//Start a GPIO and Vref2 Conversion
void LTC6811_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8000ca8:	79ba      	ldrb	r2, [r7, #6]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f9c9 	bl	8001046 <LTC681x_adax>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <LTC6811_rdcv>:
// Reads and parses the LTC6811 cell voltage registers.
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	603a      	str	r2, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71bb      	strb	r3, [r7, #6]

  int8_t pec_error = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8000cd0:	79b9      	ldrb	r1, [r7, #6]
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 faf8 	bl	80012cc <LTC681x_rdcv>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	603a      	str	r2, [r7, #0]
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdaux(reg,total_ic,ic);
 8000cfe:	79b9      	ldrb	r1, [r7, #6]
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fb95 	bl	8001434 <LTC681x_rdaux>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
  return (pec_error);
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[] //A two dimensional array of the configuration data that will be written
                  )
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	6039      	str	r1, [r7, #0]
 8000d24:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fc2a 	bl	8001584 <LTC681x_wrcfg>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LTC6811_reset_crc_count>:
  LTC681x_check_pec(total_ic,reg,ic);
}

//Helper Function to reset PEC counters
void LTC6811_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fe3b 	bl	80019c4 <LTC681x_reset_crc_count>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <LTC6811_init_cfg>:

//Helper function to intialize CFG variables.
void LTC6811_init_cfg(uint8_t total_ic, cell_asic ic[])
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	6039      	str	r1, [r7, #0]
 8000d60:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fe92 	bl	8001a90 <LTC681x_init_cfg>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LTC6811_set_cfgr>:
					  bool dcc[12], // The DCC bit
					  bool dcto[4], // The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af06      	add	r7, sp, #24
 8000d7a:	6039      	str	r1, [r7, #0]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	460b      	mov	r3, r1
 8000d86:	71bb      	strb	r3, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 8000d8c:	7979      	ldrb	r1, [r7, #5]
 8000d8e:	79ba      	ldrb	r2, [r7, #6]
 8000d90:	79f8      	ldrb	r0, [r7, #7]
 8000d92:	8c3b      	ldrh	r3, [r7, #32]
 8000d94:	9304      	str	r3, [sp, #16]
 8000d96:	8bbb      	ldrh	r3, [r7, #28]
 8000d98:	9303      	str	r3, [sp, #12]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	460b      	mov	r3, r1
 8000da8:	6839      	ldr	r1, [r7, #0]
 8000daa:	f000 fe9b 	bl	8001ae4 <LTC681x_set_cfgr>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <wakeup_idle>:
                                0x2d02, 0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3,
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

void wakeup_idle(uint8_t total_ic)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e009      	b.n	8000dda <wakeup_idle+0x24>
  {
    cs_low();
 8000dc6:	f001 f8e7 	bl	8001f98 <cs_low>
    //delayMicroseconds(2); //Guarantees the isoSPI will be in ready mode
    spi_read_byte(0xff);
 8000dca:	20ff      	movs	r0, #255	@ 0xff
 8000dcc:	f001 f95c 	bl	8002088 <spi_read_byte>
    cs_high();
 8000dd0:	f001 f8ee 	bl	8001fb0 <cs_high>
  for (int i =0; i<total_ic; i++)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dbf1      	blt.n	8000dc6 <wakeup_idle+0x10>
  }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <wakeup_sleep>:

//Generic wakeup commannd to wake the LTC6813 from sleep
void wakeup_sleep(uint8_t total_ic)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e009      	b.n	8000e10 <wakeup_sleep+0x24>
  {
    cs_low();
 8000dfc:	f001 f8cc 	bl	8001f98 <cs_low>
    HAL_Delay(1); // Guarantees the LTC6811 will be in standby
 8000e00:	2001      	movs	r0, #1
 8000e02:	f002 fcd5 	bl	80037b0 <HAL_Delay>
		cs_high();
 8000e06:	f001 f8d3 	bl	8001fb0 <cs_high>
  for (int i =0; i<total_ic; i++)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <wakeup_sleep+0x10>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <cmd_68>:

//Generic function to write 68xx commands. Function calculated PEC for tx_cmd data
void cmd_68(uint8_t tx_cmd[2])
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;
  uint8_t md_bits;

  cmd[0] = tx_cmd[0];
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	723b      	strb	r3, [r7, #8]
  cmd[1] =  tx_cmd[1];
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	727b      	strb	r3, [r7, #9]
  cmd_pec = pec15_calc(2, cmd);
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f000 f8a3 	bl	8000f88 <pec15_calc>
 8000e42:	4603      	mov	r3, r0
 8000e44:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	72fb      	strb	r3, [r7, #11]
	cs_low();
 8000e56:	f001 f89f 	bl	8001f98 <cs_low>
  spi_write_array(4,cmd);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2004      	movs	r0, #4
 8000e62:	f001 f8b1 	bl	8001fc8 <spi_write_array>
	cs_high();
 8000e66:	f001 f8a3 	bl	8001fb0 <cs_high>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <write_68>:

//Generic function to write 68xx commands and write payload data. Function calculated PEC for tx_cmd data
void write_68(uint8_t total_ic , uint8_t tx_cmd[2], uint8_t data[])
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b088      	sub	sp, #32
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  const uint8_t BYTES_IN_REG = 6;
 8000e80:	2306      	movs	r3, #6
 8000e82:	773b      	strb	r3, [r7, #28]
  const uint8_t CMD_LEN = 4+(8*total_ic);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	76fb      	strb	r3, [r7, #27]
  uint8_t *cmd;
  uint16_t data_pec;
  uint16_t cmd_pec;
  uint8_t cmd_index;

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8000e8e:	7efb      	ldrb	r3, [r7, #27]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f011 fcad 	bl	80127f0 <malloc>
 8000e96:	4603      	mov	r3, r0
 8000e98:	617b      	str	r3, [r7, #20]
  cmd[0] = tx_cmd[0];
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	701a      	strb	r2, [r3, #0]
  cmd[1] = tx_cmd[1];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	7852      	ldrb	r2, [r2, #1]
 8000eaa:	701a      	strb	r2, [r3, #0]
  cmd_pec = pec15_calc(2, cmd);
 8000eac:	6979      	ldr	r1, [r7, #20]
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f000 f86a 	bl	8000f88 <pec15_calc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	827b      	strh	r3, [r7, #18]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000eb8:	8a7b      	ldrh	r3, [r7, #18]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3303      	adds	r3, #3
 8000eca:	8a7a      	ldrh	r2, [r7, #18]
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	77bb      	strb	r3, [r7, #30]
 8000ed8:	e042      	b.n	8000f60 <write_68+0xee>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	777b      	strb	r3, [r7, #29]
 8000ede:	e016      	b.n	8000f0e <write_68+0x9c>
    {
      cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8000ee0:	7fbb      	ldrb	r3, [r7, #30]
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	461a      	mov	r2, r3
 8000eee:	7f7b      	ldrb	r3, [r7, #29]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	441a      	add	r2, r3
 8000ef8:	7ffb      	ldrb	r3, [r7, #31]
 8000efa:	6979      	ldr	r1, [r7, #20]
 8000efc:	440b      	add	r3, r1
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	3301      	adds	r3, #1
 8000f06:	77fb      	strb	r3, [r7, #31]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8000f08:	7f7b      	ldrb	r3, [r7, #29]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	777b      	strb	r3, [r7, #29]
 8000f0e:	7f7a      	ldrb	r2, [r7, #29]
 8000f10:	7f3b      	ldrb	r3, [r7, #28]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3e4      	bcc.n	8000ee0 <write_68+0x6e>
    }

    data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 8000f16:	7fbb      	ldrb	r3, [r7, #30]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	461a      	mov	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	441a      	add	r2, r3
 8000f28:	7f3b      	ldrb	r3, [r7, #28]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f82b 	bl	8000f88 <pec15_calc>
 8000f32:	4603      	mov	r3, r0
 8000f34:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8000f36:	8a3b      	ldrh	r3, [r7, #16]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4413      	add	r3, r2
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)data_pec;
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	8a3a      	ldrh	r2, [r7, #16]
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8000f54:	7ffb      	ldrb	r3, [r7, #31]
 8000f56:	3302      	adds	r3, #2
 8000f58:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8000f5a:	7fbb      	ldrb	r3, [r7, #30]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	77bb      	strb	r3, [r7, #30]
 8000f60:	7fbb      	ldrb	r3, [r7, #30]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1b9      	bne.n	8000eda <write_68+0x68>
  }


  cs_low();
 8000f66:	f001 f817 	bl	8001f98 <cs_low>
  spi_write_array(CMD_LEN, cmd);
 8000f6a:	7efb      	ldrb	r3, [r7, #27]
 8000f6c:	6979      	ldr	r1, [r7, #20]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f82a 	bl	8001fc8 <spi_write_array>
  cs_high();
 8000f74:	f001 f81c 	bl	8001fb0 <cs_high>
  free(cmd);
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f011 fc41 	bl	8012800 <free>
}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;

  remainder = 16;//initialize the PEC
 8000f94:	2310      	movs	r3, #16
 8000f96:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000f98:	2300      	movs	r3, #0
 8000f9a:	737b      	strb	r3, [r7, #13]
 8000f9c:	e019      	b.n	8000fd2 <pec15_calc+0x4a>
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	09db      	lsrs	r3, r3, #7
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	7b7a      	ldrb	r2, [r7, #13]
 8000fa6:	6839      	ldr	r1, [r7, #0]
 8000fa8:	440a      	add	r2, r1
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	4053      	eors	r3, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	817b      	strh	r3, [r7, #10]

    remainder = (remainder<<8)^crc15Table[addr];
 8000fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	897b      	ldrh	r3, [r7, #10]
 8000fbe:	490b      	ldr	r1, [pc, #44]	@ (8000fec <pec15_calc+0x64>)
 8000fc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	737b      	strb	r3, [r7, #13]
 8000fd2:	7b7a      	ldrb	r2, [r7, #13]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3e1      	bcc.n	8000f9e <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b29b      	uxth	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	08012be4 	.word	0x08012be4

08000ff0 <LTC681x_adcv>:
void LTC681x_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	4613      	mov	r3, r2
 8001000:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	105b      	asrs	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x02;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3302      	adds	r3, #2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	01db      	lsls	r3, r3, #7
 800101a:	73fb      	strb	r3, [r7, #15]
  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	b2da      	uxtb	r2, r3
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4413      	add	r3, r2
 8001026:	b2da      	uxtb	r2, r3
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	4413      	add	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3360      	adds	r3, #96	@ 0x60
 8001030:	b2db      	uxtb	r3, r3
 8001032:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fef2 	bl	8000e22 <cmd_68>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <LTC681x_adax>:
//Start a GPIO and Vref2 Conversion
void LTC681x_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	460a      	mov	r2, r1
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	4613      	mov	r3, r2
 8001054:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	105b      	asrs	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x04;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3304      	adds	r3, #4
 8001066:	b2db      	uxtb	r3, r3
 8001068:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	01db      	lsls	r3, r3, #7
 800106e:	73fb      	strb	r3, [r7, #15]
  cmd[1] = md_bits + 0x60 + CHG ;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	4413      	add	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	3360      	adds	r3, #96	@ 0x60
 800107a:	b2db      	uxtb	r3, r3
 800107c:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fecd 	bl	8000e22 <cmd_68>

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LTC681x_rdcv_reg>:
// Reads the raw cell voltage register data
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	603a      	str	r2, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	460b      	mov	r3, r1
 800109e:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 80010a0:	2308      	movs	r3, #8
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1)     //1: RDCVA
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d104      	bne.n	80010b4 <LTC681x_rdcv_reg+0x24>
  {
    cmd[1] = 0x04;
 80010aa:	2304      	movs	r3, #4
 80010ac:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	723b      	strb	r3, [r7, #8]
 80010b2:	e026      	b.n	8001102 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 2) //2: RDCVB
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d104      	bne.n	80010c4 <LTC681x_rdcv_reg+0x34>
  {
    cmd[1] = 0x06;
 80010ba:	2306      	movs	r3, #6
 80010bc:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	723b      	strb	r3, [r7, #8]
 80010c2:	e01e      	b.n	8001102 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 3) //3: RDCVC
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d104      	bne.n	80010d4 <LTC681x_rdcv_reg+0x44>
  {
    cmd[1] = 0x08;
 80010ca:	2308      	movs	r3, #8
 80010cc:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	723b      	strb	r3, [r7, #8]
 80010d2:	e016      	b.n	8001102 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 4) //4: RDCVD
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d104      	bne.n	80010e4 <LTC681x_rdcv_reg+0x54>
  {
    cmd[1] = 0x0A;
 80010da:	230a      	movs	r3, #10
 80010dc:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	723b      	strb	r3, [r7, #8]
 80010e2:	e00e      	b.n	8001102 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 5) //4: RDCVE
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d104      	bne.n	80010f4 <LTC681x_rdcv_reg+0x64>
  {
    cmd[1] = 0x09;
 80010ea:	2309      	movs	r3, #9
 80010ec:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	723b      	strb	r3, [r7, #8]
 80010f2:	e006      	b.n	8001102 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 6) //4: RDCVF
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d103      	bne.n	8001102 <LTC681x_rdcv_reg+0x72>
  {
    cmd[1] = 0x0B;
 80010fa:	230b      	movs	r3, #11
 80010fc:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	723b      	strb	r3, [r7, #8]
  }


  cmd_pec = pec15_calc(2, cmd);
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4619      	mov	r1, r3
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff ff3d 	bl	8000f88 <pec15_calc>
 800110e:	4603      	mov	r3, r0
 8001110:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b29b      	uxth	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 800111c:	89bb      	ldrh	r3, [r7, #12]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	72fb      	strb	r3, [r7, #11]

  cs_low();
 8001122:	f000 ff39 	bl	8001f98 <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	fb12 f303 	smulbb	r3, r2, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f107 0008 	add.w	r0, r7, #8
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	2104      	movs	r1, #4
 8001138:	f000 ff6a 	bl	8002010 <spi_write_read>
  cs_high();
 800113c:	f000 ff38 	bl	8001fb0 <cs_high>

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <parse_cells>:

//helper function that parses voltage measurement registers
int8_t parse_cells(uint8_t current_ic, uint8_t cell_reg, uint8_t cell_data[], uint16_t *cell_codes, uint8_t *ic_pec)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	60ba      	str	r2, [r7, #8]
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	460b      	mov	r3, r1
 8001158:	73bb      	strb	r3, [r7, #14]

  const uint8_t BYT_IN_REG = 6;
 800115a:	2306      	movs	r3, #6
 800115c:	773b      	strb	r3, [r7, #28]
  const uint8_t CELL_IN_REG = 3;
 800115e:	2303      	movs	r3, #3
 8001160:	76fb      	strb	r3, [r7, #27]
  int8_t pec_error = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	77fb      	strb	r3, [r7, #31]
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	77bb      	strb	r3, [r7, #30]


  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 800116c:	2300      	movs	r3, #0
 800116e:	777b      	strb	r3, [r7, #29]
 8001170:	e01f      	b.n	80011b2 <parse_cells+0x6a>
  {
    // loops once for each of the 3 cell voltage codes in the register

    parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 8001172:	7fbb      	ldrb	r3, [r7, #30]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	7fbb      	ldrb	r3, [r7, #30]
 800117e:	3301      	adds	r3, #1
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	440b      	add	r3, r1
 800118c:	82bb      	strh	r3, [r7, #20]
    // create the parsed cell voltage code
    cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 800118e:	7f7a      	ldrb	r2, [r7, #29]
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	3b01      	subs	r3, #1
 8001194:	7ef9      	ldrb	r1, [r7, #27]
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	4413      	add	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	8aba      	ldrh	r2, [r7, #20]
 80011a4:	801a      	strh	r2, [r3, #0]
    data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 80011a6:	7fbb      	ldrb	r3, [r7, #30]
 80011a8:	3302      	adds	r3, #2
 80011aa:	77bb      	strb	r3, [r7, #30]
  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80011ac:	7f7b      	ldrb	r3, [r7, #29]
 80011ae:	3301      	adds	r3, #1
 80011b0:	777b      	strb	r3, [r7, #29]
 80011b2:	7f7a      	ldrb	r2, [r7, #29]
 80011b4:	7efb      	ldrb	r3, [r7, #27]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3db      	bcc.n	8001172 <parse_cells+0x2a>
    //must increment by two for each parsed cell code
  }

  received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80011ba:	7fbb      	ldrb	r3, [r7, #30]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7fbb      	ldrb	r3, [r7, #30]
 80011ca:	3301      	adds	r3, #1
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	440b      	add	r3, r1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	833b      	strh	r3, [r7, #24]
  //after the 6 cell voltage data bytes
  data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	461a      	mov	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	441a      	add	r2, r3
 80011e4:	7f3b      	ldrb	r3, [r7, #28]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fecd 	bl	8000f88 <pec15_calc>
 80011ee:	4603      	mov	r3, r0
 80011f0:	82fb      	strh	r3, [r7, #22]

  if (received_pec != data_pec)
 80011f2:	8b3a      	ldrh	r2, [r7, #24]
 80011f4:	8afb      	ldrh	r3, [r7, #22]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d008      	beq.n	800120c <parse_cells+0xc4>
  {
    pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 80011fa:	2301      	movs	r3, #1
 80011fc:	77fb      	strb	r3, [r7, #31]
    ic_pec[cell_reg-1]=1;
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	3b01      	subs	r3, #1
 8001202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001204:	4413      	add	r3, r2
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e005      	b.n	8001218 <parse_cells+0xd0>
  }
  else
  {
    ic_pec[cell_reg-1]=0;
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	3b01      	subs	r3, #1
 8001210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001212:	4413      	add	r3, r2
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
  }
  data_counter=data_counter+2;
 8001218:	7fbb      	ldrb	r3, [r7, #30]
 800121a:	3302      	adds	r3, #2
 800121c:	77bb      	strb	r3, [r7, #30]
  return(pec_error);
 800121e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	603a      	str	r2, [r7, #0]
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	460b      	mov	r3, r1
 8001238:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 800123a:	2308      	movs	r3, #8
 800123c:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d104      	bne.n	800124e <LTC681x_rdaux_reg+0x24>
  {
    cmd[1] = 0x0C;
 8001244:	230c      	movs	r3, #12
 8001246:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	723b      	strb	r3, [r7, #8]
 800124c:	e01b      	b.n	8001286 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 2)  //Read back auxiliary group B
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d104      	bne.n	800125e <LTC681x_rdaux_reg+0x34>
  {
    cmd[1] = 0x0e;
 8001254:	230e      	movs	r3, #14
 8001256:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001258:	2300      	movs	r3, #0
 800125a:	723b      	strb	r3, [r7, #8]
 800125c:	e013      	b.n	8001286 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 3)  //Read back auxiliary group C
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d104      	bne.n	800126e <LTC681x_rdaux_reg+0x44>
  {
    cmd[1] = 0x0D;
 8001264:	230d      	movs	r3, #13
 8001266:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	723b      	strb	r3, [r7, #8]
 800126c:	e00b      	b.n	8001286 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 4)  //Read back auxiliary group D
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d104      	bne.n	800127e <LTC681x_rdaux_reg+0x54>
  {
    cmd[1] = 0x0F;
 8001274:	230f      	movs	r3, #15
 8001276:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	723b      	strb	r3, [r7, #8]
 800127c:	e003      	b.n	8001286 <LTC681x_rdaux_reg+0x5c>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 800127e:	230c      	movs	r3, #12
 8001280:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = pec15_calc(2, cmd);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fe7b 	bl	8000f88 <pec15_calc>
 8001292:	4603      	mov	r3, r0
 8001294:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001296:	89bb      	ldrh	r3, [r7, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	b29b      	uxth	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 80012a0:	89bb      	ldrh	r3, [r7, #12]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	72fb      	strb	r3, [r7, #11]

  cs_low();
 80012a6:	f000 fe77 	bl	8001f98 <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	fb12 f303 	smulbb	r3, r2, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f107 0008 	add.w	r0, r7, #8
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	2104      	movs	r1, #4
 80012bc:	f000 fea8 	bl	8002010 <spi_write_read>
  cs_high();
 80012c0:	f000 fe76 	bl	8001fb0 <cs_high>

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <LTC681x_rdcv>:
//Reads and parses the LTC681x cell voltage registers.
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	460b      	mov	r3, r1
 80012da:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
  uint8_t *cell_data;
  uint8_t c_ic = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	75bb      	strb	r3, [r7, #22]
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f011 fa81 	bl	80127f0 <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d14b      	bne.n	8001390 <LTC681x_rdcv+0xc4>
  {
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 80012f8:	2301      	movs	r3, #1
 80012fa:	757b      	strb	r3, [r7, #21]
 80012fc:	e041      	b.n	8001382 <LTC681x_rdcv+0xb6>
    {
      LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 80012fe:	79b9      	ldrb	r1, [r7, #6]
 8001300:	7d7b      	ldrb	r3, [r7, #21]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fec3 	bl	8001090 <LTC681x_rdcv_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	e031      	b.n	8001374 <LTC681x_rdcv+0xa8>
      {
        if (ic->isospi_reverse == false)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <LTC681x_rdcv+0x5a>
        {
          c_ic = current_ic;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	75bb      	strb	r3, [r7, #22]
 8001324:	e006      	b.n	8001334 <LTC681x_rdcv+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	b2d8      	uxtb	r0, r3
                                            &ic[c_ic].cells.c_codes[0],
 8001338:	7dbb      	ldrb	r3, [r7, #22]
 800133a:	22e8      	movs	r2, #232	@ 0xe8
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001344:	f103 041e 	add.w	r4, r3, #30
                                            &ic[c_ic].cells.pec_match[0]);
 8001348:	7dbb      	ldrb	r3, [r7, #22]
 800134a:	22e8      	movs	r2, #232	@ 0xe8
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001354:	3342      	adds	r3, #66	@ 0x42
 8001356:	7d79      	ldrb	r1, [r7, #21]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4623      	mov	r3, r4
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	f7ff fef3 	bl	8001148 <parse_cells>
 8001362:	4603      	mov	r3, r0
 8001364:	b2da      	uxtb	r2, r3
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	4413      	add	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	3301      	adds	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbc9      	blt.n	8001310 <LTC681x_rdcv+0x44>
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 800137c:	7d7b      	ldrb	r3, [r7, #21]
 800137e:	3301      	adds	r3, #1
 8001380:	757b      	strb	r3, [r7, #21]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001388:	7d7a      	ldrb	r2, [r7, #21]
 800138a:	429a      	cmp	r2, r3
 800138c:	d9b7      	bls.n	80012fe <LTC681x_rdcv+0x32>
 800138e:	e043      	b.n	8001418 <LTC681x_rdcv+0x14c>
    }
  }

  else
  {
    LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8001390:	79b9      	ldrb	r1, [r7, #6]
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe7a 	bl	8001090 <LTC681x_rdcv_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e036      	b.n	8001410 <LTC681x_rdcv+0x144>
    {
      if (ic->isospi_reverse == false)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <LTC681x_rdcv+0xec>
      {
        c_ic = current_ic;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	75bb      	strb	r3, [r7, #22]
 80013b6:	e006      	b.n	80013c6 <LTC681x_rdcv+0xfa>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	b2d8      	uxtb	r0, r3
 80013ca:	7dbb      	ldrb	r3, [r7, #22]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	189c      	adds	r4, r3, r2
                                          &ic[c_ic].cells.c_codes[0],
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	22e8      	movs	r2, #232	@ 0xe8
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 80013e0:	f103 051e 	add.w	r5, r3, #30
                                          &ic[c_ic].cells.pec_match[0]);
 80013e4:	7dbb      	ldrb	r3, [r7, #22]
 80013e6:	22e8      	movs	r2, #232	@ 0xe8
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 80013f0:	3342      	adds	r3, #66	@ 0x42
 80013f2:	79f9      	ldrb	r1, [r7, #7]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	462b      	mov	r3, r5
 80013f8:	4622      	mov	r2, r4
 80013fa:	f7ff fea5 	bl	8001148 <parse_cells>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	4413      	add	r3, r2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbc4      	blt.n	80013a2 <LTC681x_rdcv+0xd6>
    }
  }
  LTC681x_check_pec(total_ic,CELL,ic);
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f92c 	bl	800167c <LTC681x_check_pec>
  free(cell_data);
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f011 f9eb 	bl	8012800 <free>
  return(pec_error);
 800142a:	7dfb      	ldrb	r3, [r7, #23]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}

08001434 <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af02      	add	r7, sp, #8
 800143a:	4603      	mov	r3, r0
 800143c:	603a      	str	r2, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	460b      	mov	r3, r1
 8001442:	71bb      	strb	r3, [r7, #6]
  uint8_t *data;
  int8_t pec_error = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]
  uint8_t c_ic =0;
 8001448:	2300      	movs	r3, #0
 800144a:	75bb      	strb	r3, [r7, #22]
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4618      	mov	r0, r3
 8001452:	f011 f9cd 	bl	80127f0 <malloc>
 8001456:	4603      	mov	r3, r0
 8001458:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d147      	bne.n	80014f0 <LTC681x_rdaux+0xbc>
  {
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 8001460:	2301      	movs	r3, #1
 8001462:	757b      	strb	r3, [r7, #21]
 8001464:	e03d      	b.n	80014e2 <LTC681x_rdaux+0xae>
    {
      LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001466:	79b9      	ldrb	r1, [r7, #6]
 8001468:	7d7b      	ldrb	r3, [r7, #21]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fedc 	bl	800122a <LTC681x_rdaux_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e02d      	b.n	80014d4 <LTC681x_rdaux+0xa0>
      {
        if (ic->isospi_reverse == false)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 800147e:	f083 0301 	eor.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <LTC681x_rdaux+0x5a>
        {
          c_ic = current_ic;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	75bb      	strb	r3, [r7, #22]
 800148c:	e006      	b.n	800149c <LTC681x_rdaux+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	79ba      	ldrb	r2, [r7, #6]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = parse_cells(current_ic,gpio_reg, data,
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	b2d8      	uxtb	r0, r3
                                &ic[c_ic].aux.a_codes[0],
 80014a0:	7dbb      	ldrb	r3, [r7, #22]
 80014a2:	22e8      	movs	r2, #232	@ 0xe8
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 80014ac:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                                &ic[c_ic].aux.pec_match[0]);
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	22e8      	movs	r2, #232	@ 0xe8
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 80014bc:	335a      	adds	r3, #90	@ 0x5a
 80014be:	7d79      	ldrb	r1, [r7, #21]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4623      	mov	r3, r4
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	f7ff fe3f 	bl	8001148 <parse_cells>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3301      	adds	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbcd      	blt.n	8001478 <LTC681x_rdaux+0x44>
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 80014dc:	7d7b      	ldrb	r3, [r7, #21]
 80014de:	3301      	adds	r3, #1
 80014e0:	757b      	strb	r3, [r7, #21]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80014e8:	7d7a      	ldrb	r2, [r7, #21]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d9bb      	bls.n	8001466 <LTC681x_rdaux+0x32>
 80014ee:	e03a      	b.n	8001566 <LTC681x_rdaux+0x132>
      }
    }
  }
  else
  {
    LTC681x_rdaux_reg(reg, total_ic, data);
 80014f0:	79b9      	ldrb	r1, [r7, #6]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe97 	bl	800122a <LTC681x_rdaux_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	e02d      	b.n	800155e <LTC681x_rdaux+0x12a>
    {
      if (ic->isospi_reverse == false)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <LTC681x_rdaux+0xe4>
      {
        c_ic = current_ic;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	75bb      	strb	r3, [r7, #22]
 8001516:	e006      	b.n	8001526 <LTC681x_rdaux+0xf2>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	79ba      	ldrb	r2, [r7, #6]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = parse_cells(current_ic,reg, data,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	b2d8      	uxtb	r0, r3
                              &ic[c_ic].aux.a_codes[0],
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	22e8      	movs	r2, #232	@ 0xe8
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 8001536:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                              &ic[c_ic].aux.pec_match[0]);
 800153a:	7dbb      	ldrb	r3, [r7, #22]
 800153c:	22e8      	movs	r2, #232	@ 0xe8
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 8001546:	335a      	adds	r3, #90	@ 0x5a
 8001548:	79f9      	ldrb	r1, [r7, #7]
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	4623      	mov	r3, r4
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f7ff fdfa 	bl	8001148 <parse_cells>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbcd      	blt.n	8001502 <LTC681x_rdaux+0xce>
    }

  }
  LTC681x_check_pec(total_ic,AUX,ic);
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f885 	bl	800167c <LTC681x_check_pec>
  free(data);
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f011 f944 	bl	8012800 <free>
  return (pec_error);
 8001578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <LTC681x_wrcfg>:

//Write the LTC681x CFGRA
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]
                  )
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0c4      	sub	sp, #272	@ 0x110
 8001588:	af00      	add	r7, sp, #0
 800158a:	4602      	mov	r2, r0
 800158c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001590:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001594:	6019      	str	r1, [r3, #0]
 8001596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800159a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800159e:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[2] = {0x00 , 0x01} ;
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
  uint8_t write_buffer[256];
  uint8_t write_count = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  uint8_t c_ic = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80015ba:	e045      	b.n	8001648 <LTC681x_wrcfg+0xc4>
  {
    if (ic->isospi_reverse == true)
 80015bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <LTC681x_wrcfg+0x54>
    {
      c_ic = current_ic;
 80015ce:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80015d2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80015d6:	e00b      	b.n	80015f0 <LTC681x_wrcfg+0x6c>
    }
    else
    {
      c_ic = total_ic - current_ic - 1;
 80015d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015dc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    }

    for (uint8_t data = 0; data<6; data++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80015f6:	e01e      	b.n	8001636 <LTC681x_wrcfg+0xb2>
    {
      write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80015f8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80015fc:	22e8      	movs	r2, #232	@ 0xe8
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001606:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	18d1      	adds	r1, r2, r3
 800160e:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8001612:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001616:	5c89      	ldrb	r1, [r1, r2]
 8001618:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800161c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001620:	54d1      	strb	r1, [r2, r3]
      write_count++;
 8001622:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001626:	3301      	adds	r3, #1
 8001628:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    for (uint8_t data = 0; data<6; data++)
 800162c:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001630:	3301      	adds	r3, #1
 8001632:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8001636:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800163a:	2b05      	cmp	r3, #5
 800163c:	d9dc      	bls.n	80015f8 <LTC681x_wrcfg+0x74>
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800163e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001642:	3301      	adds	r3, #1
 8001644:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001650:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3b0      	bcc.n	80015bc <LTC681x_wrcfg+0x38>
    }
  }
  write_68(total_ic, cmd, write_buffer);
 800165a:	f107 0208 	add.w	r2, r7, #8
 800165e:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001666:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc00 	bl	8000e72 <write_68>
}
 8001672:	bf00      	nop
 8001674:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <LTC681x_check_pec>:
  return(error);
}

//Helper function that increments PEC counters
void LTC681x_check_pec(uint8_t total_ic,uint8_t reg, cell_asic ic[])
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	@ 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
  switch (reg)
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	2b04      	cmp	r3, #4
 8001690:	f200 8191 	bhi.w	80019b6 <LTC681x_check_pec+0x33a>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <LTC681x_check_pec+0x20>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	080017ad 	.word	0x080017ad
 80016a4:	0800185f 	.word	0x0800185f
 80016a8:	0800190b 	.word	0x0800190b
 80016ac:	0800172f 	.word	0x0800172f
  {
    case CFGRA:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b4:	e036      	b.n	8001724 <LTC681x_check_pec+0xa8>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	22e8      	movs	r2, #232	@ 0xe8
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	21e8      	movs	r1, #232	@ 0xe8
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	440b      	add	r3, r1
 80016d2:	7b9b      	ldrb	r3, [r3, #14]
 80016d4:	4618      	mov	r0, r3
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	21e8      	movs	r1, #232	@ 0xe8
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	440b      	add	r3, r1
 80016e2:	4402      	add	r2, r0
 80016e4:	b292      	uxth	r2, r2
 80016e6:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	22e8      	movs	r2, #232	@ 0xe8
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	21e8      	movs	r1, #232	@ 0xe8
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	440b      	add	r3, r1
 8001706:	7b9b      	ldrb	r3, [r3, #14]
 8001708:	4618      	mov	r0, r3
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	21e8      	movs	r1, #232	@ 0xe8
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	440b      	add	r3, r1
 8001716:	4402      	add	r2, r0
 8001718:	b292      	uxth	r2, r2
 800171a:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001728:	429a      	cmp	r2, r3
 800172a:	dbc4      	blt.n	80016b6 <LTC681x_check_pec+0x3a>
      }
      break;
 800172c:	e144      	b.n	80019b8 <LTC681x_check_pec+0x33c>

    case CFGRB:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
 8001732:	e036      	b.n	80017a2 <LTC681x_check_pec+0x126>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	22e8      	movs	r2, #232	@ 0xe8
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	21e8      	movs	r1, #232	@ 0xe8
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	440b      	add	r3, r1
 8001750:	7f5b      	ldrb	r3, [r3, #29]
 8001752:	4618      	mov	r0, r3
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	21e8      	movs	r1, #232	@ 0xe8
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	440b      	add	r3, r1
 8001760:	4402      	add	r2, r0
 8001762:	b292      	uxth	r2, r2
 8001764:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	22e8      	movs	r2, #232	@ 0xe8
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	21e8      	movs	r1, #232	@ 0xe8
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	440b      	add	r3, r1
 8001784:	7f5b      	ldrb	r3, [r3, #29]
 8001786:	4618      	mov	r0, r3
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	21e8      	movs	r1, #232	@ 0xe8
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	440b      	add	r3, r1
 8001794:	4402      	add	r2, r0
 8001796:	b292      	uxth	r2, r2
 8001798:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	3301      	adds	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbc4      	blt.n	8001734 <LTC681x_check_pec+0xb8>
      }
      break;
 80017aa:	e105      	b.n	80019b8 <LTC681x_check_pec+0x33c>
    case CELL:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	e050      	b.n	8001854 <LTC681x_check_pec+0x1d8>
      {
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	e043      	b.n	8001840 <LTC681x_check_pec+0x1c4>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	22e8      	movs	r2, #232	@ 0xe8
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	21e8      	movs	r1, #232	@ 0xe8
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	6839      	ldr	r1, [r7, #0]
 80017d2:	4419      	add	r1, r3
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	440b      	add	r3, r1
 80017d8:	3342      	adds	r3, #66	@ 0x42
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	21e8      	movs	r1, #232	@ 0xe8
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	440b      	add	r3, r1
 80017ea:	4402      	add	r2, r0
 80017ec:	b292      	uxth	r2, r2
 80017ee:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	22e8      	movs	r2, #232	@ 0xe8
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	441a      	add	r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3360      	adds	r3, #96	@ 0x60
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	21e8      	movs	r1, #232	@ 0xe8
 800180c:	fb01 f202 	mul.w	r2, r1, r2
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	4411      	add	r1, r2
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	440a      	add	r2, r1
 8001818:	3242      	adds	r2, #66	@ 0x42
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	4610      	mov	r0, r2
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	21e8      	movs	r1, #232	@ 0xe8
 8001822:	fb01 f202 	mul.w	r2, r1, r2
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	440a      	add	r2, r1
 800182a:	4403      	add	r3, r0
 800182c:	b299      	uxth	r1, r3
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	3360      	adds	r3, #96	@ 0x60
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	460a      	mov	r2, r1
 8001838:	809a      	strh	r2, [r3, #4]
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	3301      	adds	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001846:	461a      	mov	r2, r3
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4293      	cmp	r3, r2
 800184c:	dbb4      	blt.n	80017b8 <LTC681x_check_pec+0x13c>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbaa      	blt.n	80017b2 <LTC681x_check_pec+0x136>
        }
      }
      break;
 800185c:	e0ac      	b.n	80019b8 <LTC681x_check_pec+0x33c>
    case AUX:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e04d      	b.n	8001900 <LTC681x_check_pec+0x284>
      {
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	e040      	b.n	80018ec <LTC681x_check_pec+0x270>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	22e8      	movs	r2, #232	@ 0xe8
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	4413      	add	r3, r2
 8001876:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	21e8      	movs	r1, #232	@ 0xe8
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	4419      	add	r1, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	440b      	add	r3, r1
 800188a:	335a      	adds	r3, #90	@ 0x5a
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	21e8      	movs	r1, #232	@ 0xe8
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	440b      	add	r3, r1
 800189c:	4402      	add	r2, r0
 800189e:	b292      	uxth	r2, r2
 80018a0:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	22e8      	movs	r2, #232	@ 0xe8
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	3268      	adds	r2, #104	@ 0x68
 80018b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	21e8      	movs	r1, #232	@ 0xe8
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	4419      	add	r1, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	440b      	add	r3, r1
 80018c8:	335a      	adds	r3, #90	@ 0x5a
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	21e8      	movs	r1, #232	@ 0xe8
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	440b      	add	r3, r1
 80018da:	4402      	add	r2, r0
 80018dc:	b291      	uxth	r1, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	3268      	adds	r2, #104	@ 0x68
 80018e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	3301      	adds	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80018f2:	461a      	mov	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4293      	cmp	r3, r2
 80018f8:	dbb7      	blt.n	800186a <LTC681x_check_pec+0x1ee>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbad      	blt.n	8001864 <LTC681x_check_pec+0x1e8>
        }
      }

      break;
 8001908:	e056      	b.n	80019b8 <LTC681x_check_pec+0x33c>
    case STAT:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e04d      	b.n	80019ac <LTC681x_check_pec+0x330>
      {

        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	e040      	b.n	8001998 <LTC681x_check_pec+0x31c>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	22e8      	movs	r2, #232	@ 0xe8
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	21e8      	movs	r1, #232	@ 0xe8
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	4419      	add	r1, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	440b      	add	r3, r1
 8001936:	336b      	adds	r3, #107	@ 0x6b
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	21e8      	movs	r1, #232	@ 0xe8
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	440b      	add	r3, r1
 8001948:	4402      	add	r2, r0
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	22e8      	movs	r2, #232	@ 0xe8
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	326c      	adds	r2, #108	@ 0x6c
 8001960:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	21e8      	movs	r1, #232	@ 0xe8
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	4419      	add	r1, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	440b      	add	r3, r1
 8001974:	336b      	adds	r3, #107	@ 0x6b
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	21e8      	movs	r1, #232	@ 0xe8
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	440b      	add	r3, r1
 8001986:	4402      	add	r2, r0
 8001988:	b291      	uxth	r1, r2
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	326c      	adds	r2, #108	@ 0x6c
 800198e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800199e:	3b01      	subs	r3, #1
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbb7      	blt.n	8001916 <LTC681x_check_pec+0x29a>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbad      	blt.n	8001910 <LTC681x_check_pec+0x294>
        }
      }
      break;
 80019b4:	e000      	b.n	80019b8 <LTC681x_check_pec+0x33c>
    default:
      break;
 80019b6:	bf00      	nop
  }
}
 80019b8:	bf00      	nop
 80019ba:	372c      	adds	r7, #44	@ 0x2c
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LTC681x_reset_crc_count>:

//Helper Function to reset PEC counters
void LTC681x_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e051      	b.n	8001a7a <LTC681x_reset_crc_count+0xb6>
  {
    ic[current_ic].crc_count.pec_count = 0;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	22e8      	movs	r2, #232	@ 0xe8
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    ic[current_ic].crc_count.cfgr_pec = 0;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	22e8      	movs	r2, #232	@ 0xe8
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	2200      	movs	r2, #0
 80019f6:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
    for (int i=0; i<6; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e00e      	b.n	8001a1e <LTC681x_reset_crc_count+0x5a>
    {
      ic[current_ic].crc_count.cell_pec[i]=0;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	22e8      	movs	r2, #232	@ 0xe8
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	441a      	add	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	3360      	adds	r3, #96	@ 0x60
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	809a      	strh	r2, [r3, #4]
    for (int i=0; i<6; i++)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	dded      	ble.n	8001a00 <LTC681x_reset_crc_count+0x3c>

    }
    for (int i=0; i<4; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e00d      	b.n	8001a46 <LTC681x_reset_crc_count+0x82>
    {
      ic[current_ic].crc_count.aux_pec[i]=0;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	22e8      	movs	r2, #232	@ 0xe8
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	3268      	adds	r2, #104	@ 0x68
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<4; i++)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	ddee      	ble.n	8001a2a <LTC681x_reset_crc_count+0x66>
    }
    for (int i=0; i<2; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	e00d      	b.n	8001a6e <LTC681x_reset_crc_count+0xaa>
    {
      ic[current_ic].crc_count.stat_pec[i]=0;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	22e8      	movs	r2, #232	@ 0xe8
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	326c      	adds	r2, #108	@ 0x6c
 8001a62:	2100      	movs	r1, #0
 8001a64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<2; i++)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	ddee      	ble.n	8001a52 <LTC681x_reset_crc_count+0x8e>
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dba9      	blt.n	80019d6 <LTC681x_reset_crc_count+0x12>
    }
  }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LTC681x_init_cfg>:
*/
/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e015      	b.n	8001ace <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	e00c      	b.n	8001ac2 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	22e8      	movs	r2, #232	@ 0xe8
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	441a      	add	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	ddef      	ble.n	8001aa8 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	3301      	adds	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3e5      	bcc.n	8001aa2 <LTC681x_init_cfg+0x12>
		}
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6039      	str	r1, [r7, #0]
 8001aec:	4611      	mov	r1, r2
 8001aee:	461a      	mov	r2, r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	71bb      	strb	r3, [r7, #6]
 8001af8:	4613      	mov	r3, r2
 8001afa:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8001afc:	79ba      	ldrb	r2, [r7, #6]
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f828 	bl	8001b58 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8001b08:	797a      	ldrb	r2, [r7, #5]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	6839      	ldr	r1, [r7, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f856 	bl	8001bc0 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f884 	bl	8001c28 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f8ce 	bl	8001cc8 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f957 	bl	8001de6 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8001b38:	8bba      	ldrh	r2, [r7, #28]
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f9a1 	bl	8001e86 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8001b44:	8c3a      	ldrh	r2, [r7, #32]
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f9e1 	bl	8001f12 <LTC681x_set_cfgr_ov>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LTC681x_set_cfgr_refon>:

//Helper function to set the REFON bit
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic ic[], bool refon)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
  if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d011      	beq.n	8001b92 <LTC681x_set_cfgr_refon+0x3a>
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	22e8      	movs	r2, #232	@ 0xe8
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	21e8      	movs	r1, #232	@ 0xe8
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	440b      	add	r3, r1
 8001b88:	f042 0204 	orr.w	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8001b90:	e010      	b.n	8001bb4 <LTC681x_set_cfgr_refon+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	22e8      	movs	r2, #232	@ 0xe8
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	21e8      	movs	r1, #232	@ 0xe8
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	440b      	add	r3, r1
 8001bac:	f022 0204 	bic.w	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LTC681x_set_cfgr_adcopt>:

//Helper function to set the adcopt bit
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic ic[], bool adcopt)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71bb      	strb	r3, [r7, #6]
  if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d011      	beq.n	8001bfa <LTC681x_set_cfgr_adcopt+0x3a>
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	22e8      	movs	r2, #232	@ 0xe8
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	21e8      	movs	r1, #232	@ 0xe8
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	440b      	add	r3, r1
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8001bf8:	e010      	b.n	8001c1c <LTC681x_set_cfgr_adcopt+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	22e8      	movs	r2, #232	@ 0xe8
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	21e8      	movs	r1, #232	@ 0xe8
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	440b      	add	r3, r1
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LTC681x_set_cfgr_gpio>:

//Helper function to set GPIO bits
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic ic[],bool gpio[5])
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<5; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e03b      	b.n	8001cb4 <LTC681x_set_cfgr_gpio+0x8c>
  {
    if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d018      	beq.n	8001c7a <LTC681x_set_cfgr_gpio+0x52>
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	22e8      	movs	r2, #232	@ 0xe8
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	4413      	add	r3, r2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25a      	sxtb	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3303      	adds	r3, #3
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b259      	sxtb	r1, r3
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	22e8      	movs	r2, #232	@ 0xe8
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	b2ca      	uxtb	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e019      	b.n	8001cae <LTC681x_set_cfgr_gpio+0x86>
    else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	22e8      	movs	r2, #232	@ 0xe8
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b25a      	sxtb	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b259      	sxtb	r1, r3
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	22e8      	movs	r2, #232	@ 0xe8
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
  for (int i =0; i<5; i++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	ddc0      	ble.n	8001c3c <LTC681x_set_cfgr_gpio+0x14>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LTC681x_set_cfgr_dis>:

//Helper function to control discharge
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic ic[],bool dcc[12])
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<8; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e039      	b.n	8001d50 <LTC681x_set_cfgr_dis+0x88>
  {
    if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d017      	beq.n	8001d18 <LTC681x_set_cfgr_dis+0x50>
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	22e8      	movs	r2, #232	@ 0xe8
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b259      	sxtb	r1, r3
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	22e8      	movs	r2, #232	@ 0xe8
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4413      	add	r3, r2
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	711a      	strb	r2, [r3, #4]
 8001d16:	e018      	b.n	8001d4a <LTC681x_set_cfgr_dis+0x82>
    else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	22e8      	movs	r2, #232	@ 0xe8
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	4413      	add	r3, r2
 8001d24:	791b      	ldrb	r3, [r3, #4]
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	4013      	ands	r3, r2
 8001d38:	b259      	sxtb	r1, r3
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	22e8      	movs	r2, #232	@ 0xe8
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	b2ca      	uxtb	r2, r1
 8001d48:	711a      	strb	r2, [r3, #4]
  for (int i =0; i<8; i++)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	ddc2      	ble.n	8001cdc <LTC681x_set_cfgr_dis+0x14>
  }
  for (int i =0; i<4; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e03a      	b.n	8001dd2 <LTC681x_set_cfgr_dis+0x10a>
  {
    if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d017      	beq.n	8001d9a <LTC681x_set_cfgr_dis+0xd2>
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	22e8      	movs	r2, #232	@ 0xe8
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	795b      	ldrb	r3, [r3, #5]
 8001d78:	b25a      	sxtb	r2, r3
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b259      	sxtb	r1, r3
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	22e8      	movs	r2, #232	@ 0xe8
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	4413      	add	r3, r2
 8001d94:	b2ca      	uxtb	r2, r1
 8001d96:	715a      	strb	r2, [r3, #5]
 8001d98:	e018      	b.n	8001dcc <LTC681x_set_cfgr_dis+0x104>
    else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	22e8      	movs	r2, #232	@ 0xe8
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	795b      	ldrb	r3, [r3, #5]
 8001da8:	b25a      	sxtb	r2, r3
 8001daa:	2101      	movs	r1, #1
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	b25b      	sxtb	r3, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4013      	ands	r3, r2
 8001dba:	b259      	sxtb	r1, r3
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	22e8      	movs	r2, #232	@ 0xe8
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	715a      	strb	r2, [r3, #5]
  for (int i =0; i<4; i++)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	ddc1      	ble.n	8001d5c <LTC681x_set_cfgr_dis+0x94>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e03b      	b.n	8001e72 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d018      	beq.n	8001e38 <LTC681x_set_cfgr_dcto+0x52>
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	22e8      	movs	r2, #232	@ 0xe8
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	795b      	ldrb	r3, [r3, #5]
 8001e14:	b25a      	sxtb	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b259      	sxtb	r1, r3
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	22e8      	movs	r2, #232	@ 0xe8
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	715a      	strb	r2, [r3, #5]
 8001e36:	e019      	b.n	8001e6c <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	22e8      	movs	r2, #232	@ 0xe8
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	4413      	add	r3, r2
 8001e44:	795b      	ldrb	r3, [r3, #5]
 8001e46:	b25a      	sxtb	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	b259      	sxtb	r1, r3
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	22e8      	movs	r2, #232	@ 0xe8
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	ddc0      	ble.n	8001dfa <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LTC681x_set_cfgr_uv>:

//Helper Function to set uv value in CFG register
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic ic[],uint16_t uv)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	6039      	str	r1, [r7, #0]
 8001e90:	71fb      	strb	r3, [r7, #7]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (uv/16)-1;
 8001e96:	88bb      	ldrh	r3, [r7, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	22e8      	movs	r2, #232	@ 0xe8
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	89fa      	ldrh	r2, [r7, #14]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	705a      	strb	r2, [r3, #1]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	22e8      	movs	r2, #232	@ 0xe8
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	789a      	ldrb	r2, [r3, #2]
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	21e8      	movs	r1, #232	@ 0xe8
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	440b      	add	r3, r1
 8001ecc:	f022 020f 	bic.w	r2, r2, #15
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	22e8      	movs	r2, #232	@ 0xe8
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	789b      	ldrb	r3, [r3, #2]
 8001ee2:	b25a      	sxtb	r2, r3
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b259      	sxtb	r1, r3
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	22e8      	movs	r2, #232	@ 0xe8
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	709a      	strb	r2, [r3, #2]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LTC681x_set_cfgr_ov>:

//helper function to set OV value in CFG register
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic ic[],uint16_t ov)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	6039      	str	r1, [r7, #0]
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (ov/16);
 8001f22:	88bb      	ldrh	r3, [r7, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	b299      	uxth	r1, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	22e8      	movs	r2, #232	@ 0xe8
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	b2ca      	uxtb	r2, r1
 8001f3c:	70da      	strb	r2, [r3, #3]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	22e8      	movs	r2, #232	@ 0xe8
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	789a      	ldrb	r2, [r3, #2]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	21e8      	movs	r1, #232	@ 0xe8
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	440b      	add	r3, r1
 8001f58:	f002 020f 	and.w	r2, r2, #15
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	22e8      	movs	r2, #232	@ 0xe8
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	789b      	ldrb	r3, [r3, #2]
 8001f6e:	b25a      	sxtb	r2, r3
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b259      	sxtb	r1, r3
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	22e8      	movs	r2, #232	@ 0xe8
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	709a      	strb	r2, [r3, #2]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <cs_low>:
//    //_Error_Handler(__FILE__, __LINE__);
//  }
//}

void cs_low(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    // Set chip select pin low.
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <cs_low+0x14>)
 8001fa2:	f003 fcf9 	bl	8005998 <HAL_GPIO_WritePin>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	42020000 	.word	0x42020000

08001fb0 <cs_high>:

void cs_high(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <cs_high+0x14>)
 8001fba:	f003 fced 	bl	8005998 <HAL_GPIO_WritePin>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	42020000 	.word	0x42020000

08001fc8 <spi_write_array>:
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data, &ret_val, 1, HAL_MAX_DELAY);
}

void spi_write_array(uint8_t len,
                     uint8_t data[])
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
    uint8_t ret_val;
    uint8_t i;

    for ( i = 0; i < len; i++ )
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e00e      	b.n	8001ff8 <spi_write_array+0x30>
    {
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data[i], &ret_val, 1, HAL_MAX_DELAY);
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	18d1      	adds	r1, r2, r3
 8001fe0:	f107 020e 	add.w	r2, r7, #14
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	4807      	ldr	r0, [pc, #28]	@ (800200c <spi_write_array+0x44>)
 8001fee:	f007 fb76 	bl	80096de <HAL_SPI_TransmitReceive>
    for ( i = 0; i < len; i++ )
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3ec      	bcc.n	8001fda <spi_write_array+0x12>
    }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200004d4 	.word	0x200004d4

08002010 <spi_write_read>:

void spi_write_read(uint8_t  tx_Data[],
                    uint8_t  tx_len,
                    uint8_t* rx_data,
                    uint8_t  rx_len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	460b      	mov	r3, r1
 800201e:	72fb      	strb	r3, [r7, #11]
 8002020:	4613      	mov	r3, r2
 8002022:	72bb      	strb	r3, [r7, #10]
    uint8_t i;
    uint8_t data;

    // Transfer data to LTC6803
    for ( i = 0; i < tx_len; i++ )
 8002024:	2300      	movs	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	e00e      	b.n	8002048 <spi_write_read+0x38>
    {
        // Transmit byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_Data[i], &data, 1, HAL_MAX_DELAY);
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	18d1      	adds	r1, r2, r3
 8002030:	f107 0216 	add.w	r2, r7, #22
 8002034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2301      	movs	r3, #1
 800203c:	4811      	ldr	r0, [pc, #68]	@ (8002084 <spi_write_read+0x74>)
 800203e:	f007 fb4e 	bl	80096de <HAL_SPI_TransmitReceive>
    for ( i = 0; i < tx_len; i++ )
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	3301      	adds	r3, #1
 8002046:	75fb      	strb	r3, [r7, #23]
 8002048:	7dfa      	ldrb	r2, [r7, #23]
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3ec      	bcc.n	800202a <spi_write_read+0x1a>
    }

    // Receive data from DC2259A board.
    for ( i = 0; i < rx_len; i++ )
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
 8002054:	e00d      	b.n	8002072 <spi_write_read+0x62>
    {
        // Receive byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xFF, (uint8_t*)&rx_data[i], 1, HAL_MAX_DELAY);
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	441a      	add	r2, r3
 800205c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2301      	movs	r3, #1
 8002064:	21ff      	movs	r1, #255	@ 0xff
 8002066:	4807      	ldr	r0, [pc, #28]	@ (8002084 <spi_write_read+0x74>)
 8002068:	f007 fb39 	bl	80096de <HAL_SPI_TransmitReceive>
    for ( i = 0; i < rx_len; i++ )
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	3301      	adds	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
 8002072:	7dfa      	ldrb	r2, [r7, #23]
 8002074:	7abb      	ldrb	r3, [r7, #10]
 8002076:	429a      	cmp	r2, r3
 8002078:	d3ed      	bcc.n	8002056 <spi_write_read+0x46>
    }
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200004d4 	.word	0x200004d4

08002088 <spi_read_byte>:

// spi_read_byte

uint8_t spi_read_byte(uint8_t tx_dat)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af02      	add	r7, sp, #8
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if ( HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xFF, (uint8_t*)&data, 1, HAL_MAX_DELAY) == HAL_OK )
 8002092:	f107 020f 	add.w	r2, r7, #15
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	21ff      	movs	r1, #255	@ 0xff
 80020a0:	4806      	ldr	r0, [pc, #24]	@ (80020bc <spi_read_byte+0x34>)
 80020a2:	f007 fb1c 	bl	80096de <HAL_SPI_TransmitReceive>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <spi_read_byte+0x28>
    {
        return(data);
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	e000      	b.n	80020b2 <spi_read_byte+0x2a>
    }
		return(-1);
 80020b0:	23ff      	movs	r3, #255	@ 0xff
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200004d4 	.word	0x200004d4

080020c0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020e2:	4b32      	ldr	r3, [pc, #200]	@ (80021ac <MX_ADC1_Init+0xec>)
 80020e4:	4a32      	ldr	r2, [pc, #200]	@ (80021b0 <MX_ADC1_Init+0xf0>)
 80020e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020e8:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <MX_ADC1_Init+0xec>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020ee:	4b2f      	ldr	r3, [pc, #188]	@ (80021ac <MX_ADC1_Init+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <MX_ADC1_Init+0xec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020fa:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <MX_ADC1_Init+0xec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002100:	4b2a      	ldr	r3, [pc, #168]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002102:	2204      	movs	r2, #4
 8002104:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002106:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002108:	2200      	movs	r2, #0
 800210a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <MX_ADC1_Init+0xec>)
 800210e:	2200      	movs	r2, #0
 8002110:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002112:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002114:	2201      	movs	r2, #1
 8002116:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002118:	4b24      	ldr	r3, [pc, #144]	@ (80021ac <MX_ADC1_Init+0xec>)
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8002120:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002122:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <MX_ADC1_Init+0xec>)
 800212a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002138:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <MX_ADC1_Init+0xec>)
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800213e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002146:	4819      	ldr	r0, [pc, #100]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002148:	f001 fd3e 	bl	8003bc8 <HAL_ADC_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002152:	f000 fce3 	bl	8002b1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002156:	2306      	movs	r3, #6
 8002158:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	4810      	ldr	r0, [pc, #64]	@ (80021ac <MX_ADC1_Init+0xec>)
 800216a:	f002 fc75 	bl	8004a58 <HAL_ADCEx_MultiModeConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002174:	f000 fcd2 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_ADC1_Init+0xf4>)
 800217a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800217c:	2306      	movs	r3, #6
 800217e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <MX_ADC1_Init+0xf8>)
 8002186:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002188:	2304      	movs	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_ADC1_Init+0xec>)
 8002196:	f001 ff35 	bl	8004004 <HAL_ADC_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80021a0:	f000 fcbc 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	@ 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200002a0 	.word	0x200002a0
 80021b0:	42028000 	.word	0x42028000
 80021b4:	0c900008 	.word	0x0c900008
 80021b8:	407f0000 	.word	0x407f0000

080021bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021c2:	463b      	mov	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80021d2:	4b26      	ldr	r3, [pc, #152]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021d4:	4a26      	ldr	r2, [pc, #152]	@ (8002270 <MX_ADC2_Init+0xb4>)
 80021d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021d8:	4b24      	ldr	r3, [pc, #144]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80021de:	4b23      	ldr	r3, [pc, #140]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021e4:	4b21      	ldr	r3, [pc, #132]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021f2:	2204      	movs	r2, #4
 80021f4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <MX_ADC2_Init+0xb0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002202:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <MX_ADC2_Init+0xb0>)
 8002204:	2201      	movs	r2, #1
 8002206:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <MX_ADC2_Init+0xb0>)
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002210:	4b16      	ldr	r3, [pc, #88]	@ (800226c <MX_ADC2_Init+0xb0>)
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <MX_ADC2_Init+0xb0>)
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800221e:	4b13      	ldr	r3, [pc, #76]	@ (800226c <MX_ADC2_Init+0xb0>)
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002226:	4811      	ldr	r0, [pc, #68]	@ (800226c <MX_ADC2_Init+0xb0>)
 8002228:	f001 fcce 	bl	8003bc8 <HAL_ADC_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8002232:	f000 fc73 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <MX_ADC2_Init+0xb8>)
 8002238:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800223a:	2306      	movs	r3, #6
 800223c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <MX_ADC2_Init+0xbc>)
 8002244:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002246:	2304      	movs	r3, #4
 8002248:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	@ (800226c <MX_ADC2_Init+0xb0>)
 8002254:	f001 fed6 	bl	8004004 <HAL_ADC_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800225e:	f000 fc5d 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000308 	.word	0x20000308
 8002270:	42028100 	.word	0x42028100
 8002274:	1d500080 	.word	0x1d500080
 8002278:	407f0000 	.word	0x407f0000

0800227c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a67      	ldr	r2, [pc, #412]	@ (8002438 <HAL_ADC_MspInit+0x1bc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d161      	bne.n	8002362 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800229e:	4b67      	ldr	r3, [pc, #412]	@ (800243c <HAL_ADC_MspInit+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a65      	ldr	r2, [pc, #404]	@ (800243c <HAL_ADC_MspInit+0x1c0>)
 80022a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80022a8:	4b64      	ldr	r3, [pc, #400]	@ (800243c <HAL_ADC_MspInit+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80022b0:	4b63      	ldr	r3, [pc, #396]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80022b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b4:	4a62      	ldr	r2, [pc, #392]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80022b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022bc:	4b60      	ldr	r3, [pc, #384]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ChargeCurrent_Pin|ChargeCurrRef_Pin;
 80022e0:	230c      	movs	r3, #12
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e4:	2303      	movs	r3, #3
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4854      	ldr	r0, [pc, #336]	@ (8002444 <HAL_ADC_MspInit+0x1c8>)
 80022f4:	f003 f9d0 	bl	8005698 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 80022fa:	4a54      	ldr	r2, [pc, #336]	@ (800244c <HAL_ADC_MspInit+0x1d0>)
 80022fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80022fe:	4b52      	ldr	r3, [pc, #328]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002300:	2205      	movs	r2, #5
 8002302:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002304:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800230a:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002310:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002316:	4b4c      	ldr	r3, [pc, #304]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800231c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800231e:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002324:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002326:	4b48      	ldr	r3, [pc, #288]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002328:	2220      	movs	r2, #32
 800232a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800232c:	4b46      	ldr	r3, [pc, #280]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 800232e:	2200      	movs	r2, #0
 8002330:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002332:	4845      	ldr	r0, [pc, #276]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002334:	f002 fd14 	bl	8004d60 <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800233e:	f000 fbed 	bl	8002b1c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002342:	2110      	movs	r1, #16
 8002344:	4840      	ldr	r0, [pc, #256]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002346:	f002 ff2e 	bl	80051a6 <HAL_DMA_ConfigChannelAttributes>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8002350:	f000 fbe4 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3c      	ldr	r2, [pc, #240]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 8002358:	651a      	str	r2, [r3, #80]	@ 0x50
 800235a:	4a3b      	ldr	r2, [pc, #236]	@ (8002448 <HAL_ADC_MspInit+0x1cc>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002360:	e065      	b.n	800242e <HAL_ADC_MspInit+0x1b2>
  else if(adcHandle->Instance==ADC2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3a      	ldr	r2, [pc, #232]	@ (8002450 <HAL_ADC_MspInit+0x1d4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d160      	bne.n	800242e <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC_CLK_ENABLED++;
 800236c:	4b33      	ldr	r3, [pc, #204]	@ (800243c <HAL_ADC_MspInit+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a32      	ldr	r2, [pc, #200]	@ (800243c <HAL_ADC_MspInit+0x1c0>)
 8002374:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002376:	4b31      	ldr	r3, [pc, #196]	@ (800243c <HAL_ADC_MspInit+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10b      	bne.n	8002396 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800237e:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	4a2f      	ldr	r2, [pc, #188]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 8002384:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238a:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	4a29      	ldr	r2, [pc, #164]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a2:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_ADC_MspInit+0x1c4>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DischgCurr_Pin|DischgCurrRef_Pin;
 80023ae:	230c      	movs	r3, #12
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	4824      	ldr	r0, [pc, #144]	@ (8002454 <HAL_ADC_MspInit+0x1d8>)
 80023c2:	f003 f969 	bl	8005698 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023c8:	4a24      	ldr	r2, [pc, #144]	@ (800245c <HAL_ADC_MspInit+0x1e0>)
 80023ca:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023ce:	2206      	movs	r2, #6
 80023d0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d2:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ea:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023f2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80023f4:	4b18      	ldr	r3, [pc, #96]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023f6:	2220      	movs	r2, #32
 80023f8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80023fa:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002400:	4815      	ldr	r0, [pc, #84]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 8002402:	f002 fcad 	bl	8004d60 <HAL_DMA_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 800240c:	f000 fb86 	bl	8002b1c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002410:	2110      	movs	r1, #16
 8002412:	4811      	ldr	r0, [pc, #68]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 8002414:	f002 fec7 	bl	80051a6 <HAL_DMA_ConfigChannelAttributes>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_ADC_MspInit+0x1a6>
      Error_Handler();
 800241e:	f000 fb7d 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 8002426:	651a      	str	r2, [r3, #80]	@ 0x50
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <HAL_ADC_MspInit+0x1dc>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800242e:	bf00      	nop
 8002430:	3730      	adds	r7, #48	@ 0x30
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	42028000 	.word	0x42028000
 800243c:	20000440 	.word	0x20000440
 8002440:	40021000 	.word	0x40021000
 8002444:	42020800 	.word	0x42020800
 8002448:	20000370 	.word	0x20000370
 800244c:	4002001c 	.word	0x4002001c
 8002450:	42028100 	.word	0x42028100
 8002454:	42020000 	.word	0x42020000
 8002458:	200003d8 	.word	0x200003d8
 800245c:	40020008 	.word	0x40020008

08002460 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <MX_FREERTOS_Init+0x18>)
 8002466:	2100      	movs	r1, #0
 8002468:	4804      	ldr	r0, [pc, #16]	@ (800247c <MX_FREERTOS_Init+0x1c>)
 800246a:	f00d f981 	bl	800f770 <osThreadNew>
 800246e:	4603      	mov	r3, r0
 8002470:	4a03      	ldr	r2, [pc, #12]	@ (8002480 <MX_FREERTOS_Init+0x20>)
 8002472:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	08012de4 	.word	0x08012de4
 800247c:	08002485 	.word	0x08002485
 8002480:	20000444 	.word	0x20000444

08002484 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 800248c:	f00f fcba 	bl	8011e04 <MX_USB_Device_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;){
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002490:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002494:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <StartDefaultTask+0x24>)
 8002496:	f003 fa97 	bl	80059c8 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800249a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800249e:	f00d f9f9 	bl	800f894 <osDelay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80024a2:	bf00      	nop
 80024a4:	e7f4      	b.n	8002490 <StartDefaultTask+0xc>
 80024a6:	bf00      	nop
 80024a8:	42020400 	.word	0x42020400

080024ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <MX_DMA_Init+0x60>)
 80024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b6:	4a15      	ldr	r2, [pc, #84]	@ (800250c <MX_DMA_Init+0x60>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <MX_DMA_Init+0x60>)
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <MX_DMA_Init+0x60>)
 80024cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ce:	4a0f      	ldr	r2, [pc, #60]	@ (800250c <MX_DMA_Init+0x60>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <MX_DMA_Init+0x60>)
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2105      	movs	r1, #5
 80024e6:	201d      	movs	r0, #29
 80024e8:	f002 fc12 	bl	8004d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024ec:	201d      	movs	r0, #29
 80024ee:	f002 fc29 	bl	8004d44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2105      	movs	r1, #5
 80024f6:	201e      	movs	r0, #30
 80024f8:	f002 fc0a 	bl	8004d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024fc:	201e      	movs	r0, #30
 80024fe:	f002 fc21 	bl	8004d44 <HAL_NVIC_EnableIRQ>

}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002516:	4a20      	ldr	r2, [pc, #128]	@ (8002598 <MX_FDCAN1_Init+0x88>)
 8002518:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002520:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800252e:	2200      	movs	r2, #0
 8002530:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002534:	2200      	movs	r2, #0
 8002536:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800253a:	2200      	movs	r2, #0
 800253c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002540:	2210      	movs	r2, #16
 8002542:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002546:	2201      	movs	r2, #1
 8002548:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800254c:	2201      	movs	r2, #1
 800254e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002552:	2201      	movs	r2, #1
 8002554:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002558:	2201      	movs	r2, #1
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800255c:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800255e:	2201      	movs	r2, #1
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002564:	2201      	movs	r2, #1
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800256a:	2201      	movs	r2, #1
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002570:	2200      	movs	r2, #0
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002574:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 800257c:	2200      	movs	r2, #0
 800257e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	@ (8002594 <MX_FDCAN1_Init+0x84>)
 8002582:	f002 fee1 	bl	8005348 <HAL_FDCAN_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800258c:	f000 fac6 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000448 	.word	0x20000448
 8002598:	4000a400 	.word	0x4000a400

0800259c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ae      	sub	sp, #184	@ 0xb8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	2294      	movs	r2, #148	@ 0x94
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f010 f9d5 	bl	801296c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a22      	ldr	r2, [pc, #136]	@ (8002650 <HAL_FDCAN_MspInit+0xb4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d13d      	bne.n	8002648 <HAL_FDCAN_MspInit+0xac>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f006 f803 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80025e8:	f000 fa98 	bl	8002b1c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80025ec:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <HAL_FDCAN_MspInit+0xb8>)
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <HAL_FDCAN_MspInit+0xb8>)
 80025f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80025f8:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <HAL_FDCAN_MspInit+0xb8>)
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <HAL_FDCAN_MspInit+0xb8>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002608:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <HAL_FDCAN_MspInit+0xb8>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002610:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <HAL_FDCAN_MspInit+0xb8>)
 8002612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800261c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002620:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002636:	2309      	movs	r3, #9
 8002638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002640:	4619      	mov	r1, r3
 8002642:	4805      	ldr	r0, [pc, #20]	@ (8002658 <HAL_FDCAN_MspInit+0xbc>)
 8002644:	f003 f828 	bl	8005698 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002648:	bf00      	nop
 800264a:	37b8      	adds	r7, #184	@ 0xb8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	4000a400 	.word	0x4000a400
 8002654:	40021000 	.word	0x40021000
 8002658:	42020400 	.word	0x42020400

0800265c <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002672:	4b71      	ldr	r3, [pc, #452]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	4a70      	ldr	r2, [pc, #448]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267e:	4b6e      	ldr	r3, [pc, #440]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268a:	4b6b      	ldr	r3, [pc, #428]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002696:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	4a64      	ldr	r2, [pc, #400]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ae:	4b62      	ldr	r3, [pc, #392]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a5e      	ldr	r2, [pc, #376]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d2:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b56      	ldr	r3, [pc, #344]	@ (8002838 <MX_GPIO_Init+0x1dc>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 80026ea:	2200      	movs	r2, #0
 80026ec:	f643 7111 	movw	r1, #16145	@ 0x3f11
 80026f0:	4852      	ldr	r0, [pc, #328]	@ (800283c <MX_GPIO_Init+0x1e0>)
 80026f2:	f003 f951 	bl	8005998 <HAL_GPIO_WritePin>
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A1_8_GPIO_Port, A1_8_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2101      	movs	r1, #1
 80026fa:	4851      	ldr	r0, [pc, #324]	@ (8002840 <MX_GPIO_Init+0x1e4>)
 80026fc:	f003 f94c 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 8002700:	2200      	movs	r2, #0
 8002702:	f643 41f3 	movw	r1, #15603	@ 0x3cf3
 8002706:	484f      	ldr	r0, [pc, #316]	@ (8002844 <MX_GPIO_Init+0x1e8>)
 8002708:	f003 f946 	bl	8005998 <HAL_GPIO_WritePin>
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A1_2_Pin|A1_3_Pin|A1_4_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002712:	484d      	ldr	r0, [pc, #308]	@ (8002848 <MX_GPIO_Init+0x1ec>)
 8002714:	f003 f940 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A0_4_GPIO_Port, A0_4_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2104      	movs	r1, #4
 800271c:	484b      	ldr	r0, [pc, #300]	@ (800284c <MX_GPIO_Init+0x1f0>)
 800271e:	f003 f93b 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_7_Pin WDT_Stm_Pin Enable1_Pin A1_1_Pin
                           A0_1_Pin A1_5_Pin A0_2_Pin A0_3_Pin */
  GPIO_InitStruct.Pin = A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 8002722:	f643 7311 	movw	r3, #16145	@ 0x3f11
 8002726:	617b      	str	r3, [r7, #20]
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4840      	ldr	r0, [pc, #256]	@ (800283c <MX_GPIO_Init+0x1e0>)
 800273c:	f002 ffac 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : A1_8_Pin */
  GPIO_InitStruct.Pin = A1_8_Pin;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A1_8_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	483a      	ldr	r0, [pc, #232]	@ (8002840 <MX_GPIO_Init+0x1e4>)
 8002758:	f002 ff9e 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_8_Pin */
  GPIO_InitStruct.Pin = A0_8_Pin;
 800275c:	2302      	movs	r3, #2
 800275e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_8_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4834      	ldr	r0, [pc, #208]	@ (8002840 <MX_GPIO_Init+0x1e4>)
 8002770:	f002 ff92 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : HardwareFault_Pin OutputEnable_Pin */
  GPIO_InitStruct.Pin = HardwareFault_Pin|OutputEnable_Pin;
 8002774:	2322      	movs	r3, #34	@ 0x22
 8002776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4619      	mov	r1, r3
 8002786:	482d      	ldr	r0, [pc, #180]	@ (800283c <MX_GPIO_Init+0x1e0>)
 8002788:	f002 ff86 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTCSelfTestOK_Pin LTCSelfTest_Pin */
  GPIO_InitStruct.Pin = LTCSelfTestOK_Pin|LTCSelfTest_Pin;
 800278c:	2303      	movs	r3, #3
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	482a      	ldr	r0, [pc, #168]	@ (8002848 <MX_GPIO_Init+0x1ec>)
 80027a0:	f002 ff7a 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable2_Pin ErrorReset_Pin LED_A_Pin LED_R_Pin
                           LED_Y_Pin LED_G_Pin A0_5_Pin A1_6_Pin
                           A0_6_Pin A0_7_Pin */
  GPIO_InitStruct.Pin = Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 80027a4:	f643 43f3 	movw	r3, #15603	@ 0x3cf3
 80027a8:	617b      	str	r3, [r7, #20]
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4821      	ldr	r0, [pc, #132]	@ (8002844 <MX_GPIO_Init+0x1e8>)
 80027be:	f002 ff6b 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : Config1_Pin Config2_Pin */
  GPIO_InitStruct.Pin = Config1_Pin|Config2_Pin;
 80027c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	481b      	ldr	r0, [pc, #108]	@ (8002844 <MX_GPIO_Init+0x1e8>)
 80027d8:	f002 ff5e 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : Config3_Pin Config4_Pin */
  GPIO_InitStruct.Pin = Config3_Pin|Config4_Pin;
 80027dc:	23c0      	movs	r3, #192	@ 0xc0
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4619      	mov	r1, r3
 80027ee:	4813      	ldr	r0, [pc, #76]	@ (800283c <MX_GPIO_Init+0x1e0>)
 80027f0:	f002 ff52 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_2_Pin A1_3_Pin A1_4_Pin */
  GPIO_InitStruct.Pin = A1_2_Pin|A1_3_Pin|A1_4_Pin;
 80027f4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80027f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	480e      	ldr	r0, [pc, #56]	@ (8002848 <MX_GPIO_Init+0x1ec>)
 800280e:	f002 ff43 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_4_Pin */
  GPIO_InitStruct.Pin = A0_4_Pin;
 8002812:	2304      	movs	r3, #4
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A0_4_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4808      	ldr	r0, [pc, #32]	@ (800284c <MX_GPIO_Init+0x1f0>)
 800282a:	f002 ff35 	bl	8005698 <HAL_GPIO_Init>

}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	@ 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	42020800 	.word	0x42020800
 8002840:	42021c00 	.word	0x42021c00
 8002844:	42020400 	.word	0x42020400
 8002848:	42020000 	.word	0x42020000
 800284c:	42020c00 	.word	0x42020c00

08002850 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002854:	2000      	movs	r0, #0
 8002856:	f003 f8d1 	bl	80059fc <HAL_ICACHE_ConfigAssociativityMode>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8002860:	f000 f95c 	bl	8002b1c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002864:	f003 f8ea 	bl	8005a3c <HAL_ICACHE_Enable>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800286e:	f000 f955 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800287c:	f000 ff5d 	bl	800373a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002880:	f000 f854 	bl	800292c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002884:	f000 f8b6 	bl	80029f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002888:	f7ff fee8 	bl	800265c <MX_GPIO_Init>
  MX_DMA_Init();
 800288c:	f7ff fe0e 	bl	80024ac <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002890:	f7ff fe3e 	bl	8002510 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8002894:	f000 f948 	bl	8002b28 <MX_RTC_Init>
  MX_ADC1_Init();
 8002898:	f7ff fc12 	bl	80020c0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800289c:	f000 fa30 	bl	8002d00 <MX_SPI1_Init>
  MX_ICACHE_Init();
 80028a0:	f7ff ffd6 	bl	8002850 <MX_ICACHE_Init>
  MX_ADC2_Init();
 80028a4:	f7ff fc8a 	bl	80021bc <MX_ADC2_Init>
  MX_TIM2_Init();
 80028a8:	f000 fc8e 	bl	80031c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80028ac:	f000 fd00 	bl	80032b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80028b0:	f000 fd74 	bl	800339c <MX_TIM4_Init>
  MX_TIM5_Init();
 80028b4:	f000 fde8 	bl	8003488 <MX_TIM5_Init>
  MX_TIM8_Init();
 80028b8:	f000 fe36 	bl	8003528 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  LTC6811_init();	//initializes the LTC (and SPI communication)
 80028bc:	f7fe f8de 	bl	8000a7c <LTC6811_init>

  //START ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcVal[0], 1);
 80028c0:	4b12      	ldr	r3, [pc, #72]	@ (800290c <main+0x94>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2201      	movs	r2, #1
 80028c6:	4619      	mov	r1, r3
 80028c8:	4811      	ldr	r0, [pc, #68]	@ (8002910 <main+0x98>)
 80028ca:	f001 fac9 	bl	8003e60 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adcVal[1], 1);
 80028ce:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <main+0x94>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	4619      	mov	r1, r3
 80028d6:	480f      	ldr	r0, [pc, #60]	@ (8002914 <main+0x9c>)
 80028d8:	f001 fac2 	bl	8003e60 <HAL_ADC_Start_DMA>

  //START TIMERS
  HAL_TIM_Base_Start(&htim8);	//Triggers ADCs
 80028dc:	480e      	ldr	r0, [pc, #56]	@ (8002918 <main+0xa0>)
 80028de:	f007 fadd 	bl	8009e9c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim5); // Triggers Reading of aux conversion
 80028e2:	480e      	ldr	r0, [pc, #56]	@ (800291c <main+0xa4>)
 80028e4:	f007 fb42 	bl	8009f6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Triggers aux conversion
 80028e8:	480d      	ldr	r0, [pc, #52]	@ (8002920 <main+0xa8>)
 80028ea:	f007 fb3f 	bl	8009f6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // Triggers Reading of voltage conversion
 80028ee:	480d      	ldr	r0, [pc, #52]	@ (8002924 <main+0xac>)
 80028f0:	f007 fb3c 	bl	8009f6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // Triggers voltage conversion
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <main+0xb0>)
 80028f6:	f007 fb39 	bl	8009f6c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80028fa:	f00c feef 	bl	800f6dc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80028fe:	f7ff fdaf 	bl	8002460 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002902:	f00c ff0f 	bl	800f724 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002906:	bf00      	nop
 8002908:	e7fd      	b.n	8002906 <main+0x8e>
 800290a:	bf00      	nop
 800290c:	2000027c 	.word	0x2000027c
 8002910:	200002a0 	.word	0x200002a0
 8002914:	20000308 	.word	0x20000308
 8002918:	200006b8 	.word	0x200006b8
 800291c:	2000066c 	.word	0x2000066c
 8002920:	20000620 	.word	0x20000620
 8002924:	200005d4 	.word	0x200005d4
 8002928:	20000588 	.word	0x20000588

0800292c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b098      	sub	sp, #96	@ 0x60
 8002930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	2248      	movs	r2, #72	@ 0x48
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f010 f816 	bl	801296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800294e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002952:	f004 fdd5 	bl	8007500 <HAL_PWREx_ControlVoltageScaling>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800295c:	f000 f8de 	bl	8002b1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002960:	f004 fdb0 	bl	80074c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002964:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <SystemClock_Config+0xc4>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	4a21      	ldr	r2, [pc, #132]	@ (80029f0 <SystemClock_Config+0xc4>)
 800296c:	f023 0318 	bic.w	r3, r3, #24
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002974:	2314      	movs	r3, #20
 8002976:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002978:	2381      	movs	r3, #129	@ 0x81
 800297a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800297c:	2301      	movs	r3, #1
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002980:	2300      	movs	r3, #0
 8002982:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002984:	2360      	movs	r3, #96	@ 0x60
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002988:	2302      	movs	r3, #2
 800298a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800298c:	2301      	movs	r3, #1
 800298e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002990:	2301      	movs	r3, #1
 8002992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002994:	2310      	movs	r3, #16
 8002996:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002998:	2307      	movs	r3, #7
 800299a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800299c:	2304      	movs	r3, #4
 800299e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029a0:	2302      	movs	r3, #2
 80029a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 fe49 	bl	8007640 <HAL_RCC_OscConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80029b4:	f000 f8b2 	bl	8002b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029b8:	230f      	movs	r3, #15
 80029ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029bc:	2303      	movs	r3, #3
 80029be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80029c4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80029c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80029ca:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80029ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f005 fb09 	bl	8007fec <HAL_RCC_ClockConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80029e0:	f000 f89c 	bl	8002b1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80029e4:	f006 f984 	bl	8008cf0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80029e8:	bf00      	nop
 80029ea:	3760      	adds	r7, #96	@ 0x60
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0a6      	sub	sp, #152	@ 0x98
 80029f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2294      	movs	r2, #148	@ 0x94
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f00f ffb3 	bl	801296c <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8002a06:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a0a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002a14:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a18:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002a22:	2318      	movs	r3, #24
 8002a24:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002a26:	2307      	movs	r3, #7
 8002a28:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002a32:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8002a36:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f005 fdd4 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002a46:	f000 f869 	bl	8002b1c <Error_Handler>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3798      	adds	r7, #152	@ 0x98
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//timers to control the LTC6811 value reading
	//TIM2 starts first and then triggers TIM3, which triggers TIM4, which triggers TIM5.
	//These 4 timers run in a loop at 5Hz each, and 20Hz overall
	//TIM2 starts cell voltage conversion
	if(htim->Instance == TIM2){
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a64:	d10d      	bne.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x2e>
		__HAL_TIM_CLEAR_IT(&htim2 ,TIM_IT_UPDATE);	//clears the IT flag
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0201 	mvn.w	r2, #1
 8002a6e:	611a      	str	r2, [r3, #16]
//		__HAL_TIM_SET_COUNTER(&htim2, 0);	//resets the timer's counter to 0
		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7fe f9a0 	bl	8000db6 <wakeup_idle>
		LTC6811_adcv(MD_27KHZ_14KHZ, DCP_DISABLED, CELL_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7fe f8f9 	bl	8000c72 <LTC6811_adcv>
 8002a80:	e030      	b.n	8002ae4 <HAL_TIM_PeriodElapsedCallback+0x90>

	//TIM3 reads cell voltages
	}else if(htim->Instance == TIM3){
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		__HAL_TIM_CLEAR_IT(&htim3 ,TIM_IT_UPDATE);	//clears the IT flag
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0201 	mvn.w	r2, #1
 8002a94:	611a      	str	r2, [r3, #16]
//		__HAL_TIM_SET_COUNTER(&htim3, 0);	//resets the timer's counter to 0
		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002a96:	2001      	movs	r0, #1
 8002a98:	f7fe f98d 	bl	8000db6 <wakeup_idle>
		readVoltages();	//reads the cell voltages
 8002a9c:	f7fe f838 	bl	8000b10 <readVoltages>
 8002aa0:	e020      	b.n	8002ae4 <HAL_TIM_PeriodElapsedCallback+0x90>

	//TIM4 starts aux voltage conversion
	}else if(htim->Instance == TIM4){
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_TIM_PeriodElapsedCallback+0x72>
		__HAL_TIM_CLEAR_IT(&htim4 ,TIM_IT_UPDATE);	//clears the IT flag
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0201 	mvn.w	r2, #1
 8002ab4:	611a      	str	r2, [r3, #16]
//		__HAL_TIM_SET_COUNTER(&htim4, 0);	//resets the timer's counter to 0
		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7fe f97d 	bl	8000db6 <wakeup_idle>
		LTC6811_adax(MD_27KHZ_14KHZ, AUX_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 8002abc:	2100      	movs	r1, #0
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7fe f8ea 	bl	8000c98 <LTC6811_adax>
 8002ac4:	e00e      	b.n	8002ae4 <HAL_TIM_PeriodElapsedCallback+0x90>

		//TIM5 reads aux voltage conversion
	}else if(htim->Instance == TIM5){
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PeriodElapsedCallback+0x90>
		__HAL_TIM_CLEAR_IT(&htim5 ,TIM_IT_UPDATE);	//clears the IT flag
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0201 	mvn.w	r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
//		__HAL_TIM_SET_COUNTER(&htim5, 0);	//resets the timer's counter to 0
//		flagErrorCheck = true;	//enables the error check and state change code block
		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7fe f96b 	bl	8000db6 <wakeup_idle>
		readTemperatures();
 8002ae0:	f7fe f868 	bl	8000bb4 <readTemperatures>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b18 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_TIM_PeriodElapsedCallback+0x9e>
  {
    HAL_IncTick();
 8002aee:	f000 fe3f 	bl	8003770 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000588 	.word	0x20000588
 8002b00:	40000400 	.word	0x40000400
 8002b04:	200005d4 	.word	0x200005d4
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	20000620 	.word	0x20000620
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	2000066c 	.word	0x2000066c
 8002b18:	40001000 	.word	0x40001000

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <Error_Handler+0x8>

08002b28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	@ 0x30
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002b2e:	f107 0318 	add.w	r3, r7, #24
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b52:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b54:	4a36      	ldr	r2, [pc, #216]	@ (8002c30 <MX_RTC_Init+0x108>)
 8002b56:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b58:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b5e:	4b33      	ldr	r3, [pc, #204]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b60:	227f      	movs	r2, #127	@ 0x7f
 8002b62:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b64:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b66:	22ff      	movs	r2, #255	@ 0xff
 8002b68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b6a:	4b30      	ldr	r3, [pc, #192]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b70:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b8a:	4828      	ldr	r0, [pc, #160]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002b8c:	f006 fa52 	bl	8009034 <HAL_RTC_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_RTC_Init+0x72>
  {
    Error_Handler();
 8002b96:	f7ff ffc1 	bl	8002b1c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002baa:	f107 0318 	add.w	r3, r7, #24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481e      	ldr	r0, [pc, #120]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002bb2:	f006 fcc5 	bl	8009540 <HAL_RTCEx_PrivilegeModeSet>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002bbc:	f7ff ffae 	bl	8002b1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4814      	ldr	r0, [pc, #80]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002bdc:	f006 faa2 	bl	8009124 <HAL_RTC_SetTime>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002be6:	f7ff ff99 	bl	8002b1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002bea:	2301      	movs	r3, #1
 8002bec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480a      	ldr	r0, [pc, #40]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002c02:	f006 fb25 	bl	8009250 <HAL_RTC_SetDate>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8002c0c:	f7ff ff86 	bl	8002b1c <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8002c10:	2100      	movs	r1, #0
 8002c12:	4806      	ldr	r0, [pc, #24]	@ (8002c2c <MX_RTC_Init+0x104>)
 8002c14:	f006 fc58 	bl	80094c8 <HAL_RTCEx_SetCalibrationOutPut>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_RTC_Init+0xfa>
  {
    Error_Handler();
 8002c1e:	f7ff ff7d 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	3730      	adds	r7, #48	@ 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200004ac 	.word	0x200004ac
 8002c30:	40002800 	.word	0x40002800

08002c34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0ae      	sub	sp, #184	@ 0xb8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	2294      	movs	r2, #148	@ 0x94
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00f fe89 	bl	801296c <memset>
  if(rtcHandle->Instance==RTC)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a25      	ldr	r2, [pc, #148]	@ (8002cf4 <HAL_RTC_MspInit+0xc0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d142      	bne.n	8002cea <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 fcb6 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8002c82:	f7ff ff4b 	bl	8002b1c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c86:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c96:	4b18      	ldr	r3, [pc, #96]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb2:	4a11      	ldr	r2, [pc, #68]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cba:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <HAL_RTC_MspInit+0xc4>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4805      	ldr	r0, [pc, #20]	@ (8002cfc <HAL_RTC_MspInit+0xc8>)
 8002ce6:	f002 fcd7 	bl	8005698 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002cea:	bf00      	nop
 8002cec:	37b8      	adds	r7, #184	@ 0xb8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40002800 	.word	0x40002800
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	42020400 	.word	0x42020400

08002d00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <MX_SPI1_Init+0x78>)
 8002d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d12:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d20:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d22:	2202      	movs	r2, #2
 8002d24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d36:	2208      	movs	r2, #8
 8002d38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d4e:	2207      	movs	r2, #7
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d5e:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <MX_SPI1_Init+0x74>)
 8002d60:	f006 fc1a 	bl	8009598 <HAL_SPI_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d6a:	f7ff fed7 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200004d4 	.word	0x200004d4
 8002d78:	40013000 	.word	0x40013000

08002d7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a17      	ldr	r2, [pc, #92]	@ (8002df8 <HAL_SPI_MspInit+0x7c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d127      	bne.n	8002dee <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d9e:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <HAL_SPI_MspInit+0x80>)
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	4a16      	ldr	r2, [pc, #88]	@ (8002dfc <HAL_SPI_MspInit+0x80>)
 8002da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002da8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002daa:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_SPI_MspInit+0x80>)
 8002dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_SPI_MspInit+0x80>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dba:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_SPI_MspInit+0x80>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_SPI_MspInit+0x80>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dce:	23f0      	movs	r3, #240	@ 0xf0
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dde:	2305      	movs	r3, #5
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <HAL_SPI_MspInit+0x84>)
 8002dea:	f002 fc55 	bl	8005698 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	@ 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40013000 	.word	0x40013000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	42020000 	.word	0x42020000

08002e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_MspInit+0x50>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_MspInit+0x50>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e16:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_MspInit+0x50>)
 8002e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <HAL_MspInit+0x50>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <HAL_MspInit+0x50>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_MspInit+0x50>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2107      	movs	r1, #7
 8002e3e:	f06f 0001 	mvn.w	r0, #1
 8002e42:	f001 ff65 	bl	8004d10 <HAL_NVIC_SetPriority>

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e46:	f004 fbc7 	bl	80075d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	@ 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	2031      	movs	r0, #49	@ 0x31
 8002e6e:	f001 ff4f 	bl	8004d10 <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e72:	2031      	movs	r0, #49	@ 0x31
 8002e74:	f001 ff66 	bl	8004d44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <HAL_InitTick+0xa0>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef8 <HAL_InitTick+0xa0>)
 8002e7e:	f043 0310 	orr.w	r3, r3, #16
 8002e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <HAL_InitTick+0xa0>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e90:	f107 0210 	add.w	r2, r7, #16
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 faa2 	bl	80083e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ea0:	f005 fa8c 	bl	80083bc <HAL_RCC_GetPCLK1Freq>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eac:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_InitTick+0xa4>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002eba:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <HAL_InitTick+0xac>)
 8002ebc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002ec0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ed8:	4809      	ldr	r0, [pc, #36]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002eda:	f006 ff87 	bl	8009dec <HAL_TIM_Base_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ee4:	4806      	ldr	r0, [pc, #24]	@ (8002f00 <HAL_InitTick+0xa8>)
 8002ee6:	f007 f841 	bl	8009f6c <HAL_TIM_Base_Start_IT>
 8002eea:	4603      	mov	r3, r0
 8002eec:	e000      	b.n	8002ef0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3730      	adds	r7, #48	@ 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	431bde83 	.word	0x431bde83
 8002f00:	20000538 	.word	0x20000538
 8002f04:	40001000 	.word	0x40001000

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <NMI_Handler+0x4>

08002f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <MemManage_Handler+0x4>

08002f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <BusFault_Handler+0x4>

08002f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <UsageFault_Handler+0x4>

08002f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002f44:	4802      	ldr	r0, [pc, #8]	@ (8002f50 <DMA1_Channel1_IRQHandler+0x10>)
 8002f46:	f002 f82e 	bl	8004fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200003d8 	.word	0x200003d8

08002f54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f58:	4802      	ldr	r0, [pc, #8]	@ (8002f64 <DMA1_Channel2_IRQHandler+0x10>)
 8002f5a:	f002 f824 	bl	8004fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000370 	.word	0x20000370

08002f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f6c:	4802      	ldr	r0, [pc, #8]	@ (8002f78 <TIM2_IRQHandler+0x10>)
 8002f6e:	f007 f8ce 	bl	800a10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000588 	.word	0x20000588

08002f7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f80:	4802      	ldr	r0, [pc, #8]	@ (8002f8c <TIM3_IRQHandler+0x10>)
 8002f82:	f007 f8c4 	bl	800a10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200005d4 	.word	0x200005d4

08002f90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f94:	4802      	ldr	r0, [pc, #8]	@ (8002fa0 <TIM4_IRQHandler+0x10>)
 8002f96:	f007 f8ba 	bl	800a10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000620 	.word	0x20000620

08002fa4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fa8:	4802      	ldr	r0, [pc, #8]	@ (8002fb4 <TIM5_IRQHandler+0x10>)
 8002faa:	f007 f8b0 	bl	800a10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000066c 	.word	0x2000066c

08002fb8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fbc:	4802      	ldr	r0, [pc, #8]	@ (8002fc8 <TIM6_IRQHandler+0x10>)
 8002fbe:	f007 f8a6 	bl	800a10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000538 	.word	0x20000538

08002fcc <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002fd0:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <USB_FS_IRQHandler+0x10>)
 8002fd2:	f002 fe33 	bl	8005c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200049c8 	.word	0x200049c8

08002fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <_sbrk+0x5c>)
 8002fea:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <_sbrk+0x60>)
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <_sbrk+0x64>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <_sbrk+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003002:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003010:	f00f fd22 	bl	8012a58 <__errno>
 8003014:	4603      	mov	r3, r0
 8003016:	220c      	movs	r2, #12
 8003018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800301e:	e009      	b.n	8003034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003020:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003026:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <_sbrk+0x64>)
 8003030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20030000 	.word	0x20030000
 8003040:	00000400 	.word	0x00000400
 8003044:	20000584 	.word	0x20000584
 8003048:	20005010 	.word	0x20005010

0800304c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <SystemInit+0x20>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	4a05      	ldr	r2, [pc, #20]	@ (800306c <SystemInit+0x20>)
 8003058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800305c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003076:	4b4f      	ldr	r3, [pc, #316]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003082:	4b4c      	ldr	r3, [pc, #304]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e005      	b.n	800309e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003092:	4b48      	ldr	r3, [pc, #288]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800309e:	4a46      	ldr	r2, [pc, #280]	@ (80031b8 <SystemCoreClockUpdate+0x148>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a8:	4b42      	ldr	r3, [pc, #264]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d866      	bhi.n	8003182 <SystemCoreClockUpdate+0x112>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <SystemCoreClockUpdate+0x4c>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003183 	.word	0x08003183
 80030c4:	08003183 	.word	0x08003183
 80030c8:	08003183 	.word	0x08003183
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	08003183 	.word	0x08003183
 80030d4:	08003183 	.word	0x08003183
 80030d8:	08003183 	.word	0x08003183
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003183 	.word	0x08003183
 80030e4:	08003183 	.word	0x08003183
 80030e8:	08003183 	.word	0x08003183
 80030ec:	08003109 	.word	0x08003109
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80030f0:	4a32      	ldr	r2, [pc, #200]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6013      	str	r3, [r2, #0]
      break;
 80030f6:	e048      	b.n	800318a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030f8:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 80030fa:	4a31      	ldr	r2, [pc, #196]	@ (80031c0 <SystemCoreClockUpdate+0x150>)
 80030fc:	601a      	str	r2, [r3, #0]
      break;
 80030fe:	e044      	b.n	800318a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003100:	4b2e      	ldr	r3, [pc, #184]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 8003102:	4a2f      	ldr	r2, [pc, #188]	@ (80031c0 <SystemCoreClockUpdate+0x150>)
 8003104:	601a      	str	r2, [r3, #0]
      break;
 8003106:	e040      	b.n	800318a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003108:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003112:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	3301      	adds	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <SystemCoreClockUpdate+0xbe>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d006      	beq.n	800313a <SystemCoreClockUpdate+0xca>
 800312c:	e00b      	b.n	8003146 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800312e:	4a24      	ldr	r2, [pc, #144]	@ (80031c0 <SystemCoreClockUpdate+0x150>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	613b      	str	r3, [r7, #16]
          break;
 8003138:	e00b      	b.n	8003152 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <SystemCoreClockUpdate+0x150>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	613b      	str	r3, [r7, #16]
          break;
 8003144:	e005      	b.n	8003152 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	613b      	str	r3, [r7, #16]
          break;
 8003150:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003152:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003164:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0e5b      	lsrs	r3, r3, #25
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	4a0f      	ldr	r2, [pc, #60]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 800317e:	6013      	str	r3, [r2, #0]
      break;
 8003180:	e003      	b.n	800318a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003182:	4a0e      	ldr	r2, [pc, #56]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	6013      	str	r3, [r2, #0]
      break;
 8003188:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <SystemCoreClockUpdate+0x144>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	4a0b      	ldr	r2, [pc, #44]	@ (80031c4 <SystemCoreClockUpdate+0x154>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800319a:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	4a05      	ldr	r2, [pc, #20]	@ (80031bc <SystemCoreClockUpdate+0x14c>)
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08012e20 	.word	0x08012e20
 80031bc:	20000008 	.word	0x20000008
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	08012e08 	.word	0x08012e08

080031c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08e      	sub	sp, #56	@ 0x38
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031dc:	f107 031c 	add.w	r3, r7, #28
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031e8:	463b      	mov	r3, r7
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	60da      	str	r2, [r3, #12]
 80031f4:	611a      	str	r2, [r3, #16]
 80031f6:	615a      	str	r2, [r3, #20]
 80031f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031fa:	4b2c      	ldr	r3, [pc, #176]	@ (80032ac <MX_TIM2_Init+0xe4>)
 80031fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8003202:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003204:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320a:	4b28      	ldr	r3, [pc, #160]	@ (80032ac <MX_TIM2_Init+0xe4>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003210:	4b26      	ldr	r3, [pc, #152]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003212:	2263      	movs	r2, #99	@ 0x63
 8003214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003216:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321c:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <MX_TIM2_Init+0xe4>)
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003222:	4822      	ldr	r0, [pc, #136]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003224:	f006 fde2 	bl	8009dec <HAL_TIM_Base_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800322e:	f7ff fc75 	bl	8002b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003238:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800323c:	4619      	mov	r1, r3
 800323e:	481b      	ldr	r0, [pc, #108]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003240:	f007 f8e6 	bl	800a410 <HAL_TIM_ConfigClockSource>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800324a:	f7ff fc67 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800324e:	4817      	ldr	r0, [pc, #92]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003250:	f006 fefc 	bl	800a04c <HAL_TIM_OC_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800325a:	f7ff fc5f 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800325e:	2340      	movs	r3, #64	@ 0x40
 8003260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003266:	f107 031c 	add.w	r3, r7, #28
 800326a:	4619      	mov	r1, r3
 800326c:	480f      	ldr	r0, [pc, #60]	@ (80032ac <MX_TIM2_Init+0xe4>)
 800326e:	f007 feb1 	bl	800afd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003278:	f7ff fc50 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800327c:	2310      	movs	r3, #16
 800327e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 24;
 8003280:	2318      	movs	r3, #24
 8003282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800328c:	463b      	mov	r3, r7
 800328e:	2200      	movs	r2, #0
 8003290:	4619      	mov	r1, r3
 8003292:	4806      	ldr	r0, [pc, #24]	@ (80032ac <MX_TIM2_Init+0xe4>)
 8003294:	f007 f842 	bl	800a31c <HAL_TIM_OC_ConfigChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800329e:	f7ff fc3d 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032a2:	bf00      	nop
 80032a4:	3738      	adds	r7, #56	@ 0x38
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000588 	.word	0x20000588

080032b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b090      	sub	sp, #64	@ 0x40
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80032b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c6:	f107 0320 	add.w	r3, r7, #32
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
 80032e0:	615a      	str	r2, [r3, #20]
 80032e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <MX_TIM3_Init+0xe4>)
 80032e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003398 <MX_TIM3_Init+0xe8>)
 80032e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80032ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003394 <MX_TIM3_Init+0xe4>)
 80032ec:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80032f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f2:	4b28      	ldr	r3, [pc, #160]	@ (8003394 <MX_TIM3_Init+0xe4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80032f8:	4b26      	ldr	r3, [pc, #152]	@ (8003394 <MX_TIM3_Init+0xe4>)
 80032fa:	2263      	movs	r2, #99	@ 0x63
 80032fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <MX_TIM3_Init+0xe4>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003304:	4b23      	ldr	r3, [pc, #140]	@ (8003394 <MX_TIM3_Init+0xe4>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800330a:	4822      	ldr	r0, [pc, #136]	@ (8003394 <MX_TIM3_Init+0xe4>)
 800330c:	f006 fd6e 	bl	8009dec <HAL_TIM_Base_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8003316:	f7ff fc01 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800331a:	481e      	ldr	r0, [pc, #120]	@ (8003394 <MX_TIM3_Init+0xe4>)
 800331c:	f006 fe96 	bl	800a04c <HAL_TIM_OC_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003326:	f7ff fbf9 	bl	8002b1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800332a:	2306      	movs	r3, #6
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800332e:	2310      	movs	r3, #16
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003336:	4619      	mov	r1, r3
 8003338:	4816      	ldr	r0, [pc, #88]	@ (8003394 <MX_TIM3_Init+0xe4>)
 800333a:	f007 f932 	bl	800a5a2 <HAL_TIM_SlaveConfigSynchro>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003344:	f7ff fbea 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003350:	f107 0320 	add.w	r3, r7, #32
 8003354:	4619      	mov	r1, r3
 8003356:	480f      	ldr	r0, [pc, #60]	@ (8003394 <MX_TIM3_Init+0xe4>)
 8003358:	f007 fe3c 	bl	800afd4 <HAL_TIMEx_MasterConfigSynchronization>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003362:	f7ff fbdb 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003366:	2310      	movs	r3, #16
 8003368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24;
 800336a:	2318      	movs	r3, #24
 800336c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	2200      	movs	r2, #0
 800337a:	4619      	mov	r1, r3
 800337c:	4805      	ldr	r0, [pc, #20]	@ (8003394 <MX_TIM3_Init+0xe4>)
 800337e:	f006 ffcd 	bl	800a31c <HAL_TIM_OC_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8003388:	f7ff fbc8 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800338c:	bf00      	nop
 800338e:	3740      	adds	r7, #64	@ 0x40
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200005d4 	.word	0x200005d4
 8003398:	40000400 	.word	0x40000400

0800339c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b090      	sub	sp, #64	@ 0x40
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80033a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b2:	f107 0320 	add.w	r3, r7, #32
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
 80033cc:	615a      	str	r2, [r3, #20]
 80033ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003484 <MX_TIM4_Init+0xe8>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033d8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80033dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033de:	4b28      	ldr	r3, [pc, #160]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80033e4:	4b26      	ldr	r3, [pc, #152]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033e6:	2263      	movs	r2, #99	@ 0x63
 80033e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ea:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f0:	4b23      	ldr	r3, [pc, #140]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033f6:	4822      	ldr	r0, [pc, #136]	@ (8003480 <MX_TIM4_Init+0xe4>)
 80033f8:	f006 fcf8 	bl	8009dec <HAL_TIM_Base_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8003402:	f7ff fb8b 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003406:	481e      	ldr	r0, [pc, #120]	@ (8003480 <MX_TIM4_Init+0xe4>)
 8003408:	f006 fe20 	bl	800a04c <HAL_TIM_OC_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003412:	f7ff fb83 	bl	8002b1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003416:	2306      	movs	r3, #6
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800341a:	2320      	movs	r3, #32
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800341e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003422:	4619      	mov	r1, r3
 8003424:	4816      	ldr	r0, [pc, #88]	@ (8003480 <MX_TIM4_Init+0xe4>)
 8003426:	f007 f8bc 	bl	800a5a2 <HAL_TIM_SlaveConfigSynchro>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003430:	f7ff fb74 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800343c:	f107 0320 	add.w	r3, r7, #32
 8003440:	4619      	mov	r1, r3
 8003442:	480f      	ldr	r0, [pc, #60]	@ (8003480 <MX_TIM4_Init+0xe4>)
 8003444:	f007 fdc6 	bl	800afd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800344e:	f7ff fb65 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003452:	2310      	movs	r3, #16
 8003454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24;
 8003456:	2318      	movs	r3, #24
 8003458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	2200      	movs	r2, #0
 8003466:	4619      	mov	r1, r3
 8003468:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_TIM4_Init+0xe4>)
 800346a:	f006 ff57 	bl	800a31c <HAL_TIM_OC_ConfigChannel>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8003474:	f7ff fb52 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003478:	bf00      	nop
 800347a:	3740      	adds	r7, #64	@ 0x40
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000620 	.word	0x20000620
 8003484:	40000800 	.word	0x40000800

08003488 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800349e:	463b      	mov	r3, r7
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80034a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003524 <MX_TIM5_Init+0x9c>)
 80034ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80034ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034bc:	2263      	movs	r2, #99	@ 0x63
 80034be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c0:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80034cc:	4814      	ldr	r0, [pc, #80]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034ce:	f006 fc8d 	bl	8009dec <HAL_TIM_Base_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80034d8:	f7ff fb20 	bl	8002b1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80034dc:	2306      	movs	r3, #6
 80034de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80034e0:	2320      	movs	r3, #32
 80034e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	480d      	ldr	r0, [pc, #52]	@ (8003520 <MX_TIM5_Init+0x98>)
 80034ec:	f007 f859 	bl	800a5a2 <HAL_TIM_SlaveConfigSynchro>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80034f6:	f7ff fb11 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003502:	463b      	mov	r3, r7
 8003504:	4619      	mov	r1, r3
 8003506:	4806      	ldr	r0, [pc, #24]	@ (8003520 <MX_TIM5_Init+0x98>)
 8003508:	f007 fd64 	bl	800afd4 <HAL_TIMEx_MasterConfigSynchronization>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003512:	f7ff fb03 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003516:	bf00      	nop
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000066c 	.word	0x2000066c
 8003524:	40000c00 	.word	0x40000c00

08003528 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800352e:	f107 0310 	add.w	r3, r7, #16
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 8003548:	4a20      	ldr	r2, [pc, #128]	@ (80035cc <MX_TIM8_Init+0xa4>)
 800354a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800354c:	4b1e      	ldr	r3, [pc, #120]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 800355a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800355e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003560:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003566:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 8003568:	2200      	movs	r2, #0
 800356a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356c:	4b16      	ldr	r3, [pc, #88]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003572:	4815      	ldr	r0, [pc, #84]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 8003574:	f006 fc3a 	bl	8009dec <HAL_TIM_Base_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800357e:	f7ff facd 	bl	8002b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	4619      	mov	r1, r3
 800358e:	480e      	ldr	r0, [pc, #56]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 8003590:	f006 ff3e 	bl	800a410 <HAL_TIM_ConfigClockSource>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800359a:	f7ff fabf 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	4806      	ldr	r0, [pc, #24]	@ (80035c8 <MX_TIM8_Init+0xa0>)
 80035b0:	f007 fd10 	bl	800afd4 <HAL_TIMEx_MasterConfigSynchronization>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80035ba:	f7ff faaf 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80035be:	bf00      	nop
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200006b8 	.word	0x200006b8
 80035cc:	40013400 	.word	0x40013400

080035d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d114      	bne.n	800360c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035e2:	4b3c      	ldr	r3, [pc, #240]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	4a3b      	ldr	r2, [pc, #236]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ee:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2105      	movs	r1, #5
 80035fe:	202d      	movs	r0, #45	@ 0x2d
 8003600:	f001 fb86 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003604:	202d      	movs	r0, #45	@ 0x2d
 8003606:	f001 fb9d 	bl	8004d44 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800360a:	e05e      	b.n	80036ca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a31      	ldr	r2, [pc, #196]	@ (80036d8 <HAL_TIM_Base_MspInit+0x108>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d114      	bne.n	8003640 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003616:	4b2f      	ldr	r3, [pc, #188]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
 8003622:	4b2c      	ldr	r3, [pc, #176]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	2105      	movs	r1, #5
 8003632:	202e      	movs	r0, #46	@ 0x2e
 8003634:	f001 fb6c 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003638:	202e      	movs	r0, #46	@ 0x2e
 800363a:	f001 fb83 	bl	8004d44 <HAL_NVIC_EnableIRQ>
}
 800363e:	e044      	b.n	80036ca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a25      	ldr	r2, [pc, #148]	@ (80036dc <HAL_TIM_Base_MspInit+0x10c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d114      	bne.n	8003674 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800364a:	4b22      	ldr	r3, [pc, #136]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	4a21      	ldr	r2, [pc, #132]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6593      	str	r3, [r2, #88]	@ 0x58
 8003656:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2105      	movs	r1, #5
 8003666:	202f      	movs	r0, #47	@ 0x2f
 8003668:	f001 fb52 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800366c:	202f      	movs	r0, #47	@ 0x2f
 800366e:	f001 fb69 	bl	8004d44 <HAL_NVIC_EnableIRQ>
}
 8003672:	e02a      	b.n	80036ca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM5)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a19      	ldr	r2, [pc, #100]	@ (80036e0 <HAL_TIM_Base_MspInit+0x110>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d114      	bne.n	80036a8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	4a14      	ldr	r2, [pc, #80]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	6593      	str	r3, [r2, #88]	@ 0x58
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2105      	movs	r1, #5
 800369a:	2030      	movs	r0, #48	@ 0x30
 800369c:	f001 fb38 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80036a0:	2030      	movs	r0, #48	@ 0x30
 80036a2:	f001 fb4f 	bl	8004d44 <HAL_NVIC_EnableIRQ>
}
 80036a6:	e010      	b.n	80036ca <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <HAL_TIM_Base_MspInit+0x114>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10b      	bne.n	80036ca <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 80036b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80036be:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_TIM_Base_MspInit+0x104>)
 80036c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40013400 	.word	0x40013400

080036e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80036e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036ec:	f7ff fcae 	bl	800304c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80036f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80036f2:	e003      	b.n	80036fc <LoopCopyDataInit>

080036f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80036f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80036f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80036fa:	3104      	adds	r1, #4

080036fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036fc:	480a      	ldr	r0, [pc, #40]	@ (8003728 <LoopForever+0xa>)
	ldr	r3, =_edata
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003700:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003702:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003704:	d3f6      	bcc.n	80036f4 <CopyDataInit>
	ldr	r2, =_sbss
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003708:	e002      	b.n	8003710 <LoopFillZerobss>

0800370a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800370a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800370c:	f842 3b04 	str.w	r3, [r2], #4

08003710 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <LoopForever+0x16>)
	cmp	r2, r3
 8003712:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003714:	d3f9      	bcc.n	800370a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003716:	f00f f9a5 	bl	8012a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800371a:	f7ff f8ad 	bl	8002878 <main>

0800371e <LoopForever>:

LoopForever:
    b LoopForever
 800371e:	e7fe      	b.n	800371e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003720:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003724:	08012e68 	.word	0x08012e68
	ldr	r0, =_sdata
 8003728:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800372c:	2000015c 	.word	0x2000015c
	ldr	r2, =_sbss
 8003730:	2000015c 	.word	0x2000015c
	ldr	r3, = _ebss
 8003734:	2000500c 	.word	0x2000500c

08003738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <ADC1_2_IRQHandler>

0800373a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003744:	2004      	movs	r0, #4
 8003746:	f001 fad8 	bl	8004cfa <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800374a:	f7ff fc91 	bl	8003070 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800374e:	2007      	movs	r0, #7
 8003750:	f7ff fb82 	bl	8002e58 <HAL_InitTick>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	71fb      	strb	r3, [r7, #7]
 800375e:	e001      	b.n	8003764 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003760:	f7ff fb50 	bl	8002e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003764:	79fb      	ldrb	r3, [r7, #7]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_IncTick+0x20>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_IncTick+0x24>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4413      	add	r3, r2
 8003780:	4a04      	ldr	r2, [pc, #16]	@ (8003794 <HAL_IncTick+0x24>)
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000010 	.word	0x20000010
 8003794:	20000704 	.word	0x20000704

08003798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return uwTick;
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <HAL_GetTick+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000704 	.word	0x20000704

080037b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7ff ffee 	bl	8003798 <HAL_GetTick>
 80037bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037c8:	d005      	beq.n	80037d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <HAL_Delay+0x44>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d6:	bf00      	nop
 80037d8:	f7ff ffde 	bl	8003798 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d8f7      	bhi.n	80037d8 <HAL_Delay+0x28>
  {
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000010 	.word	0x20000010

080037f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3360      	adds	r3, #96	@ 0x60
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <LL_ADC_SetOffset+0x44>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	03fff000 	.word	0x03fff000

080038a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3360      	adds	r3, #96	@ 0x60
 80038b6:	461a      	mov	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3360      	adds	r3, #96	@ 0x60
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	615a      	str	r2, [r3, #20]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003956:	b480      	push	{r7}
 8003958:	b087      	sub	sp, #28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3330      	adds	r3, #48	@ 0x30
 8003966:	461a      	mov	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	4413      	add	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	211f      	movs	r1, #31
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0e9b      	lsrs	r3, r3, #26
 800398e:	f003 011f 	and.w	r1, r3, #31
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	431a      	orrs	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b087      	sub	sp, #28
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3314      	adds	r3, #20
 80039be:	461a      	mov	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	0e5b      	lsrs	r3, r3, #25
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0d1b      	lsrs	r3, r3, #20
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2107      	movs	r1, #7
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	401a      	ands	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0d1b      	lsrs	r3, r3, #20
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	431a      	orrs	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0318 	and.w	r3, r3, #24
 8003a26:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a28:	40d9      	lsrs	r1, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	0007ffff 	.word	0x0007ffff

08003a4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 031f 	and.w	r3, r3, #31
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6093      	str	r3, [r2, #8]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa0:	d101      	bne.n	8003aa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ac4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ac8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af0:	d101      	bne.n	8003af6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b18:	f043 0201 	orr.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <LL_ADC_IsEnabled+0x18>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <LL_ADC_IsEnabled+0x1a>
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b66:	f043 0204 	orr.w	r2, r3, #4
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d101      	bne.n	8003bb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e12e      	b.n	8003e40 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fe fb43 	bl	800227c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff3f 	bl	8003a8c <LL_ADC_IsDeepPowerDownEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff25 	bl	8003a68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff5a 	bl	8003adc <LL_ADC_IsInternalRegulatorEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff3e 	bl	8003ab4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c38:	4b83      	ldr	r3, [pc, #524]	@ (8003e48 <HAL_ADC_Init+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	4a83      	ldr	r2, [pc, #524]	@ (8003e4c <HAL_ADC_Init+0x284>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f9      	bne.n	8003c4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ff3c 	bl	8003adc <LL_ADC_IsInternalRegulatorEnabled>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff75 	bl	8003b7a <LL_ADC_REG_IsConversionOngoing>
 8003c90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 80c7 	bne.w	8003e2e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 80c3 	bne.w	8003e2e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cb0:	f043 0202 	orr.w	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff35 	bl	8003b2c <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d110      	bne.n	8003cea <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cc8:	4861      	ldr	r0, [pc, #388]	@ (8003e50 <HAL_ADC_Init+0x288>)
 8003cca:	f7ff ff2f 	bl	8003b2c <LL_ADC_IsEnabled>
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4860      	ldr	r0, [pc, #384]	@ (8003e54 <HAL_ADC_Init+0x28c>)
 8003cd2:	f7ff ff2b 	bl	8003b2c <LL_ADC_IsEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4323      	orrs	r3, r4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	485c      	ldr	r0, [pc, #368]	@ (8003e58 <HAL_ADC_Init+0x290>)
 8003ce6:	f7ff fd87 	bl	80037f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7e5b      	ldrb	r3, [r3, #25]
 8003cee:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cf4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003cfa:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d00:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d08:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d106      	bne.n	8003d26 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	045b      	lsls	r3, r3, #17
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	4b44      	ldr	r3, [pc, #272]	@ (8003e5c <HAL_ADC_Init+0x294>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	69b9      	ldr	r1, [r7, #24]
 8003d52:	430b      	orrs	r3, r1
 8003d54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff20 	bl	8003ba0 <LL_ADC_INJ_IsConversionOngoing>
 8003d60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d140      	bne.n	8003dea <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13d      	bne.n	8003dea <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7e1b      	ldrb	r3, [r3, #24]
 8003d76:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d78:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d80:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d90:	f023 0306 	bic.w	r3, r3, #6
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	69b9      	ldr	r1, [r7, #24]
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d118      	bne.n	8003dda <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003db2:	f023 0304 	bic.w	r3, r3, #4
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	611a      	str	r2, [r3, #16]
 8003dd8:	e007      	b.n	8003dea <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d10c      	bne.n	8003e0c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	f023 010f 	bic.w	r1, r3, #15
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e0a:	e007      	b.n	8003e1c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 020f 	bic.w	r2, r2, #15
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f023 0303 	bic.w	r3, r3, #3
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e2c:	e007      	b.n	8003e3e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f043 0210 	orr.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3724      	adds	r7, #36	@ 0x24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd90      	pop	{r4, r7, pc}
 8003e48:	20000008 	.word	0x20000008
 8003e4c:	053e2d63 	.word	0x053e2d63
 8003e50:	42028000 	.word	0x42028000
 8003e54:	42028100 	.word	0x42028100
 8003e58:	42028300 	.word	0x42028300
 8003e5c:	fff0c007 	.word	0xfff0c007

08003e60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e6c:	4850      	ldr	r0, [pc, #320]	@ (8003fb0 <HAL_ADC_Start_DMA+0x150>)
 8003e6e:	f7ff fded 	bl	8003a4c <LL_ADC_GetMultimode>
 8003e72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fe7e 	bl	8003b7a <LL_ADC_REG_IsConversionOngoing>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f040 808e 	bne.w	8003fa2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_Start_DMA+0x34>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e089      	b.n	8003fa8 <HAL_ADC_Start_DMA+0x148>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d002      	beq.n	8003eae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	d172      	bne.n	8003f94 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fc92 	bl	80047d8 <ADC_Enable>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d165      	bne.n	8003f8a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a37      	ldr	r2, [pc, #220]	@ (8003fb4 <HAL_ADC_Start_DMA+0x154>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d002      	beq.n	8003ee2 <HAL_ADC_Start_DMA+0x82>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	e000      	b.n	8003ee4 <HAL_ADC_Start_DMA+0x84>
 8003ee2:	4b35      	ldr	r3, [pc, #212]	@ (8003fb8 <HAL_ADC_Start_DMA+0x158>)
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d002      	beq.n	8003ef2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	f023 0206 	bic.w	r2, r3, #6
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f16:	e002      	b.n	8003f1e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f22:	4a26      	ldr	r2, [pc, #152]	@ (8003fbc <HAL_ADC_Start_DMA+0x15c>)
 8003f24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2a:	4a25      	ldr	r2, [pc, #148]	@ (8003fc0 <HAL_ADC_Start_DMA+0x160>)
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	4a24      	ldr	r2, [pc, #144]	@ (8003fc4 <HAL_ADC_Start_DMA+0x164>)
 8003f34:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	221c      	movs	r2, #28
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0210 	orr.w	r2, r2, #16
 8003f54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3340      	adds	r3, #64	@ 0x40
 8003f70:	4619      	mov	r1, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f000 ff9b 	bl	8004eb0 <HAL_DMA_Start_IT>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fde5 	bl	8003b52 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f88:	e00d      	b.n	8003fa6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8003f92:	e008      	b.n	8003fa6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003fa0:	e001      	b.n	8003fa6 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	42028300 	.word	0x42028300
 8003fb4:	42028100 	.word	0x42028100
 8003fb8:	42028000 	.word	0x42028000
 8003fbc:	080048e5 	.word	0x080048e5
 8003fc0:	080049bd 	.word	0x080049bd
 8003fc4:	080049d9 	.word	0x080049d9

08003fc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b0b7      	sub	sp, #220	@ 0xdc
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x22>
 8004022:	2302      	movs	r3, #2
 8004024:	e3c1      	b.n	80047aa <HAL_ADC_ConfigChannel+0x7a6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fda1 	bl	8003b7a <LL_ADC_REG_IsConversionOngoing>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 83a6 	bne.w	800478c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	f7ff fc82 	bl	8003956 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fd8f 	bl	8003b7a <LL_ADC_REG_IsConversionOngoing>
 800405c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fd9b 	bl	8003ba0 <LL_ADC_INJ_IsConversionOngoing>
 800406a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800406e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 81c1 	bne.w	80043fa <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004078:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 81bc 	bne.w	80043fa <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800408a:	d10f      	bne.n	80040ac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2200      	movs	r2, #0
 8004096:	4619      	mov	r1, r3
 8004098:	f7ff fc89 	bl	80039ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fc30 	bl	800390a <LL_ADC_SetSamplingTimeCommonConfig>
 80040aa:	e00e      	b.n	80040ca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	461a      	mov	r2, r3
 80040ba:	f7ff fc78 	bl	80039ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fc20 	bl	800390a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	08db      	lsrs	r3, r3, #3
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00a      	beq.n	8004102 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6919      	ldr	r1, [r3, #16]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040fc:	f7ff fbb0 	bl	8003860 <LL_ADC_SetOffset>
 8004100:	e17b      	b.n	80043fa <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fbcd 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <HAL_ADC_ConfigChannel+0x12a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fbc2 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	0e9b      	lsrs	r3, r3, #26
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	e01e      	b.n	800416c <HAL_ADC_ConfigChannel+0x168>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fbb7 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800414c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800415c:	2320      	movs	r3, #32
 800415e:	e004      	b.n	800416a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8004160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x180>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0e9b      	lsrs	r3, r3, #26
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	e018      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x1b2>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80041a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e004      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80041ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d106      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fb86 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fb6a 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x1f0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fb5f 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	e01e      	b.n	8004232 <HAL_ADC_ConfigChannel+0x22e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fb54 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004200:	4603      	mov	r3, r0
 8004202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004216:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800421a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8004222:	2320      	movs	r3, #32
 8004224:	e004      	b.n	8004230 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8004226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	2b00      	cmp	r3, #0
 800423c:	d105      	bne.n	800424a <HAL_ADC_ConfigChannel+0x246>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0e9b      	lsrs	r3, r3, #26
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	e018      	b.n	800427c <HAL_ADC_ConfigChannel+0x278>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800425e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004266:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e004      	b.n	800427c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8004272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800427c:	429a      	cmp	r2, r3
 800427e:	d106      	bne.n	800428e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2200      	movs	r2, #0
 8004286:	2101      	movs	r1, #1
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fb23 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fb07 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x2b6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fafc 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	0e9b      	lsrs	r3, r3, #26
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	e01e      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x2f4>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff faf1 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80042d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80042e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e004      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80042ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x30c>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0e9b      	lsrs	r3, r3, #26
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	e016      	b.n	800433e <HAL_ADC_ConfigChannel+0x33a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004322:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8004330:	2320      	movs	r3, #32
 8004332:	e004      	b.n	800433e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8004334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800433e:	429a      	cmp	r2, r3
 8004340:	d106      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fac2 	bl	80038d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2103      	movs	r1, #3
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff faa6 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x378>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fa9b 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	e017      	b.n	80043ac <HAL_ADC_ConfigChannel+0x3a8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2103      	movs	r1, #3
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fa90 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004396:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800439e:	2320      	movs	r3, #32
 80043a0:	e003      	b.n	80043aa <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80043a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x3c0>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	e011      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x3e4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80043d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80043d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80043dc:	2320      	movs	r3, #32
 80043de:	e003      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80043e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2103      	movs	r1, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fa6d 	bl	80038d4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fb94 	bl	8003b2c <LL_ADC_IsEnabled>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 81c9 	bne.w	800479e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	461a      	mov	r2, r3
 800441a:	f7ff faf3 	bl	8003a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a8f      	ldr	r2, [pc, #572]	@ (8004660 <HAL_ADC_ConfigChannel+0x65c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f040 8131 	bne.w	800468c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x44e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0e9b      	lsrs	r3, r3, #26
 8004440:	3301      	adds	r3, #1
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2b09      	cmp	r3, #9
 8004448:	bf94      	ite	ls
 800444a:	2301      	movls	r3, #1
 800444c:	2300      	movhi	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e019      	b.n	8004486 <HAL_ADC_ConfigChannel+0x482>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004462:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e003      	b.n	8004476 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800446e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2b09      	cmp	r3, #9
 800447e:	bf94      	ite	ls
 8004480:	2301      	movls	r3, #1
 8004482:	2300      	movhi	r3, #0
 8004484:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004486:	2b00      	cmp	r3, #0
 8004488:	d079      	beq.n	800457e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x4a2>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	0e9b      	lsrs	r3, r3, #26
 800449c:	3301      	adds	r3, #1
 800449e:	069b      	lsls	r3, r3, #26
 80044a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044a4:	e015      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x4ce>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80044b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80044b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e003      	b.n	80044ca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	069b      	lsls	r3, r3, #26
 80044ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x4ee>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	3301      	adds	r3, #1
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	e017      	b.n	8004522 <HAL_ADC_ConfigChannel+0x51e>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e003      	b.n	8004516 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800450e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	3301      	adds	r3, #1
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	ea42 0103 	orr.w	r1, r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x544>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	3301      	adds	r3, #1
 800453a:	f003 021f 	and.w	r2, r3, #31
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	051b      	lsls	r3, r3, #20
 8004546:	e018      	b.n	800457a <HAL_ADC_ConfigChannel+0x576>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800455a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800457a:	430b      	orrs	r3, r1
 800457c:	e081      	b.n	8004682 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_ADC_ConfigChannel+0x596>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	3301      	adds	r3, #1
 8004592:	069b      	lsls	r3, r3, #26
 8004594:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004598:	e015      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x5c2>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80045ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	069b      	lsls	r3, r3, #26
 80045c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x5e2>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0e9b      	lsrs	r3, r3, #26
 80045d8:	3301      	adds	r3, #1
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	e017      	b.n	8004616 <HAL_ADC_ConfigChannel+0x612>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	61fb      	str	r3, [r7, #28]
  return result;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	ea42 0103 	orr.w	r1, r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x63e>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0e9b      	lsrs	r3, r3, #26
 800462c:	3301      	adds	r3, #1
 800462e:	f003 021f 	and.w	r2, r3, #31
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	3b1e      	subs	r3, #30
 800463a:	051b      	lsls	r3, r3, #20
 800463c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004640:	e01e      	b.n	8004680 <HAL_ADC_ConfigChannel+0x67c>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	613b      	str	r3, [r7, #16]
  return result;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800465a:	2320      	movs	r3, #32
 800465c:	e006      	b.n	800466c <HAL_ADC_ConfigChannel+0x668>
 800465e:	bf00      	nop
 8004660:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f003 021f 	and.w	r2, r3, #31
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	3b1e      	subs	r3, #30
 800467a:	051b      	lsls	r3, r3, #20
 800467c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004680:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004686:	4619      	mov	r1, r3
 8004688:	f7ff f991 	bl	80039ae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b48      	ldr	r3, [pc, #288]	@ (80047b4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8082 	beq.w	800479e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800469a:	4847      	ldr	r0, [pc, #284]	@ (80047b8 <HAL_ADC_ConfigChannel+0x7b4>)
 800469c:	f7ff f8d2 	bl	8003844 <LL_ADC_GetCommonPathInternalCh>
 80046a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a4:	4845      	ldr	r0, [pc, #276]	@ (80047bc <HAL_ADC_ConfigChannel+0x7b8>)
 80046a6:	f7ff fa41 	bl	8003b2c <LL_ADC_IsEnabled>
 80046aa:	4604      	mov	r4, r0
 80046ac:	4844      	ldr	r0, [pc, #272]	@ (80047c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80046ae:	f7ff fa3d 	bl	8003b2c <LL_ADC_IsEnabled>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4323      	orrs	r3, r4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d15e      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a41      	ldr	r2, [pc, #260]	@ (80047c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d127      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d121      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a39      	ldr	r2, [pc, #228]	@ (80047bc <HAL_ADC_ConfigChannel+0x7b8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d161      	bne.n	800479e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e2:	4619      	mov	r1, r3
 80046e4:	4834      	ldr	r0, [pc, #208]	@ (80047b8 <HAL_ADC_ConfigChannel+0x7b4>)
 80046e6:	f7ff f89a 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ea:	4b37      	ldr	r3, [pc, #220]	@ (80047c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	4a36      	ldr	r2, [pc, #216]	@ (80047cc <HAL_ADC_ConfigChannel+0x7c8>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004702:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004704:	e002      	b.n	800470c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b01      	subs	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004712:	e044      	b.n	800479e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d113      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800471e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10d      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <HAL_ADC_ConfigChannel+0x7b8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d134      	bne.n	800479e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004738:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800473c:	4619      	mov	r1, r3
 800473e:	481e      	ldr	r0, [pc, #120]	@ (80047b8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004740:	f7ff f86d 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004744:	e02b      	b.n	800479e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <HAL_ADC_ConfigChannel+0x7d0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d126      	bne.n	800479e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d120      	bne.n	800479e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <HAL_ADC_ConfigChannel+0x7b8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d11b      	bne.n	800479e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800476a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800476e:	4619      	mov	r1, r3
 8004770:	4811      	ldr	r0, [pc, #68]	@ (80047b8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004772:	f7ff f854 	bl	800381e <LL_ADC_SetCommonPathInternalCh>
 8004776:	e012      	b.n	800479e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800478a:	e008      	b.n	800479e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80047a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	37dc      	adds	r7, #220	@ 0xdc
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}
 80047b2:	bf00      	nop
 80047b4:	80080000 	.word	0x80080000
 80047b8:	42028300 	.word	0x42028300
 80047bc:	42028000 	.word	0x42028000
 80047c0:	42028100 	.word	0x42028100
 80047c4:	c7520000 	.word	0xc7520000
 80047c8:	20000008 	.word	0x20000008
 80047cc:	053e2d63 	.word	0x053e2d63
 80047d0:	cb840000 	.word	0xcb840000
 80047d4:	80000001 	.word	0x80000001

080047d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff f99f 	bl	8003b2c <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d169      	bne.n	80048c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	4b36      	ldr	r3, [pc, #216]	@ (80048d4 <ADC_Enable+0xfc>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	f043 0210 	orr.w	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e055      	b.n	80048ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff f96e 	bl	8003b04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004828:	482b      	ldr	r0, [pc, #172]	@ (80048d8 <ADC_Enable+0x100>)
 800482a:	f7ff f80b 	bl	8003844 <LL_ADC_GetCommonPathInternalCh>
 800482e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <ADC_Enable+0x104>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <ADC_Enable+0x108>)
 8004840:	fba2 2303 	umull	r2, r3, r2, r3
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004852:	e002      	b.n	800485a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	3b01      	subs	r3, #1
 8004858:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f9      	bne.n	8004854 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004860:	f7fe ff9a 	bl	8003798 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004866:	e028      	b.n	80048ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff f95d 	bl	8003b2c <LL_ADC_IsEnabled>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff f941 	bl	8003b04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004882:	f7fe ff89 	bl	8003798 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d914      	bls.n	80048ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d00d      	beq.n	80048ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	f043 0210 	orr.w	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	f043 0201 	orr.w	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e007      	b.n	80048ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d1cf      	bne.n	8004868 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	8000003f 	.word	0x8000003f
 80048d8:	42028300 	.word	0x42028300
 80048dc:	20000008 	.word	0x20000008
 80048e0:	053e2d63 	.word	0x053e2d63

080048e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d14b      	bne.n	8004996 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d021      	beq.n	800495c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff f807 	bl	8003930 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d032      	beq.n	800498e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d12b      	bne.n	800498e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11f      	bne.n	800498e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	659a      	str	r2, [r3, #88]	@ 0x58
 800495a:	e018      	b.n	800498e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d111      	bne.n	800498e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff fb1a 	bl	8003fc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004994:	e00e      	b.n	80049b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff fb24 	bl	8003ff0 <HAL_ADC_ErrorCallback>
}
 80049a8:	e004      	b.n	80049b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff fb06 	bl	8003fdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff faf6 	bl	8003ff0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <LL_ADC_IsEnabled>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <LL_ADC_IsEnabled+0x18>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <LL_ADC_IsEnabled+0x1a>
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d101      	bne.n	8004a4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b0a1      	sub	sp, #132	@ 0x84
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e089      	b.n	8004b8a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004a82:	2300      	movs	r3, #0
 8004a84:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a42      	ldr	r2, [pc, #264]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d102      	bne.n	8004a96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a90:	4b41      	ldr	r3, [pc, #260]	@ (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e001      	b.n	8004a9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e068      	b.n	8004b8a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ffb9 	bl	8004a32 <LL_ADC_REG_IsConversionOngoing>
 8004ac0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ffb3 	bl	8004a32 <LL_ADC_REG_IsConversionOngoing>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d14a      	bne.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004ad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d147      	bne.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ad8:	4b30      	ldr	r3, [pc, #192]	@ (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004ada:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d027      	beq.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004af6:	035b      	lsls	r3, r3, #13
 8004af8:	430b      	orrs	r3, r1
 8004afa:	431a      	orrs	r2, r3
 8004afc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004afe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b00:	4824      	ldr	r0, [pc, #144]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004b02:	f7ff ff83 	bl	8004a0c <LL_ADC_IsEnabled>
 8004b06:	4604      	mov	r4, r0
 8004b08:	4823      	ldr	r0, [pc, #140]	@ (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b0a:	f7ff ff7f 	bl	8004a0c <LL_ADC_IsEnabled>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4323      	orrs	r3, r4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d132      	bne.n	8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b1e:	f023 030f 	bic.w	r3, r3, #15
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	6892      	ldr	r2, [r2, #8]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b30:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b32:	e023      	b.n	8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b40:	4814      	ldr	r0, [pc, #80]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004b42:	f7ff ff63 	bl	8004a0c <LL_ADC_IsEnabled>
 8004b46:	4604      	mov	r4, r0
 8004b48:	4813      	ldr	r0, [pc, #76]	@ (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b4a:	f7ff ff5f 	bl	8004a0c <LL_ADC_IsEnabled>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4323      	orrs	r3, r4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d112      	bne.n	8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b5e:	f023 030f 	bic.w	r3, r3, #15
 8004b62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b66:	e009      	b.n	8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b7a:	e000      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004b86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3784      	adds	r7, #132	@ 0x84
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	42028000 	.word	0x42028000
 8004b98:	42028100 	.word	0x42028100
 8004b9c:	42028300 	.word	0x42028300

08004ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bd2:	4a04      	ldr	r2, [pc, #16]	@ (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60d3      	str	r3, [r2, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bec:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <__NVIC_GetPriorityGrouping+0x18>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0307 	and.w	r3, r3, #7
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	db0b      	blt.n	8004c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	f003 021f 	and.w	r2, r3, #31
 8004c1c:	4907      	ldr	r1, [pc, #28]	@ (8004c3c <__NVIC_EnableIRQ+0x38>)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2001      	movs	r0, #1
 8004c26:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000e100 	.word	0xe000e100

08004c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db0a      	blt.n	8004c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	490c      	ldr	r1, [pc, #48]	@ (8004c8c <__NVIC_SetPriority+0x4c>)
 8004c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5e:	0152      	lsls	r2, r2, #5
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	440b      	add	r3, r1
 8004c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c68:	e00a      	b.n	8004c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4908      	ldr	r1, [pc, #32]	@ (8004c90 <__NVIC_SetPriority+0x50>)
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3b04      	subs	r3, #4
 8004c78:	0152      	lsls	r2, r2, #5
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	761a      	strb	r2, [r3, #24]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000e100 	.word	0xe000e100
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b089      	sub	sp, #36	@ 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f1c3 0307 	rsb	r3, r3, #7
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	bf28      	it	cs
 8004cb2:	2303      	movcs	r3, #3
 8004cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3303      	adds	r3, #3
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d902      	bls.n	8004cc4 <NVIC_EncodePriority+0x30>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	e000      	b.n	8004cc6 <NVIC_EncodePriority+0x32>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	43d9      	mvns	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cec:	4313      	orrs	r3, r2
         );
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3724      	adds	r7, #36	@ 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff4c 	bl	8004ba0 <__NVIC_SetPriorityGrouping>
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1e:	f7ff ff63 	bl	8004be8 <__NVIC_GetPriorityGrouping>
 8004d22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f7ff ffb3 	bl	8004c94 <NVIC_EncodePriority>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff82 	bl	8004c40 <__NVIC_SetPriority>
}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff ff56 	bl	8004c04 <__NVIC_EnableIRQ>
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e08d      	b.n	8004e8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b47      	ldr	r3, [pc, #284]	@ (8004e98 <HAL_DMA_Init+0x138>)
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d80f      	bhi.n	8004d9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b45      	ldr	r3, [pc, #276]	@ (8004e9c <HAL_DMA_Init+0x13c>)
 8004d86:	4413      	add	r3, r2
 8004d88:	4a45      	ldr	r2, [pc, #276]	@ (8004ea0 <HAL_DMA_Init+0x140>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	009a      	lsls	r2, r3, #2
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a42      	ldr	r2, [pc, #264]	@ (8004ea4 <HAL_DMA_Init+0x144>)
 8004d9a:	649a      	str	r2, [r3, #72]	@ 0x48
 8004d9c:	e00e      	b.n	8004dbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b40      	ldr	r3, [pc, #256]	@ (8004ea8 <HAL_DMA_Init+0x148>)
 8004da6:	4413      	add	r3, r2
 8004da8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea0 <HAL_DMA_Init+0x140>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	009a      	lsls	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a3c      	ldr	r2, [pc, #240]	@ (8004eac <HAL_DMA_Init+0x14c>)
 8004dba:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8004dd2:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8004dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa38 	bl	8005284 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e1c:	d102      	bne.n	8004e24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004e38:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <HAL_DMA_Init+0x104>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d80c      	bhi.n	8004e64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa58 	bl	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	e008      	b.n	8004e76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40020407 	.word	0x40020407
 8004e9c:	bffdfff8 	.word	0xbffdfff8
 8004ea0:	cccccccd 	.word	0xcccccccd
 8004ea4:	40020000 	.word	0x40020000
 8004ea8:	bffdfbf8 	.word	0xbffdfbf8
 8004eac:	40020400 	.word	0x40020400

08004eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_DMA_Start_IT+0x20>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e066      	b.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d155      	bne.n	8004f90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f97c 	bl	8005206 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 020e 	orr.w	r2, r2, #14
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e00f      	b.n	8004f48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0204 	bic.w	r2, r2, #4
 8004f36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 020a 	orr.w	r2, r2, #10
 8004f46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f64:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e005      	b.n	8004f9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc2:	f003 031c 	and.w	r3, r3, #28
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d053      	beq.n	800507a <HAL_DMA_IRQHandler+0xd4>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d04e      	beq.n	800507a <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d024      	beq.n	8005034 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	f003 021c 	and.w	r2, r3, #28
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffc:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80c0 	beq.w	8005196 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800501e:	e0ba      	b.n	8005196 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80b6 	beq.w	8005196 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005032:	e0b0      	b.n	8005196 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0204 	bic.w	r2, r2, #4
 8005050:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005056:	f003 021c 	and.w	r2, r3, #28
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505e:	2104      	movs	r1, #4
 8005060:	fa01 f202 	lsl.w	r2, r1, r2
 8005064:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8093 	beq.w	8005196 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005078:	e08d      	b.n	8005196 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507e:	f003 031c 	and.w	r3, r3, #28
 8005082:	2202      	movs	r2, #2
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04e      	beq.n	800512c <HAL_DMA_IRQHandler+0x186>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d049      	beq.n	800512c <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d018      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d108      	bne.n	80050c6 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d06e      	beq.n	800519a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80050c4:	e069      	b.n	800519a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d065      	beq.n	800519a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80050d6:	e060      	b.n	800519a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 020a 	bic.w	r2, r2, #10
 80050f4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005102:	f003 021c 	and.w	r2, r3, #28
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510a:	2102      	movs	r1, #2
 800510c:	fa01 f202 	lsl.w	r2, r1, r2
 8005110:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03b      	beq.n	800519a <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800512a:	e036      	b.n	800519a <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005130:	f003 031c 	and.w	r3, r3, #28
 8005134:	2208      	movs	r2, #8
 8005136:	409a      	lsls	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d02e      	beq.n	800519e <HAL_DMA_IRQHandler+0x1f8>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d029      	beq.n	800519e <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 020e 	bic.w	r2, r2, #14
 8005158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515e:	f003 021c 	and.w	r2, r3, #28
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005194:	e002      	b.n	800519c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800519a:	bf00      	nop
  return;
 800519c:	bf00      	nop
 800519e:	bf00      	nop
}
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b085      	sub	sp, #20
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	72fb      	strb	r3, [r7, #11]
    return status;
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	e01b      	b.n	80051fa <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00d      	beq.n	80051f0 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e003      	b.n	80051f0 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80051ee:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	601a      	str	r2, [r3, #0]

  return status;
 80051f8:	7afb      	ldrb	r3, [r7, #11]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800521c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005234:	f003 021c 	and.w	r2, r3, #28
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f202 	lsl.w	r2, r1, r2
 8005242:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b10      	cmp	r3, #16
 8005252:	d108      	bne.n	8005266 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8005264:	e007      	b.n	8005276 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005294:	429a      	cmp	r2, r3
 8005296:	d80a      	bhi.n	80052ae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052a4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ac:	e007      	b.n	80052be <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80052b8:	4413      	add	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	3b08      	subs	r3, #8
 80052c6:	4a0c      	ldr	r2, [pc, #48]	@ (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80052d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40020407 	.word	0x40020407
 80052f4:	40020820 	.word	0x40020820
 80052f8:	cccccccd 	.word	0xcccccccd
 80052fc:	40020880 	.word	0x40020880

08005300 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	461a      	mov	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a08      	ldr	r2, [pc, #32]	@ (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005322:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3b01      	subs	r3, #1
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	2201      	movs	r2, #1
 800532e:	409a      	lsls	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	1000823f 	.word	0x1000823f
 8005344:	40020940 	.word	0x40020940

08005348 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e142      	b.n	80055e0 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fd f914 	bl	800259c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0210 	bic.w	r2, r2, #16
 8005382:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005384:	f7fe fa08 	bl	8003798 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800538a:	e012      	b.n	80053b2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800538c:	f7fe fa04 	bl	8003798 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b0a      	cmp	r3, #10
 8005398:	d90b      	bls.n	80053b2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2203      	movs	r2, #3
 80053aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e116      	b.n	80055e0 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d0e5      	beq.n	800538c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d0:	f7fe f9e2 	bl	8003798 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053d6:	e012      	b.n	80053fe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80053d8:	f7fe f9de 	bl	8003798 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b0a      	cmp	r3, #10
 80053e4:	d90b      	bls.n	80053fe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ea:	f043 0201 	orr.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2203      	movs	r2, #3
 80053f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0f0      	b.n	80055e0 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0e5      	beq.n	80053d8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0202 	orr.w	r2, r2, #2
 800541a:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800541c:	4a72      	ldr	r2, [pc, #456]	@ (80055e8 <HAL_FDCAN_Init+0x2a0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7c1b      	ldrb	r3, [r3, #16]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d108      	bne.n	800543e <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543a:	619a      	str	r2, [r3, #24]
 800543c:	e007      	b.n	800544e <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800544c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	7c5b      	ldrb	r3, [r3, #17]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d108      	bne.n	8005468 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699a      	ldr	r2, [r3, #24]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005464:	619a      	str	r2, [r3, #24]
 8005466:	e007      	b.n	8005478 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005476:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	7c9b      	ldrb	r3, [r3, #18]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d108      	bne.n	8005492 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800548e:	619a      	str	r2, [r3, #24]
 8005490:	e007      	b.n	80054a2 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054a0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80054c6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0210 	bic.w	r2, r2, #16
 80054d6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d108      	bne.n	80054f2 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0204 	orr.w	r2, r2, #4
 80054ee:	619a      	str	r2, [r3, #24]
 80054f0:	e02c      	b.n	800554c <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d028      	beq.n	800554c <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d01c      	beq.n	800553c <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005510:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0210 	orr.w	r2, r2, #16
 8005520:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d110      	bne.n	800554c <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0220 	orr.w	r2, r2, #32
 8005538:	619a      	str	r2, [r3, #24]
 800553a:	e007      	b.n	800554c <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0220 	orr.w	r2, r2, #32
 800554a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	3b01      	subs	r3, #1
 8005552:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	3b01      	subs	r3, #1
 800555a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800555c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005564:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	3b01      	subs	r3, #1
 800556e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005574:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005576:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005580:	d115      	bne.n	80055ae <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	3b01      	subs	r3, #1
 800558e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005590:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	3b01      	subs	r3, #1
 8005598:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800559a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	3b01      	subs	r3, #1
 80055a4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80055aa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055ac:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f811 	bl	80055ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	4000a500 	.word	0x4000a500

080055ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80055f4:	4b27      	ldr	r3, [pc, #156]	@ (8005694 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005606:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560e:	041a      	lsls	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	061a      	lsls	r2, r3, #24
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e005      	b.n	800567a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3304      	adds	r3, #4
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3f3      	bcc.n	800566e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	4000ac00 	.word	0x4000ac00

08005698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056a6:	e158      	b.n	800595a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2101      	movs	r1, #1
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	fa01 f303 	lsl.w	r3, r1, r3
 80056b4:	4013      	ands	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 814a 	beq.w	8005954 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d005      	beq.n	80056d8 <HAL_GPIO_Init+0x40>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d130      	bne.n	800573a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2203      	movs	r2, #3
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800570e:	2201      	movs	r2, #1
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	f003 0201 	and.w	r2, r3, #1
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b03      	cmp	r3, #3
 8005744:	d017      	beq.n	8005776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d123      	bne.n	80057ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	08da      	lsrs	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3208      	adds	r2, #8
 800578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	220f      	movs	r2, #15
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	08da      	lsrs	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3208      	adds	r2, #8
 80057c4:	6939      	ldr	r1, [r7, #16]
 80057c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	2203      	movs	r2, #3
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0203 	and.w	r2, r3, #3
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80a4 	beq.w	8005954 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800580c:	4a5a      	ldr	r2, [pc, #360]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	089b      	lsrs	r3, r3, #2
 8005812:	3318      	adds	r3, #24
 8005814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005818:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	220f      	movs	r2, #15
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a52      	ldr	r2, [pc, #328]	@ (800597c <HAL_GPIO_Init+0x2e4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d025      	beq.n	8005884 <HAL_GPIO_Init+0x1ec>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a51      	ldr	r2, [pc, #324]	@ (8005980 <HAL_GPIO_Init+0x2e8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d01f      	beq.n	8005880 <HAL_GPIO_Init+0x1e8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a50      	ldr	r2, [pc, #320]	@ (8005984 <HAL_GPIO_Init+0x2ec>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d019      	beq.n	800587c <HAL_GPIO_Init+0x1e4>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a4f      	ldr	r2, [pc, #316]	@ (8005988 <HAL_GPIO_Init+0x2f0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_GPIO_Init+0x1e0>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a4e      	ldr	r2, [pc, #312]	@ (800598c <HAL_GPIO_Init+0x2f4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00d      	beq.n	8005874 <HAL_GPIO_Init+0x1dc>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a4d      	ldr	r2, [pc, #308]	@ (8005990 <HAL_GPIO_Init+0x2f8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <HAL_GPIO_Init+0x1d8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a4c      	ldr	r2, [pc, #304]	@ (8005994 <HAL_GPIO_Init+0x2fc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d101      	bne.n	800586c <HAL_GPIO_Init+0x1d4>
 8005868:	2306      	movs	r3, #6
 800586a:	e00c      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 800586c:	2307      	movs	r3, #7
 800586e:	e00a      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 8005870:	2305      	movs	r3, #5
 8005872:	e008      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 8005874:	2304      	movs	r3, #4
 8005876:	e006      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 8005878:	2303      	movs	r3, #3
 800587a:	e004      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 800587c:	2302      	movs	r3, #2
 800587e:	e002      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_GPIO_Init+0x1ee>
 8005884:	2300      	movs	r3, #0
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	f002 0203 	and.w	r2, r2, #3
 800588c:	00d2      	lsls	r2, r2, #3
 800588e:	4093      	lsls	r3, r2
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8005896:	4938      	ldr	r1, [pc, #224]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	089b      	lsrs	r3, r3, #2
 800589c:	3318      	adds	r3, #24
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058a4:	4b34      	ldr	r3, [pc, #208]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4013      	ands	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4013      	ands	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058f2:	4a21      	ldr	r2, [pc, #132]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	43db      	mvns	r3, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800591e:	4a16      	ldr	r2, [pc, #88]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8005926:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 8005928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	43db      	mvns	r3, r3
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4013      	ands	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800594c:	4a0a      	ldr	r2, [pc, #40]	@ (8005978 <HAL_GPIO_Init+0x2e0>)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3301      	adds	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f ae9f 	bne.w	80056a8 <HAL_GPIO_Init+0x10>
  }
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	4002f400 	.word	0x4002f400
 800597c:	42020000 	.word	0x42020000
 8005980:	42020400 	.word	0x42020400
 8005984:	42020800 	.word	0x42020800
 8005988:	42020c00 	.word	0x42020c00
 800598c:	42021000 	.word	0x42021000
 8005990:	42021400 	.word	0x42021400
 8005994:	42021800 	.word	0x42021800

08005998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
 80059a4:	4613      	mov	r3, r2
 80059a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059a8:	787b      	ldrb	r3, [r7, #1]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059b4:	e002      	b.n	80059bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059da:	887a      	ldrh	r2, [r7, #2]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4013      	ands	r3, r2
 80059e0:	041a      	lsls	r2, r3, #16
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	43d9      	mvns	r1, r3
 80059e6:	887b      	ldrh	r3, [r7, #2]
 80059e8:	400b      	ands	r3, r1
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	619a      	str	r2, [r3, #24]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005a08:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
 8005a18:	e007      	b.n	8005a2a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005a1a:	4b07      	ldr	r3, [pc, #28]	@ (8005a38 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 0204 	bic.w	r2, r3, #4
 8005a22:	4905      	ldr	r1, [pc, #20]	@ (8005a38 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40030400 	.word	0x40030400

08005a3c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <HAL_ICACHE_Enable+0x1c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a04      	ldr	r2, [pc, #16]	@ (8005a58 <HAL_ICACHE_Enable+0x1c>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40030400 	.word	0x40030400

08005a5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0c0      	b.n	8005bf0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f00c fb9e 	bl	80121c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f005 fb5a 	bl	800b14e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
 8005a9e:	e03e      	b.n	8005b1e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	3311      	adds	r3, #17
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3310      	adds	r3, #16
 8005ac4:	7bfa      	ldrb	r2, [r7, #15]
 8005ac6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ac8:	7bfa      	ldrb	r2, [r7, #15]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3313      	adds	r3, #19
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	3320      	adds	r3, #32
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005af0:	7bfa      	ldrb	r2, [r7, #15]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	440b      	add	r3, r1
 8005afe:	3324      	adds	r3, #36	@ 0x24
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	440b      	add	r3, r1
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d3bb      	bcc.n	8005aa0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	e044      	b.n	8005bb8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b2e:	7bfa      	ldrb	r2, [r7, #15]
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b44:	7bfa      	ldrb	r2, [r7, #15]
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b56:	7bfa      	ldrb	r2, [r7, #15]
 8005b58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	440b      	add	r3, r1
 8005b68:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b70:	7bfa      	ldrb	r2, [r7, #15]
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	440b      	add	r3, r1
 8005b7e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b86:	7bfa      	ldrb	r2, [r7, #15]
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	440b      	add	r3, r1
 8005b94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b9c:	7bfa      	ldrb	r2, [r7, #15]
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	440b      	add	r3, r1
 8005baa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	791b      	ldrb	r3, [r3, #4]
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d3b5      	bcc.n	8005b2e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005bce:	f005 fad9 	bl	800b184 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	7a9b      	ldrb	r3, [r3, #10]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d102      	bne.n	8005bee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 fc40 	bl	800746e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_PCD_Start+0x16>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e012      	b.n	8005c34 <HAL_PCD_Start+0x3c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f005 fa80 	bl	800b120 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f007 fd41 	bl	800d6ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f007 fd46 	bl	800d6da <USB_ReadInterrupts>
 8005c4e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fb04 	bl	8006268 <PCD_EP_ISR_Handler>

    return;
 8005c60:	e110      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d013      	beq.n	8005c94 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f00c fb3e 	bl	8012306 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8fc 	bl	8005e8a <HAL_PCD_SetAddress>

    return;
 8005c92:	e0f7      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005cb6:	e0e5      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005cda:	e0d3      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d034      	beq.n	8005d50 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0204 	bic.w	r2, r2, #4
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0208 	bic.w	r2, r2, #8
 8005d10:	b292      	uxth	r2, r2
 8005d12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d107      	bne.n	8005d30 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f00c fce0 	bl	80126f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f00c fb21 	bl	8012378 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d4e:	e099      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d027      	beq.n	8005daa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0208 	orr.w	r2, r2, #8
 8005d6c:	b292      	uxth	r2, r2
 8005d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d84:	b292      	uxth	r2, r2
 8005d86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0204 	orr.w	r2, r2, #4
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f00c face 	bl	8012344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005da8:	e06c      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d040      	beq.n	8005e36 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d12b      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0204 	orr.w	r2, r2, #4
 8005de8:	b292      	uxth	r2, r2
 8005dea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0208 	orr.w	r2, r2, #8
 8005e00:	b292      	uxth	r2, r2
 8005e02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e24:	2101      	movs	r1, #1
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f00c fc62 	bl	80126f0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005e2c:	e02a      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f00c fa88 	bl	8012344 <HAL_PCD_SuspendCallback>
    return;
 8005e34:	e026      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00f      	beq.n	8005e60 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e52:	b292      	uxth	r2, r2
 8005e54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f00c fa46 	bl	80122ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e5e:	e011      	b.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005e82:	bf00      	nop
  }
}
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_PCD_SetAddress+0x1a>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e012      	b.n	8005eca <HAL_PCD_SetAddress+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	78fa      	ldrb	r2, [r7, #3]
 8005eb0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f007 fbe2 	bl	800d684 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	4608      	mov	r0, r1
 8005edc:	4611      	mov	r1, r2
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	70fb      	strb	r3, [r7, #3]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	803b      	strh	r3, [r7, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	da0e      	bge.n	8005f16 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	f003 0207 	and.w	r2, r3, #7
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	3310      	adds	r3, #16
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	705a      	strb	r2, [r3, #1]
 8005f14:	e00e      	b.n	8005f34 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 0207 	and.w	r2, r3, #7
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f40:	883a      	ldrh	r2, [r7, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	78ba      	ldrb	r2, [r7, #2]
 8005f4a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f4c:	78bb      	ldrb	r3, [r7, #2]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d102      	bne.n	8005f58 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_PCD_EP_Open+0x94>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e00e      	b.n	8005f84 <HAL_PCD_EP_Open+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f005 f923 	bl	800b1c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005f82:	7afb      	ldrb	r3, [r7, #11]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	da0e      	bge.n	8005fbe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 0207 	and.w	r2, r3, #7
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	3310      	adds	r3, #16
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	705a      	strb	r2, [r3, #1]
 8005fbc:	e00e      	b.n	8005fdc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fbe:	78fb      	ldrb	r3, [r7, #3]
 8005fc0:	f003 0207 	and.w	r2, r3, #7
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_PCD_EP_Close+0x6a>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e00e      	b.n	8006014 <HAL_PCD_EP_Close+0x88>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	4618      	mov	r0, r3
 8006006:	f005 fc9f 	bl	800b948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	460b      	mov	r3, r1
 800602a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800602c:	7afb      	ldrb	r3, [r7, #11]
 800602e:	f003 0207 	and.w	r2, r3, #7
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2200      	movs	r2, #0
 8006054:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800605c:	7afb      	ldrb	r3, [r7, #11]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	b2da      	uxtb	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	4618      	mov	r0, r3
 8006070:	f005 fe57 	bl	800bd22 <USB_EPStartXfer>

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 0207 	and.w	r2, r3, #7
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	440b      	add	r3, r1
 800609c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80060a0:	681b      	ldr	r3, [r3, #0]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	460b      	mov	r3, r1
 80060bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	f003 0207 	and.w	r2, r3, #7
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	3310      	adds	r3, #16
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2201      	movs	r2, #1
 80060f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6979      	ldr	r1, [r7, #20]
 800610c:	4618      	mov	r0, r3
 800610e:	f005 fe08 	bl	800bd22 <USB_EPStartXfer>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	7912      	ldrb	r2, [r2, #4]
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e03e      	b.n	80061b8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800613a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800613e:	2b00      	cmp	r3, #0
 8006140:	da0e      	bge.n	8006160 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	f003 0207 	and.w	r2, r3, #7
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	3310      	adds	r3, #16
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	705a      	strb	r2, [r3, #1]
 800615e:	e00c      	b.n	800617a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_PCD_EP_SetStall+0x7e>
 8006196:	2302      	movs	r3, #2
 8006198:	e00e      	b.n	80061b8 <HAL_PCD_EP_SetStall+0x9c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f007 f96c 	bl	800d486 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	7912      	ldrb	r2, [r2, #4]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e040      	b.n	8006260 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da0e      	bge.n	8006204 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	f003 0207 	and.w	r2, r3, #7
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	3310      	adds	r3, #16
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	705a      	strb	r2, [r3, #1]
 8006202:	e00e      	b.n	8006222 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	f003 0207 	and.w	r2, r3, #7
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_PCD_EP_ClrStall+0x82>
 800623e:	2302      	movs	r3, #2
 8006240:	e00e      	b.n	8006260 <HAL_PCD_EP_ClrStall+0xa0>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	4618      	mov	r0, r3
 8006252:	f007 f969 	bl	800d528 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b096      	sub	sp, #88	@ 0x58
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006270:	e3ad      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800627a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800627e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800628c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 816f 	bne.w	8006574 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006296:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d14c      	bne.n	800633c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	81fb      	strh	r3, [r7, #14]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	89fb      	ldrh	r3, [r7, #14]
 80062ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3310      	adds	r3, #16
 80062ca:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4413      	add	r3, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80062f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	441a      	add	r2, r3
 80062fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006300:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006302:	2100      	movs	r1, #0
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f00b ffd6 	bl	80122b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	7b1b      	ldrb	r3, [r3, #12]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 835c 	beq.w	80069ce <PCD_EP_ISR_Handler+0x766>
 8006316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8357 	bne.w	80069ce <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7b1b      	ldrb	r3, [r3, #12]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800632a:	b2da      	uxtb	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	731a      	strb	r2, [r3, #12]
 800633a:	e348      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006342:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800634e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006356:	2b00      	cmp	r3, #0
 8006358:	d032      	beq.n	80063c0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	4413      	add	r3, r2
 8006374:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800637e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006380:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800638c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800638e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006392:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006394:	b29b      	uxth	r3, r3
 8006396:	f007 f9f3 	bl	800d780 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80063a6:	4013      	ands	r3, r2
 80063a8:	823b      	strh	r3, [r7, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	8a3a      	ldrh	r2, [r7, #16]
 80063b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063b4:	b292      	uxth	r2, r2
 80063b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f00b ff4f 	bl	801225c <HAL_PCD_SetupStageCallback>
 80063be:	e306      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f280 8302 	bge.w	80069ce <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80063d6:	4013      	ands	r3, r2
 80063d8:	83fb      	strh	r3, [r7, #30]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	8bfa      	ldrh	r2, [r7, #30]
 80063e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063e4:	b292      	uxth	r2, r2
 80063e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4413      	add	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	4413      	add	r3, r2
 8006402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800640c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d019      	beq.n	800644c <PCD_EP_ISR_Handler+0x1e4>
 8006418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006426:	6959      	ldr	r1, [r3, #20]
 8006428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800642c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006430:	b29b      	uxth	r3, r3
 8006432:	f007 f9a5 	bl	800d780 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	441a      	add	r2, r3
 8006440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006442:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f00b ff1a 	bl	8012280 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006456:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800645a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 82b5 	bne.w	80069ce <PCD_EP_ISR_Handler+0x766>
 8006464:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006468:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800646c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006470:	f000 82ad 	beq.w	80069ce <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006482:	b29b      	uxth	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	4413      	add	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800649e:	b29a      	uxth	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <PCD_EP_ISR_Handler+0x25a>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e039      	b.n	8006536 <PCD_EP_ISR_Handler+0x2ce>
 80064c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80064c8:	d818      	bhi.n	80064fc <PCD_EP_ISR_Handler+0x294>
 80064ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <PCD_EP_ISR_Handler+0x27c>
 80064de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064e0:	3301      	adds	r3, #1
 80064e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	e01c      	b.n	8006536 <PCD_EP_ISR_Handler+0x2ce>
 80064fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	647b      	str	r3, [r7, #68]	@ 0x44
 8006504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <PCD_EP_ISR_Handler+0x2ae>
 8006510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006512:	3b01      	subs	r3, #1
 8006514:	647b      	str	r3, [r7, #68]	@ 0x44
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29a      	uxth	r2, r3
 800651c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651e:	b29b      	uxth	r3, r3
 8006520:	029b      	lsls	r3, r3, #10
 8006522:	b29b      	uxth	r3, r3
 8006524:	4313      	orrs	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006530:	b29a      	uxth	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006546:	827b      	strh	r3, [r7, #18]
 8006548:	8a7b      	ldrh	r3, [r7, #18]
 800654a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800654e:	827b      	strh	r3, [r7, #18]
 8006550:	8a7b      	ldrh	r3, [r7, #18]
 8006552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006556:	827b      	strh	r3, [r7, #18]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	8a7b      	ldrh	r3, [r7, #18]
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]
 8006572:	e22c      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006588:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800658c:	2b00      	cmp	r3, #0
 800658e:	f280 80f6 	bge.w	800677e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80065a8:	4013      	ands	r3, r2
 80065aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80065c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065c4:	b292      	uxth	r2, r2
 80065c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80065c8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80065de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e0:	7b1b      	ldrb	r3, [r3, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d123      	bne.n	800662e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	4413      	add	r3, r2
 8006600:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800660a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800660e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 808e 	beq.w	8006734 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661e:	6959      	ldr	r1, [r3, #20]
 8006620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006622:	88da      	ldrh	r2, [r3, #6]
 8006624:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006628:	f007 f8aa 	bl	800d780 <USB_ReadPMA>
 800662c:	e082      	b.n	8006734 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800662e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006630:	78db      	ldrb	r3, [r3, #3]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d10a      	bne.n	800664c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006636:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800663a:	461a      	mov	r2, r3
 800663c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9d3 	bl	80069ea <HAL_PCD_EP_DB_Receive>
 8006644:	4603      	mov	r3, r0
 8006646:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800664a:	e073      	b.n	8006734 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006688:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d022      	beq.n	80066f0 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4413      	add	r3, r2
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	4413      	add	r3, r2
 80066c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80066d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d02c      	beq.n	8006734 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e0:	6959      	ldr	r1, [r3, #20]
 80066e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e4:	891a      	ldrh	r2, [r3, #8]
 80066e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80066ea:	f007 f849 	bl	800d780 <USB_ReadPMA>
 80066ee:	e021      	b.n	8006734 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	4413      	add	r3, r2
 800670a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006714:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006718:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006726:	6959      	ldr	r1, [r3, #20]
 8006728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800672a:	895a      	ldrh	r2, [r3, #10]
 800672c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006730:	f007 f826 	bl	800d780 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800673c:	441a      	add	r2, r3
 800673e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006740:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800674a:	441a      	add	r2, r3
 800674c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800674e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <PCD_EP_ISR_Handler+0x4fc>
 8006758:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800675c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	429a      	cmp	r2, r3
 8006762:	d206      	bcs.n	8006772 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f00b fd88 	bl	8012280 <HAL_PCD_DataOutStageCallback>
 8006770:	e005      	b.n	800677e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006778:	4618      	mov	r0, r3
 800677a:	f005 fad2 	bl	800bd22 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800677e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8121 	beq.w	80069ce <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800678c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	3310      	adds	r3, #16
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80067dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067de:	78db      	ldrb	r3, [r3, #3]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f040 80a2 	bne.w	800692a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80067e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e8:	2200      	movs	r2, #0
 80067ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80067ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ee:	7b1b      	ldrb	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8093 	beq.w	800691c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80067fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d046      	beq.n	8006890 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d126      	bne.n	8006858 <PCD_EP_ISR_Handler+0x5f0>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	4413      	add	r3, r2
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24
 8006822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	00da      	lsls	r2, r3, #3
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	4413      	add	r3, r2
 800682c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800683c:	b29a      	uxth	r2, r3
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006850:	b29a      	uxth	r2, r3
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e061      	b.n	800691c <PCD_EP_ISR_Handler+0x6b4>
 8006858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d15d      	bne.n	800691c <PCD_EP_ISR_Handler+0x6b4>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	4413      	add	r3, r2
 8006876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	00da      	lsls	r2, r3, #3
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	4413      	add	r3, r2
 8006882:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	2200      	movs	r2, #0
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	e045      	b.n	800691c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d126      	bne.n	80068ec <PCD_EP_ISR_Handler+0x684>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b2:	4413      	add	r3, r2
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	00da      	lsls	r2, r3, #3
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	4413      	add	r3, r2
 80068c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e017      	b.n	800691c <PCD_EP_ISR_Handler+0x6b4>
 80068ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d113      	bne.n	800691c <PCD_EP_ISR_Handler+0x6b4>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006902:	4413      	add	r3, r2
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	00da      	lsls	r2, r3, #3
 800690c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690e:	4413      	add	r3, r2
 8006910:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006918:	2200      	movs	r2, #0
 800691a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800691c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f00b fcc7 	bl	80122b6 <HAL_PCD_DataInStageCallback>
 8006928:	e051      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800692a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d144      	bne.n	80069c0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4413      	add	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	4413      	add	r3, r2
 8006950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800695e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006966:	429a      	cmp	r2, r3
 8006968:	d907      	bls.n	800697a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800696a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	619a      	str	r2, [r3, #24]
 8006978:	e002      	b.n	8006980 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800697a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697c:	2200      	movs	r2, #0
 800697e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f00b fc91 	bl	80122b6 <HAL_PCD_DataInStageCallback>
 8006994:	e01b      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800699e:	441a      	add	r2, r3
 80069a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80069a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069ac:	441a      	add	r2, r3
 80069ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069b8:	4618      	mov	r0, r3
 80069ba:	f005 f9b2 	bl	800bd22 <USB_EPStartXfer>
 80069be:	e006      	b.n	80069ce <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80069c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80069c4:	461a      	mov	r2, r3
 80069c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f917 	bl	8006bfc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b21b      	sxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f6ff ac49 	blt.w	8006272 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3758      	adds	r7, #88	@ 0x58
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b088      	sub	sp, #32
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d07c      	beq.n	8006afc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	8b7b      	ldrh	r3, [r7, #26]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d306      	bcc.n	8006a40 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	8b7b      	ldrh	r3, [r7, #26]
 8006a38:	1ad2      	subs	r2, r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	619a      	str	r2, [r3, #24]
 8006a3e:	e002      	b.n	8006a46 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d123      	bne.n	8006a96 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a68:	833b      	strh	r3, [r7, #24]
 8006a6a:	8b3b      	ldrh	r3, [r7, #24]
 8006a6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a70:	833b      	strh	r3, [r7, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	8b3b      	ldrh	r3, [r7, #24]
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01f      	beq.n	8006ae0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aba:	82fb      	strh	r3, [r7, #22]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ae0:	8b7b      	ldrh	r3, [r7, #26]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 8085 	beq.w	8006bf2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6959      	ldr	r1, [r3, #20]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	891a      	ldrh	r2, [r3, #8]
 8006af4:	8b7b      	ldrh	r3, [r7, #26]
 8006af6:	f006 fe43 	bl	800d780 <USB_ReadPMA>
 8006afa:	e07a      	b.n	8006bf2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	8b7b      	ldrh	r3, [r7, #26]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d306      	bcc.n	8006b3a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	8b7b      	ldrh	r3, [r7, #26]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	619a      	str	r2, [r3, #24]
 8006b38:	e002      	b.n	8006b40 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d123      	bne.n	8006b90 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b62:	83fb      	strh	r3, [r7, #30]
 8006b64:	8bfb      	ldrh	r3, [r7, #30]
 8006b66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b6a:	83fb      	strh	r3, [r7, #30]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	8bfb      	ldrh	r3, [r7, #30]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11f      	bne.n	8006bda <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb4:	83bb      	strh	r3, [r7, #28]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	8bbb      	ldrh	r3, [r7, #28]
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006bda:	8b7b      	ldrh	r3, [r7, #26]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6959      	ldr	r1, [r3, #20]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	895a      	ldrh	r2, [r3, #10]
 8006bec:	8b7b      	ldrh	r3, [r7, #26]
 8006bee:	f006 fdc7 	bl	800d780 <USB_ReadPMA>
    }
  }

  return count;
 8006bf2:	8b7b      	ldrh	r3, [r7, #26]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3720      	adds	r7, #32
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b0a4      	sub	sp, #144	@ 0x90
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 81db 	beq.w	8006fcc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4413      	add	r3, r2
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d907      	bls.n	8006c5a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	619a      	str	r2, [r3, #24]
 8006c58:	e002      	b.n	8006c60 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 80b9 	bne.w	8006ddc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d126      	bne.n	8006cc0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	4413      	add	r3, r2
 8006c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	00da      	lsls	r2, r3, #3
 8006c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c92:	4413      	add	r3, r2
 8006c94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	e01a      	b.n	8006cf6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d116      	bne.n	8006cf6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	4413      	add	r3, r2
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	00da      	lsls	r2, r3, #3
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d126      	bne.n	8006d52 <HAL_PCD_EP_DB_Transmit+0x156>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00da      	lsls	r2, r3, #3
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e017      	b.n	8006d82 <HAL_PCD_EP_DB_Transmit+0x186>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d113      	bne.n	8006d82 <HAL_PCD_EP_DB_Transmit+0x186>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	4413      	add	r3, r2
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	00da      	lsls	r2, r3, #3
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f00b fa94 	bl	80122b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 82fa 	beq.w	800738e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db4:	82fb      	strh	r3, [r7, #22]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	8afb      	ldrh	r3, [r7, #22]
 8006dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]
 8006dda:	e2d8      	b.n	800738e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d021      	beq.n	8006e2a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	441a      	add	r2, r3
 8006e12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	f040 82ac 	bne.w	800738e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006e3e:	441a      	add	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d30b      	bcc.n	8006e76 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	621a      	str	r2, [r3, #32]
 8006e74:	e017      	b.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006e7e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e8e:	e00a      	b.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d165      	bne.n	8006f7a <HAL_PCD_EP_DB_Transmit+0x37e>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec2:	4413      	add	r3, r2
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	00da      	lsls	r2, r3, #3
 8006ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ece:	4413      	add	r3, r2
 8006ed0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <HAL_PCD_EP_DB_Transmit+0x308>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	801a      	strh	r2, [r3, #0]
 8006f02:	e057      	b.n	8006fb4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f08:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f0a:	d818      	bhi.n	8006f3e <HAL_PCD_EP_DB_Transmit+0x342>
 8006f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_PCD_EP_DB_Transmit+0x32a>
 8006f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f22:	3301      	adds	r3, #1
 8006f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	029b      	lsls	r3, r3, #10
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4313      	orrs	r3, r2
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e03a      	b.n	8006fb4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <HAL_PCD_EP_DB_Transmit+0x35c>
 8006f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f54:	3b01      	subs	r3, #1
 8006f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e01c      	b.n	8006fb4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d118      	bne.n	8006fb4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f96:	4413      	add	r3, r2
 8006f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	00da      	lsls	r2, r3, #3
 8006fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6959      	ldr	r1, [r3, #20]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	891a      	ldrh	r2, [r3, #8]
 8006fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f006 fb98 	bl	800d6fa <USB_WritePMA>
 8006fca:	e1e0      	b.n	800738e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4413      	add	r3, r2
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d307      	bcc.n	8007010 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	619a      	str	r2, [r3, #24]
 800700e:	e002      	b.n	8007016 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 80c0 	bne.w	80071a0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d126      	bne.n	8007076 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007036:	b29b      	uxth	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800703c:	4413      	add	r3, r2
 800703e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	00da      	lsls	r2, r3, #3
 8007046:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007048:	4413      	add	r3, r2
 800704a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800704e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800705a:	b29a      	uxth	r2, r3
 800705c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706e:	b29a      	uxth	r2, r3
 8007070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e01a      	b.n	80070ac <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d116      	bne.n	80070ac <HAL_PCD_EP_DB_Transmit+0x4b0>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	667b      	str	r3, [r7, #100]	@ 0x64
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007092:	4413      	add	r3, r2
 8007094:	667b      	str	r3, [r7, #100]	@ 0x64
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00da      	lsls	r2, r3, #3
 800709c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800709e:	4413      	add	r3, r2
 80070a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070a8:	2200      	movs	r2, #0
 80070aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d12b      	bne.n	8007112 <HAL_PCD_EP_DB_Transmit+0x516>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ce:	4413      	add	r3, r2
 80070d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	00da      	lsls	r2, r3, #3
 80070d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070da:	4413      	add	r3, r2
 80070dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007108:	b29a      	uxth	r2, r3
 800710a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e017      	b.n	8007142 <HAL_PCD_EP_DB_Transmit+0x546>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d113      	bne.n	8007142 <HAL_PCD_EP_DB_Transmit+0x546>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007122:	b29b      	uxth	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007128:	4413      	add	r3, r2
 800712a:	677b      	str	r3, [r7, #116]	@ 0x74
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	00da      	lsls	r2, r3, #3
 8007132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007134:	4413      	add	r3, r2
 8007136:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800713a:	673b      	str	r3, [r7, #112]	@ 0x70
 800713c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800713e:	2200      	movs	r2, #0
 8007140:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f00b f8b4 	bl	80122b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 811a 	bne.w	800738e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007174:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800718a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007192:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719a:	b29b      	uxth	r3, r3
 800719c:	8013      	strh	r3, [r2, #0]
 800719e:	e0f6      	b.n	800738e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d121      	bne.n	80071ee <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80071da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	f040 80ca 	bne.w	800738e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	695a      	ldr	r2, [r3, #20]
 80071fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007202:	441a      	add	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007210:	441a      	add	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	429a      	cmp	r2, r3
 8007220:	d30b      	bcc.n	800723a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	621a      	str	r2, [r3, #32]
 8007238:	e017      	b.n	800726a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007242:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007252:	e00a      	b.n	800726a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d165      	bne.n	8007344 <HAL_PCD_EP_DB_Transmit+0x748>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007286:	b29b      	uxth	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800728c:	4413      	add	r3, r2
 800728e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	00da      	lsls	r2, r3, #3
 8007296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007298:	4413      	add	r3, r2
 800729a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800729e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <HAL_PCD_EP_DB_Transmit+0x6d2>
 80072b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e054      	b.n	8007378 <HAL_PCD_EP_DB_Transmit+0x77c>
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80072d4:	d818      	bhi.n	8007308 <HAL_PCD_EP_DB_Transmit+0x70c>
 80072d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80072ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ec:	3301      	adds	r3, #1
 80072ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	029b      	lsls	r3, r3, #10
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b29a      	uxth	r2, r3
 8007302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007304:	801a      	strh	r2, [r3, #0]
 8007306:	e037      	b.n	8007378 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <HAL_PCD_EP_DB_Transmit+0x726>
 800731c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800731e:	3b01      	subs	r3, #1
 8007320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29a      	uxth	r2, r3
 8007328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800732a:	b29b      	uxth	r3, r3
 800732c:	029b      	lsls	r3, r3, #10
 800732e:	b29b      	uxth	r3, r3
 8007330:	4313      	orrs	r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e019      	b.n	8007378 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d115      	bne.n	8007378 <HAL_PCD_EP_DB_Transmit+0x77c>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800735a:	4413      	add	r3, r2
 800735c:	657b      	str	r3, [r7, #84]	@ 0x54
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	00da      	lsls	r2, r3, #3
 8007364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007366:	4413      	add	r3, r2
 8007368:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800736c:	653b      	str	r3, [r7, #80]	@ 0x50
 800736e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007372:	b29a      	uxth	r2, r3
 8007374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007376:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6959      	ldr	r1, [r3, #20]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	895a      	ldrh	r2, [r3, #10]
 8007384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007388:	b29b      	uxth	r3, r3
 800738a:	f006 f9b6 	bl	800d6fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a8:	82bb      	strh	r3, [r7, #20]
 80073aa:	8abb      	ldrh	r3, [r7, #20]
 80073ac:	f083 0310 	eor.w	r3, r3, #16
 80073b0:	82bb      	strh	r3, [r7, #20]
 80073b2:	8abb      	ldrh	r3, [r7, #20]
 80073b4:	f083 0320 	eor.w	r3, r3, #32
 80073b8:	82bb      	strh	r3, [r7, #20]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	8abb      	ldrh	r3, [r7, #20]
 80073ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073da:	b29b      	uxth	r3, r3
 80073dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3790      	adds	r7, #144	@ 0x90
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	817b      	strh	r3, [r7, #10]
 80073f6:	4613      	mov	r3, r2
 80073f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80073fa:	897b      	ldrh	r3, [r7, #10]
 80073fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007406:	897b      	ldrh	r3, [r7, #10]
 8007408:	f003 0207 	and.w	r2, r3, #7
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	3310      	adds	r3, #16
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e009      	b.n	8007432 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800741e:	897a      	ldrh	r2, [r7, #10]
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007432:	893b      	ldrh	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2200      	movs	r2, #0
 800743c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	b29a      	uxth	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	80da      	strh	r2, [r3, #6]
 8007446:	e00b      	b.n	8007460 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2201      	movs	r2, #1
 800744c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	b29a      	uxth	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	b29a      	uxth	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007492:	b29b      	uxth	r3, r3
 8007494:	f043 0301 	orr.w	r3, r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a04      	ldr	r2, [pc, #16]	@ (80074e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074d2:	6013      	str	r3, [r2, #0]
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40007000 	.word	0x40007000

080074e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80074e8:	4b04      	ldr	r3, [pc, #16]	@ (80074fc <HAL_PWREx_GetVoltageRange+0x18>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40007000 	.word	0x40007000

08007500 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8007508:	4b27      	ldr	r3, [pc, #156]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007510:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8007512:	f000 f871 	bl	80075f8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8007516:	4603      	mov	r3, r0
 8007518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751c:	d101      	bne.n	8007522 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e03e      	b.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8007522:	4b21      	ldr	r3, [pc, #132]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800752a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800752e:	d101      	bne.n	8007534 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e035      	b.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d101      	bne.n	8007540 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e02f      	b.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007540:	4b19      	ldr	r3, [pc, #100]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007548:	4917      	ldr	r1, [pc, #92]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4313      	orrs	r3, r2
 800754e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8007550:	4b16      	ldr	r3, [pc, #88]	@ (80075ac <HAL_PWREx_ControlVoltageScaling+0xac>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	4a16      	ldr	r2, [pc, #88]	@ (80075b0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	09db      	lsrs	r3, r3, #7
 800755e:	2232      	movs	r2, #50	@ 0x32
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	4a13      	ldr	r2, [pc, #76]	@ (80075b4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	08db      	lsrs	r3, r3, #3
 800756c:	3301      	adds	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007570:	e002      	b.n	8007578 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b01      	subs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007578:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007584:	d102      	bne.n	800758c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f2      	bne.n	8007572 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800758c:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007598:	d101      	bne.n	800759e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e000      	b.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40007000 	.word	0x40007000
 80075ac:	20000008 	.word	0x20000008
 80075b0:	0a7c5ac5 	.word	0x0a7c5ac5
 80075b4:	cccccccd 	.word	0xcccccccd

080075b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a04      	ldr	r2, [pc, #16]	@ (80075d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80075c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80075c6:	6053      	str	r3, [r2, #4]
}
 80075c8:	bf00      	nop
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40007000 	.word	0x40007000

080075d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a04      	ldr	r2, [pc, #16]	@ (80075f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80075e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075e6:	6093      	str	r3, [r2, #8]
}
 80075e8:	bf00      	nop
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40007000 	.word	0x40007000

080075f8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80075fe:	4b0f      	ldr	r3, [pc, #60]	@ (800763c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800760e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	e00a      	b.n	800762c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8007620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007624:	607b      	str	r3, [r7, #4]
 8007626:	e001      	b.n	800762c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8007628:	2300      	movs	r3, #0
 800762a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800762c:	687b      	ldr	r3, [r7, #4]
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40007000 	.word	0x40007000

08007640 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f000 bcc2 	b.w	8007fd8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007654:	4b99      	ldr	r3, [pc, #612]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 030c 	and.w	r3, r3, #12
 800765c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800765e:	4b97      	ldr	r3, [pc, #604]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 80e9 	beq.w	8007848 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d006      	beq.n	800768a <HAL_RCC_OscConfig+0x4a>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b0c      	cmp	r3, #12
 8007680:	f040 8083 	bne.w	800778a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d17f      	bne.n	800778a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800768a:	4b8c      	ldr	r3, [pc, #560]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <HAL_RCC_OscConfig+0x64>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f000 bc9a 	b.w	8007fd8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076a8:	4b84      	ldr	r3, [pc, #528]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <HAL_RCC_OscConfig+0x7e>
 80076b4:	4b81      	ldr	r3, [pc, #516]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076bc:	e005      	b.n	80076ca <HAL_RCC_OscConfig+0x8a>
 80076be:	4b7f      	ldr	r3, [pc, #508]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d224      	bcs.n	8007718 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 feb8 	bl	8008448 <RCC_SetFlashLatencyFromMSIRange>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f000 bc7a 	b.w	8007fd8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076e4:	4b75      	ldr	r3, [pc, #468]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a74      	ldr	r2, [pc, #464]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076ea:	f043 0308 	orr.w	r3, r3, #8
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	4b72      	ldr	r3, [pc, #456]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fc:	496f      	ldr	r1, [pc, #444]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007702:	4b6e      	ldr	r3, [pc, #440]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	496a      	ldr	r1, [pc, #424]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	604b      	str	r3, [r1, #4]
 8007716:	e026      	b.n	8007766 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007718:	4b68      	ldr	r3, [pc, #416]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a67      	ldr	r2, [pc, #412]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800771e:	f043 0308 	orr.w	r3, r3, #8
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	4b65      	ldr	r3, [pc, #404]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	4962      	ldr	r1, [pc, #392]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007736:	4b61      	ldr	r3, [pc, #388]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	495d      	ldr	r1, [pc, #372]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007746:	4313      	orrs	r3, r2
 8007748:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fe77 	bl	8008448 <RCC_SetFlashLatencyFromMSIRange>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f000 bc39 	b.w	8007fd8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007766:	f000 fe15 	bl	8008394 <HAL_RCC_GetHCLKFreq>
 800776a:	4603      	mov	r3, r0
 800776c:	4a54      	ldr	r2, [pc, #336]	@ (80078c0 <HAL_RCC_OscConfig+0x280>)
 800776e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007770:	4b54      	ldr	r3, [pc, #336]	@ (80078c4 <HAL_RCC_OscConfig+0x284>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f7fb fb6f 	bl	8002e58 <HAL_InitTick>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d060      	beq.n	8007846 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	f000 bc27 	b.w	8007fd8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d039      	beq.n	8007806 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007792:	4b4a      	ldr	r3, [pc, #296]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a49      	ldr	r2, [pc, #292]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800779e:	f7fb fffb 	bl	8003798 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077a4:	e00f      	b.n	80077c6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077a6:	f7fb fff7 	bl	8003798 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d908      	bls.n	80077c6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077b4:	4b41      	ldr	r3, [pc, #260]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	f000 bc09 	b.w	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077c6:	4b3d      	ldr	r3, [pc, #244]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0e9      	beq.n	80077a6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077d2:	4b3a      	ldr	r3, [pc, #232]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a39      	ldr	r2, [pc, #228]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077d8:	f043 0308 	orr.w	r3, r3, #8
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	4b37      	ldr	r3, [pc, #220]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	4934      	ldr	r1, [pc, #208]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077f0:	4b32      	ldr	r3, [pc, #200]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	492f      	ldr	r1, [pc, #188]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007800:	4313      	orrs	r3, r2
 8007802:	604b      	str	r3, [r1, #4]
 8007804:	e020      	b.n	8007848 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007806:	4b2d      	ldr	r3, [pc, #180]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2c      	ldr	r2, [pc, #176]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007812:	f7fb ffc1 	bl	8003798 <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007818:	e00e      	b.n	8007838 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800781a:	f7fb ffbd 	bl	8003798 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d907      	bls.n	8007838 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007828:	4b24      	ldr	r3, [pc, #144]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e3cf      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007838:	4b20      	ldr	r3, [pc, #128]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1ea      	bne.n	800781a <HAL_RCC_OscConfig+0x1da>
 8007844:	e000      	b.n	8007848 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007846:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d07e      	beq.n	8007952 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d005      	beq.n	8007866 <HAL_RCC_OscConfig+0x226>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b0c      	cmp	r3, #12
 800785e:	d10e      	bne.n	800787e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d10b      	bne.n	800787e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007866:	4b15      	ldr	r3, [pc, #84]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d06e      	beq.n	8007950 <HAL_RCC_OscConfig+0x310>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d16a      	bne.n	8007950 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e3ac      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007886:	d106      	bne.n	8007896 <HAL_RCC_OscConfig+0x256>
 8007888:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a0b      	ldr	r2, [pc, #44]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 800788e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	e024      	b.n	80078e0 <HAL_RCC_OscConfig+0x2a0>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800789e:	d113      	bne.n	80078c8 <HAL_RCC_OscConfig+0x288>
 80078a0:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a05      	ldr	r2, [pc, #20]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80078a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	4b03      	ldr	r3, [pc, #12]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a02      	ldr	r2, [pc, #8]	@ (80078bc <HAL_RCC_OscConfig+0x27c>)
 80078b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e012      	b.n	80078e0 <HAL_RCC_OscConfig+0x2a0>
 80078ba:	bf00      	nop
 80078bc:	40021000 	.word	0x40021000
 80078c0:	20000008 	.word	0x20000008
 80078c4:	2000000c 	.word	0x2000000c
 80078c8:	4b8b      	ldr	r3, [pc, #556]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a8a      	ldr	r2, [pc, #552]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80078ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	4b88      	ldr	r3, [pc, #544]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a87      	ldr	r2, [pc, #540]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80078da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d019      	beq.n	800791c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fb ff56 	bl	8003798 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078ee:	e00e      	b.n	800790e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078f0:	f7fb ff52 	bl	8003798 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	@ 0x64
 80078fc:	d907      	bls.n	800790e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078fe:	4b7e      	ldr	r3, [pc, #504]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e364      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800790e:	4b7a      	ldr	r3, [pc, #488]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0ea      	beq.n	80078f0 <HAL_RCC_OscConfig+0x2b0>
 800791a:	e01a      	b.n	8007952 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fb ff3c 	bl	8003798 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007922:	e00e      	b.n	8007942 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007924:	f7fb ff38 	bl	8003798 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	@ 0x64
 8007930:	d907      	bls.n	8007942 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007932:	4b71      	ldr	r3, [pc, #452]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e34a      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007942:	4b6d      	ldr	r3, [pc, #436]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1ea      	bne.n	8007924 <HAL_RCC_OscConfig+0x2e4>
 800794e:	e000      	b.n	8007952 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d06c      	beq.n	8007a38 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d005      	beq.n	8007970 <HAL_RCC_OscConfig+0x330>
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b0c      	cmp	r3, #12
 8007968:	d119      	bne.n	800799e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d116      	bne.n	800799e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007970:	4b61      	ldr	r3, [pc, #388]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_RCC_OscConfig+0x348>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e327      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007988:	4b5b      	ldr	r3, [pc, #364]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	061b      	lsls	r3, r3, #24
 8007996:	4958      	ldr	r1, [pc, #352]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007998:	4313      	orrs	r3, r2
 800799a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800799c:	e04c      	b.n	8007a38 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d029      	beq.n	80079fa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079a6:	4b54      	ldr	r3, [pc, #336]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a53      	ldr	r2, [pc, #332]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b2:	f7fb fef1 	bl	8003798 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079b8:	e00e      	b.n	80079d8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ba:	f7fb feed 	bl	8003798 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d907      	bls.n	80079d8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079c8:	4b4b      	ldr	r3, [pc, #300]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e2ff      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079d8:	4b47      	ldr	r3, [pc, #284]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0ea      	beq.n	80079ba <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e4:	4b44      	ldr	r3, [pc, #272]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	061b      	lsls	r3, r3, #24
 80079f2:	4941      	ldr	r1, [pc, #260]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	e01e      	b.n	8007a38 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079fa:	4b3f      	ldr	r3, [pc, #252]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a3e      	ldr	r2, [pc, #248]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a06:	f7fb fec7 	bl	8003798 <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a0c:	e00e      	b.n	8007a2c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a0e:	f7fb fec3 	bl	8003798 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d907      	bls.n	8007a2c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a1c:	4b36      	ldr	r3, [pc, #216]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e2d5      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a2c:	4b32      	ldr	r3, [pc, #200]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ea      	bne.n	8007a0e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d062      	beq.n	8007b0a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d038      	beq.n	8007abe <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d108      	bne.n	8007a66 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8007a54:	4b28      	ldr	r3, [pc, #160]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5a:	4a27      	ldr	r2, [pc, #156]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a5c:	f023 0310 	bic.w	r3, r3, #16
 8007a60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007a64:	e007      	b.n	8007a76 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8007a66:	4b24      	ldr	r3, [pc, #144]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a6c:	4a22      	ldr	r2, [pc, #136]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a6e:	f043 0310 	orr.w	r3, r3, #16
 8007a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a76:	4b20      	ldr	r3, [pc, #128]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a86:	f7fb fe87 	bl	8003798 <HAL_GetTick>
 8007a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a8c:	e00f      	b.n	8007aae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a8e:	f7fb fe83 	bl	8003798 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	d908      	bls.n	8007aae <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a9c:	4b16      	ldr	r3, [pc, #88]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e294      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007aae:	4b12      	ldr	r3, [pc, #72]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0e8      	beq.n	8007a8e <HAL_RCC_OscConfig+0x44e>
 8007abc:	e025      	b.n	8007b0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007abe:	4b0e      	ldr	r3, [pc, #56]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ace:	f7fb fe63 	bl	8003798 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ad4:	e012      	b.n	8007afc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ad6:	f7fb fe5f 	bl	8003798 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b07      	cmp	r3, #7
 8007ae2:	d90b      	bls.n	8007afc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ae4:	4b04      	ldr	r3, [pc, #16]	@ (8007af8 <HAL_RCC_OscConfig+0x4b8>)
 8007ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e270      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
 8007af6:	bf00      	nop
 8007af8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007afc:	4ba8      	ldr	r3, [pc, #672]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 812d 	beq.w	8007d72 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007b1c:	4ba0      	ldr	r3, [pc, #640]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10d      	bne.n	8007b44 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b28:	4b9d      	ldr	r3, [pc, #628]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2c:	4a9c      	ldr	r2, [pc, #624]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b34:	4b9a      	ldr	r3, [pc, #616]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b40:	2301      	movs	r3, #1
 8007b42:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b44:	4b97      	ldr	r3, [pc, #604]	@ (8007da4 <HAL_RCC_OscConfig+0x764>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11e      	bne.n	8007b8e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b50:	4b94      	ldr	r3, [pc, #592]	@ (8007da4 <HAL_RCC_OscConfig+0x764>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a93      	ldr	r2, [pc, #588]	@ (8007da4 <HAL_RCC_OscConfig+0x764>)
 8007b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b5c:	f7fb fe1c 	bl	8003798 <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b62:	e00e      	b.n	8007b82 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b64:	f7fb fe18 	bl	8003798 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d907      	bls.n	8007b82 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b72:	4b8c      	ldr	r3, [pc, #560]	@ (8007da4 <HAL_RCC_OscConfig+0x764>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e22a      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b82:	4b88      	ldr	r3, [pc, #544]	@ (8007da4 <HAL_RCC_OscConfig+0x764>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ea      	beq.n	8007b64 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01f      	beq.n	8007bda <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ba6:	4b7e      	ldr	r3, [pc, #504]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bac:	4a7c      	ldr	r2, [pc, #496]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bae:	f043 0304 	orr.w	r3, r3, #4
 8007bb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bb6:	4b7a      	ldr	r3, [pc, #488]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbc:	4a78      	ldr	r2, [pc, #480]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bc6:	e018      	b.n	8007bfa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bc8:	4b75      	ldr	r3, [pc, #468]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bce:	4a74      	ldr	r2, [pc, #464]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bd0:	f043 0301 	orr.w	r3, r3, #1
 8007bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bd8:	e00f      	b.n	8007bfa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bda:	4b71      	ldr	r3, [pc, #452]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be0:	4a6f      	ldr	r2, [pc, #444]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007bea:	4b6d      	ldr	r3, [pc, #436]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf0:	4a6b      	ldr	r2, [pc, #428]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007bf2:	f023 0304 	bic.w	r3, r3, #4
 8007bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d068      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c02:	f7fb fdc9 	bl	8003798 <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c08:	e011      	b.n	8007c2e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0a:	f7fb fdc5 	bl	8003798 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d908      	bls.n	8007c2e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c1c:	4b60      	ldr	r3, [pc, #384]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e1d4      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0e6      	beq.n	8007c0a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d022      	beq.n	8007c8e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c48:	4b55      	ldr	r3, [pc, #340]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4e:	4a54      	ldr	r2, [pc, #336]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c58:	e011      	b.n	8007c7e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5a:	f7fb fd9d 	bl	8003798 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d908      	bls.n	8007c7e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e1ac      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c7e:	4b48      	ldr	r3, [pc, #288]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0e6      	beq.n	8007c5a <HAL_RCC_OscConfig+0x61a>
 8007c8c:	e068      	b.n	8007d60 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c8e:	4b44      	ldr	r3, [pc, #272]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c94:	4a42      	ldr	r2, [pc, #264]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007c9e:	e011      	b.n	8007cc4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ca0:	f7fb fd7a 	bl	8003798 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d908      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e189      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cc4:	4b36      	ldr	r3, [pc, #216]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e6      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x660>
 8007cd2:	e045      	b.n	8007d60 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd4:	f7fb fd60 	bl	8003798 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cda:	e011      	b.n	8007d00 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fb fd5c 	bl	8003798 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d908      	bls.n	8007d00 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cee:	4b2c      	ldr	r3, [pc, #176]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e16b      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d00:	4b27      	ldr	r3, [pc, #156]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007d0e:	4b24      	ldr	r3, [pc, #144]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d021      	beq.n	8007d60 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d1c:	4b20      	ldr	r3, [pc, #128]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d22:	4a1f      	ldr	r2, [pc, #124]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d2c:	e011      	b.n	8007d52 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fb fd33 	bl	8003798 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d908      	bls.n	8007d52 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d40:	4b17      	ldr	r3, [pc, #92]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e142      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d52:	4b13      	ldr	r3, [pc, #76]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e6      	bne.n	8007d2e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d60:	7ffb      	ldrb	r3, [r7, #31]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d105      	bne.n	8007d72 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d66:	4b0e      	ldr	r3, [pc, #56]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04f      	beq.n	8007e1e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d028      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d86:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d8c:	4a04      	ldr	r2, [pc, #16]	@ (8007da0 <HAL_RCC_OscConfig+0x760>)
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d96:	f7fb fcff 	bl	8003798 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d9c:	e014      	b.n	8007dc8 <HAL_RCC_OscConfig+0x788>
 8007d9e:	bf00      	nop
 8007da0:	40021000 	.word	0x40021000
 8007da4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007da8:	f7fb fcf6 	bl	8003798 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d908      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007db6:	4b8a      	ldr	r3, [pc, #552]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e107      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dc8:	4b85      	ldr	r3, [pc, #532]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0e8      	beq.n	8007da8 <HAL_RCC_OscConfig+0x768>
 8007dd6:	e022      	b.n	8007e1e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dd8:	4b81      	ldr	r3, [pc, #516]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dde:	4a80      	ldr	r2, [pc, #512]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007de0:	f023 0301 	bic.w	r3, r3, #1
 8007de4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de8:	f7fb fcd6 	bl	8003798 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dee:	e00f      	b.n	8007e10 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007df0:	f7fb fcd2 	bl	8003798 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d908      	bls.n	8007e10 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dfe:	4b78      	ldr	r3, [pc, #480]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0e3      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e10:	4b73      	ldr	r3, [pc, #460]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e8      	bne.n	8007df0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80d7 	beq.w	8007fd6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e28:	4b6d      	ldr	r3, [pc, #436]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 030c 	and.w	r3, r3, #12
 8007e30:	2b0c      	cmp	r3, #12
 8007e32:	f000 8091 	beq.w	8007f58 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d166      	bne.n	8007f0c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e3e:	4b68      	ldr	r3, [pc, #416]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a67      	ldr	r2, [pc, #412]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4a:	f7fb fca5 	bl	8003798 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e50:	e00e      	b.n	8007e70 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e52:	f7fb fca1 	bl	8003798 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d907      	bls.n	8007e70 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e60:	4b5f      	ldr	r3, [pc, #380]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e0b3      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e70:	4b5b      	ldr	r3, [pc, #364]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1ea      	bne.n	8007e52 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e7c:	4b58      	ldr	r3, [pc, #352]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	4b58      	ldr	r3, [pc, #352]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a4>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e8c:	3a01      	subs	r2, #1
 8007e8e:	0112      	lsls	r2, r2, #4
 8007e90:	4311      	orrs	r1, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e96:	0212      	lsls	r2, r2, #8
 8007e98:	4311      	orrs	r1, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007e9e:	0852      	lsrs	r2, r2, #1
 8007ea0:	3a01      	subs	r2, #1
 8007ea2:	0552      	lsls	r2, r2, #21
 8007ea4:	4311      	orrs	r1, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007eaa:	0852      	lsrs	r2, r2, #1
 8007eac:	3a01      	subs	r2, #1
 8007eae:	0652      	lsls	r2, r2, #25
 8007eb0:	4311      	orrs	r1, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007eb6:	06d2      	lsls	r2, r2, #27
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	4949      	ldr	r1, [pc, #292]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ec0:	4b47      	ldr	r3, [pc, #284]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a46      	ldr	r2, [pc, #280]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ecc:	4b44      	ldr	r3, [pc, #272]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	4a43      	ldr	r2, [pc, #268]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ed6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fb fc5e 	bl	8003798 <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ede:	e00e      	b.n	8007efe <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee0:	f7fb fc5a 	bl	8003798 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d907      	bls.n	8007efe <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eee:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e06c      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007efe:	4b38      	ldr	r3, [pc, #224]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0ea      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x8a0>
 8007f0a:	e064      	b.n	8007fd6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0c:	4b34      	ldr	r3, [pc, #208]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a33      	ldr	r2, [pc, #204]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f18:	f7fb fc3e 	bl	8003798 <HAL_GetTick>
 8007f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f1e:	e00e      	b.n	8007f3e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f20:	f7fb fc3a 	bl	8003798 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d907      	bls.n	8007f3e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e04c      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f3e:	4b28      	ldr	r3, [pc, #160]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1ea      	bne.n	8007f20 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f4a:	4b25      	ldr	r3, [pc, #148]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	4924      	ldr	r1, [pc, #144]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f50:	4b25      	ldr	r3, [pc, #148]	@ (8007fe8 <HAL_RCC_OscConfig+0x9a8>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	60cb      	str	r3, [r1, #12]
 8007f56:	e03e      	b.n	8007fd6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e039      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8007f64:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe0 <HAL_RCC_OscConfig+0x9a0>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f003 0203 	and.w	r2, r3, #3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d12c      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f82:	3b01      	subs	r3, #1
 8007f84:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d123      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d11b      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d113      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d109      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d001      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	019f800c 	.word	0x019f800c
 8007fe8:	feeefffc 	.word	0xfeeefffc

08007fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e11c      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008004:	4b90      	ldr	r3, [pc, #576]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d910      	bls.n	8008034 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008012:	4b8d      	ldr	r3, [pc, #564]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f023 020f 	bic.w	r2, r3, #15
 800801a:	498b      	ldr	r1, [pc, #556]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	4313      	orrs	r3, r2
 8008020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008022:	4b89      	ldr	r3, [pc, #548]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d001      	beq.n	8008034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e104      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d010      	beq.n	8008062 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	4b81      	ldr	r3, [pc, #516]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800804c:	429a      	cmp	r2, r3
 800804e:	d908      	bls.n	8008062 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008050:	4b7e      	ldr	r3, [pc, #504]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	497b      	ldr	r1, [pc, #492]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 800805e:	4313      	orrs	r3, r2
 8008060:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8085 	beq.w	800817a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d11f      	bne.n	80080b8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008078:	4b74      	ldr	r3, [pc, #464]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e0da      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008088:	f000 fa42 	bl	8008510 <RCC_GetSysClockFreqFromPLLSource>
 800808c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	4a6f      	ldr	r2, [pc, #444]	@ (8008250 <HAL_RCC_ClockConfig+0x264>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d947      	bls.n	8008126 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008096:	4b6d      	ldr	r3, [pc, #436]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d141      	bne.n	8008126 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080a2:	4b6a      	ldr	r3, [pc, #424]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080aa:	4a68      	ldr	r2, [pc, #416]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80080ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80080b2:	2380      	movs	r3, #128	@ 0x80
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e036      	b.n	8008126 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d107      	bne.n	80080d0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080c0:	4b62      	ldr	r3, [pc, #392]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d115      	bne.n	80080f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e0b6      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d107      	bne.n	80080e8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080d8:	4b5c      	ldr	r3, [pc, #368]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0aa      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080e8:	4b58      	ldr	r3, [pc, #352]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0a2      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80080f8:	f000 f8b0 	bl	800825c <HAL_RCC_GetSysClockFreq>
 80080fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	4a53      	ldr	r2, [pc, #332]	@ (8008250 <HAL_RCC_ClockConfig+0x264>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d90f      	bls.n	8008126 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008106:	4b51      	ldr	r3, [pc, #324]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008112:	4b4e      	ldr	r3, [pc, #312]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800811a:	4a4c      	ldr	r2, [pc, #304]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 800811c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008120:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008122:	2380      	movs	r3, #128	@ 0x80
 8008124:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008126:	4b49      	ldr	r3, [pc, #292]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f023 0203 	bic.w	r2, r3, #3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4946      	ldr	r1, [pc, #280]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008134:	4313      	orrs	r3, r2
 8008136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008138:	f7fb fb2e 	bl	8003798 <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813e:	e013      	b.n	8008168 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008140:	f7fb fb2a 	bl	8003798 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800814e:	4293      	cmp	r3, r2
 8008150:	d90a      	bls.n	8008168 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008152:	4b3e      	ldr	r3, [pc, #248]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 020c 	and.w	r2, r3, #12
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	429a      	cmp	r2, r3
 8008162:	d001      	beq.n	8008168 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e06a      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008168:	4b38      	ldr	r3, [pc, #224]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 020c 	and.w	r2, r3, #12
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	429a      	cmp	r2, r3
 8008178:	d1e2      	bne.n	8008140 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b80      	cmp	r3, #128	@ 0x80
 800817e:	d105      	bne.n	800818c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008180:	4b32      	ldr	r3, [pc, #200]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	4a31      	ldr	r2, [pc, #196]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800818a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	d010      	beq.n	80081ba <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	4b2b      	ldr	r3, [pc, #172]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d208      	bcs.n	80081ba <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081a8:	4b28      	ldr	r3, [pc, #160]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4925      	ldr	r1, [pc, #148]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081ba:	4b23      	ldr	r3, [pc, #140]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d210      	bcs.n	80081ea <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f023 020f 	bic.w	r2, r3, #15
 80081d0:	491d      	ldr	r1, [pc, #116]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008248 <HAL_RCC_ClockConfig+0x25c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d001      	beq.n	80081ea <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e029      	b.n	800823e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081f6:	4b15      	ldr	r3, [pc, #84]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4912      	ldr	r1, [pc, #72]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008204:	4313      	orrs	r3, r2
 8008206:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d009      	beq.n	8008228 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008214:	4b0d      	ldr	r3, [pc, #52]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	490a      	ldr	r1, [pc, #40]	@ (800824c <HAL_RCC_ClockConfig+0x260>)
 8008224:	4313      	orrs	r3, r2
 8008226:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008228:	f000 f8b4 	bl	8008394 <HAL_RCC_GetHCLKFreq>
 800822c:	4603      	mov	r3, r0
 800822e:	4a09      	ldr	r2, [pc, #36]	@ (8008254 <HAL_RCC_ClockConfig+0x268>)
 8008230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008232:	4b09      	ldr	r3, [pc, #36]	@ (8008258 <HAL_RCC_ClockConfig+0x26c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f7fa fe0e 	bl	8002e58 <HAL_InitTick>
 800823c:	4603      	mov	r3, r0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	40022000 	.word	0x40022000
 800824c:	40021000 	.word	0x40021000
 8008250:	04c4b400 	.word	0x04c4b400
 8008254:	20000008 	.word	0x20000008
 8008258:	2000000c 	.word	0x2000000c

0800825c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800825c:	b480      	push	{r7}
 800825e:	b089      	sub	sp, #36	@ 0x24
 8008260:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	2300      	movs	r3, #0
 8008268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800826a:	4b47      	ldr	r3, [pc, #284]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 030c 	and.w	r3, r3, #12
 8008272:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008274:	4b44      	ldr	r3, [pc, #272]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_RCC_GetSysClockFreq+0x34>
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	2b0c      	cmp	r3, #12
 8008288:	d121      	bne.n	80082ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d11e      	bne.n	80082ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008290:	4b3d      	ldr	r3, [pc, #244]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b00      	cmp	r3, #0
 800829a:	d107      	bne.n	80082ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800829c:	4b3a      	ldr	r3, [pc, #232]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 800829e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	e005      	b.n	80082b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80082ac:	4b36      	ldr	r3, [pc, #216]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80082b8:	4a34      	ldr	r2, [pc, #208]	@ (800838c <HAL_RCC_GetSysClockFreq+0x130>)
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10d      	bne.n	80082e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082cc:	e00a      	b.n	80082e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d102      	bne.n	80082da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x134>)
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	e004      	b.n	80082e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d101      	bne.n	80082e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x134>)
 80082e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2b0c      	cmp	r3, #12
 80082e8:	d146      	bne.n	8008378 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80082ea:	4b27      	ldr	r3, [pc, #156]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082f4:	4b24      	ldr	r3, [pc, #144]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	3301      	adds	r3, #1
 8008300:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d003      	beq.n	8008310 <HAL_RCC_GetSysClockFreq+0xb4>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d00d      	beq.n	800832a <HAL_RCC_GetSysClockFreq+0xce>
 800830e:	e019      	b.n	8008344 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008310:	4a1f      	ldr	r2, [pc, #124]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x134>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	fbb2 f3f3 	udiv	r3, r2, r3
 8008318:	4a1b      	ldr	r2, [pc, #108]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 800831a:	68d2      	ldr	r2, [r2, #12]
 800831c:	0a12      	lsrs	r2, r2, #8
 800831e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	617b      	str	r3, [r7, #20]
        break;
 8008328:	e019      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800832a:	4a19      	ldr	r2, [pc, #100]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x134>)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	4a15      	ldr	r2, [pc, #84]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008334:	68d2      	ldr	r2, [r2, #12]
 8008336:	0a12      	lsrs	r2, r2, #8
 8008338:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	617b      	str	r3, [r7, #20]
        break;
 8008342:	e00c      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	4a0e      	ldr	r2, [pc, #56]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 800834e:	68d2      	ldr	r2, [r2, #12]
 8008350:	0a12      	lsrs	r2, r2, #8
 8008352:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008356:	fb02 f303 	mul.w	r3, r2, r3
 800835a:	617b      	str	r3, [r7, #20]
        break;
 800835c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800835e:	4b0a      	ldr	r3, [pc, #40]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	0e5b      	lsrs	r3, r3, #25
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	3301      	adds	r3, #1
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	fbb2 f3f3 	udiv	r3, r2, r3
 8008376:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008378:	69bb      	ldr	r3, [r7, #24]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3724      	adds	r7, #36	@ 0x24
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40021000 	.word	0x40021000
 800838c:	08012e20 	.word	0x08012e20
 8008390:	00f42400 	.word	0x00f42400

08008394 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8008398:	f7ff ff60 	bl	800825c <HAL_RCC_GetSysClockFreq>
 800839c:	4602      	mov	r2, r0
 800839e:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <HAL_RCC_GetHCLKFreq+0x20>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	091b      	lsrs	r3, r3, #4
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	4903      	ldr	r1, [pc, #12]	@ (80083b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80083aa:	5ccb      	ldrb	r3, [r1, r3]
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40021000 	.word	0x40021000
 80083b8:	08012e08 	.word	0x08012e08

080083bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083c0:	f7ff ffe8 	bl	8008394 <HAL_RCC_GetHCLKFreq>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	0a1b      	lsrs	r3, r3, #8
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	4903      	ldr	r1, [pc, #12]	@ (80083e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083d2:	5ccb      	ldrb	r3, [r1, r3]
 80083d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d8:	4618      	mov	r0, r3
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40021000 	.word	0x40021000
 80083e0:	08012e18 	.word	0x08012e18

080083e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	220f      	movs	r2, #15
 80083f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80083f4:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f003 0203 	and.w	r2, r3, #3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008400:	4b0f      	ldr	r3, [pc, #60]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008418:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <HAL_RCC_GetClockConfig+0x5c>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008426:	4b07      	ldr	r3, [pc, #28]	@ (8008444 <HAL_RCC_GetClockConfig+0x60>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 020f 	and.w	r2, r3, #15
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	601a      	str	r2, [r3, #0]
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40021000 	.word	0x40021000
 8008444:	40022000 	.word	0x40022000

08008448 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008454:	4b2c      	ldr	r3, [pc, #176]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008460:	f7ff f840 	bl	80074e4 <HAL_PWREx_GetVoltageRange>
 8008464:	6138      	str	r0, [r7, #16]
 8008466:	e014      	b.n	8008492 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008468:	4b27      	ldr	r3, [pc, #156]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800846a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846c:	4a26      	ldr	r2, [pc, #152]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800846e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008472:	6593      	str	r3, [r2, #88]	@ 0x58
 8008474:	4b24      	ldr	r3, [pc, #144]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008480:	f7ff f830 	bl	80074e4 <HAL_PWREx_GetVoltageRange>
 8008484:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008486:	4b20      	ldr	r3, [pc, #128]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848a:	4a1f      	ldr	r2, [pc, #124]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800848c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008490:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849e:	d10b      	bne.n	80084b8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b80      	cmp	r3, #128	@ 0x80
 80084a4:	d919      	bls.n	80084da <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80084aa:	d902      	bls.n	80084b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80084ac:	2302      	movs	r3, #2
 80084ae:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80084b0:	e013      	b.n	80084da <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084b2:	2301      	movs	r3, #1
 80084b4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80084b6:	e010      	b.n	80084da <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b80      	cmp	r3, #128	@ 0x80
 80084bc:	d902      	bls.n	80084c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80084be:	2303      	movs	r3, #3
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e00a      	b.n	80084da <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b80      	cmp	r3, #128	@ 0x80
 80084c8:	d102      	bne.n	80084d0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80084ca:	2302      	movs	r3, #2
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e004      	b.n	80084da <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b70      	cmp	r3, #112	@ 0x70
 80084d4:	d101      	bne.n	80084da <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084d6:	2301      	movs	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80084da:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f023 020f 	bic.w	r2, r3, #15
 80084e2:	490a      	ldr	r1, [pc, #40]	@ (800850c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80084ea:	4b08      	ldr	r3, [pc, #32]	@ (800850c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d001      	beq.n	80084fc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40021000 	.word	0x40021000
 800850c:	40022000 	.word	0x40022000

08008510 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008516:	4b31      	ldr	r3, [pc, #196]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008520:	4b2e      	ldr	r3, [pc, #184]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	3301      	adds	r3, #1
 800852c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d015      	beq.n	8008560 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b03      	cmp	r3, #3
 8008538:	d839      	bhi.n	80085ae <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d01c      	beq.n	800857a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d133      	bne.n	80085ae <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008546:	4a26      	ldr	r2, [pc, #152]	@ (80085e0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	fbb2 f3f3 	udiv	r3, r2, r3
 800854e:	4a23      	ldr	r2, [pc, #140]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008550:	68d2      	ldr	r2, [r2, #12]
 8008552:	0a12      	lsrs	r2, r2, #8
 8008554:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008558:	fb02 f303 	mul.w	r3, r2, r3
 800855c:	613b      	str	r3, [r7, #16]
      break;
 800855e:	e029      	b.n	80085b4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008560:	4a1f      	ldr	r2, [pc, #124]	@ (80085e0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	fbb2 f3f3 	udiv	r3, r2, r3
 8008568:	4a1c      	ldr	r2, [pc, #112]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800856a:	68d2      	ldr	r2, [r2, #12]
 800856c:	0a12      	lsrs	r2, r2, #8
 800856e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	613b      	str	r3, [r7, #16]
      break;
 8008578:	e01c      	b.n	80085b4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800857a:	4b18      	ldr	r3, [pc, #96]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d107      	bne.n	8008596 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008586:	4b15      	ldr	r3, [pc, #84]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e005      	b.n	80085a2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008596:	4b11      	ldr	r3, [pc, #68]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80085a2:	4a10      	ldr	r2, [pc, #64]	@ (80085e4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085aa:	613b      	str	r3, [r7, #16]
        break;
 80085ac:	e002      	b.n	80085b4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
      break;
 80085b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80085b4:	4b09      	ldr	r3, [pc, #36]	@ (80085dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	0e5b      	lsrs	r3, r3, #25
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	3301      	adds	r3, #1
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80085ce:	683b      	ldr	r3, [r7, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	40021000 	.word	0x40021000
 80085e0:	00f42400 	.word	0x00f42400
 80085e4:	08012e20 	.word	0x08012e20

080085e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085f0:	2300      	movs	r3, #0
 80085f2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085f4:	2300      	movs	r3, #0
 80085f6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008600:	2b00      	cmp	r3, #0
 8008602:	d040      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008608:	2b80      	cmp	r3, #128	@ 0x80
 800860a:	d02a      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800860c:	2b80      	cmp	r3, #128	@ 0x80
 800860e:	d825      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008610:	2b60      	cmp	r3, #96	@ 0x60
 8008612:	d026      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008614:	2b60      	cmp	r3, #96	@ 0x60
 8008616:	d821      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008618:	2b40      	cmp	r3, #64	@ 0x40
 800861a:	d006      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800861c:	2b40      	cmp	r3, #64	@ 0x40
 800861e:	d81d      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008624:	2b20      	cmp	r3, #32
 8008626:	d010      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008628:	e018      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800862a:	4b8f      	ldr	r3, [pc, #572]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	4a8e      	ldr	r2, [pc, #568]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008634:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008636:	e015      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fb66 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008648:	e00c      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3320      	adds	r3, #32
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fc43 	bl	8008edc <RCCEx_PLLSAI2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800865a:	e003      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	77fb      	strb	r3, [r7, #31]
        break;
 8008660:	e000      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8008662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008664:	7ffb      	ldrb	r3, [r7, #31]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10b      	bne.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800866a:	4b7f      	ldr	r3, [pc, #508]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800866c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008670:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008678:	497b      	ldr	r1, [pc, #492]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800867a:	4313      	orrs	r3, r2
 800867c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008680:	e001      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008682:	7ffb      	ldrb	r3, [r7, #31]
 8008684:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d047      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800869a:	d030      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a0:	d82a      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80086a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086a6:	d02a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80086a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ac:	d824      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80086ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b2:	d008      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80086b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b8:	d81e      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80086be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086c2:	d010      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80086c4:	e018      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80086c6:	4b68      	ldr	r3, [pc, #416]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	4a67      	ldr	r2, [pc, #412]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80086cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086d0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086d2:	e015      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	2100      	movs	r1, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fb18 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086e4:	e00c      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3320      	adds	r3, #32
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fbf5 	bl	8008edc <RCCEx_PLLSAI2_Config>
 80086f2:	4603      	mov	r3, r0
 80086f4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086f6:	e003      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	77fb      	strb	r3, [r7, #31]
        break;
 80086fc:	e000      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80086fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008700:	7ffb      	ldrb	r3, [r7, #31]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008706:	4b58      	ldr	r3, [pc, #352]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800870c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008714:	4954      	ldr	r1, [pc, #336]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800871c:	e001      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871e:	7ffb      	ldrb	r3, [r7, #31]
 8008720:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80ab 	beq.w	8008886 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008730:	2300      	movs	r3, #0
 8008732:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008734:	4b4c      	ldr	r3, [pc, #304]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10d      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008740:	4b49      	ldr	r3, [pc, #292]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008744:	4a48      	ldr	r2, [pc, #288]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800874a:	6593      	str	r3, [r2, #88]	@ 0x58
 800874c:	4b46      	ldr	r3, [pc, #280]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800874e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800875c:	4b43      	ldr	r3, [pc, #268]	@ (800886c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a42      	ldr	r2, [pc, #264]	@ (800886c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008768:	f7fb f816 	bl	8003798 <HAL_GetTick>
 800876c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800876e:	e00f      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008770:	f7fb f812 	bl	8003798 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d908      	bls.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800877e:	4b3b      	ldr	r3, [pc, #236]	@ (800886c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800878e:	e006      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008790:	4b36      	ldr	r3, [pc, #216]	@ (800886c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0e9      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800879c:	e000      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800879e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80087a0:	7ffb      	ldrb	r3, [r7, #31]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d164      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80087a6:	4b30      	ldr	r3, [pc, #192]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087b0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01f      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d019      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087c4:	4b28      	ldr	r3, [pc, #160]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ce:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087d0:	4b25      	ldr	r3, [pc, #148]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d6:	4a24      	ldr	r2, [pc, #144]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087e0:	4b21      	ldr	r3, [pc, #132]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e6:	4a20      	ldr	r2, [pc, #128]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01f      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008802:	f7fa ffc9 	bl	8003798 <HAL_GetTick>
 8008806:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008808:	e012      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800880a:	f7fa ffc5 	bl	8003798 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008818:	4293      	cmp	r3, r2
 800881a:	d909      	bls.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800881c:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800881e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800882e:	e007      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008830:	4b0d      	ldr	r3, [pc, #52]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0e5      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800883e:	e000      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8008840:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8008842:	7ffb      	ldrb	r3, [r7, #31]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008848:	4b07      	ldr	r3, [pc, #28]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008858:	4903      	ldr	r1, [pc, #12]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008860:	e008      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008862:	7ffb      	ldrb	r3, [r7, #31]
 8008864:	77bb      	strb	r3, [r7, #30]
 8008866:	e005      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008868:	40021000 	.word	0x40021000
 800886c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008870:	7ffb      	ldrb	r3, [r7, #31]
 8008872:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d105      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800887a:	4b9c      	ldr	r3, [pc, #624]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800887c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887e:	4a9b      	ldr	r2, [pc, #620]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008884:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008892:	4b96      	ldr	r3, [pc, #600]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008898:	f023 0203 	bic.w	r2, r3, #3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	4992      	ldr	r1, [pc, #584]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088b4:	4b8d      	ldr	r3, [pc, #564]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ba:	f023 020c 	bic.w	r2, r3, #12
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c2:	498a      	ldr	r1, [pc, #552]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088d6:	4b85      	ldr	r3, [pc, #532]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e4:	4981      	ldr	r1, [pc, #516]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088f8:	4b7c      	ldr	r3, [pc, #496]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	4979      	ldr	r1, [pc, #484]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008908:	4313      	orrs	r3, r2
 800890a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0310 	and.w	r3, r3, #16
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800891a:	4b74      	ldr	r3, [pc, #464]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800891c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008928:	4970      	ldr	r1, [pc, #448]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800893c:	4b6b      	ldr	r3, [pc, #428]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008942:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800894a:	4968      	ldr	r1, [pc, #416]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800895e:	4b63      	ldr	r3, [pc, #396]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008964:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800896c:	495f      	ldr	r1, [pc, #380]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008980:	4b5a      	ldr	r3, [pc, #360]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008986:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800898e:	4957      	ldr	r1, [pc, #348]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80089a2:	4b52      	ldr	r3, [pc, #328]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089b0:	494e      	ldr	r1, [pc, #312]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d031      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089cc:	d00e      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x404>
 80089ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089d2:	d814      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d015      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80089d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089dc:	d10f      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089de:	4b43      	ldr	r3, [pc, #268]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	4a42      	ldr	r2, [pc, #264]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089e8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80089ea:	e00c      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3304      	adds	r3, #4
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 f98c 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80089fc:	e003      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	77fb      	strb	r3, [r7, #31]
        break;
 8008a02:	e000      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8008a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a06:	7ffb      	ldrb	r3, [r7, #31]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a0c:	4b37      	ldr	r3, [pc, #220]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a1a:	4934      	ldr	r1, [pc, #208]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008a22:	e001      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7ffb      	ldrb	r3, [r7, #31]
 8008a26:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a34:	4b2d      	ldr	r3, [pc, #180]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a42:	492a      	ldr	r1, [pc, #168]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a56:	4b25      	ldr	r3, [pc, #148]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a64:	4921      	ldr	r1, [pc, #132]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00a      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a78:	4b1c      	ldr	r3, [pc, #112]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a86:	4919      	ldr	r1, [pc, #100]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a9a:	4b14      	ldr	r3, [pc, #80]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008aa0:	f023 0203 	bic.w	r2, r3, #3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa8:	4910      	ldr	r1, [pc, #64]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d02b      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aca:	4908      	ldr	r1, [pc, #32]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ada:	d109      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008adc:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	4a02      	ldr	r2, [pc, #8]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ae6:	60d3      	str	r3, [r2, #12]
 8008ae8:	e014      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008aea:	bf00      	nop
 8008aec:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008af8:	d10c      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3304      	adds	r3, #4
 8008afe:	2101      	movs	r1, #1
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 f905 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 8008b06:	4603      	mov	r3, r0
 8008b08:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8008b0a:	7ffb      	ldrb	r3, [r7, #31]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8008b10:	7ffb      	ldrb	r3, [r7, #31]
 8008b12:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d04a      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b28:	d108      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8008b2a:	4b70      	ldr	r3, [pc, #448]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b30:	4a6e      	ldr	r2, [pc, #440]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008b3a:	e012      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b4a:	4968      	ldr	r1, [pc, #416]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008b52:	4b66      	ldr	r3, [pc, #408]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b58:	4a64      	ldr	r2, [pc, #400]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b6a:	d10d      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	2101      	movs	r1, #1
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f8cc 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008b7c:	7ffb      	ldrb	r3, [r7, #31]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d019      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8008b82:	7ffb      	ldrb	r3, [r7, #31]
 8008b84:	77bb      	strb	r3, [r7, #30]
 8008b86:	e016      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b90:	d106      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b92:	4b56      	ldr	r3, [pc, #344]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	4a55      	ldr	r2, [pc, #340]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b9c:	60d3      	str	r3, [r2, #12]
 8008b9e:	e00a      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ba8:	d105      	bne.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008baa:	4b50      	ldr	r3, [pc, #320]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	4a4f      	ldr	r2, [pc, #316]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bb4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d028      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bd0:	4946      	ldr	r1, [pc, #280]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008be0:	d106      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008be2:	4b42      	ldr	r3, [pc, #264]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	4a41      	ldr	r2, [pc, #260]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008be8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bec:	60d3      	str	r3, [r2, #12]
 8008bee:	e011      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bf8:	d10c      	bne.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f885 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 8008c06:	4603      	mov	r3, r0
 8008c08:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c0a:	7ffb      	ldrb	r3, [r7, #31]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8008c10:	7ffb      	ldrb	r3, [r7, #31]
 8008c12:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01e      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c20:	4b32      	ldr	r3, [pc, #200]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c30:	492e      	ldr	r1, [pc, #184]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c42:	d10c      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	2102      	movs	r1, #2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f860 	bl	8008d10 <RCCEx_PLLSAI1_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c54:	7ffb      	ldrb	r3, [r7, #31]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8008c5a:	7ffb      	ldrb	r3, [r7, #31]
 8008c5c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c6a:	4b20      	ldr	r3, [pc, #128]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c70:	f023 0204 	bic.w	r2, r3, #4
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c7a:	491c      	ldr	r1, [pc, #112]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008c8e:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c94:	f023 0218 	bic.w	r2, r3, #24
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c9e:	4913      	ldr	r1, [pc, #76]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d017      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cc2:	490a      	ldr	r1, [pc, #40]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cd4:	d105      	bne.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cd6:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	4a04      	ldr	r2, [pc, #16]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ce0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008ce2:	7fbb      	ldrb	r3, [r7, #30]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3720      	adds	r7, #32
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	40021000 	.word	0x40021000

08008cf0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a04      	ldr	r2, [pc, #16]	@ (8008d0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008cfa:	f043 0304 	orr.w	r3, r3, #4
 8008cfe:	6013      	str	r3, [r2, #0]
}
 8008d00:	bf00      	nop
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	40021000 	.word	0x40021000

08008d10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d018      	beq.n	8008d58 <RCCEx_PLLSAI1_Config+0x48>
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d81f      	bhi.n	8008d6a <RCCEx_PLLSAI1_Config+0x5a>
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d002      	beq.n	8008d34 <RCCEx_PLLSAI1_Config+0x24>
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d009      	beq.n	8008d46 <RCCEx_PLLSAI1_Config+0x36>
 8008d32:	e01a      	b.n	8008d6a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008d34:	4b65      	ldr	r3, [pc, #404]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d117      	bne.n	8008d70 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d44:	e014      	b.n	8008d70 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008d46:	4b61      	ldr	r3, [pc, #388]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d110      	bne.n	8008d74 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d56:	e00d      	b.n	8008d74 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008d58:	4b5c      	ldr	r3, [pc, #368]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d109      	bne.n	8008d78 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d68:	e006      	b.n	8008d78 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6e:	e004      	b.n	8008d7a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d70:	bf00      	nop
 8008d72:	e002      	b.n	8008d7a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d74:	bf00      	nop
 8008d76:	e000      	b.n	8008d7a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d78:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 809f 	bne.w	8008ec0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008d82:	4b52      	ldr	r3, [pc, #328]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a51      	ldr	r2, [pc, #324]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d8e:	f7fa fd03 	bl	8003798 <HAL_GetTick>
 8008d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d94:	e00f      	b.n	8008db6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d96:	f7fa fcff 	bl	8003798 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d908      	bls.n	8008db6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008da4:	4b49      	ldr	r3, [pc, #292]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008db4:	e006      	b.n	8008dc4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008db6:	4b45      	ldr	r3, [pc, #276]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e9      	bne.n	8008d96 <RCCEx_PLLSAI1_Config+0x86>
 8008dc2:	e000      	b.n	8008dc6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8008dc4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d179      	bne.n	8008ec0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d116      	bne.n	8008e00 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008dd4:	691a      	ldr	r2, [r3, #16]
 8008dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ed0 <RCCEx_PLLSAI1_Config+0x1c0>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6892      	ldr	r2, [r2, #8]
 8008dde:	0211      	lsls	r1, r2, #8
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	68d2      	ldr	r2, [r2, #12]
 8008de4:	06d2      	lsls	r2, r2, #27
 8008de6:	4311      	orrs	r1, r2
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6852      	ldr	r2, [r2, #4]
 8008dec:	3a01      	subs	r2, #1
 8008dee:	0112      	lsls	r2, r2, #4
 8008df0:	4311      	orrs	r1, r2
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	4934      	ldr	r1, [pc, #208]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	610b      	str	r3, [r1, #16]
 8008dfe:	e033      	b.n	8008e68 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d118      	bne.n	8008e38 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e06:	4b31      	ldr	r3, [pc, #196]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e08:	691a      	ldr	r2, [r3, #16]
 8008e0a:	4b32      	ldr	r3, [pc, #200]	@ (8008ed4 <RCCEx_PLLSAI1_Config+0x1c4>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6892      	ldr	r2, [r2, #8]
 8008e12:	0211      	lsls	r1, r2, #8
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6912      	ldr	r2, [r2, #16]
 8008e18:	0852      	lsrs	r2, r2, #1
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	0552      	lsls	r2, r2, #21
 8008e1e:	4311      	orrs	r1, r2
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6852      	ldr	r2, [r2, #4]
 8008e24:	3a01      	subs	r2, #1
 8008e26:	0112      	lsls	r2, r2, #4
 8008e28:	4311      	orrs	r1, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6812      	ldr	r2, [r2, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	4926      	ldr	r1, [pc, #152]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	610b      	str	r3, [r1, #16]
 8008e36:	e017      	b.n	8008e68 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e38:	4b24      	ldr	r3, [pc, #144]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	4b26      	ldr	r3, [pc, #152]	@ (8008ed8 <RCCEx_PLLSAI1_Config+0x1c8>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6892      	ldr	r2, [r2, #8]
 8008e44:	0211      	lsls	r1, r2, #8
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6952      	ldr	r2, [r2, #20]
 8008e4a:	0852      	lsrs	r2, r2, #1
 8008e4c:	3a01      	subs	r2, #1
 8008e4e:	0652      	lsls	r2, r2, #25
 8008e50:	4311      	orrs	r1, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6852      	ldr	r2, [r2, #4]
 8008e56:	3a01      	subs	r2, #1
 8008e58:	0112      	lsls	r2, r2, #4
 8008e5a:	4311      	orrs	r1, r2
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	491a      	ldr	r1, [pc, #104]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a17      	ldr	r2, [pc, #92]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e74:	f7fa fc90 	bl	8003798 <HAL_GetTick>
 8008e78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e7a:	e00f      	b.n	8008e9c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e7c:	f7fa fc8c 	bl	8003798 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d908      	bls.n	8008e9c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e8a:	4b10      	ldr	r3, [pc, #64]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008e9a:	e006      	b.n	8008eaa <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0e9      	beq.n	8008e7c <RCCEx_PLLSAI1_Config+0x16c>
 8008ea8:	e000      	b.n	8008eac <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8008eaa:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8008eb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	4904      	ldr	r1, [pc, #16]	@ (8008ecc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	07ff800c 	.word	0x07ff800c
 8008ed4:	ff9f800c 	.word	0xff9f800c
 8008ed8:	f9ff800c 	.word	0xf9ff800c

08008edc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d018      	beq.n	8008f24 <RCCEx_PLLSAI2_Config+0x48>
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d81f      	bhi.n	8008f36 <RCCEx_PLLSAI2_Config+0x5a>
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d002      	beq.n	8008f00 <RCCEx_PLLSAI2_Config+0x24>
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d009      	beq.n	8008f12 <RCCEx_PLLSAI2_Config+0x36>
 8008efe:	e01a      	b.n	8008f36 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008f00:	4b4a      	ldr	r3, [pc, #296]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d117      	bne.n	8008f3c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f10:	e014      	b.n	8008f3c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008f12:	4b46      	ldr	r3, [pc, #280]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d110      	bne.n	8008f40 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f22:	e00d      	b.n	8008f40 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008f24:	4b41      	ldr	r3, [pc, #260]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f34:	e006      	b.n	8008f44 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3a:	e004      	b.n	8008f46 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008f44:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d169      	bne.n	8009020 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008f4c:	4b37      	ldr	r3, [pc, #220]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a36      	ldr	r2, [pc, #216]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f58:	f7fa fc1e 	bl	8003798 <HAL_GetTick>
 8008f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f5e:	e00f      	b.n	8008f80 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f60:	f7fa fc1a 	bl	8003798 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d908      	bls.n	8008f80 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d009      	beq.n	8008f8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f7e:	e006      	b.n	8008f8e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f80:	4b2a      	ldr	r3, [pc, #168]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e9      	bne.n	8008f60 <RCCEx_PLLSAI2_Config+0x84>
 8008f8c:	e000      	b.n	8008f90 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8008f8e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d144      	bne.n	8009020 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d115      	bne.n	8008fc8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f9c:	4b23      	ldr	r3, [pc, #140]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008f9e:	695a      	ldr	r2, [r3, #20]
 8008fa0:	4b23      	ldr	r3, [pc, #140]	@ (8009030 <RCCEx_PLLSAI2_Config+0x154>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6892      	ldr	r2, [r2, #8]
 8008fa8:	0211      	lsls	r1, r2, #8
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	68d2      	ldr	r2, [r2, #12]
 8008fae:	06d2      	lsls	r2, r2, #27
 8008fb0:	4311      	orrs	r1, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6852      	ldr	r2, [r2, #4]
 8008fb6:	3a01      	subs	r2, #1
 8008fb8:	0112      	lsls	r2, r2, #4
 8008fba:	4311      	orrs	r1, r2
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6812      	ldr	r2, [r2, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	491a      	ldr	r1, [pc, #104]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008fc8:	4b18      	ldr	r3, [pc, #96]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a17      	ldr	r2, [pc, #92]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd4:	f7fa fbe0 	bl	8003798 <HAL_GetTick>
 8008fd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008fda:	e00f      	b.n	8008ffc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008fdc:	f7fa fbdc 	bl	8003798 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d908      	bls.n	8008ffc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008fea:	4b10      	ldr	r3, [pc, #64]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008ffa:	e006      	b.n	800900a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0e9      	beq.n	8008fdc <RCCEx_PLLSAI2_Config+0x100>
 8009008:	e000      	b.n	800900c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800900a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8009012:	4b06      	ldr	r3, [pc, #24]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 8009014:	695a      	ldr	r2, [r3, #20]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	4904      	ldr	r1, [pc, #16]	@ (800902c <RCCEx_PLLSAI2_Config+0x150>)
 800901c:	4313      	orrs	r3, r2
 800901e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40021000 	.word	0x40021000
 8009030:	07ff800c 	.word	0x07ff800c

08009034 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d066      	beq.n	8009114 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7f9 fdea 	bl	8002c34 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f003 0310 	and.w	r3, r3, #16
 8009072:	2b10      	cmp	r3, #16
 8009074:	d045      	beq.n	8009102 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009076:	4b2a      	ldr	r3, [pc, #168]	@ (8009120 <HAL_RTC_Init+0xec>)
 8009078:	22ca      	movs	r2, #202	@ 0xca
 800907a:	625a      	str	r2, [r3, #36]	@ 0x24
 800907c:	4b28      	ldr	r3, [pc, #160]	@ (8009120 <HAL_RTC_Init+0xec>)
 800907e:	2253      	movs	r2, #83	@ 0x53
 8009080:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f98e 	bl	80093a4 <RTC_EnterInitMode>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d121      	bne.n	80090d6 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009092:	4b23      	ldr	r3, [pc, #140]	@ (8009120 <HAL_RTC_Init+0xec>)
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	4a22      	ldr	r2, [pc, #136]	@ (8009120 <HAL_RTC_Init+0xec>)
 8009098:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800909c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090a0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80090a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009120 <HAL_RTC_Init+0xec>)
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6859      	ldr	r1, [r3, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	4319      	orrs	r1, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	430b      	orrs	r3, r1
 80090b6:	491a      	ldr	r1, [pc, #104]	@ (8009120 <HAL_RTC_Init+0xec>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	4916      	ldr	r1, [pc, #88]	@ (8009120 <HAL_RTC_Init+0xec>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f99d 	bl	800940c <RTC_ExitInitMode>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10e      	bne.n	80090fa <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80090dc:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <HAL_RTC_Init+0xec>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a19      	ldr	r1, [r3, #32]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	4319      	orrs	r1, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	430b      	orrs	r3, r1
 80090f4:	490a      	ldr	r1, [pc, #40]	@ (8009120 <HAL_RTC_Init+0xec>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090fa:	4b09      	ldr	r3, [pc, #36]	@ (8009120 <HAL_RTC_Init+0xec>)
 80090fc:	22ff      	movs	r2, #255	@ 0xff
 80090fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8009100:	e001      	b.n	8009106 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	40002800 	.word	0x40002800

08009124 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009124:	b590      	push	{r4, r7, lr}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009136:	2b01      	cmp	r3, #1
 8009138:	d101      	bne.n	800913e <HAL_RTC_SetTime+0x1a>
 800913a:	2302      	movs	r3, #2
 800913c:	e081      	b.n	8009242 <HAL_RTC_SetTime+0x11e>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2202      	movs	r2, #2
 800914a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800914e:	4b3f      	ldr	r3, [pc, #252]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009150:	22ca      	movs	r2, #202	@ 0xca
 8009152:	625a      	str	r2, [r3, #36]	@ 0x24
 8009154:	4b3d      	ldr	r3, [pc, #244]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009156:	2253      	movs	r2, #83	@ 0x53
 8009158:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f922 	bl	80093a4 <RTC_EnterInitMode>
 8009160:	4603      	mov	r3, r0
 8009162:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009164:	7cfb      	ldrb	r3, [r7, #19]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d15c      	bne.n	8009224 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d125      	bne.n	80091bc <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009170:	4b36      	ldr	r3, [pc, #216]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f97e 	bl	8009488 <RTC_ByteToBcd2>
 800918c:	4603      	mov	r3, r0
 800918e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	785b      	ldrb	r3, [r3, #1]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f977 	bl	8009488 <RTC_ByteToBcd2>
 800919a:	4603      	mov	r3, r0
 800919c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800919e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	789b      	ldrb	r3, [r3, #2]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f96f 	bl	8009488 <RTC_ByteToBcd2>
 80091aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	78db      	ldrb	r3, [r3, #3]
 80091b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e017      	b.n	80091ec <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80091bc:	4b23      	ldr	r3, [pc, #140]	@ (800924c <HAL_RTC_SetTime+0x128>)
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	78db      	ldrb	r3, [r3, #3]
 80091e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80091ec:	4a17      	ldr	r2, [pc, #92]	@ (800924c <HAL_RTC_SetTime+0x128>)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80091f4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80091f8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80091fa:	4b14      	ldr	r3, [pc, #80]	@ (800924c <HAL_RTC_SetTime+0x128>)
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	4a13      	ldr	r2, [pc, #76]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009204:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009206:	4b11      	ldr	r3, [pc, #68]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	68d9      	ldr	r1, [r3, #12]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	430b      	orrs	r3, r1
 8009214:	490d      	ldr	r1, [pc, #52]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009216:	4313      	orrs	r3, r2
 8009218:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 f8f6 	bl	800940c <RTC_ExitInitMode>
 8009220:	4603      	mov	r3, r0
 8009222:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009224:	4b09      	ldr	r3, [pc, #36]	@ (800924c <HAL_RTC_SetTime+0x128>)
 8009226:	22ff      	movs	r2, #255	@ 0xff
 8009228:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800922a:	7cfb      	ldrb	r3, [r7, #19]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009240:	7cfb      	ldrb	r3, [r7, #19]
}
 8009242:	4618      	mov	r0, r3
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	bd90      	pop	{r4, r7, pc}
 800924a:	bf00      	nop
 800924c:	40002800 	.word	0x40002800

08009250 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_RTC_SetDate+0x1a>
 8009266:	2302      	movs	r3, #2
 8009268:	e071      	b.n	800934e <HAL_RTC_SetDate+0xfe>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2202      	movs	r2, #2
 8009276:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10e      	bne.n	800929e <HAL_RTC_SetDate+0x4e>
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	d008      	beq.n	800929e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	b2db      	uxtb	r3, r3
 8009296:	330a      	adds	r3, #10
 8009298:	b2da      	uxtb	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d11c      	bne.n	80092de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	78db      	ldrb	r3, [r3, #3]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f8ed 	bl	8009488 <RTC_ByteToBcd2>
 80092ae:	4603      	mov	r3, r0
 80092b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f8e6 	bl	8009488 <RTC_ByteToBcd2>
 80092bc:	4603      	mov	r3, r0
 80092be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	789b      	ldrb	r3, [r3, #2]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f8de 	bl	8009488 <RTC_ByteToBcd2>
 80092cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e00e      	b.n	80092fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	78db      	ldrb	r3, [r3, #3]
 80092e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80092ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80092f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092fc:	4b16      	ldr	r3, [pc, #88]	@ (8009358 <HAL_RTC_SetDate+0x108>)
 80092fe:	22ca      	movs	r2, #202	@ 0xca
 8009300:	625a      	str	r2, [r3, #36]	@ 0x24
 8009302:	4b15      	ldr	r3, [pc, #84]	@ (8009358 <HAL_RTC_SetDate+0x108>)
 8009304:	2253      	movs	r2, #83	@ 0x53
 8009306:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f84b 	bl	80093a4 <RTC_EnterInitMode>
 800930e:	4603      	mov	r3, r0
 8009310:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009312:	7cfb      	ldrb	r3, [r7, #19]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009318:	4a0f      	ldr	r2, [pc, #60]	@ (8009358 <HAL_RTC_SetDate+0x108>)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009320:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009324:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f870 	bl	800940c <RTC_ExitInitMode>
 800932c:	4603      	mov	r3, r0
 800932e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009330:	4b09      	ldr	r3, [pc, #36]	@ (8009358 <HAL_RTC_SetDate+0x108>)
 8009332:	22ff      	movs	r2, #255	@ 0xff
 8009334:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009336:	7cfb      	ldrb	r3, [r7, #19]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800934c:	7cfb      	ldrb	r3, [r7, #19]
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	bd90      	pop	{r4, r7, pc}
 8009356:	bf00      	nop
 8009358:	40002800 	.word	0x40002800

0800935c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8009364:	4b0d      	ldr	r3, [pc, #52]	@ (800939c <HAL_RTC_WaitForSynchro+0x40>)
 8009366:	4a0e      	ldr	r2, [pc, #56]	@ (80093a0 <HAL_RTC_WaitForSynchro+0x44>)
 8009368:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800936a:	f7fa fa15 	bl	8003798 <HAL_GetTick>
 800936e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009370:	e009      	b.n	8009386 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009372:	f7fa fa11 	bl	8003798 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009380:	d901      	bls.n	8009386 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e006      	b.n	8009394 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009386:	4b05      	ldr	r3, [pc, #20]	@ (800939c <HAL_RTC_WaitForSynchro+0x40>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0ef      	beq.n	8009372 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40002800 	.word	0x40002800
 80093a0:	0001005c 	.word	0x0001005c

080093a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80093b0:	4b15      	ldr	r3, [pc, #84]	@ (8009408 <RTC_EnterInitMode+0x64>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d120      	bne.n	80093fe <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80093bc:	4b12      	ldr	r3, [pc, #72]	@ (8009408 <RTC_EnterInitMode+0x64>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	4a11      	ldr	r2, [pc, #68]	@ (8009408 <RTC_EnterInitMode+0x64>)
 80093c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80093c8:	f7fa f9e6 	bl	8003798 <HAL_GetTick>
 80093cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093ce:	e00d      	b.n	80093ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093d0:	f7fa f9e2 	bl	8003798 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093de:	d905      	bls.n	80093ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2203      	movs	r2, #3
 80093e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093ec:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <RTC_EnterInitMode+0x64>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <RTC_EnterInitMode+0x5a>
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d1e8      	bne.n	80093d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40002800 	.word	0x40002800

0800940c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009418:	4b1a      	ldr	r3, [pc, #104]	@ (8009484 <RTC_ExitInitMode+0x78>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	4a19      	ldr	r2, [pc, #100]	@ (8009484 <RTC_ExitInitMode+0x78>)
 800941e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009422:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009424:	4b17      	ldr	r3, [pc, #92]	@ (8009484 <RTC_ExitInitMode+0x78>)
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10c      	bne.n	800944a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff ff93 	bl	800935c <HAL_RTC_WaitForSynchro>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01e      	beq.n	800947a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2203      	movs	r2, #3
 8009440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	73fb      	strb	r3, [r7, #15]
 8009448:	e017      	b.n	800947a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800944a:	4b0e      	ldr	r3, [pc, #56]	@ (8009484 <RTC_ExitInitMode+0x78>)
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	4a0d      	ldr	r2, [pc, #52]	@ (8009484 <RTC_ExitInitMode+0x78>)
 8009450:	f023 0320 	bic.w	r3, r3, #32
 8009454:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff ff80 	bl	800935c <HAL_RTC_WaitForSynchro>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2203      	movs	r2, #3
 8009466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800946e:	4b05      	ldr	r3, [pc, #20]	@ (8009484 <RTC_ExitInitMode+0x78>)
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	4a04      	ldr	r2, [pc, #16]	@ (8009484 <RTC_ExitInitMode+0x78>)
 8009474:	f043 0320 	orr.w	r3, r3, #32
 8009478:	6193      	str	r3, [r2, #24]
  }

  return status;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	40002800 	.word	0x40002800

08009488 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800949a:	e005      	b.n	80094a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	3b0a      	subs	r3, #10
 80094a6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80094a8:	7afb      	ldrb	r3, [r7, #11]
 80094aa:	2b09      	cmp	r3, #9
 80094ac:	d8f6      	bhi.n	800949c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	b2db      	uxtb	r3, r3
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80094dc:	2302      	movs	r3, #2
 80094de:	e027      	b.n	8009530 <HAL_RTCEx_SetCalibrationOutPut+0x68>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094f0:	4b12      	ldr	r3, [pc, #72]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 80094f2:	22ca      	movs	r2, #202	@ 0xca
 80094f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80094f6:	4b11      	ldr	r3, [pc, #68]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 80094f8:	2253      	movs	r2, #83	@ 0x53
 80094fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 80094fc:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009504:	490d      	ldr	r1, [pc, #52]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	4313      	orrs	r3, r2
 800950a:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 800950c:	4b0b      	ldr	r3, [pc, #44]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	4a0a      	ldr	r2, [pc, #40]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8009512:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009516:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009518:	4b08      	ldr	r3, [pc, #32]	@ (800953c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 800951a:	22ff      	movs	r2, #255	@ 0xff
 800951c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40002800 	.word	0x40002800

08009540 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	490f      	ldr	r1, [pc, #60]	@ (8009590 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8009554:	4313      	orrs	r3, r2
 8009556:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	490c      	ldr	r1, [pc, #48]	@ (8009594 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009562:	4313      	orrs	r3, r2
 8009564:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8009566:	4b0b      	ldr	r3, [pc, #44]	@ (8009594 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6919      	ldr	r1, [r3, #16]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	041b      	lsls	r3, r3, #16
 8009578:	430b      	orrs	r3, r1
 800957a:	4906      	ldr	r1, [pc, #24]	@ (8009594 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800957c:	4313      	orrs	r3, r2
 800957e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	40002800 	.word	0x40002800
 8009594:	40003400 	.word	0x40003400

08009598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e095      	b.n	80096d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d108      	bne.n	80095c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095ba:	d009      	beq.n	80095d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	61da      	str	r2, [r3, #28]
 80095c2:	e005      	b.n	80095d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7f9 fbc6 	bl	8002d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009606:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009610:	d902      	bls.n	8009618 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e002      	b.n	800961e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800961c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009626:	d007      	beq.n	8009638 <HAL_SPI_Init+0xa0>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009630:	d002      	beq.n	8009638 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	431a      	orrs	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800967a:	ea42 0103 	orr.w	r1, r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009682:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	0c1b      	lsrs	r3, r3, #16
 8009694:	f003 0204 	and.w	r2, r3, #4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969c:	f003 0310 	and.w	r3, r3, #16
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80096b4:	ea42 0103 	orr.w	r1, r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b08a      	sub	sp, #40	@ 0x28
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096ec:	2301      	movs	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_SPI_TransmitReceive+0x26>
 8009700:	2302      	movs	r3, #2
 8009702:	e20a      	b.n	8009b1a <HAL_SPI_TransmitReceive+0x43c>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800970c:	f7fa f844 	bl	8003798 <HAL_GetTick>
 8009710:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009718:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009720:	887b      	ldrh	r3, [r7, #2]
 8009722:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009724:	887b      	ldrh	r3, [r7, #2]
 8009726:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009728:	7efb      	ldrb	r3, [r7, #27]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d00e      	beq.n	800974c <HAL_SPI_TransmitReceive+0x6e>
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009734:	d106      	bne.n	8009744 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <HAL_SPI_TransmitReceive+0x66>
 800973e:	7efb      	ldrb	r3, [r7, #27]
 8009740:	2b04      	cmp	r3, #4
 8009742:	d003      	beq.n	800974c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009744:	2302      	movs	r3, #2
 8009746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800974a:	e1e0      	b.n	8009b0e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d005      	beq.n	800975e <HAL_SPI_TransmitReceive+0x80>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <HAL_SPI_TransmitReceive+0x80>
 8009758:	887b      	ldrh	r3, [r7, #2]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d103      	bne.n	8009766 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009764:	e1d3      	b.n	8009b0e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b04      	cmp	r3, #4
 8009770:	d003      	beq.n	800977a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2205      	movs	r2, #5
 8009776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	887a      	ldrh	r2, [r7, #2]
 800978a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	887a      	ldrh	r2, [r7, #2]
 8009792:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	887a      	ldrh	r2, [r7, #2]
 80097a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	887a      	ldrh	r2, [r7, #2]
 80097a6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097bc:	d802      	bhi.n	80097c4 <HAL_SPI_TransmitReceive+0xe6>
 80097be:	8a3b      	ldrh	r3, [r7, #16]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d908      	bls.n	80097d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80097d2:	605a      	str	r2, [r3, #4]
 80097d4:	e007      	b.n	80097e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f0:	2b40      	cmp	r3, #64	@ 0x40
 80097f2:	d007      	beq.n	8009804 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800980c:	f240 8081 	bls.w	8009912 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <HAL_SPI_TransmitReceive+0x140>
 8009818:	8a7b      	ldrh	r3, [r7, #18]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d16d      	bne.n	80098fa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009822:	881a      	ldrh	r2, [r3, #0]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982e:	1c9a      	adds	r2, r3, #2
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009842:	e05a      	b.n	80098fa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b02      	cmp	r3, #2
 8009850:	d11b      	bne.n	800988a <HAL_SPI_TransmitReceive+0x1ac>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d016      	beq.n	800988a <HAL_SPI_TransmitReceive+0x1ac>
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	2b01      	cmp	r3, #1
 8009860:	d113      	bne.n	800988a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009866:	881a      	ldrh	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009872:	1c9a      	adds	r2, r3, #2
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b01      	cmp	r3, #1
 8009896:	d11c      	bne.n	80098d2 <HAL_SPI_TransmitReceive+0x1f4>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800989e:	b29b      	uxth	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d016      	beq.n	80098d2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ae:	b292      	uxth	r2, r2
 80098b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b6:	1c9a      	adds	r2, r3, #2
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098ce:	2301      	movs	r3, #1
 80098d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098d2:	f7f9 ff61 	bl	8003798 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098de:	429a      	cmp	r2, r3
 80098e0:	d80b      	bhi.n	80098fa <HAL_SPI_TransmitReceive+0x21c>
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098e8:	d007      	beq.n	80098fa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80098f8:	e109      	b.n	8009b0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d19f      	bne.n	8009844 <HAL_SPI_TransmitReceive+0x166>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800990a:	b29b      	uxth	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d199      	bne.n	8009844 <HAL_SPI_TransmitReceive+0x166>
 8009910:	e0e3      	b.n	8009ada <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_SPI_TransmitReceive+0x244>
 800991a:	8a7b      	ldrh	r3, [r7, #18]
 800991c:	2b01      	cmp	r3, #1
 800991e:	f040 80cf 	bne.w	8009ac0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b01      	cmp	r3, #1
 800992a:	d912      	bls.n	8009952 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009930:	881a      	ldrh	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993c:	1c9a      	adds	r2, r3, #2
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009946:	b29b      	uxth	r3, r3
 8009948:	3b02      	subs	r3, #2
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009950:	e0b6      	b.n	8009ac0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	330c      	adds	r3, #12
 800995c:	7812      	ldrb	r2, [r2, #0]
 800995e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009978:	e0a2      	b.n	8009ac0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b02      	cmp	r3, #2
 8009986:	d134      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x314>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800998c:	b29b      	uxth	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d02f      	beq.n	80099f2 <HAL_SPI_TransmitReceive+0x314>
 8009992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009994:	2b01      	cmp	r3, #1
 8009996:	d12c      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d912      	bls.n	80099c8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a6:	881a      	ldrh	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b2:	1c9a      	adds	r2, r3, #2
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b02      	subs	r3, #2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099c6:	e012      	b.n	80099ee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	330c      	adds	r3, #12
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d148      	bne.n	8009a92 <HAL_SPI_TransmitReceive+0x3b4>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d042      	beq.n	8009a92 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d923      	bls.n	8009a60 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a22:	b292      	uxth	r2, r2
 8009a24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2a:	1c9a      	adds	r2, r3, #2
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b02      	subs	r3, #2
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d81f      	bhi.n	8009a8e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	e016      	b.n	8009a8e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f103 020c 	add.w	r2, r3, #12
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a92:	f7f9 fe81 	bl	8003798 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d803      	bhi.n	8009aaa <HAL_SPI_TransmitReceive+0x3cc>
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aa8:	d102      	bne.n	8009ab0 <HAL_SPI_TransmitReceive+0x3d2>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d107      	bne.n	8009ac0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009abe:	e026      	b.n	8009b0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f47f af57 	bne.w	800997a <HAL_SPI_TransmitReceive+0x29c>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f47f af50 	bne.w	800997a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f93e 	bl	8009d60 <SPI_EndRxTxTransaction>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2220      	movs	r2, #32
 8009af4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b04:	e003      	b.n	8009b0e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009b16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3728      	adds	r7, #40	@ 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b34:	f7f9 fe30 	bl	8003798 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4413      	add	r3, r2
 8009b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b44:	f7f9 fe28 	bl	8003798 <HAL_GetTick>
 8009b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b4a:	4b39      	ldr	r3, [pc, #228]	@ (8009c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	015b      	lsls	r3, r3, #5
 8009b50:	0d1b      	lsrs	r3, r3, #20
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	fb02 f303 	mul.w	r3, r2, r3
 8009b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b5a:	e054      	b.n	8009c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b62:	d050      	beq.n	8009c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b64:	f7f9 fe18 	bl	8003798 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d902      	bls.n	8009b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d13d      	bne.n	8009bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b92:	d111      	bne.n	8009bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b9c:	d004      	beq.n	8009ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba6:	d107      	bne.n	8009bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bc0:	d10f      	bne.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e017      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	bf0c      	ite	eq
 8009c16:	2301      	moveq	r3, #1
 8009c18:	2300      	movne	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d19b      	bne.n	8009b5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000008 	.word	0x20000008

08009c34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	@ 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c46:	f7f9 fda7 	bl	8003798 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	4413      	add	r3, r2
 8009c54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009c56:	f7f9 fd9f 	bl	8003798 <HAL_GetTick>
 8009c5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	330c      	adds	r3, #12
 8009c62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c64:	4b3d      	ldr	r3, [pc, #244]	@ (8009d5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	00da      	lsls	r2, r3, #3
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	0d1b      	lsrs	r3, r3, #20
 8009c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c76:	fb02 f303 	mul.w	r3, r2, r3
 8009c7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c7c:	e060      	b.n	8009d40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009c84:	d107      	bne.n	8009c96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c9c:	d050      	beq.n	8009d40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c9e:	f7f9 fd7b 	bl	8003798 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d902      	bls.n	8009cb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d13d      	bne.n	8009d30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009cc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ccc:	d111      	bne.n	8009cf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cd6:	d004      	beq.n	8009ce2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ce0:	d107      	bne.n	8009cf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cfa:	d10f      	bne.n	8009d1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e010      	b.n	8009d52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d196      	bne.n	8009c7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3728      	adds	r7, #40	@ 0x28
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000008 	.word	0x20000008

08009d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af02      	add	r7, sp, #8
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7ff ff5b 	bl	8009c34 <SPI_WaitFifoStateUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e027      	b.n	8009de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2180      	movs	r1, #128	@ 0x80
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fec0 	bl	8009b24 <SPI_WaitFlagStateUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e014      	b.n	8009de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff ff34 	bl	8009c34 <SPI_WaitFifoStateUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e000      	b.n	8009de4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e049      	b.n	8009e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7f9 fbdc 	bl	80035d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f000 fc24 	bl	800a678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d001      	beq.n	8009eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e047      	b.n	8009f44 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a23      	ldr	r2, [pc, #140]	@ (8009f50 <HAL_TIM_Base_Start+0xb4>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d01d      	beq.n	8009f02 <HAL_TIM_Base_Start+0x66>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ece:	d018      	beq.n	8009f02 <HAL_TIM_Base_Start+0x66>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8009f54 <HAL_TIM_Base_Start+0xb8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d013      	beq.n	8009f02 <HAL_TIM_Base_Start+0x66>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a1e      	ldr	r2, [pc, #120]	@ (8009f58 <HAL_TIM_Base_Start+0xbc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00e      	beq.n	8009f02 <HAL_TIM_Base_Start+0x66>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8009f5c <HAL_TIM_Base_Start+0xc0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d009      	beq.n	8009f02 <HAL_TIM_Base_Start+0x66>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f60 <HAL_TIM_Base_Start+0xc4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d004      	beq.n	8009f02 <HAL_TIM_Base_Start+0x66>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a19      	ldr	r2, [pc, #100]	@ (8009f64 <HAL_TIM_Base_Start+0xc8>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d115      	bne.n	8009f2e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	4b17      	ldr	r3, [pc, #92]	@ (8009f68 <HAL_TIM_Base_Start+0xcc>)
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b06      	cmp	r3, #6
 8009f12:	d015      	beq.n	8009f40 <HAL_TIM_Base_Start+0xa4>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f1a:	d011      	beq.n	8009f40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2c:	e008      	b.n	8009f40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0201 	orr.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e000      	b.n	8009f42 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	40012c00 	.word	0x40012c00
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	40013400 	.word	0x40013400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	00010007 	.word	0x00010007

08009f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d001      	beq.n	8009f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e04f      	b.n	800a024 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f042 0201 	orr.w	r2, r2, #1
 8009f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a23      	ldr	r2, [pc, #140]	@ (800a030 <HAL_TIM_Base_Start_IT+0xc4>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01d      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x76>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fae:	d018      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x76>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1f      	ldr	r2, [pc, #124]	@ (800a034 <HAL_TIM_Base_Start_IT+0xc8>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d013      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x76>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	@ (800a038 <HAL_TIM_Base_Start_IT+0xcc>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00e      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x76>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800a03c <HAL_TIM_Base_Start_IT+0xd0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x76>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a1b      	ldr	r2, [pc, #108]	@ (800a040 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d004      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x76>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a19      	ldr	r2, [pc, #100]	@ (800a044 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d115      	bne.n	800a00e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	4b17      	ldr	r3, [pc, #92]	@ (800a048 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fea:	4013      	ands	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b06      	cmp	r3, #6
 8009ff2:	d015      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0xb4>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ffa:	d011      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0201 	orr.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00c:	e008      	b.n	800a020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	e000      	b.n	800a022 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	40012c00 	.word	0x40012c00
 800a034:	40000400 	.word	0x40000400
 800a038:	40000800 	.word	0x40000800
 800a03c:	40000c00 	.word	0x40000c00
 800a040:	40013400 	.word	0x40013400
 800a044:	40014000 	.word	0x40014000
 800a048:	00010007 	.word	0x00010007

0800a04c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e049      	b.n	800a0f2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d106      	bne.n	800a078 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f841 	bl	800a0fa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f000 faf4 	bl	800a678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d020      	beq.n	800a172 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01b      	beq.n	800a172 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f06f 0202 	mvn.w	r2, #2
 800a142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fa6e 	bl	800a63a <HAL_TIM_IC_CaptureCallback>
 800a15e:	e005      	b.n	800a16c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fa60 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa71 	bl	800a64e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d020      	beq.n	800a1be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f003 0304 	and.w	r3, r3, #4
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01b      	beq.n	800a1be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f06f 0204 	mvn.w	r2, #4
 800a18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fa48 	bl	800a63a <HAL_TIM_IC_CaptureCallback>
 800a1aa:	e005      	b.n	800a1b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fa3a 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa4b 	bl	800a64e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d020      	beq.n	800a20a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f003 0308 	and.w	r3, r3, #8
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01b      	beq.n	800a20a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f06f 0208 	mvn.w	r2, #8
 800a1da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2204      	movs	r2, #4
 800a1e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69db      	ldr	r3, [r3, #28]
 800a1e8:	f003 0303 	and.w	r3, r3, #3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fa22 	bl	800a63a <HAL_TIM_IC_CaptureCallback>
 800a1f6:	e005      	b.n	800a204 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fa14 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa25 	bl	800a64e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b00      	cmp	r3, #0
 800a212:	d020      	beq.n	800a256 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f003 0310 	and.w	r3, r3, #16
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d01b      	beq.n	800a256 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f06f 0210 	mvn.w	r2, #16
 800a226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2208      	movs	r2, #8
 800a22c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f9fc 	bl	800a63a <HAL_TIM_IC_CaptureCallback>
 800a242:	e005      	b.n	800a250 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f9ee 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f9ff 	bl	800a64e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00c      	beq.n	800a27a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d007      	beq.n	800a27a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f06f 0201 	mvn.w	r2, #1
 800a272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7f8 fbed 	bl	8002a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a280:	2b00      	cmp	r3, #0
 800a282:	d104      	bne.n	800a28e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 ff28 	bl	800b0f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00c      	beq.n	800a2cc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d007      	beq.n	800a2cc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 ff20 	bl	800b10c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00c      	beq.n	800a2f0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f9b9 	bl	800a662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 0320 	and.w	r3, r3, #32
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00c      	beq.n	800a314 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f003 0320 	and.w	r3, r3, #32
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f06f 0220 	mvn.w	r2, #32
 800a30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fee8 	bl	800b0e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a336:	2302      	movs	r3, #2
 800a338:	e066      	b.n	800a408 <HAL_TIM_OC_ConfigChannel+0xec>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b14      	cmp	r3, #20
 800a346:	d857      	bhi.n	800a3f8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a348:	a201      	add	r2, pc, #4	@ (adr r2, 800a350 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34e:	bf00      	nop
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a3f9 	.word	0x0800a3f9
 800a358:	0800a3f9 	.word	0x0800a3f9
 800a35c:	0800a3f9 	.word	0x0800a3f9
 800a360:	0800a3b3 	.word	0x0800a3b3
 800a364:	0800a3f9 	.word	0x0800a3f9
 800a368:	0800a3f9 	.word	0x0800a3f9
 800a36c:	0800a3f9 	.word	0x0800a3f9
 800a370:	0800a3c1 	.word	0x0800a3c1
 800a374:	0800a3f9 	.word	0x0800a3f9
 800a378:	0800a3f9 	.word	0x0800a3f9
 800a37c:	0800a3f9 	.word	0x0800a3f9
 800a380:	0800a3cf 	.word	0x0800a3cf
 800a384:	0800a3f9 	.word	0x0800a3f9
 800a388:	0800a3f9 	.word	0x0800a3f9
 800a38c:	0800a3f9 	.word	0x0800a3f9
 800a390:	0800a3dd 	.word	0x0800a3dd
 800a394:	0800a3f9 	.word	0x0800a3f9
 800a398:	0800a3f9 	.word	0x0800a3f9
 800a39c:	0800a3f9 	.word	0x0800a3f9
 800a3a0:	0800a3eb 	.word	0x0800a3eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 fa0a 	bl	800a7c4 <TIM_OC1_SetConfig>
      break;
 800a3b0:	e025      	b.n	800a3fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fa93 	bl	800a8e4 <TIM_OC2_SetConfig>
      break;
 800a3be:	e01e      	b.n	800a3fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68b9      	ldr	r1, [r7, #8]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fb16 	bl	800a9f8 <TIM_OC3_SetConfig>
      break;
 800a3cc:	e017      	b.n	800a3fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fb97 	bl	800ab08 <TIM_OC4_SetConfig>
      break;
 800a3da:	e010      	b.n	800a3fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fbfa 	bl	800abdc <TIM_OC5_SetConfig>
      break;
 800a3e8:	e009      	b.n	800a3fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 fc57 	bl	800aca4 <TIM_OC6_SetConfig>
      break;
 800a3f6:	e002      	b.n	800a3fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a3fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a424:	2b01      	cmp	r3, #1
 800a426:	d101      	bne.n	800a42c <HAL_TIM_ConfigClockSource+0x1c>
 800a428:	2302      	movs	r3, #2
 800a42a:	e0b6      	b.n	800a59a <HAL_TIM_ConfigClockSource+0x18a>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a44a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a44e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a468:	d03e      	beq.n	800a4e8 <HAL_TIM_ConfigClockSource+0xd8>
 800a46a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a46e:	f200 8087 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a476:	f000 8086 	beq.w	800a586 <HAL_TIM_ConfigClockSource+0x176>
 800a47a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a47e:	d87f      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a480:	2b70      	cmp	r3, #112	@ 0x70
 800a482:	d01a      	beq.n	800a4ba <HAL_TIM_ConfigClockSource+0xaa>
 800a484:	2b70      	cmp	r3, #112	@ 0x70
 800a486:	d87b      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a488:	2b60      	cmp	r3, #96	@ 0x60
 800a48a:	d050      	beq.n	800a52e <HAL_TIM_ConfigClockSource+0x11e>
 800a48c:	2b60      	cmp	r3, #96	@ 0x60
 800a48e:	d877      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a490:	2b50      	cmp	r3, #80	@ 0x50
 800a492:	d03c      	beq.n	800a50e <HAL_TIM_ConfigClockSource+0xfe>
 800a494:	2b50      	cmp	r3, #80	@ 0x50
 800a496:	d873      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a498:	2b40      	cmp	r3, #64	@ 0x40
 800a49a:	d058      	beq.n	800a54e <HAL_TIM_ConfigClockSource+0x13e>
 800a49c:	2b40      	cmp	r3, #64	@ 0x40
 800a49e:	d86f      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a4a0:	2b30      	cmp	r3, #48	@ 0x30
 800a4a2:	d064      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x15e>
 800a4a4:	2b30      	cmp	r3, #48	@ 0x30
 800a4a6:	d86b      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	d060      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x15e>
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d867      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d05c      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x15e>
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	d05a      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x15e>
 800a4b8:	e062      	b.n	800a580 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4ca:	f000 fd62 	bl	800af92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	609a      	str	r2, [r3, #8]
      break;
 800a4e6:	e04f      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4f8:	f000 fd4b 	bl	800af92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689a      	ldr	r2, [r3, #8]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a50a:	609a      	str	r2, [r3, #8]
      break;
 800a50c:	e03c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a51a:	461a      	mov	r2, r3
 800a51c:	f000 fcbd 	bl	800ae9a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2150      	movs	r1, #80	@ 0x50
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fd16 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800a52c:	e02c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a53a:	461a      	mov	r2, r3
 800a53c:	f000 fcdc 	bl	800aef8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2160      	movs	r1, #96	@ 0x60
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fd06 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800a54c:	e01c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a55a:	461a      	mov	r2, r3
 800a55c:	f000 fc9d 	bl	800ae9a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2140      	movs	r1, #64	@ 0x40
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fcf6 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800a56c:	e00c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f000 fced 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800a57e:	e003      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	73fb      	strb	r3, [r7, #15]
      break;
 800a584:	e000      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_TIM_SlaveConfigSynchro+0x18>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e031      	b.n	800a61e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fbcf 	bl	800ad70 <TIM_SlaveTimer_SetConfig>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e018      	b.n	800a61e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a60a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a62e:	bf00      	nop
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a642:	bf00      	nop
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a46      	ldr	r2, [pc, #280]	@ (800a7a4 <TIM_Base_SetConfig+0x12c>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d013      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a696:	d00f      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a43      	ldr	r2, [pc, #268]	@ (800a7a8 <TIM_Base_SetConfig+0x130>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d00b      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a42      	ldr	r2, [pc, #264]	@ (800a7ac <TIM_Base_SetConfig+0x134>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d007      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a41      	ldr	r2, [pc, #260]	@ (800a7b0 <TIM_Base_SetConfig+0x138>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d003      	beq.n	800a6b8 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a40      	ldr	r2, [pc, #256]	@ (800a7b4 <TIM_Base_SetConfig+0x13c>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d108      	bne.n	800a6ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a35      	ldr	r2, [pc, #212]	@ (800a7a4 <TIM_Base_SetConfig+0x12c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d01f      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d8:	d01b      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a32      	ldr	r2, [pc, #200]	@ (800a7a8 <TIM_Base_SetConfig+0x130>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d017      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a31      	ldr	r2, [pc, #196]	@ (800a7ac <TIM_Base_SetConfig+0x134>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d013      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a30      	ldr	r2, [pc, #192]	@ (800a7b0 <TIM_Base_SetConfig+0x138>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d00f      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a2f      	ldr	r2, [pc, #188]	@ (800a7b4 <TIM_Base_SetConfig+0x13c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00b      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a2e      	ldr	r2, [pc, #184]	@ (800a7b8 <TIM_Base_SetConfig+0x140>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d007      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a2d      	ldr	r2, [pc, #180]	@ (800a7bc <TIM_Base_SetConfig+0x144>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d003      	beq.n	800a712 <TIM_Base_SetConfig+0x9a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a2c      	ldr	r2, [pc, #176]	@ (800a7c0 <TIM_Base_SetConfig+0x148>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d108      	bne.n	800a724 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a16      	ldr	r2, [pc, #88]	@ (800a7a4 <TIM_Base_SetConfig+0x12c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00f      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a18      	ldr	r2, [pc, #96]	@ (800a7b4 <TIM_Base_SetConfig+0x13c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a17      	ldr	r2, [pc, #92]	@ (800a7b8 <TIM_Base_SetConfig+0x140>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a16      	ldr	r2, [pc, #88]	@ (800a7bc <TIM_Base_SetConfig+0x144>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_Base_SetConfig+0xf8>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a15      	ldr	r2, [pc, #84]	@ (800a7c0 <TIM_Base_SetConfig+0x148>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d103      	bne.n	800a778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	691a      	ldr	r2, [r3, #16]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b01      	cmp	r3, #1
 800a788:	d105      	bne.n	800a796 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f023 0201 	bic.w	r2, r3, #1
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	611a      	str	r2, [r3, #16]
  }
}
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	40012c00 	.word	0x40012c00
 800a7a8:	40000400 	.word	0x40000400
 800a7ac:	40000800 	.word	0x40000800
 800a7b0:	40000c00 	.word	0x40000c00
 800a7b4:	40013400 	.word	0x40013400
 800a7b8:	40014000 	.word	0x40014000
 800a7bc:	40014400 	.word	0x40014400
 800a7c0:	40014800 	.word	0x40014800

0800a7c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f023 0201 	bic.w	r2, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 0303 	bic.w	r3, r3, #3
 800a7fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f023 0302 	bic.w	r3, r3, #2
 800a810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	4313      	orrs	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a2c      	ldr	r2, [pc, #176]	@ (800a8d0 <TIM_OC1_SetConfig+0x10c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d00f      	beq.n	800a844 <TIM_OC1_SetConfig+0x80>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a2b      	ldr	r2, [pc, #172]	@ (800a8d4 <TIM_OC1_SetConfig+0x110>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00b      	beq.n	800a844 <TIM_OC1_SetConfig+0x80>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d8 <TIM_OC1_SetConfig+0x114>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d007      	beq.n	800a844 <TIM_OC1_SetConfig+0x80>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a29      	ldr	r2, [pc, #164]	@ (800a8dc <TIM_OC1_SetConfig+0x118>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <TIM_OC1_SetConfig+0x80>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a28      	ldr	r2, [pc, #160]	@ (800a8e0 <TIM_OC1_SetConfig+0x11c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d10c      	bne.n	800a85e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f023 0308 	bic.w	r3, r3, #8
 800a84a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	4313      	orrs	r3, r2
 800a854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f023 0304 	bic.w	r3, r3, #4
 800a85c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a1b      	ldr	r2, [pc, #108]	@ (800a8d0 <TIM_OC1_SetConfig+0x10c>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00f      	beq.n	800a886 <TIM_OC1_SetConfig+0xc2>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d4 <TIM_OC1_SetConfig+0x110>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00b      	beq.n	800a886 <TIM_OC1_SetConfig+0xc2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a19      	ldr	r2, [pc, #100]	@ (800a8d8 <TIM_OC1_SetConfig+0x114>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d007      	beq.n	800a886 <TIM_OC1_SetConfig+0xc2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a18      	ldr	r2, [pc, #96]	@ (800a8dc <TIM_OC1_SetConfig+0x118>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d003      	beq.n	800a886 <TIM_OC1_SetConfig+0xc2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a17      	ldr	r2, [pc, #92]	@ (800a8e0 <TIM_OC1_SetConfig+0x11c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d111      	bne.n	800a8aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a88c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	621a      	str	r2, [r3, #32]
}
 800a8c4:	bf00      	nop
 800a8c6:	371c      	adds	r7, #28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	40012c00 	.word	0x40012c00
 800a8d4:	40013400 	.word	0x40013400
 800a8d8:	40014000 	.word	0x40014000
 800a8dc:	40014400 	.word	0x40014400
 800a8e0:	40014800 	.word	0x40014800

0800a8e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	f023 0210 	bic.w	r2, r3, #16
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	021b      	lsls	r3, r3, #8
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f023 0320 	bic.w	r3, r3, #32
 800a932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	011b      	lsls	r3, r3, #4
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a28      	ldr	r2, [pc, #160]	@ (800a9e4 <TIM_OC2_SetConfig+0x100>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d003      	beq.n	800a950 <TIM_OC2_SetConfig+0x6c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a27      	ldr	r2, [pc, #156]	@ (800a9e8 <TIM_OC2_SetConfig+0x104>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10d      	bne.n	800a96c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	011b      	lsls	r3, r3, #4
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	4313      	orrs	r3, r2
 800a962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a96a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e4 <TIM_OC2_SetConfig+0x100>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d00f      	beq.n	800a994 <TIM_OC2_SetConfig+0xb0>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a1c      	ldr	r2, [pc, #112]	@ (800a9e8 <TIM_OC2_SetConfig+0x104>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d00b      	beq.n	800a994 <TIM_OC2_SetConfig+0xb0>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a1b      	ldr	r2, [pc, #108]	@ (800a9ec <TIM_OC2_SetConfig+0x108>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d007      	beq.n	800a994 <TIM_OC2_SetConfig+0xb0>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f0 <TIM_OC2_SetConfig+0x10c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d003      	beq.n	800a994 <TIM_OC2_SetConfig+0xb0>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a19      	ldr	r2, [pc, #100]	@ (800a9f4 <TIM_OC2_SetConfig+0x110>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d113      	bne.n	800a9bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a99a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40012c00 	.word	0x40012c00
 800a9e8:	40013400 	.word	0x40013400
 800a9ec:	40014000 	.word	0x40014000
 800a9f0:	40014400 	.word	0x40014400
 800a9f4:	40014800 	.word	0x40014800

0800a9f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0303 	bic.w	r3, r3, #3
 800aa32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a27      	ldr	r2, [pc, #156]	@ (800aaf4 <TIM_OC3_SetConfig+0xfc>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d003      	beq.n	800aa62 <TIM_OC3_SetConfig+0x6a>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a26      	ldr	r2, [pc, #152]	@ (800aaf8 <TIM_OC3_SetConfig+0x100>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d10d      	bne.n	800aa7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a1c      	ldr	r2, [pc, #112]	@ (800aaf4 <TIM_OC3_SetConfig+0xfc>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d00f      	beq.n	800aaa6 <TIM_OC3_SetConfig+0xae>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a1b      	ldr	r2, [pc, #108]	@ (800aaf8 <TIM_OC3_SetConfig+0x100>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00b      	beq.n	800aaa6 <TIM_OC3_SetConfig+0xae>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a1a      	ldr	r2, [pc, #104]	@ (800aafc <TIM_OC3_SetConfig+0x104>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d007      	beq.n	800aaa6 <TIM_OC3_SetConfig+0xae>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a19      	ldr	r2, [pc, #100]	@ (800ab00 <TIM_OC3_SetConfig+0x108>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d003      	beq.n	800aaa6 <TIM_OC3_SetConfig+0xae>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a18      	ldr	r2, [pc, #96]	@ (800ab04 <TIM_OC3_SetConfig+0x10c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d113      	bne.n	800aace <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	011b      	lsls	r3, r3, #4
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	621a      	str	r2, [r3, #32]
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	40012c00 	.word	0x40012c00
 800aaf8:	40013400 	.word	0x40013400
 800aafc:	40014000 	.word	0x40014000
 800ab00:	40014400 	.word	0x40014400
 800ab04:	40014800 	.word	0x40014800

0800ab08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	021b      	lsls	r3, r3, #8
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	031b      	lsls	r3, r3, #12
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a18      	ldr	r2, [pc, #96]	@ (800abc8 <TIM_OC4_SetConfig+0xc0>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d00f      	beq.n	800ab8c <TIM_OC4_SetConfig+0x84>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a17      	ldr	r2, [pc, #92]	@ (800abcc <TIM_OC4_SetConfig+0xc4>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00b      	beq.n	800ab8c <TIM_OC4_SetConfig+0x84>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a16      	ldr	r2, [pc, #88]	@ (800abd0 <TIM_OC4_SetConfig+0xc8>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d007      	beq.n	800ab8c <TIM_OC4_SetConfig+0x84>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a15      	ldr	r2, [pc, #84]	@ (800abd4 <TIM_OC4_SetConfig+0xcc>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d003      	beq.n	800ab8c <TIM_OC4_SetConfig+0x84>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a14      	ldr	r2, [pc, #80]	@ (800abd8 <TIM_OC4_SetConfig+0xd0>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d109      	bne.n	800aba0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	019b      	lsls	r3, r3, #6
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40012c00 	.word	0x40012c00
 800abcc:	40013400 	.word	0x40013400
 800abd0:	40014000 	.word	0x40014000
 800abd4:	40014400 	.word	0x40014400
 800abd8:	40014800 	.word	0x40014800

0800abdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ac20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	041b      	lsls	r3, r3, #16
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a17      	ldr	r2, [pc, #92]	@ (800ac90 <TIM_OC5_SetConfig+0xb4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d00f      	beq.n	800ac56 <TIM_OC5_SetConfig+0x7a>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a16      	ldr	r2, [pc, #88]	@ (800ac94 <TIM_OC5_SetConfig+0xb8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d00b      	beq.n	800ac56 <TIM_OC5_SetConfig+0x7a>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <TIM_OC5_SetConfig+0xbc>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d007      	beq.n	800ac56 <TIM_OC5_SetConfig+0x7a>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a14      	ldr	r2, [pc, #80]	@ (800ac9c <TIM_OC5_SetConfig+0xc0>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d003      	beq.n	800ac56 <TIM_OC5_SetConfig+0x7a>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a13      	ldr	r2, [pc, #76]	@ (800aca0 <TIM_OC5_SetConfig+0xc4>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d109      	bne.n	800ac6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	621a      	str	r2, [r3, #32]
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	40012c00 	.word	0x40012c00
 800ac94:	40013400 	.word	0x40013400
 800ac98:	40014000 	.word	0x40014000
 800ac9c:	40014400 	.word	0x40014400
 800aca0:	40014800 	.word	0x40014800

0800aca4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
 800acb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800acea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	051b      	lsls	r3, r3, #20
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a18      	ldr	r2, [pc, #96]	@ (800ad5c <TIM_OC6_SetConfig+0xb8>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00f      	beq.n	800ad20 <TIM_OC6_SetConfig+0x7c>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a17      	ldr	r2, [pc, #92]	@ (800ad60 <TIM_OC6_SetConfig+0xbc>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00b      	beq.n	800ad20 <TIM_OC6_SetConfig+0x7c>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a16      	ldr	r2, [pc, #88]	@ (800ad64 <TIM_OC6_SetConfig+0xc0>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d007      	beq.n	800ad20 <TIM_OC6_SetConfig+0x7c>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a15      	ldr	r2, [pc, #84]	@ (800ad68 <TIM_OC6_SetConfig+0xc4>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <TIM_OC6_SetConfig+0x7c>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a14      	ldr	r2, [pc, #80]	@ (800ad6c <TIM_OC6_SetConfig+0xc8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d109      	bne.n	800ad34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	029b      	lsls	r3, r3, #10
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	621a      	str	r2, [r3, #32]
}
 800ad4e:	bf00      	nop
 800ad50:	371c      	adds	r7, #28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	40012c00 	.word	0x40012c00
 800ad60:	40013400 	.word	0x40013400
 800ad64:	40014000 	.word	0x40014000
 800ad68:	40014400 	.word	0x40014400
 800ad6c:	40014800 	.word	0x40014800

0800ad70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ad8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	2b70      	cmp	r3, #112	@ 0x70
 800adc0:	d01a      	beq.n	800adf8 <TIM_SlaveTimer_SetConfig+0x88>
 800adc2:	2b70      	cmp	r3, #112	@ 0x70
 800adc4:	d860      	bhi.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
 800adc6:	2b60      	cmp	r3, #96	@ 0x60
 800adc8:	d054      	beq.n	800ae74 <TIM_SlaveTimer_SetConfig+0x104>
 800adca:	2b60      	cmp	r3, #96	@ 0x60
 800adcc:	d85c      	bhi.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
 800adce:	2b50      	cmp	r3, #80	@ 0x50
 800add0:	d046      	beq.n	800ae60 <TIM_SlaveTimer_SetConfig+0xf0>
 800add2:	2b50      	cmp	r3, #80	@ 0x50
 800add4:	d858      	bhi.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
 800add6:	2b40      	cmp	r3, #64	@ 0x40
 800add8:	d019      	beq.n	800ae0e <TIM_SlaveTimer_SetConfig+0x9e>
 800adda:	2b40      	cmp	r3, #64	@ 0x40
 800addc:	d854      	bhi.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
 800adde:	2b30      	cmp	r3, #48	@ 0x30
 800ade0:	d055      	beq.n	800ae8e <TIM_SlaveTimer_SetConfig+0x11e>
 800ade2:	2b30      	cmp	r3, #48	@ 0x30
 800ade4:	d850      	bhi.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	d051      	beq.n	800ae8e <TIM_SlaveTimer_SetConfig+0x11e>
 800adea:	2b20      	cmp	r3, #32
 800adec:	d84c      	bhi.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d04d      	beq.n	800ae8e <TIM_SlaveTimer_SetConfig+0x11e>
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	d04b      	beq.n	800ae8e <TIM_SlaveTimer_SetConfig+0x11e>
 800adf6:	e047      	b.n	800ae88 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800ae08:	f000 f8c3 	bl	800af92 <TIM_ETR_SetConfig>
      break;
 800ae0c:	e040      	b.n	800ae90 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	d101      	bne.n	800ae1a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e03b      	b.n	800ae92 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6a1a      	ldr	r2, [r3, #32]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0201 	bic.w	r2, r2, #1
 800ae30:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae40:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	621a      	str	r2, [r3, #32]
      break;
 800ae5e:	e017      	b.n	800ae90 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	f000 f814 	bl	800ae9a <TIM_TI1_ConfigInputStage>
      break;
 800ae72:	e00d      	b.n	800ae90 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae80:	461a      	mov	r2, r3
 800ae82:	f000 f839 	bl	800aef8 <TIM_TI2_ConfigInputStage>
      break;
 800ae86:	e003      	b.n	800ae90 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae8c:	e000      	b.n	800ae90 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800ae8e:	bf00      	nop
  }

  return status;
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b087      	sub	sp, #28
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	f023 0201 	bic.w	r2, r3, #1
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	011b      	lsls	r3, r3, #4
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	f023 030a 	bic.w	r3, r3, #10
 800aed6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	4313      	orrs	r3, r2
 800aede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	621a      	str	r2, [r3, #32]
}
 800aeec:	bf00      	nop
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	f023 0210 	bic.w	r2, r3, #16
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	031b      	lsls	r3, r3, #12
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	011b      	lsls	r3, r3, #4
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	621a      	str	r2, [r3, #32]
}
 800af4c:	bf00      	nop
 800af4e:	371c      	adds	r7, #28
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800af6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4313      	orrs	r3, r2
 800af7a:	f043 0307 	orr.w	r3, r3, #7
 800af7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	609a      	str	r2, [r3, #8]
}
 800af86:	bf00      	nop
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af92:	b480      	push	{r7}
 800af94:	b087      	sub	sp, #28
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	021a      	lsls	r2, r3, #8
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	431a      	orrs	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4313      	orrs	r3, r2
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	609a      	str	r2, [r3, #8]
}
 800afc6:	bf00      	nop
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
	...

0800afd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afe8:	2302      	movs	r3, #2
 800afea:	e068      	b.n	800b0be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a2e      	ldr	r2, [pc, #184]	@ (800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d004      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a2d      	ldr	r2, [pc, #180]	@ (800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d108      	bne.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a1e      	ldr	r2, [pc, #120]	@ (800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d01d      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b05e:	d018      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a1b      	ldr	r2, [pc, #108]	@ (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d013      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a1a      	ldr	r2, [pc, #104]	@ (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d00e      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a18      	ldr	r2, [pc, #96]	@ (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d009      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a13      	ldr	r2, [pc, #76]	@ (800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d004      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a14      	ldr	r2, [pc, #80]	@ (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d10c      	bne.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	40012c00 	.word	0x40012c00
 800b0d0:	40013400 	.word	0x40013400
 800b0d4:	40000400 	.word	0x40000400
 800b0d8:	40000800 	.word	0x40000800
 800b0dc:	40000c00 	.word	0x40000c00
 800b0e0:	40014000 	.word	0x40014000

0800b0e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b130:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b134:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	b29a      	uxth	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b156:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b15a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b162:	b29a      	uxth	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	b29b      	uxth	r3, r3
 800b168:	43db      	mvns	r3, r3
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	4013      	ands	r3, r2
 800b16e:	b29a      	uxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	1d3b      	adds	r3, r7, #4
 800b18e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b09d      	sub	sp, #116	@ 0x74
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b1e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	78db      	ldrb	r3, [r3, #3]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d81f      	bhi.n	800b232 <USB_ActivateEndpoint+0x72>
 800b1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f8 <USB_ActivateEndpoint+0x38>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b209 	.word	0x0800b209
 800b1fc:	0800b225 	.word	0x0800b225
 800b200:	0800b23b 	.word	0x0800b23b
 800b204:	0800b217 	.word	0x0800b217
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b208:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b20c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b210:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b214:	e012      	b.n	800b23c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b216:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b21a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b21e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b222:	e00b      	b.n	800b23c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b22c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b230:	e004      	b.n	800b23c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800b238:	e000      	b.n	800b23c <USB_ActivateEndpoint+0x7c>
      break;
 800b23a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	441a      	add	r2, r3
 800b246:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b24a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b24e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	b21b      	sxth	r3, r3
 800b26e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b276:	b21a      	sxth	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	b21b      	sxth	r3, r3
 800b27e:	4313      	orrs	r3, r2
 800b280:	b21b      	sxth	r3, r3
 800b282:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	441a      	add	r2, r3
 800b290:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b29c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	7b1b      	ldrb	r3, [r3, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f040 8178 	bne.w	800b5a2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	785b      	ldrb	r3, [r3, #1]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 8084 	beq.w	800b3c4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	61bb      	str	r3, [r7, #24]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	00da      	lsls	r2, r3, #3
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	88db      	ldrh	r3, [r3, #6]
 800b2e4:	085b      	lsrs	r3, r3, #1
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	827b      	strh	r3, [r7, #18]
 800b2fe:	8a7b      	ldrh	r3, [r7, #18]
 800b300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01b      	beq.n	800b340 <USB_ActivateEndpoint+0x180>
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b31e:	823b      	strh	r3, [r7, #16]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	441a      	add	r2, r3
 800b32a:	8a3b      	ldrh	r3, [r7, #16]
 800b32c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b338:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	78db      	ldrb	r3, [r3, #3]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d020      	beq.n	800b38a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	b29b      	uxth	r3, r3
 800b356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b35a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b35e:	81bb      	strh	r3, [r7, #12]
 800b360:	89bb      	ldrh	r3, [r7, #12]
 800b362:	f083 0320 	eor.w	r3, r3, #32
 800b366:	81bb      	strh	r3, [r7, #12]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	441a      	add	r2, r3
 800b372:	89bb      	ldrh	r3, [r7, #12]
 800b374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b37c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b384:	b29b      	uxth	r3, r3
 800b386:	8013      	strh	r3, [r2, #0]
 800b388:	e2d5      	b.n	800b936 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	b29b      	uxth	r3, r3
 800b398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b39c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3a0:	81fb      	strh	r3, [r7, #14]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	441a      	add	r2, r3
 800b3ac:	89fb      	ldrh	r3, [r7, #14]
 800b3ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	8013      	strh	r3, [r2, #0]
 800b3c2:	e2b8      	b.n	800b936 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	4413      	add	r3, r2
 800b3d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	00da      	lsls	r2, r3, #3
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	88db      	ldrh	r3, [r3, #6]
 800b3ec:	085b      	lsrs	r3, r3, #1
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b402:	b29b      	uxth	r3, r3
 800b404:	461a      	mov	r2, r3
 800b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b408:	4413      	add	r3, r2
 800b40a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	00da      	lsls	r2, r3, #3
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	4413      	add	r3, r2
 800b416:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b41a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	b29b      	uxth	r3, r3
 800b422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b426:	b29a      	uxth	r2, r3
 800b428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42a:	801a      	strh	r2, [r3, #0]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10a      	bne.n	800b44a <USB_ActivateEndpoint+0x28a>
 800b434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b442:	b29a      	uxth	r2, r3
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	801a      	strh	r2, [r3, #0]
 800b448:	e039      	b.n	800b4be <USB_ActivateEndpoint+0x2fe>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b450:	d818      	bhi.n	800b484 <USB_ActivateEndpoint+0x2c4>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	085b      	lsrs	r3, r3, #1
 800b458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <USB_ActivateEndpoint+0x2ac>
 800b466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b468:	3301      	adds	r3, #1
 800b46a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	b29a      	uxth	r2, r3
 800b472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b474:	b29b      	uxth	r3, r3
 800b476:	029b      	lsls	r3, r3, #10
 800b478:	b29b      	uxth	r3, r3
 800b47a:	4313      	orrs	r3, r2
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	e01c      	b.n	800b4be <USB_ActivateEndpoint+0x2fe>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	095b      	lsrs	r3, r3, #5
 800b48a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f003 031f 	and.w	r3, r3, #31
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <USB_ActivateEndpoint+0x2de>
 800b498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b49a:	3b01      	subs	r3, #1
 800b49c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	029b      	lsls	r3, r3, #10
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b4cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d01b      	beq.n	800b50e <USB_ActivateEndpoint+0x34e>
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ec:	843b      	strh	r3, [r7, #32]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	441a      	add	r2, r3
 800b4f8:	8c3b      	ldrh	r3, [r7, #32]
 800b4fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b502:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d124      	bne.n	800b560 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	b29b      	uxth	r3, r3
 800b524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b52c:	83bb      	strh	r3, [r7, #28]
 800b52e:	8bbb      	ldrh	r3, [r7, #28]
 800b530:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b534:	83bb      	strh	r3, [r7, #28]
 800b536:	8bbb      	ldrh	r3, [r7, #28]
 800b538:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b53c:	83bb      	strh	r3, [r7, #28]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	441a      	add	r2, r3
 800b548:	8bbb      	ldrh	r3, [r7, #28]
 800b54a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b54e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	8013      	strh	r3, [r2, #0]
 800b55e:	e1ea      	b.n	800b936 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b576:	83fb      	strh	r3, [r7, #30]
 800b578:	8bfb      	ldrh	r3, [r7, #30]
 800b57a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b57e:	83fb      	strh	r3, [r7, #30]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	441a      	add	r2, r3
 800b58a:	8bfb      	ldrh	r3, [r7, #30]
 800b58c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	8013      	strh	r3, [r2, #0]
 800b5a0:	e1c9      	b.n	800b936 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	78db      	ldrb	r3, [r3, #3]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d11e      	bne.n	800b5e8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	441a      	add	r2, r3
 800b5ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b5d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b5de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	8013      	strh	r3, [r2, #0]
 800b5e6:	e01d      	b.n	800b624 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	441a      	add	r2, r3
 800b60c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b61c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b620:	b29b      	uxth	r3, r3
 800b622:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b62e:	b29b      	uxth	r3, r3
 800b630:	461a      	mov	r2, r3
 800b632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b634:	4413      	add	r3, r2
 800b636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	00da      	lsls	r2, r3, #3
 800b63e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b640:	4413      	add	r3, r2
 800b642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b646:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	891b      	ldrh	r3, [r3, #8]
 800b64c:	085b      	lsrs	r3, r3, #1
 800b64e:	b29b      	uxth	r3, r3
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b656:	801a      	strh	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b662:	b29b      	uxth	r3, r3
 800b664:	461a      	mov	r2, r3
 800b666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b668:	4413      	add	r3, r2
 800b66a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	00da      	lsls	r2, r3, #3
 800b672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b674:	4413      	add	r3, r2
 800b676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b67a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	895b      	ldrh	r3, [r3, #10]
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	b29b      	uxth	r3, r3
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	b29a      	uxth	r2, r3
 800b688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b68a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	785b      	ldrb	r3, [r3, #1]
 800b690:	2b00      	cmp	r3, #0
 800b692:	f040 8093 	bne.w	800b7bc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b6a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b6aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d01b      	beq.n	800b6ea <USB_ActivateEndpoint+0x52a>
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	441a      	add	r2, r3
 800b6d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b6d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b6f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d01b      	beq.n	800b73a <USB_ActivateEndpoint+0x57a>
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b718:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	441a      	add	r2, r3
 800b724:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b72a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b72e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b732:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b736:	b29b      	uxth	r3, r3
 800b738:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	b29b      	uxth	r3, r3
 800b748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b74c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b750:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b752:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b754:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b758:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b75a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b75c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b760:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	441a      	add	r2, r3
 800b76c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b76e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b77e:	b29b      	uxth	r3, r3
 800b780:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	b29b      	uxth	r3, r3
 800b790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b798:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	441a      	add	r2, r3
 800b7a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	8013      	strh	r3, [r2, #0]
 800b7ba:	e0bc      	b.n	800b936 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	881b      	ldrh	r3, [r3, #0]
 800b7c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b7cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b7d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01d      	beq.n	800b814 <USB_ActivateEndpoint+0x654>
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	441a      	add	r2, r3
 800b7fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b80c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b810:	b29b      	uxth	r3, r3
 800b812:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b824:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d01d      	beq.n	800b86c <USB_ActivateEndpoint+0x6ac>
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b846:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	441a      	add	r2, r3
 800b854:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b85c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b864:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b868:	b29b      	uxth	r3, r3
 800b86a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	78db      	ldrb	r3, [r3, #3]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d024      	beq.n	800b8be <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	b29b      	uxth	r3, r3
 800b882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b88a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b88e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b892:	f083 0320 	eor.w	r3, r3, #32
 800b896:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	441a      	add	r2, r3
 800b8a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b8a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	8013      	strh	r3, [r2, #0]
 800b8bc:	e01d      	b.n	800b8fa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	441a      	add	r2, r3
 800b8e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b8e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b910:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	441a      	add	r2, r3
 800b91e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b92a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b92e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b932:	b29b      	uxth	r3, r3
 800b934:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b936:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3774      	adds	r7, #116	@ 0x74
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop

0800b948 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b948:	b480      	push	{r7}
 800b94a:	b08d      	sub	sp, #52	@ 0x34
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	7b1b      	ldrb	r3, [r3, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	f040 808e 	bne.w	800ba78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d044      	beq.n	800b9ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4413      	add	r3, r2
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	81bb      	strh	r3, [r7, #12]
 800b972:	89bb      	ldrh	r3, [r7, #12]
 800b974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d01b      	beq.n	800b9b4 <USB_DeactivateEndpoint+0x6c>
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b98e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b992:	817b      	strh	r3, [r7, #10]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	441a      	add	r2, r3
 800b99e:	897b      	ldrh	r3, [r7, #10]
 800b9a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	881b      	ldrh	r3, [r3, #0]
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9ca:	813b      	strh	r3, [r7, #8]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	441a      	add	r2, r3
 800b9d6:	893b      	ldrh	r3, [r7, #8]
 800b9d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	8013      	strh	r3, [r2, #0]
 800b9ec:	e192      	b.n	800bd14 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	827b      	strh	r3, [r7, #18]
 800b9fc:	8a7b      	ldrh	r3, [r7, #18]
 800b9fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d01b      	beq.n	800ba3e <USB_DeactivateEndpoint+0xf6>
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba1c:	823b      	strh	r3, [r7, #16]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	441a      	add	r2, r3
 800ba28:	8a3b      	ldrh	r3, [r7, #16]
 800ba2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba54:	81fb      	strh	r3, [r7, #14]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	441a      	add	r2, r3
 800ba60:	89fb      	ldrh	r3, [r7, #14]
 800ba62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	8013      	strh	r3, [r2, #0]
 800ba76:	e14d      	b.n	800bd14 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	785b      	ldrb	r3, [r3, #1]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 80a5 	bne.w	800bbcc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	843b      	strh	r3, [r7, #32]
 800ba90:	8c3b      	ldrh	r3, [r7, #32]
 800ba92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d01b      	beq.n	800bad2 <USB_DeactivateEndpoint+0x18a>
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4413      	add	r3, r2
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bab0:	83fb      	strh	r3, [r7, #30]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	441a      	add	r2, r3
 800babc:	8bfb      	ldrh	r3, [r7, #30]
 800babe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bac6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800baca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bace:	b29b      	uxth	r3, r3
 800bad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	83bb      	strh	r3, [r7, #28]
 800bae0:	8bbb      	ldrh	r3, [r7, #28]
 800bae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d01b      	beq.n	800bb22 <USB_DeactivateEndpoint+0x1da>
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bafc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb00:	837b      	strh	r3, [r7, #26]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	441a      	add	r2, r3
 800bb0c:	8b7b      	ldrh	r3, [r7, #26]
 800bb0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb38:	833b      	strh	r3, [r7, #24]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	441a      	add	r2, r3
 800bb44:	8b3b      	ldrh	r3, [r7, #24]
 800bb46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb70:	82fb      	strh	r3, [r7, #22]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	441a      	add	r2, r3
 800bb7c:	8afb      	ldrh	r3, [r7, #22]
 800bb7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bba8:	82bb      	strh	r3, [r7, #20]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	441a      	add	r2, r3
 800bbb4:	8abb      	ldrh	r3, [r7, #20]
 800bbb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	8013      	strh	r3, [r2, #0]
 800bbca:	e0a3      	b.n	800bd14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	881b      	ldrh	r3, [r3, #0]
 800bbd8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bbda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bbdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d01b      	beq.n	800bc1c <USB_DeactivateEndpoint+0x2d4>
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbfa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	441a      	add	r2, r3
 800bc06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bc08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bc2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bc2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01b      	beq.n	800bc6c <USB_DeactivateEndpoint+0x324>
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	441a      	add	r2, r3
 800bc56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bc58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc82:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	441a      	add	r2, r3
 800bc8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	441a      	add	r2, r3
 800bcc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bcee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcf2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	441a      	add	r2, r3
 800bcfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bd00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3734      	adds	r7, #52	@ 0x34
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b0c2      	sub	sp, #264	@ 0x108
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd30:	6018      	str	r0, [r3, #0]
 800bd32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd3a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	785b      	ldrb	r3, [r3, #1]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	f040 86b7 	bne.w	800cabc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bd4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	699a      	ldr	r2, [r3, #24]
 800bd5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d908      	bls.n	800bd7c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bd6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bd7a:	e007      	b.n	800bd8c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bd8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	7b1b      	ldrb	r3, [r3, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d13a      	bne.n	800be12 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6959      	ldr	r1, [r3, #20]
 800bda8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	88da      	ldrh	r2, [r3, #6]
 800bdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bdbe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bdc2:	6800      	ldr	r0, [r0, #0]
 800bdc4:	f001 fc99 	bl	800d6fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	613b      	str	r3, [r7, #16]
 800bdd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	461a      	mov	r2, r3
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	4413      	add	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	00da      	lsls	r2, r3, #3
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be08:	b29a      	uxth	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	801a      	strh	r2, [r3, #0]
 800be0e:	f000 be1f 	b.w	800ca50 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800be12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	78db      	ldrb	r3, [r3, #3]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	f040 8462 	bne.w	800c6e8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800be24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6a1a      	ldr	r2, [r3, #32]
 800be30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	f240 83df 	bls.w	800c600 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800be42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	881b      	ldrh	r3, [r3, #0]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be68:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800be6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	441a      	add	r2, r3
 800be86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800be8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be92:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800be96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800be9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6a1a      	ldr	r2, [r3, #32]
 800beaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 81c7 	beq.w	800c272 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	633b      	str	r3, [r7, #48]	@ 0x30
 800bef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	785b      	ldrb	r3, [r3, #1]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d177      	bne.n	800bff0 <USB_EPStartXfer+0x2ce>
 800bf00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf20:	4413      	add	r3, r2
 800bf22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	00da      	lsls	r2, r3, #3
 800bf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf34:	4413      	add	r3, r2
 800bf36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4a:	801a      	strh	r2, [r3, #0]
 800bf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <USB_EPStartXfer+0x248>
 800bf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf66:	801a      	strh	r2, [r3, #0]
 800bf68:	e067      	b.n	800c03a <USB_EPStartXfer+0x318>
 800bf6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf70:	d81c      	bhi.n	800bfac <USB_EPStartXfer+0x28a>
 800bf72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf76:	085b      	lsrs	r3, r3, #1
 800bf78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d004      	beq.n	800bf92 <USB_EPStartXfer+0x270>
 800bf88:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	029b      	lsls	r3, r3, #10
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa8:	801a      	strh	r2, [r3, #0]
 800bfaa:	e046      	b.n	800c03a <USB_EPStartXfer+0x318>
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb0:	095b      	lsrs	r3, r3, #5
 800bfb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfba:	f003 031f 	and.w	r3, r3, #31
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d104      	bne.n	800bfcc <USB_EPStartXfer+0x2aa>
 800bfc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	029b      	lsls	r3, r3, #10
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	801a      	strh	r2, [r3, #0]
 800bfee:	e024      	b.n	800c03a <USB_EPStartXfer+0x318>
 800bff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d11c      	bne.n	800c03a <USB_EPStartXfer+0x318>
 800c000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c00e:	b29b      	uxth	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	4413      	add	r3, r2
 800c016:	633b      	str	r3, [r7, #48]	@ 0x30
 800c018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	00da      	lsls	r2, r3, #3
 800c026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c028:	4413      	add	r3, r2
 800c02a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c034:	b29a      	uxth	r2, r3
 800c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c038:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	895b      	ldrh	r3, [r3, #10]
 800c046:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6959      	ldr	r1, [r3, #20]
 800c056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c060:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c064:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c068:	6800      	ldr	r0, [r0, #0]
 800c06a:	f001 fb46 	bl	800d6fa <USB_WritePMA>
            ep->xfer_buff += len;
 800c06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	695a      	ldr	r2, [r3, #20]
 800c07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c07e:	441a      	add	r2, r3
 800c080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c08c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6a1a      	ldr	r2, [r3, #32]
 800c098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d90f      	bls.n	800c0c8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6a1a      	ldr	r2, [r3, #32]
 800c0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0b8:	1ad2      	subs	r2, r2, r3
 800c0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	621a      	str	r2, [r3, #32]
 800c0c6:	e00e      	b.n	800c0e6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6a1b      	ldr	r3, [r3, #32]
 800c0d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	785b      	ldrb	r3, [r3, #1]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d177      	bne.n	800c1e6 <USB_EPStartXfer+0x4c4>
 800c0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	61bb      	str	r3, [r7, #24]
 800c102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c110:	b29b      	uxth	r3, r3
 800c112:	461a      	mov	r2, r3
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	4413      	add	r3, r2
 800c118:	61bb      	str	r3, [r7, #24]
 800c11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	00da      	lsls	r2, r3, #3
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	4413      	add	r3, r2
 800c12c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	801a      	strh	r2, [r3, #0]
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <USB_EPStartXfer+0x43e>
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c158:	b29a      	uxth	r2, r3
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	e06d      	b.n	800c23c <USB_EPStartXfer+0x51a>
 800c160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c164:	2b3e      	cmp	r3, #62	@ 0x3e
 800c166:	d81c      	bhi.n	800c1a2 <USB_EPStartXfer+0x480>
 800c168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c16c:	085b      	lsrs	r3, r3, #1
 800c16e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <USB_EPStartXfer+0x466>
 800c17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c182:	3301      	adds	r3, #1
 800c184:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c192:	b29b      	uxth	r3, r3
 800c194:	029b      	lsls	r3, r3, #10
 800c196:	b29b      	uxth	r3, r3
 800c198:	4313      	orrs	r3, r2
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	801a      	strh	r2, [r3, #0]
 800c1a0:	e04c      	b.n	800c23c <USB_EPStartXfer+0x51a>
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a6:	095b      	lsrs	r3, r3, #5
 800c1a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b0:	f003 031f 	and.w	r3, r3, #31
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d104      	bne.n	800c1c2 <USB_EPStartXfer+0x4a0>
 800c1b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	029b      	lsls	r3, r3, #10
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	801a      	strh	r2, [r3, #0]
 800c1e4:	e02a      	b.n	800c23c <USB_EPStartXfer+0x51a>
 800c1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	785b      	ldrb	r3, [r3, #1]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d122      	bne.n	800c23c <USB_EPStartXfer+0x51a>
 800c1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	623b      	str	r3, [r7, #32]
 800c202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c210:	b29b      	uxth	r3, r3
 800c212:	461a      	mov	r2, r3
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	4413      	add	r3, r2
 800c218:	623b      	str	r3, [r7, #32]
 800c21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	00da      	lsls	r2, r3, #3
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	4413      	add	r3, r2
 800c22c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c230:	61fb      	str	r3, [r7, #28]
 800c232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c236:	b29a      	uxth	r2, r3
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	891b      	ldrh	r3, [r3, #8]
 800c248:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6959      	ldr	r1, [r3, #20]
 800c258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c262:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c266:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	f001 fa45 	bl	800d6fa <USB_WritePMA>
 800c270:	e3ee      	b.n	800ca50 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d177      	bne.n	800c372 <USB_EPStartXfer+0x650>
 800c282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2a2:	4413      	add	r3, r2
 800c2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	00da      	lsls	r2, r3, #3
 800c2b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2cc:	801a      	strh	r2, [r3, #0]
 800c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <USB_EPStartXfer+0x5ca>
 800c2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2e8:	801a      	strh	r2, [r3, #0]
 800c2ea:	e06d      	b.n	800c3c8 <USB_EPStartXfer+0x6a6>
 800c2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2f2:	d81c      	bhi.n	800c32e <USB_EPStartXfer+0x60c>
 800c2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f8:	085b      	lsrs	r3, r3, #1
 800c2fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <USB_EPStartXfer+0x5f2>
 800c30a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c30e:	3301      	adds	r3, #1
 800c310:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	b29a      	uxth	r2, r3
 800c31a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c31e:	b29b      	uxth	r3, r3
 800c320:	029b      	lsls	r3, r3, #10
 800c322:	b29b      	uxth	r3, r3
 800c324:	4313      	orrs	r3, r2
 800c326:	b29a      	uxth	r2, r3
 800c328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c32a:	801a      	strh	r2, [r3, #0]
 800c32c:	e04c      	b.n	800c3c8 <USB_EPStartXfer+0x6a6>
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33c:	f003 031f 	and.w	r3, r3, #31
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <USB_EPStartXfer+0x62c>
 800c344:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c348:	3b01      	subs	r3, #1
 800c34a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c34e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	b29a      	uxth	r2, r3
 800c354:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c358:	b29b      	uxth	r3, r3
 800c35a:	029b      	lsls	r3, r3, #10
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	4313      	orrs	r3, r2
 800c360:	b29b      	uxth	r3, r3
 800c362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c36e:	801a      	strh	r2, [r3, #0]
 800c370:	e02a      	b.n	800c3c8 <USB_EPStartXfer+0x6a6>
 800c372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	785b      	ldrb	r3, [r3, #1]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d122      	bne.n	800c3c8 <USB_EPStartXfer+0x6a6>
 800c382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c38e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a2:	4413      	add	r3, r2
 800c3a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	00da      	lsls	r2, r3, #3
 800c3b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	891b      	ldrh	r3, [r3, #8]
 800c3d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6959      	ldr	r1, [r3, #20]
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c3ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c3f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c3f6:	6800      	ldr	r0, [r0, #0]
 800c3f8:	f001 f97f 	bl	800d6fa <USB_WritePMA>
            ep->xfer_buff += len;
 800c3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40c:	441a      	add	r2, r3
 800c40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6a1a      	ldr	r2, [r3, #32]
 800c426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c42a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	429a      	cmp	r2, r3
 800c434:	d90f      	bls.n	800c456 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c43a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6a1a      	ldr	r2, [r3, #32]
 800c442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c446:	1ad2      	subs	r2, r2, r3
 800c448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	621a      	str	r2, [r3, #32]
 800c454:	e00e      	b.n	800c474 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c45a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c46a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2200      	movs	r2, #0
 800c472:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	785b      	ldrb	r3, [r3, #1]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d177      	bne.n	800c580 <USB_EPStartXfer+0x85e>
 800c490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b0:	4413      	add	r3, r2
 800c4b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	00da      	lsls	r2, r3, #3
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c4ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4da:	801a      	strh	r2, [r3, #0]
 800c4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10a      	bne.n	800c4fa <USB_EPStartXfer+0x7d8>
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f6:	801a      	strh	r2, [r3, #0]
 800c4f8:	e067      	b.n	800c5ca <USB_EPStartXfer+0x8a8>
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800c500:	d81c      	bhi.n	800c53c <USB_EPStartXfer+0x81a>
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c506:	085b      	lsrs	r3, r3, #1
 800c508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <USB_EPStartXfer+0x800>
 800c518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c51c:	3301      	adds	r3, #1
 800c51e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	b29a      	uxth	r2, r3
 800c528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	029b      	lsls	r3, r3, #10
 800c530:	b29b      	uxth	r3, r3
 800c532:	4313      	orrs	r3, r2
 800c534:	b29a      	uxth	r2, r3
 800c536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c538:	801a      	strh	r2, [r3, #0]
 800c53a:	e046      	b.n	800c5ca <USB_EPStartXfer+0x8a8>
 800c53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c540:	095b      	lsrs	r3, r3, #5
 800c542:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c54a:	f003 031f 	and.w	r3, r3, #31
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d104      	bne.n	800c55c <USB_EPStartXfer+0x83a>
 800c552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c556:	3b01      	subs	r3, #1
 800c558:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	b29a      	uxth	r2, r3
 800c562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c566:	b29b      	uxth	r3, r3
 800c568:	029b      	lsls	r3, r3, #10
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	4313      	orrs	r3, r2
 800c56e:	b29b      	uxth	r3, r3
 800c570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c578:	b29a      	uxth	r2, r3
 800c57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c57c:	801a      	strh	r2, [r3, #0]
 800c57e:	e024      	b.n	800c5ca <USB_EPStartXfer+0x8a8>
 800c580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d11c      	bne.n	800c5ca <USB_EPStartXfer+0x8a8>
 800c590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a4:	4413      	add	r3, r2
 800c5a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	00da      	lsls	r2, r3, #3
 800c5b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c5ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	895b      	ldrh	r3, [r3, #10]
 800c5d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6959      	ldr	r1, [r3, #20]
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c5f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c5f8:	6800      	ldr	r0, [r0, #0]
 800c5fa:	f001 f87e 	bl	800d6fa <USB_WritePMA>
 800c5fe:	e227      	b.n	800ca50 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6a1b      	ldr	r3, [r3, #32]
 800c60c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c636:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c63e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	441a      	add	r2, r3
 800c654:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c65c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c668:	b29b      	uxth	r3, r3
 800c66a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c67c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c686:	b29b      	uxth	r3, r3
 800c688:	461a      	mov	r2, r3
 800c68a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c68c:	4413      	add	r3, r2
 800c68e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	00da      	lsls	r2, r3, #3
 800c69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c6b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	891b      	ldrh	r3, [r3, #8]
 800c6be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6959      	ldr	r1, [r3, #20]
 800c6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c6d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c6dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c6e0:	6800      	ldr	r0, [r0, #0]
 800c6e2:	f001 f80a 	bl	800d6fa <USB_WritePMA>
 800c6e6:	e1b3      	b.n	800ca50 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6a1a      	ldr	r2, [r3, #32]
 800c6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f8:	1ad2      	subs	r2, r2, r3
 800c6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c70a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	b29b      	uxth	r3, r3
 800c724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 80c6 	beq.w	800c8ba <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c72e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	673b      	str	r3, [r7, #112]	@ 0x70
 800c73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d177      	bne.n	800c83a <USB_EPStartXfer+0xb18>
 800c74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c75a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c764:	b29b      	uxth	r3, r3
 800c766:	461a      	mov	r2, r3
 800c768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c76a:	4413      	add	r3, r2
 800c76c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	00da      	lsls	r2, r3, #3
 800c77c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c77e:	4413      	add	r3, r2
 800c780:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c784:	667b      	str	r3, [r7, #100]	@ 0x64
 800c786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c790:	b29a      	uxth	r2, r3
 800c792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c794:	801a      	strh	r2, [r3, #0]
 800c796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10a      	bne.n	800c7b4 <USB_EPStartXfer+0xa92>
 800c79e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7b0:	801a      	strh	r2, [r3, #0]
 800c7b2:	e067      	b.n	800c884 <USB_EPStartXfer+0xb62>
 800c7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7ba:	d81c      	bhi.n	800c7f6 <USB_EPStartXfer+0xad4>
 800c7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d004      	beq.n	800c7dc <USB_EPStartXfer+0xaba>
 800c7d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c7dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	029b      	lsls	r3, r3, #10
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7f2:	801a      	strh	r2, [r3, #0]
 800c7f4:	e046      	b.n	800c884 <USB_EPStartXfer+0xb62>
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fa:	095b      	lsrs	r3, r3, #5
 800c7fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c804:	f003 031f 	and.w	r3, r3, #31
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <USB_EPStartXfer+0xaf4>
 800c80c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c810:	3b01      	subs	r3, #1
 800c812:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c820:	b29b      	uxth	r3, r3
 800c822:	029b      	lsls	r3, r3, #10
 800c824:	b29b      	uxth	r3, r3
 800c826:	4313      	orrs	r3, r2
 800c828:	b29b      	uxth	r3, r3
 800c82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c832:	b29a      	uxth	r2, r3
 800c834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	e024      	b.n	800c884 <USB_EPStartXfer+0xb62>
 800c83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d11c      	bne.n	800c884 <USB_EPStartXfer+0xb62>
 800c84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c84e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c858:	b29b      	uxth	r3, r3
 800c85a:	461a      	mov	r2, r3
 800c85c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c85e:	4413      	add	r3, r2
 800c860:	673b      	str	r3, [r7, #112]	@ 0x70
 800c862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	00da      	lsls	r2, r3, #3
 800c870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c872:	4413      	add	r3, r2
 800c874:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c878:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c87e:	b29a      	uxth	r2, r3
 800c880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c882:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	895b      	ldrh	r3, [r3, #10]
 800c890:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6959      	ldr	r1, [r3, #20]
 800c8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c8aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c8ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c8b2:	6800      	ldr	r0, [r0, #0]
 800c8b4:	f000 ff21 	bl	800d6fa <USB_WritePMA>
 800c8b8:	e0ca      	b.n	800ca50 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	785b      	ldrb	r3, [r3, #1]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d177      	bne.n	800c9ba <USB_EPStartXfer+0xc98>
 800c8ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c8ea:	4413      	add	r3, r2
 800c8ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	00da      	lsls	r2, r3, #3
 800c8fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c8fe:	4413      	add	r3, r2
 800c900:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c904:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c906:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c910:	b29a      	uxth	r2, r3
 800c912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c914:	801a      	strh	r2, [r3, #0]
 800c916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10a      	bne.n	800c934 <USB_EPStartXfer+0xc12>
 800c91e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	b29b      	uxth	r3, r3
 800c924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c930:	801a      	strh	r2, [r3, #0]
 800c932:	e073      	b.n	800ca1c <USB_EPStartXfer+0xcfa>
 800c934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c938:	2b3e      	cmp	r3, #62	@ 0x3e
 800c93a:	d81c      	bhi.n	800c976 <USB_EPStartXfer+0xc54>
 800c93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c940:	085b      	lsrs	r3, r3, #1
 800c942:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <USB_EPStartXfer+0xc3a>
 800c952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c956:	3301      	adds	r3, #1
 800c958:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c95c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	b29a      	uxth	r2, r3
 800c962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c966:	b29b      	uxth	r3, r3
 800c968:	029b      	lsls	r3, r3, #10
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4313      	orrs	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c972:	801a      	strh	r2, [r3, #0]
 800c974:	e052      	b.n	800ca1c <USB_EPStartXfer+0xcfa>
 800c976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c97a:	095b      	lsrs	r3, r3, #5
 800c97c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c984:	f003 031f 	and.w	r3, r3, #31
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d104      	bne.n	800c996 <USB_EPStartXfer+0xc74>
 800c98c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c990:	3b01      	subs	r3, #1
 800c992:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	029b      	lsls	r3, r3, #10
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9b6:	801a      	strh	r2, [r3, #0]
 800c9b8:	e030      	b.n	800ca1c <USB_EPStartXfer+0xcfa>
 800c9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	785b      	ldrb	r3, [r3, #1]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d128      	bne.n	800ca1c <USB_EPStartXfer+0xcfa>
 800c9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	00da      	lsls	r2, r3, #3
 800ca02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca06:	4413      	add	r3, r2
 800ca08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ca1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ca1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	891b      	ldrh	r3, [r3, #8]
 800ca28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6959      	ldr	r1, [r3, #20]
 800ca38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ca46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ca4a:	6800      	ldr	r0, [r0, #0]
 800ca4c:	f000 fe55 	bl	800d6fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ca50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca76:	817b      	strh	r3, [r7, #10]
 800ca78:	897b      	ldrh	r3, [r7, #10]
 800ca7a:	f083 0310 	eor.w	r3, r3, #16
 800ca7e:	817b      	strh	r3, [r7, #10]
 800ca80:	897b      	ldrh	r3, [r7, #10]
 800ca82:	f083 0320 	eor.w	r3, r3, #32
 800ca86:	817b      	strh	r3, [r7, #10]
 800ca88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	441a      	add	r2, r3
 800caa2:	897b      	ldrh	r3, [r7, #10]
 800caa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	8013      	strh	r3, [r2, #0]
 800cab8:	f000 bcdf 	b.w	800d47a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cabc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	7b1b      	ldrb	r3, [r3, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f040 80bc 	bne.w	800cc46 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	699a      	ldr	r2, [r3, #24]
 800cada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d917      	bls.n	800cb1a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800caea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800cafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cafe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	699a      	ldr	r2, [r3, #24]
 800cb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	619a      	str	r2, [r3, #24]
 800cb18:	e00e      	b.n	800cb38 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800cb1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800cb2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2200      	movs	r2, #0
 800cb36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cb38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	461a      	mov	r2, r3
 800cb58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	00da      	lsls	r2, r3, #3
 800cb70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb74:	4413      	add	r3, r2
 800cb76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cb7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb90:	801a      	strh	r2, [r3, #0]
 800cb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10d      	bne.n	800cbb6 <USB_EPStartXfer+0xe94>
 800cb9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbb0:	801a      	strh	r2, [r3, #0]
 800cbb2:	f000 bc28 	b.w	800d406 <USB_EPStartXfer+0x16e4>
 800cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbba:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbbc:	d81f      	bhi.n	800cbfe <USB_EPStartXfer+0xedc>
 800cbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc2:	085b      	lsrs	r3, r3, #1
 800cbc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <USB_EPStartXfer+0xebc>
 800cbd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cbd8:	3301      	adds	r3, #1
 800cbda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cbde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	029b      	lsls	r3, r3, #10
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbf8:	801a      	strh	r2, [r3, #0]
 800cbfa:	f000 bc04 	b.w	800d406 <USB_EPStartXfer+0x16e4>
 800cbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc02:	095b      	lsrs	r3, r3, #5
 800cc04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc0c:	f003 031f 	and.w	r3, r3, #31
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <USB_EPStartXfer+0xefc>
 800cc14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cc1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc22:	881b      	ldrh	r3, [r3, #0]
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	029b      	lsls	r3, r3, #10
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	4313      	orrs	r3, r2
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc42:	801a      	strh	r2, [r3, #0]
 800cc44:	e3df      	b.n	800d406 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	78db      	ldrb	r3, [r3, #3]
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	f040 8218 	bne.w	800d088 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	785b      	ldrb	r3, [r3, #1]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f040 809d 	bne.w	800cda4 <USB_EPStartXfer+0x1082>
 800cc6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc8e:	4413      	add	r3, r2
 800cc90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	00da      	lsls	r2, r3, #3
 800cca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cca6:	4413      	add	r3, r2
 800cca8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ccb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccc2:	801a      	strh	r2, [r3, #0]
 800ccc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10c      	bne.n	800ccee <USB_EPStartXfer+0xfcc>
 800ccd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cce4:	b29a      	uxth	r2, r3
 800cce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccea:	801a      	strh	r2, [r3, #0]
 800ccec:	e08f      	b.n	800ce0e <USB_EPStartXfer+0x10ec>
 800ccee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccfc:	d826      	bhi.n	800cd4c <USB_EPStartXfer+0x102a>
 800ccfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	085b      	lsrs	r3, r3, #1
 800cd0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cd10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <USB_EPStartXfer+0x100c>
 800cd24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd28:	3301      	adds	r3, #1
 800cd2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cd2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	029b      	lsls	r3, r3, #10
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	4313      	orrs	r3, r2
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cd48:	801a      	strh	r2, [r3, #0]
 800cd4a:	e060      	b.n	800ce0e <USB_EPStartXfer+0x10ec>
 800cd4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	095b      	lsrs	r3, r3, #5
 800cd5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	f003 031f 	and.w	r3, r3, #31
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d104      	bne.n	800cd7c <USB_EPStartXfer+0x105a>
 800cd72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd76:	3b01      	subs	r3, #1
 800cd78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cd7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	029b      	lsls	r3, r3, #10
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cda0:	801a      	strh	r2, [r3, #0]
 800cda2:	e034      	b.n	800ce0e <USB_EPStartXfer+0x10ec>
 800cda4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	785b      	ldrb	r3, [r3, #1]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d12c      	bne.n	800ce0e <USB_EPStartXfer+0x10ec>
 800cdb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cdc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdd8:	4413      	add	r3, r2
 800cdda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cdde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	00da      	lsls	r2, r3, #3
 800cdec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cdf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cdfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ce0c:	801a      	strh	r2, [r3, #0]
 800ce0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ce1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	785b      	ldrb	r3, [r3, #1]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f040 809d 	bne.w	800cf68 <USB_EPStartXfer+0x1246>
 800ce2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce52:	4413      	add	r3, r2
 800ce54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	00da      	lsls	r2, r3, #3
 800ce66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce86:	801a      	strh	r2, [r3, #0]
 800ce88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10c      	bne.n	800ceb2 <USB_EPStartXfer+0x1190>
 800ce98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ceae:	801a      	strh	r2, [r3, #0]
 800ceb0:	e088      	b.n	800cfc4 <USB_EPStartXfer+0x12a2>
 800ceb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	2b3e      	cmp	r3, #62	@ 0x3e
 800cec0:	d826      	bhi.n	800cf10 <USB_EPStartXfer+0x11ee>
 800cec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	085b      	lsrs	r3, r3, #1
 800ced0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ced4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ced8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	f003 0301 	and.w	r3, r3, #1
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <USB_EPStartXfer+0x11d0>
 800cee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceec:	3301      	adds	r3, #1
 800ceee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	029b      	lsls	r3, r3, #10
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	4313      	orrs	r3, r2
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf0c:	801a      	strh	r2, [r3, #0]
 800cf0e:	e059      	b.n	800cfc4 <USB_EPStartXfer+0x12a2>
 800cf10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	095b      	lsrs	r3, r3, #5
 800cf1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	f003 031f 	and.w	r3, r3, #31
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d104      	bne.n	800cf40 <USB_EPStartXfer+0x121e>
 800cf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	029b      	lsls	r3, r3, #10
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	4313      	orrs	r3, r2
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf64:	801a      	strh	r2, [r3, #0]
 800cf66:	e02d      	b.n	800cfc4 <USB_EPStartXfer+0x12a2>
 800cf68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	785b      	ldrb	r3, [r3, #1]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d125      	bne.n	800cfc4 <USB_EPStartXfer+0x12a2>
 800cf78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	461a      	mov	r2, r3
 800cf8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cf8e:	4413      	add	r3, r2
 800cf90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	00da      	lsls	r2, r3, #3
 800cfa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cfac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfc2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cfc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	69db      	ldr	r3, [r3, #28]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 8218 	beq.w	800d406 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	881b      	ldrh	r3, [r3, #0]
 800cff2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cff6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d005      	beq.n	800d00e <USB_EPStartXfer+0x12ec>
 800d002:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10d      	bne.n	800d02a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d00e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d016:	2b00      	cmp	r3, #0
 800d018:	f040 81f5 	bne.w	800d406 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d01c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d024:	2b00      	cmp	r3, #0
 800d026:	f040 81ee 	bne.w	800d406 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d02a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	b29b      	uxth	r3, r3
 800d048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d04c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d050:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800d054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	441a      	add	r2, r3
 800d06e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d07a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d07e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d082:	b29b      	uxth	r3, r3
 800d084:	8013      	strh	r3, [r2, #0]
 800d086:	e1be      	b.n	800d406 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	78db      	ldrb	r3, [r3, #3]
 800d094:	2b01      	cmp	r3, #1
 800d096:	f040 81b4 	bne.w	800d402 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d09a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d09e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	699a      	ldr	r2, [r3, #24]
 800d0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d917      	bls.n	800d0e6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800d0b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800d0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	699a      	ldr	r2, [r3, #24]
 800d0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d6:	1ad2      	subs	r2, r2, r3
 800d0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	619a      	str	r2, [r3, #24]
 800d0e4:	e00e      	b.n	800d104 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800d0e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800d0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2200      	movs	r2, #0
 800d102:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	785b      	ldrb	r3, [r3, #1]
 800d110:	2b00      	cmp	r3, #0
 800d112:	f040 8085 	bne.w	800d220 <USB_EPStartXfer+0x14fe>
 800d116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d132:	b29b      	uxth	r3, r3
 800d134:	461a      	mov	r2, r3
 800d136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d13a:	4413      	add	r3, r2
 800d13c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	00da      	lsls	r2, r3, #3
 800d14e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d152:	4413      	add	r3, r2
 800d154:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d15c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	b29b      	uxth	r3, r3
 800d164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d168:	b29a      	uxth	r2, r3
 800d16a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d16e:	801a      	strh	r2, [r3, #0]
 800d170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10c      	bne.n	800d192 <USB_EPStartXfer+0x1470>
 800d178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	b29b      	uxth	r3, r3
 800d180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d188:	b29a      	uxth	r2, r3
 800d18a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d18e:	801a      	strh	r2, [r3, #0]
 800d190:	e077      	b.n	800d282 <USB_EPStartXfer+0x1560>
 800d192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d196:	2b3e      	cmp	r3, #62	@ 0x3e
 800d198:	d81e      	bhi.n	800d1d8 <USB_EPStartXfer+0x14b6>
 800d19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19e:	085b      	lsrs	r3, r3, #1
 800d1a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a8:	f003 0301 	and.w	r3, r3, #1
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d004      	beq.n	800d1ba <USB_EPStartXfer+0x1498>
 800d1b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d1ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	b29a      	uxth	r2, r3
 800d1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	029b      	lsls	r3, r3, #10
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d1d4:	801a      	strh	r2, [r3, #0]
 800d1d6:	e054      	b.n	800d282 <USB_EPStartXfer+0x1560>
 800d1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1dc:	095b      	lsrs	r3, r3, #5
 800d1de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e6:	f003 031f 	and.w	r3, r3, #31
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d104      	bne.n	800d1f8 <USB_EPStartXfer+0x14d6>
 800d1ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d1f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d1fc:	881b      	ldrh	r3, [r3, #0]
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d204:	b29b      	uxth	r3, r3
 800d206:	029b      	lsls	r3, r3, #10
 800d208:	b29b      	uxth	r3, r3
 800d20a:	4313      	orrs	r3, r2
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d216:	b29a      	uxth	r2, r3
 800d218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d21c:	801a      	strh	r2, [r3, #0]
 800d21e:	e030      	b.n	800d282 <USB_EPStartXfer+0x1560>
 800d220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	785b      	ldrb	r3, [r3, #1]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d128      	bne.n	800d282 <USB_EPStartXfer+0x1560>
 800d230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	461a      	mov	r2, r3
 800d250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d254:	4413      	add	r3, r2
 800d256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	00da      	lsls	r2, r3, #3
 800d268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d26c:	4413      	add	r3, r2
 800d26e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d272:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d280:	801a      	strh	r2, [r3, #0]
 800d282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	785b      	ldrb	r3, [r3, #1]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f040 8085 	bne.w	800d3ac <USB_EPStartXfer+0x168a>
 800d2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	00da      	lsls	r2, r3, #3
 800d2da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d2de:	4413      	add	r3, r2
 800d2e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d2e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d2fa:	801a      	strh	r2, [r3, #0]
 800d2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10c      	bne.n	800d31e <USB_EPStartXfer+0x15fc>
 800d304:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d308:	881b      	ldrh	r3, [r3, #0]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d314:	b29a      	uxth	r2, r3
 800d316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d31a:	801a      	strh	r2, [r3, #0]
 800d31c:	e073      	b.n	800d406 <USB_EPStartXfer+0x16e4>
 800d31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d322:	2b3e      	cmp	r3, #62	@ 0x3e
 800d324:	d81e      	bhi.n	800d364 <USB_EPStartXfer+0x1642>
 800d326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d32a:	085b      	lsrs	r3, r3, #1
 800d32c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d004      	beq.n	800d346 <USB_EPStartXfer+0x1624>
 800d33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d340:	3301      	adds	r3, #1
 800d342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d352:	b29b      	uxth	r3, r3
 800d354:	029b      	lsls	r3, r3, #10
 800d356:	b29b      	uxth	r3, r3
 800d358:	4313      	orrs	r3, r2
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d360:	801a      	strh	r2, [r3, #0]
 800d362:	e050      	b.n	800d406 <USB_EPStartXfer+0x16e4>
 800d364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d368:	095b      	lsrs	r3, r3, #5
 800d36a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d372:	f003 031f 	and.w	r3, r3, #31
 800d376:	2b00      	cmp	r3, #0
 800d378:	d104      	bne.n	800d384 <USB_EPStartXfer+0x1662>
 800d37a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d37e:	3b01      	subs	r3, #1
 800d380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d390:	b29b      	uxth	r3, r3
 800d392:	029b      	lsls	r3, r3, #10
 800d394:	b29b      	uxth	r3, r3
 800d396:	4313      	orrs	r3, r2
 800d398:	b29b      	uxth	r3, r3
 800d39a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d39e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d3a8:	801a      	strh	r2, [r3, #0]
 800d3aa:	e02c      	b.n	800d406 <USB_EPStartXfer+0x16e4>
 800d3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	785b      	ldrb	r3, [r3, #1]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d124      	bne.n	800d406 <USB_EPStartXfer+0x16e4>
 800d3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	00da      	lsls	r2, r3, #3
 800d3e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d3fe:	801a      	strh	r2, [r3, #0]
 800d400:	e001      	b.n	800d406 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e03a      	b.n	800d47c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d40a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	b29b      	uxth	r3, r3
 800d424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d42c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d430:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d434:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d438:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d43c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d440:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d444:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d44c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	441a      	add	r2, r3
 800d462:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d46a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d46e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d476:	b29b      	uxth	r3, r3
 800d478:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	785b      	ldrb	r3, [r3, #1]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d020      	beq.n	800d4da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	881b      	ldrh	r3, [r3, #0]
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4ae:	81bb      	strh	r3, [r7, #12]
 800d4b0:	89bb      	ldrh	r3, [r7, #12]
 800d4b2:	f083 0310 	eor.w	r3, r3, #16
 800d4b6:	81bb      	strh	r3, [r7, #12]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	441a      	add	r2, r3
 800d4c2:	89bb      	ldrh	r3, [r7, #12]
 800d4c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	8013      	strh	r3, [r2, #0]
 800d4d8:	e01f      	b.n	800d51a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4413      	add	r3, r2
 800d4e4:	881b      	ldrh	r3, [r3, #0]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d4ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4f0:	81fb      	strh	r3, [r7, #14]
 800d4f2:	89fb      	ldrh	r3, [r7, #14]
 800d4f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d4f8:	81fb      	strh	r3, [r7, #14]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	441a      	add	r2, r3
 800d504:	89fb      	ldrh	r3, [r7, #14]
 800d506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d50a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d50e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d516:	b29b      	uxth	r3, r3
 800d518:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d528:	b480      	push	{r7}
 800d52a:	b087      	sub	sp, #28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	7b1b      	ldrb	r3, [r3, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f040 809d 	bne.w	800d676 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	785b      	ldrb	r3, [r3, #1]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d04c      	beq.n	800d5de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	823b      	strh	r3, [r7, #16]
 800d552:	8a3b      	ldrh	r3, [r7, #16]
 800d554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01b      	beq.n	800d594 <USB_EPClearStall+0x6c>
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	b29b      	uxth	r3, r3
 800d56a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d56e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d572:	81fb      	strh	r3, [r7, #14]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	441a      	add	r2, r3
 800d57e:	89fb      	ldrh	r3, [r7, #14]
 800d580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d58c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d590:	b29b      	uxth	r3, r3
 800d592:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	78db      	ldrb	r3, [r3, #3]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d06c      	beq.n	800d676 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	881b      	ldrh	r3, [r3, #0]
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5b2:	81bb      	strh	r3, [r7, #12]
 800d5b4:	89bb      	ldrh	r3, [r7, #12]
 800d5b6:	f083 0320 	eor.w	r3, r3, #32
 800d5ba:	81bb      	strh	r3, [r7, #12]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	441a      	add	r2, r3
 800d5c6:	89bb      	ldrh	r3, [r7, #12]
 800d5c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	8013      	strh	r3, [r2, #0]
 800d5dc:	e04b      	b.n	800d676 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	82fb      	strh	r3, [r7, #22]
 800d5ec:	8afb      	ldrh	r3, [r7, #22]
 800d5ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d01b      	beq.n	800d62e <USB_EPClearStall+0x106>
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	881b      	ldrh	r3, [r3, #0]
 800d602:	b29b      	uxth	r3, r3
 800d604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d60c:	82bb      	strh	r3, [r7, #20]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	441a      	add	r2, r3
 800d618:	8abb      	ldrh	r3, [r7, #20]
 800d61a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d61e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d644:	827b      	strh	r3, [r7, #18]
 800d646:	8a7b      	ldrh	r3, [r7, #18]
 800d648:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d64c:	827b      	strh	r3, [r7, #18]
 800d64e:	8a7b      	ldrh	r3, [r7, #18]
 800d650:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d654:	827b      	strh	r3, [r7, #18]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	441a      	add	r2, r3
 800d660:	8a7b      	ldrh	r3, [r7, #18]
 800d662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d66a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d66e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d672:	b29b      	uxth	r3, r3
 800d674:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	371c      	adds	r7, #28
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	460b      	mov	r3, r1
 800d68e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d103      	bne.n	800d69e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2280      	movs	r2, #128	@ 0x80
 800d69a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b085      	sub	sp, #20
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b08b      	sub	sp, #44	@ 0x2c
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	4611      	mov	r1, r2
 800d706:	461a      	mov	r2, r3
 800d708:	460b      	mov	r3, r1
 800d70a:	80fb      	strh	r3, [r7, #6]
 800d70c:	4613      	mov	r3, r2
 800d70e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d710:	88bb      	ldrh	r3, [r7, #4]
 800d712:	3301      	adds	r3, #1
 800d714:	085b      	lsrs	r3, r3, #1
 800d716:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d720:	88fa      	ldrh	r2, [r7, #6]
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d72a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d730:	e01c      	b.n	800d76c <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	3301      	adds	r3, #1
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b21b      	sxth	r3, r3
 800d740:	021b      	lsls	r3, r3, #8
 800d742:	b21a      	sxth	r2, r3
 800d744:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d748:	4313      	orrs	r3, r2
 800d74a:	b21b      	sxth	r3, r3
 800d74c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	8a7a      	ldrh	r2, [r7, #18]
 800d752:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	3302      	adds	r3, #2
 800d758:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	3301      	adds	r3, #1
 800d75e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	3301      	adds	r3, #1
 800d764:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d768:	3b01      	subs	r3, #1
 800d76a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1df      	bne.n	800d732 <USB_WritePMA+0x38>
  }
}
 800d772:	bf00      	nop
 800d774:	bf00      	nop
 800d776:	372c      	adds	r7, #44	@ 0x2c
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d780:	b480      	push	{r7}
 800d782:	b08b      	sub	sp, #44	@ 0x2c
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	4611      	mov	r1, r2
 800d78c:	461a      	mov	r2, r3
 800d78e:	460b      	mov	r3, r1
 800d790:	80fb      	strh	r3, [r7, #6]
 800d792:	4613      	mov	r3, r2
 800d794:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d796:	88bb      	ldrh	r3, [r7, #4]
 800d798:	085b      	lsrs	r3, r3, #1
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d7a6:	88fa      	ldrh	r2, [r7, #6]
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d7b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b6:	e018      	b.n	800d7ea <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d7c0:	6a3b      	ldr	r3, [r7, #32]
 800d7c2:	3302      	adds	r3, #2
 800d7c4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	0a1b      	lsrs	r3, r3, #8
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1e3      	bne.n	800d7b8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d7f0:	88bb      	ldrh	r3, [r7, #4]
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d007      	beq.n	800d80c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	881b      	ldrh	r3, [r3, #0]
 800d800:	b29b      	uxth	r3, r3
 800d802:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	b2da      	uxtb	r2, r3
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	701a      	strb	r2, [r3, #0]
  }
}
 800d80c:	bf00      	nop
 800d80e:	372c      	adds	r7, #44	@ 0x2c
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d824:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d828:	f004 ff98 	bl	801275c <USBD_static_malloc>
 800d82c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d109      	bne.n	800d848 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	32b0      	adds	r2, #176	@ 0xb0
 800d83e:	2100      	movs	r1, #0
 800d840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d844:	2302      	movs	r3, #2
 800d846:	e0d4      	b.n	800d9f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d848:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f005 f88c 	bl	801296c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	32b0      	adds	r2, #176	@ 0xb0
 800d85e:	68f9      	ldr	r1, [r7, #12]
 800d860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	32b0      	adds	r2, #176	@ 0xb0
 800d86e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	7c1b      	ldrb	r3, [r3, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d138      	bne.n	800d8f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d880:	4b5e      	ldr	r3, [pc, #376]	@ (800d9fc <USBD_CDC_Init+0x1e4>)
 800d882:	7819      	ldrb	r1, [r3, #0]
 800d884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d888:	2202      	movs	r2, #2
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f004 fe0d 	bl	80124aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d890:	4b5a      	ldr	r3, [pc, #360]	@ (800d9fc <USBD_CDC_Init+0x1e4>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	f003 020f 	and.w	r2, r3, #15
 800d898:	6879      	ldr	r1, [r7, #4]
 800d89a:	4613      	mov	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	440b      	add	r3, r1
 800d8a4:	3324      	adds	r3, #36	@ 0x24
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d8aa:	4b55      	ldr	r3, [pc, #340]	@ (800da00 <USBD_CDC_Init+0x1e8>)
 800d8ac:	7819      	ldrb	r1, [r3, #0]
 800d8ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f004 fdf8 	bl	80124aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d8ba:	4b51      	ldr	r3, [pc, #324]	@ (800da00 <USBD_CDC_Init+0x1e8>)
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	f003 020f 	and.w	r2, r3, #15
 800d8c2:	6879      	ldr	r1, [r7, #4]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	440b      	add	r3, r1
 800d8ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d8d6:	4b4b      	ldr	r3, [pc, #300]	@ (800da04 <USBD_CDC_Init+0x1ec>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	f003 020f 	and.w	r2, r3, #15
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	440b      	add	r3, r1
 800d8ea:	3326      	adds	r3, #38	@ 0x26
 800d8ec:	2210      	movs	r2, #16
 800d8ee:	801a      	strh	r2, [r3, #0]
 800d8f0:	e035      	b.n	800d95e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d8f2:	4b42      	ldr	r3, [pc, #264]	@ (800d9fc <USBD_CDC_Init+0x1e4>)
 800d8f4:	7819      	ldrb	r1, [r3, #0]
 800d8f6:	2340      	movs	r3, #64	@ 0x40
 800d8f8:	2202      	movs	r2, #2
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f004 fdd5 	bl	80124aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d900:	4b3e      	ldr	r3, [pc, #248]	@ (800d9fc <USBD_CDC_Init+0x1e4>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	f003 020f 	and.w	r2, r3, #15
 800d908:	6879      	ldr	r1, [r7, #4]
 800d90a:	4613      	mov	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4413      	add	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	440b      	add	r3, r1
 800d914:	3324      	adds	r3, #36	@ 0x24
 800d916:	2201      	movs	r2, #1
 800d918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d91a:	4b39      	ldr	r3, [pc, #228]	@ (800da00 <USBD_CDC_Init+0x1e8>)
 800d91c:	7819      	ldrb	r1, [r3, #0]
 800d91e:	2340      	movs	r3, #64	@ 0x40
 800d920:	2202      	movs	r2, #2
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f004 fdc1 	bl	80124aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d928:	4b35      	ldr	r3, [pc, #212]	@ (800da00 <USBD_CDC_Init+0x1e8>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	f003 020f 	and.w	r2, r3, #15
 800d930:	6879      	ldr	r1, [r7, #4]
 800d932:	4613      	mov	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	4413      	add	r3, r2
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	440b      	add	r3, r1
 800d93c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d940:	2201      	movs	r2, #1
 800d942:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d944:	4b2f      	ldr	r3, [pc, #188]	@ (800da04 <USBD_CDC_Init+0x1ec>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	f003 020f 	and.w	r2, r3, #15
 800d94c:	6879      	ldr	r1, [r7, #4]
 800d94e:	4613      	mov	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	4413      	add	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	440b      	add	r3, r1
 800d958:	3326      	adds	r3, #38	@ 0x26
 800d95a:	2210      	movs	r2, #16
 800d95c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d95e:	4b29      	ldr	r3, [pc, #164]	@ (800da04 <USBD_CDC_Init+0x1ec>)
 800d960:	7819      	ldrb	r1, [r3, #0]
 800d962:	2308      	movs	r3, #8
 800d964:	2203      	movs	r2, #3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f004 fd9f 	bl	80124aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d96c:	4b25      	ldr	r3, [pc, #148]	@ (800da04 <USBD_CDC_Init+0x1ec>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	f003 020f 	and.w	r2, r3, #15
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	4613      	mov	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	440b      	add	r3, r1
 800d980:	3324      	adds	r3, #36	@ 0x24
 800d982:	2201      	movs	r2, #1
 800d984:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	33b0      	adds	r3, #176	@ 0xb0
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d9bc:	2302      	movs	r3, #2
 800d9be:	e018      	b.n	800d9f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7c1b      	ldrb	r3, [r3, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800da00 <USBD_CDC_Init+0x1e8>)
 800d9ca:	7819      	ldrb	r1, [r3, #0]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d9d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f004 fe56 	bl	8012688 <USBD_LL_PrepareReceive>
 800d9dc:	e008      	b.n	800d9f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d9de:	4b08      	ldr	r3, [pc, #32]	@ (800da00 <USBD_CDC_Init+0x1e8>)
 800d9e0:	7819      	ldrb	r1, [r3, #0]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d9e8:	2340      	movs	r3, #64	@ 0x40
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f004 fe4c 	bl	8012688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	2000009b 	.word	0x2000009b
 800da00:	2000009c 	.word	0x2000009c
 800da04:	2000009d 	.word	0x2000009d

0800da08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	460b      	mov	r3, r1
 800da12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800da14:	4b3a      	ldr	r3, [pc, #232]	@ (800db00 <USBD_CDC_DeInit+0xf8>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f004 fd6b 	bl	80124f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800da20:	4b37      	ldr	r3, [pc, #220]	@ (800db00 <USBD_CDC_DeInit+0xf8>)
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	f003 020f 	and.w	r2, r3, #15
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	4613      	mov	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	440b      	add	r3, r1
 800da34:	3324      	adds	r3, #36	@ 0x24
 800da36:	2200      	movs	r2, #0
 800da38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800da3a:	4b32      	ldr	r3, [pc, #200]	@ (800db04 <USBD_CDC_DeInit+0xfc>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f004 fd58 	bl	80124f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800da46:	4b2f      	ldr	r3, [pc, #188]	@ (800db04 <USBD_CDC_DeInit+0xfc>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	f003 020f 	and.w	r2, r3, #15
 800da4e:	6879      	ldr	r1, [r7, #4]
 800da50:	4613      	mov	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4413      	add	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	440b      	add	r3, r1
 800da5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800da5e:	2200      	movs	r2, #0
 800da60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800da62:	4b29      	ldr	r3, [pc, #164]	@ (800db08 <USBD_CDC_DeInit+0x100>)
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f004 fd44 	bl	80124f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800da6e:	4b26      	ldr	r3, [pc, #152]	@ (800db08 <USBD_CDC_DeInit+0x100>)
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	f003 020f 	and.w	r2, r3, #15
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	4613      	mov	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	4413      	add	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	440b      	add	r3, r1
 800da82:	3324      	adds	r3, #36	@ 0x24
 800da84:	2200      	movs	r2, #0
 800da86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800da88:	4b1f      	ldr	r3, [pc, #124]	@ (800db08 <USBD_CDC_DeInit+0x100>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	f003 020f 	and.w	r2, r3, #15
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	4613      	mov	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	440b      	add	r3, r1
 800da9c:	3326      	adds	r3, #38	@ 0x26
 800da9e:	2200      	movs	r2, #0
 800daa0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	32b0      	adds	r2, #176	@ 0xb0
 800daac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01f      	beq.n	800daf4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	33b0      	adds	r3, #176	@ 0xb0
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	32b0      	adds	r2, #176	@ 0xb0
 800dad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f004 fe4e 	bl	8012778 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	32b0      	adds	r2, #176	@ 0xb0
 800dae6:	2100      	movs	r1, #0
 800dae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	2000009b 	.word	0x2000009b
 800db04:	2000009c 	.word	0x2000009c
 800db08:	2000009d 	.word	0x2000009d

0800db0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	32b0      	adds	r2, #176	@ 0xb0
 800db20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800db38:	2303      	movs	r3, #3
 800db3a:	e0bf      	b.n	800dcbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db44:	2b00      	cmp	r3, #0
 800db46:	d050      	beq.n	800dbea <USBD_CDC_Setup+0xde>
 800db48:	2b20      	cmp	r3, #32
 800db4a:	f040 80af 	bne.w	800dcac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	88db      	ldrh	r3, [r3, #6]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d03a      	beq.n	800dbcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	b25b      	sxtb	r3, r3
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	da1b      	bge.n	800db98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	33b0      	adds	r3, #176	@ 0xb0
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800db76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	88d2      	ldrh	r2, [r2, #6]
 800db7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	88db      	ldrh	r3, [r3, #6]
 800db82:	2b07      	cmp	r3, #7
 800db84:	bf28      	it	cs
 800db86:	2307      	movcs	r3, #7
 800db88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	89fa      	ldrh	r2, [r7, #14]
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f001 fcdf 	bl	800f554 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800db96:	e090      	b.n	800dcba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	785a      	ldrb	r2, [r3, #1]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	88db      	ldrh	r3, [r3, #6]
 800dba6:	2b3f      	cmp	r3, #63	@ 0x3f
 800dba8:	d803      	bhi.n	800dbb2 <USBD_CDC_Setup+0xa6>
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	88db      	ldrh	r3, [r3, #6]
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	e000      	b.n	800dbb4 <USBD_CDC_Setup+0xa8>
 800dbb2:	2240      	movs	r2, #64	@ 0x40
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dbba:	6939      	ldr	r1, [r7, #16]
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f001 fcf1 	bl	800f5ac <USBD_CtlPrepareRx>
      break;
 800dbca:	e076      	b.n	800dcba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	33b0      	adds	r3, #176	@ 0xb0
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	7850      	ldrb	r0, [r2, #1]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	4798      	blx	r3
      break;
 800dbe8:	e067      	b.n	800dcba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	785b      	ldrb	r3, [r3, #1]
 800dbee:	2b0b      	cmp	r3, #11
 800dbf0:	d851      	bhi.n	800dc96 <USBD_CDC_Setup+0x18a>
 800dbf2:	a201      	add	r2, pc, #4	@ (adr r2, 800dbf8 <USBD_CDC_Setup+0xec>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc29 	.word	0x0800dc29
 800dbfc:	0800dca5 	.word	0x0800dca5
 800dc00:	0800dc97 	.word	0x0800dc97
 800dc04:	0800dc97 	.word	0x0800dc97
 800dc08:	0800dc97 	.word	0x0800dc97
 800dc0c:	0800dc97 	.word	0x0800dc97
 800dc10:	0800dc97 	.word	0x0800dc97
 800dc14:	0800dc97 	.word	0x0800dc97
 800dc18:	0800dc97 	.word	0x0800dc97
 800dc1c:	0800dc97 	.word	0x0800dc97
 800dc20:	0800dc53 	.word	0x0800dc53
 800dc24:	0800dc7d 	.word	0x0800dc7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d107      	bne.n	800dc44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dc34:	f107 030a 	add.w	r3, r7, #10
 800dc38:	2202      	movs	r2, #2
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f001 fc89 	bl	800f554 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc42:	e032      	b.n	800dcaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f001 fc13 	bl	800f472 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	75fb      	strb	r3, [r7, #23]
          break;
 800dc50:	e02b      	b.n	800dcaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d107      	bne.n	800dc6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dc5e:	f107 030d 	add.w	r3, r7, #13
 800dc62:	2201      	movs	r2, #1
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f001 fc74 	bl	800f554 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc6c:	e01d      	b.n	800dcaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f001 fbfe 	bl	800f472 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc76:	2303      	movs	r3, #3
 800dc78:	75fb      	strb	r3, [r7, #23]
          break;
 800dc7a:	e016      	b.n	800dcaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d00f      	beq.n	800dca8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f001 fbf1 	bl	800f472 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc90:	2303      	movs	r3, #3
 800dc92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dc94:	e008      	b.n	800dca8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f001 fbea 	bl	800f472 <USBD_CtlError>
          ret = USBD_FAIL;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	75fb      	strb	r3, [r7, #23]
          break;
 800dca2:	e002      	b.n	800dcaa <USBD_CDC_Setup+0x19e>
          break;
 800dca4:	bf00      	nop
 800dca6:	e008      	b.n	800dcba <USBD_CDC_Setup+0x1ae>
          break;
 800dca8:	bf00      	nop
      }
      break;
 800dcaa:	e006      	b.n	800dcba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f001 fbdf 	bl	800f472 <USBD_CtlError>
      ret = USBD_FAIL;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	75fb      	strb	r3, [r7, #23]
      break;
 800dcb8:	bf00      	nop
  }

  return (uint8_t)ret;
 800dcba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3718      	adds	r7, #24
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	32b0      	adds	r2, #176	@ 0xb0
 800dce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d101      	bne.n	800dcee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dcea:	2303      	movs	r3, #3
 800dcec:	e065      	b.n	800ddba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	32b0      	adds	r2, #176	@ 0xb0
 800dcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dcfe:	78fb      	ldrb	r3, [r7, #3]
 800dd00:	f003 020f 	and.w	r2, r3, #15
 800dd04:	6879      	ldr	r1, [r7, #4]
 800dd06:	4613      	mov	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	440b      	add	r3, r1
 800dd10:	3318      	adds	r3, #24
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d02f      	beq.n	800dd78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dd18:	78fb      	ldrb	r3, [r7, #3]
 800dd1a:	f003 020f 	and.w	r2, r3, #15
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	440b      	add	r3, r1
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	78fb      	ldrb	r3, [r7, #3]
 800dd30:	f003 010f 	and.w	r1, r3, #15
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	460b      	mov	r3, r1
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	440b      	add	r3, r1
 800dd3c:	00db      	lsls	r3, r3, #3
 800dd3e:	4403      	add	r3, r0
 800dd40:	3320      	adds	r3, #32
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	fbb2 f1f3 	udiv	r1, r2, r3
 800dd48:	fb01 f303 	mul.w	r3, r1, r3
 800dd4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d112      	bne.n	800dd78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dd52:	78fb      	ldrb	r3, [r7, #3]
 800dd54:	f003 020f 	and.w	r2, r3, #15
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	440b      	add	r3, r1
 800dd64:	3318      	adds	r3, #24
 800dd66:	2200      	movs	r2, #0
 800dd68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dd6a:	78f9      	ldrb	r1, [r7, #3]
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	2200      	movs	r2, #0
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f004 fc68 	bl	8012646 <USBD_LL_Transmit>
 800dd76:	e01f      	b.n	800ddb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	33b0      	adds	r3, #176	@ 0xb0
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d010      	beq.n	800ddb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	33b0      	adds	r3, #176	@ 0xb0
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ddb4:	78fa      	ldrb	r2, [r7, #3]
 800ddb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b084      	sub	sp, #16
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	460b      	mov	r3, r1
 800ddcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	32b0      	adds	r2, #176	@ 0xb0
 800ddd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dddc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	32b0      	adds	r2, #176	@ 0xb0
 800dde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	e01a      	b.n	800de2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f004 fc66 	bl	80126ca <USBD_LL_GetRxDataSize>
 800ddfe:	4602      	mov	r2, r0
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	33b0      	adds	r3, #176	@ 0xb0
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800de24:	4611      	mov	r1, r2
 800de26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b084      	sub	sp, #16
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	32b0      	adds	r2, #176	@ 0xb0
 800de44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de50:	2303      	movs	r3, #3
 800de52:	e024      	b.n	800de9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	33b0      	adds	r3, #176	@ 0xb0
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	4413      	add	r3, r2
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d019      	beq.n	800de9c <USBD_CDC_EP0_RxReady+0x6a>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800de6e:	2bff      	cmp	r3, #255	@ 0xff
 800de70:	d014      	beq.n	800de9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	33b0      	adds	r3, #176	@ 0xb0
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800de8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800de92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	22ff      	movs	r2, #255	@ 0xff
 800de98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
	...

0800dea8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800deb0:	2182      	movs	r1, #130	@ 0x82
 800deb2:	4818      	ldr	r0, [pc, #96]	@ (800df14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800deb4:	f000 fc7d 	bl	800e7b2 <USBD_GetEpDesc>
 800deb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800deba:	2101      	movs	r1, #1
 800debc:	4815      	ldr	r0, [pc, #84]	@ (800df14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800debe:	f000 fc78 	bl	800e7b2 <USBD_GetEpDesc>
 800dec2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dec4:	2181      	movs	r1, #129	@ 0x81
 800dec6:	4813      	ldr	r0, [pc, #76]	@ (800df14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dec8:	f000 fc73 	bl	800e7b2 <USBD_GetEpDesc>
 800decc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	2210      	movs	r2, #16
 800ded8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d006      	beq.n	800deee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dee8:	711a      	strb	r2, [r3, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d006      	beq.n	800df02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2200      	movs	r2, #0
 800def8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800defc:	711a      	strb	r2, [r3, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2243      	movs	r2, #67	@ 0x43
 800df06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df08:	4b02      	ldr	r3, [pc, #8]	@ (800df14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20000058 	.word	0x20000058

0800df18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800df20:	2182      	movs	r1, #130	@ 0x82
 800df22:	4818      	ldr	r0, [pc, #96]	@ (800df84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800df24:	f000 fc45 	bl	800e7b2 <USBD_GetEpDesc>
 800df28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800df2a:	2101      	movs	r1, #1
 800df2c:	4815      	ldr	r0, [pc, #84]	@ (800df84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800df2e:	f000 fc40 	bl	800e7b2 <USBD_GetEpDesc>
 800df32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800df34:	2181      	movs	r1, #129	@ 0x81
 800df36:	4813      	ldr	r0, [pc, #76]	@ (800df84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800df38:	f000 fc3b 	bl	800e7b2 <USBD_GetEpDesc>
 800df3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2210      	movs	r2, #16
 800df48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d006      	beq.n	800df5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	2200      	movs	r2, #0
 800df54:	711a      	strb	r2, [r3, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	f042 0202 	orr.w	r2, r2, #2
 800df5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d006      	beq.n	800df72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2200      	movs	r2, #0
 800df68:	711a      	strb	r2, [r3, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f042 0202 	orr.w	r2, r2, #2
 800df70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2243      	movs	r2, #67	@ 0x43
 800df76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df78:	4b02      	ldr	r3, [pc, #8]	@ (800df84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20000058 	.word	0x20000058

0800df88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800df90:	2182      	movs	r1, #130	@ 0x82
 800df92:	4818      	ldr	r0, [pc, #96]	@ (800dff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df94:	f000 fc0d 	bl	800e7b2 <USBD_GetEpDesc>
 800df98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800df9a:	2101      	movs	r1, #1
 800df9c:	4815      	ldr	r0, [pc, #84]	@ (800dff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df9e:	f000 fc08 	bl	800e7b2 <USBD_GetEpDesc>
 800dfa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dfa4:	2181      	movs	r1, #129	@ 0x81
 800dfa6:	4813      	ldr	r0, [pc, #76]	@ (800dff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dfa8:	f000 fc03 	bl	800e7b2 <USBD_GetEpDesc>
 800dfac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	2210      	movs	r2, #16
 800dfb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d006      	beq.n	800dfce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dfc8:	711a      	strb	r2, [r3, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d006      	beq.n	800dfe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dfdc:	711a      	strb	r2, [r3, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2243      	movs	r2, #67	@ 0x43
 800dfe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dfe8:	4b02      	ldr	r3, [pc, #8]	@ (800dff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3718      	adds	r7, #24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20000058 	.word	0x20000058

0800dff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	220a      	movs	r2, #10
 800e004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e006:	4b03      	ldr	r3, [pc, #12]	@ (800e014 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	20000014 	.word	0x20000014

0800e018 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e028:	2303      	movs	r3, #3
 800e02a:	e009      	b.n	800e040 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	33b0      	adds	r3, #176	@ 0xb0
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b087      	sub	sp, #28
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	32b0      	adds	r2, #176	@ 0xb0
 800e062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e066:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d101      	bne.n	800e072 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e06e:	2303      	movs	r3, #3
 800e070:	e008      	b.n	800e084 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	371c      	adds	r7, #28
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	32b0      	adds	r2, #176	@ 0xb0
 800e0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d101      	bne.n	800e0b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e004      	b.n	800e0be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
	...

0800e0cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	32b0      	adds	r2, #176	@ 0xb0
 800e0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	32b0      	adds	r2, #176	@ 0xb0
 800e0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d101      	bne.n	800e0fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	e018      	b.n	800e12c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	7c1b      	ldrb	r3, [r3, #16]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10a      	bne.n	800e118 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e102:	4b0c      	ldr	r3, [pc, #48]	@ (800e134 <USBD_CDC_ReceivePacket+0x68>)
 800e104:	7819      	ldrb	r1, [r3, #0]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e10c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f004 fab9 	bl	8012688 <USBD_LL_PrepareReceive>
 800e116:	e008      	b.n	800e12a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e118:	4b06      	ldr	r3, [pc, #24]	@ (800e134 <USBD_CDC_ReceivePacket+0x68>)
 800e11a:	7819      	ldrb	r1, [r3, #0]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e122:	2340      	movs	r3, #64	@ 0x40
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f004 faaf 	bl	8012688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	2000009c 	.word	0x2000009c

0800e138 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d101      	bne.n	800e150 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e14c:	2303      	movs	r3, #3
 800e14e:	e01f      	b.n	800e190 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2200      	movs	r2, #0
 800e154:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d003      	beq.n	800e176 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	68ba      	ldr	r2, [r7, #8]
 800e172:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	79fa      	ldrb	r2, [r7, #7]
 800e182:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f004 f913 	bl	80123b0 <USBD_LL_Init>
 800e18a:	4603      	mov	r3, r0
 800e18c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e025      	b.n	800e1fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	683a      	ldr	r2, [r7, #0]
 800e1b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	32ae      	adds	r2, #174	@ 0xae
 800e1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00f      	beq.n	800e1ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	32ae      	adds	r2, #174	@ 0xae
 800e1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1dc:	f107 020e 	add.w	r2, r7, #14
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f004 f931 	bl	8012474 <USBD_LL_Start>
 800e212:	4603      	mov	r3, r0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e224:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e226:	4618      	mov	r0, r3
 800e228:	370c      	adds	r7, #12
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	460b      	mov	r3, r1
 800e23c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d009      	beq.n	800e260 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	78fa      	ldrb	r2, [r7, #3]
 800e256:	4611      	mov	r1, r2
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	4798      	blx	r3
 800e25c:	4603      	mov	r3, r0
 800e25e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e260:	7bfb      	ldrb	r3, [r7, #15]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b084      	sub	sp, #16
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	460b      	mov	r3, r1
 800e274:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	78fa      	ldrb	r2, [r7, #3]
 800e284:	4611      	mov	r1, r2
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	4798      	blx	r3
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e290:	2303      	movs	r3, #3
 800e292:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e294:	7bfb      	ldrb	r3, [r7, #15]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2ae:	6839      	ldr	r1, [r7, #0]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f001 f8a4 	bl	800f3fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e2d2:	f003 031f 	and.w	r3, r3, #31
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	d01a      	beq.n	800e310 <USBD_LL_SetupStage+0x72>
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d822      	bhi.n	800e324 <USBD_LL_SetupStage+0x86>
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <USBD_LL_SetupStage+0x4a>
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d00a      	beq.n	800e2fc <USBD_LL_SetupStage+0x5e>
 800e2e6:	e01d      	b.n	800e324 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fad1 	bl	800e898 <USBD_StdDevReq>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e2fa:	e020      	b.n	800e33e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fb39 	bl	800e97c <USBD_StdItfReq>
 800e30a:	4603      	mov	r3, r0
 800e30c:	73fb      	strb	r3, [r7, #15]
      break;
 800e30e:	e016      	b.n	800e33e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e316:	4619      	mov	r1, r3
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fb9b 	bl	800ea54 <USBD_StdEPReq>
 800e31e:	4603      	mov	r3, r0
 800e320:	73fb      	strb	r3, [r7, #15]
      break;
 800e322:	e00c      	b.n	800e33e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e32a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	4619      	mov	r1, r3
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f004 f8fe 	bl	8012534 <USBD_LL_StallEP>
 800e338:	4603      	mov	r3, r0
 800e33a:	73fb      	strb	r3, [r7, #15]
      break;
 800e33c:	bf00      	nop
  }

  return ret;
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	460b      	mov	r3, r1
 800e352:	607a      	str	r2, [r7, #4]
 800e354:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e35a:	7afb      	ldrb	r3, [r7, #11]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d16e      	bne.n	800e43e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e36e:	2b03      	cmp	r3, #3
 800e370:	f040 8098 	bne.w	800e4a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	689a      	ldr	r2, [r3, #8]
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d913      	bls.n	800e3a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	689a      	ldr	r2, [r3, #8]
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	1ad2      	subs	r2, r2, r3
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	68da      	ldr	r2, [r3, #12]
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	4293      	cmp	r3, r2
 800e398:	bf28      	it	cs
 800e39a:	4613      	movcs	r3, r2
 800e39c:	461a      	mov	r2, r3
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f001 f920 	bl	800f5e6 <USBD_CtlContinueRx>
 800e3a6:	e07d      	b.n	800e4a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e3ae:	f003 031f 	and.w	r3, r3, #31
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d014      	beq.n	800e3e0 <USBD_LL_DataOutStage+0x98>
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d81d      	bhi.n	800e3f6 <USBD_LL_DataOutStage+0xae>
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d002      	beq.n	800e3c4 <USBD_LL_DataOutStage+0x7c>
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d003      	beq.n	800e3ca <USBD_LL_DataOutStage+0x82>
 800e3c2:	e018      	b.n	800e3f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	75bb      	strb	r3, [r7, #22]
            break;
 800e3c8:	e018      	b.n	800e3fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 f9d2 	bl	800e77e <USBD_CoreFindIF>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	75bb      	strb	r3, [r7, #22]
            break;
 800e3de:	e00d      	b.n	800e3fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 f9d4 	bl	800e798 <USBD_CoreFindEP>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	75bb      	strb	r3, [r7, #22]
            break;
 800e3f4:	e002      	b.n	800e3fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	75bb      	strb	r3, [r7, #22]
            break;
 800e3fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e3fc:	7dbb      	ldrb	r3, [r7, #22]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d119      	bne.n	800e436 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b03      	cmp	r3, #3
 800e40c:	d113      	bne.n	800e436 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e40e:	7dba      	ldrb	r2, [r7, #22]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	32ae      	adds	r2, #174	@ 0xae
 800e414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00b      	beq.n	800e436 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e41e:	7dba      	ldrb	r2, [r7, #22]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e426:	7dba      	ldrb	r2, [r7, #22]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	32ae      	adds	r2, #174	@ 0xae
 800e42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f001 f8e6 	bl	800f608 <USBD_CtlSendStatus>
 800e43c:	e032      	b.n	800e4a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e43e:	7afb      	ldrb	r3, [r7, #11]
 800e440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e444:	b2db      	uxtb	r3, r3
 800e446:	4619      	mov	r1, r3
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f000 f9a5 	bl	800e798 <USBD_CoreFindEP>
 800e44e:	4603      	mov	r3, r0
 800e450:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e452:	7dbb      	ldrb	r3, [r7, #22]
 800e454:	2bff      	cmp	r3, #255	@ 0xff
 800e456:	d025      	beq.n	800e4a4 <USBD_LL_DataOutStage+0x15c>
 800e458:	7dbb      	ldrb	r3, [r7, #22]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d122      	bne.n	800e4a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e464:	b2db      	uxtb	r3, r3
 800e466:	2b03      	cmp	r3, #3
 800e468:	d117      	bne.n	800e49a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e46a:	7dba      	ldrb	r2, [r7, #22]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	32ae      	adds	r2, #174	@ 0xae
 800e470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00f      	beq.n	800e49a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e47a:	7dba      	ldrb	r2, [r7, #22]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e482:	7dba      	ldrb	r2, [r7, #22]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	32ae      	adds	r2, #174	@ 0xae
 800e488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e48c:	699b      	ldr	r3, [r3, #24]
 800e48e:	7afa      	ldrb	r2, [r7, #11]
 800e490:	4611      	mov	r1, r2
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	4798      	blx	r3
 800e496:	4603      	mov	r3, r0
 800e498:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
 800e4a2:	e000      	b.n	800e4a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b086      	sub	sp, #24
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	60f8      	str	r0, [r7, #12]
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	607a      	str	r2, [r7, #4]
 800e4ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e4bc:	7afb      	ldrb	r3, [r7, #11]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d16f      	bne.n	800e5a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3314      	adds	r3, #20
 800e4c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d15a      	bne.n	800e588 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d914      	bls.n	800e508 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	689a      	ldr	r2, [r3, #8]
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	6879      	ldr	r1, [r7, #4]
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f001 f848 	bl	800f58a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2100      	movs	r1, #0
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f004 f8c1 	bl	8012688 <USBD_LL_PrepareReceive>
 800e506:	e03f      	b.n	800e588 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	429a      	cmp	r2, r3
 800e512:	d11c      	bne.n	800e54e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	685a      	ldr	r2, [r3, #4]
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d316      	bcc.n	800e54e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	685a      	ldr	r2, [r3, #4]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d20f      	bcs.n	800e54e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e52e:	2200      	movs	r2, #0
 800e530:	2100      	movs	r1, #0
 800e532:	68f8      	ldr	r0, [r7, #12]
 800e534:	f001 f829 	bl	800f58a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e540:	2300      	movs	r3, #0
 800e542:	2200      	movs	r2, #0
 800e544:	2100      	movs	r1, #0
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f004 f89e 	bl	8012688 <USBD_LL_PrepareReceive>
 800e54c:	e01c      	b.n	800e588 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e554:	b2db      	uxtb	r3, r3
 800e556:	2b03      	cmp	r3, #3
 800e558:	d10f      	bne.n	800e57a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2200      	movs	r2, #0
 800e56a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e57a:	2180      	movs	r1, #128	@ 0x80
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f003 ffd9 	bl	8012534 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	f001 f853 	bl	800f62e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d03a      	beq.n	800e608 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f7ff fe42 	bl	800e21c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e5a0:	e032      	b.n	800e608 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e5a2:	7afb      	ldrb	r3, [r7, #11]
 800e5a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f000 f8f3 	bl	800e798 <USBD_CoreFindEP>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5b6:	7dfb      	ldrb	r3, [r7, #23]
 800e5b8:	2bff      	cmp	r3, #255	@ 0xff
 800e5ba:	d025      	beq.n	800e608 <USBD_LL_DataInStage+0x15a>
 800e5bc:	7dfb      	ldrb	r3, [r7, #23]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d122      	bne.n	800e608 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d11c      	bne.n	800e608 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e5ce:	7dfa      	ldrb	r2, [r7, #23]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	32ae      	adds	r2, #174	@ 0xae
 800e5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d014      	beq.n	800e608 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e5de:	7dfa      	ldrb	r2, [r7, #23]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e5e6:	7dfa      	ldrb	r2, [r7, #23]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	32ae      	adds	r2, #174	@ 0xae
 800e5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	7afa      	ldrb	r2, [r7, #11]
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	4798      	blx	r3
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e5fe:	7dbb      	ldrb	r3, [r7, #22]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e604:	7dbb      	ldrb	r3, [r7, #22]
 800e606:	e000      	b.n	800e60a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d014      	beq.n	800e678 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00e      	beq.n	800e678 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	6852      	ldr	r2, [r2, #4]
 800e666:	b2d2      	uxtb	r2, r2
 800e668:	4611      	mov	r1, r2
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	4798      	blx	r3
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e674:	2303      	movs	r3, #3
 800e676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e678:	2340      	movs	r3, #64	@ 0x40
 800e67a:	2200      	movs	r2, #0
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f003 ff13 	bl	80124aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2240      	movs	r2, #64	@ 0x40
 800e690:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e694:	2340      	movs	r3, #64	@ 0x40
 800e696:	2200      	movs	r2, #0
 800e698:	2180      	movs	r1, #128	@ 0x80
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f003 ff05 	bl	80124aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2240      	movs	r2, #64	@ 0x40
 800e6aa:	621a      	str	r2, [r3, #32]

  return ret;
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b083      	sub	sp, #12
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	78fa      	ldrb	r2, [r7, #3]
 800e6c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b04      	cmp	r3, #4
 800e6e8:	d006      	beq.n	800e6f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	370c      	adds	r7, #12
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e70e:	b480      	push	{r7}
 800e710:	b083      	sub	sp, #12
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	2b04      	cmp	r3, #4
 800e720:	d106      	bne.n	800e730 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b082      	sub	sp, #8
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d110      	bne.n	800e774 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00b      	beq.n	800e774 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d005      	beq.n	800e774 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e76e:	69db      	ldr	r3, [r3, #28]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	460b      	mov	r3, r1
 800e788:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e78a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e7a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b086      	sub	sp, #24
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	7812      	ldrb	r2, [r2, #0]
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d91f      	bls.n	800e818 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e7de:	e013      	b.n	800e808 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e7e0:	f107 030a 	add.w	r3, r7, #10
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	6978      	ldr	r0, [r7, #20]
 800e7e8:	f000 f81b 	bl	800e822 <USBD_GetNextDesc>
 800e7ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	785b      	ldrb	r3, [r3, #1]
 800e7f2:	2b05      	cmp	r3, #5
 800e7f4:	d108      	bne.n	800e808 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	789b      	ldrb	r3, [r3, #2]
 800e7fe:	78fa      	ldrb	r2, [r7, #3]
 800e800:	429a      	cmp	r2, r3
 800e802:	d008      	beq.n	800e816 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e804:	2300      	movs	r3, #0
 800e806:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	885b      	ldrh	r3, [r3, #2]
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	897b      	ldrh	r3, [r7, #10]
 800e810:	429a      	cmp	r2, r3
 800e812:	d8e5      	bhi.n	800e7e0 <USBD_GetEpDesc+0x2e>
 800e814:	e000      	b.n	800e818 <USBD_GetEpDesc+0x66>
          break;
 800e816:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e818:	693b      	ldr	r3, [r7, #16]
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3718      	adds	r7, #24
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e822:	b480      	push	{r7}
 800e824:	b085      	sub	sp, #20
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	881b      	ldrh	r3, [r3, #0]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	7812      	ldrb	r2, [r2, #0]
 800e838:	4413      	add	r3, r2
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	461a      	mov	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4413      	add	r3, r2
 800e84a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e84c:	68fb      	ldr	r3, [r7, #12]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b087      	sub	sp, #28
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	3301      	adds	r3, #1
 800e870:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e878:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e87c:	021b      	lsls	r3, r3, #8
 800e87e:	b21a      	sxth	r2, r3
 800e880:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e884:	4313      	orrs	r3, r2
 800e886:	b21b      	sxth	r3, r3
 800e888:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e88a:	89fb      	ldrh	r3, [r7, #14]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8ae:	2b40      	cmp	r3, #64	@ 0x40
 800e8b0:	d005      	beq.n	800e8be <USBD_StdDevReq+0x26>
 800e8b2:	2b40      	cmp	r3, #64	@ 0x40
 800e8b4:	d857      	bhi.n	800e966 <USBD_StdDevReq+0xce>
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00f      	beq.n	800e8da <USBD_StdDevReq+0x42>
 800e8ba:	2b20      	cmp	r3, #32
 800e8bc:	d153      	bne.n	800e966 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	32ae      	adds	r2, #174	@ 0xae
 800e8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	4798      	blx	r3
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e8d8:	e04a      	b.n	800e970 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	785b      	ldrb	r3, [r3, #1]
 800e8de:	2b09      	cmp	r3, #9
 800e8e0:	d83b      	bhi.n	800e95a <USBD_StdDevReq+0xc2>
 800e8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800e8e8 <USBD_StdDevReq+0x50>)
 800e8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e8:	0800e93d 	.word	0x0800e93d
 800e8ec:	0800e951 	.word	0x0800e951
 800e8f0:	0800e95b 	.word	0x0800e95b
 800e8f4:	0800e947 	.word	0x0800e947
 800e8f8:	0800e95b 	.word	0x0800e95b
 800e8fc:	0800e91b 	.word	0x0800e91b
 800e900:	0800e911 	.word	0x0800e911
 800e904:	0800e95b 	.word	0x0800e95b
 800e908:	0800e933 	.word	0x0800e933
 800e90c:	0800e925 	.word	0x0800e925
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 fa3c 	bl	800ed90 <USBD_GetDescriptor>
          break;
 800e918:	e024      	b.n	800e964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e91a:	6839      	ldr	r1, [r7, #0]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 fbcb 	bl	800f0b8 <USBD_SetAddress>
          break;
 800e922:	e01f      	b.n	800e964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fc0a 	bl	800f140 <USBD_SetConfig>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73fb      	strb	r3, [r7, #15]
          break;
 800e930:	e018      	b.n	800e964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e932:	6839      	ldr	r1, [r7, #0]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 fcad 	bl	800f294 <USBD_GetConfig>
          break;
 800e93a:	e013      	b.n	800e964 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fcde 	bl	800f300 <USBD_GetStatus>
          break;
 800e944:	e00e      	b.n	800e964 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fd0d 	bl	800f368 <USBD_SetFeature>
          break;
 800e94e:	e009      	b.n	800e964 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 fd31 	bl	800f3ba <USBD_ClrFeature>
          break;
 800e958:	e004      	b.n	800e964 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fd88 	bl	800f472 <USBD_CtlError>
          break;
 800e962:	bf00      	nop
      }
      break;
 800e964:	e004      	b.n	800e970 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fd82 	bl	800f472 <USBD_CtlError>
      break;
 800e96e:	bf00      	nop
  }

  return ret;
 800e970:	7bfb      	ldrb	r3, [r7, #15]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop

0800e97c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e992:	2b40      	cmp	r3, #64	@ 0x40
 800e994:	d005      	beq.n	800e9a2 <USBD_StdItfReq+0x26>
 800e996:	2b40      	cmp	r3, #64	@ 0x40
 800e998:	d852      	bhi.n	800ea40 <USBD_StdItfReq+0xc4>
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <USBD_StdItfReq+0x26>
 800e99e:	2b20      	cmp	r3, #32
 800e9a0:	d14e      	bne.n	800ea40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d840      	bhi.n	800ea32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	889b      	ldrh	r3, [r3, #4]
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d836      	bhi.n	800ea28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	889b      	ldrh	r3, [r3, #4]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7ff fedb 	bl	800e77e <USBD_CoreFindIF>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
 800e9ce:	2bff      	cmp	r3, #255	@ 0xff
 800e9d0:	d01d      	beq.n	800ea0e <USBD_StdItfReq+0x92>
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d11a      	bne.n	800ea0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e9d8:	7bba      	ldrb	r2, [r7, #14]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	32ae      	adds	r2, #174	@ 0xae
 800e9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00f      	beq.n	800ea08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e9e8:	7bba      	ldrb	r2, [r7, #14]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e9f0:	7bba      	ldrb	r2, [r7, #14]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	32ae      	adds	r2, #174	@ 0xae
 800e9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	4798      	blx	r3
 800ea02:	4603      	mov	r3, r0
 800ea04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ea06:	e004      	b.n	800ea12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ea0c:	e001      	b.n	800ea12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ea0e:	2303      	movs	r3, #3
 800ea10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	88db      	ldrh	r3, [r3, #6]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d110      	bne.n	800ea3c <USBD_StdItfReq+0xc0>
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10d      	bne.n	800ea3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 fdf1 	bl	800f608 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ea26:	e009      	b.n	800ea3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 fd21 	bl	800f472 <USBD_CtlError>
          break;
 800ea30:	e004      	b.n	800ea3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ea32:	6839      	ldr	r1, [r7, #0]
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fd1c 	bl	800f472 <USBD_CtlError>
          break;
 800ea3a:	e000      	b.n	800ea3e <USBD_StdItfReq+0xc2>
          break;
 800ea3c:	bf00      	nop
      }
      break;
 800ea3e:	e004      	b.n	800ea4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fd15 	bl	800f472 <USBD_CtlError>
      break;
 800ea48:	bf00      	nop
  }

  return ret;
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	889b      	ldrh	r3, [r3, #4]
 800ea66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea70:	2b40      	cmp	r3, #64	@ 0x40
 800ea72:	d007      	beq.n	800ea84 <USBD_StdEPReq+0x30>
 800ea74:	2b40      	cmp	r3, #64	@ 0x40
 800ea76:	f200 817f 	bhi.w	800ed78 <USBD_StdEPReq+0x324>
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d02a      	beq.n	800ead4 <USBD_StdEPReq+0x80>
 800ea7e:	2b20      	cmp	r3, #32
 800ea80:	f040 817a 	bne.w	800ed78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea84:	7bbb      	ldrb	r3, [r7, #14]
 800ea86:	4619      	mov	r1, r3
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7ff fe85 	bl	800e798 <USBD_CoreFindEP>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea92:	7b7b      	ldrb	r3, [r7, #13]
 800ea94:	2bff      	cmp	r3, #255	@ 0xff
 800ea96:	f000 8174 	beq.w	800ed82 <USBD_StdEPReq+0x32e>
 800ea9a:	7b7b      	ldrb	r3, [r7, #13]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f040 8170 	bne.w	800ed82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800eaa2:	7b7a      	ldrb	r2, [r7, #13]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800eaaa:	7b7a      	ldrb	r2, [r7, #13]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	32ae      	adds	r2, #174	@ 0xae
 800eab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f000 8163 	beq.w	800ed82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800eabc:	7b7a      	ldrb	r2, [r7, #13]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	32ae      	adds	r2, #174	@ 0xae
 800eac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	6839      	ldr	r1, [r7, #0]
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	4798      	blx	r3
 800eace:	4603      	mov	r3, r0
 800ead0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ead2:	e156      	b.n	800ed82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	785b      	ldrb	r3, [r3, #1]
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d008      	beq.n	800eaee <USBD_StdEPReq+0x9a>
 800eadc:	2b03      	cmp	r3, #3
 800eade:	f300 8145 	bgt.w	800ed6c <USBD_StdEPReq+0x318>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 809b 	beq.w	800ec1e <USBD_StdEPReq+0x1ca>
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d03c      	beq.n	800eb66 <USBD_StdEPReq+0x112>
 800eaec:	e13e      	b.n	800ed6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d002      	beq.n	800eb00 <USBD_StdEPReq+0xac>
 800eafa:	2b03      	cmp	r3, #3
 800eafc:	d016      	beq.n	800eb2c <USBD_StdEPReq+0xd8>
 800eafe:	e02c      	b.n	800eb5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb00:	7bbb      	ldrb	r3, [r7, #14]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00d      	beq.n	800eb22 <USBD_StdEPReq+0xce>
 800eb06:	7bbb      	ldrb	r3, [r7, #14]
 800eb08:	2b80      	cmp	r3, #128	@ 0x80
 800eb0a:	d00a      	beq.n	800eb22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb0c:	7bbb      	ldrb	r3, [r7, #14]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f003 fd0f 	bl	8012534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb16:	2180      	movs	r1, #128	@ 0x80
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f003 fd0b 	bl	8012534 <USBD_LL_StallEP>
 800eb1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb20:	e020      	b.n	800eb64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fca4 	bl	800f472 <USBD_CtlError>
              break;
 800eb2a:	e01b      	b.n	800eb64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	885b      	ldrh	r3, [r3, #2]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10e      	bne.n	800eb52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eb34:	7bbb      	ldrb	r3, [r7, #14]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00b      	beq.n	800eb52 <USBD_StdEPReq+0xfe>
 800eb3a:	7bbb      	ldrb	r3, [r7, #14]
 800eb3c:	2b80      	cmp	r3, #128	@ 0x80
 800eb3e:	d008      	beq.n	800eb52 <USBD_StdEPReq+0xfe>
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	88db      	ldrh	r3, [r3, #6]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d104      	bne.n	800eb52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb48:	7bbb      	ldrb	r3, [r7, #14]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f003 fcf1 	bl	8012534 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fd58 	bl	800f608 <USBD_CtlSendStatus>

              break;
 800eb58:	e004      	b.n	800eb64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fc88 	bl	800f472 <USBD_CtlError>
              break;
 800eb62:	bf00      	nop
          }
          break;
 800eb64:	e107      	b.n	800ed76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b02      	cmp	r3, #2
 800eb70:	d002      	beq.n	800eb78 <USBD_StdEPReq+0x124>
 800eb72:	2b03      	cmp	r3, #3
 800eb74:	d016      	beq.n	800eba4 <USBD_StdEPReq+0x150>
 800eb76:	e04b      	b.n	800ec10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb78:	7bbb      	ldrb	r3, [r7, #14]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00d      	beq.n	800eb9a <USBD_StdEPReq+0x146>
 800eb7e:	7bbb      	ldrb	r3, [r7, #14]
 800eb80:	2b80      	cmp	r3, #128	@ 0x80
 800eb82:	d00a      	beq.n	800eb9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb84:	7bbb      	ldrb	r3, [r7, #14]
 800eb86:	4619      	mov	r1, r3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f003 fcd3 	bl	8012534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb8e:	2180      	movs	r1, #128	@ 0x80
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f003 fccf 	bl	8012534 <USBD_LL_StallEP>
 800eb96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb98:	e040      	b.n	800ec1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fc68 	bl	800f472 <USBD_CtlError>
              break;
 800eba2:	e03b      	b.n	800ec1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	885b      	ldrh	r3, [r3, #2]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d136      	bne.n	800ec1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ebac:	7bbb      	ldrb	r3, [r7, #14]
 800ebae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d004      	beq.n	800ebc0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ebb6:	7bbb      	ldrb	r3, [r7, #14]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f003 fcd9 	bl	8012572 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 fd21 	bl	800f608 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ebc6:	7bbb      	ldrb	r3, [r7, #14]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7ff fde4 	bl	800e798 <USBD_CoreFindEP>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebd4:	7b7b      	ldrb	r3, [r7, #13]
 800ebd6:	2bff      	cmp	r3, #255	@ 0xff
 800ebd8:	d01f      	beq.n	800ec1a <USBD_StdEPReq+0x1c6>
 800ebda:	7b7b      	ldrb	r3, [r7, #13]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d11c      	bne.n	800ec1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ebe0:	7b7a      	ldrb	r2, [r7, #13]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ebe8:	7b7a      	ldrb	r2, [r7, #13]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	32ae      	adds	r2, #174	@ 0xae
 800ebee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d010      	beq.n	800ec1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ebf8:	7b7a      	ldrb	r2, [r7, #13]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	32ae      	adds	r2, #174	@ 0xae
 800ebfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	4798      	blx	r3
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ec0e:	e004      	b.n	800ec1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fc2d 	bl	800f472 <USBD_CtlError>
              break;
 800ec18:	e000      	b.n	800ec1c <USBD_StdEPReq+0x1c8>
              break;
 800ec1a:	bf00      	nop
          }
          break;
 800ec1c:	e0ab      	b.n	800ed76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d002      	beq.n	800ec30 <USBD_StdEPReq+0x1dc>
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	d032      	beq.n	800ec94 <USBD_StdEPReq+0x240>
 800ec2e:	e097      	b.n	800ed60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec30:	7bbb      	ldrb	r3, [r7, #14]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <USBD_StdEPReq+0x1f2>
 800ec36:	7bbb      	ldrb	r3, [r7, #14]
 800ec38:	2b80      	cmp	r3, #128	@ 0x80
 800ec3a:	d004      	beq.n	800ec46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ec3c:	6839      	ldr	r1, [r7, #0]
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 fc17 	bl	800f472 <USBD_CtlError>
                break;
 800ec44:	e091      	b.n	800ed6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	da0b      	bge.n	800ec66 <USBD_StdEPReq+0x212>
 800ec4e:	7bbb      	ldrb	r3, [r7, #14]
 800ec50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec54:	4613      	mov	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	4413      	add	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	3310      	adds	r3, #16
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	4413      	add	r3, r2
 800ec62:	3304      	adds	r3, #4
 800ec64:	e00b      	b.n	800ec7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
 800ec68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4413      	add	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	2202      	movs	r2, #2
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fc61 	bl	800f554 <USBD_CtlSendData>
              break;
 800ec92:	e06a      	b.n	800ed6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ec94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	da11      	bge.n	800ecc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ec9c:	7bbb      	ldrb	r3, [r7, #14]
 800ec9e:	f003 020f 	and.w	r2, r3, #15
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	4613      	mov	r3, r2
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	4413      	add	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	440b      	add	r3, r1
 800ecae:	3324      	adds	r3, #36	@ 0x24
 800ecb0:	881b      	ldrh	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d117      	bne.n	800ece6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 fbda 	bl	800f472 <USBD_CtlError>
                  break;
 800ecbe:	e054      	b.n	800ed6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	f003 020f 	and.w	r2, r3, #15
 800ecc6:	6879      	ldr	r1, [r7, #4]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	4413      	add	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	440b      	add	r3, r1
 800ecd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d104      	bne.n	800ece6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ecdc:	6839      	ldr	r1, [r7, #0]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fbc7 	bl	800f472 <USBD_CtlError>
                  break;
 800ece4:	e041      	b.n	800ed6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ece6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	da0b      	bge.n	800ed06 <USBD_StdEPReq+0x2b2>
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	3310      	adds	r3, #16
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	4413      	add	r3, r2
 800ed02:	3304      	adds	r3, #4
 800ed04:	e00b      	b.n	800ed1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed06:	7bbb      	ldrb	r3, [r7, #14]
 800ed08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4413      	add	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed20:	7bbb      	ldrb	r3, [r7, #14]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <USBD_StdEPReq+0x2d8>
 800ed26:	7bbb      	ldrb	r3, [r7, #14]
 800ed28:	2b80      	cmp	r3, #128	@ 0x80
 800ed2a:	d103      	bne.n	800ed34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]
 800ed32:	e00e      	b.n	800ed52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed34:	7bbb      	ldrb	r3, [r7, #14]
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f003 fc39 	bl	80125b0 <USBD_LL_IsStallEP>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d003      	beq.n	800ed4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2201      	movs	r2, #1
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	e002      	b.n	800ed52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2202      	movs	r2, #2
 800ed56:	4619      	mov	r1, r3
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 fbfb 	bl	800f554 <USBD_CtlSendData>
              break;
 800ed5e:	e004      	b.n	800ed6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ed60:	6839      	ldr	r1, [r7, #0]
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fb85 	bl	800f472 <USBD_CtlError>
              break;
 800ed68:	bf00      	nop
          }
          break;
 800ed6a:	e004      	b.n	800ed76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fb7f 	bl	800f472 <USBD_CtlError>
          break;
 800ed74:	bf00      	nop
      }
      break;
 800ed76:	e005      	b.n	800ed84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ed78:	6839      	ldr	r1, [r7, #0]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fb79 	bl	800f472 <USBD_CtlError>
      break;
 800ed80:	e000      	b.n	800ed84 <USBD_StdEPReq+0x330>
      break;
 800ed82:	bf00      	nop
  }

  return ret;
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eda2:	2300      	movs	r3, #0
 800eda4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	885b      	ldrh	r3, [r3, #2]
 800edaa:	0a1b      	lsrs	r3, r3, #8
 800edac:	b29b      	uxth	r3, r3
 800edae:	3b01      	subs	r3, #1
 800edb0:	2b0e      	cmp	r3, #14
 800edb2:	f200 8152 	bhi.w	800f05a <USBD_GetDescriptor+0x2ca>
 800edb6:	a201      	add	r2, pc, #4	@ (adr r2, 800edbc <USBD_GetDescriptor+0x2c>)
 800edb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edbc:	0800ee2d 	.word	0x0800ee2d
 800edc0:	0800ee45 	.word	0x0800ee45
 800edc4:	0800ee85 	.word	0x0800ee85
 800edc8:	0800f05b 	.word	0x0800f05b
 800edcc:	0800f05b 	.word	0x0800f05b
 800edd0:	0800effb 	.word	0x0800effb
 800edd4:	0800f027 	.word	0x0800f027
 800edd8:	0800f05b 	.word	0x0800f05b
 800eddc:	0800f05b 	.word	0x0800f05b
 800ede0:	0800f05b 	.word	0x0800f05b
 800ede4:	0800f05b 	.word	0x0800f05b
 800ede8:	0800f05b 	.word	0x0800f05b
 800edec:	0800f05b 	.word	0x0800f05b
 800edf0:	0800f05b 	.word	0x0800f05b
 800edf4:	0800edf9 	.word	0x0800edf9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edfe:	69db      	ldr	r3, [r3, #28]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00b      	beq.n	800ee1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee0a:	69db      	ldr	r3, [r3, #28]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	7c12      	ldrb	r2, [r2, #16]
 800ee10:	f107 0108 	add.w	r1, r7, #8
 800ee14:	4610      	mov	r0, r2
 800ee16:	4798      	blx	r3
 800ee18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee1a:	e126      	b.n	800f06a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee1c:	6839      	ldr	r1, [r7, #0]
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 fb27 	bl	800f472 <USBD_CtlError>
        err++;
 800ee24:	7afb      	ldrb	r3, [r7, #11]
 800ee26:	3301      	adds	r3, #1
 800ee28:	72fb      	strb	r3, [r7, #11]
      break;
 800ee2a:	e11e      	b.n	800f06a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	7c12      	ldrb	r2, [r2, #16]
 800ee38:	f107 0108 	add.w	r1, r7, #8
 800ee3c:	4610      	mov	r0, r2
 800ee3e:	4798      	blx	r3
 800ee40:	60f8      	str	r0, [r7, #12]
      break;
 800ee42:	e112      	b.n	800f06a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7c1b      	ldrb	r3, [r3, #16]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10d      	bne.n	800ee68 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee54:	f107 0208 	add.w	r2, r7, #8
 800ee58:	4610      	mov	r0, r2
 800ee5a:	4798      	blx	r3
 800ee5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3301      	adds	r3, #1
 800ee62:	2202      	movs	r2, #2
 800ee64:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ee66:	e100      	b.n	800f06a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee70:	f107 0208 	add.w	r2, r7, #8
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
 800ee78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	2202      	movs	r2, #2
 800ee80:	701a      	strb	r2, [r3, #0]
      break;
 800ee82:	e0f2      	b.n	800f06a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	885b      	ldrh	r3, [r3, #2]
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b05      	cmp	r3, #5
 800ee8c:	f200 80ac 	bhi.w	800efe8 <USBD_GetDescriptor+0x258>
 800ee90:	a201      	add	r2, pc, #4	@ (adr r2, 800ee98 <USBD_GetDescriptor+0x108>)
 800ee92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee96:	bf00      	nop
 800ee98:	0800eeb1 	.word	0x0800eeb1
 800ee9c:	0800eee5 	.word	0x0800eee5
 800eea0:	0800ef19 	.word	0x0800ef19
 800eea4:	0800ef4d 	.word	0x0800ef4d
 800eea8:	0800ef81 	.word	0x0800ef81
 800eeac:	0800efb5 	.word	0x0800efb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00b      	beq.n	800eed4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	7c12      	ldrb	r2, [r2, #16]
 800eec8:	f107 0108 	add.w	r1, r7, #8
 800eecc:	4610      	mov	r0, r2
 800eece:	4798      	blx	r3
 800eed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eed2:	e091      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eed4:	6839      	ldr	r1, [r7, #0]
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 facb 	bl	800f472 <USBD_CtlError>
            err++;
 800eedc:	7afb      	ldrb	r3, [r7, #11]
 800eede:	3301      	adds	r3, #1
 800eee0:	72fb      	strb	r3, [r7, #11]
          break;
 800eee2:	e089      	b.n	800eff8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00b      	beq.n	800ef08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	7c12      	ldrb	r2, [r2, #16]
 800eefc:	f107 0108 	add.w	r1, r7, #8
 800ef00:	4610      	mov	r0, r2
 800ef02:	4798      	blx	r3
 800ef04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef06:	e077      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef08:	6839      	ldr	r1, [r7, #0]
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fab1 	bl	800f472 <USBD_CtlError>
            err++;
 800ef10:	7afb      	ldrb	r3, [r7, #11]
 800ef12:	3301      	adds	r3, #1
 800ef14:	72fb      	strb	r3, [r7, #11]
          break;
 800ef16:	e06f      	b.n	800eff8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00b      	beq.n	800ef3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	7c12      	ldrb	r2, [r2, #16]
 800ef30:	f107 0108 	add.w	r1, r7, #8
 800ef34:	4610      	mov	r0, r2
 800ef36:	4798      	blx	r3
 800ef38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef3a:	e05d      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef3c:	6839      	ldr	r1, [r7, #0]
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fa97 	bl	800f472 <USBD_CtlError>
            err++;
 800ef44:	7afb      	ldrb	r3, [r7, #11]
 800ef46:	3301      	adds	r3, #1
 800ef48:	72fb      	strb	r3, [r7, #11]
          break;
 800ef4a:	e055      	b.n	800eff8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00b      	beq.n	800ef70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	7c12      	ldrb	r2, [r2, #16]
 800ef64:	f107 0108 	add.w	r1, r7, #8
 800ef68:	4610      	mov	r0, r2
 800ef6a:	4798      	blx	r3
 800ef6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef6e:	e043      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 fa7d 	bl	800f472 <USBD_CtlError>
            err++;
 800ef78:	7afb      	ldrb	r3, [r7, #11]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef7e:	e03b      	b.n	800eff8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef86:	695b      	ldr	r3, [r3, #20]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00b      	beq.n	800efa4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ef92:	695b      	ldr	r3, [r3, #20]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	7c12      	ldrb	r2, [r2, #16]
 800ef98:	f107 0108 	add.w	r1, r7, #8
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	4798      	blx	r3
 800efa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efa2:	e029      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fa63 	bl	800f472 <USBD_CtlError>
            err++;
 800efac:	7afb      	ldrb	r3, [r7, #11]
 800efae:	3301      	adds	r3, #1
 800efb0:	72fb      	strb	r3, [r7, #11]
          break;
 800efb2:	e021      	b.n	800eff8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00b      	beq.n	800efd8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efc6:	699b      	ldr	r3, [r3, #24]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	7c12      	ldrb	r2, [r2, #16]
 800efcc:	f107 0108 	add.w	r1, r7, #8
 800efd0:	4610      	mov	r0, r2
 800efd2:	4798      	blx	r3
 800efd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efd6:	e00f      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fa49 	bl	800f472 <USBD_CtlError>
            err++;
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	3301      	adds	r3, #1
 800efe4:	72fb      	strb	r3, [r7, #11]
          break;
 800efe6:	e007      	b.n	800eff8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 fa41 	bl	800f472 <USBD_CtlError>
          err++;
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	3301      	adds	r3, #1
 800eff4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eff6:	bf00      	nop
      }
      break;
 800eff8:	e037      	b.n	800f06a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7c1b      	ldrb	r3, [r3, #16]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d109      	bne.n	800f016 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f00a:	f107 0208 	add.w	r2, r7, #8
 800f00e:	4610      	mov	r0, r2
 800f010:	4798      	blx	r3
 800f012:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f014:	e029      	b.n	800f06a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f016:	6839      	ldr	r1, [r7, #0]
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fa2a 	bl	800f472 <USBD_CtlError>
        err++;
 800f01e:	7afb      	ldrb	r3, [r7, #11]
 800f020:	3301      	adds	r3, #1
 800f022:	72fb      	strb	r3, [r7, #11]
      break;
 800f024:	e021      	b.n	800f06a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7c1b      	ldrb	r3, [r3, #16]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10d      	bne.n	800f04a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f036:	f107 0208 	add.w	r2, r7, #8
 800f03a:	4610      	mov	r0, r2
 800f03c:	4798      	blx	r3
 800f03e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	3301      	adds	r3, #1
 800f044:	2207      	movs	r2, #7
 800f046:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f048:	e00f      	b.n	800f06a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fa10 	bl	800f472 <USBD_CtlError>
        err++;
 800f052:	7afb      	ldrb	r3, [r7, #11]
 800f054:	3301      	adds	r3, #1
 800f056:	72fb      	strb	r3, [r7, #11]
      break;
 800f058:	e007      	b.n	800f06a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fa08 	bl	800f472 <USBD_CtlError>
      err++;
 800f062:	7afb      	ldrb	r3, [r7, #11]
 800f064:	3301      	adds	r3, #1
 800f066:	72fb      	strb	r3, [r7, #11]
      break;
 800f068:	bf00      	nop
  }

  if (err != 0U)
 800f06a:	7afb      	ldrb	r3, [r7, #11]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d11e      	bne.n	800f0ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	88db      	ldrh	r3, [r3, #6]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d016      	beq.n	800f0a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f078:	893b      	ldrh	r3, [r7, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00e      	beq.n	800f09c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	88da      	ldrh	r2, [r3, #6]
 800f082:	893b      	ldrh	r3, [r7, #8]
 800f084:	4293      	cmp	r3, r2
 800f086:	bf28      	it	cs
 800f088:	4613      	movcs	r3, r2
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f08e:	893b      	ldrh	r3, [r7, #8]
 800f090:	461a      	mov	r2, r3
 800f092:	68f9      	ldr	r1, [r7, #12]
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 fa5d 	bl	800f554 <USBD_CtlSendData>
 800f09a:	e009      	b.n	800f0b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 f9e7 	bl	800f472 <USBD_CtlError>
 800f0a4:	e004      	b.n	800f0b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 faae 	bl	800f608 <USBD_CtlSendStatus>
 800f0ac:	e000      	b.n	800f0b0 <USBD_GetDescriptor+0x320>
    return;
 800f0ae:	bf00      	nop
  }
}
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop

0800f0b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	889b      	ldrh	r3, [r3, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d131      	bne.n	800f12e <USBD_SetAddress+0x76>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	88db      	ldrh	r3, [r3, #6]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d12d      	bne.n	800f12e <USBD_SetAddress+0x76>
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	885b      	ldrh	r3, [r3, #2]
 800f0d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0d8:	d829      	bhi.n	800f12e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	885b      	ldrh	r3, [r3, #2]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d104      	bne.n	800f0fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 f9bc 	bl	800f472 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0fa:	e01d      	b.n	800f138 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7bfa      	ldrb	r2, [r7, #15]
 800f100:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f104:	7bfb      	ldrb	r3, [r7, #15]
 800f106:	4619      	mov	r1, r3
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f003 fa7d 	bl	8012608 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 fa7a 	bl	800f608 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d004      	beq.n	800f124 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2202      	movs	r2, #2
 800f11e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f122:	e009      	b.n	800f138 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12c:	e004      	b.n	800f138 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f12e:	6839      	ldr	r1, [r7, #0]
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f99e 	bl	800f472 <USBD_CtlError>
  }
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	885b      	ldrh	r3, [r3, #2]
 800f152:	b2da      	uxtb	r2, r3
 800f154:	4b4e      	ldr	r3, [pc, #312]	@ (800f290 <USBD_SetConfig+0x150>)
 800f156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f158:	4b4d      	ldr	r3, [pc, #308]	@ (800f290 <USBD_SetConfig+0x150>)
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d905      	bls.n	800f16c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f985 	bl	800f472 <USBD_CtlError>
    return USBD_FAIL;
 800f168:	2303      	movs	r3, #3
 800f16a:	e08c      	b.n	800f286 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b02      	cmp	r3, #2
 800f176:	d002      	beq.n	800f17e <USBD_SetConfig+0x3e>
 800f178:	2b03      	cmp	r3, #3
 800f17a:	d029      	beq.n	800f1d0 <USBD_SetConfig+0x90>
 800f17c:	e075      	b.n	800f26a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f17e:	4b44      	ldr	r3, [pc, #272]	@ (800f290 <USBD_SetConfig+0x150>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d020      	beq.n	800f1c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f186:	4b42      	ldr	r3, [pc, #264]	@ (800f290 <USBD_SetConfig+0x150>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	461a      	mov	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f190:	4b3f      	ldr	r3, [pc, #252]	@ (800f290 <USBD_SetConfig+0x150>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff f84b 	bl	800e232 <USBD_SetClassConfig>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d008      	beq.n	800f1b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f1a6:	6839      	ldr	r1, [r7, #0]
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 f962 	bl	800f472 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2202      	movs	r2, #2
 800f1b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1b6:	e065      	b.n	800f284 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 fa25 	bl	800f608 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2203      	movs	r2, #3
 800f1c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f1c6:	e05d      	b.n	800f284 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fa1d 	bl	800f608 <USBD_CtlSendStatus>
      break;
 800f1ce:	e059      	b.n	800f284 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f1d0:	4b2f      	ldr	r3, [pc, #188]	@ (800f290 <USBD_SetConfig+0x150>)
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d112      	bne.n	800f1fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2202      	movs	r2, #2
 800f1dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f1e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f290 <USBD_SetConfig+0x150>)
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1ea:	4b29      	ldr	r3, [pc, #164]	@ (800f290 <USBD_SetConfig+0x150>)
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff f83a 	bl	800e26a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fa06 	bl	800f608 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1fc:	e042      	b.n	800f284 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f1fe:	4b24      	ldr	r3, [pc, #144]	@ (800f290 <USBD_SetConfig+0x150>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d02a      	beq.n	800f262 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	b2db      	uxtb	r3, r3
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff f828 	bl	800e26a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f21a:	4b1d      	ldr	r3, [pc, #116]	@ (800f290 <USBD_SetConfig+0x150>)
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	461a      	mov	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f224:	4b1a      	ldr	r3, [pc, #104]	@ (800f290 <USBD_SetConfig+0x150>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	4619      	mov	r1, r3
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f7ff f801 	bl	800e232 <USBD_SetClassConfig>
 800f230:	4603      	mov	r3, r0
 800f232:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f234:	7bfb      	ldrb	r3, [r7, #15]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00f      	beq.n	800f25a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 f918 	bl	800f472 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff f80d 	bl	800e26a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2202      	movs	r2, #2
 800f254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f258:	e014      	b.n	800f284 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 f9d4 	bl	800f608 <USBD_CtlSendStatus>
      break;
 800f260:	e010      	b.n	800f284 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f9d0 	bl	800f608 <USBD_CtlSendStatus>
      break;
 800f268:	e00c      	b.n	800f284 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f900 	bl	800f472 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f272:	4b07      	ldr	r3, [pc, #28]	@ (800f290 <USBD_SetConfig+0x150>)
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	4619      	mov	r1, r3
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7fe fff6 	bl	800e26a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f27e:	2303      	movs	r3, #3
 800f280:	73fb      	strb	r3, [r7, #15]
      break;
 800f282:	bf00      	nop
  }

  return ret;
 800f284:	7bfb      	ldrb	r3, [r7, #15]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	20000708 	.word	0x20000708

0800f294 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	88db      	ldrh	r3, [r3, #6]
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d004      	beq.n	800f2b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 f8e2 	bl	800f472 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f2ae:	e023      	b.n	800f2f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	dc02      	bgt.n	800f2c2 <USBD_GetConfig+0x2e>
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	dc03      	bgt.n	800f2c8 <USBD_GetConfig+0x34>
 800f2c0:	e015      	b.n	800f2ee <USBD_GetConfig+0x5a>
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	d00b      	beq.n	800f2de <USBD_GetConfig+0x4a>
 800f2c6:	e012      	b.n	800f2ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	3308      	adds	r3, #8
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 f93c 	bl	800f554 <USBD_CtlSendData>
        break;
 800f2dc:	e00c      	b.n	800f2f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 f934 	bl	800f554 <USBD_CtlSendData>
        break;
 800f2ec:	e004      	b.n	800f2f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 f8be 	bl	800f472 <USBD_CtlError>
        break;
 800f2f6:	bf00      	nop
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f310:	b2db      	uxtb	r3, r3
 800f312:	3b01      	subs	r3, #1
 800f314:	2b02      	cmp	r3, #2
 800f316:	d81e      	bhi.n	800f356 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	88db      	ldrh	r3, [r3, #6]
 800f31c:	2b02      	cmp	r3, #2
 800f31e:	d004      	beq.n	800f32a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f8a5 	bl	800f472 <USBD_CtlError>
        break;
 800f328:	e01a      	b.n	800f360 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2201      	movs	r2, #1
 800f32e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	f043 0202 	orr.w	r2, r3, #2
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	330c      	adds	r3, #12
 800f34a:	2202      	movs	r2, #2
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f900 	bl	800f554 <USBD_CtlSendData>
      break;
 800f354:	e004      	b.n	800f360 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f356:	6839      	ldr	r1, [r7, #0]
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 f88a 	bl	800f472 <USBD_CtlError>
      break;
 800f35e:	bf00      	nop
  }
}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	885b      	ldrh	r3, [r3, #2]
 800f376:	2b01      	cmp	r3, #1
 800f378:	d107      	bne.n	800f38a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2201      	movs	r2, #1
 800f37e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f940 	bl	800f608 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f388:	e013      	b.n	800f3b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	885b      	ldrh	r3, [r3, #2]
 800f38e:	2b02      	cmp	r3, #2
 800f390:	d10b      	bne.n	800f3aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	889b      	ldrh	r3, [r3, #4]
 800f396:	0a1b      	lsrs	r3, r3, #8
 800f398:	b29b      	uxth	r3, r3
 800f39a:	b2da      	uxtb	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f930 	bl	800f608 <USBD_CtlSendStatus>
}
 800f3a8:	e003      	b.n	800f3b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f860 	bl	800f472 <USBD_CtlError>
}
 800f3b2:	bf00      	nop
 800f3b4:	3708      	adds	r7, #8
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b082      	sub	sp, #8
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
 800f3c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	2b02      	cmp	r3, #2
 800f3d0:	d80b      	bhi.n	800f3ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	885b      	ldrh	r3, [r3, #2]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d10c      	bne.n	800f3f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f910 	bl	800f608 <USBD_CtlSendStatus>
      }
      break;
 800f3e8:	e004      	b.n	800f3f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 f840 	bl	800f472 <USBD_CtlError>
      break;
 800f3f2:	e000      	b.n	800f3f6 <USBD_ClrFeature+0x3c>
      break;
 800f3f4:	bf00      	nop
  }
}
 800f3f6:	bf00      	nop
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b084      	sub	sp, #16
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	781a      	ldrb	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	3301      	adds	r3, #1
 800f418:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	781a      	ldrb	r2, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3301      	adds	r3, #1
 800f426:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7ff fa16 	bl	800e85a <SWAPBYTE>
 800f42e:	4603      	mov	r3, r0
 800f430:	461a      	mov	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	3301      	adds	r3, #1
 800f440:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f7ff fa09 	bl	800e85a <SWAPBYTE>
 800f448:	4603      	mov	r3, r0
 800f44a:	461a      	mov	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	3301      	adds	r3, #1
 800f454:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	3301      	adds	r3, #1
 800f45a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7ff f9fc 	bl	800e85a <SWAPBYTE>
 800f462:	4603      	mov	r3, r0
 800f464:	461a      	mov	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	80da      	strh	r2, [r3, #6]
}
 800f46a:	bf00      	nop
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b082      	sub	sp, #8
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f47c:	2180      	movs	r1, #128	@ 0x80
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f003 f858 	bl	8012534 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f484:	2100      	movs	r1, #0
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f003 f854 	bl	8012534 <USBD_LL_StallEP>
}
 800f48c:	bf00      	nop
 800f48e:	3708      	adds	r7, #8
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d036      	beq.n	800f518 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f4ae:	6938      	ldr	r0, [r7, #16]
 800f4b0:	f000 f836 	bl	800f520 <USBD_GetLen>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4c2:	7dfb      	ldrb	r3, [r7, #23]
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	7812      	ldrb	r2, [r2, #0]
 800f4cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4ce:	7dfb      	ldrb	r3, [r7, #23]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4d4:	7dfb      	ldrb	r3, [r7, #23]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	4413      	add	r3, r2
 800f4da:	2203      	movs	r2, #3
 800f4dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4de:	7dfb      	ldrb	r3, [r7, #23]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f4e4:	e013      	b.n	800f50e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	693a      	ldr	r2, [r7, #16]
 800f4ee:	7812      	ldrb	r2, [r2, #0]
 800f4f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	613b      	str	r3, [r7, #16]
    idx++;
 800f4f8:	7dfb      	ldrb	r3, [r7, #23]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f4fe:	7dfb      	ldrb	r3, [r7, #23]
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	4413      	add	r3, r2
 800f504:	2200      	movs	r2, #0
 800f506:	701a      	strb	r2, [r3, #0]
    idx++;
 800f508:	7dfb      	ldrb	r3, [r7, #23]
 800f50a:	3301      	adds	r3, #1
 800f50c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1e7      	bne.n	800f4e6 <USBD_GetString+0x52>
 800f516:	e000      	b.n	800f51a <USBD_GetString+0x86>
    return;
 800f518:	bf00      	nop
  }
}
 800f51a:	3718      	adds	r7, #24
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f528:	2300      	movs	r3, #0
 800f52a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f530:	e005      	b.n	800f53e <USBD_GetLen+0x1e>
  {
    len++;
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	3301      	adds	r3, #1
 800f536:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	3301      	adds	r3, #1
 800f53c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1f5      	bne.n	800f532 <USBD_GetLen+0x12>
  }

  return len;
 800f546:	7bfb      	ldrb	r3, [r7, #15]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3714      	adds	r7, #20
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2202      	movs	r2, #2
 800f564:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	68ba      	ldr	r2, [r7, #8]
 800f578:	2100      	movs	r1, #0
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f003 f863 	bl	8012646 <USBD_LL_Transmit>

  return USBD_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	60f8      	str	r0, [r7, #12]
 800f592:	60b9      	str	r1, [r7, #8]
 800f594:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68ba      	ldr	r2, [r7, #8]
 800f59a:	2100      	movs	r1, #0
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f003 f852 	bl	8012646 <USBD_LL_Transmit>

  return USBD_OK;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2203      	movs	r2, #3
 800f5bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	68ba      	ldr	r2, [r7, #8]
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f003 f856 	bl	8012688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b084      	sub	sp, #16
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f003 f845 	bl	8012688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2204      	movs	r2, #4
 800f614:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f618:	2300      	movs	r3, #0
 800f61a:	2200      	movs	r2, #0
 800f61c:	2100      	movs	r1, #0
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f003 f811 	bl	8012646 <USBD_LL_Transmit>

  return USBD_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	b082      	sub	sp, #8
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2205      	movs	r2, #5
 800f63a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f63e:	2300      	movs	r3, #0
 800f640:	2200      	movs	r2, #0
 800f642:	2100      	movs	r1, #0
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f003 f81f 	bl	8012688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <__NVIC_SetPriority>:
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	6039      	str	r1, [r7, #0]
 800f65e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f664:	2b00      	cmp	r3, #0
 800f666:	db0a      	blt.n	800f67e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	b2da      	uxtb	r2, r3
 800f66c:	490c      	ldr	r1, [pc, #48]	@ (800f6a0 <__NVIC_SetPriority+0x4c>)
 800f66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f672:	0152      	lsls	r2, r2, #5
 800f674:	b2d2      	uxtb	r2, r2
 800f676:	440b      	add	r3, r1
 800f678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f67c:	e00a      	b.n	800f694 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	b2da      	uxtb	r2, r3
 800f682:	4908      	ldr	r1, [pc, #32]	@ (800f6a4 <__NVIC_SetPriority+0x50>)
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	f003 030f 	and.w	r3, r3, #15
 800f68a:	3b04      	subs	r3, #4
 800f68c:	0152      	lsls	r2, r2, #5
 800f68e:	b2d2      	uxtb	r2, r2
 800f690:	440b      	add	r3, r1
 800f692:	761a      	strb	r2, [r3, #24]
}
 800f694:	bf00      	nop
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	e000e100 	.word	0xe000e100
 800f6a4:	e000ed00 	.word	0xe000ed00

0800f6a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f6ac:	4b05      	ldr	r3, [pc, #20]	@ (800f6c4 <SysTick_Handler+0x1c>)
 800f6ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f6b0:	f001 fbe8 	bl	8010e84 <xTaskGetSchedulerState>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d001      	beq.n	800f6be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f6ba:	f002 f865 	bl	8011788 <xPortSysTickHandler>
  }
}
 800f6be:	bf00      	nop
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	e000e010 	.word	0xe000e010

0800f6c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	f06f 0004 	mvn.w	r0, #4
 800f6d2:	f7ff ffbf 	bl	800f654 <__NVIC_SetPriority>
#endif
}
 800f6d6:	bf00      	nop
 800f6d8:	bd80      	pop	{r7, pc}
	...

0800f6dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6e2:	f3ef 8305 	mrs	r3, IPSR
 800f6e6:	603b      	str	r3, [r7, #0]
  return(result);
 800f6e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d003      	beq.n	800f6f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f6ee:	f06f 0305 	mvn.w	r3, #5
 800f6f2:	607b      	str	r3, [r7, #4]
 800f6f4:	e00c      	b.n	800f710 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800f720 <osKernelInitialize+0x44>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d105      	bne.n	800f70a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f6fe:	4b08      	ldr	r3, [pc, #32]	@ (800f720 <osKernelInitialize+0x44>)
 800f700:	2201      	movs	r2, #1
 800f702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f704:	2300      	movs	r3, #0
 800f706:	607b      	str	r3, [r7, #4]
 800f708:	e002      	b.n	800f710 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f70a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f70e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f710:	687b      	ldr	r3, [r7, #4]
}
 800f712:	4618      	mov	r0, r3
 800f714:	370c      	adds	r7, #12
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	2000070c 	.word	0x2000070c

0800f724 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f72a:	f3ef 8305 	mrs	r3, IPSR
 800f72e:	603b      	str	r3, [r7, #0]
  return(result);
 800f730:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f732:	2b00      	cmp	r3, #0
 800f734:	d003      	beq.n	800f73e <osKernelStart+0x1a>
    stat = osErrorISR;
 800f736:	f06f 0305 	mvn.w	r3, #5
 800f73a:	607b      	str	r3, [r7, #4]
 800f73c:	e010      	b.n	800f760 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f73e:	4b0b      	ldr	r3, [pc, #44]	@ (800f76c <osKernelStart+0x48>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b01      	cmp	r3, #1
 800f744:	d109      	bne.n	800f75a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f746:	f7ff ffbf 	bl	800f6c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f74a:	4b08      	ldr	r3, [pc, #32]	@ (800f76c <osKernelStart+0x48>)
 800f74c:	2202      	movs	r2, #2
 800f74e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f750:	f000 ff9e 	bl	8010690 <vTaskStartScheduler>
      stat = osOK;
 800f754:	2300      	movs	r3, #0
 800f756:	607b      	str	r3, [r7, #4]
 800f758:	e002      	b.n	800f760 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f75a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f75e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f760:	687b      	ldr	r3, [r7, #4]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	2000070c 	.word	0x2000070c

0800f770 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f770:	b580      	push	{r7, lr}
 800f772:	b08e      	sub	sp, #56	@ 0x38
 800f774:	af04      	add	r7, sp, #16
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f77c:	2300      	movs	r3, #0
 800f77e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f780:	f3ef 8305 	mrs	r3, IPSR
 800f784:	617b      	str	r3, [r7, #20]
  return(result);
 800f786:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d17e      	bne.n	800f88a <osThreadNew+0x11a>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d07b      	beq.n	800f88a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f792:	2380      	movs	r3, #128	@ 0x80
 800f794:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f796:	2318      	movs	r3, #24
 800f798:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f79e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f7a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d045      	beq.n	800f836 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d002      	beq.n	800f7b8 <osThreadNew+0x48>
        name = attr->name;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	699b      	ldr	r3, [r3, #24]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d002      	beq.n	800f7c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	699b      	ldr	r3, [r3, #24]
 800f7c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d008      	beq.n	800f7de <osThreadNew+0x6e>
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	2b38      	cmp	r3, #56	@ 0x38
 800f7d0:	d805      	bhi.n	800f7de <osThreadNew+0x6e>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <osThreadNew+0x72>
        return (NULL);
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e054      	b.n	800f88c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	695b      	ldr	r3, [r3, #20]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d003      	beq.n	800f7f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	695b      	ldr	r3, [r3, #20]
 800f7ee:	089b      	lsrs	r3, r3, #2
 800f7f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00e      	beq.n	800f818 <osThreadNew+0xa8>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	2ba7      	cmp	r3, #167	@ 0xa7
 800f800:	d90a      	bls.n	800f818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f806:	2b00      	cmp	r3, #0
 800f808:	d006      	beq.n	800f818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	695b      	ldr	r3, [r3, #20]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d002      	beq.n	800f818 <osThreadNew+0xa8>
        mem = 1;
 800f812:	2301      	movs	r3, #1
 800f814:	61bb      	str	r3, [r7, #24]
 800f816:	e010      	b.n	800f83a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d10c      	bne.n	800f83a <osThreadNew+0xca>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d108      	bne.n	800f83a <osThreadNew+0xca>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	691b      	ldr	r3, [r3, #16]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d104      	bne.n	800f83a <osThreadNew+0xca>
          mem = 0;
 800f830:	2300      	movs	r3, #0
 800f832:	61bb      	str	r3, [r7, #24]
 800f834:	e001      	b.n	800f83a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d110      	bne.n	800f862 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f848:	9202      	str	r2, [sp, #8]
 800f84a:	9301      	str	r3, [sp, #4]
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	6a3a      	ldr	r2, [r7, #32]
 800f854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f000 fd5c 	bl	8010314 <xTaskCreateStatic>
 800f85c:	4603      	mov	r3, r0
 800f85e:	613b      	str	r3, [r7, #16]
 800f860:	e013      	b.n	800f88a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d110      	bne.n	800f88a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	f107 0310 	add.w	r3, r7, #16
 800f870:	9301      	str	r3, [sp, #4]
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f000 fd92 	bl	80103a4 <xTaskCreate>
 800f880:	4603      	mov	r3, r0
 800f882:	2b01      	cmp	r3, #1
 800f884:	d001      	beq.n	800f88a <osThreadNew+0x11a>
            hTask = NULL;
 800f886:	2300      	movs	r3, #0
 800f888:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f88a:	693b      	ldr	r3, [r7, #16]
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3728      	adds	r7, #40	@ 0x28
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f89c:	f3ef 8305 	mrs	r3, IPSR
 800f8a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800f8a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d003      	beq.n	800f8b0 <osDelay+0x1c>
    stat = osErrorISR;
 800f8a8:	f06f 0305 	mvn.w	r3, #5
 800f8ac:	60fb      	str	r3, [r7, #12]
 800f8ae:	e007      	b.n	800f8c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fec2 	bl	8010644 <vTaskDelay>
    }
  }

  return (stat);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
	...

0800f8cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	4a07      	ldr	r2, [pc, #28]	@ (800f8f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f8dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	4a06      	ldr	r2, [pc, #24]	@ (800f8fc <vApplicationGetIdleTaskMemory+0x30>)
 800f8e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2280      	movs	r2, #128	@ 0x80
 800f8e8:	601a      	str	r2, [r3, #0]
}
 800f8ea:	bf00      	nop
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	20000710 	.word	0x20000710
 800f8fc:	200007b8 	.word	0x200007b8

0800f900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4a07      	ldr	r2, [pc, #28]	@ (800f92c <vApplicationGetTimerTaskMemory+0x2c>)
 800f910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	4a06      	ldr	r2, [pc, #24]	@ (800f930 <vApplicationGetTimerTaskMemory+0x30>)
 800f916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f91e:	601a      	str	r2, [r3, #0]
}
 800f920:	bf00      	nop
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	200009b8 	.word	0x200009b8
 800f930:	20000a60 	.word	0x20000a60

0800f934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f103 0208 	add.w	r2, r3, #8
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f94c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f103 0208 	add.w	r2, r3, #8
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f103 0208 	add.w	r2, r3, #8
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f982:	bf00      	nop
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f98e:	b480      	push	{r7}
 800f990:	b085      	sub	sp, #20
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	689a      	ldr	r2, [r3, #8]
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	1c5a      	adds	r2, r3, #1
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	601a      	str	r2, [r3, #0]
}
 800f9ca:	bf00      	nop
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr

0800f9d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f9d6:	b480      	push	{r7}
 800f9d8:	b085      	sub	sp, #20
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9ec:	d103      	bne.n	800f9f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	e00c      	b.n	800fa10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	3308      	adds	r3, #8
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	e002      	b.n	800fa04 <vListInsert+0x2e>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d2f6      	bcs.n	800f9fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	683a      	ldr	r2, [r7, #0]
 800fa1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	601a      	str	r2, [r3, #0]
}
 800fa3c:	bf00      	nop
 800fa3e:	3714      	adds	r7, #20
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	691b      	ldr	r3, [r3, #16]
 800fa54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	6892      	ldr	r2, [r2, #8]
 800fa5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	6852      	ldr	r2, [r2, #4]
 800fa68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d103      	bne.n	800fa7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	689a      	ldr	r2, [r3, #8]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	1e5a      	subs	r2, r3, #1
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3714      	adds	r7, #20
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d103      	bne.n	800fab8 <xQueueGenericReset+0x1c>
 800fab0:	f001 ff7a 	bl	80119a8 <ulSetInterruptMask>
 800fab4:	bf00      	nop
 800fab6:	e7fd      	b.n	800fab4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800fab8:	f001 fe3a 	bl	8011730 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fac4:	68f9      	ldr	r1, [r7, #12]
 800fac6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fac8:	fb01 f303 	mul.w	r3, r1, r3
 800facc:	441a      	add	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2200      	movs	r2, #0
 800fad6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fae8:	3b01      	subs	r3, #1
 800faea:	68f9      	ldr	r1, [r7, #12]
 800faec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800faee:	fb01 f303 	mul.w	r3, r1, r3
 800faf2:	441a      	add	r2, r3
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	22ff      	movs	r2, #255	@ 0xff
 800fafc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	22ff      	movs	r2, #255	@ 0xff
 800fb04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d10e      	bne.n	800fb2c <xQueueGenericReset+0x90>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d014      	beq.n	800fb40 <xQueueGenericReset+0xa4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3310      	adds	r3, #16
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f001 f814 	bl	8010b48 <xTaskRemoveFromEventList>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00c      	beq.n	800fb40 <xQueueGenericReset+0xa4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fb26:	f001 fdf1 	bl	801170c <vPortYield>
 800fb2a:	e009      	b.n	800fb40 <xQueueGenericReset+0xa4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	3310      	adds	r3, #16
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff feff 	bl	800f934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	3324      	adds	r3, #36	@ 0x24
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff fefa 	bl	800f934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fb40:	f001 fe08 	bl	8011754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fb44:	2301      	movs	r3, #1
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b088      	sub	sp, #32
 800fb52:	af02      	add	r7, sp, #8
 800fb54:	60f8      	str	r0, [r7, #12]
 800fb56:	60b9      	str	r1, [r7, #8]
 800fb58:	607a      	str	r2, [r7, #4]
 800fb5a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d103      	bne.n	800fb6a <xQueueGenericCreateStatic+0x1c>
 800fb62:	f001 ff21 	bl	80119a8 <ulSetInterruptMask>
 800fb66:	bf00      	nop
 800fb68:	e7fd      	b.n	800fb66 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d103      	bne.n	800fb78 <xQueueGenericCreateStatic+0x2a>
 800fb70:	f001 ff1a 	bl	80119a8 <ulSetInterruptMask>
 800fb74:	bf00      	nop
 800fb76:	e7fd      	b.n	800fb74 <xQueueGenericCreateStatic+0x26>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d002      	beq.n	800fb84 <xQueueGenericCreateStatic+0x36>
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <xQueueGenericCreateStatic+0x3a>
 800fb84:	2301      	movs	r3, #1
 800fb86:	e000      	b.n	800fb8a <xQueueGenericCreateStatic+0x3c>
 800fb88:	2300      	movs	r3, #0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d103      	bne.n	800fb96 <xQueueGenericCreateStatic+0x48>
 800fb8e:	f001 ff0b 	bl	80119a8 <ulSetInterruptMask>
 800fb92:	bf00      	nop
 800fb94:	e7fd      	b.n	800fb92 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d102      	bne.n	800fba2 <xQueueGenericCreateStatic+0x54>
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d101      	bne.n	800fba6 <xQueueGenericCreateStatic+0x58>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e000      	b.n	800fba8 <xQueueGenericCreateStatic+0x5a>
 800fba6:	2300      	movs	r3, #0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d103      	bne.n	800fbb4 <xQueueGenericCreateStatic+0x66>
 800fbac:	f001 fefc 	bl	80119a8 <ulSetInterruptMask>
 800fbb0:	bf00      	nop
 800fbb2:	e7fd      	b.n	800fbb0 <xQueueGenericCreateStatic+0x62>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fbb4:	2350      	movs	r3, #80	@ 0x50
 800fbb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	2b50      	cmp	r3, #80	@ 0x50
 800fbbc:	d003      	beq.n	800fbc6 <xQueueGenericCreateStatic+0x78>
 800fbbe:	f001 fef3 	bl	80119a8 <ulSetInterruptMask>
 800fbc2:	bf00      	nop
 800fbc4:	e7fd      	b.n	800fbc2 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fbc6:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00d      	beq.n	800fbee <xQueueGenericCreateStatic+0xa0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fbda:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	68b9      	ldr	r1, [r7, #8]
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f000 f805 	bl	800fbf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fbee:	697b      	ldr	r3, [r7, #20]
	}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
 800fc04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d103      	bne.n	800fc14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fc0c:	69bb      	ldr	r3, [r7, #24]
 800fc0e:	69ba      	ldr	r2, [r7, #24]
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	e002      	b.n	800fc1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fc26:	2101      	movs	r1, #1
 800fc28:	69b8      	ldr	r0, [r7, #24]
 800fc2a:	f7ff ff37 	bl	800fa9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	78fa      	ldrb	r2, [r7, #3]
 800fc32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fc36:	bf00      	nop
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b08a      	sub	sp, #40	@ 0x28
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	60f8      	str	r0, [r7, #12]
 800fc46:	60b9      	str	r1, [r7, #8]
 800fc48:	607a      	str	r2, [r7, #4]
 800fc4a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fc54:	6a3b      	ldr	r3, [r7, #32]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d103      	bne.n	800fc62 <xQueueGenericSend+0x24>
 800fc5a:	f001 fea5 	bl	80119a8 <ulSetInterruptMask>
 800fc5e:	bf00      	nop
 800fc60:	e7fd      	b.n	800fc5e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d103      	bne.n	800fc70 <xQueueGenericSend+0x32>
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <xQueueGenericSend+0x36>
 800fc70:	2301      	movs	r3, #1
 800fc72:	e000      	b.n	800fc76 <xQueueGenericSend+0x38>
 800fc74:	2300      	movs	r3, #0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d103      	bne.n	800fc82 <xQueueGenericSend+0x44>
 800fc7a:	f001 fe95 	bl	80119a8 <ulSetInterruptMask>
 800fc7e:	bf00      	nop
 800fc80:	e7fd      	b.n	800fc7e <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d103      	bne.n	800fc90 <xQueueGenericSend+0x52>
 800fc88:	6a3b      	ldr	r3, [r7, #32]
 800fc8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d101      	bne.n	800fc94 <xQueueGenericSend+0x56>
 800fc90:	2301      	movs	r3, #1
 800fc92:	e000      	b.n	800fc96 <xQueueGenericSend+0x58>
 800fc94:	2300      	movs	r3, #0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d103      	bne.n	800fca2 <xQueueGenericSend+0x64>
 800fc9a:	f001 fe85 	bl	80119a8 <ulSetInterruptMask>
 800fc9e:	bf00      	nop
 800fca0:	e7fd      	b.n	800fc9e <xQueueGenericSend+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fca2:	f001 f8ef 	bl	8010e84 <xTaskGetSchedulerState>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d102      	bne.n	800fcb2 <xQueueGenericSend+0x74>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <xQueueGenericSend+0x78>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e000      	b.n	800fcb8 <xQueueGenericSend+0x7a>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d103      	bne.n	800fcc4 <xQueueGenericSend+0x86>
 800fcbc:	f001 fe74 	bl	80119a8 <ulSetInterruptMask>
 800fcc0:	bf00      	nop
 800fcc2:	e7fd      	b.n	800fcc0 <xQueueGenericSend+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcc4:	f001 fd34 	bl	8011730 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d302      	bcc.n	800fcda <xQueueGenericSend+0x9c>
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	d11d      	bne.n	800fd16 <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	68b9      	ldr	r1, [r7, #8]
 800fcde:	6a38      	ldr	r0, [r7, #32]
 800fce0:	f000 f9aa 	bl	8010038 <prvCopyDataToQueue>
 800fce4:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00a      	beq.n	800fd04 <xQueueGenericSend+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcee:	6a3b      	ldr	r3, [r7, #32]
 800fcf0:	3324      	adds	r3, #36	@ 0x24
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f000 ff28 	bl	8010b48 <xTaskRemoveFromEventList>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d007      	beq.n	800fd0e <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fcfe:	f001 fd05 	bl	801170c <vPortYield>
 800fd02:	e004      	b.n	800fd0e <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fd0a:	f001 fcff 	bl	801170c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fd0e:	f001 fd21 	bl	8011754 <vPortExitCritical>
				return pdPASS;
 800fd12:	2301      	movs	r3, #1
 800fd14:	e05c      	b.n	800fdd0 <xQueueGenericSend+0x192>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d103      	bne.n	800fd24 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd1c:	f001 fd1a 	bl	8011754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fd20:	2300      	movs	r3, #0
 800fd22:	e055      	b.n	800fdd0 <xQueueGenericSend+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d106      	bne.n	800fd38 <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd2a:	f107 0314 	add.w	r3, r7, #20
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 ff66 	bl	8010c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd34:	2301      	movs	r3, #1
 800fd36:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd38:	f001 fd0c 	bl	8011754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd3c:	f000 fd08 	bl	8010750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd40:	f001 fcf6 	bl	8011730 <vPortEnterCritical>
 800fd44:	6a3b      	ldr	r3, [r7, #32]
 800fd46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd4a:	b25b      	sxtb	r3, r3
 800fd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd50:	d103      	bne.n	800fd5a <xQueueGenericSend+0x11c>
 800fd52:	6a3b      	ldr	r3, [r7, #32]
 800fd54:	2200      	movs	r2, #0
 800fd56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd5a:	6a3b      	ldr	r3, [r7, #32]
 800fd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd60:	b25b      	sxtb	r3, r3
 800fd62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd66:	d103      	bne.n	800fd70 <xQueueGenericSend+0x132>
 800fd68:	6a3b      	ldr	r3, [r7, #32]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd70:	f001 fcf0 	bl	8011754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd74:	1d3a      	adds	r2, r7, #4
 800fd76:	f107 0314 	add.w	r3, r7, #20
 800fd7a:	4611      	mov	r1, r2
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f000 ff55 	bl	8010c2c <xTaskCheckForTimeOut>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11d      	bne.n	800fdc4 <xQueueGenericSend+0x186>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fd88:	6a38      	ldr	r0, [r7, #32]
 800fd8a:	f000 fa4d 	bl	8010228 <prvIsQueueFull>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d011      	beq.n	800fdb8 <xQueueGenericSend+0x17a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	3310      	adds	r3, #16
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f000 fe91 	bl	8010ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fda2:	6a38      	ldr	r0, [r7, #32]
 800fda4:	f000 f9d8 	bl	8010158 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fda8:	f000 fce0 	bl	801076c <xTaskResumeAll>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d188      	bne.n	800fcc4 <xQueueGenericSend+0x86>
				{
					portYIELD_WITHIN_API();
 800fdb2:	f001 fcab 	bl	801170c <vPortYield>
 800fdb6:	e785      	b.n	800fcc4 <xQueueGenericSend+0x86>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fdb8:	6a38      	ldr	r0, [r7, #32]
 800fdba:	f000 f9cd 	bl	8010158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdbe:	f000 fcd5 	bl	801076c <xTaskResumeAll>
 800fdc2:	e77f      	b.n	800fcc4 <xQueueGenericSend+0x86>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fdc4:	6a38      	ldr	r0, [r7, #32]
 800fdc6:	f000 f9c7 	bl	8010158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdca:	f000 fccf 	bl	801076c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fdce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3728      	adds	r7, #40	@ 0x28
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	@ 0x28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fdea:	6a3b      	ldr	r3, [r7, #32]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d103      	bne.n	800fdf8 <xQueueGenericSendFromISR+0x20>
 800fdf0:	f001 fdda 	bl	80119a8 <ulSetInterruptMask>
 800fdf4:	bf00      	nop
 800fdf6:	e7fd      	b.n	800fdf4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d103      	bne.n	800fe06 <xQueueGenericSendFromISR+0x2e>
 800fdfe:	6a3b      	ldr	r3, [r7, #32]
 800fe00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d101      	bne.n	800fe0a <xQueueGenericSendFromISR+0x32>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e000      	b.n	800fe0c <xQueueGenericSendFromISR+0x34>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <xQueueGenericSendFromISR+0x40>
 800fe10:	f001 fdca 	bl	80119a8 <ulSetInterruptMask>
 800fe14:	bf00      	nop
 800fe16:	e7fd      	b.n	800fe14 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	2b02      	cmp	r3, #2
 800fe1c:	d103      	bne.n	800fe26 <xQueueGenericSendFromISR+0x4e>
 800fe1e:	6a3b      	ldr	r3, [r7, #32]
 800fe20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d101      	bne.n	800fe2a <xQueueGenericSendFromISR+0x52>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e000      	b.n	800fe2c <xQueueGenericSendFromISR+0x54>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d103      	bne.n	800fe38 <xQueueGenericSendFromISR+0x60>
 800fe30:	f001 fdba 	bl	80119a8 <ulSetInterruptMask>
 800fe34:	bf00      	nop
 800fe36:	e7fd      	b.n	800fe34 <xQueueGenericSendFromISR+0x5c>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe38:	f001 fdb6 	bl	80119a8 <ulSetInterruptMask>
 800fe3c:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe3e:	6a3b      	ldr	r3, [r7, #32]
 800fe40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d302      	bcc.n	800fe50 <xQueueGenericSendFromISR+0x78>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d12d      	bne.n	800feac <xQueueGenericSendFromISR+0xd4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe50:	6a3b      	ldr	r3, [r7, #32]
 800fe52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fe56:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe58:	6a3b      	ldr	r3, [r7, #32]
 800fe5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe5c:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe5e:	683a      	ldr	r2, [r7, #0]
 800fe60:	68b9      	ldr	r1, [r7, #8]
 800fe62:	6a38      	ldr	r0, [r7, #32]
 800fe64:	f000 f8e8 	bl	8010038 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe68:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe70:	d112      	bne.n	800fe98 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe72:	6a3b      	ldr	r3, [r7, #32]
 800fe74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d015      	beq.n	800fea6 <xQueueGenericSendFromISR+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe7a:	6a3b      	ldr	r3, [r7, #32]
 800fe7c:	3324      	adds	r3, #36	@ 0x24
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f000 fe62 	bl	8010b48 <xTaskRemoveFromEventList>
 800fe84:	4603      	mov	r3, r0
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00d      	beq.n	800fea6 <xQueueGenericSendFromISR+0xce>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00a      	beq.n	800fea6 <xQueueGenericSendFromISR+0xce>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2201      	movs	r2, #1
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	e006      	b.n	800fea6 <xQueueGenericSendFromISR+0xce>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe98:	7efb      	ldrb	r3, [r7, #27]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	b25a      	sxtb	r2, r3
 800fea0:	6a3b      	ldr	r3, [r7, #32]
 800fea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fea6:	2301      	movs	r3, #1
 800fea8:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800feaa:	e001      	b.n	800feb0 <xQueueGenericSendFromISR+0xd8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800feac:	2300      	movs	r3, #0
 800feae:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800feb0:	69f8      	ldr	r0, [r7, #28]
 800feb2:	f001 fd86 	bl	80119c2 <vClearInterruptMask>

	return xReturn;
 800feb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3728      	adds	r7, #40	@ 0x28
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b08a      	sub	sp, #40	@ 0x28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fecc:	2300      	movs	r3, #0
 800fece:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fed4:	6a3b      	ldr	r3, [r7, #32]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d103      	bne.n	800fee2 <xQueueReceive+0x22>
 800feda:	f001 fd65 	bl	80119a8 <ulSetInterruptMask>
 800fede:	bf00      	nop
 800fee0:	e7fd      	b.n	800fede <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d103      	bne.n	800fef0 <xQueueReceive+0x30>
 800fee8:	6a3b      	ldr	r3, [r7, #32]
 800feea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feec:	2b00      	cmp	r3, #0
 800feee:	d101      	bne.n	800fef4 <xQueueReceive+0x34>
 800fef0:	2301      	movs	r3, #1
 800fef2:	e000      	b.n	800fef6 <xQueueReceive+0x36>
 800fef4:	2300      	movs	r3, #0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d103      	bne.n	800ff02 <xQueueReceive+0x42>
 800fefa:	f001 fd55 	bl	80119a8 <ulSetInterruptMask>
 800fefe:	bf00      	nop
 800ff00:	e7fd      	b.n	800fefe <xQueueReceive+0x3e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff02:	f000 ffbf 	bl	8010e84 <xTaskGetSchedulerState>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d102      	bne.n	800ff12 <xQueueReceive+0x52>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <xQueueReceive+0x56>
 800ff12:	2301      	movs	r3, #1
 800ff14:	e000      	b.n	800ff18 <xQueueReceive+0x58>
 800ff16:	2300      	movs	r3, #0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d103      	bne.n	800ff24 <xQueueReceive+0x64>
 800ff1c:	f001 fd44 	bl	80119a8 <ulSetInterruptMask>
 800ff20:	bf00      	nop
 800ff22:	e7fd      	b.n	800ff20 <xQueueReceive+0x60>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff24:	f001 fc04 	bl	8011730 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff28:	6a3b      	ldr	r3, [r7, #32]
 800ff2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff2c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d019      	beq.n	800ff68 <xQueueReceive+0xa8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff34:	68b9      	ldr	r1, [r7, #8]
 800ff36:	6a38      	ldr	r0, [r7, #32]
 800ff38:	f000 f8e8 	bl	801010c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	1e5a      	subs	r2, r3, #1
 800ff40:	6a3b      	ldr	r3, [r7, #32]
 800ff42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff44:	6a3b      	ldr	r3, [r7, #32]
 800ff46:	691b      	ldr	r3, [r3, #16]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d009      	beq.n	800ff60 <xQueueReceive+0xa0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	3310      	adds	r3, #16
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 fdf9 	bl	8010b48 <xTaskRemoveFromEventList>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <xQueueReceive+0xa0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff5c:	f001 fbd6 	bl	801170c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff60:	f001 fbf8 	bl	8011754 <vPortExitCritical>
				return pdPASS;
 800ff64:	2301      	movs	r3, #1
 800ff66:	e063      	b.n	8010030 <xQueueReceive+0x170>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d103      	bne.n	800ff76 <xQueueReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff6e:	f001 fbf1 	bl	8011754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff72:	2300      	movs	r3, #0
 800ff74:	e05c      	b.n	8010030 <xQueueReceive+0x170>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d106      	bne.n	800ff8a <xQueueReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff7c:	f107 0314 	add.w	r3, r7, #20
 800ff80:	4618      	mov	r0, r3
 800ff82:	f000 fe3d 	bl	8010c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff86:	2301      	movs	r3, #1
 800ff88:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff8a:	f001 fbe3 	bl	8011754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff8e:	f000 fbdf 	bl	8010750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff92:	f001 fbcd 	bl	8011730 <vPortEnterCritical>
 800ff96:	6a3b      	ldr	r3, [r7, #32]
 800ff98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff9c:	b25b      	sxtb	r3, r3
 800ff9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffa2:	d103      	bne.n	800ffac <xQueueReceive+0xec>
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffac:	6a3b      	ldr	r3, [r7, #32]
 800ffae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffb8:	d103      	bne.n	800ffc2 <xQueueReceive+0x102>
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ffc2:	f001 fbc7 	bl	8011754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffc6:	1d3a      	adds	r2, r7, #4
 800ffc8:	f107 0314 	add.w	r3, r7, #20
 800ffcc:	4611      	mov	r1, r2
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 fe2c 	bl	8010c2c <xTaskCheckForTimeOut>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d11d      	bne.n	8010016 <xQueueReceive+0x156>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffda:	6a38      	ldr	r0, [r7, #32]
 800ffdc:	f000 f90e 	bl	80101fc <prvIsQueueEmpty>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d011      	beq.n	801000a <xQueueReceive+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffe6:	6a3b      	ldr	r3, [r7, #32]
 800ffe8:	3324      	adds	r3, #36	@ 0x24
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	4611      	mov	r1, r2
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 fd68 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fff4:	6a38      	ldr	r0, [r7, #32]
 800fff6:	f000 f8af 	bl	8010158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fffa:	f000 fbb7 	bl	801076c <xTaskResumeAll>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d18f      	bne.n	800ff24 <xQueueReceive+0x64>
				{
					portYIELD_WITHIN_API();
 8010004:	f001 fb82 	bl	801170c <vPortYield>
 8010008:	e78c      	b.n	800ff24 <xQueueReceive+0x64>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801000a:	6a38      	ldr	r0, [r7, #32]
 801000c:	f000 f8a4 	bl	8010158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010010:	f000 fbac 	bl	801076c <xTaskResumeAll>
 8010014:	e786      	b.n	800ff24 <xQueueReceive+0x64>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010016:	6a38      	ldr	r0, [r7, #32]
 8010018:	f000 f89e 	bl	8010158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801001c:	f000 fba6 	bl	801076c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010020:	6a38      	ldr	r0, [r7, #32]
 8010022:	f000 f8eb 	bl	80101fc <prvIsQueueEmpty>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	f43f af7b 	beq.w	800ff24 <xQueueReceive+0x64>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801002e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010030:	4618      	mov	r0, r3
 8010032:	3728      	adds	r7, #40	@ 0x28
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010044:	2300      	movs	r3, #0
 8010046:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801004c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010052:	2b00      	cmp	r3, #0
 8010054:	d10d      	bne.n	8010072 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d14d      	bne.n	80100fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	4618      	mov	r0, r3
 8010064:	f000 ff2c 	bl	8010ec0 <xTaskPriorityDisinherit>
 8010068:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	609a      	str	r2, [r3, #8]
 8010070:	e043      	b.n	80100fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d119      	bne.n	80100ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6858      	ldr	r0, [r3, #4]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010080:	461a      	mov	r2, r3
 8010082:	68b9      	ldr	r1, [r7, #8]
 8010084:	f002 fd14 	bl	8012ab0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	685a      	ldr	r2, [r3, #4]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010090:	441a      	add	r2, r3
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	685a      	ldr	r2, [r3, #4]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	689b      	ldr	r3, [r3, #8]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d32b      	bcc.n	80100fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	605a      	str	r2, [r3, #4]
 80100aa:	e026      	b.n	80100fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	68d8      	ldr	r0, [r3, #12]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100b4:	461a      	mov	r2, r3
 80100b6:	68b9      	ldr	r1, [r7, #8]
 80100b8:	f002 fcfa 	bl	8012ab0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	68da      	ldr	r2, [r3, #12]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100c4:	425b      	negs	r3, r3
 80100c6:	441a      	add	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	68da      	ldr	r2, [r3, #12]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d207      	bcs.n	80100e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	689a      	ldr	r2, [r3, #8]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100e0:	425b      	negs	r3, r3
 80100e2:	441a      	add	r2, r3
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b02      	cmp	r3, #2
 80100ec:	d105      	bne.n	80100fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d002      	beq.n	80100fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	3b01      	subs	r3, #1
 80100f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010102:	697b      	ldr	r3, [r7, #20]
}
 8010104:	4618      	mov	r0, r3
 8010106:	3718      	adds	r7, #24
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801011a:	2b00      	cmp	r3, #0
 801011c:	d018      	beq.n	8010150 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	68da      	ldr	r2, [r3, #12]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010126:	441a      	add	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	68da      	ldr	r2, [r3, #12]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	429a      	cmp	r2, r3
 8010136:	d303      	bcc.n	8010140 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	68d9      	ldr	r1, [r3, #12]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010148:	461a      	mov	r2, r3
 801014a:	6838      	ldr	r0, [r7, #0]
 801014c:	f002 fcb0 	bl	8012ab0 <memcpy>
	}
}
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010160:	f001 fae6 	bl	8011730 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801016a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801016c:	e011      	b.n	8010192 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010172:	2b00      	cmp	r3, #0
 8010174:	d012      	beq.n	801019c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3324      	adds	r3, #36	@ 0x24
 801017a:	4618      	mov	r0, r3
 801017c:	f000 fce4 	bl	8010b48 <xTaskRemoveFromEventList>
 8010180:	4603      	mov	r3, r0
 8010182:	2b00      	cmp	r3, #0
 8010184:	d001      	beq.n	801018a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010186:	f000 fda5 	bl	8010cd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801018a:	7bfb      	ldrb	r3, [r7, #15]
 801018c:	3b01      	subs	r3, #1
 801018e:	b2db      	uxtb	r3, r3
 8010190:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010196:	2b00      	cmp	r3, #0
 8010198:	dce9      	bgt.n	801016e <prvUnlockQueue+0x16>
 801019a:	e000      	b.n	801019e <prvUnlockQueue+0x46>
					break;
 801019c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	22ff      	movs	r2, #255	@ 0xff
 80101a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80101a6:	f001 fad5 	bl	8011754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80101aa:	f001 fac1 	bl	8011730 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80101b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80101b6:	e011      	b.n	80101dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d012      	beq.n	80101e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3310      	adds	r3, #16
 80101c4:	4618      	mov	r0, r3
 80101c6:	f000 fcbf 	bl	8010b48 <xTaskRemoveFromEventList>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d001      	beq.n	80101d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80101d0:	f000 fd80 	bl	8010cd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80101d4:	7bbb      	ldrb	r3, [r7, #14]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80101dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	dce9      	bgt.n	80101b8 <prvUnlockQueue+0x60>
 80101e4:	e000      	b.n	80101e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80101e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	22ff      	movs	r2, #255	@ 0xff
 80101ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80101f0:	f001 fab0 	bl	8011754 <vPortExitCritical>
}
 80101f4:	bf00      	nop
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010204:	f001 fa94 	bl	8011730 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801020c:	2b00      	cmp	r3, #0
 801020e:	d102      	bne.n	8010216 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010210:	2301      	movs	r3, #1
 8010212:	60fb      	str	r3, [r7, #12]
 8010214:	e001      	b.n	801021a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010216:	2300      	movs	r3, #0
 8010218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801021a:	f001 fa9b 	bl	8011754 <vPortExitCritical>

	return xReturn;
 801021e:	68fb      	ldr	r3, [r7, #12]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010230:	f001 fa7e 	bl	8011730 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801023c:	429a      	cmp	r2, r3
 801023e:	d102      	bne.n	8010246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010240:	2301      	movs	r3, #1
 8010242:	60fb      	str	r3, [r7, #12]
 8010244:	e001      	b.n	801024a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010246:	2300      	movs	r3, #0
 8010248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801024a:	f001 fa83 	bl	8011754 <vPortExitCritical>

	return xReturn;
 801024e:	68fb      	ldr	r3, [r7, #12]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010258:	b480      	push	{r7}
 801025a:	b085      	sub	sp, #20
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010262:	2300      	movs	r3, #0
 8010264:	60fb      	str	r3, [r7, #12]
 8010266:	e014      	b.n	8010292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010268:	4a0f      	ldr	r2, [pc, #60]	@ (80102a8 <vQueueAddToRegistry+0x50>)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d10b      	bne.n	801028c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010274:	490c      	ldr	r1, [pc, #48]	@ (80102a8 <vQueueAddToRegistry+0x50>)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	683a      	ldr	r2, [r7, #0]
 801027a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801027e:	4a0a      	ldr	r2, [pc, #40]	@ (80102a8 <vQueueAddToRegistry+0x50>)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	00db      	lsls	r3, r3, #3
 8010284:	4413      	add	r3, r2
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801028a:	e006      	b.n	801029a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	3301      	adds	r3, #1
 8010290:	60fb      	str	r3, [r7, #12]
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2b07      	cmp	r3, #7
 8010296:	d9e7      	bls.n	8010268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010298:	bf00      	nop
 801029a:	bf00      	nop
 801029c:	3714      	adds	r7, #20
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
 80102a6:	bf00      	nop
 80102a8:	20000e60 	.word	0x20000e60

080102ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b086      	sub	sp, #24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80102bc:	f001 fa38 	bl	8011730 <vPortEnterCritical>
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80102c6:	b25b      	sxtb	r3, r3
 80102c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102cc:	d103      	bne.n	80102d6 <vQueueWaitForMessageRestricted+0x2a>
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2200      	movs	r2, #0
 80102d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80102dc:	b25b      	sxtb	r3, r3
 80102de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102e2:	d103      	bne.n	80102ec <vQueueWaitForMessageRestricted+0x40>
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80102ec:	f001 fa32 	bl	8011754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d106      	bne.n	8010306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	3324      	adds	r3, #36	@ 0x24
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	4618      	mov	r0, r3
 8010302:	f000 fbfd 	bl	8010b00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010306:	6978      	ldr	r0, [r7, #20]
 8010308:	f7ff ff26 	bl	8010158 <prvUnlockQueue>
	}
 801030c:	bf00      	nop
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010314:	b580      	push	{r7, lr}
 8010316:	b08c      	sub	sp, #48	@ 0x30
 8010318:	af04      	add	r7, sp, #16
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010324:	2b00      	cmp	r3, #0
 8010326:	d103      	bne.n	8010330 <xTaskCreateStatic+0x1c>
 8010328:	f001 fb3e 	bl	80119a8 <ulSetInterruptMask>
 801032c:	bf00      	nop
 801032e:	e7fd      	b.n	801032c <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8010330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010332:	2b00      	cmp	r3, #0
 8010334:	d103      	bne.n	801033e <xTaskCreateStatic+0x2a>
 8010336:	f001 fb37 	bl	80119a8 <ulSetInterruptMask>
 801033a:	bf00      	nop
 801033c:	e7fd      	b.n	801033a <xTaskCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801033e:	23a8      	movs	r3, #168	@ 0xa8
 8010340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2ba8      	cmp	r3, #168	@ 0xa8
 8010346:	d003      	beq.n	8010350 <xTaskCreateStatic+0x3c>
 8010348:	f001 fb2e 	bl	80119a8 <ulSetInterruptMask>
 801034c:	bf00      	nop
 801034e:	e7fd      	b.n	801034c <xTaskCreateStatic+0x38>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010350:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010354:	2b00      	cmp	r3, #0
 8010356:	d01e      	beq.n	8010396 <xTaskCreateStatic+0x82>
 8010358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035a:	2b00      	cmp	r3, #0
 801035c:	d01b      	beq.n	8010396 <xTaskCreateStatic+0x82>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801035e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010360:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010366:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	2202      	movs	r2, #2
 801036c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010370:	2300      	movs	r3, #0
 8010372:	9303      	str	r3, [sp, #12]
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	9302      	str	r3, [sp, #8]
 8010378:	f107 0318 	add.w	r3, r7, #24
 801037c:	9301      	str	r3, [sp, #4]
 801037e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	68b9      	ldr	r1, [r7, #8]
 8010388:	68f8      	ldr	r0, [r7, #12]
 801038a:	f000 f851 	bl	8010430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801038e:	69f8      	ldr	r0, [r7, #28]
 8010390:	f000 f8f0 	bl	8010574 <prvAddNewTaskToReadyList>
 8010394:	e001      	b.n	801039a <xTaskCreateStatic+0x86>
		}
		else
		{
			xReturn = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801039a:	69bb      	ldr	r3, [r7, #24]
	}
 801039c:	4618      	mov	r0, r3
 801039e:	3720      	adds	r7, #32
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b08c      	sub	sp, #48	@ 0x30
 80103a8:	af04      	add	r7, sp, #16
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	603b      	str	r3, [r7, #0]
 80103b0:	4613      	mov	r3, r2
 80103b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80103b4:	88fb      	ldrh	r3, [r7, #6]
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4618      	mov	r0, r3
 80103ba:	f001 fb5d 	bl	8011a78 <pvPortMalloc>
 80103be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00e      	beq.n	80103e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80103c6:	20a8      	movs	r0, #168	@ 0xa8
 80103c8:	f001 fb56 	bl	8011a78 <pvPortMalloc>
 80103cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d003      	beq.n	80103dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80103da:	e005      	b.n	80103e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80103dc:	6978      	ldr	r0, [r7, #20]
 80103de:	f001 fc01 	bl	8011be4 <vPortFree>
 80103e2:	e001      	b.n	80103e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d017      	beq.n	801041e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103f6:	88fa      	ldrh	r2, [r7, #6]
 80103f8:	2300      	movs	r3, #0
 80103fa:	9303      	str	r3, [sp, #12]
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	9302      	str	r3, [sp, #8]
 8010400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010402:	9301      	str	r3, [sp, #4]
 8010404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	68b9      	ldr	r1, [r7, #8]
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f000 f80f 	bl	8010430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010412:	69f8      	ldr	r0, [r7, #28]
 8010414:	f000 f8ae 	bl	8010574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010418:	2301      	movs	r3, #1
 801041a:	61bb      	str	r3, [r7, #24]
 801041c:	e002      	b.n	8010424 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801041e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010422:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010424:	69bb      	ldr	r3, [r7, #24]
	}
 8010426:	4618      	mov	r0, r3
 8010428:	3720      	adds	r7, #32
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
	...

08010430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
 801043c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801043e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010440:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	461a      	mov	r2, r3
 8010448:	21a5      	movs	r1, #165	@ 0xa5
 801044a:	f002 fa8f 	bl	801296c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801044e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010458:	3b01      	subs	r3, #1
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4413      	add	r3, r2
 801045e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	f023 0307 	bic.w	r3, r3, #7
 8010466:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	f003 0307 	and.w	r3, r3, #7
 801046e:	2b00      	cmp	r3, #0
 8010470:	d003      	beq.n	801047a <prvInitialiseNewTask+0x4a>
 8010472:	f001 fa99 	bl	80119a8 <ulSetInterruptMask>
 8010476:	bf00      	nop
 8010478:	e7fd      	b.n	8010476 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d01f      	beq.n	80104c0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010480:	2300      	movs	r3, #0
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	e012      	b.n	80104ac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010486:	68ba      	ldr	r2, [r7, #8]
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	4413      	add	r3, r2
 801048c:	7819      	ldrb	r1, [r3, #0]
 801048e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	4413      	add	r3, r2
 8010494:	3334      	adds	r3, #52	@ 0x34
 8010496:	460a      	mov	r2, r1
 8010498:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	4413      	add	r3, r2
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	3301      	adds	r3, #1
 80104aa:	617b      	str	r3, [r7, #20]
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	2b0f      	cmp	r3, #15
 80104b0:	d9e9      	bls.n	8010486 <prvInitialiseNewTask+0x56>
 80104b2:	e000      	b.n	80104b6 <prvInitialiseNewTask+0x86>
			{
				break;
 80104b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80104b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104b8:	2200      	movs	r2, #0
 80104ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80104be:	e003      	b.n	80104c8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80104c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	2b37      	cmp	r3, #55	@ 0x37
 80104cc:	d901      	bls.n	80104d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80104ce:	2337      	movs	r3, #55	@ 0x37
 80104d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80104d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d4:	6a3a      	ldr	r2, [r7, #32]
 80104d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80104d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104da:	6a3a      	ldr	r2, [r7, #32]
 80104dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80104de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e0:	2200      	movs	r2, #0
 80104e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80104e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e6:	3304      	adds	r3, #4
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff fa43 	bl	800f974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80104ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f0:	3318      	adds	r3, #24
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7ff fa3e 	bl	800f974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80104f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010506:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801050a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801050c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801050e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010510:	2200      	movs	r2, #0
 8010512:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010518:	2200      	movs	r2, #0
 801051a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801051e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010520:	3354      	adds	r3, #84	@ 0x54
 8010522:	224c      	movs	r2, #76	@ 0x4c
 8010524:	2100      	movs	r1, #0
 8010526:	4618      	mov	r0, r3
 8010528:	f002 fa20 	bl	801296c <memset>
 801052c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801052e:	4a0e      	ldr	r2, [pc, #56]	@ (8010568 <prvInitialiseNewTask+0x138>)
 8010530:	659a      	str	r2, [r3, #88]	@ 0x58
 8010532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010534:	4a0d      	ldr	r2, [pc, #52]	@ (801056c <prvInitialiseNewTask+0x13c>)
 8010536:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801053a:	4a0d      	ldr	r2, [pc, #52]	@ (8010570 <prvInitialiseNewTask+0x140>)
 801053c:	661a      	str	r2, [r3, #96]	@ 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801053e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010540:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	6938      	ldr	r0, [r7, #16]
 8010548:	f001 f952 	bl	80117f0 <pxPortInitialiseStack>
 801054c:	4602      	mov	r2, r0
 801054e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801055c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801055e:	bf00      	nop
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	20004ecc 	.word	0x20004ecc
 801056c:	20004f34 	.word	0x20004f34
 8010570:	20004f9c 	.word	0x20004f9c

08010574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801057c:	f001 f8d8 	bl	8011730 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010580:	4b2a      	ldr	r3, [pc, #168]	@ (801062c <prvAddNewTaskToReadyList+0xb8>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	4a29      	ldr	r2, [pc, #164]	@ (801062c <prvAddNewTaskToReadyList+0xb8>)
 8010588:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801058a:	4b29      	ldr	r3, [pc, #164]	@ (8010630 <prvAddNewTaskToReadyList+0xbc>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d109      	bne.n	80105a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010592:	4a27      	ldr	r2, [pc, #156]	@ (8010630 <prvAddNewTaskToReadyList+0xbc>)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010598:	4b24      	ldr	r3, [pc, #144]	@ (801062c <prvAddNewTaskToReadyList+0xb8>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b01      	cmp	r3, #1
 801059e:	d110      	bne.n	80105c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80105a0:	f000 fbb4 	bl	8010d0c <prvInitialiseTaskLists>
 80105a4:	e00d      	b.n	80105c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80105a6:	4b23      	ldr	r3, [pc, #140]	@ (8010634 <prvAddNewTaskToReadyList+0xc0>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d109      	bne.n	80105c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80105ae:	4b20      	ldr	r3, [pc, #128]	@ (8010630 <prvAddNewTaskToReadyList+0xbc>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d802      	bhi.n	80105c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80105bc:	4a1c      	ldr	r2, [pc, #112]	@ (8010630 <prvAddNewTaskToReadyList+0xbc>)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80105c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010638 <prvAddNewTaskToReadyList+0xc4>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	3301      	adds	r3, #1
 80105c8:	4a1b      	ldr	r2, [pc, #108]	@ (8010638 <prvAddNewTaskToReadyList+0xc4>)
 80105ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80105cc:	4b1a      	ldr	r3, [pc, #104]	@ (8010638 <prvAddNewTaskToReadyList+0xc4>)
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105d8:	4b18      	ldr	r3, [pc, #96]	@ (801063c <prvAddNewTaskToReadyList+0xc8>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d903      	bls.n	80105e8 <prvAddNewTaskToReadyList+0x74>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105e4:	4a15      	ldr	r2, [pc, #84]	@ (801063c <prvAddNewTaskToReadyList+0xc8>)
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ec:	4613      	mov	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	4413      	add	r3, r2
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	4a12      	ldr	r2, [pc, #72]	@ (8010640 <prvAddNewTaskToReadyList+0xcc>)
 80105f6:	441a      	add	r2, r3
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	3304      	adds	r3, #4
 80105fc:	4619      	mov	r1, r3
 80105fe:	4610      	mov	r0, r2
 8010600:	f7ff f9c5 	bl	800f98e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010604:	f001 f8a6 	bl	8011754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010608:	4b0a      	ldr	r3, [pc, #40]	@ (8010634 <prvAddNewTaskToReadyList+0xc0>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d008      	beq.n	8010622 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010610:	4b07      	ldr	r3, [pc, #28]	@ (8010630 <prvAddNewTaskToReadyList+0xbc>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801061a:	429a      	cmp	r2, r3
 801061c:	d201      	bcs.n	8010622 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801061e:	f001 f875 	bl	801170c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010622:	bf00      	nop
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	20001374 	.word	0x20001374
 8010630:	20000ea0 	.word	0x20000ea0
 8010634:	20001380 	.word	0x20001380
 8010638:	20001390 	.word	0x20001390
 801063c:	2000137c 	.word	0x2000137c
 8010640:	20000ea4 	.word	0x20000ea4

08010644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801064c:	2300      	movs	r3, #0
 801064e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d010      	beq.n	8010678 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010656:	4b0d      	ldr	r3, [pc, #52]	@ (801068c <vTaskDelay+0x48>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d003      	beq.n	8010666 <vTaskDelay+0x22>
 801065e:	f001 f9a3 	bl	80119a8 <ulSetInterruptMask>
 8010662:	bf00      	nop
 8010664:	e7fd      	b.n	8010662 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8010666:	f000 f873 	bl	8010750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801066a:	2100      	movs	r1, #0
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fc87 	bl	8010f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010672:	f000 f87b 	bl	801076c <xTaskResumeAll>
 8010676:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 801067e:	f001 f845 	bl	801170c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010682:	bf00      	nop
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	2000139c 	.word	0x2000139c

08010690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b088      	sub	sp, #32
 8010694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010696:	2300      	movs	r3, #0
 8010698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801069a:	2300      	movs	r3, #0
 801069c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801069e:	463a      	mov	r2, r7
 80106a0:	1d39      	adds	r1, r7, #4
 80106a2:	f107 0308 	add.w	r3, r7, #8
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff f910 	bl	800f8cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	9202      	str	r2, [sp, #8]
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	2300      	movs	r3, #0
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	2300      	movs	r3, #0
 80106bc:	460a      	mov	r2, r1
 80106be:	491c      	ldr	r1, [pc, #112]	@ (8010730 <vTaskStartScheduler+0xa0>)
 80106c0:	481c      	ldr	r0, [pc, #112]	@ (8010734 <vTaskStartScheduler+0xa4>)
 80106c2:	f7ff fe27 	bl	8010314 <xTaskCreateStatic>
 80106c6:	4603      	mov	r3, r0
 80106c8:	4a1b      	ldr	r2, [pc, #108]	@ (8010738 <vTaskStartScheduler+0xa8>)
 80106ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80106cc:	4b1a      	ldr	r3, [pc, #104]	@ (8010738 <vTaskStartScheduler+0xa8>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d002      	beq.n	80106da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80106d4:	2301      	movs	r3, #1
 80106d6:	60fb      	str	r3, [r7, #12]
 80106d8:	e001      	b.n	80106de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80106da:	2300      	movs	r3, #0
 80106dc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d102      	bne.n	80106ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80106e4:	f000 fca0 	bl	8011028 <xTimerCreateTimerTask>
 80106e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d113      	bne.n	8010718 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80106f0:	f001 f95a 	bl	80119a8 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80106f4:	4b11      	ldr	r3, [pc, #68]	@ (801073c <vTaskStartScheduler+0xac>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	3354      	adds	r3, #84	@ 0x54
 80106fa:	4a11      	ldr	r2, [pc, #68]	@ (8010740 <vTaskStartScheduler+0xb0>)
 80106fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80106fe:	4b11      	ldr	r3, [pc, #68]	@ (8010744 <vTaskStartScheduler+0xb4>)
 8010700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010704:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010706:	4b10      	ldr	r3, [pc, #64]	@ (8010748 <vTaskStartScheduler+0xb8>)
 8010708:	2201      	movs	r2, #1
 801070a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801070c:	4b0f      	ldr	r3, [pc, #60]	@ (801074c <vTaskStartScheduler+0xbc>)
 801070e:	2200      	movs	r2, #0
 8010710:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010712:	f001 f8f7 	bl	8011904 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010716:	e007      	b.n	8010728 <vTaskStartScheduler+0x98>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801071e:	d103      	bne.n	8010728 <vTaskStartScheduler+0x98>
 8010720:	f001 f942 	bl	80119a8 <ulSetInterruptMask>
 8010724:	bf00      	nop
 8010726:	e7fd      	b.n	8010724 <vTaskStartScheduler+0x94>
}
 8010728:	bf00      	nop
 801072a:	3710      	adds	r7, #16
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	08012b84 	.word	0x08012b84
 8010734:	08010ced 	.word	0x08010ced
 8010738:	20001398 	.word	0x20001398
 801073c:	20000ea0 	.word	0x20000ea0
 8010740:	2000010c 	.word	0x2000010c
 8010744:	20001394 	.word	0x20001394
 8010748:	20001380 	.word	0x20001380
 801074c:	20001378 	.word	0x20001378

08010750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010754:	4b04      	ldr	r3, [pc, #16]	@ (8010768 <vTaskSuspendAll+0x18>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	3301      	adds	r3, #1
 801075a:	4a03      	ldr	r2, [pc, #12]	@ (8010768 <vTaskSuspendAll+0x18>)
 801075c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801075e:	bf00      	nop
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr
 8010768:	2000139c 	.word	0x2000139c

0801076c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010772:	2300      	movs	r3, #0
 8010774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010776:	2300      	movs	r3, #0
 8010778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801077a:	4b3b      	ldr	r3, [pc, #236]	@ (8010868 <xTaskResumeAll+0xfc>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d103      	bne.n	801078a <xTaskResumeAll+0x1e>
 8010782:	f001 f911 	bl	80119a8 <ulSetInterruptMask>
 8010786:	bf00      	nop
 8010788:	e7fd      	b.n	8010786 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801078a:	f000 ffd1 	bl	8011730 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801078e:	4b36      	ldr	r3, [pc, #216]	@ (8010868 <xTaskResumeAll+0xfc>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	3b01      	subs	r3, #1
 8010794:	4a34      	ldr	r2, [pc, #208]	@ (8010868 <xTaskResumeAll+0xfc>)
 8010796:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010798:	4b33      	ldr	r3, [pc, #204]	@ (8010868 <xTaskResumeAll+0xfc>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d15c      	bne.n	801085a <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80107a0:	4b32      	ldr	r3, [pc, #200]	@ (801086c <xTaskResumeAll+0x100>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d058      	beq.n	801085a <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107a8:	e02f      	b.n	801080a <xTaskResumeAll+0x9e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107aa:	4b31      	ldr	r3, [pc, #196]	@ (8010870 <xTaskResumeAll+0x104>)
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	3318      	adds	r3, #24
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7ff f946 	bl	800fa48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	3304      	adds	r3, #4
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff f941 	bl	800fa48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ca:	4b2a      	ldr	r3, [pc, #168]	@ (8010874 <xTaskResumeAll+0x108>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d903      	bls.n	80107da <xTaskResumeAll+0x6e>
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107d6:	4a27      	ldr	r2, [pc, #156]	@ (8010874 <xTaskResumeAll+0x108>)
 80107d8:	6013      	str	r3, [r2, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107de:	4613      	mov	r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	4413      	add	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4a24      	ldr	r2, [pc, #144]	@ (8010878 <xTaskResumeAll+0x10c>)
 80107e8:	441a      	add	r2, r3
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4619      	mov	r1, r3
 80107f0:	4610      	mov	r0, r2
 80107f2:	f7ff f8cc 	bl	800f98e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107fa:	4b20      	ldr	r3, [pc, #128]	@ (801087c <xTaskResumeAll+0x110>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010800:	429a      	cmp	r2, r3
 8010802:	d302      	bcc.n	801080a <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 8010804:	4b1e      	ldr	r3, [pc, #120]	@ (8010880 <xTaskResumeAll+0x114>)
 8010806:	2201      	movs	r2, #1
 8010808:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801080a:	4b19      	ldr	r3, [pc, #100]	@ (8010870 <xTaskResumeAll+0x104>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1cb      	bne.n	80107aa <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010818:	f000 fb14 	bl	8010e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801081c:	4b19      	ldr	r3, [pc, #100]	@ (8010884 <xTaskResumeAll+0x118>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d010      	beq.n	801084a <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010828:	f000 f83e 	bl	80108a8 <xTaskIncrementTick>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 8010832:	4b13      	ldr	r3, [pc, #76]	@ (8010880 <xTaskResumeAll+0x114>)
 8010834:	2201      	movs	r2, #1
 8010836:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	3b01      	subs	r3, #1
 801083c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1f1      	bne.n	8010828 <xTaskResumeAll+0xbc>

						xPendedTicks = 0;
 8010844:	4b0f      	ldr	r3, [pc, #60]	@ (8010884 <xTaskResumeAll+0x118>)
 8010846:	2200      	movs	r2, #0
 8010848:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801084a:	4b0d      	ldr	r3, [pc, #52]	@ (8010880 <xTaskResumeAll+0x114>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d003      	beq.n	801085a <xTaskResumeAll+0xee>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010852:	2301      	movs	r3, #1
 8010854:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010856:	f000 ff59 	bl	801170c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801085a:	f000 ff7b 	bl	8011754 <vPortExitCritical>

	return xAlreadyYielded;
 801085e:	68bb      	ldr	r3, [r7, #8]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	2000139c 	.word	0x2000139c
 801086c:	20001374 	.word	0x20001374
 8010870:	20001334 	.word	0x20001334
 8010874:	2000137c 	.word	0x2000137c
 8010878:	20000ea4 	.word	0x20000ea4
 801087c:	20000ea0 	.word	0x20000ea0
 8010880:	20001388 	.word	0x20001388
 8010884:	20001384 	.word	0x20001384

08010888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801088e:	4b05      	ldr	r3, [pc, #20]	@ (80108a4 <xTaskGetTickCount+0x1c>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010894:	687b      	ldr	r3, [r7, #4]
}
 8010896:	4618      	mov	r0, r3
 8010898:	370c      	adds	r7, #12
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	20001378 	.word	0x20001378

080108a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b086      	sub	sp, #24
 80108ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80108ae:	2300      	movs	r3, #0
 80108b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108b2:	4b4b      	ldr	r3, [pc, #300]	@ (80109e0 <xTaskIncrementTick+0x138>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f040 8088 	bne.w	80109cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80108bc:	4b49      	ldr	r3, [pc, #292]	@ (80109e4 <xTaskIncrementTick+0x13c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	3301      	adds	r3, #1
 80108c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80108c4:	4a47      	ldr	r2, [pc, #284]	@ (80109e4 <xTaskIncrementTick+0x13c>)
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d119      	bne.n	8010904 <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 80108d0:	4b45      	ldr	r3, [pc, #276]	@ (80109e8 <xTaskIncrementTick+0x140>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d003      	beq.n	80108e2 <xTaskIncrementTick+0x3a>
 80108da:	f001 f865 	bl	80119a8 <ulSetInterruptMask>
 80108de:	bf00      	nop
 80108e0:	e7fd      	b.n	80108de <xTaskIncrementTick+0x36>
 80108e2:	4b41      	ldr	r3, [pc, #260]	@ (80109e8 <xTaskIncrementTick+0x140>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	60fb      	str	r3, [r7, #12]
 80108e8:	4b40      	ldr	r3, [pc, #256]	@ (80109ec <xTaskIncrementTick+0x144>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a3e      	ldr	r2, [pc, #248]	@ (80109e8 <xTaskIncrementTick+0x140>)
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	4a3e      	ldr	r2, [pc, #248]	@ (80109ec <xTaskIncrementTick+0x144>)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	4b3e      	ldr	r3, [pc, #248]	@ (80109f0 <xTaskIncrementTick+0x148>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	3301      	adds	r3, #1
 80108fc:	4a3c      	ldr	r2, [pc, #240]	@ (80109f0 <xTaskIncrementTick+0x148>)
 80108fe:	6013      	str	r3, [r2, #0]
 8010900:	f000 faa0 	bl	8010e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010904:	4b3b      	ldr	r3, [pc, #236]	@ (80109f4 <xTaskIncrementTick+0x14c>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	693a      	ldr	r2, [r7, #16]
 801090a:	429a      	cmp	r2, r3
 801090c:	d349      	bcc.n	80109a2 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801090e:	4b36      	ldr	r3, [pc, #216]	@ (80109e8 <xTaskIncrementTick+0x140>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d104      	bne.n	8010922 <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010918:	4b36      	ldr	r3, [pc, #216]	@ (80109f4 <xTaskIncrementTick+0x14c>)
 801091a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801091e:	601a      	str	r2, [r3, #0]
					break;
 8010920:	e03f      	b.n	80109a2 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010922:	4b31      	ldr	r3, [pc, #196]	@ (80109e8 <xTaskIncrementTick+0x140>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010932:	693a      	ldr	r2, [r7, #16]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	429a      	cmp	r2, r3
 8010938:	d203      	bcs.n	8010942 <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801093a:	4a2e      	ldr	r2, [pc, #184]	@ (80109f4 <xTaskIncrementTick+0x14c>)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010940:	e02f      	b.n	80109a2 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	3304      	adds	r3, #4
 8010946:	4618      	mov	r0, r3
 8010948:	f7ff f87e 	bl	800fa48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010950:	2b00      	cmp	r3, #0
 8010952:	d004      	beq.n	801095e <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	3318      	adds	r3, #24
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff f875 	bl	800fa48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010962:	4b25      	ldr	r3, [pc, #148]	@ (80109f8 <xTaskIncrementTick+0x150>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	429a      	cmp	r2, r3
 8010968:	d903      	bls.n	8010972 <xTaskIncrementTick+0xca>
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801096e:	4a22      	ldr	r2, [pc, #136]	@ (80109f8 <xTaskIncrementTick+0x150>)
 8010970:	6013      	str	r3, [r2, #0]
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4a1f      	ldr	r2, [pc, #124]	@ (80109fc <xTaskIncrementTick+0x154>)
 8010980:	441a      	add	r2, r3
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	3304      	adds	r3, #4
 8010986:	4619      	mov	r1, r3
 8010988:	4610      	mov	r0, r2
 801098a:	f7ff f800 	bl	800f98e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010992:	4b1b      	ldr	r3, [pc, #108]	@ (8010a00 <xTaskIncrementTick+0x158>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010998:	429a      	cmp	r2, r3
 801099a:	d3b8      	bcc.n	801090e <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 801099c:	2301      	movs	r3, #1
 801099e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109a0:	e7b5      	b.n	801090e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80109a2:	4b17      	ldr	r3, [pc, #92]	@ (8010a00 <xTaskIncrementTick+0x158>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a8:	4914      	ldr	r1, [pc, #80]	@ (80109fc <xTaskIncrementTick+0x154>)
 80109aa:	4613      	mov	r3, r2
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4413      	add	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	440b      	add	r3, r1
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	d901      	bls.n	80109be <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80109ba:	2301      	movs	r3, #1
 80109bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80109be:	4b11      	ldr	r3, [pc, #68]	@ (8010a04 <xTaskIncrementTick+0x15c>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d007      	beq.n	80109d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80109c6:	2301      	movs	r3, #1
 80109c8:	617b      	str	r3, [r7, #20]
 80109ca:	e004      	b.n	80109d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80109cc:	4b0e      	ldr	r3, [pc, #56]	@ (8010a08 <xTaskIncrementTick+0x160>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	3301      	adds	r3, #1
 80109d2:	4a0d      	ldr	r2, [pc, #52]	@ (8010a08 <xTaskIncrementTick+0x160>)
 80109d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80109d6:	697b      	ldr	r3, [r7, #20]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	2000139c 	.word	0x2000139c
 80109e4:	20001378 	.word	0x20001378
 80109e8:	2000132c 	.word	0x2000132c
 80109ec:	20001330 	.word	0x20001330
 80109f0:	2000138c 	.word	0x2000138c
 80109f4:	20001394 	.word	0x20001394
 80109f8:	2000137c 	.word	0x2000137c
 80109fc:	20000ea4 	.word	0x20000ea4
 8010a00:	20000ea0 	.word	0x20000ea0
 8010a04:	20001388 	.word	0x20001388
 8010a08:	20001384 	.word	0x20001384

08010a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a12:	4b26      	ldr	r3, [pc, #152]	@ (8010aac <vTaskSwitchContext+0xa0>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d003      	beq.n	8010a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010a1a:	4b25      	ldr	r3, [pc, #148]	@ (8010ab0 <vTaskSwitchContext+0xa4>)
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010a20:	e03f      	b.n	8010aa2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8010a22:	4b23      	ldr	r3, [pc, #140]	@ (8010ab0 <vTaskSwitchContext+0xa4>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a28:	4b22      	ldr	r3, [pc, #136]	@ (8010ab4 <vTaskSwitchContext+0xa8>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	607b      	str	r3, [r7, #4]
 8010a2e:	e009      	b.n	8010a44 <vTaskSwitchContext+0x38>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d103      	bne.n	8010a3e <vTaskSwitchContext+0x32>
 8010a36:	f000 ffb7 	bl	80119a8 <ulSetInterruptMask>
 8010a3a:	bf00      	nop
 8010a3c:	e7fd      	b.n	8010a3a <vTaskSwitchContext+0x2e>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	3b01      	subs	r3, #1
 8010a42:	607b      	str	r3, [r7, #4]
 8010a44:	491c      	ldr	r1, [pc, #112]	@ (8010ab8 <vTaskSwitchContext+0xac>)
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	4413      	add	r3, r2
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	440b      	add	r3, r1
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d0eb      	beq.n	8010a30 <vTaskSwitchContext+0x24>
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	4413      	add	r3, r2
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	4a15      	ldr	r2, [pc, #84]	@ (8010ab8 <vTaskSwitchContext+0xac>)
 8010a64:	4413      	add	r3, r2
 8010a66:	603b      	str	r3, [r7, #0]
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	685a      	ldr	r2, [r3, #4]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	605a      	str	r2, [r3, #4]
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	685a      	ldr	r2, [r3, #4]
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	3308      	adds	r3, #8
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d104      	bne.n	8010a88 <vTaskSwitchContext+0x7c>
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	685a      	ldr	r2, [r3, #4]
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	605a      	str	r2, [r3, #4]
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8010abc <vTaskSwitchContext+0xb0>)
 8010a90:	6013      	str	r3, [r2, #0]
 8010a92:	4a08      	ldr	r2, [pc, #32]	@ (8010ab4 <vTaskSwitchContext+0xa8>)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010a98:	4b08      	ldr	r3, [pc, #32]	@ (8010abc <vTaskSwitchContext+0xb0>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3354      	adds	r3, #84	@ 0x54
 8010a9e:	4a08      	ldr	r2, [pc, #32]	@ (8010ac0 <vTaskSwitchContext+0xb4>)
 8010aa0:	6013      	str	r3, [r2, #0]
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	2000139c 	.word	0x2000139c
 8010ab0:	20001388 	.word	0x20001388
 8010ab4:	2000137c 	.word	0x2000137c
 8010ab8:	20000ea4 	.word	0x20000ea4
 8010abc:	20000ea0 	.word	0x20000ea0
 8010ac0:	2000010c 	.word	0x2000010c

08010ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d103      	bne.n	8010adc <vTaskPlaceOnEventList+0x18>
 8010ad4:	f000 ff68 	bl	80119a8 <ulSetInterruptMask>
 8010ad8:	bf00      	nop
 8010ada:	e7fd      	b.n	8010ad8 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010adc:	4b07      	ldr	r3, [pc, #28]	@ (8010afc <vTaskPlaceOnEventList+0x38>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	3318      	adds	r3, #24
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7fe ff76 	bl	800f9d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010aea:	2101      	movs	r1, #1
 8010aec:	6838      	ldr	r0, [r7, #0]
 8010aee:	f000 fa47 	bl	8010f80 <prvAddCurrentTaskToDelayedList>
}
 8010af2:	bf00      	nop
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	20000ea0 	.word	0x20000ea0

08010b00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d103      	bne.n	8010b1a <vTaskPlaceOnEventListRestricted+0x1a>
 8010b12:	f000 ff49 	bl	80119a8 <ulSetInterruptMask>
 8010b16:	bf00      	nop
 8010b18:	e7fd      	b.n	8010b16 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8010b44 <vTaskPlaceOnEventListRestricted+0x44>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3318      	adds	r3, #24
 8010b20:	4619      	mov	r1, r3
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f7fe ff33 	bl	800f98e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d002      	beq.n	8010b34 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8010b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010b32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b34:	6879      	ldr	r1, [r7, #4]
 8010b36:	68b8      	ldr	r0, [r7, #8]
 8010b38:	f000 fa22 	bl	8010f80 <prvAddCurrentTaskToDelayedList>
	}
 8010b3c:	bf00      	nop
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	20000ea0 	.word	0x20000ea0

08010b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <xTaskRemoveFromEventList+0x1e>
 8010b5e:	f000 ff23 	bl	80119a8 <ulSetInterruptMask>
 8010b62:	bf00      	nop
 8010b64:	e7fd      	b.n	8010b62 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	3318      	adds	r3, #24
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe ff6c 	bl	800fa48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b70:	4b1d      	ldr	r3, [pc, #116]	@ (8010be8 <xTaskRemoveFromEventList+0xa0>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d11d      	bne.n	8010bb4 <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	3304      	adds	r3, #4
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fe ff63 	bl	800fa48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b86:	4b19      	ldr	r3, [pc, #100]	@ (8010bec <xTaskRemoveFromEventList+0xa4>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d903      	bls.n	8010b96 <xTaskRemoveFromEventList+0x4e>
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b92:	4a16      	ldr	r2, [pc, #88]	@ (8010bec <xTaskRemoveFromEventList+0xa4>)
 8010b94:	6013      	str	r3, [r2, #0]
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4413      	add	r3, r2
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	4a13      	ldr	r2, [pc, #76]	@ (8010bf0 <xTaskRemoveFromEventList+0xa8>)
 8010ba4:	441a      	add	r2, r3
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	3304      	adds	r3, #4
 8010baa:	4619      	mov	r1, r3
 8010bac:	4610      	mov	r0, r2
 8010bae:	f7fe feee 	bl	800f98e <vListInsertEnd>
 8010bb2:	e005      	b.n	8010bc0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	3318      	adds	r3, #24
 8010bb8:	4619      	mov	r1, r3
 8010bba:	480e      	ldr	r0, [pc, #56]	@ (8010bf4 <xTaskRemoveFromEventList+0xac>)
 8010bbc:	f7fe fee7 	bl	800f98e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8010bf8 <xTaskRemoveFromEventList+0xb0>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d905      	bls.n	8010bda <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8010bfc <xTaskRemoveFromEventList+0xb4>)
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	601a      	str	r2, [r3, #0]
 8010bd8:	e001      	b.n	8010bde <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8010bde:	68fb      	ldr	r3, [r7, #12]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3710      	adds	r7, #16
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	2000139c 	.word	0x2000139c
 8010bec:	2000137c 	.word	0x2000137c
 8010bf0:	20000ea4 	.word	0x20000ea4
 8010bf4:	20001334 	.word	0x20001334
 8010bf8:	20000ea0 	.word	0x20000ea0
 8010bfc:	20001388 	.word	0x20001388

08010c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010c08:	4b06      	ldr	r3, [pc, #24]	@ (8010c24 <vTaskInternalSetTimeOutState+0x24>)
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010c10:	4b05      	ldr	r3, [pc, #20]	@ (8010c28 <vTaskInternalSetTimeOutState+0x28>)
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	605a      	str	r2, [r3, #4]
}
 8010c18:	bf00      	nop
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr
 8010c24:	2000138c 	.word	0x2000138c
 8010c28:	20001378 	.word	0x20001378

08010c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d103      	bne.n	8010c44 <xTaskCheckForTimeOut+0x18>
 8010c3c:	f000 feb4 	bl	80119a8 <ulSetInterruptMask>
 8010c40:	bf00      	nop
 8010c42:	e7fd      	b.n	8010c40 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d103      	bne.n	8010c52 <xTaskCheckForTimeOut+0x26>
 8010c4a:	f000 fead 	bl	80119a8 <ulSetInterruptMask>
 8010c4e:	bf00      	nop
 8010c50:	e7fd      	b.n	8010c4e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
 8010c52:	f000 fd6d 	bl	8011730 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010c56:	4b1d      	ldr	r3, [pc, #116]	@ (8010ccc <xTaskCheckForTimeOut+0xa0>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	693a      	ldr	r2, [r7, #16]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010c6e:	d102      	bne.n	8010c76 <xTaskCheckForTimeOut+0x4a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]
 8010c74:	e023      	b.n	8010cbe <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	4b15      	ldr	r3, [pc, #84]	@ (8010cd0 <xTaskCheckForTimeOut+0xa4>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d007      	beq.n	8010c92 <xTaskCheckForTimeOut+0x66>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d302      	bcc.n	8010c92 <xTaskCheckForTimeOut+0x66>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	e015      	b.n	8010cbe <xTaskCheckForTimeOut+0x92>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	68fa      	ldr	r2, [r7, #12]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d20b      	bcs.n	8010cb4 <xTaskCheckForTimeOut+0x88>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	1ad2      	subs	r2, r2, r3
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7ff ffa9 	bl	8010c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	617b      	str	r3, [r7, #20]
 8010cb2:	e004      	b.n	8010cbe <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			*pxTicksToWait = 0;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8010cbe:	f000 fd49 	bl	8011754 <vPortExitCritical>

	return xReturn;
 8010cc2:	697b      	ldr	r3, [r7, #20]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	20001378 	.word	0x20001378
 8010cd0:	2000138c 	.word	0x2000138c

08010cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010cd8:	4b03      	ldr	r3, [pc, #12]	@ (8010ce8 <vTaskMissedYield+0x14>)
 8010cda:	2201      	movs	r2, #1
 8010cdc:	601a      	str	r2, [r3, #0]
}
 8010cde:	bf00      	nop
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr
 8010ce8:	20001388 	.word	0x20001388

08010cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010cf4:	f000 f84a 	bl	8010d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010cf8:	4b03      	ldr	r3, [pc, #12]	@ (8010d08 <prvIdleTask+0x1c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d9f9      	bls.n	8010cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010d00:	f000 fd04 	bl	801170c <vPortYield>
		prvCheckTasksWaitingTermination();
 8010d04:	e7f6      	b.n	8010cf4 <prvIdleTask+0x8>
 8010d06:	bf00      	nop
 8010d08:	20000ea4 	.word	0x20000ea4

08010d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d12:	2300      	movs	r3, #0
 8010d14:	607b      	str	r3, [r7, #4]
 8010d16:	e00c      	b.n	8010d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4a12      	ldr	r2, [pc, #72]	@ (8010d6c <prvInitialiseTaskLists+0x60>)
 8010d24:	4413      	add	r3, r2
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fe04 	bl	800f934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	607b      	str	r3, [r7, #4]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b37      	cmp	r3, #55	@ 0x37
 8010d36:	d9ef      	bls.n	8010d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010d38:	480d      	ldr	r0, [pc, #52]	@ (8010d70 <prvInitialiseTaskLists+0x64>)
 8010d3a:	f7fe fdfb 	bl	800f934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d3e:	480d      	ldr	r0, [pc, #52]	@ (8010d74 <prvInitialiseTaskLists+0x68>)
 8010d40:	f7fe fdf8 	bl	800f934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d44:	480c      	ldr	r0, [pc, #48]	@ (8010d78 <prvInitialiseTaskLists+0x6c>)
 8010d46:	f7fe fdf5 	bl	800f934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d4a:	480c      	ldr	r0, [pc, #48]	@ (8010d7c <prvInitialiseTaskLists+0x70>)
 8010d4c:	f7fe fdf2 	bl	800f934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d50:	480b      	ldr	r0, [pc, #44]	@ (8010d80 <prvInitialiseTaskLists+0x74>)
 8010d52:	f7fe fdef 	bl	800f934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d56:	4b0b      	ldr	r3, [pc, #44]	@ (8010d84 <prvInitialiseTaskLists+0x78>)
 8010d58:	4a05      	ldr	r2, [pc, #20]	@ (8010d70 <prvInitialiseTaskLists+0x64>)
 8010d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d88 <prvInitialiseTaskLists+0x7c>)
 8010d5e:	4a05      	ldr	r2, [pc, #20]	@ (8010d74 <prvInitialiseTaskLists+0x68>)
 8010d60:	601a      	str	r2, [r3, #0]
}
 8010d62:	bf00      	nop
 8010d64:	3708      	adds	r7, #8
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	20000ea4 	.word	0x20000ea4
 8010d70:	20001304 	.word	0x20001304
 8010d74:	20001318 	.word	0x20001318
 8010d78:	20001334 	.word	0x20001334
 8010d7c:	20001348 	.word	0x20001348
 8010d80:	20001360 	.word	0x20001360
 8010d84:	2000132c 	.word	0x2000132c
 8010d88:	20001330 	.word	0x20001330

08010d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d92:	e019      	b.n	8010dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010d94:	f000 fccc 	bl	8011730 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d98:	4b10      	ldr	r3, [pc, #64]	@ (8010ddc <prvCheckTasksWaitingTermination+0x50>)
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	3304      	adds	r3, #4
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fe fe4f 	bl	800fa48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010daa:	4b0d      	ldr	r3, [pc, #52]	@ (8010de0 <prvCheckTasksWaitingTermination+0x54>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	4a0b      	ldr	r2, [pc, #44]	@ (8010de0 <prvCheckTasksWaitingTermination+0x54>)
 8010db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010db4:	4b0b      	ldr	r3, [pc, #44]	@ (8010de4 <prvCheckTasksWaitingTermination+0x58>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	4a0a      	ldr	r2, [pc, #40]	@ (8010de4 <prvCheckTasksWaitingTermination+0x58>)
 8010dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010dbe:	f000 fcc9 	bl	8011754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 f810 	bl	8010de8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010dc8:	4b06      	ldr	r3, [pc, #24]	@ (8010de4 <prvCheckTasksWaitingTermination+0x58>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1e1      	bne.n	8010d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010dd0:	bf00      	nop
 8010dd2:	bf00      	nop
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	20001348 	.word	0x20001348
 8010de0:	20001374 	.word	0x20001374
 8010de4:	2000135c 	.word	0x2000135c

08010de8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	3354      	adds	r3, #84	@ 0x54
 8010df4:	4618      	mov	r0, r3
 8010df6:	f001 fdc1 	bl	801297c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d108      	bne.n	8010e16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f000 feeb 	bl	8011be4 <vPortFree>
				vPortFree( pxTCB );
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fee8 	bl	8011be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010e14:	e011      	b.n	8010e3a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d103      	bne.n	8010e28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 fedf 	bl	8011be4 <vPortFree>
	}
 8010e26:	e008      	b.n	8010e3a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	d003      	beq.n	8010e3a <prvDeleteTCB+0x52>
 8010e32:	f000 fdb9 	bl	80119a8 <ulSetInterruptMask>
 8010e36:	bf00      	nop
 8010e38:	e7fd      	b.n	8010e36 <prvDeleteTCB+0x4e>
	}
 8010e3a:	bf00      	nop
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
	...

08010e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8010e7c <prvResetNextTaskUnblockTime+0x38>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d104      	bne.n	8010e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e54:	4b0a      	ldr	r3, [pc, #40]	@ (8010e80 <prvResetNextTaskUnblockTime+0x3c>)
 8010e56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010e5c:	e008      	b.n	8010e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e5e:	4b07      	ldr	r3, [pc, #28]	@ (8010e7c <prvResetNextTaskUnblockTime+0x38>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	4a04      	ldr	r2, [pc, #16]	@ (8010e80 <prvResetNextTaskUnblockTime+0x3c>)
 8010e6e:	6013      	str	r3, [r2, #0]
}
 8010e70:	bf00      	nop
 8010e72:	370c      	adds	r7, #12
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	2000132c 	.word	0x2000132c
 8010e80:	20001394 	.word	0x20001394

08010e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010eb8 <xTaskGetSchedulerState+0x34>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d102      	bne.n	8010e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010e92:	2301      	movs	r3, #1
 8010e94:	607b      	str	r3, [r7, #4]
 8010e96:	e008      	b.n	8010eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e98:	4b08      	ldr	r3, [pc, #32]	@ (8010ebc <xTaskGetSchedulerState+0x38>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ea0:	2302      	movs	r3, #2
 8010ea2:	607b      	str	r3, [r7, #4]
 8010ea4:	e001      	b.n	8010eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010eaa:	687b      	ldr	r3, [r7, #4]
	}
 8010eac:	4618      	mov	r0, r3
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	20001380 	.word	0x20001380
 8010ebc:	2000139c 	.word	0x2000139c

08010ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d048      	beq.n	8010f68 <xTaskPriorityDisinherit+0xa8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010ed6:	4b27      	ldr	r3, [pc, #156]	@ (8010f74 <xTaskPriorityDisinherit+0xb4>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	68ba      	ldr	r2, [r7, #8]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d003      	beq.n	8010ee8 <xTaskPriorityDisinherit+0x28>
 8010ee0:	f000 fd62 	bl	80119a8 <ulSetInterruptMask>
 8010ee4:	bf00      	nop
 8010ee6:	e7fd      	b.n	8010ee4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d103      	bne.n	8010ef8 <xTaskPriorityDisinherit+0x38>
 8010ef0:	f000 fd5a 	bl	80119a8 <ulSetInterruptMask>
 8010ef4:	bf00      	nop
 8010ef6:	e7fd      	b.n	8010ef4 <xTaskPriorityDisinherit+0x34>
			( pxTCB->uxMutexesHeld )--;
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010efc:	1e5a      	subs	r2, r3, #1
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d02c      	beq.n	8010f68 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d128      	bne.n	8010f68 <xTaskPriorityDisinherit+0xa8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	3304      	adds	r3, #4
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fe fd94 	bl	800fa48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f38:	4b0f      	ldr	r3, [pc, #60]	@ (8010f78 <xTaskPriorityDisinherit+0xb8>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d903      	bls.n	8010f48 <xTaskPriorityDisinherit+0x88>
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f44:	4a0c      	ldr	r2, [pc, #48]	@ (8010f78 <xTaskPriorityDisinherit+0xb8>)
 8010f46:	6013      	str	r3, [r2, #0]
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	4413      	add	r3, r2
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	4a09      	ldr	r2, [pc, #36]	@ (8010f7c <xTaskPriorityDisinherit+0xbc>)
 8010f56:	441a      	add	r2, r3
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	3304      	adds	r3, #4
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4610      	mov	r0, r2
 8010f60:	f7fe fd15 	bl	800f98e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010f64:	2301      	movs	r3, #1
 8010f66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f68:	68fb      	ldr	r3, [r7, #12]
	}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3710      	adds	r7, #16
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	20000ea0 	.word	0x20000ea0
 8010f78:	2000137c 	.word	0x2000137c
 8010f7c:	20000ea4 	.word	0x20000ea4

08010f80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f8a:	4b21      	ldr	r3, [pc, #132]	@ (8011010 <prvAddCurrentTaskToDelayedList+0x90>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f90:	4b20      	ldr	r3, [pc, #128]	@ (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3304      	adds	r3, #4
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fe fd56 	bl	800fa48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010fa2:	d10a      	bne.n	8010fba <prvAddCurrentTaskToDelayedList+0x3a>
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d007      	beq.n	8010fba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010faa:	4b1a      	ldr	r3, [pc, #104]	@ (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	3304      	adds	r3, #4
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	4819      	ldr	r0, [pc, #100]	@ (8011018 <prvAddCurrentTaskToDelayedList+0x98>)
 8010fb4:	f7fe fceb 	bl	800f98e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010fb8:	e026      	b.n	8011008 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010fc2:	4b14      	ldr	r3, [pc, #80]	@ (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d209      	bcs.n	8010fe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fd2:	4b12      	ldr	r3, [pc, #72]	@ (801101c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	3304      	adds	r3, #4
 8010fdc:	4619      	mov	r1, r3
 8010fde:	4610      	mov	r0, r2
 8010fe0:	f7fe fcf9 	bl	800f9d6 <vListInsert>
}
 8010fe4:	e010      	b.n	8011008 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8011020 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	4b0a      	ldr	r3, [pc, #40]	@ (8011014 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3304      	adds	r3, #4
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	f7fe fcef 	bl	800f9d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8011024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d202      	bcs.n	8011008 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011002:	4a08      	ldr	r2, [pc, #32]	@ (8011024 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	6013      	str	r3, [r2, #0]
}
 8011008:	bf00      	nop
 801100a:	3710      	adds	r7, #16
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}
 8011010:	20001378 	.word	0x20001378
 8011014:	20000ea0 	.word	0x20000ea0
 8011018:	20001360 	.word	0x20001360
 801101c:	20001330 	.word	0x20001330
 8011020:	2000132c 	.word	0x2000132c
 8011024:	20001394 	.word	0x20001394

08011028 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b088      	sub	sp, #32
 801102c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801102e:	2300      	movs	r3, #0
 8011030:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011032:	f000 fad3 	bl	80115dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011036:	4b18      	ldr	r3, [pc, #96]	@ (8011098 <xTimerCreateTimerTask+0x70>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d020      	beq.n	8011080 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801103e:	2300      	movs	r3, #0
 8011040:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011042:	2300      	movs	r3, #0
 8011044:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011046:	463a      	mov	r2, r7
 8011048:	1d39      	adds	r1, r7, #4
 801104a:	f107 0308 	add.w	r3, r7, #8
 801104e:	4618      	mov	r0, r3
 8011050:	f7fe fc56 	bl	800f900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011054:	6839      	ldr	r1, [r7, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	9202      	str	r2, [sp, #8]
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	2302      	movs	r3, #2
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	2300      	movs	r3, #0
 8011064:	460a      	mov	r2, r1
 8011066:	490d      	ldr	r1, [pc, #52]	@ (801109c <xTimerCreateTimerTask+0x74>)
 8011068:	480d      	ldr	r0, [pc, #52]	@ (80110a0 <xTimerCreateTimerTask+0x78>)
 801106a:	f7ff f953 	bl	8010314 <xTaskCreateStatic>
 801106e:	4603      	mov	r3, r0
 8011070:	4a0c      	ldr	r2, [pc, #48]	@ (80110a4 <xTimerCreateTimerTask+0x7c>)
 8011072:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011074:	4b0b      	ldr	r3, [pc, #44]	@ (80110a4 <xTimerCreateTimerTask+0x7c>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801107c:	2301      	movs	r3, #1
 801107e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d103      	bne.n	801108e <xTimerCreateTimerTask+0x66>
 8011086:	f000 fc8f 	bl	80119a8 <ulSetInterruptMask>
 801108a:	bf00      	nop
 801108c:	e7fd      	b.n	801108a <xTimerCreateTimerTask+0x62>
	return xReturn;
 801108e:	68fb      	ldr	r3, [r7, #12]
}
 8011090:	4618      	mov	r0, r3
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	200013d0 	.word	0x200013d0
 801109c:	08012b8c 	.word	0x08012b8c
 80110a0:	080111c1 	.word	0x080111c1
 80110a4:	200013d4 	.word	0x200013d4

080110a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b08a      	sub	sp, #40	@ 0x28
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
 80110b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80110b6:	2300      	movs	r3, #0
 80110b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d103      	bne.n	80110c8 <xTimerGenericCommand+0x20>
 80110c0:	f000 fc72 	bl	80119a8 <ulSetInterruptMask>
 80110c4:	bf00      	nop
 80110c6:	e7fd      	b.n	80110c4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80110c8:	4b19      	ldr	r3, [pc, #100]	@ (8011130 <xTimerGenericCommand+0x88>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d02a      	beq.n	8011126 <xTimerGenericCommand+0x7e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b05      	cmp	r3, #5
 80110e0:	dc18      	bgt.n	8011114 <xTimerGenericCommand+0x6c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80110e2:	f7ff fecf 	bl	8010e84 <xTaskGetSchedulerState>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	d109      	bne.n	8011100 <xTimerGenericCommand+0x58>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80110ec:	4b10      	ldr	r3, [pc, #64]	@ (8011130 <xTimerGenericCommand+0x88>)
 80110ee:	6818      	ldr	r0, [r3, #0]
 80110f0:	f107 0114 	add.w	r1, r7, #20
 80110f4:	2300      	movs	r3, #0
 80110f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110f8:	f7fe fda1 	bl	800fc3e <xQueueGenericSend>
 80110fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80110fe:	e012      	b.n	8011126 <xTimerGenericCommand+0x7e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011100:	4b0b      	ldr	r3, [pc, #44]	@ (8011130 <xTimerGenericCommand+0x88>)
 8011102:	6818      	ldr	r0, [r3, #0]
 8011104:	f107 0114 	add.w	r1, r7, #20
 8011108:	2300      	movs	r3, #0
 801110a:	2200      	movs	r2, #0
 801110c:	f7fe fd97 	bl	800fc3e <xQueueGenericSend>
 8011110:	6278      	str	r0, [r7, #36]	@ 0x24
 8011112:	e008      	b.n	8011126 <xTimerGenericCommand+0x7e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011114:	4b06      	ldr	r3, [pc, #24]	@ (8011130 <xTimerGenericCommand+0x88>)
 8011116:	6818      	ldr	r0, [r3, #0]
 8011118:	f107 0114 	add.w	r1, r7, #20
 801111c:	2300      	movs	r3, #0
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	f7fe fe5a 	bl	800fdd8 <xQueueGenericSendFromISR>
 8011124:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011128:	4618      	mov	r0, r3
 801112a:	3728      	adds	r7, #40	@ 0x28
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	200013d0 	.word	0x200013d0

08011134 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b086      	sub	sp, #24
 8011138:	af02      	add	r7, sp, #8
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801113e:	4b1f      	ldr	r3, [pc, #124]	@ (80111bc <prvProcessExpiredTimer+0x88>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	3304      	adds	r3, #4
 801114c:	4618      	mov	r0, r3
 801114e:	f7fe fc7b 	bl	800fa48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011158:	f003 0304 	and.w	r3, r3, #4
 801115c:	2b00      	cmp	r3, #0
 801115e:	d01b      	beq.n	8011198 <prvProcessExpiredTimer+0x64>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	699a      	ldr	r2, [r3, #24]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	18d1      	adds	r1, r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f000 f8c5 	bl	80112fc <prvInsertTimerInActiveList>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d018      	beq.n	80111aa <prvProcessExpiredTimer+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011178:	2300      	movs	r3, #0
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	2300      	movs	r3, #0
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	2100      	movs	r1, #0
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f7ff ff90 	bl	80110a8 <xTimerGenericCommand>
 8011188:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d10c      	bne.n	80111aa <prvProcessExpiredTimer+0x76>
 8011190:	f000 fc0a 	bl	80119a8 <ulSetInterruptMask>
 8011194:	bf00      	nop
 8011196:	e7fd      	b.n	8011194 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801119e:	f023 0301 	bic.w	r3, r3, #1
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	4798      	blx	r3
}
 80111b2:	bf00      	nop
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	200013c8 	.word	0x200013c8

080111c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111c8:	f107 0308 	add.w	r3, r7, #8
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 f851 	bl	8011274 <prvGetNextExpireTime>
 80111d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	4619      	mov	r1, r3
 80111d8:	68f8      	ldr	r0, [r7, #12]
 80111da:	f000 f805 	bl	80111e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80111de:	f000 f8cf 	bl	8011380 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111e2:	bf00      	nop
 80111e4:	e7f0      	b.n	80111c8 <prvTimerTask+0x8>
	...

080111e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80111f2:	f7ff faad 	bl	8010750 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80111f6:	f107 0308 	add.w	r3, r7, #8
 80111fa:	4618      	mov	r0, r3
 80111fc:	f000 f85e 	bl	80112bc <prvSampleTimeNow>
 8011200:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d12a      	bne.n	801125e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10a      	bne.n	8011224 <prvProcessTimerOrBlockTask+0x3c>
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	429a      	cmp	r2, r3
 8011214:	d806      	bhi.n	8011224 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011216:	f7ff faa9 	bl	801076c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801121a:	68f9      	ldr	r1, [r7, #12]
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7ff ff89 	bl	8011134 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011222:	e01e      	b.n	8011262 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d008      	beq.n	801123c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801122a:	4b10      	ldr	r3, [pc, #64]	@ (801126c <prvProcessTimerOrBlockTask+0x84>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d101      	bne.n	8011238 <prvProcessTimerOrBlockTask+0x50>
 8011234:	2301      	movs	r3, #1
 8011236:	e000      	b.n	801123a <prvProcessTimerOrBlockTask+0x52>
 8011238:	2300      	movs	r3, #0
 801123a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801123c:	4b0c      	ldr	r3, [pc, #48]	@ (8011270 <prvProcessTimerOrBlockTask+0x88>)
 801123e:	6818      	ldr	r0, [r3, #0]
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	4619      	mov	r1, r3
 801124a:	f7ff f82f 	bl	80102ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801124e:	f7ff fa8d 	bl	801076c <xTaskResumeAll>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d104      	bne.n	8011262 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8011258:	f000 fa58 	bl	801170c <vPortYield>
}
 801125c:	e001      	b.n	8011262 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 801125e:	f7ff fa85 	bl	801076c <xTaskResumeAll>
}
 8011262:	bf00      	nop
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	200013cc 	.word	0x200013cc
 8011270:	200013d0 	.word	0x200013d0

08011274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801127c:	4b0e      	ldr	r3, [pc, #56]	@ (80112b8 <prvGetNextExpireTime+0x44>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <prvGetNextExpireTime+0x16>
 8011286:	2201      	movs	r2, #1
 8011288:	e000      	b.n	801128c <prvGetNextExpireTime+0x18>
 801128a:	2200      	movs	r2, #0
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d105      	bne.n	80112a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011298:	4b07      	ldr	r3, [pc, #28]	@ (80112b8 <prvGetNextExpireTime+0x44>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	60fb      	str	r3, [r7, #12]
 80112a2:	e001      	b.n	80112a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80112a4:	2300      	movs	r3, #0
 80112a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80112a8:	68fb      	ldr	r3, [r7, #12]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3714      	adds	r7, #20
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	200013c8 	.word	0x200013c8

080112bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80112c4:	f7ff fae0 	bl	8010888 <xTaskGetTickCount>
 80112c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80112ca:	4b0b      	ldr	r3, [pc, #44]	@ (80112f8 <prvSampleTimeNow+0x3c>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	68fa      	ldr	r2, [r7, #12]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d205      	bcs.n	80112e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80112d4:	f000 f924 	bl	8011520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2201      	movs	r2, #1
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	e002      	b.n	80112e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80112e6:	4a04      	ldr	r2, [pc, #16]	@ (80112f8 <prvSampleTimeNow+0x3c>)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80112ec:	68fb      	ldr	r3, [r7, #12]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	200013d8 	.word	0x200013d8

080112fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b086      	sub	sp, #24
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
 8011308:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801130a:	2300      	movs	r3, #0
 801130c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	429a      	cmp	r2, r3
 8011320:	d812      	bhi.n	8011348 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	1ad2      	subs	r2, r2, r3
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	429a      	cmp	r2, r3
 801132e:	d302      	bcc.n	8011336 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011330:	2301      	movs	r3, #1
 8011332:	617b      	str	r3, [r7, #20]
 8011334:	e01b      	b.n	801136e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011336:	4b10      	ldr	r3, [pc, #64]	@ (8011378 <prvInsertTimerInActiveList+0x7c>)
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	3304      	adds	r3, #4
 801133e:	4619      	mov	r1, r3
 8011340:	4610      	mov	r0, r2
 8011342:	f7fe fb48 	bl	800f9d6 <vListInsert>
 8011346:	e012      	b.n	801136e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	429a      	cmp	r2, r3
 801134e:	d206      	bcs.n	801135e <prvInsertTimerInActiveList+0x62>
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	429a      	cmp	r2, r3
 8011356:	d302      	bcc.n	801135e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011358:	2301      	movs	r3, #1
 801135a:	617b      	str	r3, [r7, #20]
 801135c:	e007      	b.n	801136e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801135e:	4b07      	ldr	r3, [pc, #28]	@ (801137c <prvInsertTimerInActiveList+0x80>)
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	3304      	adds	r3, #4
 8011366:	4619      	mov	r1, r3
 8011368:	4610      	mov	r0, r2
 801136a:	f7fe fb34 	bl	800f9d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801136e:	697b      	ldr	r3, [r7, #20]
}
 8011370:	4618      	mov	r0, r3
 8011372:	3718      	adds	r7, #24
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	200013cc 	.word	0x200013cc
 801137c:	200013c8 	.word	0x200013c8

08011380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08c      	sub	sp, #48	@ 0x30
 8011384:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011386:	e0b8      	b.n	80114fa <prvProcessReceivedCommands+0x17a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	2b00      	cmp	r3, #0
 801138c:	da12      	bge.n	80113b4 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801138e:	f107 0308 	add.w	r3, r7, #8
 8011392:	3304      	adds	r3, #4
 8011394:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011398:	2b00      	cmp	r3, #0
 801139a:	d103      	bne.n	80113a4 <prvProcessReceivedCommands+0x24>
 801139c:	f000 fb04 	bl	80119a8 <ulSetInterruptMask>
 80113a0:	bf00      	nop
 80113a2:	e7fd      	b.n	80113a0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80113a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113aa:	6850      	ldr	r0, [r2, #4]
 80113ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113ae:	6892      	ldr	r2, [r2, #8]
 80113b0:	4611      	mov	r1, r2
 80113b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	f2c0 809f 	blt.w	80114fa <prvProcessReceivedCommands+0x17a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80113c0:	6a3b      	ldr	r3, [r7, #32]
 80113c2:	695b      	ldr	r3, [r3, #20]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d004      	beq.n	80113d2 <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	3304      	adds	r3, #4
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fe fb3b 	bl	800fa48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113d2:	1d3b      	adds	r3, r7, #4
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7ff ff71 	bl	80112bc <prvSampleTimeNow>
 80113da:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	2b09      	cmp	r3, #9
 80113e0:	f200 8088 	bhi.w	80114f4 <prvProcessReceivedCommands+0x174>
 80113e4:	a201      	add	r2, pc, #4	@ (adr r2, 80113ec <prvProcessReceivedCommands+0x6c>)
 80113e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ea:	bf00      	nop
 80113ec:	08011415 	.word	0x08011415
 80113f0:	08011415 	.word	0x08011415
 80113f4:	08011415 	.word	0x08011415
 80113f8:	0801147b 	.word	0x0801147b
 80113fc:	0801148f 	.word	0x0801148f
 8011400:	080114cb 	.word	0x080114cb
 8011404:	08011415 	.word	0x08011415
 8011408:	08011415 	.word	0x08011415
 801140c:	0801147b 	.word	0x0801147b
 8011410:	0801148f 	.word	0x0801148f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011414:	6a3b      	ldr	r3, [r7, #32]
 8011416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801141a:	f043 0301 	orr.w	r3, r3, #1
 801141e:	b2da      	uxtb	r2, r3
 8011420:	6a3b      	ldr	r3, [r7, #32]
 8011422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	6a3b      	ldr	r3, [r7, #32]
 801142a:	699b      	ldr	r3, [r3, #24]
 801142c:	18d1      	adds	r1, r2, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	69fa      	ldr	r2, [r7, #28]
 8011432:	6a38      	ldr	r0, [r7, #32]
 8011434:	f7ff ff62 	bl	80112fc <prvInsertTimerInActiveList>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d05c      	beq.n	80114f8 <prvProcessReceivedCommands+0x178>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	6a1b      	ldr	r3, [r3, #32]
 8011442:	6a38      	ldr	r0, [r7, #32]
 8011444:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011446:	6a3b      	ldr	r3, [r7, #32]
 8011448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801144c:	f003 0304 	and.w	r3, r3, #4
 8011450:	2b00      	cmp	r3, #0
 8011452:	d051      	beq.n	80114f8 <prvProcessReceivedCommands+0x178>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	6a3b      	ldr	r3, [r7, #32]
 8011458:	699b      	ldr	r3, [r3, #24]
 801145a:	441a      	add	r2, r3
 801145c:	2300      	movs	r3, #0
 801145e:	9300      	str	r3, [sp, #0]
 8011460:	2300      	movs	r3, #0
 8011462:	2100      	movs	r1, #0
 8011464:	6a38      	ldr	r0, [r7, #32]
 8011466:	f7ff fe1f 	bl	80110a8 <xTimerGenericCommand>
 801146a:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801146c:	69bb      	ldr	r3, [r7, #24]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d142      	bne.n	80114f8 <prvProcessReceivedCommands+0x178>
 8011472:	f000 fa99 	bl	80119a8 <ulSetInterruptMask>
 8011476:	bf00      	nop
 8011478:	e7fd      	b.n	8011476 <prvProcessReceivedCommands+0xf6>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801147a:	6a3b      	ldr	r3, [r7, #32]
 801147c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011480:	f023 0301 	bic.w	r3, r3, #1
 8011484:	b2da      	uxtb	r2, r3
 8011486:	6a3b      	ldr	r3, [r7, #32]
 8011488:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801148c:	e035      	b.n	80114fa <prvProcessReceivedCommands+0x17a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801148e:	6a3b      	ldr	r3, [r7, #32]
 8011490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011494:	f043 0301 	orr.w	r3, r3, #1
 8011498:	b2da      	uxtb	r2, r3
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	6a3b      	ldr	r3, [r7, #32]
 80114a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	699b      	ldr	r3, [r3, #24]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d103      	bne.n	80114b6 <prvProcessReceivedCommands+0x136>
 80114ae:	f000 fa7b 	bl	80119a8 <ulSetInterruptMask>
 80114b2:	bf00      	nop
 80114b4:	e7fd      	b.n	80114b2 <prvProcessReceivedCommands+0x132>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	699a      	ldr	r2, [r3, #24]
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	18d1      	adds	r1, r2, r3
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	69fa      	ldr	r2, [r7, #28]
 80114c2:	6a38      	ldr	r0, [r7, #32]
 80114c4:	f7ff ff1a 	bl	80112fc <prvInsertTimerInActiveList>
					break;
 80114c8:	e017      	b.n	80114fa <prvProcessReceivedCommands+0x17a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80114ca:	6a3b      	ldr	r3, [r7, #32]
 80114cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80114d0:	f003 0302 	and.w	r3, r3, #2
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d103      	bne.n	80114e0 <prvProcessReceivedCommands+0x160>
						{
							vPortFree( pxTimer );
 80114d8:	6a38      	ldr	r0, [r7, #32]
 80114da:	f000 fb83 	bl	8011be4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80114de:	e00c      	b.n	80114fa <prvProcessReceivedCommands+0x17a>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114e0:	6a3b      	ldr	r3, [r7, #32]
 80114e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80114e6:	f023 0301 	bic.w	r3, r3, #1
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80114f2:	e002      	b.n	80114fa <prvProcessReceivedCommands+0x17a>

				default	:
					/* Don't expect to get here. */
					break;
 80114f4:	bf00      	nop
 80114f6:	e000      	b.n	80114fa <prvProcessReceivedCommands+0x17a>
					break;
 80114f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80114fa:	4b08      	ldr	r3, [pc, #32]	@ (801151c <prvProcessReceivedCommands+0x19c>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f107 0108 	add.w	r1, r7, #8
 8011502:	2200      	movs	r2, #0
 8011504:	4618      	mov	r0, r3
 8011506:	f7fe fcdb 	bl	800fec0 <xQueueReceive>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	f47f af3b 	bne.w	8011388 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011512:	bf00      	nop
 8011514:	bf00      	nop
 8011516:	3728      	adds	r7, #40	@ 0x28
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	200013d0 	.word	0x200013d0

08011520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b088      	sub	sp, #32
 8011524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011526:	e041      	b.n	80115ac <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011528:	4b2a      	ldr	r3, [pc, #168]	@ (80115d4 <prvSwitchTimerLists+0xb4>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011532:	4b28      	ldr	r3, [pc, #160]	@ (80115d4 <prvSwitchTimerLists+0xb4>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	3304      	adds	r3, #4
 8011540:	4618      	mov	r0, r3
 8011542:	f7fe fa81 	bl	800fa48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	6a1b      	ldr	r3, [r3, #32]
 801154a:	68f8      	ldr	r0, [r7, #12]
 801154c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011554:	f003 0304 	and.w	r3, r3, #4
 8011558:	2b00      	cmp	r3, #0
 801155a:	d027      	beq.n	80115ac <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	699b      	ldr	r3, [r3, #24]
 8011560:	693a      	ldr	r2, [r7, #16]
 8011562:	4413      	add	r3, r2
 8011564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	429a      	cmp	r2, r3
 801156c:	d90e      	bls.n	801158c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801157a:	4b16      	ldr	r3, [pc, #88]	@ (80115d4 <prvSwitchTimerLists+0xb4>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	3304      	adds	r3, #4
 8011582:	4619      	mov	r1, r3
 8011584:	4610      	mov	r0, r2
 8011586:	f7fe fa26 	bl	800f9d6 <vListInsert>
 801158a:	e00f      	b.n	80115ac <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801158c:	2300      	movs	r3, #0
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	2300      	movs	r3, #0
 8011592:	693a      	ldr	r2, [r7, #16]
 8011594:	2100      	movs	r1, #0
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7ff fd86 	bl	80110a8 <xTimerGenericCommand>
 801159c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d103      	bne.n	80115ac <prvSwitchTimerLists+0x8c>
 80115a4:	f000 fa00 	bl	80119a8 <ulSetInterruptMask>
 80115a8:	bf00      	nop
 80115aa:	e7fd      	b.n	80115a8 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115ac:	4b09      	ldr	r3, [pc, #36]	@ (80115d4 <prvSwitchTimerLists+0xb4>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1b8      	bne.n	8011528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80115b6:	4b07      	ldr	r3, [pc, #28]	@ (80115d4 <prvSwitchTimerLists+0xb4>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80115bc:	4b06      	ldr	r3, [pc, #24]	@ (80115d8 <prvSwitchTimerLists+0xb8>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4a04      	ldr	r2, [pc, #16]	@ (80115d4 <prvSwitchTimerLists+0xb4>)
 80115c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80115c4:	4a04      	ldr	r2, [pc, #16]	@ (80115d8 <prvSwitchTimerLists+0xb8>)
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	6013      	str	r3, [r2, #0]
}
 80115ca:	bf00      	nop
 80115cc:	3718      	adds	r7, #24
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	200013c8 	.word	0x200013c8
 80115d8:	200013cc 	.word	0x200013cc

080115dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80115e2:	f000 f8a5 	bl	8011730 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80115e6:	4b15      	ldr	r3, [pc, #84]	@ (801163c <prvCheckForValidListAndQueue+0x60>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d120      	bne.n	8011630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80115ee:	4814      	ldr	r0, [pc, #80]	@ (8011640 <prvCheckForValidListAndQueue+0x64>)
 80115f0:	f7fe f9a0 	bl	800f934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80115f4:	4813      	ldr	r0, [pc, #76]	@ (8011644 <prvCheckForValidListAndQueue+0x68>)
 80115f6:	f7fe f99d 	bl	800f934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80115fa:	4b13      	ldr	r3, [pc, #76]	@ (8011648 <prvCheckForValidListAndQueue+0x6c>)
 80115fc:	4a10      	ldr	r2, [pc, #64]	@ (8011640 <prvCheckForValidListAndQueue+0x64>)
 80115fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011600:	4b12      	ldr	r3, [pc, #72]	@ (801164c <prvCheckForValidListAndQueue+0x70>)
 8011602:	4a10      	ldr	r2, [pc, #64]	@ (8011644 <prvCheckForValidListAndQueue+0x68>)
 8011604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011606:	2300      	movs	r3, #0
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	4b11      	ldr	r3, [pc, #68]	@ (8011650 <prvCheckForValidListAndQueue+0x74>)
 801160c:	4a11      	ldr	r2, [pc, #68]	@ (8011654 <prvCheckForValidListAndQueue+0x78>)
 801160e:	2110      	movs	r1, #16
 8011610:	200a      	movs	r0, #10
 8011612:	f7fe fa9c 	bl	800fb4e <xQueueGenericCreateStatic>
 8011616:	4603      	mov	r3, r0
 8011618:	4a08      	ldr	r2, [pc, #32]	@ (801163c <prvCheckForValidListAndQueue+0x60>)
 801161a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801161c:	4b07      	ldr	r3, [pc, #28]	@ (801163c <prvCheckForValidListAndQueue+0x60>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d005      	beq.n	8011630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011624:	4b05      	ldr	r3, [pc, #20]	@ (801163c <prvCheckForValidListAndQueue+0x60>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	490b      	ldr	r1, [pc, #44]	@ (8011658 <prvCheckForValidListAndQueue+0x7c>)
 801162a:	4618      	mov	r0, r3
 801162c:	f7fe fe14 	bl	8010258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011630:	f000 f890 	bl	8011754 <vPortExitCritical>
}
 8011634:	bf00      	nop
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	200013d0 	.word	0x200013d0
 8011640:	200013a0 	.word	0x200013a0
 8011644:	200013b4 	.word	0x200013b4
 8011648:	200013c8 	.word	0x200013c8
 801164c:	200013cc 	.word	0x200013cc
 8011650:	2000147c 	.word	0x2000147c
 8011654:	200013dc 	.word	0x200013dc
 8011658:	08012b94 	.word	0x08012b94

0801165c <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801165c:	b480      	push	{r7}
 801165e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011660:	4b0b      	ldr	r3, [pc, #44]	@ (8011690 <vPortSetupTimerInterrupt+0x34>)
 8011662:	2200      	movs	r2, #0
 8011664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011666:	4b0b      	ldr	r3, [pc, #44]	@ (8011694 <vPortSetupTimerInterrupt+0x38>)
 8011668:	2200      	movs	r2, #0
 801166a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801166c:	4b0a      	ldr	r3, [pc, #40]	@ (8011698 <vPortSetupTimerInterrupt+0x3c>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a0a      	ldr	r2, [pc, #40]	@ (801169c <vPortSetupTimerInterrupt+0x40>)
 8011672:	fba2 2303 	umull	r2, r3, r2, r3
 8011676:	099b      	lsrs	r3, r3, #6
 8011678:	4a09      	ldr	r2, [pc, #36]	@ (80116a0 <vPortSetupTimerInterrupt+0x44>)
 801167a:	3b01      	subs	r3, #1
 801167c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801167e:	4b04      	ldr	r3, [pc, #16]	@ (8011690 <vPortSetupTimerInterrupt+0x34>)
 8011680:	2207      	movs	r2, #7
 8011682:	601a      	str	r2, [r3, #0]
}
 8011684:	bf00      	nop
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	e000e010 	.word	0xe000e010
 8011694:	e000e018 	.word	0xe000e018
 8011698:	20000008 	.word	0x20000008
 801169c:	10624dd3 	.word	0x10624dd3
 80116a0:	e000e014 	.word	0xe000e014

080116a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80116aa:	2300      	movs	r3, #0
 80116ac:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 80116ae:	4b0a      	ldr	r3, [pc, #40]	@ (80116d8 <prvTaskExitError+0x34>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116b6:	d003      	beq.n	80116c0 <prvTaskExitError+0x1c>
 80116b8:	f000 f976 	bl	80119a8 <ulSetInterruptMask>
 80116bc:	bf00      	nop
 80116be:	e7fd      	b.n	80116bc <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 80116c0:	f000 f972 	bl	80119a8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 80116c4:	bf00      	nop
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d0fc      	beq.n	80116c6 <prvTaskExitError+0x22>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 80116cc:	bf00      	nop
 80116ce:	bf00      	nop
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	200000a0 	.word	0x200000a0

080116dc <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 80116dc:	b480      	push	{r7}
 80116de:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 80116e0:	4b08      	ldr	r3, [pc, #32]	@ (8011704 <prvSetupFPU+0x28>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	4a07      	ldr	r2, [pc, #28]	@ (8011704 <prvSetupFPU+0x28>)
 80116e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80116ea:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80116ec:	4b06      	ldr	r3, [pc, #24]	@ (8011708 <prvSetupFPU+0x2c>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	4a05      	ldr	r2, [pc, #20]	@ (8011708 <prvSetupFPU+0x2c>)
 80116f2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80116f6:	6013      	str	r3, [r2, #0]
	}
 80116f8:	bf00      	nop
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	e000ed88 	.word	0xe000ed88
 8011708:	e000ef34 	.word	0xe000ef34

0801170c <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801170c:	b480      	push	{r7}
 801170e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011710:	4b06      	ldr	r3, [pc, #24]	@ (801172c <vPortYield+0x20>)
 8011712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011716:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8011718:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801171c:	f3bf 8f6f 	isb	sy
}
 8011720:	bf00      	nop
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	e000ed04 	.word	0xe000ed04

08011730 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8011730:	b580      	push	{r7, lr}
 8011732:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8011734:	f000 f938 	bl	80119a8 <ulSetInterruptMask>
	ulCriticalNesting++;
 8011738:	4b05      	ldr	r3, [pc, #20]	@ (8011750 <vPortEnterCritical+0x20>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	3301      	adds	r3, #1
 801173e:	4a04      	ldr	r2, [pc, #16]	@ (8011750 <vPortEnterCritical+0x20>)
 8011740:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8011742:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011746:	f3bf 8f6f 	isb	sy
}
 801174a:	bf00      	nop
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	200000a0 	.word	0x200000a0

08011754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8011754:	b580      	push	{r7, lr}
 8011756:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8011758:	4b0a      	ldr	r3, [pc, #40]	@ (8011784 <vPortExitCritical+0x30>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d103      	bne.n	8011768 <vPortExitCritical+0x14>
 8011760:	f000 f922 	bl	80119a8 <ulSetInterruptMask>
 8011764:	bf00      	nop
 8011766:	e7fd      	b.n	8011764 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8011768:	4b06      	ldr	r3, [pc, #24]	@ (8011784 <vPortExitCritical+0x30>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3b01      	subs	r3, #1
 801176e:	4a05      	ldr	r2, [pc, #20]	@ (8011784 <vPortExitCritical+0x30>)
 8011770:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8011772:	4b04      	ldr	r3, [pc, #16]	@ (8011784 <vPortExitCritical+0x30>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d102      	bne.n	8011780 <vPortExitCritical+0x2c>
	{
		portENABLE_INTERRUPTS();
 801177a:	2000      	movs	r0, #0
 801177c:	f000 f921 	bl	80119c2 <vClearInterruptMask>
	}
}
 8011780:	bf00      	nop
 8011782:	bd80      	pop	{r7, pc}
 8011784:	200000a0 	.word	0x200000a0

08011788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801178e:	f000 f90b 	bl	80119a8 <ulSetInterruptMask>
 8011792:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011794:	f7ff f888 	bl	80108a8 <xTaskIncrementTick>
 8011798:	4603      	mov	r3, r0
 801179a:	2b00      	cmp	r3, #0
 801179c:	d003      	beq.n	80117a6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801179e:	4b05      	ldr	r3, [pc, #20]	@ (80117b4 <xPortSysTickHandler+0x2c>)
 80117a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f000 f90b 	bl	80119c2 <vClearInterruptMask>
}
 80117ac:	bf00      	nop
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	e000ed04 	.word	0xe000ed04

080117b8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	699b      	ldr	r3, [r3, #24]
 80117c4:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3b02      	subs	r3, #2
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 80117ce:	7afb      	ldrb	r3, [r7, #11]
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	d104      	bne.n	80117de <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 80117d4:	f7ff ff82 	bl	80116dc <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 80117d8:	f000 f8ba 	bl	8011950 <vRestoreContextOfFirstTask>
		}
		break;
 80117dc:	e003      	b.n	80117e6 <vPortSVCHandler_C+0x2e>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 80117de:	f000 f8e3 	bl	80119a8 <ulSetInterruptMask>
 80117e2:	bf00      	nop
 80117e4:	e7fd      	b.n	80117e2 <vPortSVCHandler_C+0x2a>
		}
	}
}
 80117e6:	bf00      	nop
 80117e8:	3710      	adds	r7, #16
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
	...

080117f0 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	3b04      	subs	r3, #4
 8011802:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801180a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	3b04      	subs	r3, #4
 8011810:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	3b04      	subs	r3, #4
 801181c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801181e:	4a38      	ldr	r2, [pc, #224]	@ (8011900 <pxPortInitialiseStack+0x110>)
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	3b04      	subs	r3, #4
 8011828:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8011830:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	3b04      	subs	r3, #4
 8011836:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 801183e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	3b04      	subs	r3, #4
 8011844:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 801184c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	3b04      	subs	r3, #4
 8011852:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 801185a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	3b04      	subs	r3, #4
 8011860:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	3b04      	subs	r3, #4
 801186c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8011874:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	3b04      	subs	r3, #4
 801187a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8011882:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	3b04      	subs	r3, #4
 8011888:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8011890:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3b04      	subs	r3, #4
 8011896:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 801189e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	3b04      	subs	r3, #4
 80118a4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80118ac:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	3b04      	subs	r3, #4
 80118b2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80118ba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	3b04      	subs	r3, #4
 80118c0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80118c8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	3b04      	subs	r3, #4
 80118ce:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80118d6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	3b04      	subs	r3, #4
 80118dc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 80118e4:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	3b04      	subs	r3, #4
 80118ea:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 80118ec:	68ba      	ldr	r2, [r7, #8]
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 80118f2:	68fb      	ldr	r3, [r7, #12]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3714      	adds	r7, #20
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	080116a5 	.word	0x080116a5

08011904 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8011904:	b580      	push	{r7, lr}
 8011906:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011908:	4b0c      	ldr	r3, [pc, #48]	@ (801193c <xPortStartScheduler+0x38>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4a0b      	ldr	r2, [pc, #44]	@ (801193c <xPortStartScheduler+0x38>)
 801190e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011912:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011914:	4b09      	ldr	r3, [pc, #36]	@ (801193c <xPortStartScheduler+0x38>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4a08      	ldr	r2, [pc, #32]	@ (801193c <xPortStartScheduler+0x38>)
 801191a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801191e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8011920:	f7ff fe9c 	bl	801165c <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8011924:	4b06      	ldr	r3, [pc, #24]	@ (8011940 <xPortStartScheduler+0x3c>)
 8011926:	2200      	movs	r2, #0
 8011928:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801192a:	f000 f829 	bl	8011980 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801192e:	f7ff f86d 	bl	8010a0c <vTaskSwitchContext>
	prvTaskExitError();
 8011932:	f7ff feb7 	bl	80116a4 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8011936:	2300      	movs	r3, #0
}
 8011938:	4618      	mov	r0, r3
 801193a:	bd80      	pop	{r7, pc}
 801193c:	e000ed20 	.word	0xe000ed20
 8011940:	200000a0 	.word	0x200000a0
	...

08011950 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8011950:	4a07      	ldr	r2, [pc, #28]	@ (8011970 <pxCurrentTCBConst2>)
 8011952:	6811      	ldr	r1, [r2, #0]
 8011954:	6808      	ldr	r0, [r1, #0]
 8011956:	c806      	ldmia	r0!, {r1, r2}
 8011958:	f381 880b 	msr	PSPLIM, r1
 801195c:	2102      	movs	r1, #2
 801195e:	f381 8814 	msr	CONTROL, r1
 8011962:	3020      	adds	r0, #32
 8011964:	f380 8809 	msr	PSP, r0
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	4710      	bx	r2
 801196e:	bf00      	nop

08011970 <pxCurrentTCBConst2>:
 8011970:	20000ea0 	.word	0x20000ea0
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop
	...

08011980 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8011980:	4807      	ldr	r0, [pc, #28]	@ (80119a0 <xVTORConst>)
 8011982:	6800      	ldr	r0, [r0, #0]
 8011984:	6800      	ldr	r0, [r0, #0]
 8011986:	f380 8808 	msr	MSP, r0
 801198a:	b662      	cpsie	i
 801198c:	b661      	cpsie	f
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	df02      	svc	2
 8011998:	bf00      	nop
 801199a:	bf00      	nop
 801199c:	f3af 8000 	nop.w

080119a0 <xVTORConst>:
 80119a0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 80119a4:	bf00      	nop
 80119a6:	bf00      	nop

080119a8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80119a8:	f3ef 8011 	mrs	r0, BASEPRI
 80119ac:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 80119b0:	f381 8811 	msr	BASEPRI, r1
 80119b4:	f3bf 8f4f 	dsb	sy
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80119be:	bf00      	nop
 80119c0:	4618      	mov	r0, r3

080119c2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80119c2:	f380 8811 	msr	BASEPRI, r0
 80119c6:	f3bf 8f4f 	dsb	sy
 80119ca:	f3bf 8f6f 	isb	sy
 80119ce:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80119d0:	bf00      	nop
	...

080119e0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80119e0:	f3ef 8009 	mrs	r0, PSP
 80119e4:	f01e 0f10 	tst.w	lr, #16
 80119e8:	bf08      	it	eq
 80119ea:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119ee:	f3ef 820b 	mrs	r2, PSPLIM
 80119f2:	4673      	mov	r3, lr
 80119f4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80119f8:	4a11      	ldr	r2, [pc, #68]	@ (8011a40 <pxCurrentTCBConst>)
 80119fa:	6811      	ldr	r1, [r2, #0]
 80119fc:	6008      	str	r0, [r1, #0]
 80119fe:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 8011a02:	f380 8811 	msr	BASEPRI, r0
 8011a06:	f3bf 8f4f 	dsb	sy
 8011a0a:	f3bf 8f6f 	isb	sy
 8011a0e:	f7fe fffd 	bl	8010a0c <vTaskSwitchContext>
 8011a12:	f04f 0000 	mov.w	r0, #0
 8011a16:	f380 8811 	msr	BASEPRI, r0
 8011a1a:	4a09      	ldr	r2, [pc, #36]	@ (8011a40 <pxCurrentTCBConst>)
 8011a1c:	6811      	ldr	r1, [r2, #0]
 8011a1e:	6808      	ldr	r0, [r1, #0]
 8011a20:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8011a24:	f013 0f10 	tst.w	r3, #16
 8011a28:	bf08      	it	eq
 8011a2a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a2e:	f382 880b 	msr	PSPLIM, r2
 8011a32:	f380 8809 	msr	PSP, r0
 8011a36:	4718      	bx	r3
 8011a38:	f3af 8000 	nop.w
 8011a3c:	f3af 8000 	nop.w

08011a40 <pxCurrentTCBConst>:
 8011a40:	20000ea0 	.word	0x20000ea0
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8011a44:	bf00      	nop
 8011a46:	bf00      	nop
	...

08011a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8011a50:	f01e 0f04 	tst.w	lr, #4
 8011a54:	bf0c      	ite	eq
 8011a56:	f3ef 8008 	mrseq	r0, MSP
 8011a5a:	f3ef 8009 	mrsne	r0, PSP
 8011a5e:	4904      	ldr	r1, [pc, #16]	@ (8011a70 <svchandler_address_const>)
 8011a60:	4708      	bx	r1
 8011a62:	bf00      	nop
 8011a64:	f3af 8000 	nop.w
 8011a68:	f3af 8000 	nop.w
 8011a6c:	f3af 8000 	nop.w

08011a70 <svchandler_address_const>:
 8011a70:	080117b9 	.word	0x080117b9
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8011a74:	bf00      	nop
 8011a76:	bf00      	nop

08011a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b086      	sub	sp, #24
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011a80:	2300      	movs	r3, #0
 8011a82:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8011a84:	f7fe fe64 	bl	8010750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a88:	4b50      	ldr	r3, [pc, #320]	@ (8011bcc <pvPortMalloc+0x154>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a90:	f000 f8fc 	bl	8011c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a94:	4b4e      	ldr	r3, [pc, #312]	@ (8011bd0 <pvPortMalloc+0x158>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4013      	ands	r3, r2
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f040 8085 	bne.w	8011bac <pvPortMalloc+0x134>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d016      	beq.n	8011ad6 <pvPortMalloc+0x5e>
			{
				xWantedSize += xHeapStructSize;
 8011aa8:	2208      	movs	r2, #8
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4413      	add	r3, r2
 8011aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f003 0307 	and.w	r3, r3, #7
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d00d      	beq.n	8011ad6 <pvPortMalloc+0x5e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f023 0307 	bic.w	r3, r3, #7
 8011ac0:	3308      	adds	r3, #8
 8011ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f003 0307 	and.w	r3, r3, #7
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d003      	beq.n	8011ad6 <pvPortMalloc+0x5e>
 8011ace:	f7ff ff6b 	bl	80119a8 <ulSetInterruptMask>
 8011ad2:	bf00      	nop
 8011ad4:	e7fd      	b.n	8011ad2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d067      	beq.n	8011bac <pvPortMalloc+0x134>
 8011adc:	4b3d      	ldr	r3, [pc, #244]	@ (8011bd4 <pvPortMalloc+0x15c>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d862      	bhi.n	8011bac <pvPortMalloc+0x134>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8011bd8 <pvPortMalloc+0x160>)
 8011ae8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8011aea:	4b3b      	ldr	r3, [pc, #236]	@ (8011bd8 <pvPortMalloc+0x160>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011af0:	e004      	b.n	8011afc <pvPortMalloc+0x84>
				{
					pxPreviousBlock = pxBlock;
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d903      	bls.n	8011b0e <pvPortMalloc+0x96>
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1f1      	bne.n	8011af2 <pvPortMalloc+0x7a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8011bcc <pvPortMalloc+0x154>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	697a      	ldr	r2, [r7, #20]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d049      	beq.n	8011bac <pvPortMalloc+0x134>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2208      	movs	r2, #8
 8011b1e:	4413      	add	r3, r2
 8011b20:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	685a      	ldr	r2, [r3, #4]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	1ad2      	subs	r2, r2, r3
 8011b32:	2308      	movs	r3, #8
 8011b34:	005b      	lsls	r3, r3, #1
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d918      	bls.n	8011b6c <pvPortMalloc+0xf4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b3a:	697a      	ldr	r2, [r7, #20]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4413      	add	r3, r2
 8011b40:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	f003 0307 	and.w	r3, r3, #7
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <pvPortMalloc+0xdc>
 8011b4c:	f7ff ff2c 	bl	80119a8 <ulSetInterruptMask>
 8011b50:	bf00      	nop
 8011b52:	e7fd      	b.n	8011b50 <pvPortMalloc+0xd8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	685a      	ldr	r2, [r3, #4]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	1ad2      	subs	r2, r2, r3
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b66:	68b8      	ldr	r0, [r7, #8]
 8011b68:	f000 f8f2 	bl	8011d50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b6c:	4b19      	ldr	r3, [pc, #100]	@ (8011bd4 <pvPortMalloc+0x15c>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	4a17      	ldr	r2, [pc, #92]	@ (8011bd4 <pvPortMalloc+0x15c>)
 8011b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b7a:	4b16      	ldr	r3, [pc, #88]	@ (8011bd4 <pvPortMalloc+0x15c>)
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	4b17      	ldr	r3, [pc, #92]	@ (8011bdc <pvPortMalloc+0x164>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d203      	bcs.n	8011b8e <pvPortMalloc+0x116>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011b86:	4b13      	ldr	r3, [pc, #76]	@ (8011bd4 <pvPortMalloc+0x15c>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4a14      	ldr	r2, [pc, #80]	@ (8011bdc <pvPortMalloc+0x164>)
 8011b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	685a      	ldr	r2, [r3, #4]
 8011b92:	4b0f      	ldr	r3, [pc, #60]	@ (8011bd0 <pvPortMalloc+0x158>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	431a      	orrs	r2, r3
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8011be0 <pvPortMalloc+0x168>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8011be0 <pvPortMalloc+0x168>)
 8011baa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011bac:	f7fe fdde 	bl	801076c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f003 0307 	and.w	r3, r3, #7
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d003      	beq.n	8011bc2 <pvPortMalloc+0x14a>
 8011bba:	f7ff fef5 	bl	80119a8 <ulSetInterruptMask>
 8011bbe:	bf00      	nop
 8011bc0:	e7fd      	b.n	8011bbe <pvPortMalloc+0x146>
	return pvReturn;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3718      	adds	r7, #24
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	200034d4 	.word	0x200034d4
 8011bd0:	200034e8 	.word	0x200034e8
 8011bd4:	200034d8 	.word	0x200034d8
 8011bd8:	200034cc 	.word	0x200034cc
 8011bdc:	200034dc 	.word	0x200034dc
 8011be0:	200034e0 	.word	0x200034e0

08011be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d03f      	beq.n	8011c76 <vPortFree+0x92>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	425b      	negs	r3, r3
 8011bfa:	68fa      	ldr	r2, [r7, #12]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	4b1d      	ldr	r3, [pc, #116]	@ (8011c80 <vPortFree+0x9c>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4013      	ands	r3, r2
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d103      	bne.n	8011c1a <vPortFree+0x36>
 8011c12:	f7ff fec9 	bl	80119a8 <ulSetInterruptMask>
 8011c16:	bf00      	nop
 8011c18:	e7fd      	b.n	8011c16 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d003      	beq.n	8011c2a <vPortFree+0x46>
 8011c22:	f7ff fec1 	bl	80119a8 <ulSetInterruptMask>
 8011c26:	bf00      	nop
 8011c28:	e7fd      	b.n	8011c26 <vPortFree+0x42>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	685a      	ldr	r2, [r3, #4]
 8011c2e:	4b14      	ldr	r3, [pc, #80]	@ (8011c80 <vPortFree+0x9c>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4013      	ands	r3, r2
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d01e      	beq.n	8011c76 <vPortFree+0x92>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d11a      	bne.n	8011c76 <vPortFree+0x92>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	685a      	ldr	r2, [r3, #4]
 8011c44:	4b0e      	ldr	r3, [pc, #56]	@ (8011c80 <vPortFree+0x9c>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	43db      	mvns	r3, r3
 8011c4a:	401a      	ands	r2, r3
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c50:	f7fe fd7e 	bl	8010750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	4b0a      	ldr	r3, [pc, #40]	@ (8011c84 <vPortFree+0xa0>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	4a09      	ldr	r2, [pc, #36]	@ (8011c84 <vPortFree+0xa0>)
 8011c60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c62:	68b8      	ldr	r0, [r7, #8]
 8011c64:	f000 f874 	bl	8011d50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011c68:	4b07      	ldr	r3, [pc, #28]	@ (8011c88 <vPortFree+0xa4>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	4a06      	ldr	r2, [pc, #24]	@ (8011c88 <vPortFree+0xa4>)
 8011c70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011c72:	f7fe fd7b 	bl	801076c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c76:	bf00      	nop
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	200034e8 	.word	0x200034e8
 8011c84:	200034d8 	.word	0x200034d8
 8011c88:	200034e4 	.word	0x200034e4

08011c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b085      	sub	sp, #20
 8011c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011c98:	4b27      	ldr	r3, [pc, #156]	@ (8011d38 <prvHeapInit+0xac>)
 8011c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f003 0307 	and.w	r3, r3, #7
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00c      	beq.n	8011cc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	3307      	adds	r3, #7
 8011caa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f023 0307 	bic.w	r3, r3, #7
 8011cb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011cb4:	68ba      	ldr	r2, [r7, #8]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	4a1f      	ldr	r2, [pc, #124]	@ (8011d38 <prvHeapInit+0xac>)
 8011cbc:	4413      	add	r3, r2
 8011cbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8011d3c <prvHeapInit+0xb0>)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011cca:	4b1c      	ldr	r3, [pc, #112]	@ (8011d3c <prvHeapInit+0xb0>)
 8011ccc:	2200      	movs	r2, #0
 8011cce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	68ba      	ldr	r2, [r7, #8]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011cd8:	2208      	movs	r2, #8
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	1a9b      	subs	r3, r3, r2
 8011cde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f023 0307 	bic.w	r3, r3, #7
 8011ce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	4a15      	ldr	r2, [pc, #84]	@ (8011d40 <prvHeapInit+0xb4>)
 8011cec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011cee:	4b14      	ldr	r3, [pc, #80]	@ (8011d40 <prvHeapInit+0xb4>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011cf6:	4b12      	ldr	r3, [pc, #72]	@ (8011d40 <prvHeapInit+0xb4>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	68fa      	ldr	r2, [r7, #12]
 8011d06:	1ad2      	subs	r2, r2, r3
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8011d40 <prvHeapInit+0xb4>)
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	4a0a      	ldr	r2, [pc, #40]	@ (8011d44 <prvHeapInit+0xb8>)
 8011d1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	4a09      	ldr	r2, [pc, #36]	@ (8011d48 <prvHeapInit+0xbc>)
 8011d22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d24:	4b09      	ldr	r3, [pc, #36]	@ (8011d4c <prvHeapInit+0xc0>)
 8011d26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011d2a:	601a      	str	r2, [r3, #0]
}
 8011d2c:	bf00      	nop
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	200014cc 	.word	0x200014cc
 8011d3c:	200034cc 	.word	0x200034cc
 8011d40:	200034d4 	.word	0x200034d4
 8011d44:	200034dc 	.word	0x200034dc
 8011d48:	200034d8 	.word	0x200034d8
 8011d4c:	200034e8 	.word	0x200034e8

08011d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d50:	b480      	push	{r7}
 8011d52:	b085      	sub	sp, #20
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d58:	4b28      	ldr	r3, [pc, #160]	@ (8011dfc <prvInsertBlockIntoFreeList+0xac>)
 8011d5a:	60fb      	str	r3, [r7, #12]
 8011d5c:	e002      	b.n	8011d64 <prvInsertBlockIntoFreeList+0x14>
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d8f7      	bhi.n	8011d5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	4413      	add	r3, r2
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d108      	bne.n	8011d92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	685a      	ldr	r2, [r3, #4]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	441a      	add	r2, r3
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	68ba      	ldr	r2, [r7, #8]
 8011d9c:	441a      	add	r2, r3
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d118      	bne.n	8011dd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	4b15      	ldr	r3, [pc, #84]	@ (8011e00 <prvInsertBlockIntoFreeList+0xb0>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d00d      	beq.n	8011dce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	685a      	ldr	r2, [r3, #4]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	441a      	add	r2, r3
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	601a      	str	r2, [r3, #0]
 8011dcc:	e008      	b.n	8011de0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011dce:	4b0c      	ldr	r3, [pc, #48]	@ (8011e00 <prvInsertBlockIntoFreeList+0xb0>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	601a      	str	r2, [r3, #0]
 8011dd6:	e003      	b.n	8011de0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d002      	beq.n	8011dee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011dee:	bf00      	nop
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	200034cc 	.word	0x200034cc
 8011e00:	200034d4 	.word	0x200034d4

08011e04 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011e08:	2200      	movs	r2, #0
 8011e0a:	4912      	ldr	r1, [pc, #72]	@ (8011e54 <MX_USB_Device_Init+0x50>)
 8011e0c:	4812      	ldr	r0, [pc, #72]	@ (8011e58 <MX_USB_Device_Init+0x54>)
 8011e0e:	f7fc f993 	bl	800e138 <USBD_Init>
 8011e12:	4603      	mov	r3, r0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d001      	beq.n	8011e1c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011e18:	f7f0 fe80 	bl	8002b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011e1c:	490f      	ldr	r1, [pc, #60]	@ (8011e5c <MX_USB_Device_Init+0x58>)
 8011e1e:	480e      	ldr	r0, [pc, #56]	@ (8011e58 <MX_USB_Device_Init+0x54>)
 8011e20:	f7fc f9ba 	bl	800e198 <USBD_RegisterClass>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d001      	beq.n	8011e2e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011e2a:	f7f0 fe77 	bl	8002b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011e2e:	490c      	ldr	r1, [pc, #48]	@ (8011e60 <MX_USB_Device_Init+0x5c>)
 8011e30:	4809      	ldr	r0, [pc, #36]	@ (8011e58 <MX_USB_Device_Init+0x54>)
 8011e32:	f7fc f8f1 	bl	800e018 <USBD_CDC_RegisterInterface>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011e3c:	f7f0 fe6e 	bl	8002b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011e40:	4805      	ldr	r0, [pc, #20]	@ (8011e58 <MX_USB_Device_Init+0x54>)
 8011e42:	f7fc f9df 	bl	800e204 <USBD_Start>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d001      	beq.n	8011e50 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011e4c:	f7f0 fe66 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011e50:	bf00      	nop
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	200000b8 	.word	0x200000b8
 8011e58:	200034ec 	.word	0x200034ec
 8011e5c:	20000020 	.word	0x20000020
 8011e60:	200000a4 	.word	0x200000a4

08011e64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011e68:	2200      	movs	r2, #0
 8011e6a:	4905      	ldr	r1, [pc, #20]	@ (8011e80 <CDC_Init_FS+0x1c>)
 8011e6c:	4805      	ldr	r0, [pc, #20]	@ (8011e84 <CDC_Init_FS+0x20>)
 8011e6e:	f7fc f8ed 	bl	800e04c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011e72:	4905      	ldr	r1, [pc, #20]	@ (8011e88 <CDC_Init_FS+0x24>)
 8011e74:	4803      	ldr	r0, [pc, #12]	@ (8011e84 <CDC_Init_FS+0x20>)
 8011e76:	f7fc f90b 	bl	800e090 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011e7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	20003fc8 	.word	0x20003fc8
 8011e84:	200034ec 	.word	0x200034ec
 8011e88:	200037c8 	.word	0x200037c8

08011e8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011e90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	6039      	str	r1, [r7, #0]
 8011ea6:	71fb      	strb	r3, [r7, #7]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011eac:	79fb      	ldrb	r3, [r7, #7]
 8011eae:	2b23      	cmp	r3, #35	@ 0x23
 8011eb0:	d84a      	bhi.n	8011f48 <CDC_Control_FS+0xac>
 8011eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb8 <CDC_Control_FS+0x1c>)
 8011eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb8:	08011f49 	.word	0x08011f49
 8011ebc:	08011f49 	.word	0x08011f49
 8011ec0:	08011f49 	.word	0x08011f49
 8011ec4:	08011f49 	.word	0x08011f49
 8011ec8:	08011f49 	.word	0x08011f49
 8011ecc:	08011f49 	.word	0x08011f49
 8011ed0:	08011f49 	.word	0x08011f49
 8011ed4:	08011f49 	.word	0x08011f49
 8011ed8:	08011f49 	.word	0x08011f49
 8011edc:	08011f49 	.word	0x08011f49
 8011ee0:	08011f49 	.word	0x08011f49
 8011ee4:	08011f49 	.word	0x08011f49
 8011ee8:	08011f49 	.word	0x08011f49
 8011eec:	08011f49 	.word	0x08011f49
 8011ef0:	08011f49 	.word	0x08011f49
 8011ef4:	08011f49 	.word	0x08011f49
 8011ef8:	08011f49 	.word	0x08011f49
 8011efc:	08011f49 	.word	0x08011f49
 8011f00:	08011f49 	.word	0x08011f49
 8011f04:	08011f49 	.word	0x08011f49
 8011f08:	08011f49 	.word	0x08011f49
 8011f0c:	08011f49 	.word	0x08011f49
 8011f10:	08011f49 	.word	0x08011f49
 8011f14:	08011f49 	.word	0x08011f49
 8011f18:	08011f49 	.word	0x08011f49
 8011f1c:	08011f49 	.word	0x08011f49
 8011f20:	08011f49 	.word	0x08011f49
 8011f24:	08011f49 	.word	0x08011f49
 8011f28:	08011f49 	.word	0x08011f49
 8011f2c:	08011f49 	.word	0x08011f49
 8011f30:	08011f49 	.word	0x08011f49
 8011f34:	08011f49 	.word	0x08011f49
 8011f38:	08011f49 	.word	0x08011f49
 8011f3c:	08011f49 	.word	0x08011f49
 8011f40:	08011f49 	.word	0x08011f49
 8011f44:	08011f49 	.word	0x08011f49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011f48:	bf00      	nop
  }

  return (USBD_OK);
 8011f4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	370c      	adds	r7, #12
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr

08011f58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011f62:	6879      	ldr	r1, [r7, #4]
 8011f64:	4805      	ldr	r0, [pc, #20]	@ (8011f7c <CDC_Receive_FS+0x24>)
 8011f66:	f7fc f893 	bl	800e090 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011f6a:	4804      	ldr	r0, [pc, #16]	@ (8011f7c <CDC_Receive_FS+0x24>)
 8011f6c:	f7fc f8ae 	bl	800e0cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011f70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3708      	adds	r7, #8
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	200034ec 	.word	0x200034ec

08011f80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b087      	sub	sp, #28
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	371c      	adds	r7, #28
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
	...

08011fa4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	4603      	mov	r3, r0
 8011fac:	6039      	str	r1, [r7, #0]
 8011fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	2212      	movs	r2, #18
 8011fb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011fb6:	4b03      	ldr	r3, [pc, #12]	@ (8011fc4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	200000d8 	.word	0x200000d8

08011fc8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	6039      	str	r1, [r7, #0]
 8011fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	2204      	movs	r2, #4
 8011fd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011fda:	4b03      	ldr	r3, [pc, #12]	@ (8011fe8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr
 8011fe8:	200000ec 	.word	0x200000ec

08011fec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	6039      	str	r1, [r7, #0]
 8011ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ff8:	79fb      	ldrb	r3, [r7, #7]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d105      	bne.n	801200a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011ffe:	683a      	ldr	r2, [r7, #0]
 8012000:	4907      	ldr	r1, [pc, #28]	@ (8012020 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012002:	4808      	ldr	r0, [pc, #32]	@ (8012024 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012004:	f7fd fa46 	bl	800f494 <USBD_GetString>
 8012008:	e004      	b.n	8012014 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801200a:	683a      	ldr	r2, [r7, #0]
 801200c:	4904      	ldr	r1, [pc, #16]	@ (8012020 <USBD_CDC_ProductStrDescriptor+0x34>)
 801200e:	4805      	ldr	r0, [pc, #20]	@ (8012024 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012010:	f7fd fa40 	bl	800f494 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012014:	4b02      	ldr	r3, [pc, #8]	@ (8012020 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012016:	4618      	mov	r0, r3
 8012018:	3708      	adds	r7, #8
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	200047c8 	.word	0x200047c8
 8012024:	08012b9c 	.word	0x08012b9c

08012028 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	4603      	mov	r3, r0
 8012030:	6039      	str	r1, [r7, #0]
 8012032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012034:	683a      	ldr	r2, [r7, #0]
 8012036:	4904      	ldr	r1, [pc, #16]	@ (8012048 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012038:	4804      	ldr	r0, [pc, #16]	@ (801204c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801203a:	f7fd fa2b 	bl	800f494 <USBD_GetString>
  return USBD_StrDesc;
 801203e:	4b02      	ldr	r3, [pc, #8]	@ (8012048 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012040:	4618      	mov	r0, r3
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	200047c8 	.word	0x200047c8
 801204c:	08012bb4 	.word	0x08012bb4

08012050 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	4603      	mov	r3, r0
 8012058:	6039      	str	r1, [r7, #0]
 801205a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	221a      	movs	r2, #26
 8012060:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012062:	f000 f843 	bl	80120ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012066:	4b02      	ldr	r3, [pc, #8]	@ (8012070 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	200000f0 	.word	0x200000f0

08012074 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	4603      	mov	r3, r0
 801207c:	6039      	str	r1, [r7, #0]
 801207e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012080:	79fb      	ldrb	r3, [r7, #7]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d105      	bne.n	8012092 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012086:	683a      	ldr	r2, [r7, #0]
 8012088:	4907      	ldr	r1, [pc, #28]	@ (80120a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801208a:	4808      	ldr	r0, [pc, #32]	@ (80120ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 801208c:	f7fd fa02 	bl	800f494 <USBD_GetString>
 8012090:	e004      	b.n	801209c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	4904      	ldr	r1, [pc, #16]	@ (80120a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012096:	4805      	ldr	r0, [pc, #20]	@ (80120ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012098:	f7fd f9fc 	bl	800f494 <USBD_GetString>
  }
  return USBD_StrDesc;
 801209c:	4b02      	ldr	r3, [pc, #8]	@ (80120a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	200047c8 	.word	0x200047c8
 80120ac:	08012bc8 	.word	0x08012bc8

080120b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	4603      	mov	r3, r0
 80120b8:	6039      	str	r1, [r7, #0]
 80120ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80120bc:	79fb      	ldrb	r3, [r7, #7]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d105      	bne.n	80120ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80120c2:	683a      	ldr	r2, [r7, #0]
 80120c4:	4907      	ldr	r1, [pc, #28]	@ (80120e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80120c6:	4808      	ldr	r0, [pc, #32]	@ (80120e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80120c8:	f7fd f9e4 	bl	800f494 <USBD_GetString>
 80120cc:	e004      	b.n	80120d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80120ce:	683a      	ldr	r2, [r7, #0]
 80120d0:	4904      	ldr	r1, [pc, #16]	@ (80120e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80120d2:	4805      	ldr	r0, [pc, #20]	@ (80120e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80120d4:	f7fd f9de 	bl	800f494 <USBD_GetString>
  }
  return USBD_StrDesc;
 80120d8:	4b02      	ldr	r3, [pc, #8]	@ (80120e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3708      	adds	r7, #8
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	200047c8 	.word	0x200047c8
 80120e8:	08012bd4 	.word	0x08012bd4

080120ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80120f2:	4b0f      	ldr	r3, [pc, #60]	@ (8012130 <Get_SerialNum+0x44>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80120f8:	4b0e      	ldr	r3, [pc, #56]	@ (8012134 <Get_SerialNum+0x48>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80120fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012138 <Get_SerialNum+0x4c>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012104:	68fa      	ldr	r2, [r7, #12]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4413      	add	r3, r2
 801210a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d009      	beq.n	8012126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012112:	2208      	movs	r2, #8
 8012114:	4909      	ldr	r1, [pc, #36]	@ (801213c <Get_SerialNum+0x50>)
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f000 f814 	bl	8012144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801211c:	2204      	movs	r2, #4
 801211e:	4908      	ldr	r1, [pc, #32]	@ (8012140 <Get_SerialNum+0x54>)
 8012120:	68b8      	ldr	r0, [r7, #8]
 8012122:	f000 f80f 	bl	8012144 <IntToUnicode>
  }
}
 8012126:	bf00      	nop
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	0bfa0590 	.word	0x0bfa0590
 8012134:	0bfa0594 	.word	0x0bfa0594
 8012138:	0bfa0598 	.word	0x0bfa0598
 801213c:	200000f2 	.word	0x200000f2
 8012140:	20000102 	.word	0x20000102

08012144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012144:	b480      	push	{r7}
 8012146:	b087      	sub	sp, #28
 8012148:	af00      	add	r7, sp, #0
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	4613      	mov	r3, r2
 8012150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012156:	2300      	movs	r3, #0
 8012158:	75fb      	strb	r3, [r7, #23]
 801215a:	e027      	b.n	80121ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	0f1b      	lsrs	r3, r3, #28
 8012160:	2b09      	cmp	r3, #9
 8012162:	d80b      	bhi.n	801217c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	0f1b      	lsrs	r3, r3, #28
 8012168:	b2da      	uxtb	r2, r3
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	005b      	lsls	r3, r3, #1
 801216e:	4619      	mov	r1, r3
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	440b      	add	r3, r1
 8012174:	3230      	adds	r2, #48	@ 0x30
 8012176:	b2d2      	uxtb	r2, r2
 8012178:	701a      	strb	r2, [r3, #0]
 801217a:	e00a      	b.n	8012192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	0f1b      	lsrs	r3, r3, #28
 8012180:	b2da      	uxtb	r2, r3
 8012182:	7dfb      	ldrb	r3, [r7, #23]
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	4619      	mov	r1, r3
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	440b      	add	r3, r1
 801218c:	3237      	adds	r2, #55	@ 0x37
 801218e:	b2d2      	uxtb	r2, r2
 8012190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	011b      	lsls	r3, r3, #4
 8012196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012198:	7dfb      	ldrb	r3, [r7, #23]
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	3301      	adds	r3, #1
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	4413      	add	r3, r2
 80121a2:	2200      	movs	r2, #0
 80121a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80121a6:	7dfb      	ldrb	r3, [r7, #23]
 80121a8:	3301      	adds	r3, #1
 80121aa:	75fb      	strb	r3, [r7, #23]
 80121ac:	7dfa      	ldrb	r2, [r7, #23]
 80121ae:	79fb      	ldrb	r3, [r7, #7]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d3d3      	bcc.n	801215c <IntToUnicode+0x18>
  }
}
 80121b4:	bf00      	nop
 80121b6:	bf00      	nop
 80121b8:	371c      	adds	r7, #28
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
	...

080121c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b08a      	sub	sp, #40	@ 0x28
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121cc:	f107 0314 	add.w	r3, r7, #20
 80121d0:	2200      	movs	r2, #0
 80121d2:	601a      	str	r2, [r3, #0]
 80121d4:	605a      	str	r2, [r3, #4]
 80121d6:	609a      	str	r2, [r3, #8]
 80121d8:	60da      	str	r2, [r3, #12]
 80121da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4a1b      	ldr	r2, [pc, #108]	@ (8012250 <HAL_PCD_MspInit+0x8c>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d130      	bne.n	8012248 <HAL_PCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80121e6:	4b1b      	ldr	r3, [pc, #108]	@ (8012254 <HAL_PCD_MspInit+0x90>)
 80121e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121ea:	4a1a      	ldr	r2, [pc, #104]	@ (8012254 <HAL_PCD_MspInit+0x90>)
 80121ec:	f043 0301 	orr.w	r3, r3, #1
 80121f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80121f2:	4b18      	ldr	r3, [pc, #96]	@ (8012254 <HAL_PCD_MspInit+0x90>)
 80121f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121f6:	f003 0301 	and.w	r3, r3, #1
 80121fa:	613b      	str	r3, [r7, #16]
 80121fc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80121fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012204:	2302      	movs	r3, #2
 8012206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012208:	2300      	movs	r3, #0
 801220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801220c:	2300      	movs	r3, #0
 801220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012210:	230a      	movs	r3, #10
 8012212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012214:	f107 0314 	add.w	r3, r7, #20
 8012218:	4619      	mov	r1, r3
 801221a:	480f      	ldr	r0, [pc, #60]	@ (8012258 <HAL_PCD_MspInit+0x94>)
 801221c:	f7f3 fa3c 	bl	8005698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012220:	4b0c      	ldr	r3, [pc, #48]	@ (8012254 <HAL_PCD_MspInit+0x90>)
 8012222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012224:	4a0b      	ldr	r2, [pc, #44]	@ (8012254 <HAL_PCD_MspInit+0x90>)
 8012226:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801222a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 801222c:	4b09      	ldr	r3, [pc, #36]	@ (8012254 <HAL_PCD_MspInit+0x90>)
 801222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012234:	60fb      	str	r3, [r7, #12]
 8012236:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 5, 0);
 8012238:	2200      	movs	r2, #0
 801223a:	2105      	movs	r1, #5
 801223c:	2049      	movs	r0, #73	@ 0x49
 801223e:	f7f2 fd67 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 8012242:	2049      	movs	r0, #73	@ 0x49
 8012244:	f7f2 fd7e 	bl	8004d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012248:	bf00      	nop
 801224a:	3728      	adds	r7, #40	@ 0x28
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}
 8012250:	4000d400 	.word	0x4000d400
 8012254:	40021000 	.word	0x40021000
 8012258:	42020000 	.word	0x42020000

0801225c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012270:	4619      	mov	r1, r3
 8012272:	4610      	mov	r0, r2
 8012274:	f7fc f813 	bl	800e29e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012278:	bf00      	nop
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012292:	78fa      	ldrb	r2, [r7, #3]
 8012294:	6879      	ldr	r1, [r7, #4]
 8012296:	4613      	mov	r3, r2
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	4413      	add	r3, r2
 801229c:	00db      	lsls	r3, r3, #3
 801229e:	440b      	add	r3, r1
 80122a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80122a4:	681a      	ldr	r2, [r3, #0]
 80122a6:	78fb      	ldrb	r3, [r7, #3]
 80122a8:	4619      	mov	r1, r3
 80122aa:	f7fc f84d 	bl	800e348 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80122ae:	bf00      	nop
 80122b0:	3708      	adds	r7, #8
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}

080122b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122b6:	b580      	push	{r7, lr}
 80122b8:	b082      	sub	sp, #8
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
 80122be:	460b      	mov	r3, r1
 80122c0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80122c8:	78fa      	ldrb	r2, [r7, #3]
 80122ca:	6879      	ldr	r1, [r7, #4]
 80122cc:	4613      	mov	r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	4413      	add	r3, r2
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	440b      	add	r3, r1
 80122d6:	3324      	adds	r3, #36	@ 0x24
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	78fb      	ldrb	r3, [r7, #3]
 80122dc:	4619      	mov	r1, r3
 80122de:	f7fc f8e6 	bl	800e4ae <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80122e2:	bf00      	nop
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}

080122ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122ea:	b580      	push	{r7, lr}
 80122ec:	b082      	sub	sp, #8
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fc fa20 	bl	800e73e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80122fe:	bf00      	nop
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b084      	sub	sp, #16
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801230e:	2301      	movs	r3, #1
 8012310:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	795b      	ldrb	r3, [r3, #5]
 8012316:	2b02      	cmp	r3, #2
 8012318:	d001      	beq.n	801231e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801231a:	f7f0 fbff 	bl	8002b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012324:	7bfa      	ldrb	r2, [r7, #15]
 8012326:	4611      	mov	r1, r2
 8012328:	4618      	mov	r0, r3
 801232a:	f7fc f9c4 	bl	800e6b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012334:	4618      	mov	r0, r3
 8012336:	f7fc f96c 	bl	800e612 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801233a:	bf00      	nop
 801233c:	3710      	adds	r7, #16
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
	...

08012344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012352:	4618      	mov	r0, r3
 8012354:	f7fc f9bf 	bl	800e6d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	7a5b      	ldrb	r3, [r3, #9]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d005      	beq.n	801236c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012360:	4b04      	ldr	r3, [pc, #16]	@ (8012374 <HAL_PCD_SuspendCallback+0x30>)
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	4a03      	ldr	r2, [pc, #12]	@ (8012374 <HAL_PCD_SuspendCallback+0x30>)
 8012366:	f043 0306 	orr.w	r3, r3, #6
 801236a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801236c:	bf00      	nop
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	e000ed00 	.word	0xe000ed00

08012378 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	7a5b      	ldrb	r3, [r3, #9]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d007      	beq.n	8012398 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012388:	4b08      	ldr	r3, [pc, #32]	@ (80123ac <HAL_PCD_ResumeCallback+0x34>)
 801238a:	691b      	ldr	r3, [r3, #16]
 801238c:	4a07      	ldr	r2, [pc, #28]	@ (80123ac <HAL_PCD_ResumeCallback+0x34>)
 801238e:	f023 0306 	bic.w	r3, r3, #6
 8012392:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012394:	f000 f9fa 	bl	801278c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fc f9b5 	bl	800e70e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80123a4:	bf00      	nop
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	e000ed00 	.word	0xe000ed00

080123b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80123b8:	4a2c      	ldr	r2, [pc, #176]	@ (801246c <USBD_LL_Init+0xbc>)
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	4a2a      	ldr	r2, [pc, #168]	@ (801246c <USBD_LL_Init+0xbc>)
 80123c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80123c8:	f7f5 f8f6 	bl	80075b8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80123cc:	4b27      	ldr	r3, [pc, #156]	@ (801246c <USBD_LL_Init+0xbc>)
 80123ce:	4a28      	ldr	r2, [pc, #160]	@ (8012470 <USBD_LL_Init+0xc0>)
 80123d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80123d2:	4b26      	ldr	r3, [pc, #152]	@ (801246c <USBD_LL_Init+0xbc>)
 80123d4:	2208      	movs	r2, #8
 80123d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80123d8:	4b24      	ldr	r3, [pc, #144]	@ (801246c <USBD_LL_Init+0xbc>)
 80123da:	2202      	movs	r2, #2
 80123dc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80123de:	4b23      	ldr	r3, [pc, #140]	@ (801246c <USBD_LL_Init+0xbc>)
 80123e0:	2202      	movs	r2, #2
 80123e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80123e4:	4b21      	ldr	r3, [pc, #132]	@ (801246c <USBD_LL_Init+0xbc>)
 80123e6:	2200      	movs	r2, #0
 80123e8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80123ea:	4b20      	ldr	r3, [pc, #128]	@ (801246c <USBD_LL_Init+0xbc>)
 80123ec:	2200      	movs	r2, #0
 80123ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80123f0:	4b1e      	ldr	r3, [pc, #120]	@ (801246c <USBD_LL_Init+0xbc>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80123f6:	4b1d      	ldr	r3, [pc, #116]	@ (801246c <USBD_LL_Init+0xbc>)
 80123f8:	2200      	movs	r2, #0
 80123fa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80123fc:	481b      	ldr	r0, [pc, #108]	@ (801246c <USBD_LL_Init+0xbc>)
 80123fe:	f7f3 fb2d 	bl	8005a5c <HAL_PCD_Init>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012408:	f7f0 fb88 	bl	8002b1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012412:	2318      	movs	r3, #24
 8012414:	2200      	movs	r2, #0
 8012416:	2100      	movs	r1, #0
 8012418:	f7f4 ffe6 	bl	80073e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012422:	2358      	movs	r3, #88	@ 0x58
 8012424:	2200      	movs	r2, #0
 8012426:	2180      	movs	r1, #128	@ 0x80
 8012428:	f7f4 ffde 	bl	80073e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012432:	23c0      	movs	r3, #192	@ 0xc0
 8012434:	2200      	movs	r2, #0
 8012436:	2181      	movs	r1, #129	@ 0x81
 8012438:	f7f4 ffd6 	bl	80073e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012442:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012446:	2200      	movs	r2, #0
 8012448:	2101      	movs	r1, #1
 801244a:	f7f4 ffcd 	bl	80073e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012458:	2200      	movs	r2, #0
 801245a:	2182      	movs	r1, #130	@ 0x82
 801245c:	f7f4 ffc4 	bl	80073e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012460:	2300      	movs	r3, #0
}
 8012462:	4618      	mov	r0, r3
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	200049c8 	.word	0x200049c8
 8012470:	4000d400 	.word	0x4000d400

08012474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012480:	2300      	movs	r3, #0
 8012482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801248a:	4618      	mov	r0, r3
 801248c:	f7f3 fbb4 	bl	8005bf8 <HAL_PCD_Start>
 8012490:	4603      	mov	r3, r0
 8012492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	4618      	mov	r0, r3
 8012498:	f000 f97e 	bl	8012798 <USBD_Get_USB_Status>
 801249c:	4603      	mov	r3, r0
 801249e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b084      	sub	sp, #16
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	461a      	mov	r2, r3
 80124b8:	4603      	mov	r3, r0
 80124ba:	70fb      	strb	r3, [r7, #3]
 80124bc:	460b      	mov	r3, r1
 80124be:	70bb      	strb	r3, [r7, #2]
 80124c0:	4613      	mov	r3, r2
 80124c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124c4:	2300      	movs	r3, #0
 80124c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124c8:	2300      	movs	r3, #0
 80124ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80124d2:	78bb      	ldrb	r3, [r7, #2]
 80124d4:	883a      	ldrh	r2, [r7, #0]
 80124d6:	78f9      	ldrb	r1, [r7, #3]
 80124d8:	f7f3 fcfb 	bl	8005ed2 <HAL_PCD_EP_Open>
 80124dc:	4603      	mov	r3, r0
 80124de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 f958 	bl	8012798 <USBD_Get_USB_Status>
 80124e8:	4603      	mov	r3, r0
 80124ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b084      	sub	sp, #16
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
 80124fe:	460b      	mov	r3, r1
 8012500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012510:	78fa      	ldrb	r2, [r7, #3]
 8012512:	4611      	mov	r1, r2
 8012514:	4618      	mov	r0, r3
 8012516:	f7f3 fd39 	bl	8005f8c <HAL_PCD_EP_Close>
 801251a:	4603      	mov	r3, r0
 801251c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801251e:	7bfb      	ldrb	r3, [r7, #15]
 8012520:	4618      	mov	r0, r3
 8012522:	f000 f939 	bl	8012798 <USBD_Get_USB_Status>
 8012526:	4603      	mov	r3, r0
 8012528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801252a:	7bbb      	ldrb	r3, [r7, #14]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3710      	adds	r7, #16
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	460b      	mov	r3, r1
 801253e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012540:	2300      	movs	r3, #0
 8012542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012544:	2300      	movs	r3, #0
 8012546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801254e:	78fa      	ldrb	r2, [r7, #3]
 8012550:	4611      	mov	r1, r2
 8012552:	4618      	mov	r0, r3
 8012554:	f7f3 fde2 	bl	800611c <HAL_PCD_EP_SetStall>
 8012558:	4603      	mov	r3, r0
 801255a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	4618      	mov	r0, r3
 8012560:	f000 f91a 	bl	8012798 <USBD_Get_USB_Status>
 8012564:	4603      	mov	r3, r0
 8012566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012568:	7bbb      	ldrb	r3, [r7, #14]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	460b      	mov	r3, r1
 801257c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801257e:	2300      	movs	r3, #0
 8012580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012582:	2300      	movs	r3, #0
 8012584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801258c:	78fa      	ldrb	r2, [r7, #3]
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f7f3 fe15 	bl	80061c0 <HAL_PCD_EP_ClrStall>
 8012596:	4603      	mov	r3, r0
 8012598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	4618      	mov	r0, r3
 801259e:	f000 f8fb 	bl	8012798 <USBD_Get_USB_Status>
 80125a2:	4603      	mov	r3, r0
 80125a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	460b      	mov	r3, r1
 80125ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80125c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80125c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	da0b      	bge.n	80125e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80125cc:	78fb      	ldrb	r3, [r7, #3]
 80125ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80125d2:	68f9      	ldr	r1, [r7, #12]
 80125d4:	4613      	mov	r3, r2
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	4413      	add	r3, r2
 80125da:	00db      	lsls	r3, r3, #3
 80125dc:	440b      	add	r3, r1
 80125de:	3312      	adds	r3, #18
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	e00b      	b.n	80125fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80125e4:	78fb      	ldrb	r3, [r7, #3]
 80125e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80125ea:	68f9      	ldr	r1, [r7, #12]
 80125ec:	4613      	mov	r3, r2
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	4413      	add	r3, r2
 80125f2:	00db      	lsls	r3, r3, #3
 80125f4:	440b      	add	r3, r1
 80125f6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80125fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3714      	adds	r7, #20
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr

08012608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	460b      	mov	r3, r1
 8012612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012614:	2300      	movs	r3, #0
 8012616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012618:	2300      	movs	r3, #0
 801261a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012622:	78fa      	ldrb	r2, [r7, #3]
 8012624:	4611      	mov	r1, r2
 8012626:	4618      	mov	r0, r3
 8012628:	f7f3 fc2f 	bl	8005e8a <HAL_PCD_SetAddress>
 801262c:	4603      	mov	r3, r0
 801262e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012630:	7bfb      	ldrb	r3, [r7, #15]
 8012632:	4618      	mov	r0, r3
 8012634:	f000 f8b0 	bl	8012798 <USBD_Get_USB_Status>
 8012638:	4603      	mov	r3, r0
 801263a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801263c:	7bbb      	ldrb	r3, [r7, #14]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012646:	b580      	push	{r7, lr}
 8012648:	b086      	sub	sp, #24
 801264a:	af00      	add	r7, sp, #0
 801264c:	60f8      	str	r0, [r7, #12]
 801264e:	607a      	str	r2, [r7, #4]
 8012650:	603b      	str	r3, [r7, #0]
 8012652:	460b      	mov	r3, r1
 8012654:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012656:	2300      	movs	r3, #0
 8012658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012664:	7af9      	ldrb	r1, [r7, #11]
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	f7f3 fd20 	bl	80060ae <HAL_PCD_EP_Transmit>
 801266e:	4603      	mov	r3, r0
 8012670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012672:	7dfb      	ldrb	r3, [r7, #23]
 8012674:	4618      	mov	r0, r3
 8012676:	f000 f88f 	bl	8012798 <USBD_Get_USB_Status>
 801267a:	4603      	mov	r3, r0
 801267c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801267e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012680:	4618      	mov	r0, r3
 8012682:	3718      	adds	r7, #24
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b086      	sub	sp, #24
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	607a      	str	r2, [r7, #4]
 8012692:	603b      	str	r3, [r7, #0]
 8012694:	460b      	mov	r3, r1
 8012696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012698:	2300      	movs	r3, #0
 801269a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801269c:	2300      	movs	r3, #0
 801269e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80126a6:	7af9      	ldrb	r1, [r7, #11]
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	f7f3 fcb6 	bl	800601c <HAL_PCD_EP_Receive>
 80126b0:	4603      	mov	r3, r0
 80126b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126b4:	7dfb      	ldrb	r3, [r7, #23]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 f86e 	bl	8012798 <USBD_Get_USB_Status>
 80126bc:	4603      	mov	r3, r0
 80126be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80126c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3718      	adds	r7, #24
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b082      	sub	sp, #8
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80126dc:	78fa      	ldrb	r2, [r7, #3]
 80126de:	4611      	mov	r1, r2
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7f3 fccc 	bl	800607e <HAL_PCD_EP_GetRxCount>
 80126e6:	4603      	mov	r3, r0
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	460b      	mov	r3, r1
 80126fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80126fc:	78fb      	ldrb	r3, [r7, #3]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d002      	beq.n	8012708 <HAL_PCDEx_LPM_Callback+0x18>
 8012702:	2b01      	cmp	r3, #1
 8012704:	d013      	beq.n	801272e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8012706:	e023      	b.n	8012750 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	7a5b      	ldrb	r3, [r3, #9]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d007      	beq.n	8012720 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012710:	f000 f83c 	bl	801278c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012714:	4b10      	ldr	r3, [pc, #64]	@ (8012758 <HAL_PCDEx_LPM_Callback+0x68>)
 8012716:	691b      	ldr	r3, [r3, #16]
 8012718:	4a0f      	ldr	r2, [pc, #60]	@ (8012758 <HAL_PCDEx_LPM_Callback+0x68>)
 801271a:	f023 0306 	bic.w	r3, r3, #6
 801271e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012726:	4618      	mov	r0, r3
 8012728:	f7fb fff1 	bl	800e70e <USBD_LL_Resume>
    break;
 801272c:	e010      	b.n	8012750 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012734:	4618      	mov	r0, r3
 8012736:	f7fb ffce 	bl	800e6d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	7a5b      	ldrb	r3, [r3, #9]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d005      	beq.n	801274e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012742:	4b05      	ldr	r3, [pc, #20]	@ (8012758 <HAL_PCDEx_LPM_Callback+0x68>)
 8012744:	691b      	ldr	r3, [r3, #16]
 8012746:	4a04      	ldr	r2, [pc, #16]	@ (8012758 <HAL_PCDEx_LPM_Callback+0x68>)
 8012748:	f043 0306 	orr.w	r3, r3, #6
 801274c:	6113      	str	r3, [r2, #16]
    break;
 801274e:	bf00      	nop
}
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	e000ed00 	.word	0xe000ed00

0801275c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012764:	4b03      	ldr	r3, [pc, #12]	@ (8012774 <USBD_static_malloc+0x18>)
}
 8012766:	4618      	mov	r0, r3
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop
 8012774:	20004ca4 	.word	0x20004ca4

08012778 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012780:	bf00      	nop
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012790:	f7f0 f8cc 	bl	800292c <SystemClock_Config>
}
 8012794:	bf00      	nop
 8012796:	bd80      	pop	{r7, pc}

08012798 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012798:	b480      	push	{r7}
 801279a:	b085      	sub	sp, #20
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127a2:	2300      	movs	r3, #0
 80127a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	2b03      	cmp	r3, #3
 80127aa:	d817      	bhi.n	80127dc <USBD_Get_USB_Status+0x44>
 80127ac:	a201      	add	r2, pc, #4	@ (adr r2, 80127b4 <USBD_Get_USB_Status+0x1c>)
 80127ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127b2:	bf00      	nop
 80127b4:	080127c5 	.word	0x080127c5
 80127b8:	080127cb 	.word	0x080127cb
 80127bc:	080127d1 	.word	0x080127d1
 80127c0:	080127d7 	.word	0x080127d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80127c4:	2300      	movs	r3, #0
 80127c6:	73fb      	strb	r3, [r7, #15]
    break;
 80127c8:	e00b      	b.n	80127e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80127ca:	2303      	movs	r3, #3
 80127cc:	73fb      	strb	r3, [r7, #15]
    break;
 80127ce:	e008      	b.n	80127e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80127d0:	2301      	movs	r3, #1
 80127d2:	73fb      	strb	r3, [r7, #15]
    break;
 80127d4:	e005      	b.n	80127e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80127d6:	2303      	movs	r3, #3
 80127d8:	73fb      	strb	r3, [r7, #15]
    break;
 80127da:	e002      	b.n	80127e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80127dc:	2303      	movs	r3, #3
 80127de:	73fb      	strb	r3, [r7, #15]
    break;
 80127e0:	bf00      	nop
  }
  return usb_status;
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3714      	adds	r7, #20
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr

080127f0 <malloc>:
 80127f0:	4b02      	ldr	r3, [pc, #8]	@ (80127fc <malloc+0xc>)
 80127f2:	4601      	mov	r1, r0
 80127f4:	6818      	ldr	r0, [r3, #0]
 80127f6:	f000 b82d 	b.w	8012854 <_malloc_r>
 80127fa:	bf00      	nop
 80127fc:	2000010c 	.word	0x2000010c

08012800 <free>:
 8012800:	4b02      	ldr	r3, [pc, #8]	@ (801280c <free+0xc>)
 8012802:	4601      	mov	r1, r0
 8012804:	6818      	ldr	r0, [r3, #0]
 8012806:	f000 b961 	b.w	8012acc <_free_r>
 801280a:	bf00      	nop
 801280c:	2000010c 	.word	0x2000010c

08012810 <sbrk_aligned>:
 8012810:	b570      	push	{r4, r5, r6, lr}
 8012812:	4e0f      	ldr	r6, [pc, #60]	@ (8012850 <sbrk_aligned+0x40>)
 8012814:	460c      	mov	r4, r1
 8012816:	4605      	mov	r5, r0
 8012818:	6831      	ldr	r1, [r6, #0]
 801281a:	b911      	cbnz	r1, 8012822 <sbrk_aligned+0x12>
 801281c:	f000 f90c 	bl	8012a38 <_sbrk_r>
 8012820:	6030      	str	r0, [r6, #0]
 8012822:	4621      	mov	r1, r4
 8012824:	4628      	mov	r0, r5
 8012826:	f000 f907 	bl	8012a38 <_sbrk_r>
 801282a:	1c43      	adds	r3, r0, #1
 801282c:	d103      	bne.n	8012836 <sbrk_aligned+0x26>
 801282e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012832:	4620      	mov	r0, r4
 8012834:	bd70      	pop	{r4, r5, r6, pc}
 8012836:	1cc4      	adds	r4, r0, #3
 8012838:	f024 0403 	bic.w	r4, r4, #3
 801283c:	42a0      	cmp	r0, r4
 801283e:	d0f8      	beq.n	8012832 <sbrk_aligned+0x22>
 8012840:	1a21      	subs	r1, r4, r0
 8012842:	4628      	mov	r0, r5
 8012844:	f000 f8f8 	bl	8012a38 <_sbrk_r>
 8012848:	3001      	adds	r0, #1
 801284a:	d1f2      	bne.n	8012832 <sbrk_aligned+0x22>
 801284c:	e7ef      	b.n	801282e <sbrk_aligned+0x1e>
 801284e:	bf00      	nop
 8012850:	20004ec4 	.word	0x20004ec4

08012854 <_malloc_r>:
 8012854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012858:	1ccd      	adds	r5, r1, #3
 801285a:	4606      	mov	r6, r0
 801285c:	f025 0503 	bic.w	r5, r5, #3
 8012860:	3508      	adds	r5, #8
 8012862:	2d0c      	cmp	r5, #12
 8012864:	bf38      	it	cc
 8012866:	250c      	movcc	r5, #12
 8012868:	2d00      	cmp	r5, #0
 801286a:	db01      	blt.n	8012870 <_malloc_r+0x1c>
 801286c:	42a9      	cmp	r1, r5
 801286e:	d904      	bls.n	801287a <_malloc_r+0x26>
 8012870:	230c      	movs	r3, #12
 8012872:	6033      	str	r3, [r6, #0]
 8012874:	2000      	movs	r0, #0
 8012876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801287a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012950 <_malloc_r+0xfc>
 801287e:	f000 f869 	bl	8012954 <__malloc_lock>
 8012882:	f8d8 3000 	ldr.w	r3, [r8]
 8012886:	461c      	mov	r4, r3
 8012888:	bb44      	cbnz	r4, 80128dc <_malloc_r+0x88>
 801288a:	4629      	mov	r1, r5
 801288c:	4630      	mov	r0, r6
 801288e:	f7ff ffbf 	bl	8012810 <sbrk_aligned>
 8012892:	1c43      	adds	r3, r0, #1
 8012894:	4604      	mov	r4, r0
 8012896:	d158      	bne.n	801294a <_malloc_r+0xf6>
 8012898:	f8d8 4000 	ldr.w	r4, [r8]
 801289c:	4627      	mov	r7, r4
 801289e:	2f00      	cmp	r7, #0
 80128a0:	d143      	bne.n	801292a <_malloc_r+0xd6>
 80128a2:	2c00      	cmp	r4, #0
 80128a4:	d04b      	beq.n	801293e <_malloc_r+0xea>
 80128a6:	6823      	ldr	r3, [r4, #0]
 80128a8:	4639      	mov	r1, r7
 80128aa:	4630      	mov	r0, r6
 80128ac:	eb04 0903 	add.w	r9, r4, r3
 80128b0:	f000 f8c2 	bl	8012a38 <_sbrk_r>
 80128b4:	4581      	cmp	r9, r0
 80128b6:	d142      	bne.n	801293e <_malloc_r+0xea>
 80128b8:	6821      	ldr	r1, [r4, #0]
 80128ba:	4630      	mov	r0, r6
 80128bc:	1a6d      	subs	r5, r5, r1
 80128be:	4629      	mov	r1, r5
 80128c0:	f7ff ffa6 	bl	8012810 <sbrk_aligned>
 80128c4:	3001      	adds	r0, #1
 80128c6:	d03a      	beq.n	801293e <_malloc_r+0xea>
 80128c8:	6823      	ldr	r3, [r4, #0]
 80128ca:	442b      	add	r3, r5
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	f8d8 3000 	ldr.w	r3, [r8]
 80128d2:	685a      	ldr	r2, [r3, #4]
 80128d4:	bb62      	cbnz	r2, 8012930 <_malloc_r+0xdc>
 80128d6:	f8c8 7000 	str.w	r7, [r8]
 80128da:	e00f      	b.n	80128fc <_malloc_r+0xa8>
 80128dc:	6822      	ldr	r2, [r4, #0]
 80128de:	1b52      	subs	r2, r2, r5
 80128e0:	d420      	bmi.n	8012924 <_malloc_r+0xd0>
 80128e2:	2a0b      	cmp	r2, #11
 80128e4:	d917      	bls.n	8012916 <_malloc_r+0xc2>
 80128e6:	1961      	adds	r1, r4, r5
 80128e8:	42a3      	cmp	r3, r4
 80128ea:	6025      	str	r5, [r4, #0]
 80128ec:	bf18      	it	ne
 80128ee:	6059      	strne	r1, [r3, #4]
 80128f0:	6863      	ldr	r3, [r4, #4]
 80128f2:	bf08      	it	eq
 80128f4:	f8c8 1000 	streq.w	r1, [r8]
 80128f8:	5162      	str	r2, [r4, r5]
 80128fa:	604b      	str	r3, [r1, #4]
 80128fc:	4630      	mov	r0, r6
 80128fe:	f000 f82f 	bl	8012960 <__malloc_unlock>
 8012902:	f104 000b 	add.w	r0, r4, #11
 8012906:	1d23      	adds	r3, r4, #4
 8012908:	f020 0007 	bic.w	r0, r0, #7
 801290c:	1ac2      	subs	r2, r0, r3
 801290e:	bf1c      	itt	ne
 8012910:	1a1b      	subne	r3, r3, r0
 8012912:	50a3      	strne	r3, [r4, r2]
 8012914:	e7af      	b.n	8012876 <_malloc_r+0x22>
 8012916:	6862      	ldr	r2, [r4, #4]
 8012918:	42a3      	cmp	r3, r4
 801291a:	bf0c      	ite	eq
 801291c:	f8c8 2000 	streq.w	r2, [r8]
 8012920:	605a      	strne	r2, [r3, #4]
 8012922:	e7eb      	b.n	80128fc <_malloc_r+0xa8>
 8012924:	4623      	mov	r3, r4
 8012926:	6864      	ldr	r4, [r4, #4]
 8012928:	e7ae      	b.n	8012888 <_malloc_r+0x34>
 801292a:	463c      	mov	r4, r7
 801292c:	687f      	ldr	r7, [r7, #4]
 801292e:	e7b6      	b.n	801289e <_malloc_r+0x4a>
 8012930:	461a      	mov	r2, r3
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	42a3      	cmp	r3, r4
 8012936:	d1fb      	bne.n	8012930 <_malloc_r+0xdc>
 8012938:	2300      	movs	r3, #0
 801293a:	6053      	str	r3, [r2, #4]
 801293c:	e7de      	b.n	80128fc <_malloc_r+0xa8>
 801293e:	230c      	movs	r3, #12
 8012940:	4630      	mov	r0, r6
 8012942:	6033      	str	r3, [r6, #0]
 8012944:	f000 f80c 	bl	8012960 <__malloc_unlock>
 8012948:	e794      	b.n	8012874 <_malloc_r+0x20>
 801294a:	6005      	str	r5, [r0, #0]
 801294c:	e7d6      	b.n	80128fc <_malloc_r+0xa8>
 801294e:	bf00      	nop
 8012950:	20004ec8 	.word	0x20004ec8

08012954 <__malloc_lock>:
 8012954:	4801      	ldr	r0, [pc, #4]	@ (801295c <__malloc_lock+0x8>)
 8012956:	f000 b8a9 	b.w	8012aac <__retarget_lock_acquire_recursive>
 801295a:	bf00      	nop
 801295c:	20005008 	.word	0x20005008

08012960 <__malloc_unlock>:
 8012960:	4801      	ldr	r0, [pc, #4]	@ (8012968 <__malloc_unlock+0x8>)
 8012962:	f000 b8a4 	b.w	8012aae <__retarget_lock_release_recursive>
 8012966:	bf00      	nop
 8012968:	20005008 	.word	0x20005008

0801296c <memset>:
 801296c:	4402      	add	r2, r0
 801296e:	4603      	mov	r3, r0
 8012970:	4293      	cmp	r3, r2
 8012972:	d100      	bne.n	8012976 <memset+0xa>
 8012974:	4770      	bx	lr
 8012976:	f803 1b01 	strb.w	r1, [r3], #1
 801297a:	e7f9      	b.n	8012970 <memset+0x4>

0801297c <_reclaim_reent>:
 801297c:	4b2d      	ldr	r3, [pc, #180]	@ (8012a34 <_reclaim_reent+0xb8>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4283      	cmp	r3, r0
 8012982:	b570      	push	{r4, r5, r6, lr}
 8012984:	4604      	mov	r4, r0
 8012986:	d053      	beq.n	8012a30 <_reclaim_reent+0xb4>
 8012988:	69c3      	ldr	r3, [r0, #28]
 801298a:	b31b      	cbz	r3, 80129d4 <_reclaim_reent+0x58>
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	b163      	cbz	r3, 80129aa <_reclaim_reent+0x2e>
 8012990:	2500      	movs	r5, #0
 8012992:	69e3      	ldr	r3, [r4, #28]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	5959      	ldr	r1, [r3, r5]
 8012998:	b9b1      	cbnz	r1, 80129c8 <_reclaim_reent+0x4c>
 801299a:	3504      	adds	r5, #4
 801299c:	2d80      	cmp	r5, #128	@ 0x80
 801299e:	d1f8      	bne.n	8012992 <_reclaim_reent+0x16>
 80129a0:	69e3      	ldr	r3, [r4, #28]
 80129a2:	4620      	mov	r0, r4
 80129a4:	68d9      	ldr	r1, [r3, #12]
 80129a6:	f000 f891 	bl	8012acc <_free_r>
 80129aa:	69e3      	ldr	r3, [r4, #28]
 80129ac:	6819      	ldr	r1, [r3, #0]
 80129ae:	b111      	cbz	r1, 80129b6 <_reclaim_reent+0x3a>
 80129b0:	4620      	mov	r0, r4
 80129b2:	f000 f88b 	bl	8012acc <_free_r>
 80129b6:	69e3      	ldr	r3, [r4, #28]
 80129b8:	689d      	ldr	r5, [r3, #8]
 80129ba:	b15d      	cbz	r5, 80129d4 <_reclaim_reent+0x58>
 80129bc:	4629      	mov	r1, r5
 80129be:	4620      	mov	r0, r4
 80129c0:	682d      	ldr	r5, [r5, #0]
 80129c2:	f000 f883 	bl	8012acc <_free_r>
 80129c6:	e7f8      	b.n	80129ba <_reclaim_reent+0x3e>
 80129c8:	680e      	ldr	r6, [r1, #0]
 80129ca:	4620      	mov	r0, r4
 80129cc:	f000 f87e 	bl	8012acc <_free_r>
 80129d0:	4631      	mov	r1, r6
 80129d2:	e7e1      	b.n	8012998 <_reclaim_reent+0x1c>
 80129d4:	6961      	ldr	r1, [r4, #20]
 80129d6:	b111      	cbz	r1, 80129de <_reclaim_reent+0x62>
 80129d8:	4620      	mov	r0, r4
 80129da:	f000 f877 	bl	8012acc <_free_r>
 80129de:	69e1      	ldr	r1, [r4, #28]
 80129e0:	b111      	cbz	r1, 80129e8 <_reclaim_reent+0x6c>
 80129e2:	4620      	mov	r0, r4
 80129e4:	f000 f872 	bl	8012acc <_free_r>
 80129e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80129ea:	b111      	cbz	r1, 80129f2 <_reclaim_reent+0x76>
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 f86d 	bl	8012acc <_free_r>
 80129f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129f4:	b111      	cbz	r1, 80129fc <_reclaim_reent+0x80>
 80129f6:	4620      	mov	r0, r4
 80129f8:	f000 f868 	bl	8012acc <_free_r>
 80129fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80129fe:	b111      	cbz	r1, 8012a06 <_reclaim_reent+0x8a>
 8012a00:	4620      	mov	r0, r4
 8012a02:	f000 f863 	bl	8012acc <_free_r>
 8012a06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012a08:	b111      	cbz	r1, 8012a10 <_reclaim_reent+0x94>
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f000 f85e 	bl	8012acc <_free_r>
 8012a10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012a12:	b111      	cbz	r1, 8012a1a <_reclaim_reent+0x9e>
 8012a14:	4620      	mov	r0, r4
 8012a16:	f000 f859 	bl	8012acc <_free_r>
 8012a1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012a1c:	b111      	cbz	r1, 8012a24 <_reclaim_reent+0xa8>
 8012a1e:	4620      	mov	r0, r4
 8012a20:	f000 f854 	bl	8012acc <_free_r>
 8012a24:	6a23      	ldr	r3, [r4, #32]
 8012a26:	b11b      	cbz	r3, 8012a30 <_reclaim_reent+0xb4>
 8012a28:	4620      	mov	r0, r4
 8012a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a2e:	4718      	bx	r3
 8012a30:	bd70      	pop	{r4, r5, r6, pc}
 8012a32:	bf00      	nop
 8012a34:	2000010c 	.word	0x2000010c

08012a38 <_sbrk_r>:
 8012a38:	b538      	push	{r3, r4, r5, lr}
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	4d05      	ldr	r5, [pc, #20]	@ (8012a54 <_sbrk_r+0x1c>)
 8012a3e:	4604      	mov	r4, r0
 8012a40:	4608      	mov	r0, r1
 8012a42:	602b      	str	r3, [r5, #0]
 8012a44:	f7f0 facc 	bl	8002fe0 <_sbrk>
 8012a48:	1c43      	adds	r3, r0, #1
 8012a4a:	d102      	bne.n	8012a52 <_sbrk_r+0x1a>
 8012a4c:	682b      	ldr	r3, [r5, #0]
 8012a4e:	b103      	cbz	r3, 8012a52 <_sbrk_r+0x1a>
 8012a50:	6023      	str	r3, [r4, #0]
 8012a52:	bd38      	pop	{r3, r4, r5, pc}
 8012a54:	20005004 	.word	0x20005004

08012a58 <__errno>:
 8012a58:	4b01      	ldr	r3, [pc, #4]	@ (8012a60 <__errno+0x8>)
 8012a5a:	6818      	ldr	r0, [r3, #0]
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	2000010c 	.word	0x2000010c

08012a64 <__libc_init_array>:
 8012a64:	b570      	push	{r4, r5, r6, lr}
 8012a66:	4d0d      	ldr	r5, [pc, #52]	@ (8012a9c <__libc_init_array+0x38>)
 8012a68:	2600      	movs	r6, #0
 8012a6a:	4c0d      	ldr	r4, [pc, #52]	@ (8012aa0 <__libc_init_array+0x3c>)
 8012a6c:	1b64      	subs	r4, r4, r5
 8012a6e:	10a4      	asrs	r4, r4, #2
 8012a70:	42a6      	cmp	r6, r4
 8012a72:	d109      	bne.n	8012a88 <__libc_init_array+0x24>
 8012a74:	4d0b      	ldr	r5, [pc, #44]	@ (8012aa4 <__libc_init_array+0x40>)
 8012a76:	2600      	movs	r6, #0
 8012a78:	4c0b      	ldr	r4, [pc, #44]	@ (8012aa8 <__libc_init_array+0x44>)
 8012a7a:	f000 f871 	bl	8012b60 <_init>
 8012a7e:	1b64      	subs	r4, r4, r5
 8012a80:	10a4      	asrs	r4, r4, #2
 8012a82:	42a6      	cmp	r6, r4
 8012a84:	d105      	bne.n	8012a92 <__libc_init_array+0x2e>
 8012a86:	bd70      	pop	{r4, r5, r6, pc}
 8012a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a8c:	3601      	adds	r6, #1
 8012a8e:	4798      	blx	r3
 8012a90:	e7ee      	b.n	8012a70 <__libc_init_array+0xc>
 8012a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a96:	3601      	adds	r6, #1
 8012a98:	4798      	blx	r3
 8012a9a:	e7f2      	b.n	8012a82 <__libc_init_array+0x1e>
 8012a9c:	08012e60 	.word	0x08012e60
 8012aa0:	08012e60 	.word	0x08012e60
 8012aa4:	08012e60 	.word	0x08012e60
 8012aa8:	08012e64 	.word	0x08012e64

08012aac <__retarget_lock_acquire_recursive>:
 8012aac:	4770      	bx	lr

08012aae <__retarget_lock_release_recursive>:
 8012aae:	4770      	bx	lr

08012ab0 <memcpy>:
 8012ab0:	440a      	add	r2, r1
 8012ab2:	1e43      	subs	r3, r0, #1
 8012ab4:	4291      	cmp	r1, r2
 8012ab6:	d100      	bne.n	8012aba <memcpy+0xa>
 8012ab8:	4770      	bx	lr
 8012aba:	b510      	push	{r4, lr}
 8012abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ac0:	4291      	cmp	r1, r2
 8012ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ac6:	d1f9      	bne.n	8012abc <memcpy+0xc>
 8012ac8:	bd10      	pop	{r4, pc}
	...

08012acc <_free_r>:
 8012acc:	b538      	push	{r3, r4, r5, lr}
 8012ace:	4605      	mov	r5, r0
 8012ad0:	2900      	cmp	r1, #0
 8012ad2:	d041      	beq.n	8012b58 <_free_r+0x8c>
 8012ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ad8:	1f0c      	subs	r4, r1, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	bfb8      	it	lt
 8012ade:	18e4      	addlt	r4, r4, r3
 8012ae0:	f7ff ff38 	bl	8012954 <__malloc_lock>
 8012ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8012b5c <_free_r+0x90>)
 8012ae6:	6813      	ldr	r3, [r2, #0]
 8012ae8:	b933      	cbnz	r3, 8012af8 <_free_r+0x2c>
 8012aea:	6063      	str	r3, [r4, #4]
 8012aec:	6014      	str	r4, [r2, #0]
 8012aee:	4628      	mov	r0, r5
 8012af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012af4:	f7ff bf34 	b.w	8012960 <__malloc_unlock>
 8012af8:	42a3      	cmp	r3, r4
 8012afa:	d908      	bls.n	8012b0e <_free_r+0x42>
 8012afc:	6820      	ldr	r0, [r4, #0]
 8012afe:	1821      	adds	r1, r4, r0
 8012b00:	428b      	cmp	r3, r1
 8012b02:	bf01      	itttt	eq
 8012b04:	6819      	ldreq	r1, [r3, #0]
 8012b06:	685b      	ldreq	r3, [r3, #4]
 8012b08:	1809      	addeq	r1, r1, r0
 8012b0a:	6021      	streq	r1, [r4, #0]
 8012b0c:	e7ed      	b.n	8012aea <_free_r+0x1e>
 8012b0e:	461a      	mov	r2, r3
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	b10b      	cbz	r3, 8012b18 <_free_r+0x4c>
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	d9fa      	bls.n	8012b0e <_free_r+0x42>
 8012b18:	6811      	ldr	r1, [r2, #0]
 8012b1a:	1850      	adds	r0, r2, r1
 8012b1c:	42a0      	cmp	r0, r4
 8012b1e:	d10b      	bne.n	8012b38 <_free_r+0x6c>
 8012b20:	6820      	ldr	r0, [r4, #0]
 8012b22:	4401      	add	r1, r0
 8012b24:	1850      	adds	r0, r2, r1
 8012b26:	6011      	str	r1, [r2, #0]
 8012b28:	4283      	cmp	r3, r0
 8012b2a:	d1e0      	bne.n	8012aee <_free_r+0x22>
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	4408      	add	r0, r1
 8012b32:	6053      	str	r3, [r2, #4]
 8012b34:	6010      	str	r0, [r2, #0]
 8012b36:	e7da      	b.n	8012aee <_free_r+0x22>
 8012b38:	d902      	bls.n	8012b40 <_free_r+0x74>
 8012b3a:	230c      	movs	r3, #12
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	e7d6      	b.n	8012aee <_free_r+0x22>
 8012b40:	6820      	ldr	r0, [r4, #0]
 8012b42:	1821      	adds	r1, r4, r0
 8012b44:	428b      	cmp	r3, r1
 8012b46:	bf02      	ittt	eq
 8012b48:	6819      	ldreq	r1, [r3, #0]
 8012b4a:	685b      	ldreq	r3, [r3, #4]
 8012b4c:	1809      	addeq	r1, r1, r0
 8012b4e:	6063      	str	r3, [r4, #4]
 8012b50:	bf08      	it	eq
 8012b52:	6021      	streq	r1, [r4, #0]
 8012b54:	6054      	str	r4, [r2, #4]
 8012b56:	e7ca      	b.n	8012aee <_free_r+0x22>
 8012b58:	bd38      	pop	{r3, r4, r5, pc}
 8012b5a:	bf00      	nop
 8012b5c:	20004ec8 	.word	0x20004ec8

08012b60 <_init>:
 8012b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b62:	bf00      	nop
 8012b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b66:	bc08      	pop	{r3}
 8012b68:	469e      	mov	lr, r3
 8012b6a:	4770      	bx	lr

08012b6c <_fini>:
 8012b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6e:	bf00      	nop
 8012b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b72:	bc08      	pop	{r3}
 8012b74:	469e      	mov	lr, r3
 8012b76:	4770      	bx	lr
