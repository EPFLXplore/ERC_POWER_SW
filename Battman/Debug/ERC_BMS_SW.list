
ERC_BMS_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd34  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800ff34  0800ff34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010190  08010190  0001207c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08010190  08010190  0001207c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08010190  08010190  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010190  08010190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010194  08010194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010198  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f44  2000007c  08010214  0001207c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  08010214  00012fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030086  00000000  00000000  000120b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000655c  00000000  00000000  00042138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a40  00000000  00000000  00048698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000204d  00000000  00000000  0004b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032026  00000000  00000000  0004d125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002edc5  00000000  00000000  0007f14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013546b  00000000  00000000  000adf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e337b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b830  00000000  00000000  001e33c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001eebf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ff1c 	.word	0x0800ff1c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800ff1c 	.word	0x0800ff1c

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LTC6811_init>:
bool dischargeEnable = false;	//holds if conditions are met to enable discharge
bool system_OK = true;			//holds if the MCU and BMS_ICs are OK, turned off by watchdog, Comm errors or failed BMS Selftests(Green LED)


//Initializes the LTC's registers and the SPI communication, initialize STM SPI before
void LTC6811_init(){
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af06      	add	r7, sp, #24
	LTC6811_init_cfg(TOTAL_IC, bms_ic);	//Initializes the configuration registers to all 0s
 8000bbe:	491b      	ldr	r1, [pc, #108]	@ (8000c2c <LTC6811_init+0x74>)
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fe88 	bl	80018d6 <LTC6811_init_cfg>
	//This for loop initializes the configuration register variables
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e018      	b.n	8000bfe <LTC6811_init+0x46>
		LTC6811_set_cfgr(current_ic,bms_ic,REFON,ADCOPT,gpioBits_a,dccBits_a,dctoBits_a,uv_a,ov_a); // write LTC config like defined above
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <LTC6811_init+0x78>)
 8000bce:	7819      	ldrb	r1, [r3, #0]
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <LTC6811_init+0x7c>)
 8000bd2:	781c      	ldrb	r4, [r3, #0]
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <LTC6811_init+0x80>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	@ (8000c3c <LTC6811_init+0x84>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	79f8      	ldrb	r0, [r7, #7]
 8000bde:	9204      	str	r2, [sp, #16]
 8000be0:	9303      	str	r3, [sp, #12]
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <LTC6811_init+0x88>)
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <LTC6811_init+0x8c>)
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <LTC6811_init+0x90>)
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4623      	mov	r3, r4
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	490e      	ldr	r1, [pc, #56]	@ (8000c2c <LTC6811_init+0x74>)
 8000bf4:	f000 fe7e 	bl	80018f4 <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0e3      	beq.n	8000bcc <LTC6811_init+0x14>
    }
	LTC6811_reset_crc_count(TOTAL_IC,bms_ic);	//sets the CRC count to 0
 8000c04:	4909      	ldr	r1, [pc, #36]	@ (8000c2c <LTC6811_init+0x74>)
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fe56 	bl	80018b8 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, bms_ic);	//Initializes the LTC's register limits for LTC6811 (because the generic LTC681x libraries can also be used for LTC6813 and others)
 8000c0c:	4907      	ldr	r1, [pc, #28]	@ (8000c2c <LTC6811_init+0x74>)
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 fda2 	bl	8001758 <LTC6811_init_reg_limits>
	wakeup_sleep(TOTAL_IC);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 feac 	bl	8001972 <wakeup_sleep>
	LTC6811_wrcfg(TOTAL_IC,bms_ic);	//writes the configuration variables in the configuration registers via SPI
 8000c1a:	4904      	ldr	r1, [pc, #16]	@ (8000c2c <LTC6811_init+0x74>)
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fe3c 	bl	800189a <LTC6811_wrcfg>
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	2000000c 	.word	0x2000000c
 8000c34:	2000000d 	.word	0x2000000d
 8000c38:	20000016 	.word	0x20000016
 8000c3c:	20000018 	.word	0x20000018
 8000c40:	200001d0 	.word	0x200001d0
 8000c44:	200001c4 	.word	0x200001c4
 8000c48:	20000010 	.word	0x20000010
 8000c4c:	00000000 	.word	0x00000000

08000c50 <tempConvert>:
//convert ADC values into temperature
void tempConvert(){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	float innerlog;
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e095      	b.n	8000d88 <tempConvert+0x138>
		for(int sensor = 0; sensor < NbTherm; sensor++){
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	e08b      	b.n	8000d7a <tempConvert+0x12a>
			if(bms_ic[current_ic].aux.a_codes[AUX_CH_VREF2-1] == 0x00){
 8000c62:	4a53      	ldr	r2, [pc, #332]	@ (8000db0 <tempConvert+0x160>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	21e8      	movs	r1, #232	@ 0xe8
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3352      	adds	r3, #82	@ 0x52
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10b      	bne.n	8000c8e <tempConvert+0x3e>
				temperatures[current_ic][sensor] = 7;
 8000c76:	494f      	ldr	r1, [pc, #316]	@ (8000db4 <tempConvert+0x164>)
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	4a4b      	ldr	r2, [pc, #300]	@ (8000db8 <tempConvert+0x168>)
 8000c8a:	601a      	str	r2, [r3, #0]
				continue;
 8000c8c:	e072      	b.n	8000d74 <tempConvert+0x124>
			}
			// 1(1/B * ln(R/Ro) + (1/To))
		  	temperatures[current_ic][sensor] = 1.0 / (log((ThermRs*bms_ic[current_ic].aux.a_codes[sensor] / (bms_ic[current_ic].aux.a_codes[AUX_CH_VREF2-1] - bms_ic[current_ic].aux.a_codes[sensor])) / ThermR25) / ThermB + 1.0 / 298.15) - 273.15;
 8000c8e:	4948      	ldr	r1, [pc, #288]	@ (8000db0 <tempConvert+0x160>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2274      	movs	r2, #116	@ 0x74
 8000c94:	fb03 f202 	mul.w	r2, r3, r2
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3324      	adds	r3, #36	@ 0x24
 8000c9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000caa:	4b44      	ldr	r3, [pc, #272]	@ (8000dbc <tempConvert+0x16c>)
 8000cac:	edd3 7a00 	vldr	s15, [r3]
 8000cb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cb4:	4a3e      	ldr	r2, [pc, #248]	@ (8000db0 <tempConvert+0x160>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	21e8      	movs	r1, #232	@ 0xe8
 8000cba:	fb01 f303 	mul.w	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3352      	adds	r3, #82	@ 0x52
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	493a      	ldr	r1, [pc, #232]	@ (8000db0 <tempConvert+0x160>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2274      	movs	r2, #116	@ 0x74
 8000ccc:	fb03 f202 	mul.w	r2, r3, r2
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	3324      	adds	r3, #36	@ 0x24
 8000cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cda:	1ac3      	subs	r3, r0, r3
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <tempConvert+0x170>)
 8000cea:	edd3 7a00 	vldr	s15, [r3]
 8000cee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000cf2:	ee16 0a90 	vmov	r0, s13
 8000cf6:	f7ff fc07 	bl	8000508 <__aeabi_f2d>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	ec43 2b10 	vmov	d0, r2, r3
 8000d02:	f00e ff11 	bl	800fb28 <log>
 8000d06:	ec55 4b10 	vmov	r4, r5, d0
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <tempConvert+0x174>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fbfa 	bl	8000508 <__aeabi_f2d>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	f7ff fd76 	bl	800080c <__aeabi_ddiv>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	a31d      	add	r3, pc, #116	@ (adr r3, 8000da0 <tempConvert+0x150>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff fa8d 	bl	800024c <__adddf3>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	4923      	ldr	r1, [pc, #140]	@ (8000dc8 <tempConvert+0x178>)
 8000d3c:	f7ff fd66 	bl	800080c <__aeabi_ddiv>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	a317      	add	r3, pc, #92	@ (adr r3, 8000da8 <tempConvert+0x158>)
 8000d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4e:	f7ff fa7b 	bl	8000248 <__aeabi_dsub>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fedd 	bl	8000b18 <__aeabi_d2f>
 8000d5e:	4601      	mov	r1, r0
 8000d60:	4814      	ldr	r0, [pc, #80]	@ (8000db4 <tempConvert+0x164>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4403      	add	r3, r0
 8000d72:	6019      	str	r1, [r3, #0]
		for(int sensor = 0; sensor < NbTherm; sensor++){
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	f77f af70 	ble.w	8000c62 <tempConvert+0x12>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f77f af66 	ble.w	8000c5c <tempConvert+0xc>
		}
	}
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	f3af 8000 	nop.w
 8000da0:	dcb5db83 	.word	0xdcb5db83
 8000da4:	3f6b79e1 	.word	0x3f6b79e1
 8000da8:	66666666 	.word	0x66666666
 8000dac:	40711266 	.word	0x40711266
 8000db0:	20000098 	.word	0x20000098
 8000db4:	200001a8 	.word	0x200001a8
 8000db8:	40e00000 	.word	0x40e00000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	3ff00000 	.word	0x3ff00000
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <readVoltages>:

void readVoltages(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	cvError = LTC6811_rdcv(CELL_CH_ALL, TOTAL_IC, bms_ic); // Reads and parses the LTC6811 cell voltage registers.
 8000dd6:	4a28      	ldr	r2, [pc, #160]	@ (8000e78 <readVoltages+0xa8>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 fd2e 	bl	800183c <LTC6811_rdcv>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <readVoltages+0xac>)
 8000de6:	701a      	strb	r2, [r3, #0]
//		uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
//		                     uint8_t total_ic, // the number of ICs in the system
//		                     cell_asic ic[] // Array of the parsed cell codes
//		                    )
	for(int i=0; i<TOTAL_IC; i++){
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	e035      	b.n	8000e5a <readVoltages+0x8a>
		for(int j=0; j<CellsNbS; j++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	e02c      	b.n	8000e4e <readVoltages+0x7e>
			voltages[i][j] = (float)bms_ic[i].cells.c_codes[j] * 0.0001; //convert the cell voltage codes to voltages
 8000df4:	4920      	ldr	r1, [pc, #128]	@ (8000e78 <readVoltages+0xa8>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2274      	movs	r2, #116	@ 0x74
 8000dfa:	fb03 f202 	mul.w	r2, r3, r2
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	330c      	adds	r3, #12
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	440b      	add	r3, r1
 8000e08:	88db      	ldrh	r3, [r3, #6]
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e12:	ee17 0a90 	vmov	r0, s15
 8000e16:	f7ff fb77 	bl	8000508 <__aeabi_f2d>
 8000e1a:	a315      	add	r3, pc, #84	@ (adr r3, 8000e70 <readVoltages+0xa0>)
 8000e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e20:	f7ff fbca 	bl	80005b8 <__aeabi_dmul>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f7ff fe74 	bl	8000b18 <__aeabi_d2f>
 8000e30:	4601      	mov	r1, r0
 8000e32:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <readVoltages+0xb0>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4403      	add	r3, r0
 8000e46:	6019      	str	r1, [r3, #0]
		for(int j=0; j<CellsNbS; j++){
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	ddcf      	ble.n	8000df4 <readVoltages+0x24>
	for(int i=0; i<TOTAL_IC; i++){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	ddc6      	ble.n	8000dee <readVoltages+0x1e>
		}
	}
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	eb1c432d 	.word	0xeb1c432d
 8000e74:	3f1a36e2 	.word	0x3f1a36e2
 8000e78:	20000098 	.word	0x20000098
 8000e7c:	200001d4 	.word	0x200001d4
 8000e80:	20000180 	.word	0x20000180

08000e84 <readTemperatures>:
void readTemperatures(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	auxError = LTC6811_rdaux(AUX_CH_ALL, TOTAL_IC, bms_ic);
 8000e88:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <readTemperatures+0x1c>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 fcec 	bl	800186a <LTC6811_rdaux>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <readTemperatures+0x20>)
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000098 	.word	0x20000098
 8000ea4:	200001d5 	.word	0x200001d5

08000ea8 <currentConvert>:
//convert ADC values into current sensor skaling 19.8mV/A
void currentConvert(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++){
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e01a      	b.n	8000eea <currentConvert+0x42>
		currents[i] = adcVal[i]*0.0406901041667;	//19.8mV/A
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <currentConvert+0x60>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb01 	bl	80004c4 <__aeabi_ui2d>
 8000ec2:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f00 <currentConvert+0x58>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	f7ff fb76 	bl	80005b8 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fe20 	bl	8000b18 <__aeabi_d2f>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <currentConvert+0x64>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<2;i++){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dde1      	ble.n	8000eb4 <currentConvert+0xc>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	55556819 	.word	0x55556819
 8000f04:	3fa4d555 	.word	0x3fa4d555
 8000f08:	200001bc 	.word	0x200001bc
 8000f0c:	200001b4 	.word	0x200001b4

08000f10 <resetOutputLatch>:

bool resetOutputLatch(){ //as this is a low active RS latch, the output is reset by setting the pin to low
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	//check if error is still present, as in this case reseting the latch will put the system in undefined state
	HAL_GPIO_WritePin(ErrorReset_GPIO_Port, ErrorReset_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2102      	movs	r1, #2
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <resetOutputLatch+0x54>)
 8000f1a:	f005 fc99 	bl	8006850 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(HardwareFault_GPIO_Port, HardwareFault_Pin) == GPIO_PIN_RESET){
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <resetOutputLatch+0x58>)
 8000f22:	f005 fc7d 	bl	8006820 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <resetOutputLatch+0x20>
//		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);	//turn on red LED
		return false;	//if the hardware fault pin is low, the latch cannot be reset
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e016      	b.n	8000f5e <resetOutputLatch+0x4e>
	}else{
		HAL_GPIO_WritePin(ErrorReset_GPIO_Port, ErrorReset_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2102      	movs	r1, #2
 8000f34:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <resetOutputLatch+0x54>)
 8000f36:	f005 fc8b 	bl	8006850 <HAL_GPIO_WritePin>
		HAL_Delay(10);	//wait for 10ms to ensure the latch is reset
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f003 facc 	bl	80044d8 <HAL_Delay>
		HAL_GPIO_WritePin(ErrorReset_GPIO_Port, ErrorReset_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2102      	movs	r1, #2
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <resetOutputLatch+0x54>)
 8000f46:	f005 fc83 	bl	8006850 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(OutputEnable_GPIO_Port, OutputEnable_Pin) == GPIO_PIN_SET){
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <resetOutputLatch+0x58>)
 8000f4e:	f005 fc67 	bl	8006820 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <resetOutputLatch+0x4c>
//			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);	//turn on yellow LED
			return true;	//output latch is reset
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <resetOutputLatch+0x4e>
		}else{
//			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);	//turn on green LED
			return false;	//output latch is not reset
 8000f5c:	2300      	movs	r3, #0
		}
	}
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	42020400 	.word	0x42020400
 8000f68:	42020800 	.word	0x42020800

08000f6c <errorCheck>:

void errorCheck(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
	//Reset all status variables, as they can only be flipped to the negative during check
	tempError = false;
 8000f72:	4bab      	ldr	r3, [pc, #684]	@ (8001220 <errorCheck+0x2b4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	voltageError = false;
 8000f78:	4baa      	ldr	r3, [pc, #680]	@ (8001224 <errorCheck+0x2b8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	currentError = false;
 8000f7e:	4baa      	ldr	r3, [pc, #680]	@ (8001228 <errorCheck+0x2bc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	chargeEnable = true;
 8000f84:	4ba9      	ldr	r3, [pc, #676]	@ (800122c <errorCheck+0x2c0>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
	dischargeEnable = true;
 8000f8a:	4ba9      	ldr	r3, [pc, #676]	@ (8001230 <errorCheck+0x2c4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
	system_OK = true;
 8000f90:	4ba8      	ldr	r3, [pc, #672]	@ (8001234 <errorCheck+0x2c8>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
	//Check for overvoltage or undervoltage and increase the counting arrays accordingly
	for (int i = 0; i < TOTAL_IC; i++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e1b2      	b.n	8001302 <errorCheck+0x396>
		for (int j = 0; j < CellsNbS; j++){
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e0b2      	b.n	8001108 <errorCheck+0x19c>
			if(voltages[i][j] > ChgEndVolt && NOV[i][j] < Max_Errors){
 8000fa2:	49a5      	ldr	r1, [pc, #660]	@ (8001238 <errorCheck+0x2cc>)
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800123c <errorCheck+0x2d0>
 8000fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	dd23      	ble.n	8001010 <errorCheck+0xa4>
 8000fc8:	499d      	ldr	r1, [pc, #628]	@ (8001240 <errorCheck+0x2d4>)
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fdc:	4a99      	ldr	r2, [pc, #612]	@ (8001244 <errorCheck+0x2d8>)
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	da15      	bge.n	8001010 <errorCheck+0xa4>
				NOV[i][j]++;
 8000fe4:	4996      	ldr	r1, [pc, #600]	@ (8001240 <errorCheck+0x2d4>)
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff8:	1c59      	adds	r1, r3, #1
 8000ffa:	4891      	ldr	r0, [pc, #580]	@ (8001240 <errorCheck+0x2d4>)
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4413      	add	r3, r2
 800100a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800100e:	e020      	b.n	8001052 <errorCheck+0xe6>
			}else if(NOV[i][j]>0){
 8001010:	498b      	ldr	r1, [pc, #556]	@ (8001240 <errorCheck+0x2d4>)
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4413      	add	r3, r2
 8001020:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd14      	ble.n	8001052 <errorCheck+0xe6>
				NOV[i][j]--;
 8001028:	4985      	ldr	r1, [pc, #532]	@ (8001240 <errorCheck+0x2d4>)
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800103c:	1e59      	subs	r1, r3, #1
 800103e:	4880      	ldr	r0, [pc, #512]	@ (8001240 <errorCheck+0x2d4>)
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4413      	add	r3, r2
 800104e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			}
			if(voltages[i][j] < MinDschgVolt && NUV[i][j] < Max_Errors){
 8001052:	4979      	ldr	r1, [pc, #484]	@ (8001238 <errorCheck+0x2cc>)
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800106e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001076:	d523      	bpl.n	80010c0 <errorCheck+0x154>
 8001078:	4973      	ldr	r1, [pc, #460]	@ (8001248 <errorCheck+0x2dc>)
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4413      	add	r3, r2
 8001088:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108c:	4a6d      	ldr	r2, [pc, #436]	@ (8001244 <errorCheck+0x2d8>)
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	4293      	cmp	r3, r2
 8001092:	da15      	bge.n	80010c0 <errorCheck+0x154>
				NUV[i][j]++;
 8001094:	496c      	ldr	r1, [pc, #432]	@ (8001248 <errorCheck+0x2dc>)
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4413      	add	r3, r2
 80010a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010a8:	1c59      	adds	r1, r3, #1
 80010aa:	4867      	ldr	r0, [pc, #412]	@ (8001248 <errorCheck+0x2dc>)
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4413      	add	r3, r2
 80010ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80010be:	e020      	b.n	8001102 <errorCheck+0x196>
			}else if(NUV[i][j]>0){
 80010c0:	4961      	ldr	r1, [pc, #388]	@ (8001248 <errorCheck+0x2dc>)
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd14      	ble.n	8001102 <errorCheck+0x196>
				NUV[i][j]--;
 80010d8:	495b      	ldr	r1, [pc, #364]	@ (8001248 <errorCheck+0x2dc>)
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4413      	add	r3, r2
 80010e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ec:	1e59      	subs	r1, r3, #1
 80010ee:	4856      	ldr	r0, [pc, #344]	@ (8001248 <errorCheck+0x2dc>)
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4413      	add	r3, r2
 80010fe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int j = 0; j < CellsNbS; j++){
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	3301      	adds	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b09      	cmp	r3, #9
 800110c:	f77f af49 	ble.w	8000fa2 <errorCheck+0x36>
			}
		}
		//Check for overtemperature or undertemperature and increase the counting arrays accordingly
		for (int j = 0; j < NbTherm; j++){
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e0c3      	b.n	800129e <errorCheck+0x332>
			if(temperatures[i][j] > OverTemp && NOT[i][j] < Max_Errors){
 8001116:	494d      	ldr	r1, [pc, #308]	@ (800124c <errorCheck+0x2e0>)
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001250 <errorCheck+0x2e4>
 8001130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	dd20      	ble.n	800117c <errorCheck+0x210>
 800113a:	4946      	ldr	r1, [pc, #280]	@ (8001254 <errorCheck+0x2e8>)
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800114c:	4a3d      	ldr	r2, [pc, #244]	@ (8001244 <errorCheck+0x2d8>)
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	4293      	cmp	r3, r2
 8001152:	da13      	bge.n	800117c <errorCheck+0x210>
				NOT[i][j]++;
 8001154:	493f      	ldr	r1, [pc, #252]	@ (8001254 <errorCheck+0x2e8>)
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001166:	1c59      	adds	r1, r3, #1
 8001168:	483a      	ldr	r0, [pc, #232]	@ (8001254 <errorCheck+0x2e8>)
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800117a:	e01d      	b.n	80011b8 <errorCheck+0x24c>
			}else if(NOT[i][j]>0){
 800117c:	4935      	ldr	r1, [pc, #212]	@ (8001254 <errorCheck+0x2e8>)
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	dd12      	ble.n	80011b8 <errorCheck+0x24c>
				NOT[i][j]--;
 8001192:	4930      	ldr	r1, [pc, #192]	@ (8001254 <errorCheck+0x2e8>)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011a4:	1e59      	subs	r1, r3, #1
 80011a6:	482b      	ldr	r0, [pc, #172]	@ (8001254 <errorCheck+0x2e8>)
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			}
			if(temperatures[i][j] < ChgUnderTemp && NUT[i][j] < Max_Errors){
 80011b8:	4924      	ldr	r1, [pc, #144]	@ (800124c <errorCheck+0x2e0>)
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d53f      	bpl.n	800125c <errorCheck+0x2f0>
 80011dc:	491e      	ldr	r1, [pc, #120]	@ (8001258 <errorCheck+0x2ec>)
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <errorCheck+0x2d8>)
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	4293      	cmp	r3, r2
 80011f4:	da32      	bge.n	800125c <errorCheck+0x2f0>
				NUT[i][j]++;
 80011f6:	4918      	ldr	r1, [pc, #96]	@ (8001258 <errorCheck+0x2ec>)
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001208:	1c59      	adds	r1, r3, #1
 800120a:	4813      	ldr	r0, [pc, #76]	@ (8001258 <errorCheck+0x2ec>)
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800121c:	e03c      	b.n	8001298 <errorCheck+0x32c>
 800121e:	bf00      	nop
 8001220:	2000024c 	.word	0x2000024c
 8001224:	2000024d 	.word	0x2000024d
 8001228:	2000024e 	.word	0x2000024e
 800122c:	2000024f 	.word	0x2000024f
 8001230:	20000250 	.word	0x20000250
 8001234:	2000001c 	.word	0x2000001c
 8001238:	20000180 	.word	0x20000180
 800123c:	4086147b 	.word	0x4086147b
 8001240:	200001d8 	.word	0x200001d8
 8001244:	2000001b 	.word	0x2000001b
 8001248:	20000200 	.word	0x20000200
 800124c:	200001a8 	.word	0x200001a8
 8001250:	42a00000 	.word	0x42a00000
 8001254:	20000228 	.word	0x20000228
 8001258:	20000234 	.word	0x20000234
			}else if(NUT[i][j]>0){
 800125c:	499e      	ldr	r1, [pc, #632]	@ (80014d8 <errorCheck+0x56c>)
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800126e:	2b00      	cmp	r3, #0
 8001270:	dd12      	ble.n	8001298 <errorCheck+0x32c>
				NUT[i][j]--;
 8001272:	4999      	ldr	r1, [pc, #612]	@ (80014d8 <errorCheck+0x56c>)
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001284:	1e59      	subs	r1, r3, #1
 8001286:	4894      	ldr	r0, [pc, #592]	@ (80014d8 <errorCheck+0x56c>)
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int j = 0; j < NbTherm; j++){
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f77f af38 	ble.w	8001116 <errorCheck+0x1aa>
			}
		}

		//check for communication errors
		if((cvError>0 || auxError>0) && NC[i] < Max_Errors){
 80012a6:	4b8d      	ldr	r3, [pc, #564]	@ (80014dc <errorCheck+0x570>)
 80012a8:	f993 3000 	ldrsb.w	r3, [r3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dc04      	bgt.n	80012ba <errorCheck+0x34e>
 80012b0:	4b8b      	ldr	r3, [pc, #556]	@ (80014e0 <errorCheck+0x574>)
 80012b2:	f993 3000 	ldrsb.w	r3, [r3]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	dd11      	ble.n	80012de <errorCheck+0x372>
 80012ba:	4a8a      	ldr	r2, [pc, #552]	@ (80014e4 <errorCheck+0x578>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	4a89      	ldr	r2, [pc, #548]	@ (80014e8 <errorCheck+0x57c>)
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	da09      	bge.n	80012de <errorCheck+0x372>
			NC[i]++;
 80012ca:	4a86      	ldr	r2, [pc, #536]	@ (80014e4 <errorCheck+0x578>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	4983      	ldr	r1, [pc, #524]	@ (80014e4 <errorCheck+0x578>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012dc:	e00e      	b.n	80012fc <errorCheck+0x390>
		}else if(NC[i]>0){
 80012de:	4a81      	ldr	r2, [pc, #516]	@ (80014e4 <errorCheck+0x578>)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dd08      	ble.n	80012fc <errorCheck+0x390>
			NC[i]--;
 80012ea:	4a7e      	ldr	r2, [pc, #504]	@ (80014e4 <errorCheck+0x578>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	497b      	ldr	r1, [pc, #492]	@ (80014e4 <errorCheck+0x578>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < TOTAL_IC; i++){
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f77f ae49 	ble.w	8000f9c <errorCheck+0x30>
		}
	}
	//Check for overcurrent and increase the counting arrays accordingly
	if(currents[0] > ChgOCP && NOC[0] < Max_Errors){
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <errorCheck+0x580>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	dd0b      	ble.n	8001336 <errorCheck+0x3ca>
 800131e:	4b74      	ldr	r3, [pc, #464]	@ (80014f0 <errorCheck+0x584>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a71      	ldr	r2, [pc, #452]	@ (80014e8 <errorCheck+0x57c>)
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	4293      	cmp	r3, r2
 8001328:	da05      	bge.n	8001336 <errorCheck+0x3ca>
		NOC[0]++;
 800132a:	4b71      	ldr	r3, [pc, #452]	@ (80014f0 <errorCheck+0x584>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a6f      	ldr	r2, [pc, #444]	@ (80014f0 <errorCheck+0x584>)
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e008      	b.n	8001348 <errorCheck+0x3dc>
	}else if(NOC[0] > 0){
 8001336:	4b6e      	ldr	r3, [pc, #440]	@ (80014f0 <errorCheck+0x584>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	dd04      	ble.n	8001348 <errorCheck+0x3dc>
		NOC[0]--;
 800133e:	4b6c      	ldr	r3, [pc, #432]	@ (80014f0 <errorCheck+0x584>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	4a6a      	ldr	r2, [pc, #424]	@ (80014f0 <errorCheck+0x584>)
 8001346:	6013      	str	r3, [r2, #0]
	}
	if(currents[1] > DschgOCP && NOC[1] < Max_Errors){
 8001348:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <errorCheck+0x580>)
 800134a:	edd3 7a01 	vldr	s15, [r3, #4]
 800134e:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80014f4 <errorCheck+0x588>
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	dd0b      	ble.n	8001374 <errorCheck+0x408>
 800135c:	4b64      	ldr	r3, [pc, #400]	@ (80014f0 <errorCheck+0x584>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a61      	ldr	r2, [pc, #388]	@ (80014e8 <errorCheck+0x57c>)
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	4293      	cmp	r3, r2
 8001366:	da05      	bge.n	8001374 <errorCheck+0x408>
		NOC[1]++;
 8001368:	4b61      	ldr	r3, [pc, #388]	@ (80014f0 <errorCheck+0x584>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	4a60      	ldr	r2, [pc, #384]	@ (80014f0 <errorCheck+0x584>)
 8001370:	6053      	str	r3, [r2, #4]
 8001372:	e008      	b.n	8001386 <errorCheck+0x41a>
	}else if(NOC[1] > 0){
 8001374:	4b5e      	ldr	r3, [pc, #376]	@ (80014f0 <errorCheck+0x584>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	dd04      	ble.n	8001386 <errorCheck+0x41a>
		NOC[1]--;
 800137c:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <errorCheck+0x584>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	3b01      	subs	r3, #1
 8001382:	4a5b      	ldr	r2, [pc, #364]	@ (80014f0 <errorCheck+0x584>)
 8001384:	6053      	str	r3, [r2, #4]
	}
	//Output control
	for (int i = 0; i < TOTAL_IC; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	e076      	b.n	800147a <errorCheck+0x50e>
		for (int j = 0; j < CellsNbS; j++){
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	e02a      	b.n	80013e8 <errorCheck+0x47c>
			if(NOV[i][j] > N_Error){
 8001392:	4959      	ldr	r1, [pc, #356]	@ (80014f8 <errorCheck+0x58c>)
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013a6:	4a55      	ldr	r2, [pc, #340]	@ (80014fc <errorCheck+0x590>)
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd05      	ble.n	80013ba <errorCheck+0x44e>
				chargeEnable = false;
 80013ae:	4b54      	ldr	r3, [pc, #336]	@ (8001500 <errorCheck+0x594>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
				voltageError = true;
 80013b4:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <errorCheck+0x598>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
			}
			if(NUV[i][j] > N_Error){
 80013ba:	4953      	ldr	r1, [pc, #332]	@ (8001508 <errorCheck+0x59c>)
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ce:	4a4b      	ldr	r2, [pc, #300]	@ (80014fc <errorCheck+0x590>)
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd05      	ble.n	80013e2 <errorCheck+0x476>
				dischargeEnable = false;
 80013d6:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <errorCheck+0x5a0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
				voltageError = true;
 80013dc:	4b49      	ldr	r3, [pc, #292]	@ (8001504 <errorCheck+0x598>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < CellsNbS; j++){
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3301      	adds	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	ddd1      	ble.n	8001392 <errorCheck+0x426>
			}
		}
		for (int j = 0; j < NbTherm; j++){
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	e02b      	b.n	800144c <errorCheck+0x4e0>
			if(NOT[i][j] > N_Error){
 80013f4:	4946      	ldr	r1, [pc, #280]	@ (8001510 <errorCheck+0x5a4>)
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001406:	4a3d      	ldr	r2, [pc, #244]	@ (80014fc <errorCheck+0x590>)
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	4293      	cmp	r3, r2
 800140c:	dd08      	ble.n	8001420 <errorCheck+0x4b4>
				chargeEnable = false;
 800140e:	4b3c      	ldr	r3, [pc, #240]	@ (8001500 <errorCheck+0x594>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
				dischargeEnable = false;
 8001414:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <errorCheck+0x5a0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
				tempError = true;
 800141a:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <errorCheck+0x5a8>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
			}
			if(NUT[i][j] > N_Error){
 8001420:	492d      	ldr	r1, [pc, #180]	@ (80014d8 <errorCheck+0x56c>)
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001432:	4a32      	ldr	r2, [pc, #200]	@ (80014fc <errorCheck+0x590>)
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4293      	cmp	r3, r2
 8001438:	dd05      	ble.n	8001446 <errorCheck+0x4da>
				chargeEnable = false;
 800143a:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <errorCheck+0x594>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
				tempError = true;
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <errorCheck+0x5a8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NbTherm; j++){
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	ddd0      	ble.n	80013f4 <errorCheck+0x488>
			}
		}
		if(NC[i] > N_Error){
 8001452:	4a24      	ldr	r2, [pc, #144]	@ (80014e4 <errorCheck+0x578>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	4a28      	ldr	r2, [pc, #160]	@ (80014fc <errorCheck+0x590>)
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	4293      	cmp	r3, r2
 8001460:	dd08      	ble.n	8001474 <errorCheck+0x508>
			chargeEnable = false;
 8001462:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <errorCheck+0x594>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
			dischargeEnable = false;
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <errorCheck+0x5a0>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			system_OK = false;	//set system not OK
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <errorCheck+0x5ac>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < TOTAL_IC; i++){
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3301      	adds	r3, #1
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd85      	ble.n	800138c <errorCheck+0x420>
		}
	}
	if(NOC[0] > N_Error){
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <errorCheck+0x584>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <errorCheck+0x590>)
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	4293      	cmp	r3, r2
 800148a:	dd05      	ble.n	8001498 <errorCheck+0x52c>
		chargeEnable = false;
 800148c:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <errorCheck+0x594>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
		currentError = true;
 8001492:	4b22      	ldr	r3, [pc, #136]	@ (800151c <errorCheck+0x5b0>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
	}
	if(NOC[1] > N_Error){
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <errorCheck+0x584>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <errorCheck+0x590>)
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	dd05      	ble.n	80014b0 <errorCheck+0x544>
		dischargeEnable = false;
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <errorCheck+0x5a0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
		currentError = true;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <errorCheck+0x5b0>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(OutputEnable_GPIO_Port, OutputEnable_Pin) == GPIO_PIN_RESET){
 80014b0:	2120      	movs	r1, #32
 80014b2:	481b      	ldr	r0, [pc, #108]	@ (8001520 <errorCheck+0x5b4>)
 80014b4:	f005 f9b4 	bl	8006820 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d108      	bne.n	80014d0 <errorCheck+0x564>
		//if the hardware fault is present, turn off the outputs
		chargeEnable = false;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <errorCheck+0x594>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		dischargeEnable = false;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <errorCheck+0x5a0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
		system_OK = false;	//set system not OK
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <errorCheck+0x5ac>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
	}
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000234 	.word	0x20000234
 80014dc:	200001d4 	.word	0x200001d4
 80014e0:	200001d5 	.word	0x200001d5
 80014e4:	20000240 	.word	0x20000240
 80014e8:	2000001b 	.word	0x2000001b
 80014ec:	200001b4 	.word	0x200001b4
 80014f0:	20000244 	.word	0x20000244
 80014f4:	42700000 	.word	0x42700000
 80014f8:	200001d8 	.word	0x200001d8
 80014fc:	2000001a 	.word	0x2000001a
 8001500:	2000024f 	.word	0x2000024f
 8001504:	2000024d 	.word	0x2000024d
 8001508:	20000200 	.word	0x20000200
 800150c:	20000250 	.word	0x20000250
 8001510:	20000228 	.word	0x20000228
 8001514:	2000024c 	.word	0x2000024c
 8001518:	2000001c 	.word	0x2000001c
 800151c:	2000024e 	.word	0x2000024e
 8001520:	42020800 	.word	0x42020800

08001524 <LEDControl>:

void LEDControl(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	//blink Red and Amber in case of hardware fault
	if(HAL_GPIO_ReadPin(OutputEnable_GPIO_Port, OutputEnable_Pin) == GPIO_PIN_RESET){
 8001528:	2120      	movs	r1, #32
 800152a:	4819      	ldr	r0, [pc, #100]	@ (8001590 <LEDControl+0x6c>)
 800152c:	f005 f978 	bl	8006820 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <LEDControl+0x28>
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001536:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800153a:	4816      	ldr	r0, [pc, #88]	@ (8001594 <LEDControl+0x70>)
 800153c:	f005 f9a0 	bl	8006880 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8001540:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <LEDControl+0x70>)
 8001546:	f005 f99b 	bl	8006880 <HAL_GPIO_TogglePin>
 800154a:	e00f      	b.n	800156c <LEDControl+0x48>
	}else{
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, voltageError);
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <LEDControl+0x74>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001556:	480f      	ldr	r0, [pc, #60]	@ (8001594 <LEDControl+0x70>)
 8001558:	f005 f97a 	bl	8006850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, currentError);
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <LEDControl+0x78>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001566:	480b      	ldr	r0, [pc, #44]	@ (8001594 <LEDControl+0x70>)
 8001568:	f005 f972 	bl	8006850 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, tempError);
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <LEDControl+0x7c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <LEDControl+0x70>)
 8001578:	f005 f96a 	bl	8006850 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, system_OK);
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <LEDControl+0x80>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <LEDControl+0x70>)
 8001588:	f005 f962 	bl	8006850 <HAL_GPIO_WritePin>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	42020800 	.word	0x42020800
 8001594:	42020400 	.word	0x42020400
 8001598:	2000024d 	.word	0x2000024d
 800159c:	2000024e 	.word	0x2000024e
 80015a0:	2000024c 	.word	0x2000024c
 80015a4:	2000001c 	.word	0x2000001c

080015a8 <outputControl>:

void outputControl(){ //eventually integrate in errorcheck
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
		if(!resetOutputLatch()){
			return;	//if the output latch cannot be reset, return
		}
	}
	*/
	HAL_GPIO_WritePin(Enable1_GPIO_Port, Enable1_Pin, chargeEnable);
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <outputControl+0x24>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2110      	movs	r1, #16
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <outputControl+0x28>)
 80015b6:	f005 f94b 	bl	8006850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Enable2_GPIO_Port, Enable2_Pin, dischargeEnable);
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <outputControl+0x2c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	2101      	movs	r1, #1
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <outputControl+0x30>)
 80015c4:	f005 f944 	bl	8006850 <HAL_GPIO_WritePin>

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000024f 	.word	0x2000024f
 80015d0:	42020800 	.word	0x42020800
 80015d4:	20000250 	.word	0x20000250
 80015d8:	42020400 	.word	0x42020400

080015dc <SetHardwareProtection>:
void SetHardwareProtection(){ //only set in idle mode stop TIM7 before calling this function
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	// HardwareOVP
    HAL_GPIO_WritePin(A1_1_GPIO_Port, A1_1_Pin, (HardwareOVP>>3)&1);
 80015e0:	2309      	movs	r3, #9
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f2:	4854      	ldr	r0, [pc, #336]	@ (8001744 <SetHardwareProtection+0x168>)
 80015f4:	f005 f92c 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_1_GPIO_Port, A0_1_Pin, (HardwareOVP>>2)&1);
 80015f8:	2309      	movs	r3, #9
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800160a:	484e      	ldr	r0, [pc, #312]	@ (8001744 <SetHardwareProtection+0x168>)
 800160c:	f005 f920 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A1_2_GPIO_Port, A1_2_Pin, (HardwareOVP>>1)&1);
 8001610:	2309      	movs	r3, #9
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001622:	4849      	ldr	r0, [pc, #292]	@ (8001748 <SetHardwareProtection+0x16c>)
 8001624:	f005 f914 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_2_GPIO_Port, A0_2_Pin, HardwareOVP&1);
 8001628:	2309      	movs	r3, #9
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001636:	4843      	ldr	r0, [pc, #268]	@ (8001744 <SetHardwareProtection+0x168>)
 8001638:	f005 f90a 	bl	8006850 <HAL_GPIO_WritePin>
    //HardwareUVP
    HAL_GPIO_WritePin(A1_3_GPIO_Port, A1_3_Pin, (HardwareUVP>>3)&1);
 800163c:	230a      	movs	r3, #10
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164e:	483e      	ldr	r0, [pc, #248]	@ (8001748 <SetHardwareProtection+0x16c>)
 8001650:	f005 f8fe 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_3_GPIO_Port, A0_3_Pin, (HardwareUVP>>2)&1);
 8001654:	230a      	movs	r3, #10
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001666:	4837      	ldr	r0, [pc, #220]	@ (8001744 <SetHardwareProtection+0x168>)
 8001668:	f005 f8f2 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A1_4_GPIO_Port, A1_4_Pin, (HardwareUVP>>1)&1);
 800166c:	230a      	movs	r3, #10
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800167e:	4832      	ldr	r0, [pc, #200]	@ (8001748 <SetHardwareProtection+0x16c>)
 8001680:	f005 f8e6 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_4_GPIO_Port, A0_4_Pin, HardwareUVP&1);
 8001684:	230a      	movs	r3, #10
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	2104      	movs	r1, #4
 8001690:	482e      	ldr	r0, [pc, #184]	@ (800174c <SetHardwareProtection+0x170>)
 8001692:	f005 f8dd 	bl	8006850 <HAL_GPIO_WritePin>
    //Cell_CNT
    HAL_GPIO_WritePin(A1_6_GPIO_Port, A1_6_Pin, (HardwareCellCnt>>3)&1);
 8001696:	2307      	movs	r3, #7
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	2120      	movs	r1, #32
 80016a6:	482a      	ldr	r0, [pc, #168]	@ (8001750 <SetHardwareProtection+0x174>)
 80016a8:	f005 f8d2 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_6_GPIO_Port, A0_6_Pin, (HardwareCellCnt>>2)&1);
 80016ac:	2307      	movs	r3, #7
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	2140      	movs	r1, #64	@ 0x40
 80016bc:	4824      	ldr	r0, [pc, #144]	@ (8001750 <SetHardwareProtection+0x174>)
 80016be:	f005 f8c7 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A1_7_GPIO_Port, A1_7_Pin, (HardwareCellCnt>>1)&1);
 80016c2:	2307      	movs	r3, #7
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d4:	481b      	ldr	r0, [pc, #108]	@ (8001744 <SetHardwareProtection+0x168>)
 80016d6:	f005 f8bb 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_7_GPIO_Port, A0_7_Pin, HardwareCellCnt&1);
 80016da:	2307      	movs	r3, #7
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	481a      	ldr	r0, [pc, #104]	@ (8001750 <SetHardwareProtection+0x174>)
 80016e8:	f005 f8b2 	bl	8006850 <HAL_GPIO_WritePin>
    //Hysterysis
    HAL_GPIO_WritePin(A1_5_GPIO_Port, A1_5_Pin, (HardwareHysterysis>>1)&1);
 80016ec:	2303      	movs	r3, #3
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <SetHardwareProtection+0x168>)
 8001700:	f005 f8a6 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_5_GPIO_Port, A0_5_Pin, (HardwareHysterysis)&1);
 8001704:	2303      	movs	r3, #3
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	2110      	movs	r1, #16
 8001710:	480f      	ldr	r0, [pc, #60]	@ (8001750 <SetHardwareProtection+0x174>)
 8001712:	f005 f89d 	bl	8006850 <HAL_GPIO_WritePin>
    //Cycle Time
    HAL_GPIO_WritePin(A1_8_GPIO_Port, A1_8_Pin, (HardwareCycleTime>>1)&1);
 8001716:	2301      	movs	r3, #1
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	2101      	movs	r1, #1
 8001726:	480b      	ldr	r0, [pc, #44]	@ (8001754 <SetHardwareProtection+0x178>)
 8001728:	f005 f892 	bl	8006850 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_8_GPIO_Port, A0_8_Pin, (HardwareCycleTime)&1);
 800172c:	2301      	movs	r3, #1
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	2102      	movs	r1, #2
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <SetHardwareProtection+0x178>)
 800173a:	f005 f889 	bl	8006850 <HAL_GPIO_WritePin>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	42020800 	.word	0x42020800
 8001748:	42020000 	.word	0x42020000
 800174c:	42020c00 	.word	0x42020c00
 8001750:	42020400 	.word	0x42020400
 8001754:	42021c00 	.word	0x42021c00

08001758 <LTC6811_init_reg_limits>:
#include "stdint.h"
#include "LTC6811.h"
#include "LTC681x.h"

void LTC6811_init_reg_limits(uint8_t total_ic, cell_asic ic[])
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e038      	b.n	80017dc <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	22e8      	movs	r2, #232	@ 0xe8
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	220c      	movs	r2, #12
 8001778:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    ic[cic].ic_reg.stat_channels=4;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	22e8      	movs	r2, #232	@ 0xe8
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	2204      	movs	r2, #4
 800178a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    ic[cic].ic_reg.aux_channels=6;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	22e8      	movs	r2, #232	@ 0xe8
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	2206      	movs	r2, #6
 800179c:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	22e8      	movs	r2, #232	@ 0xe8
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	2204      	movs	r2, #4
 80017ae:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	22e8      	movs	r2, #232	@ 0xe8
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	22e8      	movs	r2, #232	@ 0xe8
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	3301      	adds	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3c2      	bcc.n	800176a <LTC6811_init_reg_limits+0x12>
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LTC6811_adcv>:
void LTC6811_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	460b      	mov	r3, r1
 80017fe:	71bb      	strb	r3, [r7, #6]
 8001800:	4613      	mov	r3, r2
 8001802:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8001804:	797a      	ldrb	r2, [r7, #5]
 8001806:	79b9      	ldrb	r1, [r7, #6]
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f9b2 	bl	8001b74 <LTC681x_adcv>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <LTC6811_adax>:
//Start a GPIO and Vref2 Conversion
void LTC6811_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8001828:	79ba      	ldrb	r2, [r7, #6]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f9cb 	bl	8001bca <LTC681x_adax>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <LTC6811_rdcv>:
// Reads and parses the LTC6811 cell voltage registers.
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	603a      	str	r2, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	460b      	mov	r3, r1
 800184a:	71bb      	strb	r3, [r7, #6]

  int8_t pec_error = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8001850:	79b9      	ldrb	r1, [r7, #6]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fafa 	bl	8001e50 <LTC681x_rdcv>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	603a      	str	r2, [r7, #0]
 8001874:	71fb      	strb	r3, [r7, #7]
 8001876:	460b      	mov	r3, r1
 8001878:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdaux(reg,total_ic,ic);
 800187e:	79b9      	ldrb	r1, [r7, #6]
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fb97 	bl	8001fb8 <LTC681x_rdaux>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
  return (pec_error);
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[] //A two dimensional array of the configuration data that will be written
                  )
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	6039      	str	r1, [r7, #0]
 80018a4:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fc2c 	bl	8002108 <LTC681x_wrcfg>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <LTC6811_reset_crc_count>:
  LTC681x_check_pec(total_ic,reg,ic);
}

//Helper Function to reset PEC counters
void LTC6811_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fe3d 	bl	8002548 <LTC681x_reset_crc_count>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <LTC6811_init_cfg>:

//Helper function to intialize CFG variables.
void LTC6811_init_cfg(uint8_t total_ic, cell_asic ic[])
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	6039      	str	r1, [r7, #0]
 80018e0:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fe94 	bl	8002614 <LTC681x_init_cfg>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <LTC6811_set_cfgr>:
					  bool dcc[12], // The DCC bit
					  bool dcto[4], // The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af06      	add	r7, sp, #24
 80018fa:	6039      	str	r1, [r7, #0]
 80018fc:	4611      	mov	r1, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	460b      	mov	r3, r1
 8001906:	71bb      	strb	r3, [r7, #6]
 8001908:	4613      	mov	r3, r2
 800190a:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 800190c:	7979      	ldrb	r1, [r7, #5]
 800190e:	79ba      	ldrb	r2, [r7, #6]
 8001910:	79f8      	ldrb	r0, [r7, #7]
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	9304      	str	r3, [sp, #16]
 8001916:	8bbb      	ldrh	r3, [r7, #28]
 8001918:	9303      	str	r3, [sp, #12]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	460b      	mov	r3, r1
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	f000 fe9d 	bl	8002668 <LTC681x_set_cfgr>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <wakeup_idle>:
                                0x2d02, 0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3,
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

void wakeup_idle(uint8_t total_ic)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e00c      	b.n	8001960 <wakeup_idle+0x2a>
  {
    cs_low();
 8001946:	f001 f8e9 	bl	8002b1c <cs_low>
    HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f002 fdc4 	bl	80044d8 <HAL_Delay>
    //delayMicroseconds(2); //Guarantees the isoSPI will be in ready mode
    spi_read_byte(0xff);
 8001950:	20ff      	movs	r0, #255	@ 0xff
 8001952:	f001 f95f 	bl	8002c14 <spi_read_byte>
    cs_high();
 8001956:	f001 f8ed 	bl	8002b34 <cs_high>
  for (int i =0; i<total_ic; i++)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbee      	blt.n	8001946 <wakeup_idle+0x10>
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <wakeup_sleep>:

//Generic wakeup commannd to wake the LTC6813 from sleep
void wakeup_sleep(uint8_t total_ic)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e009      	b.n	8001996 <wakeup_sleep+0x24>
  {
    cs_low();
 8001982:	f001 f8cb 	bl	8002b1c <cs_low>
    HAL_Delay(1); // Guarantees the LTC6811 will be in standby
 8001986:	2001      	movs	r0, #1
 8001988:	f002 fda6 	bl	80044d8 <HAL_Delay>
		cs_high();
 800198c:	f001 f8d2 	bl	8002b34 <cs_high>
  for (int i =0; i<total_ic; i++)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf1      	blt.n	8001982 <wakeup_sleep+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <cmd_68>:

//Generic function to write 68xx commands. Function calculated PEC for tx_cmd data
void cmd_68(uint8_t tx_cmd[2])
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;
  uint8_t md_bits;

  cmd[0] = tx_cmd[0];
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	723b      	strb	r3, [r7, #8]
  cmd[1] =  tx_cmd[1];
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	727b      	strb	r3, [r7, #9]
  cmd_pec = pec15_calc(2, cmd);
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	4619      	mov	r1, r3
 80019c2:	2002      	movs	r0, #2
 80019c4:	f000 f8a2 	bl	8001b0c <pec15_calc>
 80019c8:	4603      	mov	r3, r0
 80019ca:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	72fb      	strb	r3, [r7, #11]
	cs_low();
 80019dc:	f001 f89e 	bl	8002b1c <cs_low>
  spi_write_array(4,cmd);
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	2004      	movs	r0, #4
 80019e8:	f001 f8b0 	bl	8002b4c <spi_write_array>
	cs_high();
 80019ec:	f001 f8a2 	bl	8002b34 <cs_high>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <write_68>:

//Generic function to write 68xx commands and write payload data. Function calculated PEC for tx_cmd data
void write_68(uint8_t total_ic , uint8_t tx_cmd[2], uint8_t data[])
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	73fb      	strb	r3, [r7, #15]
  const uint8_t BYTES_IN_REG = 6;
 8001a06:	2306      	movs	r3, #6
 8001a08:	773b      	strb	r3, [r7, #28]
  const uint8_t CMD_LEN = 4+(8*total_ic);
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3304      	adds	r3, #4
 8001a12:	76fb      	strb	r3, [r7, #27]
  uint8_t *cmd;
  uint16_t data_pec;
  uint16_t cmd_pec;
  uint8_t cmd_index;

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001a14:	7efb      	ldrb	r3, [r7, #27]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f00d ff3a 	bl	800f890 <malloc>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	617b      	str	r3, [r7, #20]
  cmd[0] = tx_cmd[0];
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	701a      	strb	r2, [r3, #0]
  cmd[1] = tx_cmd[1];
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	7852      	ldrb	r2, [r2, #1]
 8001a30:	701a      	strb	r2, [r3, #0]
  cmd_pec = pec15_calc(2, cmd);
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 f869 	bl	8001b0c <pec15_calc>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	827b      	strh	r3, [r7, #18]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001a3e:	8a7b      	ldrh	r3, [r7, #18]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3302      	adds	r3, #2
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3303      	adds	r3, #3
 8001a50:	8a7a      	ldrh	r2, [r7, #18]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8001a56:	2304      	movs	r3, #4
 8001a58:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	77bb      	strb	r3, [r7, #30]
 8001a5e:	e042      	b.n	8001ae6 <write_68+0xee>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	777b      	strb	r3, [r7, #29]
 8001a64:	e016      	b.n	8001a94 <write_68+0x9c>
    {
      cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001a66:	7fbb      	ldrb	r3, [r7, #30]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	461a      	mov	r2, r3
 8001a74:	7f7b      	ldrb	r3, [r7, #29]
 8001a76:	4413      	add	r3, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	6979      	ldr	r1, [r7, #20]
 8001a82:	440b      	add	r3, r1
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001a8e:	7f7b      	ldrb	r3, [r7, #29]
 8001a90:	3301      	adds	r3, #1
 8001a92:	777b      	strb	r3, [r7, #29]
 8001a94:	7f7a      	ldrb	r2, [r7, #29]
 8001a96:	7f3b      	ldrb	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3e4      	bcc.n	8001a66 <write_68+0x6e>
    }

    data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 8001a9c:	7fbb      	ldrb	r3, [r7, #30]
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	441a      	add	r2, r3
 8001aae:	7f3b      	ldrb	r3, [r7, #28]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f82a 	bl	8001b0c <pec15_calc>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8001abc:	8a3b      	ldrh	r3, [r7, #16]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)data_pec;
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	8a3a      	ldrh	r2, [r7, #16]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	3302      	adds	r3, #2
 8001ade:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8001ae0:	7fbb      	ldrb	r3, [r7, #30]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	77bb      	strb	r3, [r7, #30]
 8001ae6:	7fbb      	ldrb	r3, [r7, #30]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1b9      	bne.n	8001a60 <write_68+0x68>
  }


  cs_low();
 8001aec:	f001 f816 	bl	8002b1c <cs_low>
  spi_write_array(CMD_LEN, cmd);
 8001af0:	7efb      	ldrb	r3, [r7, #27]
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 f829 	bl	8002b4c <spi_write_array>
  cs_high();
 8001afa:	f001 f81b 	bl	8002b34 <cs_high>
  free(cmd);
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f00d fece 	bl	800f8a0 <free>
}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;

  remainder = 16;//initialize the PEC
 8001b18:	2310      	movs	r3, #16
 8001b1a:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	737b      	strb	r3, [r7, #13]
 8001b20:	e019      	b.n	8001b56 <pec15_calc+0x4a>
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	09db      	lsrs	r3, r3, #7
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	7b7a      	ldrb	r2, [r7, #13]
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	440a      	add	r2, r1
 8001b2e:	7812      	ldrb	r2, [r2, #0]
 8001b30:	4053      	eors	r3, r2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	817b      	strh	r3, [r7, #10]

    remainder = (remainder<<8)^crc15Table[addr];
 8001b38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	490b      	ldr	r1, [pc, #44]	@ (8001b70 <pec15_calc+0x64>)
 8001b44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4053      	eors	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	3301      	adds	r3, #1
 8001b54:	737b      	strb	r3, [r7, #13]
 8001b56:	7b7a      	ldrb	r2, [r7, #13]
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3e1      	bcc.n	8001b22 <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001b5e:	89fb      	ldrh	r3, [r7, #14]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29b      	uxth	r3, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	0800ff34 	.word	0x0800ff34

08001b74 <LTC681x_adcv>:
void LTC681x_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	4613      	mov	r3, r2
 8001b84:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	105b      	asrs	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x02;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3302      	adds	r3, #2
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	73fb      	strb	r3, [r7, #15]
  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	797b      	ldrb	r3, [r7, #5]
 8001bae:	4413      	add	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3360      	adds	r3, #96	@ 0x60
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fef3 	bl	80019a8 <cmd_68>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <LTC681x_adax>:
//Start a GPIO and Vref2 Conversion
void LTC681x_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	105b      	asrs	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x04;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	3304      	adds	r3, #4
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	73fb      	strb	r3, [r7, #15]
  cmd[1] = md_bits + 0x60 + CHG ;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3360      	adds	r3, #96	@ 0x60
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fece 	bl	80019a8 <cmd_68>

}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LTC681x_rdcv_reg>:
// Reads the raw cell voltage register data
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	603a      	str	r2, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	460b      	mov	r3, r1
 8001c22:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8001c24:	2308      	movs	r3, #8
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1)     //1: RDCVA
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d104      	bne.n	8001c38 <LTC681x_rdcv_reg+0x24>
  {
    cmd[1] = 0x04;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c32:	2300      	movs	r3, #0
 8001c34:	723b      	strb	r3, [r7, #8]
 8001c36:	e026      	b.n	8001c86 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 2) //2: RDCVB
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d104      	bne.n	8001c48 <LTC681x_rdcv_reg+0x34>
  {
    cmd[1] = 0x06;
 8001c3e:	2306      	movs	r3, #6
 8001c40:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c42:	2300      	movs	r3, #0
 8001c44:	723b      	strb	r3, [r7, #8]
 8001c46:	e01e      	b.n	8001c86 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 3) //3: RDCVC
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d104      	bne.n	8001c58 <LTC681x_rdcv_reg+0x44>
  {
    cmd[1] = 0x08;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c52:	2300      	movs	r3, #0
 8001c54:	723b      	strb	r3, [r7, #8]
 8001c56:	e016      	b.n	8001c86 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 4) //4: RDCVD
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d104      	bne.n	8001c68 <LTC681x_rdcv_reg+0x54>
  {
    cmd[1] = 0x0A;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c62:	2300      	movs	r3, #0
 8001c64:	723b      	strb	r3, [r7, #8]
 8001c66:	e00e      	b.n	8001c86 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 5) //4: RDCVE
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d104      	bne.n	8001c78 <LTC681x_rdcv_reg+0x64>
  {
    cmd[1] = 0x09;
 8001c6e:	2309      	movs	r3, #9
 8001c70:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	723b      	strb	r3, [r7, #8]
 8001c76:	e006      	b.n	8001c86 <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 6) //4: RDCVF
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d103      	bne.n	8001c86 <LTC681x_rdcv_reg+0x72>
  {
    cmd[1] = 0x0B;
 8001c7e:	230b      	movs	r3, #11
 8001c80:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	723b      	strb	r3, [r7, #8]
  }


  cmd_pec = pec15_calc(2, cmd);
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7ff ff3d 	bl	8001b0c <pec15_calc>
 8001c92:	4603      	mov	r3, r0
 8001c94:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c96:	89bb      	ldrh	r3, [r7, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001ca0:	89bb      	ldrh	r3, [r7, #12]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	72fb      	strb	r3, [r7, #11]

  cs_low();
 8001ca6:	f000 ff39 	bl	8002b1c <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	fb12 f303 	smulbb	r3, r2, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f107 0008 	add.w	r0, r7, #8
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	2104      	movs	r1, #4
 8001cbc:	f000 ff6a 	bl	8002b94 <spi_write_read>
  cs_high();
 8001cc0:	f000 ff38 	bl	8002b34 <cs_high>

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <parse_cells>:

//helper function that parses voltage measurement registers
int8_t parse_cells(uint8_t current_ic, uint8_t cell_reg, uint8_t cell_data[], uint16_t *cell_codes, uint8_t *ic_pec)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	73bb      	strb	r3, [r7, #14]

  const uint8_t BYT_IN_REG = 6;
 8001cde:	2306      	movs	r3, #6
 8001ce0:	773b      	strb	r3, [r7, #28]
  const uint8_t CELL_IN_REG = 3;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	76fb      	strb	r3, [r7, #27]
  int8_t pec_error = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	77fb      	strb	r3, [r7, #31]
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	77bb      	strb	r3, [r7, #30]


  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	777b      	strb	r3, [r7, #29]
 8001cf4:	e01f      	b.n	8001d36 <parse_cells+0x6a>
  {
    // loops once for each of the 3 cell voltage codes in the register

    parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 8001cf6:	7fbb      	ldrb	r3, [r7, #30]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	7fbb      	ldrb	r3, [r7, #30]
 8001d02:	3301      	adds	r3, #1
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	440b      	add	r3, r1
 8001d10:	82bb      	strh	r3, [r7, #20]
    // create the parsed cell voltage code
    cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001d12:	7f7a      	ldrb	r2, [r7, #29]
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	7ef9      	ldrb	r1, [r7, #27]
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	8aba      	ldrh	r2, [r7, #20]
 8001d28:	801a      	strh	r2, [r3, #0]
    data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001d2a:	7fbb      	ldrb	r3, [r7, #30]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	77bb      	strb	r3, [r7, #30]
  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001d30:	7f7b      	ldrb	r3, [r7, #29]
 8001d32:	3301      	adds	r3, #1
 8001d34:	777b      	strb	r3, [r7, #29]
 8001d36:	7f7a      	ldrb	r2, [r7, #29]
 8001d38:	7efb      	ldrb	r3, [r7, #27]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3db      	bcc.n	8001cf6 <parse_cells+0x2a>
    //must increment by two for each parsed cell code
  }

  received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001d3e:	7fbb      	ldrb	r3, [r7, #30]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	7fbb      	ldrb	r3, [r7, #30]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	440b      	add	r3, r1
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	833b      	strh	r3, [r7, #24]
  //after the 6 cell voltage data bytes
  data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	441a      	add	r2, r3
 8001d68:	7f3b      	ldrb	r3, [r7, #28]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fecd 	bl	8001b0c <pec15_calc>
 8001d72:	4603      	mov	r3, r0
 8001d74:	82fb      	strh	r3, [r7, #22]

  if (received_pec != data_pec)
 8001d76:	8b3a      	ldrh	r2, [r7, #24]
 8001d78:	8afb      	ldrh	r3, [r7, #22]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d008      	beq.n	8001d90 <parse_cells+0xc4>
  {
    pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8001d7e:	2301      	movs	r3, #1
 8001d80:	77fb      	strb	r3, [r7, #31]
    ic_pec[cell_reg-1]=1;
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d88:	4413      	add	r3, r2
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e005      	b.n	8001d9c <parse_cells+0xd0>
  }
  else
  {
    ic_pec[cell_reg-1]=0;
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d96:	4413      	add	r3, r2
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
  }
  data_counter=data_counter+2;
 8001d9c:	7fbb      	ldrb	r3, [r7, #30]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	77bb      	strb	r3, [r7, #30]
  return(pec_error);
 8001da2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	603a      	str	r2, [r7, #0]
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d104      	bne.n	8001dd2 <LTC681x_rdaux_reg+0x24>
  {
    cmd[1] = 0x0C;
 8001dc8:	230c      	movs	r3, #12
 8001dca:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	723b      	strb	r3, [r7, #8]
 8001dd0:	e01b      	b.n	8001e0a <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 2)  //Read back auxiliary group B
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d104      	bne.n	8001de2 <LTC681x_rdaux_reg+0x34>
  {
    cmd[1] = 0x0e;
 8001dd8:	230e      	movs	r3, #14
 8001dda:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	723b      	strb	r3, [r7, #8]
 8001de0:	e013      	b.n	8001e0a <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 3)  //Read back auxiliary group C
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d104      	bne.n	8001df2 <LTC681x_rdaux_reg+0x44>
  {
    cmd[1] = 0x0D;
 8001de8:	230d      	movs	r3, #13
 8001dea:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001dec:	2300      	movs	r3, #0
 8001dee:	723b      	strb	r3, [r7, #8]
 8001df0:	e00b      	b.n	8001e0a <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 4)  //Read back auxiliary group D
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d104      	bne.n	8001e02 <LTC681x_rdaux_reg+0x54>
  {
    cmd[1] = 0x0F;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	723b      	strb	r3, [r7, #8]
 8001e00:	e003      	b.n	8001e0a <LTC681x_rdaux_reg+0x5c>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 8001e02:	230c      	movs	r3, #12
 8001e04:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = pec15_calc(2, cmd);
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff fe7b 	bl	8001b0c <pec15_calc>
 8001e16:	4603      	mov	r3, r0
 8001e18:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001e24:	89bb      	ldrh	r3, [r7, #12]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	72fb      	strb	r3, [r7, #11]

  cs_low();
 8001e2a:	f000 fe77 	bl	8002b1c <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	79bb      	ldrb	r3, [r7, #6]
 8001e32:	fb12 f303 	smulbb	r3, r2, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f107 0008 	add.w	r0, r7, #8
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	2104      	movs	r1, #4
 8001e40:	f000 fea8 	bl	8002b94 <spi_write_read>
  cs_high();
 8001e44:	f000 fe76 	bl	8002b34 <cs_high>

}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <LTC681x_rdcv>:
//Reads and parses the LTC681x cell voltage registers.
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	4603      	mov	r3, r0
 8001e58:	603a      	str	r2, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]
  uint8_t *cell_data;
  uint8_t c_ic = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75bb      	strb	r3, [r7, #22]
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f00d fd0f 	bl	800f890 <malloc>
 8001e72:	4603      	mov	r3, r0
 8001e74:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d14b      	bne.n	8001f14 <LTC681x_rdcv+0xc4>
  {
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	757b      	strb	r3, [r7, #21]
 8001e80:	e041      	b.n	8001f06 <LTC681x_rdcv+0xb6>
    {
      LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8001e82:	79b9      	ldrb	r1, [r7, #6]
 8001e84:	7d7b      	ldrb	r3, [r7, #21]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fec3 	bl	8001c14 <LTC681x_rdcv_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	e031      	b.n	8001ef8 <LTC681x_rdcv+0xa8>
      {
        if (ic->isospi_reverse == false)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <LTC681x_rdcv+0x5a>
        {
          c_ic = current_ic;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	75bb      	strb	r3, [r7, #22]
 8001ea8:	e006      	b.n	8001eb8 <LTC681x_rdcv+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	79ba      	ldrb	r2, [r7, #6]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	b2d8      	uxtb	r0, r3
                                            &ic[c_ic].cells.c_codes[0],
 8001ebc:	7dbb      	ldrb	r3, [r7, #22]
 8001ebe:	22e8      	movs	r2, #232	@ 0xe8
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001ec8:	f103 041e 	add.w	r4, r3, #30
                                            &ic[c_ic].cells.pec_match[0]);
 8001ecc:	7dbb      	ldrb	r3, [r7, #22]
 8001ece:	22e8      	movs	r2, #232	@ 0xe8
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001ed8:	3342      	adds	r3, #66	@ 0x42
 8001eda:	7d79      	ldrb	r1, [r7, #21]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4623      	mov	r3, r4
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	f7ff fef3 	bl	8001ccc <parse_cells>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	4413      	add	r3, r2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbc9      	blt.n	8001e94 <LTC681x_rdcv+0x44>
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 8001f00:	7d7b      	ldrb	r3, [r7, #21]
 8001f02:	3301      	adds	r3, #1
 8001f04:	757b      	strb	r3, [r7, #21]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001f0c:	7d7a      	ldrb	r2, [r7, #21]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d9b7      	bls.n	8001e82 <LTC681x_rdcv+0x32>
 8001f12:	e043      	b.n	8001f9c <LTC681x_rdcv+0x14c>
    }
  }

  else
  {
    LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8001f14:	79b9      	ldrb	r1, [r7, #6]
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fe7a 	bl	8001c14 <LTC681x_rdcv_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e036      	b.n	8001f94 <LTC681x_rdcv+0x144>
    {
      if (ic->isospi_reverse == false)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <LTC681x_rdcv+0xec>
      {
        c_ic = current_ic;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	75bb      	strb	r3, [r7, #22]
 8001f3a:	e006      	b.n	8001f4a <LTC681x_rdcv+0xfa>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	79ba      	ldrb	r2, [r7, #6]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	b2d8      	uxtb	r0, r3
 8001f4e:	7dbb      	ldrb	r3, [r7, #22]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	189c      	adds	r4, r3, r2
                                          &ic[c_ic].cells.c_codes[0],
 8001f58:	7dbb      	ldrb	r3, [r7, #22]
 8001f5a:	22e8      	movs	r2, #232	@ 0xe8
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001f64:	f103 051e 	add.w	r5, r3, #30
                                          &ic[c_ic].cells.pec_match[0]);
 8001f68:	7dbb      	ldrb	r3, [r7, #22]
 8001f6a:	22e8      	movs	r2, #232	@ 0xe8
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001f74:	3342      	adds	r3, #66	@ 0x42
 8001f76:	79f9      	ldrb	r1, [r7, #7]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	f7ff fea5 	bl	8001ccc <parse_cells>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbc4      	blt.n	8001f26 <LTC681x_rdcv+0xd6>
    }
  }
  LTC681x_check_pec(total_ic,CELL,ic);
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f92c 	bl	8002200 <LTC681x_check_pec>
  free(cell_data);
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f00d fc79 	bl	800f8a0 <free>
  return(pec_error);
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdb0      	pop	{r4, r5, r7, pc}

08001fb8 <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	603a      	str	r2, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	71bb      	strb	r3, [r7, #6]
  uint8_t *data;
  int8_t pec_error = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  uint8_t c_ic =0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75bb      	strb	r3, [r7, #22]
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00d fc5b 	bl	800f890 <malloc>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d147      	bne.n	8002074 <LTC681x_rdaux+0xbc>
  {
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	757b      	strb	r3, [r7, #21]
 8001fe8:	e03d      	b.n	8002066 <LTC681x_rdaux+0xae>
    {
      LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8001fea:	79b9      	ldrb	r1, [r7, #6]
 8001fec:	7d7b      	ldrb	r3, [r7, #21]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fedc 	bl	8001dae <LTC681x_rdaux_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e02d      	b.n	8002058 <LTC681x_rdaux+0xa0>
      {
        if (ic->isospi_reverse == false)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <LTC681x_rdaux+0x5a>
        {
          c_ic = current_ic;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	75bb      	strb	r3, [r7, #22]
 8002010:	e006      	b.n	8002020 <LTC681x_rdaux+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	79ba      	ldrb	r2, [r7, #6]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	b2d8      	uxtb	r0, r3
                                &ic[c_ic].aux.a_codes[0],
 8002024:	7dbb      	ldrb	r3, [r7, #22]
 8002026:	22e8      	movs	r2, #232	@ 0xe8
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8002030:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                                &ic[c_ic].aux.pec_match[0]);
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	22e8      	movs	r2, #232	@ 0xe8
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8002040:	335a      	adds	r3, #90	@ 0x5a
 8002042:	7d79      	ldrb	r1, [r7, #21]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	4623      	mov	r3, r4
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	f7ff fe3f 	bl	8001ccc <parse_cells>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	3301      	adds	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	79bb      	ldrb	r3, [r7, #6]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbcd      	blt.n	8001ffc <LTC681x_rdaux+0x44>
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 8002060:	7d7b      	ldrb	r3, [r7, #21]
 8002062:	3301      	adds	r3, #1
 8002064:	757b      	strb	r3, [r7, #21]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800206c:	7d7a      	ldrb	r2, [r7, #21]
 800206e:	429a      	cmp	r2, r3
 8002070:	d9bb      	bls.n	8001fea <LTC681x_rdaux+0x32>
 8002072:	e03a      	b.n	80020ea <LTC681x_rdaux+0x132>
      }
    }
  }
  else
  {
    LTC681x_rdaux_reg(reg, total_ic, data);
 8002074:	79b9      	ldrb	r1, [r7, #6]
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe97 	bl	8001dae <LTC681x_rdaux_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e02d      	b.n	80020e2 <LTC681x_rdaux+0x12a>
    {
      if (ic->isospi_reverse == false)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <LTC681x_rdaux+0xe4>
      {
        c_ic = current_ic;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	75bb      	strb	r3, [r7, #22]
 800209a:	e006      	b.n	80020aa <LTC681x_rdaux+0xf2>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	79ba      	ldrb	r2, [r7, #6]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = parse_cells(current_ic,reg, data,
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	b2d8      	uxtb	r0, r3
                              &ic[c_ic].aux.a_codes[0],
 80020ae:	7dbb      	ldrb	r3, [r7, #22]
 80020b0:	22e8      	movs	r2, #232	@ 0xe8
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 80020ba:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                              &ic[c_ic].aux.pec_match[0]);
 80020be:	7dbb      	ldrb	r3, [r7, #22]
 80020c0:	22e8      	movs	r2, #232	@ 0xe8
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 80020ca:	335a      	adds	r3, #90	@ 0x5a
 80020cc:	79f9      	ldrb	r1, [r7, #7]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4623      	mov	r3, r4
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f7ff fdfa 	bl	8001ccc <parse_cells>
 80020d8:	4603      	mov	r3, r0
 80020da:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	dbcd      	blt.n	8002086 <LTC681x_rdaux+0xce>
    }

  }
  LTC681x_check_pec(total_ic,AUX,ic);
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f885 	bl	8002200 <LTC681x_check_pec>
  free(data);
 80020f6:	68b8      	ldr	r0, [r7, #8]
 80020f8:	f00d fbd2 	bl	800f8a0 <free>
  return (pec_error);
 80020fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd90      	pop	{r4, r7, pc}

08002108 <LTC681x_wrcfg>:

//Write the LTC681x CFGRA
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]
                  )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0c4      	sub	sp, #272	@ 0x110
 800210c:	af00      	add	r7, sp, #0
 800210e:	4602      	mov	r2, r0
 8002110:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002114:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002118:	6019      	str	r1, [r3, #0]
 800211a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800211e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002122:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[2] = {0x00 , 0x01} ;
 8002124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002128:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
  uint8_t write_buffer[256];
  uint8_t write_count = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  uint8_t c_ic = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002138:	2300      	movs	r3, #0
 800213a:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800213e:	e045      	b.n	80021cc <LTC681x_wrcfg+0xc4>
  {
    if (ic->isospi_reverse == true)
 8002140:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002144:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <LTC681x_wrcfg+0x54>
    {
      c_ic = current_ic;
 8002152:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002156:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800215a:	e00b      	b.n	8002174 <LTC681x_wrcfg+0x6c>
    }
    else
    {
      c_ic = total_ic - current_ic - 1;
 800215c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002160:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    }

    for (uint8_t data = 0; data<6; data++)
 8002174:	2300      	movs	r3, #0
 8002176:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800217a:	e01e      	b.n	80021ba <LTC681x_wrcfg+0xb2>
    {
      write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800217c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002180:	22e8      	movs	r2, #232	@ 0xe8
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800218a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	18d1      	adds	r1, r2, r3
 8002192:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8002196:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800219a:	5c89      	ldrb	r1, [r1, r2]
 800219c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80021a0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80021a4:	54d1      	strb	r1, [r2, r3]
      write_count++;
 80021a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80021aa:	3301      	adds	r3, #1
 80021ac:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    for (uint8_t data = 0; data<6; data++)
 80021b0:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80021ba:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d9dc      	bls.n	800217c <LTC681x_wrcfg+0x74>
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80021c2:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80021c6:	3301      	adds	r3, #1
 80021c8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80021cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021d0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021d4:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3b0      	bcc.n	8002140 <LTC681x_wrcfg+0x38>
    }
  }
  write_68(total_ic, cmd, write_buffer);
 80021de:	f107 0208 	add.w	r2, r7, #8
 80021e2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80021e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021ea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fc01 	bl	80019f8 <write_68>
}
 80021f6:	bf00      	nop
 80021f8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <LTC681x_check_pec>:
  return(error);
}

//Helper function that increments PEC counters
void LTC681x_check_pec(uint8_t total_ic,uint8_t reg, cell_asic ic[])
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	@ 0x2c
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	603a      	str	r2, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	460b      	mov	r3, r1
 800220e:	71bb      	strb	r3, [r7, #6]
  switch (reg)
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	2b04      	cmp	r3, #4
 8002214:	f200 8191 	bhi.w	800253a <LTC681x_check_pec+0x33a>
 8002218:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <LTC681x_check_pec+0x20>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002235 	.word	0x08002235
 8002224:	08002331 	.word	0x08002331
 8002228:	080023e3 	.word	0x080023e3
 800222c:	0800248f 	.word	0x0800248f
 8002230:	080022b3 	.word	0x080022b3
  {
    case CFGRA:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
 8002238:	e036      	b.n	80022a8 <LTC681x_check_pec+0xa8>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	22e8      	movs	r2, #232	@ 0xe8
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	21e8      	movs	r1, #232	@ 0xe8
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	440b      	add	r3, r1
 8002256:	7b9b      	ldrb	r3, [r3, #14]
 8002258:	4618      	mov	r0, r3
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	21e8      	movs	r1, #232	@ 0xe8
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	6839      	ldr	r1, [r7, #0]
 8002264:	440b      	add	r3, r1
 8002266:	4402      	add	r2, r0
 8002268:	b292      	uxth	r2, r2
 800226a:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	22e8      	movs	r2, #232	@ 0xe8
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	21e8      	movs	r1, #232	@ 0xe8
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	440b      	add	r3, r1
 800228a:	7b9b      	ldrb	r3, [r3, #14]
 800228c:	4618      	mov	r0, r3
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	21e8      	movs	r1, #232	@ 0xe8
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	440b      	add	r3, r1
 800229a:	4402      	add	r2, r0
 800229c:	b292      	uxth	r2, r2
 800229e:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	3301      	adds	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbc4      	blt.n	800223a <LTC681x_check_pec+0x3a>
      }
      break;
 80022b0:	e144      	b.n	800253c <LTC681x_check_pec+0x33c>

    case CFGRB:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
 80022b6:	e036      	b.n	8002326 <LTC681x_check_pec+0x126>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	22e8      	movs	r2, #232	@ 0xe8
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	21e8      	movs	r1, #232	@ 0xe8
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	440b      	add	r3, r1
 80022d4:	7f5b      	ldrb	r3, [r3, #29]
 80022d6:	4618      	mov	r0, r3
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	21e8      	movs	r1, #232	@ 0xe8
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	440b      	add	r3, r1
 80022e4:	4402      	add	r2, r0
 80022e6:	b292      	uxth	r2, r2
 80022e8:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	22e8      	movs	r2, #232	@ 0xe8
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	21e8      	movs	r1, #232	@ 0xe8
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	440b      	add	r3, r1
 8002308:	7f5b      	ldrb	r3, [r3, #29]
 800230a:	4618      	mov	r0, r3
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	21e8      	movs	r1, #232	@ 0xe8
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	440b      	add	r3, r1
 8002318:	4402      	add	r2, r0
 800231a:	b292      	uxth	r2, r2
 800231c:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	3301      	adds	r3, #1
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	429a      	cmp	r2, r3
 800232c:	dbc4      	blt.n	80022b8 <LTC681x_check_pec+0xb8>
      }
      break;
 800232e:	e105      	b.n	800253c <LTC681x_check_pec+0x33c>
    case CELL:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	e050      	b.n	80023d8 <LTC681x_check_pec+0x1d8>
      {
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	e043      	b.n	80023c4 <LTC681x_check_pec+0x1c4>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	22e8      	movs	r2, #232	@ 0xe8
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	21e8      	movs	r1, #232	@ 0xe8
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	4419      	add	r1, r3
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	440b      	add	r3, r1
 800235c:	3342      	adds	r3, #66	@ 0x42
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	21e8      	movs	r1, #232	@ 0xe8
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	440b      	add	r3, r1
 800236e:	4402      	add	r2, r0
 8002370:	b292      	uxth	r2, r2
 8002372:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	22e8      	movs	r2, #232	@ 0xe8
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	441a      	add	r2, r3
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	3360      	adds	r3, #96	@ 0x60
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	889b      	ldrh	r3, [r3, #4]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	21e8      	movs	r1, #232	@ 0xe8
 8002390:	fb01 f202 	mul.w	r2, r1, r2
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	4411      	add	r1, r2
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	440a      	add	r2, r1
 800239c:	3242      	adds	r2, #66	@ 0x42
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	4610      	mov	r0, r2
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	21e8      	movs	r1, #232	@ 0xe8
 80023a6:	fb01 f202 	mul.w	r2, r1, r2
 80023aa:	6839      	ldr	r1, [r7, #0]
 80023ac:	440a      	add	r2, r1
 80023ae:	4403      	add	r3, r0
 80023b0:	b299      	uxth	r1, r3
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3360      	adds	r3, #96	@ 0x60
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	460a      	mov	r2, r1
 80023bc:	809a      	strh	r2, [r3, #4]
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80023ca:	461a      	mov	r2, r3
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	dbb4      	blt.n	800233c <LTC681x_check_pec+0x13c>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbaa      	blt.n	8002336 <LTC681x_check_pec+0x136>
        }
      }
      break;
 80023e0:	e0ac      	b.n	800253c <LTC681x_check_pec+0x33c>
    case AUX:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e04d      	b.n	8002484 <LTC681x_check_pec+0x284>
      {
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e040      	b.n	8002470 <LTC681x_check_pec+0x270>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	22e8      	movs	r2, #232	@ 0xe8
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	21e8      	movs	r1, #232	@ 0xe8
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	4419      	add	r1, r3
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	440b      	add	r3, r1
 800240e:	335a      	adds	r3, #90	@ 0x5a
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	21e8      	movs	r1, #232	@ 0xe8
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	440b      	add	r3, r1
 8002420:	4402      	add	r2, r0
 8002422:	b292      	uxth	r2, r2
 8002424:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	22e8      	movs	r2, #232	@ 0xe8
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	3268      	adds	r2, #104	@ 0x68
 8002438:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	21e8      	movs	r1, #232	@ 0xe8
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	4419      	add	r1, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	440b      	add	r3, r1
 800244c:	335a      	adds	r3, #90	@ 0x5a
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	21e8      	movs	r1, #232	@ 0xe8
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	6839      	ldr	r1, [r7, #0]
 800245c:	440b      	add	r3, r1
 800245e:	4402      	add	r2, r0
 8002460:	b291      	uxth	r1, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	3268      	adds	r2, #104	@ 0x68
 8002466:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	3301      	adds	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8002476:	461a      	mov	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4293      	cmp	r3, r2
 800247c:	dbb7      	blt.n	80023ee <LTC681x_check_pec+0x1ee>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbad      	blt.n	80023e8 <LTC681x_check_pec+0x1e8>
        }
      }

      break;
 800248c:	e056      	b.n	800253c <LTC681x_check_pec+0x33c>
    case STAT:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e04d      	b.n	8002530 <LTC681x_check_pec+0x330>
      {

        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	e040      	b.n	800251c <LTC681x_check_pec+0x31c>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	22e8      	movs	r2, #232	@ 0xe8
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	21e8      	movs	r1, #232	@ 0xe8
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	4419      	add	r1, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	440b      	add	r3, r1
 80024ba:	336b      	adds	r3, #107	@ 0x6b
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	21e8      	movs	r1, #232	@ 0xe8
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	440b      	add	r3, r1
 80024cc:	4402      	add	r2, r0
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	22e8      	movs	r2, #232	@ 0xe8
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	326c      	adds	r2, #108	@ 0x6c
 80024e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	21e8      	movs	r1, #232	@ 0xe8
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	4419      	add	r1, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	440b      	add	r3, r1
 80024f8:	336b      	adds	r3, #107	@ 0x6b
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	21e8      	movs	r1, #232	@ 0xe8
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	440b      	add	r3, r1
 800250a:	4402      	add	r2, r0
 800250c:	b291      	uxth	r1, r2
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	326c      	adds	r2, #108	@ 0x6c
 8002512:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8002522:	3b01      	subs	r3, #1
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	dbb7      	blt.n	800249a <LTC681x_check_pec+0x29a>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbad      	blt.n	8002494 <LTC681x_check_pec+0x294>
        }
      }
      break;
 8002538:	e000      	b.n	800253c <LTC681x_check_pec+0x33c>
    default:
      break;
 800253a:	bf00      	nop
  }
}
 800253c:	bf00      	nop
 800253e:	372c      	adds	r7, #44	@ 0x2c
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LTC681x_reset_crc_count>:

//Helper Function to reset PEC counters
void LTC681x_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e051      	b.n	80025fe <LTC681x_reset_crc_count+0xb6>
  {
    ic[current_ic].crc_count.pec_count = 0;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	22e8      	movs	r2, #232	@ 0xe8
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	2200      	movs	r2, #0
 8002568:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    ic[current_ic].crc_count.cfgr_pec = 0;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	22e8      	movs	r2, #232	@ 0xe8
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4413      	add	r3, r2
 8002578:	2200      	movs	r2, #0
 800257a:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
    for (int i=0; i<6; i++)
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e00e      	b.n	80025a2 <LTC681x_reset_crc_count+0x5a>
    {
      ic[current_ic].crc_count.cell_pec[i]=0;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	22e8      	movs	r2, #232	@ 0xe8
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	441a      	add	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	3360      	adds	r3, #96	@ 0x60
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	2200      	movs	r2, #0
 800259a:	809a      	strh	r2, [r3, #4]
    for (int i=0; i<6; i++)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	dded      	ble.n	8002584 <LTC681x_reset_crc_count+0x3c>

    }
    for (int i=0; i<4; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e00d      	b.n	80025ca <LTC681x_reset_crc_count+0x82>
    {
      ic[current_ic].crc_count.aux_pec[i]=0;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	22e8      	movs	r2, #232	@ 0xe8
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	3268      	adds	r2, #104	@ 0x68
 80025be:	2100      	movs	r1, #0
 80025c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<4; i++)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	ddee      	ble.n	80025ae <LTC681x_reset_crc_count+0x66>
    }
    for (int i=0; i<2; i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	e00d      	b.n	80025f2 <LTC681x_reset_crc_count+0xaa>
    {
      ic[current_ic].crc_count.stat_pec[i]=0;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	22e8      	movs	r2, #232	@ 0xe8
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	326c      	adds	r2, #108	@ 0x6c
 80025e6:	2100      	movs	r1, #0
 80025e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<2; i++)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	ddee      	ble.n	80025d6 <LTC681x_reset_crc_count+0x8e>
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	429a      	cmp	r2, r3
 8002604:	dba9      	blt.n	800255a <LTC681x_reset_crc_count+0x12>
    }
  }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LTC681x_init_cfg>:
*/
/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e015      	b.n	8002652 <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	e00c      	b.n	8002646 <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	22e8      	movs	r2, #232	@ 0xe8
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	441a      	add	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4413      	add	r3, r2
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b05      	cmp	r3, #5
 800264a:	ddef      	ble.n	800262c <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	3301      	adds	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3e5      	bcc.n	8002626 <LTC681x_init_cfg+0x12>
		}
	}
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6039      	str	r1, [r7, #0]
 8002670:	4611      	mov	r1, r2
 8002672:	461a      	mov	r2, r3
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	460b      	mov	r3, r1
 800267a:	71bb      	strb	r3, [r7, #6]
 800267c:	4613      	mov	r3, r2
 800267e:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8002680:	79ba      	ldrb	r2, [r7, #6]
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f828 	bl	80026dc <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 800268c:	797a      	ldrb	r2, [r7, #5]
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f856 	bl	8002744 <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f884 	bl	80027ac <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8ce 	bl	800284c <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f957 	bl	800296a <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 80026bc:	8bba      	ldrh	r2, [r7, #28]
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f9a1 	bl	8002a0a <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 80026c8:	8c3a      	ldrh	r2, [r7, #32]
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f9e1 	bl	8002a96 <LTC681x_set_cfgr_ov>
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <LTC681x_set_cfgr_refon>:

//Helper function to set the REFON bit
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic ic[], bool refon)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71bb      	strb	r3, [r7, #6]
  if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 80026ec:	79bb      	ldrb	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d011      	beq.n	8002716 <LTC681x_set_cfgr_refon+0x3a>
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	22e8      	movs	r2, #232	@ 0xe8
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	21e8      	movs	r1, #232	@ 0xe8
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	440b      	add	r3, r1
 800270c:	f042 0204 	orr.w	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8002714:	e010      	b.n	8002738 <LTC681x_set_cfgr_refon+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	22e8      	movs	r2, #232	@ 0xe8
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	21e8      	movs	r1, #232	@ 0xe8
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	440b      	add	r3, r1
 8002730:	f022 0204 	bic.w	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LTC681x_set_cfgr_adcopt>:

//Helper function to set the adcopt bit
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic ic[], bool adcopt)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	4613      	mov	r3, r2
 8002752:	71bb      	strb	r3, [r7, #6]
  if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8002754:	79bb      	ldrb	r3, [r7, #6]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d011      	beq.n	800277e <LTC681x_set_cfgr_adcopt+0x3a>
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	22e8      	movs	r2, #232	@ 0xe8
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4413      	add	r3, r2
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	21e8      	movs	r1, #232	@ 0xe8
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	440b      	add	r3, r1
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 800277c:	e010      	b.n	80027a0 <LTC681x_set_cfgr_adcopt+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	22e8      	movs	r2, #232	@ 0xe8
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4413      	add	r3, r2
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	21e8      	movs	r1, #232	@ 0xe8
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	440b      	add	r3, r1
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LTC681x_set_cfgr_gpio>:

//Helper function to set GPIO bits
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic ic[],bool gpio[5])
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<5; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e03b      	b.n	8002838 <LTC681x_set_cfgr_gpio+0x8c>
  {
    if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d018      	beq.n	80027fe <LTC681x_set_cfgr_gpio+0x52>
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	22e8      	movs	r2, #232	@ 0xe8
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b25a      	sxtb	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3303      	adds	r3, #3
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b259      	sxtb	r1, r3
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	22e8      	movs	r2, #232	@ 0xe8
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e019      	b.n	8002832 <LTC681x_set_cfgr_gpio+0x86>
    else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	22e8      	movs	r2, #232	@ 0xe8
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b25a      	sxtb	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3303      	adds	r3, #3
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	b25b      	sxtb	r3, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	b25b      	sxtb	r3, r3
 800281e:	4013      	ands	r3, r2
 8002820:	b259      	sxtb	r1, r3
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	22e8      	movs	r2, #232	@ 0xe8
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4413      	add	r3, r2
 800282e:	b2ca      	uxtb	r2, r1
 8002830:	701a      	strb	r2, [r3, #0]
  for (int i =0; i<5; i++)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b04      	cmp	r3, #4
 800283c:	ddc0      	ble.n	80027c0 <LTC681x_set_cfgr_gpio+0x14>
  }
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LTC681x_set_cfgr_dis>:

//Helper function to control discharge
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic ic[],bool dcc[12])
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<8; i++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e039      	b.n	80028d4 <LTC681x_set_cfgr_dis+0x88>
  {
    if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d017      	beq.n	800289c <LTC681x_set_cfgr_dis+0x50>
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	22e8      	movs	r2, #232	@ 0xe8
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	4413      	add	r3, r2
 8002878:	791b      	ldrb	r3, [r3, #4]
 800287a:	b25a      	sxtb	r2, r3
 800287c:	2101      	movs	r1, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	b25b      	sxtb	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b259      	sxtb	r1, r3
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	22e8      	movs	r2, #232	@ 0xe8
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4413      	add	r3, r2
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	711a      	strb	r2, [r3, #4]
 800289a:	e018      	b.n	80028ce <LTC681x_set_cfgr_dis+0x82>
    else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	22e8      	movs	r2, #232	@ 0xe8
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	4413      	add	r3, r2
 80028a8:	791b      	ldrb	r3, [r3, #4]
 80028aa:	b25a      	sxtb	r2, r3
 80028ac:	2101      	movs	r1, #1
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	4013      	ands	r3, r2
 80028bc:	b259      	sxtb	r1, r3
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	22e8      	movs	r2, #232	@ 0xe8
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4413      	add	r3, r2
 80028ca:	b2ca      	uxtb	r2, r1
 80028cc:	711a      	strb	r2, [r3, #4]
  for (int i =0; i<8; i++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b07      	cmp	r3, #7
 80028d8:	ddc2      	ble.n	8002860 <LTC681x_set_cfgr_dis+0x14>
  }
  for (int i =0; i<4; i++)
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	e03a      	b.n	8002956 <LTC681x_set_cfgr_dis+0x10a>
  {
    if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3308      	adds	r3, #8
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <LTC681x_set_cfgr_dis+0xd2>
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	22e8      	movs	r2, #232	@ 0xe8
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	795b      	ldrb	r3, [r3, #5]
 80028fc:	b25a      	sxtb	r2, r3
 80028fe:	2101      	movs	r1, #1
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	b25b      	sxtb	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b259      	sxtb	r1, r3
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	22e8      	movs	r2, #232	@ 0xe8
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	4413      	add	r3, r2
 8002918:	b2ca      	uxtb	r2, r1
 800291a:	715a      	strb	r2, [r3, #5]
 800291c:	e018      	b.n	8002950 <LTC681x_set_cfgr_dis+0x104>
    else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	22e8      	movs	r2, #232	@ 0xe8
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	4413      	add	r3, r2
 800292a:	795b      	ldrb	r3, [r3, #5]
 800292c:	b25a      	sxtb	r2, r3
 800292e:	2101      	movs	r1, #1
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	b25b      	sxtb	r3, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	b25b      	sxtb	r3, r3
 800293c:	4013      	ands	r3, r2
 800293e:	b259      	sxtb	r1, r3
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	22e8      	movs	r2, #232	@ 0xe8
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	4413      	add	r3, r2
 800294c:	b2ca      	uxtb	r2, r1
 800294e:	715a      	strb	r2, [r3, #5]
  for (int i =0; i<4; i++)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	3301      	adds	r3, #1
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b03      	cmp	r3, #3
 800295a:	ddc1      	ble.n	80028e0 <LTC681x_set_cfgr_dis+0x94>
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e03b      	b.n	80029f6 <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <LTC681x_set_cfgr_dcto+0x52>
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	22e8      	movs	r2, #232	@ 0xe8
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	795b      	ldrb	r3, [r3, #5]
 8002998:	b25a      	sxtb	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3304      	adds	r3, #4
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b259      	sxtb	r1, r3
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	22e8      	movs	r2, #232	@ 0xe8
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	b2ca      	uxtb	r2, r1
 80029b8:	715a      	strb	r2, [r3, #5]
 80029ba:	e019      	b.n	80029f0 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	22e8      	movs	r2, #232	@ 0xe8
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4413      	add	r3, r2
 80029c8:	795b      	ldrb	r3, [r3, #5]
 80029ca:	b25a      	sxtb	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3304      	adds	r3, #4
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	4013      	ands	r3, r2
 80029de:	b259      	sxtb	r1, r3
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	22e8      	movs	r2, #232	@ 0xe8
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	b2ca      	uxtb	r2, r1
 80029ee:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3301      	adds	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	ddc0      	ble.n	800297e <LTC681x_set_cfgr_dcto+0x14>
	}
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LTC681x_set_cfgr_uv>:

//Helper Function to set uv value in CFG register
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic ic[],uint16_t uv)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	6039      	str	r1, [r7, #0]
 8002a14:	71fb      	strb	r3, [r7, #7]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (uv/16)-1;
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	22e8      	movs	r2, #232	@ 0xe8
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	89fa      	ldrh	r2, [r7, #14]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	705a      	strb	r2, [r3, #1]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	22e8      	movs	r2, #232	@ 0xe8
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	789a      	ldrb	r2, [r3, #2]
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	21e8      	movs	r1, #232	@ 0xe8
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	440b      	add	r3, r1
 8002a50:	f022 020f 	bic.w	r2, r2, #15
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	22e8      	movs	r2, #232	@ 0xe8
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	789b      	ldrb	r3, [r3, #2]
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b259      	sxtb	r1, r3
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	22e8      	movs	r2, #232	@ 0xe8
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	b2ca      	uxtb	r2, r1
 8002a88:	709a      	strb	r2, [r3, #2]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LTC681x_set_cfgr_ov>:

//helper function to set OV value in CFG register
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic ic[],uint16_t ov)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	6039      	str	r1, [r7, #0]
 8002aa0:	71fb      	strb	r3, [r7, #7]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (ov/16);
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	b299      	uxth	r1, r3
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	22e8      	movs	r2, #232	@ 0xe8
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	b2ca      	uxtb	r2, r1
 8002ac0:	70da      	strb	r2, [r3, #3]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	22e8      	movs	r2, #232	@ 0xe8
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	789a      	ldrb	r2, [r3, #2]
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	21e8      	movs	r1, #232	@ 0xe8
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	440b      	add	r3, r1
 8002adc:	f002 020f 	and.w	r2, r2, #15
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	22e8      	movs	r2, #232	@ 0xe8
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	789b      	ldrb	r3, [r3, #2]
 8002af2:	b25a      	sxtb	r2, r3
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	4313      	orrs	r3, r2
 8002afe:	b259      	sxtb	r1, r3
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	22e8      	movs	r2, #232	@ 0xe8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	709a      	strb	r2, [r3, #2]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <cs_low>:
#include "LT_SPI.h"
#include "stm32l5xx_hal.h"
#include "spi.h"

void cs_low(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
    // Set chip select pin low.
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2110      	movs	r1, #16
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <cs_low+0x14>)
 8002b26:	f003 fe93 	bl	8006850 <HAL_GPIO_WritePin>
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	42020000 	.word	0x42020000

08002b34 <cs_high>:

void cs_high(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_SET);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <cs_high+0x14>)
 8002b3e:	f003 fe87 	bl	8006850 <HAL_GPIO_WritePin>
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	42020000 	.word	0x42020000

08002b4c <spi_write_array>:
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data, &ret_val, 1, HAL_MAX_DELAY);
}

void spi_write_array(uint8_t len,
                     uint8_t data[])
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
    uint8_t ret_val;
    uint8_t i;

    for ( i = 0; i < len; i++ )
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e00e      	b.n	8002b7c <spi_write_array+0x30>
    {
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data[i], &ret_val, 1, HAL_MAX_DELAY);
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	18d1      	adds	r1, r2, r3
 8002b64:	f107 020e 	add.w	r2, r7, #14
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <spi_write_array+0x44>)
 8002b72:	f007 fae6 	bl	800a142 <HAL_SPI_TransmitReceive>
    for ( i = 0; i < len; i++ )
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3ec      	bcc.n	8002b5e <spi_write_array+0x12>
    }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000048c 	.word	0x2000048c

08002b94 <spi_write_read>:

void spi_write_read(uint8_t  tx_Data[],
                    uint8_t  tx_len,
                    uint8_t* rx_data,
                    uint8_t  rx_len)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	72fb      	strb	r3, [r7, #11]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	72bb      	strb	r3, [r7, #10]
    uint8_t i;
    uint8_t data;

    // Transfer data to LTC6803
    for ( i = 0; i < tx_len; i++ )
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
 8002bac:	e00e      	b.n	8002bcc <spi_write_read+0x38>
    {
        // Transmit byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_Data[i], &data, 1, HAL_MAX_DELAY);
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	18d1      	adds	r1, r2, r3
 8002bb4:	f107 0216 	add.w	r2, r7, #22
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4813      	ldr	r0, [pc, #76]	@ (8002c10 <spi_write_read+0x7c>)
 8002bc2:	f007 fabe 	bl	800a142 <HAL_SPI_TransmitReceive>
    for ( i = 0; i < tx_len; i++ )
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
 8002bcc:	7dfa      	ldrb	r2, [r7, #23]
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3ec      	bcc.n	8002bae <spi_write_read+0x1a>
    }

    // Receive data from DC2259A board.
    uint8_t adress = 0xFF;
 8002bd4:	23ff      	movs	r3, #255	@ 0xff
 8002bd6:	757b      	strb	r3, [r7, #21]
    for ( i = 0; i < rx_len; i++ )
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]
 8002bdc:	e00e      	b.n	8002bfc <spi_write_read+0x68>
    {
        // Receive byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&adress, (uint8_t*)&rx_data[i], 1, HAL_MAX_DELAY);
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	441a      	add	r2, r3
 8002be4:	f107 0115 	add.w	r1, r7, #21
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <spi_write_read+0x7c>)
 8002bf2:	f007 faa6 	bl	800a142 <HAL_SPI_TransmitReceive>
    for ( i = 0; i < rx_len; i++ )
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	75fb      	strb	r3, [r7, #23]
 8002bfc:	7dfa      	ldrb	r2, [r7, #23]
 8002bfe:	7abb      	ldrb	r3, [r7, #10]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3ec      	bcc.n	8002bde <spi_write_read+0x4a>
    }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000048c 	.word	0x2000048c

08002c14 <spi_read_byte>:

// spi_read_byte

uint8_t spi_read_byte(uint8_t tx_dat)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if ( HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_dat, (uint8_t*)&data, 1, HAL_MAX_DELAY) == HAL_OK )
 8002c1e:	f107 020f 	add.w	r2, r7, #15
 8002c22:	1df9      	adds	r1, r7, #7
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4806      	ldr	r0, [pc, #24]	@ (8002c48 <spi_read_byte+0x34>)
 8002c2e:	f007 fa88 	bl	800a142 <HAL_SPI_TransmitReceive>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <spi_read_byte+0x28>
    {
        return(data);
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	e000      	b.n	8002c3e <spi_read_byte+0x2a>
    }
		return(-1);
 8002c3c:	23ff      	movs	r3, #255	@ 0xff
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000048c 	.word	0x2000048c

08002c4c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c6e:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c70:	4a32      	ldr	r2, [pc, #200]	@ (8002d3c <MX_ADC1_Init+0xf0>)
 8002c72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c74:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c86:	4b2c      	ldr	r3, [pc, #176]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c8e:	2204      	movs	r2, #4
 8002c90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c92:	4b29      	ldr	r3, [pc, #164]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c98:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ca4:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8002cac:	4b22      	ldr	r3, [pc, #136]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002cae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002cb4:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cd2:	4819      	ldr	r0, [pc, #100]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002cd4:	f001 fe0c 	bl	80048f0 <HAL_ADC_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002cde:	f000 fd71 	bl	80037c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4810      	ldr	r0, [pc, #64]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002cf6:	f002 fdf3 	bl	80058e0 <HAL_ADCEx_MultiModeConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002d00:	f000 fd60 	bl	80037c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d04:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <MX_ADC1_Init+0xf4>)
 8002d06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d08:	2306      	movs	r3, #6
 8002d0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <MX_ADC1_Init+0xf8>)
 8002d12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d14:	2304      	movs	r3, #4
 8002d16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_ADC1_Init+0xec>)
 8002d22:	f002 f8b3 	bl	8004e8c <HAL_ADC_ConfigChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002d2c:	f000 fd4a 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	@ 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000254 	.word	0x20000254
 8002d3c:	42028000 	.word	0x42028000
 8002d40:	0c900008 	.word	0x0c900008
 8002d44:	407f0000 	.word	0x407f0000

08002d48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d4e:	463b      	mov	r3, r7
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
 8002d5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002d5e:	4b26      	ldr	r3, [pc, #152]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d60:	4a26      	ldr	r2, [pc, #152]	@ (8002dfc <MX_ADC2_Init+0xb4>)
 8002d62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d7e:	2204      	movs	r2, #4
 8002d80:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002d82:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002d94:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002d9c:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002daa:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002db2:	4811      	ldr	r0, [pc, #68]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002db4:	f001 fd9c 	bl	80048f0 <HAL_ADC_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8002dbe:	f000 fd01 	bl	80037c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <MX_ADC2_Init+0xb8>)
 8002dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <MX_ADC2_Init+0xbc>)
 8002dd0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4806      	ldr	r0, [pc, #24]	@ (8002df8 <MX_ADC2_Init+0xb0>)
 8002de0:	f002 f854 	bl	8004e8c <HAL_ADC_ConfigChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8002dea:	f000 fceb 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200002bc 	.word	0x200002bc
 8002dfc:	42028100 	.word	0x42028100
 8002e00:	1d500080 	.word	0x1d500080
 8002e04:	407f0000 	.word	0x407f0000

08002e08 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0b0      	sub	sp, #192	@ 0xc0
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	2294      	movs	r2, #148	@ 0x94
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f00c fdef 	bl	800fa0c <memset>
  if(adcHandle->Instance==ADC1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8b      	ldr	r2, [pc, #556]	@ (8003060 <HAL_ADC_MspInit+0x258>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	f040 8085 	bne.w	8002f44 <HAL_ADC_MspInit+0x13c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002e40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8002e50:	230c      	movs	r3, #12
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002e54:	2307      	movs	r3, #7
 8002e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002e60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f006 f93a 	bl	80090e4 <HAL_RCCEx_PeriphCLKConfig>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8002e76:	f000 fca5 	bl	80037c4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003064 <HAL_ADC_MspInit+0x25c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a78      	ldr	r2, [pc, #480]	@ (8003064 <HAL_ADC_MspInit+0x25c>)
 8002e82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e84:	4b77      	ldr	r3, [pc, #476]	@ (8003064 <HAL_ADC_MspInit+0x25c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_ADC_MspInit+0x9c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002e8c:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e90:	4a75      	ldr	r2, [pc, #468]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002e92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e98:	4b73      	ldr	r3, [pc, #460]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea4:	4b70      	ldr	r3, [pc, #448]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea8:	4a6f      	ldr	r2, [pc, #444]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ChargeCurrent_Pin|ChargeCurrRef_Pin;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ece:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4865      	ldr	r0, [pc, #404]	@ (800306c <HAL_ADC_MspInit+0x264>)
 8002ed6:	f003 fb23 	bl	8006520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8002eda:	4b65      	ldr	r3, [pc, #404]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_ADC_MspInit+0x26c>)
 8002ede:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ee0:	4b63      	ldr	r3, [pc, #396]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002ee2:	2205      	movs	r2, #5
 8002ee4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee6:	4b62      	ldr	r3, [pc, #392]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eec:	4b60      	ldr	r3, [pc, #384]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002ef4:	2280      	movs	r2, #128	@ 0x80
 8002ef6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ef8:	4b5d      	ldr	r3, [pc, #372]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002efa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f00:	4b5b      	ldr	r3, [pc, #364]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f06:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f08:	4b59      	ldr	r3, [pc, #356]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f0e:	4b58      	ldr	r3, [pc, #352]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f14:	4856      	ldr	r0, [pc, #344]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f16:	f002 fe67 	bl	8005be8 <HAL_DMA_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_ADC_MspInit+0x11c>
    {
      Error_Handler();
 8002f20:	f000 fc50 	bl	80037c4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f24:	2110      	movs	r1, #16
 8002f26:	4852      	ldr	r0, [pc, #328]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f28:	f003 f881 	bl	800602e <HAL_DMA_ConfigChannelAttributes>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8002f32:	f000 fc47 	bl	80037c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4d      	ldr	r2, [pc, #308]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003070 <HAL_ADC_MspInit+0x268>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002f42:	e089      	b.n	8003058 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a4b      	ldr	r2, [pc, #300]	@ (8003078 <HAL_ADC_MspInit+0x270>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 8084 	bne.w	8003058 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002f56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002f5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8002f66:	230c      	movs	r3, #12
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002f72:	2302      	movs	r3, #2
 8002f74:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002f76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f7c:	f107 0318 	add.w	r3, r7, #24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f006 f8af 	bl	80090e4 <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8002f8c:	f000 fc1a 	bl	80037c4 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_ADC_MspInit+0x25c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a33      	ldr	r2, [pc, #204]	@ (8003064 <HAL_ADC_MspInit+0x25c>)
 8002f98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002f9a:	4b32      	ldr	r3, [pc, #200]	@ (8003064 <HAL_ADC_MspInit+0x25c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10b      	bne.n	8002fba <HAL_ADC_MspInit+0x1b2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002fa2:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4a30      	ldr	r2, [pc, #192]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002fa8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fae:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <HAL_ADC_MspInit+0x260>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DischgCurr_Pin|DischgCurrRef_Pin;
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4824      	ldr	r0, [pc, #144]	@ (800307c <HAL_ADC_MspInit+0x274>)
 8002fec:	f003 fa98 	bl	8006520 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8002ff0:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8002ff2:	4a24      	ldr	r2, [pc, #144]	@ (8003084 <HAL_ADC_MspInit+0x27c>)
 8002ff4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002ff6:	4b22      	ldr	r3, [pc, #136]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8002ff8:	2206      	movs	r2, #6
 8002ffa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffc:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003002:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003004:	2200      	movs	r2, #0
 8003006:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003008:	4b1d      	ldr	r3, [pc, #116]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 800300a:	2280      	movs	r2, #128	@ 0x80
 800300c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800300e:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003014:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003016:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800301c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800301e:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003020:	2220      	movs	r2, #32
 8003022:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003024:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800302a:	4815      	ldr	r0, [pc, #84]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 800302c:	f002 fddc 	bl	8005be8 <HAL_DMA_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_ADC_MspInit+0x232>
      Error_Handler();
 8003036:	f000 fbc5 	bl	80037c4 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800303a:	2110      	movs	r1, #16
 800303c:	4810      	ldr	r0, [pc, #64]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 800303e:	f002 fff6 	bl	800602e <HAL_DMA_ConfigChannelAttributes>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8003048:	f000 fbbc 	bl	80037c4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0c      	ldr	r2, [pc, #48]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003050:	651a      	str	r2, [r3, #80]	@ 0x50
 8003052:	4a0b      	ldr	r2, [pc, #44]	@ (8003080 <HAL_ADC_MspInit+0x278>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003058:	bf00      	nop
 800305a:	37c0      	adds	r7, #192	@ 0xc0
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	42028000 	.word	0x42028000
 8003064:	200003f4 	.word	0x200003f4
 8003068:	40021000 	.word	0x40021000
 800306c:	42020800 	.word	0x42020800
 8003070:	20000324 	.word	0x20000324
 8003074:	4002001c 	.word	0x4002001c
 8003078:	42028100 	.word	0x42028100
 800307c:	42020000 	.word	0x42020000
 8003080:	2000038c 	.word	0x2000038c
 8003084:	40020008 	.word	0x40020008

08003088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <MX_DMA_Init+0x60>)
 8003090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003092:	4a15      	ldr	r2, [pc, #84]	@ (80030e8 <MX_DMA_Init+0x60>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6493      	str	r3, [r2, #72]	@ 0x48
 800309a:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <MX_DMA_Init+0x60>)
 800309c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <MX_DMA_Init+0x60>)
 80030a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030aa:	4a0f      	ldr	r2, [pc, #60]	@ (80030e8 <MX_DMA_Init+0x60>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <MX_DMA_Init+0x60>)
 80030b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2105      	movs	r1, #5
 80030c2:	201d      	movs	r0, #29
 80030c4:	f002 fd68 	bl	8005b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030c8:	201d      	movs	r0, #29
 80030ca:	f002 fd7f 	bl	8005bcc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2105      	movs	r1, #5
 80030d2:	201e      	movs	r0, #30
 80030d4:	f002 fd60 	bl	8005b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80030d8:	201e      	movs	r0, #30
 80030da:	f002 fd77 	bl	8005bcc <HAL_NVIC_EnableIRQ>

}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000

080030ec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80030f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <MX_FDCAN1_Init+0x88>)
 80030f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003102:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 800310a:	2200      	movs	r2, #0
 800310c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800310e:	4b18      	ldr	r3, [pc, #96]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003110:	2200      	movs	r2, #0
 8003112:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003114:	4b16      	ldr	r3, [pc, #88]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003116:	2200      	movs	r2, #0
 8003118:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 800311c:	2210      	movs	r2, #16
 800311e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003120:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003122:	2201      	movs	r2, #1
 8003124:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8003126:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003128:	2201      	movs	r2, #1
 800312a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 800312c:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 800312e:	2201      	movs	r2, #1
 8003130:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003134:	2201      	movs	r2, #1
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 800313a:	2201      	movs	r2, #1
 800313c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003140:	2201      	movs	r2, #1
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003144:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003146:	2201      	movs	r2, #1
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 800314c:	2200      	movs	r2, #0
 800314e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003150:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003152:	2200      	movs	r2, #0
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 8003158:	2200      	movs	r2, #0
 800315a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800315c:	4804      	ldr	r0, [pc, #16]	@ (8003170 <MX_FDCAN1_Init+0x84>)
 800315e:	f003 f837 	bl	80061d0 <HAL_FDCAN_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003168:	f000 fb2c 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	200003f8 	.word	0x200003f8
 8003174:	4000a400 	.word	0x4000a400

08003178 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b0ae      	sub	sp, #184	@ 0xb8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003190:	f107 0310 	add.w	r3, r7, #16
 8003194:	2294      	movs	r2, #148	@ 0x94
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f00c fc37 	bl	800fa0c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a22      	ldr	r2, [pc, #136]	@ (800322c <HAL_FDCAN_MspInit+0xb4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d13d      	bne.n	8003224 <HAL_FDCAN_MspInit+0xac>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80031a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80031ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	4618      	mov	r0, r3
 80031ba:	f005 ff93 	bl	80090e4 <HAL_RCCEx_PeriphCLKConfig>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80031c4:	f000 fafe 	bl	80037c4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80031c8:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <HAL_FDCAN_MspInit+0xb8>)
 80031ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031cc:	4a18      	ldr	r2, [pc, #96]	@ (8003230 <HAL_FDCAN_MspInit+0xb8>)
 80031ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031d2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80031d4:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <HAL_FDCAN_MspInit+0xb8>)
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e0:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <HAL_FDCAN_MspInit+0xb8>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e4:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <HAL_FDCAN_MspInit+0xb8>)
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <HAL_FDCAN_MspInit+0xb8>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80031fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003212:	2309      	movs	r3, #9
 8003214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003218:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800321c:	4619      	mov	r1, r3
 800321e:	4805      	ldr	r0, [pc, #20]	@ (8003234 <HAL_FDCAN_MspInit+0xbc>)
 8003220:	f003 f97e 	bl	8006520 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003224:	bf00      	nop
 8003226:	37b8      	adds	r7, #184	@ 0xb8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	4000a400 	.word	0x4000a400
 8003230:	40021000 	.word	0x40021000
 8003234:	42020400 	.word	0x42020400

08003238 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	@ 0x28
 800323c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	4b71      	ldr	r3, [pc, #452]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	4a70      	ldr	r2, [pc, #448]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800325a:	4b6e      	ldr	r3, [pc, #440]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003266:	4b6b      	ldr	r3, [pc, #428]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	4a6a      	ldr	r2, [pc, #424]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 800326c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003272:	4b68      	ldr	r3, [pc, #416]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	4b65      	ldr	r3, [pc, #404]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	4a64      	ldr	r2, [pc, #400]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800328a:	4b62      	ldr	r3, [pc, #392]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	4b5f      	ldr	r3, [pc, #380]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329a:	4a5e      	ldr	r2, [pc, #376]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ae:	4b59      	ldr	r3, [pc, #356]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b2:	4a58      	ldr	r2, [pc, #352]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ba:	4b56      	ldr	r3, [pc, #344]	@ (8003414 <MX_GPIO_Init+0x1dc>)
 80032bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 80032c6:	2200      	movs	r2, #0
 80032c8:	f643 7111 	movw	r1, #16145	@ 0x3f11
 80032cc:	4852      	ldr	r0, [pc, #328]	@ (8003418 <MX_GPIO_Init+0x1e0>)
 80032ce:	f003 fabf 	bl	8006850 <HAL_GPIO_WritePin>
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A1_8_GPIO_Port, A1_8_Pin, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2101      	movs	r1, #1
 80032d6:	4851      	ldr	r0, [pc, #324]	@ (800341c <MX_GPIO_Init+0x1e4>)
 80032d8:	f003 faba 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|A1_2_Pin|A1_3_Pin|A1_4_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 80032e2:	484f      	ldr	r0, [pc, #316]	@ (8003420 <MX_GPIO_Init+0x1e8>)
 80032e4:	f003 fab4 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 80032e8:	2200      	movs	r2, #0
 80032ea:	f643 41f3 	movw	r1, #15603	@ 0x3cf3
 80032ee:	484d      	ldr	r0, [pc, #308]	@ (8003424 <MX_GPIO_Init+0x1ec>)
 80032f0:	f003 faae 	bl	8006850 <HAL_GPIO_WritePin>
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A0_4_GPIO_Port, A0_4_Pin, GPIO_PIN_RESET);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2104      	movs	r1, #4
 80032f8:	484b      	ldr	r0, [pc, #300]	@ (8003428 <MX_GPIO_Init+0x1f0>)
 80032fa:	f003 faa9 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_7_Pin WDT_Stm_Pin Enable1_Pin A1_1_Pin
                           A0_1_Pin A1_5_Pin A0_2_Pin A0_3_Pin */
  GPIO_InitStruct.Pin = A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 80032fe:	f643 7311 	movw	r3, #16145	@ 0x3f11
 8003302:	617b      	str	r3, [r7, #20]
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	2301      	movs	r3, #1
 8003306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4619      	mov	r1, r3
 8003316:	4840      	ldr	r0, [pc, #256]	@ (8003418 <MX_GPIO_Init+0x1e0>)
 8003318:	f003 f902 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : A1_8_Pin */
  GPIO_InitStruct.Pin = A1_8_Pin;
 800331c:	2301      	movs	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	2301      	movs	r3, #1
 8003322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A1_8_GPIO_Port, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	483a      	ldr	r0, [pc, #232]	@ (800341c <MX_GPIO_Init+0x1e4>)
 8003334:	f003 f8f4 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_8_Pin */
  GPIO_InitStruct.Pin = A0_8_Pin;
 8003338:	2302      	movs	r3, #2
 800333a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_8_GPIO_Port, &GPIO_InitStruct);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4619      	mov	r1, r3
 800334a:	4834      	ldr	r0, [pc, #208]	@ (800341c <MX_GPIO_Init+0x1e4>)
 800334c:	f003 f8e8 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : HardwareFault_Pin OutputEnable_Pin */
  GPIO_InitStruct.Pin = HardwareFault_Pin|OutputEnable_Pin;
 8003350:	2322      	movs	r3, #34	@ 0x22
 8003352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	482d      	ldr	r0, [pc, #180]	@ (8003418 <MX_GPIO_Init+0x1e0>)
 8003364:	f003 f8dc 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTCSelfTestOK_Pin LTCSelfTest_Pin */
  GPIO_InitStruct.Pin = LTCSelfTestOK_Pin|LTCSelfTest_Pin;
 8003368:	2303      	movs	r3, #3
 800336a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4619      	mov	r1, r3
 800337a:	4829      	ldr	r0, [pc, #164]	@ (8003420 <MX_GPIO_Init+0x1e8>)
 800337c:	f003 f8d0 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin A1_2_Pin A1_3_Pin A1_4_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|A1_2_Pin|A1_3_Pin|A1_4_Pin;
 8003380:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	4821      	ldr	r0, [pc, #132]	@ (8003420 <MX_GPIO_Init+0x1e8>)
 800339a:	f003 f8c1 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable2_Pin ErrorReset_Pin LED_A_Pin LED_R_Pin
                           LED_Y_Pin LED_G_Pin A0_5_Pin A1_6_Pin
                           A0_6_Pin A0_7_Pin */
  GPIO_InitStruct.Pin = Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 800339e:	f643 43f3 	movw	r3, #15603	@ 0x3cf3
 80033a2:	617b      	str	r3, [r7, #20]
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	481b      	ldr	r0, [pc, #108]	@ (8003424 <MX_GPIO_Init+0x1ec>)
 80033b8:	f003 f8b2 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Config4_Pin Config3_Pin */
  GPIO_InitStruct.Pin = Config4_Pin|Config3_Pin;
 80033bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80033c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	4814      	ldr	r0, [pc, #80]	@ (8003424 <MX_GPIO_Init+0x1ec>)
 80033d2:	f003 f8a5 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Config2_Pin Config1_Pin */
  GPIO_InitStruct.Pin = Config2_Pin|Config1_Pin;
 80033d6:	23c0      	movs	r3, #192	@ 0xc0
 80033d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	480b      	ldr	r0, [pc, #44]	@ (8003418 <MX_GPIO_Init+0x1e0>)
 80033ea:	f003 f899 	bl	8006520 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_4_Pin */
  GPIO_InitStruct.Pin = A0_4_Pin;
 80033ee:	2304      	movs	r3, #4
 80033f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A0_4_GPIO_Port, &GPIO_InitStruct);
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	4619      	mov	r1, r3
 8003404:	4808      	ldr	r0, [pc, #32]	@ (8003428 <MX_GPIO_Init+0x1f0>)
 8003406:	f003 f88b 	bl	8006520 <HAL_GPIO_Init>

}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	@ 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	42020800 	.word	0x42020800
 800341c:	42021c00 	.word	0x42021c00
 8003420:	42020000 	.word	0x42020000
 8003424:	42020400 	.word	0x42020400
 8003428:	42020c00 	.word	0x42020c00

0800342c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003430:	2000      	movs	r0, #0
 8003432:	f003 fa3f 	bl	80068b4 <HAL_ICACHE_ConfigAssociativityMode>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800343c:	f000 f9c2 	bl	80037c4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003440:	f003 fa58 	bl	80068f4 <HAL_ICACHE_Enable>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800344a:	f000 f9bb 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003458:	f001 f803 	bl	8004462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800345c:	f000 f8f8 	bl	8003650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003460:	f7ff feea 	bl	8003238 <MX_GPIO_Init>
  MX_DMA_Init();
 8003464:	f7ff fe10 	bl	8003088 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003468:	f7ff fe40 	bl	80030ec <MX_FDCAN1_Init>
  MX_RTC_Init();
 800346c:	f000 f9b0 	bl	80037d0 <MX_RTC_Init>
  MX_ADC1_Init();
 8003470:	f7ff fbec 	bl	8002c4c <MX_ADC1_Init>
  MX_SPI1_Init();
 8003474:	f000 fa66 	bl	8003944 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8003478:	f7ff ffd8 	bl	800342c <MX_ICACHE_Init>
  MX_ADC2_Init();
 800347c:	f7ff fc64 	bl	8002d48 <MX_ADC2_Init>
  MX_TIM2_Init();
 8003480:	f000 fd2a 	bl	8003ed8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003484:	f000 fd9c 	bl	8003fc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003488:	f000 fe12 	bl	80040b0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800348c:	f000 fe88 	bl	80041a0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8003490:	f000 fcce 	bl	8003e30 <MX_TIM1_Init>
  MX_TIM7_Init();
 8003494:	f000 fed6 	bl	8004244 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LTC6811_init();	//initializes the LTC (and SPI communication)
 8003498:	f7fd fb8e 	bl	8000bb8 <LTC6811_init>

  SetHardwareProtection();	//sets the hardware protection configuration pins to the correct values
 800349c:	f7fe f89e 	bl	80015dc <SetHardwareProtection>
  HAL_Delay(100);	//wait for 100ms to ensure the hardware protection is set
 80034a0:	2064      	movs	r0, #100	@ 0x64
 80034a2:	f001 f819 	bl	80044d8 <HAL_Delay>

  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);	//turn off red LED
 80034a6:	2200      	movs	r2, #0
 80034a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80034ac:	4856      	ldr	r0, [pc, #344]	@ (8003608 <main+0x1b4>)
 80034ae:	f003 f9cf 	bl	8006850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);	//turn off amber LED
 80034b2:	2200      	movs	r2, #0
 80034b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034b8:	4853      	ldr	r0, [pc, #332]	@ (8003608 <main+0x1b4>)
 80034ba:	f003 f9c9 	bl	8006850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);	//turn off yellow LED
 80034be:	2200      	movs	r2, #0
 80034c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034c4:	4850      	ldr	r0, [pc, #320]	@ (8003608 <main+0x1b4>)
 80034c6:	f003 f9c3 	bl	8006850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);	//turn off green LED
 80034ca:	2200      	movs	r2, #0
 80034cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034d0:	484d      	ldr	r0, [pc, #308]	@ (8003608 <main+0x1b4>)
 80034d2:	f003 f9bd 	bl	8006850 <HAL_GPIO_WritePin>

  //START ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcVal[0], 1);
 80034d6:	4b4d      	ldr	r3, [pc, #308]	@ (800360c <main+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2201      	movs	r2, #1
 80034dc:	4619      	mov	r1, r3
 80034de:	484c      	ldr	r0, [pc, #304]	@ (8003610 <main+0x1bc>)
 80034e0:	f001 fc0c 	bl	8004cfc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adcVal[1], 1);
 80034e4:	4b49      	ldr	r3, [pc, #292]	@ (800360c <main+0x1b8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4619      	mov	r1, r3
 80034ec:	4849      	ldr	r0, [pc, #292]	@ (8003614 <main+0x1c0>)
 80034ee:	f001 fc05 	bl	8004cfc <HAL_ADC_Start_DMA>

  //START TIMERS
  HAL_TIM_Base_Start_IT(&htim5); // Triggers Reading of aux conversion
 80034f2:	4849      	ldr	r0, [pc, #292]	@ (8003618 <main+0x1c4>)
 80034f4:	f007 fa04 	bl	800a900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Triggers aux conversion ad ADCs
 80034f8:	4848      	ldr	r0, [pc, #288]	@ (800361c <main+0x1c8>)
 80034fa:	f007 fa01 	bl	800a900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // Triggers Reading of voltage conversion
 80034fe:	4848      	ldr	r0, [pc, #288]	@ (8003620 <main+0x1cc>)
 8003500:	f007 f9fe 	bl	800a900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // Triggers voltage conversion
 8003504:	4847      	ldr	r0, [pc, #284]	@ (8003624 <main+0x1d0>)
 8003506:	f007 f9fb 	bl	800a900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // 3khz clock for LTC6801
 800350a:	4847      	ldr	r0, [pc, #284]	@ (8003628 <main+0x1d4>)
 800350c:	f007 f9f8 	bl	800a900 <HAL_TIM_Base_Start_IT>

  HAL_Delay(100);	//wait for 100ms to ensure the system is stable
 8003510:	2064      	movs	r0, #100	@ 0x64
 8003512:	f000 ffe1 	bl	80044d8 <HAL_Delay>
  resetOutputLatch();	//reset the output latch
 8003516:	f7fd fcfb 	bl	8000f10 <resetOutputLatch>
  HAL_TIM_Base_Start_IT(&htim1); // pseudo watchdog timer, needs to be reset every 0.5s
 800351a:	4844      	ldr	r0, [pc, #272]	@ (800362c <main+0x1d8>)
 800351c:	f007 f9f0 	bl	800a900 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FLAG_TIM2){
 8003520:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <main+0x1dc>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <main+0xea>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8003528:	2001      	movs	r0, #1
 800352a:	f7fe fa04 	bl	8001936 <wakeup_idle>
		  LTC6811_adcv(MD_422HZ_1KHZ, DCP_DISABLED, CELL_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	2000      	movs	r0, #0
 8003534:	f7fe f95d 	bl	80017f2 <LTC6811_adcv>
		  FLAG_TIM2 = false;	//sets the flag to false
 8003538:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <main+0x1dc>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
	  }
	  if(FLAG_TIM3){
 800353e:	4b3d      	ldr	r3, [pc, #244]	@ (8003634 <main+0x1e0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <main+0x102>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8003546:	2001      	movs	r0, #1
 8003548:	f7fe f9f5 	bl	8001936 <wakeup_idle>
		  readVoltages();	//reads the cell voltages
 800354c:	f7fd fc40 	bl	8000dd0 <readVoltages>
		  FLAG_TIM3 = false;	//sets the flag to false
 8003550:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <main+0x1e0>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
	  }
	  if(FLAG_TIM4){
 8003556:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <main+0x1e4>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00f      	beq.n	800357e <main+0x12a>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 800355e:	2001      	movs	r0, #1
 8003560:	f7fe f9e9 	bl	8001936 <wakeup_idle>
		  LTC6811_adax(MD_422HZ_1KHZ, AUX_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 8003564:	2100      	movs	r1, #0
 8003566:	2000      	movs	r0, #0
 8003568:	f7fe f956 	bl	8001818 <LTC6811_adax>
		  FLAG_TIM4 = false;	//sets the flag to false
 800356c:	4b32      	ldr	r3, [pc, #200]	@ (8003638 <main+0x1e4>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start(&hadc1);	//start ADC conversion for current sensor
 8003572:	4827      	ldr	r0, [pc, #156]	@ (8003610 <main+0x1bc>)
 8003574:	f001 fb08 	bl	8004b88 <HAL_ADC_Start>
		  HAL_ADC_Start(&hadc2);	//start ADC conversion for current sensor
 8003578:	4826      	ldr	r0, [pc, #152]	@ (8003614 <main+0x1c0>)
 800357a:	f001 fb05 	bl	8004b88 <HAL_ADC_Start>
//		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_Y_Pin);
	  }
	  if(FLAG_TIM5){
 800357e:	4b2f      	ldr	r3, [pc, #188]	@ (800363c <main+0x1e8>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d014      	beq.n	80035b0 <main+0x15c>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8003586:	2001      	movs	r0, #1
 8003588:	f7fe f9d5 	bl	8001936 <wakeup_idle>
		  readTemperatures();	//reads the cell voltages
 800358c:	f7fd fc7a 	bl	8000e84 <readTemperatures>
		  tempConvert();	//converts the ADC values into temperature
 8003590:	f7fd fb5e 	bl	8000c50 <tempConvert>
		  currentConvert();
 8003594:	f7fd fc88 	bl	8000ea8 <currentConvert>
//		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);

		  FLAG_TIM5 = false;
 8003598:	4b28      	ldr	r3, [pc, #160]	@ (800363c <main+0x1e8>)
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
		  FLAG_MainTask1 = true;
 800359e:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <main+0x1ec>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		  FLAG_MainTask2 = true;
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <main+0x1f0>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
		  FLAG_MainTask3 = true;
 80035aa:	4b27      	ldr	r3, [pc, #156]	@ (8003648 <main+0x1f4>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
	  }
	  //reset the timer 1 counter (watchdog)
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80035b0:	4b1e      	ldr	r3, [pc, #120]	@ (800362c <main+0x1d8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_GPIO_WritePin(Enable2_GPIO_Port, Enable2_Pin, GPIO_PIN_SET);
	  }else{
		  HAL_GPIO_WritePin(Enable2_GPIO_Port, Enable2_Pin, GPIO_PIN_RESET);
	  }
	  */
	  if(HAL_GPIO_ReadPin(Config1_GPIO_Port, Config1_Pin) == GPIO_PIN_RESET){
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	4824      	ldr	r0, [pc, #144]	@ (800364c <main+0x1f8>)
 80035bc:	f003 f930 	bl	8006820 <HAL_GPIO_ReadPin>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <main+0x176>
		  resetOutputLatch();	//reset the output latch if Config1 is pressed
 80035c6:	f7fd fca3 	bl	8000f10 <resetOutputLatch>
	  }
	  if(FLAG_MainTask1){
 80035ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <main+0x1ec>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <main+0x18a>
		  errorCheck();
 80035d2:	f7fd fccb 	bl	8000f6c <errorCheck>
		  FLAG_MainTask1 = false;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <main+0x1ec>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e7a0      	b.n	8003520 <main+0xcc>
	  }else if(FLAG_MainTask2){
 80035de:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <main+0x1f0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <main+0x19a>
//		  balancingControl();
		  FLAG_MainTask2 = false;
 80035e6:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <main+0x1f0>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e798      	b.n	8003520 <main+0xcc>
	  }else if(FLAG_MainTask3){
 80035ee:	4b16      	ldr	r3, [pc, #88]	@ (8003648 <main+0x1f4>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d094      	beq.n	8003520 <main+0xcc>
		  outputControl();
 80035f6:	f7fd ffd7 	bl	80015a8 <outputControl>
		  LEDControl();
 80035fa:	f7fd ff93 	bl	8001524 <LEDControl>
		  FLAG_MainTask3 = false;
 80035fe:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <main+0x1f4>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	  if(FLAG_TIM2){
 8003604:	e78c      	b.n	8003520 <main+0xcc>
 8003606:	bf00      	nop
 8003608:	42020400 	.word	0x42020400
 800360c:	200001bc 	.word	0x200001bc
 8003610:	20000254 	.word	0x20000254
 8003614:	200002bc 	.word	0x200002bc
 8003618:	20000670 	.word	0x20000670
 800361c:	20000624 	.word	0x20000624
 8003620:	200005d8 	.word	0x200005d8
 8003624:	2000058c 	.word	0x2000058c
 8003628:	200006bc 	.word	0x200006bc
 800362c:	20000540 	.word	0x20000540
 8003630:	2000045c 	.word	0x2000045c
 8003634:	2000045d 	.word	0x2000045d
 8003638:	2000045e 	.word	0x2000045e
 800363c:	2000045f 	.word	0x2000045f
 8003640:	20000460 	.word	0x20000460
 8003644:	20000461 	.word	0x20000461
 8003648:	20000462 	.word	0x20000462
 800364c:	42020800 	.word	0x42020800

08003650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b098      	sub	sp, #96	@ 0x60
 8003654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	2248      	movs	r2, #72	@ 0x48
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f00c f9d4 	bl	800fa0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8003672:	2000      	movs	r0, #0
 8003674:	f004 fcd2 	bl	800801c <HAL_PWREx_ControlVoltageScaling>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800367e:	f000 f8a1 	bl	80037c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003682:	231a      	movs	r3, #26
 8003684:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800368c:	2300      	movs	r3, #0
 800368e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003690:	2340      	movs	r3, #64	@ 0x40
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003694:	2301      	movs	r3, #1
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003698:	2301      	movs	r3, #1
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800369c:	2300      	movs	r3, #0
 800369e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80036a0:	2370      	movs	r3, #112	@ 0x70
 80036a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036a4:	2302      	movs	r3, #2
 80036a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036a8:	2302      	movs	r3, #2
 80036aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80036ac:	2302      	movs	r3, #2
 80036ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80036b0:	2318      	movs	r3, #24
 80036b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036b4:	2307      	movs	r3, #7
 80036b6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80036b8:	2304      	movs	r3, #4
 80036ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036bc:	2302      	movs	r3, #2
 80036be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 fd39 	bl	800813c <HAL_RCC_OscConfig>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80036d0:	f000 f878 	bl	80037c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d4:	230f      	movs	r3, #15
 80036d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036d8:	2303      	movs	r3, #3
 80036da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036e8:	1d3b      	adds	r3, r7, #4
 80036ea:	2104      	movs	r1, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f005 f9fb 	bl	8008ae8 <HAL_RCC_ClockConfig>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80036f8:	f000 f864 	bl	80037c4 <Error_Handler>
  }
}
 80036fc:	bf00      	nop
 80036fe:	3760      	adds	r7, #96	@ 0x60
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//handle the DMA interrupt
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	currentConvert();	//convert ADC values into current sensor skaling 19.8mV/A
 800370c:	f7fd fbcc 	bl	8000ea8 <currentConvert>
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//timers to control the LTC6811 value reading
	//TIM2 starts first and then triggers TIM3, which triggers TIM4, which triggers TIM5.
	//These 4 timers run in a loop at 5Hz each, and 20Hz overall
	//TIM2 starts cell voltage conversion
	if(htim->Instance == TIM2){
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003728:	d103      	bne.n	8003732 <HAL_TIM_PeriodElapsedCallback+0x1a>
		FLAG_TIM2 = true;	//sets the flag to true
 800372a:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e019      	b.n	8003766 <HAL_TIM_PeriodElapsedCallback+0x4e>

	//TIM3 reads cell voltages
	}else if(htim->Instance == TIM3){
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a19      	ldr	r2, [pc, #100]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <HAL_TIM_PeriodElapsedCallback+0x2c>
		FLAG_TIM3 = true;	//sets the flag to true
 800373c:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e010      	b.n	8003766 <HAL_TIM_PeriodElapsedCallback+0x4e>

	//TIM4 starts aux voltage conversion
	}else if(htim->Instance == TIM4){
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d103      	bne.n	8003756 <HAL_TIM_PeriodElapsedCallback+0x3e>
		FLAG_TIM4 = true;	//sets the flag to true
 800374e:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e007      	b.n	8003766 <HAL_TIM_PeriodElapsedCallback+0x4e>

	//TIM5 reads aux voltage conversion
	}else if(htim->Instance == TIM5){
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_TIM_PeriodElapsedCallback+0x4e>
		FLAG_TIM5 = true;	//sets the flag to true
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);	//toggles green LED
	}
	if(htim->Instance == TIM7){
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a12      	ldr	r2, [pc, #72]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d107      	bne.n	8003780 <HAL_TIM_PeriodElapsedCallback+0x68>
		if(FLAG_WDT){
 8003770:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_TogglePin(WDT_Stm_GPIO_Port, WDT_Stm_Pin);	//toggles external watchdog
 8003778:	2101      	movs	r1, #1
 800377a:	4810      	ldr	r0, [pc, #64]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800377c:	f003 f880 	bl	8006880 <HAL_GPIO_TogglePin>
	if(htim->Instance == TIM1){
//		FLAG_WDT = false;	//watchdog fired, stop output toggling
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0e      	ldr	r2, [pc, #56]	@ (80037c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_TIM_PeriodElapsedCallback+0x76>
  {
    HAL_IncTick();
 800378a:	f000 fe85 	bl	8004498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000045c 	.word	0x2000045c
 800379c:	40000400 	.word	0x40000400
 80037a0:	2000045d 	.word	0x2000045d
 80037a4:	40000800 	.word	0x40000800
 80037a8:	2000045e 	.word	0x2000045e
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	2000045f 	.word	0x2000045f
 80037b4:	40001400 	.word	0x40001400
 80037b8:	2000001d 	.word	0x2000001d
 80037bc:	42020800 	.word	0x42020800
 80037c0:	40001000 	.word	0x40001000

080037c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c8:	b672      	cpsid	i
}
 80037ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <Error_Handler+0x8>

080037d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	@ 0x30
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80037d6:	f107 0318 	add.w	r3, r7, #24
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	611a      	str	r2, [r3, #16]
 80037e6:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80037f6:	2300      	movs	r3, #0
 80037f8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037fa:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <MX_RTC_Init+0xf0>)
 80037fc:	4a31      	ldr	r2, [pc, #196]	@ (80038c4 <MX_RTC_Init+0xf4>)
 80037fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003800:	4b2f      	ldr	r3, [pc, #188]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003802:	2200      	movs	r2, #0
 8003804:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003806:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003808:	227f      	movs	r2, #127	@ 0x7f
 800380a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <MX_RTC_Init+0xf0>)
 800380e:	22ff      	movs	r2, #255	@ 0xff
 8003810:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003812:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003814:	2200      	movs	r2, #0
 8003816:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003818:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <MX_RTC_Init+0xf0>)
 800381a:	2200      	movs	r2, #0
 800381c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800381e:	4b28      	ldr	r3, [pc, #160]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003820:	2200      	movs	r2, #0
 8003822:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800382a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <MX_RTC_Init+0xf0>)
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003832:	4823      	ldr	r0, [pc, #140]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003834:	f006 f96c 	bl	8009b10 <HAL_RTC_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 800383e:	f7ff ffc1 	bl	80037c4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800384a:	2300      	movs	r3, #0
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003852:	f107 0318 	add.w	r3, r7, #24
 8003856:	4619      	mov	r1, r3
 8003858:	4819      	ldr	r0, [pc, #100]	@ (80038c0 <MX_RTC_Init+0xf0>)
 800385a:	f006 fba3 	bl	8009fa4 <HAL_RTCEx_PrivilegeModeSet>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003864:	f7ff ffae 	bl	80037c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003868:	2300      	movs	r3, #0
 800386a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800386c:	2300      	movs	r3, #0
 800386e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003870:	2300      	movs	r3, #0
 8003872:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	2201      	movs	r2, #1
 8003880:	4619      	mov	r1, r3
 8003882:	480f      	ldr	r0, [pc, #60]	@ (80038c0 <MX_RTC_Init+0xf0>)
 8003884:	f006 f9bc 	bl	8009c00 <HAL_RTC_SetTime>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800388e:	f7ff ff99 	bl	80037c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003892:	2301      	movs	r3, #1
 8003894:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003896:	2301      	movs	r3, #1
 8003898:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800389a:	2301      	movs	r3, #1
 800389c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800389e:	2300      	movs	r3, #0
 80038a0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038a2:	463b      	mov	r3, r7
 80038a4:	2201      	movs	r2, #1
 80038a6:	4619      	mov	r1, r3
 80038a8:	4805      	ldr	r0, [pc, #20]	@ (80038c0 <MX_RTC_Init+0xf0>)
 80038aa:	f006 fa3f 	bl	8009d2c <HAL_RTC_SetDate>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 80038b4:	f7ff ff86 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038b8:	bf00      	nop
 80038ba:	3730      	adds	r7, #48	@ 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000464 	.word	0x20000464
 80038c4:	40002800 	.word	0x40002800

080038c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b0a8      	sub	sp, #160	@ 0xa0
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	2294      	movs	r2, #148	@ 0x94
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f00c f897 	bl	800fa0c <memset>
  if(rtcHandle->Instance==RTC)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	@ (800393c <HAL_RTC_MspInit+0x74>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d124      	bne.n	8003932 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	4618      	mov	r0, r3
 80038fc:	f005 fbf2 	bl	80090e4 <HAL_RCCEx_PeriphCLKConfig>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003906:	f7ff ff5d 	bl	80037c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_RTC_MspInit+0x78>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003910:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <HAL_RTC_MspInit+0x78>)
 8003912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_RTC_MspInit+0x78>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <HAL_RTC_MspInit+0x78>)
 8003920:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003924:	6593      	str	r3, [r2, #88]	@ 0x58
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RTC_MspInit+0x78>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003932:	bf00      	nop
 8003934:	37a0      	adds	r7, #160	@ 0xa0
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40002800 	.word	0x40002800
 8003940:	40021000 	.word	0x40021000

08003944 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <MX_SPI1_Init+0x74>)
 800394a:	4a1c      	ldr	r2, [pc, #112]	@ (80039bc <MX_SPI1_Init+0x78>)
 800394c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800394e:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003956:	4b18      	ldr	r3, [pc, #96]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800395c:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <MX_SPI1_Init+0x74>)
 800395e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003962:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003964:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003966:	2202      	movs	r2, #2
 8003968:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800396a:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <MX_SPI1_Init+0x74>)
 800396c:	2201      	movs	r2, #1
 800396e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003976:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003978:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <MX_SPI1_Init+0x74>)
 800397a:	2230      	movs	r2, #48	@ 0x30
 800397c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800397e:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003986:	2200      	movs	r2, #0
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <MX_SPI1_Init+0x74>)
 800398c:	2200      	movs	r2, #0
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003990:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003992:	2207      	movs	r2, #7
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003996:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <MX_SPI1_Init+0x74>)
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800399c:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <MX_SPI1_Init+0x74>)
 800399e:	2200      	movs	r2, #0
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a2:	4805      	ldr	r0, [pc, #20]	@ (80039b8 <MX_SPI1_Init+0x74>)
 80039a4:	f006 fb2a 	bl	8009ffc <HAL_SPI_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039ae:	f7ff ff09 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	2000048c 	.word	0x2000048c
 80039bc:	40013000 	.word	0x40013000

080039c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_SPI_MspInit+0x7c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d127      	bne.n	8003a32 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e2:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <HAL_SPI_MspInit+0x80>)
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <HAL_SPI_MspInit+0x80>)
 80039e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80039ee:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <HAL_SPI_MspInit+0x80>)
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fa:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <HAL_SPI_MspInit+0x80>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	4a10      	ldr	r2, [pc, #64]	@ (8003a40 <HAL_SPI_MspInit+0x80>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a06:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_SPI_MspInit+0x80>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a12:	23e0      	movs	r3, #224	@ 0xe0
 8003a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a22:	2305      	movs	r3, #5
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4805      	ldr	r0, [pc, #20]	@ (8003a44 <HAL_SPI_MspInit+0x84>)
 8003a2e:	f002 fd77 	bl	8006520 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a32:	bf00      	nop
 8003a34:	3728      	adds	r7, #40	@ 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40013000 	.word	0x40013000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	42020000 	.word	0x42020000

08003a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_MspInit+0x50>)
 8003a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a52:	4a11      	ldr	r2, [pc, #68]	@ (8003a98 <HAL_MspInit+0x50>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <HAL_MspInit+0x50>)
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <HAL_MspInit+0x50>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a98 <HAL_MspInit+0x50>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_MspInit+0x50>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2107      	movs	r1, #7
 8003a82:	f06f 0001 	mvn.w	r0, #1
 8003a86:	f002 f887 	bl	8005b98 <HAL_NVIC_SetPriority>

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a8a:	f004 fb23 	bl	80080d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000

08003a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	@ 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8003aac:	2200      	movs	r2, #0
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	2031      	movs	r0, #49	@ 0x31
 8003ab2:	f002 f871 	bl	8005b98 <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003ab6:	2031      	movs	r0, #49	@ 0x31
 8003ab8:	f002 f888 	bl	8005bcc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003abc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <HAL_InitTick+0x9c>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <HAL_InitTick+0x9c>)
 8003ac2:	f043 0310 	orr.w	r3, r3, #16
 8003ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <HAL_InitTick+0x9c>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad4:	f107 0210 	add.w	r2, r7, #16
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f005 f9fe 	bl	8008ee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f005 f9e8 	bl	8008eb8 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <HAL_InitTick+0xa0>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	3b01      	subs	r3, #1
 8003af6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003af8:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	@ (8003b44 <HAL_InitTick+0xa8>)
 8003afc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003b00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b06:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b18:	4809      	ldr	r0, [pc, #36]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003b1a:	f006 fe99 	bl	800a850 <HAL_TIM_Base_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b24:	4806      	ldr	r0, [pc, #24]	@ (8003b40 <HAL_InitTick+0xa4>)
 8003b26:	f006 feeb 	bl	800a900 <HAL_TIM_Base_Start_IT>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	e000      	b.n	8003b30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3730      	adds	r7, #48	@ 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	200004f0 	.word	0x200004f0
 8003b44:	40001000 	.word	0x40001000

08003b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <NMI_Handler+0x4>

08003b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <HardFault_Handler+0x4>

08003b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <MemManage_Handler+0x4>

08003b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <BusFault_Handler+0x4>

08003b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <UsageFault_Handler+0x4>

08003b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003b84:	4802      	ldr	r0, [pc, #8]	@ (8003b90 <DMA1_Channel1_IRQHandler+0x10>)
 8003b86:	f002 f952 	bl	8005e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000038c 	.word	0x2000038c

08003b94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b98:	4802      	ldr	r0, [pc, #8]	@ (8003ba4 <DMA1_Channel2_IRQHandler+0x10>)
 8003b9a:	f002 f948 	bl	8005e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000324 	.word	0x20000324

08003ba8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bac:	4802      	ldr	r0, [pc, #8]	@ (8003bb8 <TIM1_UP_IRQHandler+0x10>)
 8003bae:	f006 ff78 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000540 	.word	0x20000540

08003bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bc0:	4802      	ldr	r0, [pc, #8]	@ (8003bcc <TIM2_IRQHandler+0x10>)
 8003bc2:	f006 ff6e 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000058c 	.word	0x2000058c

08003bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bd4:	4802      	ldr	r0, [pc, #8]	@ (8003be0 <TIM3_IRQHandler+0x10>)
 8003bd6:	f006 ff64 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200005d8 	.word	0x200005d8

08003be4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003be8:	4802      	ldr	r0, [pc, #8]	@ (8003bf4 <TIM4_IRQHandler+0x10>)
 8003bea:	f006 ff5a 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000624 	.word	0x20000624

08003bf8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bfc:	4802      	ldr	r0, [pc, #8]	@ (8003c08 <TIM5_IRQHandler+0x10>)
 8003bfe:	f006 ff50 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000670 	.word	0x20000670

08003c0c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c10:	4802      	ldr	r0, [pc, #8]	@ (8003c1c <TIM6_IRQHandler+0x10>)
 8003c12:	f006 ff46 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200004f0 	.word	0x200004f0

08003c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c24:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <TIM7_IRQHandler+0x10>)
 8003c26:	f006 ff3c 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200006bc 	.word	0x200006bc

08003c34 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <USB_FS_IRQHandler+0x10>)
 8003c3a:	f002 fe6b 	bl	8006914 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000b9c 	.word	0x20000b9c

08003c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c50:	4a14      	ldr	r2, [pc, #80]	@ (8003ca4 <_sbrk+0x5c>)
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <_sbrk+0x60>)
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c5c:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <_sbrk+0x64>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <_sbrk+0x64>)
 8003c66:	4a12      	ldr	r2, [pc, #72]	@ (8003cb0 <_sbrk+0x68>)
 8003c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c6a:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <_sbrk+0x64>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d207      	bcs.n	8003c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c78:	f00b fee0 	bl	800fa3c <__errno>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	220c      	movs	r2, #12
 8003c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c86:	e009      	b.n	8003c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c88:	4b08      	ldr	r3, [pc, #32]	@ (8003cac <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c8e:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <_sbrk+0x64>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	4a05      	ldr	r2, [pc, #20]	@ (8003cac <_sbrk+0x64>)
 8003c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20030000 	.word	0x20030000
 8003ca8:	00000400 	.word	0x00000400
 8003cac:	2000053c 	.word	0x2000053c
 8003cb0:	20000fc0 	.word	0x20000fc0

08003cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cb8:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <SystemInit+0x20>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	4a05      	ldr	r2, [pc, #20]	@ (8003cd4 <SystemInit+0x20>)
 8003cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003cde:	4b4f      	ldr	r3, [pc, #316]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003cea:	4b4c      	ldr	r3, [pc, #304]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e005      	b.n	8003d06 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003cfa:	4b48      	ldr	r3, [pc, #288]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003d06:	4a46      	ldr	r2, [pc, #280]	@ (8003e20 <SystemCoreClockUpdate+0x148>)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d10:	4b42      	ldr	r3, [pc, #264]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	d866      	bhi.n	8003dea <SystemCoreClockUpdate+0x112>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <SystemCoreClockUpdate+0x4c>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003deb 	.word	0x08003deb
 8003d2c:	08003deb 	.word	0x08003deb
 8003d30:	08003deb 	.word	0x08003deb
 8003d34:	08003d61 	.word	0x08003d61
 8003d38:	08003deb 	.word	0x08003deb
 8003d3c:	08003deb 	.word	0x08003deb
 8003d40:	08003deb 	.word	0x08003deb
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003deb 	.word	0x08003deb
 8003d4c:	08003deb 	.word	0x08003deb
 8003d50:	08003deb 	.word	0x08003deb
 8003d54:	08003d71 	.word	0x08003d71
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003d58:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6013      	str	r3, [r2, #0]
      break;
 8003d5e:	e048      	b.n	8003df2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003d60:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003d62:	4a31      	ldr	r2, [pc, #196]	@ (8003e28 <SystemCoreClockUpdate+0x150>)
 8003d64:	601a      	str	r2, [r3, #0]
      break;
 8003d66:	e044      	b.n	8003df2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003d68:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e28 <SystemCoreClockUpdate+0x150>)
 8003d6c:	601a      	str	r2, [r3, #0]
      break;
 8003d6e:	e040      	b.n	8003df2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d70:	4b2a      	ldr	r3, [pc, #168]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003d7a:	4b28      	ldr	r3, [pc, #160]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	3301      	adds	r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d003      	beq.n	8003d96 <SystemCoreClockUpdate+0xbe>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d006      	beq.n	8003da2 <SystemCoreClockUpdate+0xca>
 8003d94:	e00b      	b.n	8003dae <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8003d96:	4a24      	ldr	r2, [pc, #144]	@ (8003e28 <SystemCoreClockUpdate+0x150>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	613b      	str	r3, [r7, #16]
          break;
 8003da0:	e00b      	b.n	8003dba <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8003da2:	4a21      	ldr	r2, [pc, #132]	@ (8003e28 <SystemCoreClockUpdate+0x150>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	613b      	str	r3, [r7, #16]
          break;
 8003dac:	e005      	b.n	8003dba <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	613b      	str	r3, [r7, #16]
          break;
 8003db8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003dba:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003dcc:	4b13      	ldr	r3, [pc, #76]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0e5b      	lsrs	r3, r3, #25
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003de6:	6013      	str	r3, [r2, #0]
      break;
 8003de8:	e003      	b.n	8003df2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003dea:	4a0e      	ldr	r2, [pc, #56]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6013      	str	r3, [r2, #0]
      break;
 8003df0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003df2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <SystemCoreClockUpdate+0x144>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003e2c <SystemCoreClockUpdate+0x154>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <SystemCoreClockUpdate+0x14c>)
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0801014c 	.word	0x0801014c
 8003e24:	20000020 	.word	0x20000020
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	08010134 	.word	0x08010134

08003e30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e50:	4a20      	ldr	r2, [pc, #128]	@ (8003ed4 <MX_TIM1_Init+0xa4>)
 8003e52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2399;
 8003e54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e56:	f640 125f 	movw	r2, #2399	@ 0x95f
 8003e5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003e62:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e64:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003e68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e70:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e7c:	4814      	ldr	r0, [pc, #80]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e7e:	f006 fce7 	bl	800a850 <HAL_TIM_Base_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8003e88:	f7ff fc9c 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	4619      	mov	r1, r3
 8003e98:	480d      	ldr	r0, [pc, #52]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003e9a:	f006 ff83 	bl	800ada4 <HAL_TIM_ConfigClockSource>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003ea4:	f7ff fc8e 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4805      	ldr	r0, [pc, #20]	@ (8003ed0 <MX_TIM1_Init+0xa0>)
 8003eba:	f007 fd55 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003ec4:	f7ff fc7e 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ec8:	bf00      	nop
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000540 	.word	0x20000540
 8003ed4:	40012c00 	.word	0x40012c00

08003ed8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08e      	sub	sp, #56	@ 0x38
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ede:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eec:	f107 031c 	add.w	r3, r7, #28
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ef8:	463b      	mov	r3, r7
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	615a      	str	r2, [r3, #20]
 8003f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f14:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8003f18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1a:	4b28      	ldr	r3, [pc, #160]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8003f20:	4b26      	ldr	r3, [pc, #152]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f22:	f240 128f 	movw	r2, #399	@ 0x18f
 8003f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f28:	4b24      	ldr	r3, [pc, #144]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f2e:	4b23      	ldr	r3, [pc, #140]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f34:	4821      	ldr	r0, [pc, #132]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f36:	f006 fc8b 	bl	800a850 <HAL_TIM_Base_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003f40:	f7ff fc40 	bl	80037c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f4e:	4619      	mov	r1, r3
 8003f50:	481a      	ldr	r0, [pc, #104]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f52:	f006 ff27 	bl	800ada4 <HAL_TIM_ConfigClockSource>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003f5c:	f7ff fc32 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003f60:	4816      	ldr	r0, [pc, #88]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f62:	f006 fd3d 	bl	800a9e0 <HAL_TIM_OC_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003f6c:	f7ff fc2a 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003f70:	2340      	movs	r3, #64	@ 0x40
 8003f72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f78:	f107 031c 	add.w	r3, r7, #28
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	480f      	ldr	r0, [pc, #60]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003f80:	f007 fcf2 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003f8a:	f7ff fc1b 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003f8e:	2310      	movs	r3, #16
 8003f90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8003f92:	2363      	movs	r3, #99	@ 0x63
 8003f94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4805      	ldr	r0, [pc, #20]	@ (8003fbc <MX_TIM2_Init+0xe4>)
 8003fa6:	f006 fe83 	bl	800acb0 <HAL_TIM_OC_ConfigChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003fb0:	f7ff fc08 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fb4:	bf00      	nop
 8003fb6:	3738      	adds	r7, #56	@ 0x38
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	2000058c 	.word	0x2000058c

08003fc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b090      	sub	sp, #64	@ 0x40
 8003fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd6:	f107 0320 	add.w	r3, r7, #32
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	611a      	str	r2, [r3, #16]
 8003ff0:	615a      	str	r2, [r3, #20]
 8003ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80040ac <MX_TIM3_Init+0xec>)
 8003ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 8003ffc:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8004000:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004002:	4b29      	ldr	r3, [pc, #164]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 8004008:	4b27      	ldr	r3, [pc, #156]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 800400a:	f240 128f 	movw	r2, #399	@ 0x18f
 800400e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004010:	4b25      	ldr	r3, [pc, #148]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004016:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800401c:	4822      	ldr	r0, [pc, #136]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 800401e:	f006 fc17 	bl	800a850 <HAL_TIM_Base_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8004028:	f7ff fbcc 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800402c:	481e      	ldr	r0, [pc, #120]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 800402e:	f006 fcd7 	bl	800a9e0 <HAL_TIM_OC_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004038:	f7ff fbc4 	bl	80037c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800403c:	2306      	movs	r3, #6
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8004040:	2310      	movs	r3, #16
 8004042:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004048:	4619      	mov	r1, r3
 800404a:	4817      	ldr	r0, [pc, #92]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 800404c:	f006 ff73 	bl	800af36 <HAL_TIM_SlaveConfigSynchro>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004056:	f7ff fbb5 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800405a:	2340      	movs	r3, #64	@ 0x40
 800405c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004062:	f107 0320 	add.w	r3, r7, #32
 8004066:	4619      	mov	r1, r3
 8004068:	480f      	ldr	r0, [pc, #60]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 800406a:	f007 fc7d 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004074:	f7ff fba6 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004078:	2310      	movs	r3, #16
 800407a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 800407c:	2363      	movs	r3, #99	@ 0x63
 800407e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	2200      	movs	r2, #0
 800408c:	4619      	mov	r1, r3
 800408e:	4806      	ldr	r0, [pc, #24]	@ (80040a8 <MX_TIM3_Init+0xe8>)
 8004090:	f006 fe0e 	bl	800acb0 <HAL_TIM_OC_ConfigChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800409a:	f7ff fb93 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800409e:	bf00      	nop
 80040a0:	3740      	adds	r7, #64	@ 0x40
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200005d8 	.word	0x200005d8
 80040ac:	40000400 	.word	0x40000400

080040b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b090      	sub	sp, #64	@ 0x40
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80040b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
 80040e0:	615a      	str	r2, [r3, #20]
 80040e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004198 <MX_TIM4_Init+0xe8>)
 80040e6:	4a2d      	ldr	r2, [pc, #180]	@ (800419c <MX_TIM4_Init+0xec>)
 80040e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 80040ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <MX_TIM4_Init+0xe8>)
 80040ec:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80040f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f2:	4b29      	ldr	r3, [pc, #164]	@ (8004198 <MX_TIM4_Init+0xe8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <MX_TIM4_Init+0xe8>)
 80040fa:	f240 128f 	movw	r2, #399	@ 0x18f
 80040fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004100:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <MX_TIM4_Init+0xe8>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <MX_TIM4_Init+0xe8>)
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800410c:	4822      	ldr	r0, [pc, #136]	@ (8004198 <MX_TIM4_Init+0xe8>)
 800410e:	f006 fb9f 	bl	800a850 <HAL_TIM_Base_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004118:	f7ff fb54 	bl	80037c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800411c:	481e      	ldr	r0, [pc, #120]	@ (8004198 <MX_TIM4_Init+0xe8>)
 800411e:	f006 fc5f 	bl	800a9e0 <HAL_TIM_OC_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004128:	f7ff fb4c 	bl	80037c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800412c:	2306      	movs	r3, #6
 800412e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8004130:	2320      	movs	r3, #32
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8004134:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004138:	4619      	mov	r1, r3
 800413a:	4817      	ldr	r0, [pc, #92]	@ (8004198 <MX_TIM4_Init+0xe8>)
 800413c:	f006 fefb 	bl	800af36 <HAL_TIM_SlaveConfigSynchro>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004146:	f7ff fb3d 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800414a:	2340      	movs	r3, #64	@ 0x40
 800414c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004152:	f107 0320 	add.w	r3, r7, #32
 8004156:	4619      	mov	r1, r3
 8004158:	480f      	ldr	r0, [pc, #60]	@ (8004198 <MX_TIM4_Init+0xe8>)
 800415a:	f007 fc05 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8004164:	f7ff fb2e 	bl	80037c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004168:	2310      	movs	r3, #16
 800416a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 800416c:	2363      	movs	r3, #99	@ 0x63
 800416e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	2200      	movs	r2, #0
 800417c:	4619      	mov	r1, r3
 800417e:	4806      	ldr	r0, [pc, #24]	@ (8004198 <MX_TIM4_Init+0xe8>)
 8004180:	f006 fd96 	bl	800acb0 <HAL_TIM_OC_ConfigChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800418a:	f7ff fb1b 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	3740      	adds	r7, #64	@ 0x40
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000624 	.word	0x20000624
 800419c:	40000800 	.word	0x40000800

080041a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80041a6:	f107 030c 	add.w	r3, r7, #12
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80041c0:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004240 <MX_TIM5_Init+0xa0>)
 80041c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47999;
 80041c6:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041c8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80041cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 399;
 80041d4:	4b19      	ldr	r3, [pc, #100]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041d6:	f240 128f 	movw	r2, #399	@ 0x18f
 80041da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041dc:	4b17      	ldr	r3, [pc, #92]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80041e8:	4814      	ldr	r0, [pc, #80]	@ (800423c <MX_TIM5_Init+0x9c>)
 80041ea:	f006 fb31 	bl	800a850 <HAL_TIM_Base_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80041f4:	f7ff fae6 	bl	80037c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80041f8:	2306      	movs	r3, #6
 80041fa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80041fc:	2320      	movs	r3, #32
 80041fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8004200:	f107 030c 	add.w	r3, r7, #12
 8004204:	4619      	mov	r1, r3
 8004206:	480d      	ldr	r0, [pc, #52]	@ (800423c <MX_TIM5_Init+0x9c>)
 8004208:	f006 fe95 	bl	800af36 <HAL_TIM_SlaveConfigSynchro>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8004212:	f7ff fad7 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800421e:	463b      	mov	r3, r7
 8004220:	4619      	mov	r1, r3
 8004222:	4806      	ldr	r0, [pc, #24]	@ (800423c <MX_TIM5_Init+0x9c>)
 8004224:	f007 fba0 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800422e:	f7ff fac9 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004232:	bf00      	nop
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000670 	.word	0x20000670
 8004240:	40000c00 	.word	0x40000c00

08004244 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004254:	4b14      	ldr	r3, [pc, #80]	@ (80042a8 <MX_TIM7_Init+0x64>)
 8004256:	4a15      	ldr	r2, [pc, #84]	@ (80042ac <MX_TIM7_Init+0x68>)
 8004258:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800425a:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <MX_TIM7_Init+0x64>)
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <MX_TIM7_Init+0x64>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <MX_TIM7_Init+0x64>)
 8004268:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800426c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426e:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <MX_TIM7_Init+0x64>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004274:	480c      	ldr	r0, [pc, #48]	@ (80042a8 <MX_TIM7_Init+0x64>)
 8004276:	f006 faeb 	bl	800a850 <HAL_TIM_Base_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004280:	f7ff faa0 	bl	80037c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4805      	ldr	r0, [pc, #20]	@ (80042a8 <MX_TIM7_Init+0x64>)
 8004292:	f007 fb69 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800429c:	f7ff fa92 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200006bc 	.word	0x200006bc
 80042ac:	40001400 	.word	0x40001400

080042b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4e      	ldr	r2, [pc, #312]	@ (80043f8 <HAL_TIM_Base_MspInit+0x148>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d114      	bne.n	80042ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042c2:	4b4e      	ldr	r3, [pc, #312]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80042c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c6:	4a4d      	ldr	r2, [pc, #308]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80042c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80042d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2105      	movs	r1, #5
 80042de:	202a      	movs	r0, #42	@ 0x2a
 80042e0:	f001 fc5a 	bl	8005b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80042e4:	202a      	movs	r0, #42	@ 0x2a
 80042e6:	f001 fc71 	bl	8005bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80042ea:	e080      	b.n	80043ee <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d114      	bne.n	8004320 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042f6:	4b41      	ldr	r3, [pc, #260]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	4a40      	ldr	r2, [pc, #256]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6593      	str	r3, [r2, #88]	@ 0x58
 8004302:	4b3e      	ldr	r3, [pc, #248]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800430e:	2200      	movs	r2, #0
 8004310:	2105      	movs	r1, #5
 8004312:	202d      	movs	r0, #45	@ 0x2d
 8004314:	f001 fc40 	bl	8005b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004318:	202d      	movs	r0, #45	@ 0x2d
 800431a:	f001 fc57 	bl	8005bcc <HAL_NVIC_EnableIRQ>
}
 800431e:	e066      	b.n	80043ee <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a36      	ldr	r2, [pc, #216]	@ (8004400 <HAL_TIM_Base_MspInit+0x150>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d114      	bne.n	8004354 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800432a:	4b34      	ldr	r3, [pc, #208]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	4a33      	ldr	r2, [pc, #204]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	6593      	str	r3, [r2, #88]	@ 0x58
 8004336:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2105      	movs	r1, #5
 8004346:	202e      	movs	r0, #46	@ 0x2e
 8004348:	f001 fc26 	bl	8005b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800434c:	202e      	movs	r0, #46	@ 0x2e
 800434e:	f001 fc3d 	bl	8005bcc <HAL_NVIC_EnableIRQ>
}
 8004352:	e04c      	b.n	80043ee <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2a      	ldr	r2, [pc, #168]	@ (8004404 <HAL_TIM_Base_MspInit+0x154>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d114      	bne.n	8004388 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800435e:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004362:	4a26      	ldr	r2, [pc, #152]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6593      	str	r3, [r2, #88]	@ 0x58
 800436a:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2105      	movs	r1, #5
 800437a:	202f      	movs	r0, #47	@ 0x2f
 800437c:	f001 fc0c 	bl	8005b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004380:	202f      	movs	r0, #47	@ 0x2f
 8004382:	f001 fc23 	bl	8005bcc <HAL_NVIC_EnableIRQ>
}
 8004386:	e032      	b.n	80043ee <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM5)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_TIM_Base_MspInit+0x158>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d114      	bne.n	80043bc <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004392:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	4a19      	ldr	r2, [pc, #100]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 8004398:	f043 0308 	orr.w	r3, r3, #8
 800439c:	6593      	str	r3, [r2, #88]	@ 0x58
 800439e:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2105      	movs	r1, #5
 80043ae:	2030      	movs	r0, #48	@ 0x30
 80043b0:	f001 fbf2 	bl	8005b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043b4:	2030      	movs	r0, #48	@ 0x30
 80043b6:	f001 fc09 	bl	8005bcc <HAL_NVIC_EnableIRQ>
}
 80043ba:	e018      	b.n	80043ee <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM7)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a12      	ldr	r2, [pc, #72]	@ (800440c <HAL_TIM_Base_MspInit+0x15c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d113      	bne.n	80043ee <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	4a0c      	ldr	r2, [pc, #48]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80043cc:	f043 0320 	orr.w	r3, r3, #32
 80043d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <HAL_TIM_Base_MspInit+0x14c>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2105      	movs	r1, #5
 80043e2:	2032      	movs	r0, #50	@ 0x32
 80043e4:	f001 fbd8 	bl	8005b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80043e8:	2032      	movs	r0, #50	@ 0x32
 80043ea:	f001 fbef 	bl	8005bcc <HAL_NVIC_EnableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40021000 	.word	0x40021000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40001400 	.word	0x40001400

08004410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004448 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004414:	f7ff fc4e 	bl	8003cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004418:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800441a:	e003      	b.n	8004424 <LoopCopyDataInit>

0800441c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800441e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004420:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004422:	3104      	adds	r1, #4

08004424 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004424:	480a      	ldr	r0, [pc, #40]	@ (8004450 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004426:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004428:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800442a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800442c:	d3f6      	bcc.n	800441c <CopyDataInit>
	ldr	r2, =_sbss
 800442e:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004430:	e002      	b.n	8004438 <LoopFillZerobss>

08004432 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004432:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004434:	f842 3b04 	str.w	r3, [r2], #4

08004438 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004438:	4b08      	ldr	r3, [pc, #32]	@ (800445c <LoopForever+0x16>)
	cmp	r2, r3
 800443a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800443c:	d3f9      	bcc.n	8004432 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800443e:	f00b fb03 	bl	800fa48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004442:	f7ff f807 	bl	8003454 <main>

08004446 <LoopForever>:

LoopForever:
    b LoopForever
 8004446:	e7fe      	b.n	8004446 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004448:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800444c:	08010198 	.word	0x08010198
	ldr	r0, =_sdata
 8004450:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004454:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8004458:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 800445c:	20000fc0 	.word	0x20000fc0

08004460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004460:	e7fe      	b.n	8004460 <ADC1_2_IRQHandler>

08004462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800446c:	2004      	movs	r0, #4
 800446e:	f001 fb88 	bl	8005b82 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8004472:	f7ff fc31 	bl	8003cd8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004476:	2007      	movs	r0, #7
 8004478:	f7ff fb10 	bl	8003a9c <HAL_InitTick>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	71fb      	strb	r3, [r7, #7]
 8004486:	e001      	b.n	800448c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004488:	f7ff fade 	bl	8003a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800448c:	79fb      	ldrb	r3, [r7, #7]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_IncTick+0x20>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <HAL_IncTick+0x24>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <HAL_IncTick+0x24>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000028 	.word	0x20000028
 80044bc:	20000708 	.word	0x20000708

080044c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return uwTick;
 80044c4:	4b03      	ldr	r3, [pc, #12]	@ (80044d4 <HAL_GetTick+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000708 	.word	0x20000708

080044d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044e0:	f7ff ffee 	bl	80044c0 <HAL_GetTick>
 80044e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044f0:	d005      	beq.n	80044fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80044f2:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <HAL_Delay+0x44>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044fe:	bf00      	nop
 8004500:	f7ff ffde 	bl	80044c0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	429a      	cmp	r2, r3
 800450e:	d8f7      	bhi.n	8004500 <HAL_Delay+0x28>
  {
  }
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000028 	.word	0x20000028

08004520 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3360      	adds	r3, #96	@ 0x60
 800459a:	461a      	mov	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <LL_ADC_SetOffset+0x44>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	03fff000 	.word	0x03fff000

080045d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3360      	adds	r3, #96	@ 0x60
 80045de:	461a      	mov	r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3360      	adds	r3, #96	@ 0x60
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	431a      	orrs	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	615a      	str	r2, [r3, #20]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800467e:	b480      	push	{r7}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3330      	adds	r3, #48	@ 0x30
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	4413      	add	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	211f      	movs	r1, #31
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	401a      	ands	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 011f 	and.w	r1, r3, #31
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	431a      	orrs	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b087      	sub	sp, #28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3314      	adds	r3, #20
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	0e5b      	lsrs	r3, r3, #25
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	4413      	add	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	0d1b      	lsrs	r3, r3, #20
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2107      	movs	r1, #7
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	0d1b      	lsrs	r3, r3, #20
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	fa01 f303 	lsl.w	r3, r1, r3
 800471a:	431a      	orrs	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	43db      	mvns	r3, r3
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0318 	and.w	r3, r3, #24
 800474e:	4908      	ldr	r1, [pc, #32]	@ (8004770 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004750:	40d9      	lsrs	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	400b      	ands	r3, r1
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	431a      	orrs	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	0007ffff 	.word	0x0007ffff

08004774 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 031f 	and.w	r3, r3, #31
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80047a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6093      	str	r3, [r2, #8]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c8:	d101      	bne.n	80047ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80047ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004818:	d101      	bne.n	800481e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800483c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <LL_ADC_IsEnabled+0x18>
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <LL_ADC_IsEnabled+0x1a>
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800488a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d101      	bne.n	80048ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d101      	bne.n	80048e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b089      	sub	sp, #36	@ 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e12e      	b.n	8004b68 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fe fa75 	bl	8002e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ff3f 	bl	80047b4 <LL_ADC_IsDeepPowerDownEnabled>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff25 	bl	8004790 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ff5a 	bl	8004804 <LL_ADC_IsInternalRegulatorEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d115      	bne.n	8004982 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff3e 	bl	80047dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004960:	4b83      	ldr	r3, [pc, #524]	@ (8004b70 <HAL_ADC_Init+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	4a83      	ldr	r2, [pc, #524]	@ (8004b74 <HAL_ADC_Init+0x284>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	3301      	adds	r3, #1
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004974:	e002      	b.n	800497c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b01      	subs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f9      	bne.n	8004976 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ff3c 	bl	8004804 <LL_ADC_IsInternalRegulatorEnabled>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004996:	f043 0210 	orr.w	r2, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff75 	bl	80048a2 <LL_ADC_REG_IsConversionOngoing>
 80049b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 80c7 	bne.w	8004b56 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 80c3 	bne.w	8004b56 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80049d8:	f043 0202 	orr.w	r2, r3, #2
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff35 	bl	8004854 <LL_ADC_IsEnabled>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d110      	bne.n	8004a12 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f0:	4861      	ldr	r0, [pc, #388]	@ (8004b78 <HAL_ADC_Init+0x288>)
 80049f2:	f7ff ff2f 	bl	8004854 <LL_ADC_IsEnabled>
 80049f6:	4604      	mov	r4, r0
 80049f8:	4860      	ldr	r0, [pc, #384]	@ (8004b7c <HAL_ADC_Init+0x28c>)
 80049fa:	f7ff ff2b 	bl	8004854 <LL_ADC_IsEnabled>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4323      	orrs	r3, r4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	485c      	ldr	r0, [pc, #368]	@ (8004b80 <HAL_ADC_Init+0x290>)
 8004a0e:	f7ff fd87 	bl	8004520 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7e5b      	ldrb	r3, [r3, #25]
 8004a16:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a1c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004a22:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004a28:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a30:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d106      	bne.n	8004a4e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	3b01      	subs	r3, #1
 8004a46:	045b      	lsls	r3, r3, #17
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	4b44      	ldr	r3, [pc, #272]	@ (8004b84 <HAL_ADC_Init+0x294>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ff20 	bl	80048c8 <LL_ADC_INJ_IsConversionOngoing>
 8004a88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d140      	bne.n	8004b12 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d13d      	bne.n	8004b12 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7e1b      	ldrb	r3, [r3, #24]
 8004a9e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004aa0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004aa8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ab8:	f023 0306 	bic.w	r3, r3, #6
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	69b9      	ldr	r1, [r7, #24]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d118      	bne.n	8004b02 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004af2:	430a      	orrs	r2, r1
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	611a      	str	r2, [r3, #16]
 8004b00:	e007      	b.n	8004b12 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d10c      	bne.n	8004b34 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	f023 010f 	bic.w	r1, r3, #15
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b32:	e007      	b.n	8004b44 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 020f 	bic.w	r2, r2, #15
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b48:	f023 0303 	bic.w	r3, r3, #3
 8004b4c:	f043 0201 	orr.w	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b54:	e007      	b.n	8004b66 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	f043 0210 	orr.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3724      	adds	r7, #36	@ 0x24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}
 8004b70:	20000020 	.word	0x20000020
 8004b74:	053e2d63 	.word	0x053e2d63
 8004b78:	42028000 	.word	0x42028000
 8004b7c:	42028100 	.word	0x42028100
 8004b80:	42028300 	.word	0x42028300
 8004b84:	fff0c007 	.word	0xfff0c007

08004b88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b90:	4857      	ldr	r0, [pc, #348]	@ (8004cf0 <HAL_ADC_Start+0x168>)
 8004b92:	f7ff fdef 	bl	8004774 <LL_ADC_GetMultimode>
 8004b96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fe80 	bl	80048a2 <LL_ADC_REG_IsConversionOngoing>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 809c 	bne.w	8004ce2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ADC_Start+0x30>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e097      	b.n	8004ce8 <HAL_ADC_Start+0x160>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fd4d 	bl	8005660 <ADC_Enable>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8083 	bne.w	8004cd8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a42      	ldr	r2, [pc, #264]	@ (8004cf4 <HAL_ADC_Start+0x16c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d002      	beq.n	8004bf6 <HAL_ADC_Start+0x6e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	e000      	b.n	8004bf8 <HAL_ADC_Start+0x70>
 8004bf6:	4b40      	ldr	r3, [pc, #256]	@ (8004cf8 <HAL_ADC_Start+0x170>)
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d002      	beq.n	8004c06 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1e:	d106      	bne.n	8004c2e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	f023 0206 	bic.w	r2, r3, #6
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c2c:	e002      	b.n	8004c34 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	221c      	movs	r2, #28
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf4 <HAL_ADC_Start+0x16c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d002      	beq.n	8004c54 <HAL_ADC_Start+0xcc>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	e000      	b.n	8004c56 <HAL_ADC_Start+0xce>
 8004c54:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <HAL_ADC_Start+0x170>)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d008      	beq.n	8004c70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d002      	beq.n	8004c70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b09      	cmp	r3, #9
 8004c6e:	d114      	bne.n	8004c9a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fdf1 	bl	800487a <LL_ADC_REG_StartConversion>
 8004c98:	e025      	b.n	8004ce6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a12      	ldr	r2, [pc, #72]	@ (8004cf4 <HAL_ADC_Start+0x16c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d002      	beq.n	8004cb6 <HAL_ADC_Start+0x12e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	e000      	b.n	8004cb8 <HAL_ADC_Start+0x130>
 8004cb6:	4b10      	ldr	r3, [pc, #64]	@ (8004cf8 <HAL_ADC_Start+0x170>)
 8004cb8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00f      	beq.n	8004ce6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cd6:	e006      	b.n	8004ce6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004ce0:	e001      	b.n	8004ce6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	42028300 	.word	0x42028300
 8004cf4:	42028100 	.word	0x42028100
 8004cf8:	42028000 	.word	0x42028000

08004cfc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d08:	4850      	ldr	r0, [pc, #320]	@ (8004e4c <HAL_ADC_Start_DMA+0x150>)
 8004d0a:	f7ff fd33 	bl	8004774 <LL_ADC_GetMultimode>
 8004d0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fdc4 	bl	80048a2 <LL_ADC_REG_IsConversionOngoing>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 808e 	bne.w	8004e3e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_Start_DMA+0x34>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e089      	b.n	8004e44 <HAL_ADC_Start_DMA+0x148>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d002      	beq.n	8004d4a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b09      	cmp	r3, #9
 8004d48:	d172      	bne.n	8004e30 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fc88 	bl	8005660 <ADC_Enable>
 8004d50:	4603      	mov	r3, r0
 8004d52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d165      	bne.n	8004e26 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a37      	ldr	r2, [pc, #220]	@ (8004e50 <HAL_ADC_Start_DMA+0x154>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d002      	beq.n	8004d7e <HAL_ADC_Start_DMA+0x82>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	e000      	b.n	8004d80 <HAL_ADC_Start_DMA+0x84>
 8004d7e:	4b35      	ldr	r3, [pc, #212]	@ (8004e54 <HAL_ADC_Start_DMA+0x158>)
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d002      	beq.n	8004d8e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	f023 0206 	bic.w	r2, r3, #6
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004db2:	e002      	b.n	8004dba <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dbe:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <HAL_ADC_Start_DMA+0x15c>)
 8004dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc6:	4a25      	ldr	r2, [pc, #148]	@ (8004e5c <HAL_ADC_Start_DMA+0x160>)
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dce:	4a24      	ldr	r2, [pc, #144]	@ (8004e60 <HAL_ADC_Start_DMA+0x164>)
 8004dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	221c      	movs	r2, #28
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0210 	orr.w	r2, r2, #16
 8004df0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0201 	orr.w	r2, r2, #1
 8004e00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3340      	adds	r3, #64	@ 0x40
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f000 ff91 	bl	8005d38 <HAL_DMA_Start_IT>
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fd2b 	bl	800487a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004e24:	e00d      	b.n	8004e42 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004e2e:	e008      	b.n	8004e42 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004e3c:	e001      	b.n	8004e42 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	42028300 	.word	0x42028300
 8004e50:	42028100 	.word	0x42028100
 8004e54:	42028000 	.word	0x42028000
 8004e58:	0800576d 	.word	0x0800576d
 8004e5c:	08005845 	.word	0x08005845
 8004e60:	08005861 	.word	0x08005861

08004e64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b0b7      	sub	sp, #220	@ 0xdc
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x22>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e3c1      	b.n	8005632 <HAL_ADC_ConfigChannel+0x7a6>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fcf1 	bl	80048a2 <LL_ADC_REG_IsConversionOngoing>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 83a6 	bne.w	8005614 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f7ff fbd2 	bl	800467e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fcdf 	bl	80048a2 <LL_ADC_REG_IsConversionOngoing>
 8004ee4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fceb 	bl	80048c8 <LL_ADC_INJ_IsConversionOngoing>
 8004ef2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ef6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 81c1 	bne.w	8005282 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 81bc 	bne.w	8005282 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f12:	d10f      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f7ff fbd9 	bl	80046d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fb80 	bl	8004632 <LL_ADC_SetSamplingTimeCommonConfig>
 8004f32:	e00e      	b.n	8004f52 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	461a      	mov	r2, r3
 8004f42:	f7ff fbc8 	bl	80046d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fb70 	bl	8004632 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d00a      	beq.n	8004f8a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6919      	ldr	r1, [r3, #16]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f84:	f7ff fb00 	bl	8004588 <LL_ADC_SetOffset>
 8004f88:	e17b      	b.n	8005282 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fb1d 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x12a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fb12 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8004fac:	4603      	mov	r3, r0
 8004fae:	0e9b      	lsrs	r3, r3, #26
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	e01e      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x168>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fb07 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004fcc:	fa93 f3a3 	rbit	r3, r3
 8004fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	e004      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8004fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004fec:	fab3 f383 	clz	r3, r3
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <HAL_ADC_ConfigChannel+0x180>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	0e9b      	lsrs	r3, r3, #26
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	e018      	b.n	800503e <HAL_ADC_ConfigChannel+0x1b2>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8005030:	2320      	movs	r3, #32
 8005032:	e004      	b.n	800503e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8005034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005038:	fab3 f383 	clz	r3, r3
 800503c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800503e:	429a      	cmp	r2, r3
 8005040:	d106      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fad6 	bl	80045fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff faba 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 800505c:	4603      	mov	r3, r0
 800505e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <HAL_ADC_ConfigChannel+0x1f0>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff faaf 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8005072:	4603      	mov	r3, r0
 8005074:	0e9b      	lsrs	r3, r3, #26
 8005076:	f003 021f 	and.w	r2, r3, #31
 800507a:	e01e      	b.n	80050ba <HAL_ADC_ConfigChannel+0x22e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff faa4 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8005088:	4603      	mov	r3, r0
 800508a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800509a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800509e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80050a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80050aa:	2320      	movs	r3, #32
 80050ac:	e004      	b.n	80050b8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80050ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x246>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	0e9b      	lsrs	r3, r3, #26
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	e018      	b.n	8005104 <HAL_ADC_ConfigChannel+0x278>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80050e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80050ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80050f6:	2320      	movs	r3, #32
 80050f8:	e004      	b.n	8005104 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80050fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050fe:	fab3 f383 	clz	r3, r3
 8005102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005104:	429a      	cmp	r2, r3
 8005106:	d106      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2200      	movs	r2, #0
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fa73 	bl	80045fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2102      	movs	r1, #2
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fa57 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8005122:	4603      	mov	r3, r0
 8005124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x2b6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2102      	movs	r1, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fa4c 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8005138:	4603      	mov	r3, r0
 800513a:	0e9b      	lsrs	r3, r3, #26
 800513c:	f003 021f 	and.w	r2, r3, #31
 8005140:	e01e      	b.n	8005180 <HAL_ADC_ConfigChannel+0x2f4>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2102      	movs	r1, #2
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fa41 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 800514e:	4603      	mov	r3, r0
 8005150:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005158:	fa93 f3a3 	rbit	r3, r3
 800515c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005160:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005168:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8005170:	2320      	movs	r3, #32
 8005172:	e004      	b.n	800517e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8005174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005178:	fab3 f383 	clz	r3, r3
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x30c>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0e9b      	lsrs	r3, r3, #26
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	e016      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x33a>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051a4:	fa93 f3a3 	rbit	r3, r3
 80051a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80051aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80051b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80051b8:	2320      	movs	r3, #32
 80051ba:	e004      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80051bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051c0:	fab3 f383 	clz	r3, r3
 80051c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d106      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2102      	movs	r1, #2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fa12 	bl	80045fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2103      	movs	r1, #3
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff f9f6 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x378>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2103      	movs	r1, #3
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff f9eb 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 80051fa:	4603      	mov	r3, r0
 80051fc:	0e9b      	lsrs	r3, r3, #26
 80051fe:	f003 021f 	and.w	r2, r3, #31
 8005202:	e017      	b.n	8005234 <HAL_ADC_ConfigChannel+0x3a8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2103      	movs	r1, #3
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff f9e0 	bl	80045d0 <LL_ADC_GetOffsetChannel>
 8005210:	4603      	mov	r3, r0
 8005212:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005216:	fa93 f3a3 	rbit	r3, r3
 800521a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800521c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800521e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8005226:	2320      	movs	r3, #32
 8005228:	e003      	b.n	8005232 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800522a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800522c:	fab3 f383 	clz	r3, r3
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <HAL_ADC_ConfigChannel+0x3c0>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	0e9b      	lsrs	r3, r3, #26
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	e011      	b.n	8005270 <HAL_ADC_ConfigChannel+0x3e4>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800525a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800525c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800525e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8005264:	2320      	movs	r3, #32
 8005266:	e003      	b.n	8005270 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8005268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005270:	429a      	cmp	r2, r3
 8005272:	d106      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	2103      	movs	r1, #3
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff f9bd 	bl	80045fc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fae4 	bl	8004854 <LL_ADC_IsEnabled>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 81c9 	bne.w	8005626 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	461a      	mov	r2, r3
 80052a2:	f7ff fa43 	bl	800472c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4a8f      	ldr	r2, [pc, #572]	@ (80054e8 <HAL_ADC_ConfigChannel+0x65c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	f040 8131 	bne.w	8005514 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10b      	bne.n	80052da <HAL_ADC_ConfigChannel+0x44e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	0e9b      	lsrs	r3, r3, #26
 80052c8:	3301      	adds	r3, #1
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2b09      	cmp	r3, #9
 80052d0:	bf94      	ite	ls
 80052d2:	2301      	movls	r3, #1
 80052d4:	2300      	movhi	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	e019      	b.n	800530e <HAL_ADC_ConfigChannel+0x482>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e2:	fa93 f3a3 	rbit	r3, r3
 80052e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80052e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80052ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80052f2:	2320      	movs	r3, #32
 80052f4:	e003      	b.n	80052fe <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80052f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052f8:	fab3 f383 	clz	r3, r3
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2b09      	cmp	r3, #9
 8005306:	bf94      	ite	ls
 8005308:	2301      	movls	r3, #1
 800530a:	2300      	movhi	r3, #0
 800530c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800530e:	2b00      	cmp	r3, #0
 8005310:	d079      	beq.n	8005406 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_ADC_ConfigChannel+0x4a2>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	0e9b      	lsrs	r3, r3, #26
 8005324:	3301      	adds	r3, #1
 8005326:	069b      	lsls	r3, r3, #26
 8005328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800532c:	e015      	b.n	800535a <HAL_ADC_ConfigChannel+0x4ce>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800533c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800533e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005346:	2320      	movs	r3, #32
 8005348:	e003      	b.n	8005352 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800534a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534c:	fab3 f383 	clz	r3, r3
 8005350:	b2db      	uxtb	r3, r3
 8005352:	3301      	adds	r3, #1
 8005354:	069b      	lsls	r3, r3, #26
 8005356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_ADC_ConfigChannel+0x4ee>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	0e9b      	lsrs	r3, r3, #26
 800536c:	3301      	adds	r3, #1
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2101      	movs	r1, #1
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	e017      	b.n	80053aa <HAL_ADC_ConfigChannel+0x51e>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800538c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8005392:	2320      	movs	r3, #32
 8005394:	e003      	b.n	800539e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8005396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	ea42 0103 	orr.w	r1, r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x544>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	0e9b      	lsrs	r3, r3, #26
 80053c0:	3301      	adds	r3, #1
 80053c2:	f003 021f 	and.w	r2, r3, #31
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	051b      	lsls	r3, r3, #20
 80053ce:	e018      	b.n	8005402 <HAL_ADC_ConfigChannel+0x576>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80053e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80053e8:	2320      	movs	r3, #32
 80053ea:	e003      	b.n	80053f4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80053ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	3301      	adds	r3, #1
 80053f6:	f003 021f 	and.w	r2, r3, #31
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005402:	430b      	orrs	r3, r1
 8005404:	e081      	b.n	800550a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x596>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	0e9b      	lsrs	r3, r3, #26
 8005418:	3301      	adds	r3, #1
 800541a:	069b      	lsls	r3, r3, #26
 800541c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005420:	e015      	b.n	800544e <HAL_ADC_ConfigChannel+0x5c2>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800543a:	2320      	movs	r3, #32
 800543c:	e003      	b.n	8005446 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	b2db      	uxtb	r3, r3
 8005446:	3301      	adds	r3, #1
 8005448:	069b      	lsls	r3, r3, #26
 800544a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_ADC_ConfigChannel+0x5e2>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	0e9b      	lsrs	r3, r3, #26
 8005460:	3301      	adds	r3, #1
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2101      	movs	r1, #1
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	e017      	b.n	800549e <HAL_ADC_ConfigChannel+0x612>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	61fb      	str	r3, [r7, #28]
  return result;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8005486:	2320      	movs	r3, #32
 8005488:	e003      	b.n	8005492 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	fab3 f383 	clz	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	3301      	adds	r3, #1
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	2101      	movs	r1, #1
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
 800549e:	ea42 0103 	orr.w	r1, r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10d      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x63e>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0e9b      	lsrs	r3, r3, #26
 80054b4:	3301      	adds	r3, #1
 80054b6:	f003 021f 	and.w	r2, r3, #31
 80054ba:	4613      	mov	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	4413      	add	r3, r2
 80054c0:	3b1e      	subs	r3, #30
 80054c2:	051b      	lsls	r3, r3, #20
 80054c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054c8:	e01e      	b.n	8005508 <HAL_ADC_ConfigChannel+0x67c>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	fa93 f3a3 	rbit	r3, r3
 80054d6:	613b      	str	r3, [r7, #16]
  return result;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80054e2:	2320      	movs	r3, #32
 80054e4:	e006      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x668>
 80054e6:	bf00      	nop
 80054e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	3301      	adds	r3, #1
 80054f6:	f003 021f 	and.w	r2, r3, #31
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	3b1e      	subs	r3, #30
 8005502:	051b      	lsls	r3, r3, #20
 8005504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005508:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800550e:	4619      	mov	r1, r3
 8005510:	f7ff f8e1 	bl	80046d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b48      	ldr	r3, [pc, #288]	@ (800563c <HAL_ADC_ConfigChannel+0x7b0>)
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8082 	beq.w	8005626 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005522:	4847      	ldr	r0, [pc, #284]	@ (8005640 <HAL_ADC_ConfigChannel+0x7b4>)
 8005524:	f7ff f822 	bl	800456c <LL_ADC_GetCommonPathInternalCh>
 8005528:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800552c:	4845      	ldr	r0, [pc, #276]	@ (8005644 <HAL_ADC_ConfigChannel+0x7b8>)
 800552e:	f7ff f991 	bl	8004854 <LL_ADC_IsEnabled>
 8005532:	4604      	mov	r4, r0
 8005534:	4844      	ldr	r0, [pc, #272]	@ (8005648 <HAL_ADC_ConfigChannel+0x7bc>)
 8005536:	f7ff f98d 	bl	8004854 <LL_ADC_IsEnabled>
 800553a:	4603      	mov	r3, r0
 800553c:	4323      	orrs	r3, r4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d15e      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a41      	ldr	r2, [pc, #260]	@ (800564c <HAL_ADC_ConfigChannel+0x7c0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d127      	bne.n	800559c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800554c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d121      	bne.n	800559c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a39      	ldr	r2, [pc, #228]	@ (8005644 <HAL_ADC_ConfigChannel+0x7b8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d161      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005562:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005566:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800556a:	4619      	mov	r1, r3
 800556c:	4834      	ldr	r0, [pc, #208]	@ (8005640 <HAL_ADC_ConfigChannel+0x7b4>)
 800556e:	f7fe ffea 	bl	8004546 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005572:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <HAL_ADC_ConfigChannel+0x7c4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	4a36      	ldr	r2, [pc, #216]	@ (8005654 <HAL_ADC_ConfigChannel+0x7c8>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	099b      	lsrs	r3, r3, #6
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800558a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800558c:	e002      	b.n	8005594 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b01      	subs	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f9      	bne.n	800558e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800559a:	e044      	b.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005658 <HAL_ADC_ConfigChannel+0x7cc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d113      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10d      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a23      	ldr	r2, [pc, #140]	@ (8005644 <HAL_ADC_ConfigChannel+0x7b8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d134      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055c4:	4619      	mov	r1, r3
 80055c6:	481e      	ldr	r0, [pc, #120]	@ (8005640 <HAL_ADC_ConfigChannel+0x7b4>)
 80055c8:	f7fe ffbd 	bl	8004546 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055cc:	e02b      	b.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a22      	ldr	r2, [pc, #136]	@ (800565c <HAL_ADC_ConfigChannel+0x7d0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d126      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d120      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	@ (8005644 <HAL_ADC_ConfigChannel+0x7b8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d11b      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055f6:	4619      	mov	r1, r3
 80055f8:	4811      	ldr	r0, [pc, #68]	@ (8005640 <HAL_ADC_ConfigChannel+0x7b4>)
 80055fa:	f7fe ffa4 	bl	8004546 <LL_ADC_SetCommonPathInternalCh>
 80055fe:	e012      	b.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005612:	e008      	b.n	8005626 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800562e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005632:	4618      	mov	r0, r3
 8005634:	37dc      	adds	r7, #220	@ 0xdc
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}
 800563a:	bf00      	nop
 800563c:	80080000 	.word	0x80080000
 8005640:	42028300 	.word	0x42028300
 8005644:	42028000 	.word	0x42028000
 8005648:	42028100 	.word	0x42028100
 800564c:	c7520000 	.word	0xc7520000
 8005650:	20000020 	.word	0x20000020
 8005654:	053e2d63 	.word	0x053e2d63
 8005658:	cb840000 	.word	0xcb840000
 800565c:	80000001 	.word	0x80000001

08005660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff f8ef 	bl	8004854 <LL_ADC_IsEnabled>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d169      	bne.n	8005750 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	4b36      	ldr	r3, [pc, #216]	@ (800575c <ADC_Enable+0xfc>)
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00d      	beq.n	80056a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568e:	f043 0210 	orr.w	r2, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e055      	b.n	8005752 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f8be 	bl	800482c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056b0:	482b      	ldr	r0, [pc, #172]	@ (8005760 <ADC_Enable+0x100>)
 80056b2:	f7fe ff5b 	bl	800456c <LL_ADC_GetCommonPathInternalCh>
 80056b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80056b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056c0:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <ADC_Enable+0x104>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	099b      	lsrs	r3, r3, #6
 80056c6:	4a28      	ldr	r2, [pc, #160]	@ (8005768 <ADC_Enable+0x108>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	099b      	lsrs	r3, r3, #6
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056da:	e002      	b.n	80056e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	3b01      	subs	r3, #1
 80056e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f9      	bne.n	80056dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056e8:	f7fe feea 	bl	80044c0 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056ee:	e028      	b.n	8005742 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff f8ad 	bl	8004854 <LL_ADC_IsEnabled>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f891 	bl	800482c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800570a:	f7fe fed9 	bl	80044c0 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d914      	bls.n	8005742 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d00d      	beq.n	8005742 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	f043 0210 	orr.w	r2, r3, #16
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e007      	b.n	8005752 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d1cf      	bne.n	80056f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	8000003f 	.word	0x8000003f
 8005760:	42028300 	.word	0x42028300
 8005764:	20000020 	.word	0x20000020
 8005768:	053e2d63 	.word	0x053e2d63

0800576c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	d14b      	bne.n	800581e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d021      	beq.n	80057e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe ff57 	bl	8004658 <LL_ADC_REG_IsTriggerSourceSWStart>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d032      	beq.n	8005816 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12b      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11f      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	f043 0201 	orr.w	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80057e2:	e018      	b.n	8005816 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d111      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff fb24 	bl	8004e64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800581c:	e00e      	b.n	800583c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fb24 	bl	8004e78 <HAL_ADC_ErrorCallback>
}
 8005830:	e004      	b.n	800583c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7fd ff56 	bl	8003704 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff faf6 	bl	8004e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <LL_ADC_IsEnabled>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <LL_ADC_IsEnabled+0x18>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <LL_ADC_IsEnabled+0x1a>
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_ADC_REG_IsConversionOngoing>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d101      	bne.n	80058d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80058e0:	b590      	push	{r4, r7, lr}
 80058e2:	b0a1      	sub	sp, #132	@ 0x84
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e089      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005906:	2300      	movs	r3, #0
 8005908:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800590a:	2300      	movs	r3, #0
 800590c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a42      	ldr	r2, [pc, #264]	@ (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d102      	bne.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005918:	4b41      	ldr	r3, [pc, #260]	@ (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e001      	b.n	8005922 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e068      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff ffb9 	bl	80058ba <LL_ADC_REG_IsConversionOngoing>
 8005948:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff ffb3 	bl	80058ba <LL_ADC_REG_IsConversionOngoing>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d14a      	bne.n	80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800595a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800595c:	2b00      	cmp	r3, #0
 800595e:	d147      	bne.n	80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005960:	4b30      	ldr	r3, [pc, #192]	@ (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005962:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d027      	beq.n	80059bc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800596c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6859      	ldr	r1, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800597e:	035b      	lsls	r3, r3, #13
 8005980:	430b      	orrs	r3, r1
 8005982:	431a      	orrs	r2, r3
 8005984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005986:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005988:	4824      	ldr	r0, [pc, #144]	@ (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800598a:	f7ff ff83 	bl	8005894 <LL_ADC_IsEnabled>
 800598e:	4604      	mov	r4, r0
 8005990:	4823      	ldr	r0, [pc, #140]	@ (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005992:	f7ff ff7f 	bl	8005894 <LL_ADC_IsEnabled>
 8005996:	4603      	mov	r3, r0
 8005998:	4323      	orrs	r3, r4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d132      	bne.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800599e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059a6:	f023 030f 	bic.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	431a      	orrs	r2, r3
 80059b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059ba:	e023      	b.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80059bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059c8:	4814      	ldr	r0, [pc, #80]	@ (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80059ca:	f7ff ff63 	bl	8005894 <LL_ADC_IsEnabled>
 80059ce:	4604      	mov	r4, r0
 80059d0:	4813      	ldr	r0, [pc, #76]	@ (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80059d2:	f7ff ff5f 	bl	8005894 <LL_ADC_IsEnabled>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4323      	orrs	r3, r4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d112      	bne.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059e6:	f023 030f 	bic.w	r3, r3, #15
 80059ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80059ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059ee:	e009      	b.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005a02:	e000      	b.n	8005a06 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3784      	adds	r7, #132	@ 0x84
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd90      	pop	{r4, r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	42028000 	.word	0x42028000
 8005a20:	42028100 	.word	0x42028100
 8005a24:	42028300 	.word	0x42028300

08005a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a38:	4b0c      	ldr	r3, [pc, #48]	@ (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a44:	4013      	ands	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a5a:	4a04      	ldr	r2, [pc, #16]	@ (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	60d3      	str	r3, [r2, #12]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	e000ed00 	.word	0xe000ed00

08005a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <__NVIC_GetPriorityGrouping+0x18>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 0307 	and.w	r3, r3, #7
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db0b      	blt.n	8005ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	f003 021f 	and.w	r2, r3, #31
 8005aa4:	4907      	ldr	r1, [pc, #28]	@ (8005ac4 <__NVIC_EnableIRQ+0x38>)
 8005aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2001      	movs	r0, #1
 8005aae:	fa00 f202 	lsl.w	r2, r0, r2
 8005ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000e100 	.word	0xe000e100

08005ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db0a      	blt.n	8005af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	490c      	ldr	r1, [pc, #48]	@ (8005b14 <__NVIC_SetPriority+0x4c>)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	0152      	lsls	r2, r2, #5
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	440b      	add	r3, r1
 8005aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005af0:	e00a      	b.n	8005b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4908      	ldr	r1, [pc, #32]	@ (8005b18 <__NVIC_SetPriority+0x50>)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	3b04      	subs	r3, #4
 8005b00:	0152      	lsls	r2, r2, #5
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	440b      	add	r3, r1
 8005b06:	761a      	strb	r2, [r3, #24]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	e000e100 	.word	0xe000e100
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	@ 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f1c3 0307 	rsb	r3, r3, #7
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	bf28      	it	cs
 8005b3a:	2303      	movcs	r3, #3
 8005b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3303      	adds	r3, #3
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d902      	bls.n	8005b4c <NVIC_EncodePriority+0x30>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	3b04      	subs	r3, #4
 8005b4a:	e000      	b.n	8005b4e <NVIC_EncodePriority+0x32>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	401a      	ands	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	43d9      	mvns	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b74:	4313      	orrs	r3, r2
         );
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3724      	adds	r7, #36	@ 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff4c 	bl	8005a28 <__NVIC_SetPriorityGrouping>
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ba6:	f7ff ff63 	bl	8005a70 <__NVIC_GetPriorityGrouping>
 8005baa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	6978      	ldr	r0, [r7, #20]
 8005bb2:	f7ff ffb3 	bl	8005b1c <NVIC_EncodePriority>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff ff82 	bl	8005ac8 <__NVIC_SetPriority>
}
 8005bc4:	bf00      	nop
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff56 	bl	8005a8c <__NVIC_EnableIRQ>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e08d      	b.n	8005d16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4b47      	ldr	r3, [pc, #284]	@ (8005d20 <HAL_DMA_Init+0x138>)
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d80f      	bhi.n	8005c26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b45      	ldr	r3, [pc, #276]	@ (8005d24 <HAL_DMA_Init+0x13c>)
 8005c0e:	4413      	add	r3, r2
 8005c10:	4a45      	ldr	r2, [pc, #276]	@ (8005d28 <HAL_DMA_Init+0x140>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	009a      	lsls	r2, r3, #2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a42      	ldr	r2, [pc, #264]	@ (8005d2c <HAL_DMA_Init+0x144>)
 8005c22:	649a      	str	r2, [r3, #72]	@ 0x48
 8005c24:	e00e      	b.n	8005c44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4b40      	ldr	r3, [pc, #256]	@ (8005d30 <HAL_DMA_Init+0x148>)
 8005c2e:	4413      	add	r3, r2
 8005c30:	4a3d      	ldr	r2, [pc, #244]	@ (8005d28 <HAL_DMA_Init+0x140>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	009a      	lsls	r2, r3, #2
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a3c      	ldr	r2, [pc, #240]	@ (8005d34 <HAL_DMA_Init+0x14c>)
 8005c42:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8005c5a:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8005c5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa38 	bl	800610c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ca4:	d102      	bne.n	8005cac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005cc0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_DMA_Init+0x104>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d80c      	bhi.n	8005cec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa58 	bl	8006188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	e008      	b.n	8005cfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40020407 	.word	0x40020407
 8005d24:	bffdfff8 	.word	0xbffdfff8
 8005d28:	cccccccd 	.word	0xcccccccd
 8005d2c:	40020000 	.word	0x40020000
 8005d30:	bffdfbf8 	.word	0xbffdfbf8
 8005d34:	40020400 	.word	0x40020400

08005d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_DMA_Start_IT+0x20>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e066      	b.n	8005e26 <HAL_DMA_Start_IT+0xee>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d155      	bne.n	8005e18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f97c 	bl	800608e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 020e 	orr.w	r2, r2, #14
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e00f      	b.n	8005dd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 020a 	orr.w	r2, r2, #10
 8005dce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dec:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e005      	b.n	8005e24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e20:	2302      	movs	r3, #2
 8005e22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4a:	f003 031c 	and.w	r3, r3, #28
 8005e4e:	2204      	movs	r2, #4
 8005e50:	409a      	lsls	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d053      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd4>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d04e      	beq.n	8005f02 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d024      	beq.n	8005ebc <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e76:	f003 021c 	and.w	r2, r3, #28
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7e:	2104      	movs	r1, #4
 8005e80:	fa01 f202 	lsl.w	r2, r1, r2
 8005e84:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d109      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80c0 	beq.w	800601e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005ea6:	e0ba      	b.n	800601e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80b6 	beq.w	800601e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005eba:	e0b0      	b.n	800601e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d107      	bne.n	8005eda <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0204 	bic.w	r2, r2, #4
 8005ed8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	f003 021c 	and.w	r2, r3, #28
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee6:	2104      	movs	r1, #4
 8005ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8005eec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8093 	beq.w	800601e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005f00:	e08d      	b.n	800601e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f06:	f003 031c 	and.w	r3, r3, #28
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d04e      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x186>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d049      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d018      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d108      	bne.n	8005f4e <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d06e      	beq.n	8006022 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005f4c:	e069      	b.n	8006022 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d065      	beq.n	8006022 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005f5e:	e060      	b.n	8006022 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 020a 	bic.w	r2, r2, #10
 8005f7c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8a:	f003 021c 	and.w	r2, r3, #28
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f92:	2102      	movs	r1, #2
 8005f94:	fa01 f202 	lsl.w	r2, r1, r2
 8005f98:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03b      	beq.n	8006022 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005fb2:	e036      	b.n	8006022 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb8:	f003 031c 	and.w	r3, r3, #28
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d02e      	beq.n	8006026 <HAL_DMA_IRQHandler+0x1f8>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d029      	beq.n	8006026 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 020e 	bic.w	r2, r2, #14
 8005fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe6:	f003 021c 	and.w	r2, r3, #28
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fee:	2101      	movs	r1, #1
 8005ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800601c:	e002      	b.n	8006024 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800601e:	bf00      	nop
 8006020:	e000      	b.n	8006024 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8006022:	bf00      	nop
  return;
 8006024:	bf00      	nop
 8006026:	bf00      	nop
}
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	72fb      	strb	r3, [r7, #11]
    return status;
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	e01b      	b.n	8006082 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e003      	b.n	8006078 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006076:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  return status;
 8006080:	7afb      	ldrb	r3, [r7, #11]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80060a4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d004      	beq.n	80060b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80060b6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060bc:	f003 021c 	and.w	r2, r3, #28
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f202 	lsl.w	r2, r1, r2
 80060ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d108      	bne.n	80060ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80060ec:	e007      	b.n	80060fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	4b17      	ldr	r3, [pc, #92]	@ (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800611c:	429a      	cmp	r2, r3
 800611e:	d80a      	bhi.n	8006136 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006124:	089b      	lsrs	r3, r3, #2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800612c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6513      	str	r3, [r2, #80]	@ 0x50
 8006134:	e007      	b.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	009a      	lsls	r2, r3, #2
 800613e:	4b0f      	ldr	r3, [pc, #60]	@ (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3b08      	subs	r3, #8
 800614e:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0a      	ldr	r2, [pc, #40]	@ (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800615c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2201      	movs	r2, #1
 8006166:	409a      	lsls	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40020407 	.word	0x40020407
 800617c:	40020820 	.word	0x40020820
 8006180:	cccccccd 	.word	0xcccccccd
 8006184:	40020880 	.word	0x40020880

08006188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4b0b      	ldr	r3, [pc, #44]	@ (80061c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a08      	ldr	r2, [pc, #32]	@ (80061cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2201      	movs	r2, #1
 80061b6:	409a      	lsls	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	1000823f 	.word	0x1000823f
 80061cc:	40020940 	.word	0x40020940

080061d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e142      	b.n	8006468 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc ffbe 	bl	8003178 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0210 	bic.w	r2, r2, #16
 800620a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800620c:	f7fe f958 	bl	80044c0 <HAL_GetTick>
 8006210:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006212:	e012      	b.n	800623a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006214:	f7fe f954 	bl	80044c0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b0a      	cmp	r3, #10
 8006220:	d90b      	bls.n	800623a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2203      	movs	r2, #3
 8006232:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e116      	b.n	8006468 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d0e5      	beq.n	8006214 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006258:	f7fe f932 	bl	80044c0 <HAL_GetTick>
 800625c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800625e:	e012      	b.n	8006286 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006260:	f7fe f92e 	bl	80044c0 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b0a      	cmp	r3, #10
 800626c:	d90b      	bls.n	8006286 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2203      	movs	r2, #3
 800627e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e0f0      	b.n	8006468 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0e5      	beq.n	8006260 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0202 	orr.w	r2, r2, #2
 80062a2:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80062a4:	4a72      	ldr	r2, [pc, #456]	@ (8006470 <HAL_FDCAN_Init+0x2a0>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7c1b      	ldrb	r3, [r3, #16]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d108      	bne.n	80062c6 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c2:	619a      	str	r2, [r3, #24]
 80062c4:	e007      	b.n	80062d6 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7c5b      	ldrb	r3, [r3, #17]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d108      	bne.n	80062f0 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ec:	619a      	str	r2, [r3, #24]
 80062ee:	e007      	b.n	8006300 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7c9b      	ldrb	r3, [r3, #18]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d108      	bne.n	800631a <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006316:	619a      	str	r2, [r3, #24]
 8006318:	e007      	b.n	800632a <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006328:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800634e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0210 	bic.w	r2, r2, #16
 800635e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d108      	bne.n	800637a <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0204 	orr.w	r2, r2, #4
 8006376:	619a      	str	r2, [r3, #24]
 8006378:	e02c      	b.n	80063d4 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d028      	beq.n	80063d4 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d01c      	beq.n	80063c4 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006398:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0210 	orr.w	r2, r2, #16
 80063a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d110      	bne.n	80063d4 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0220 	orr.w	r2, r2, #32
 80063c0:	619a      	str	r2, [r3, #24]
 80063c2:	e007      	b.n	80063d4 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0220 	orr.w	r2, r2, #32
 80063d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	3b01      	subs	r3, #1
 80063da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80063fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006408:	d115      	bne.n	8006436 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	3b01      	subs	r3, #1
 8006416:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006418:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641e:	3b01      	subs	r3, #1
 8006420:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006422:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	3b01      	subs	r3, #1
 800642c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006432:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006434:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f811 	bl	8006474 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	4000a500 	.word	0x4000a500

08006474 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800647c:	4b27      	ldr	r3, [pc, #156]	@ (800651c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800647e:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006496:	041a      	lsls	r2, r3, #16
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	061a      	lsls	r2, r3, #24
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e005      	b.n	8006502 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3304      	adds	r3, #4
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	429a      	cmp	r2, r3
 800650c:	d3f3      	bcc.n	80064f6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800650e:	bf00      	nop
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	4000ac00 	.word	0x4000ac00

08006520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800652e:	e158      	b.n	80067e2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	2101      	movs	r1, #1
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	fa01 f303 	lsl.w	r3, r1, r3
 800653c:	4013      	ands	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 814a 	beq.w	80067dc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d005      	beq.n	8006560 <HAL_GPIO_Init+0x40>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d130      	bne.n	80065c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	2203      	movs	r2, #3
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	43db      	mvns	r3, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4013      	ands	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006596:	2201      	movs	r2, #1
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	43db      	mvns	r3, r3
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4013      	ands	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	091b      	lsrs	r3, r3, #4
 80065ac:	f003 0201 	and.w	r2, r3, #1
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d017      	beq.n	80065fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	2203      	movs	r2, #3
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4013      	ands	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d123      	bne.n	8006652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	08da      	lsrs	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3208      	adds	r2, #8
 8006612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006616:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	220f      	movs	r2, #15
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	43db      	mvns	r3, r3
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4013      	ands	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	08da      	lsrs	r2, r3, #3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3208      	adds	r2, #8
 800664c:	6939      	ldr	r1, [r7, #16]
 800664e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	2203      	movs	r2, #3
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43db      	mvns	r3, r3
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 0203 	and.w	r2, r3, #3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80a4 	beq.w	80067dc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8006694:	4a5a      	ldr	r2, [pc, #360]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	3318      	adds	r3, #24
 800669c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	220f      	movs	r2, #15
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	43db      	mvns	r3, r3
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4013      	ands	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a52      	ldr	r2, [pc, #328]	@ (8006804 <HAL_GPIO_Init+0x2e4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d025      	beq.n	800670c <HAL_GPIO_Init+0x1ec>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a51      	ldr	r2, [pc, #324]	@ (8006808 <HAL_GPIO_Init+0x2e8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01f      	beq.n	8006708 <HAL_GPIO_Init+0x1e8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a50      	ldr	r2, [pc, #320]	@ (800680c <HAL_GPIO_Init+0x2ec>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d019      	beq.n	8006704 <HAL_GPIO_Init+0x1e4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a4f      	ldr	r2, [pc, #316]	@ (8006810 <HAL_GPIO_Init+0x2f0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_GPIO_Init+0x1e0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a4e      	ldr	r2, [pc, #312]	@ (8006814 <HAL_GPIO_Init+0x2f4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00d      	beq.n	80066fc <HAL_GPIO_Init+0x1dc>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a4d      	ldr	r2, [pc, #308]	@ (8006818 <HAL_GPIO_Init+0x2f8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <HAL_GPIO_Init+0x1d8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a4c      	ldr	r2, [pc, #304]	@ (800681c <HAL_GPIO_Init+0x2fc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <HAL_GPIO_Init+0x1d4>
 80066f0:	2306      	movs	r3, #6
 80066f2:	e00c      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 80066f4:	2307      	movs	r3, #7
 80066f6:	e00a      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 80066f8:	2305      	movs	r3, #5
 80066fa:	e008      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 80066fc:	2304      	movs	r3, #4
 80066fe:	e006      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 8006700:	2303      	movs	r3, #3
 8006702:	e004      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 8006704:	2302      	movs	r3, #2
 8006706:	e002      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <HAL_GPIO_Init+0x1ee>
 800670c:	2300      	movs	r3, #0
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	f002 0203 	and.w	r2, r2, #3
 8006714:	00d2      	lsls	r2, r2, #3
 8006716:	4093      	lsls	r3, r2
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800671e:	4938      	ldr	r1, [pc, #224]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	089b      	lsrs	r3, r3, #2
 8006724:	3318      	adds	r3, #24
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800672c:	4b34      	ldr	r3, [pc, #208]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006750:	4a2b      	ldr	r2, [pc, #172]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006756:	4b2a      	ldr	r3, [pc, #168]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	43db      	mvns	r3, r3
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4013      	ands	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800677a:	4a21      	ldr	r2, [pc, #132]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006780:	4b1f      	ldr	r3, [pc, #124]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 8006782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	43db      	mvns	r3, r3
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4013      	ands	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067a6:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80067ae:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 80067b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	43db      	mvns	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006800 <HAL_GPIO_Init+0x2e0>)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3301      	adds	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f ae9f 	bne.w	8006530 <HAL_GPIO_Init+0x10>
  }
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	4002f400 	.word	0x4002f400
 8006804:	42020000 	.word	0x42020000
 8006808:	42020400 	.word	0x42020400
 800680c:	42020800 	.word	0x42020800
 8006810:	42020c00 	.word	0x42020c00
 8006814:	42021000 	.word	0x42021000
 8006818:	42021400 	.word	0x42021400
 800681c:	42021800 	.word	0x42021800

08006820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	887b      	ldrh	r3, [r7, #2]
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
 800683c:	e001      	b.n	8006842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006842:	7bfb      	ldrb	r3, [r7, #15]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	807b      	strh	r3, [r7, #2]
 800685c:	4613      	mov	r3, r2
 800685e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006860:	787b      	ldrb	r3, [r7, #1]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006866:	887a      	ldrh	r2, [r7, #2]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800686c:	e002      	b.n	8006874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800686e:	887a      	ldrh	r2, [r7, #2]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006892:	887a      	ldrh	r2, [r7, #2]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4013      	ands	r3, r2
 8006898:	041a      	lsls	r2, r3, #16
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	43d9      	mvns	r1, r3
 800689e:	887b      	ldrh	r3, [r7, #2]
 80068a0:	400b      	ands	r3, r1
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	619a      	str	r2, [r3, #24]
}
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80068c0:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
 80068d0:	e007      	b.n	80068e2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80068d2:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 0204 	bic.w	r2, r3, #4
 80068da:	4905      	ldr	r1, [pc, #20]	@ (80068f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4313      	orrs	r3, r2
 80068e0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40030400 	.word	0x40030400

080068f4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_ICACHE_Enable+0x1c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a04      	ldr	r2, [pc, #16]	@ (8006910 <HAL_ICACHE_Enable+0x1c>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40030400 	.word	0x40030400

08006914 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f007 f950 	bl	800dbc6 <USB_ReadInterrupts>
 8006926:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 faa4 	bl	8006e80 <PCD_EP_ISR_Handler>

    return;
 8006938:	e110      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006956:	b292      	uxth	r2, r2
 8006958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f008 fde8 	bl	800f532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006962:	2100      	movs	r1, #0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f8fc 	bl	8006b62 <HAL_PCD_SetAddress>

    return;
 800696a:	e0f7      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800697e:	b29a      	uxth	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006988:	b292      	uxth	r2, r2
 800698a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800698e:	e0e5      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00c      	beq.n	80069b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069ac:	b292      	uxth	r2, r2
 80069ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80069b2:	e0d3      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d034      	beq.n	8006a28 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0204 	bic.w	r2, r2, #4
 80069d0:	b292      	uxth	r2, r2
 80069d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0208 	bic.w	r2, r2, #8
 80069e8:	b292      	uxth	r2, r2
 80069ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f008 fedc 	bl	800f7c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f008 fdcb 	bl	800f5a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a20:	b292      	uxth	r2, r2
 8006a22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006a26:	e099      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d027      	beq.n	8006a82 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0208 	orr.w	r2, r2, #8
 8006a44:	b292      	uxth	r2, r2
 8006a46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a5c:	b292      	uxth	r2, r2
 8006a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0204 	orr.w	r2, r2, #4
 8006a74:	b292      	uxth	r2, r2
 8006a76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f008 fd78 	bl	800f570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006a80:	e06c      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d040      	beq.n	8006b0e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d12b      	bne.n	8006b06 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0204 	orr.w	r2, r2, #4
 8006ac0:	b292      	uxth	r2, r2
 8006ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0208 	orr.w	r2, r2, #8
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	089b      	lsrs	r3, r3, #2
 8006af2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006afc:	2101      	movs	r1, #1
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f008 fe5e 	bl	800f7c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006b04:	e02a      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f008 fd32 	bl	800f570 <HAL_PCD_SuspendCallback>
    return;
 8006b0c:	e026      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00f      	beq.n	8006b38 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f008 fcf0 	bl	800f516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006b36:	e011      	b.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00c      	beq.n	8006b5c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b54:	b292      	uxth	r2, r2
 8006b56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006b5a:	bf00      	nop
  }
}
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_PCD_SetAddress+0x1a>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e012      	b.n	8006ba2 <HAL_PCD_SetAddress+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f007 f803 	bl	800db9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	70fb      	strb	r3, [r7, #3]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	803b      	strh	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da0e      	bge.n	8006bee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	f003 0207 	and.w	r2, r3, #7
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	3310      	adds	r3, #16
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	705a      	strb	r2, [r3, #1]
 8006bec:	e00e      	b.n	8006c0c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 0207 	and.w	r2, r3, #7
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4413      	add	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c18:	883a      	ldrh	r2, [r7, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	78ba      	ldrb	r2, [r7, #2]
 8006c22:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c24:	78bb      	ldrb	r3, [r7, #2]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d102      	bne.n	8006c30 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_PCD_EP_Open+0x94>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e00e      	b.n	8006c5c <HAL_PCD_EP_Open+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f004 ff31 	bl	800bab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	460b      	mov	r3, r1
 8006c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	f003 0207 	and.w	r2, r3, #7
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6979      	ldr	r1, [r7, #20]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f005 fac0 	bl	800c23c <USB_EPStartXfer>

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f003 0207 	and.w	r2, r3, #7
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	3310      	adds	r3, #16
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6979      	ldr	r1, [r7, #20]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f005 fa89 	bl	800c23c <USB_EPStartXfer>

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	7912      	ldrb	r2, [r2, #4]
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e03e      	b.n	8006dd0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da0e      	bge.n	8006d78 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	f003 0207 	and.w	r2, r3, #7
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	3310      	adds	r3, #16
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	705a      	strb	r2, [r3, #1]
 8006d76:	e00c      	b.n	8006d92 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_PCD_EP_SetStall+0x7e>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e00e      	b.n	8006dd0 <HAL_PCD_EP_SetStall+0x9c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f006 fded 	bl	800d9a0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	7912      	ldrb	r2, [r2, #4]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e040      	b.n	8006e78 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da0e      	bge.n	8006e1c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	f003 0207 	and.w	r2, r3, #7
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	3310      	adds	r3, #16
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	705a      	strb	r2, [r3, #1]
 8006e1a:	e00e      	b.n	8006e3a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	f003 0207 	and.w	r2, r3, #7
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	4413      	add	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_PCD_EP_ClrStall+0x82>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e00e      	b.n	8006e78 <HAL_PCD_EP_ClrStall+0xa0>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f006 fdea 	bl	800da42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b096      	sub	sp, #88	@ 0x58
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006e88:	e3ad      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e92:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006e96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8006ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 816f 	bne.w	800718c <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006eae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d14c      	bne.n	8006f54 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	81fb      	strh	r3, [r7, #14]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	89fb      	ldrh	r3, [r7, #14]
 8006ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	441a      	add	r2, r3
 8006f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f008 fae0 	bl	800f4e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7b1b      	ldrb	r3, [r3, #12]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 835c 	beq.w	80075e6 <PCD_EP_ISR_Handler+0x766>
 8006f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 8357 	bne.w	80075e6 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7b1b      	ldrb	r3, [r3, #12]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	731a      	strb	r2, [r3, #12]
 8006f52:	e348      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f5a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006f66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d032      	beq.n	8006fd8 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4413      	add	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006faa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f006 fe5d 	bl	800dc6c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	823b      	strh	r3, [r7, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	8a3a      	ldrh	r2, [r7, #16]
 8006fc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f008 fa59 	bl	800f488 <HAL_PCD_SetupStageCallback>
 8006fd6:	e306      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006fd8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f280 8302 	bge.w	80075e6 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006fee:	4013      	ands	r3, r2
 8006ff0:	83fb      	strh	r3, [r7, #30]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	8bfa      	ldrh	r2, [r7, #30]
 8006ff8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	4413      	add	r3, r2
 800701a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007026:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d019      	beq.n	8007064 <PCD_EP_ISR_Handler+0x1e4>
 8007030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d015      	beq.n	8007064 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703e:	6959      	ldr	r1, [r3, #20]
 8007040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007042:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007046:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007048:	b29b      	uxth	r3, r3
 800704a:	f006 fe0f 	bl	800dc6c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800704e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007050:	695a      	ldr	r2, [r3, #20]
 8007052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	441a      	add	r2, r3
 8007058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800705a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800705c:	2100      	movs	r1, #0
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f008 fa24 	bl	800f4ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800706e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 82b5 	bne.w	80075e6 <PCD_EP_ISR_Handler+0x766>
 800707c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007080:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007084:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007088:	f000 82ad 	beq.w	80075e6 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	4413      	add	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <PCD_EP_ISR_Handler+0x25a>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e039      	b.n	800714e <PCD_EP_ISR_Handler+0x2ce>
 80070da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b3e      	cmp	r3, #62	@ 0x3e
 80070e0:	d818      	bhi.n	8007114 <PCD_EP_ISR_Handler+0x294>
 80070e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <PCD_EP_ISR_Handler+0x27c>
 80070f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f8:	3301      	adds	r3, #1
 80070fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29a      	uxth	r2, r3
 8007102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007104:	b29b      	uxth	r3, r3
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	b29b      	uxth	r3, r3
 800710a:	4313      	orrs	r3, r2
 800710c:	b29a      	uxth	r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	e01c      	b.n	800714e <PCD_EP_ISR_Handler+0x2ce>
 8007114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	647b      	str	r3, [r7, #68]	@ 0x44
 800711c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <PCD_EP_ISR_Handler+0x2ae>
 8007128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712a:	3b01      	subs	r3, #1
 800712c:	647b      	str	r3, [r7, #68]	@ 0x44
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29a      	uxth	r2, r3
 8007134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007136:	b29b      	uxth	r3, r3
 8007138:	029b      	lsls	r3, r3, #10
 800713a:	b29b      	uxth	r3, r3
 800713c:	4313      	orrs	r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007148:	b29a      	uxth	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800715a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715e:	827b      	strh	r3, [r7, #18]
 8007160:	8a7b      	ldrh	r3, [r7, #18]
 8007162:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007166:	827b      	strh	r3, [r7, #18]
 8007168:	8a7b      	ldrh	r3, [r7, #18]
 800716a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800716e:	827b      	strh	r3, [r7, #18]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	8a7b      	ldrh	r3, [r7, #18]
 8007176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800717a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800717e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]
 800718a:	e22c      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80071a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f280 80f6 	bge.w	8007396 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80071c0:	4013      	ands	r3, r2
 80071c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80071d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80071dc:	b292      	uxth	r2, r2
 80071de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80071e0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80071f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f8:	7b1b      	ldrb	r3, [r3, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d123      	bne.n	8007246 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007206:	b29b      	uxth	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4413      	add	r3, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	4413      	add	r3, r2
 8007218:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007222:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007226:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 808e 	beq.w	800734c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007236:	6959      	ldr	r1, [r3, #20]
 8007238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800723a:	88da      	ldrh	r2, [r3, #6]
 800723c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007240:	f006 fd14 	bl	800dc6c <USB_ReadPMA>
 8007244:	e082      	b.n	800734c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007248:	78db      	ldrb	r3, [r3, #3]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d10a      	bne.n	8007264 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800724e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007252:	461a      	mov	r2, r3
 8007254:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9d3 	bl	8007602 <HAL_PCD_EP_DB_Receive>
 800725c:	4603      	mov	r3, r0
 800725e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007262:	e073      	b.n	800734c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800727a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800727e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d022      	beq.n	8007308 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4413      	add	r3, r2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	4413      	add	r3, r2
 80072dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80072ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d02c      	beq.n	800734c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f8:	6959      	ldr	r1, [r3, #20]
 80072fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072fc:	891a      	ldrh	r2, [r3, #8]
 80072fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007302:	f006 fcb3 	bl	800dc6c <USB_ReadPMA>
 8007306:	e021      	b.n	800734c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	4413      	add	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	4413      	add	r3, r2
 8007322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800732c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007330:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800733e:	6959      	ldr	r1, [r3, #20]
 8007340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007342:	895a      	ldrh	r2, [r3, #10]
 8007344:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007348:	f006 fc90 	bl	800dc6c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800734c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800734e:	69da      	ldr	r2, [r3, #28]
 8007350:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007354:	441a      	add	r2, r3
 8007356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007358:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800735a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007362:	441a      	add	r2, r3
 8007364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007366:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <PCD_EP_ISR_Handler+0x4fc>
 8007370:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	429a      	cmp	r2, r3
 800737a:	d206      	bcs.n	800738a <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800737c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f008 f892 	bl	800f4ac <HAL_PCD_DataOutStageCallback>
 8007388:	e005      	b.n	8007396 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007390:	4618      	mov	r0, r3
 8007392:	f004 ff53 	bl	800c23c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007396:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800739a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8121 	beq.w	80075e6 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80073a4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	3310      	adds	r3, #16
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80073ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80073e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80073f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f040 80a2 	bne.w	8007542 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80073fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007400:	2200      	movs	r2, #0
 8007402:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007406:	7b1b      	ldrb	r3, [r3, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8093 	beq.w	8007534 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800740e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d046      	beq.n	80074a8 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800741a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d126      	bne.n	8007470 <PCD_EP_ISR_Handler+0x5f0>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007430:	b29b      	uxth	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	4413      	add	r3, r2
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
 800743a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	00da      	lsls	r2, r3, #3
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	4413      	add	r3, r2
 8007444:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007448:	623b      	str	r3, [r7, #32]
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007454:	b29a      	uxth	r2, r3
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	801a      	strh	r2, [r3, #0]
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e061      	b.n	8007534 <PCD_EP_ISR_Handler+0x6b4>
 8007470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d15d      	bne.n	8007534 <PCD_EP_ISR_Handler+0x6b4>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007486:	b29b      	uxth	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748c:	4413      	add	r3, r2
 800748e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	00da      	lsls	r2, r3, #3
 8007496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007498:	4413      	add	r3, r2
 800749a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	2200      	movs	r2, #0
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	e045      	b.n	8007534 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d126      	bne.n	8007504 <PCD_EP_ISR_Handler+0x684>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	4413      	add	r3, r2
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	00da      	lsls	r2, r3, #3
 80074d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	e017      	b.n	8007534 <PCD_EP_ISR_Handler+0x6b4>
 8007504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d113      	bne.n	8007534 <PCD_EP_ISR_Handler+0x6b4>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751a:	4413      	add	r3, r2
 800751c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800751e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	00da      	lsls	r2, r3, #3
 8007524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007526:	4413      	add	r3, r2
 8007528:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800752c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007530:	2200      	movs	r2, #0
 8007532:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f007 ffd1 	bl	800f4e2 <HAL_PCD_DataInStageCallback>
 8007540:	e051      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007542:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d144      	bne.n	80075d8 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007556:	b29b      	uxth	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	4413      	add	r3, r2
 8007568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007572:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800757e:	429a      	cmp	r2, r3
 8007580:	d907      	bls.n	8007592 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800758e:	619a      	str	r2, [r3, #24]
 8007590:	e002      	b.n	8007598 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007594:	2200      	movs	r2, #0
 8007596:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80075a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f007 ff9b 	bl	800f4e2 <HAL_PCD_DataInStageCallback>
 80075ac:	e01b      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80075ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b0:	695a      	ldr	r2, [r3, #20]
 80075b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80075b6:	441a      	add	r2, r3
 80075b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80075bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80075c4:	441a      	add	r2, r3
 80075c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075c8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075d0:	4618      	mov	r0, r3
 80075d2:	f004 fe33 	bl	800c23c <USB_EPStartXfer>
 80075d6:	e006      	b.n	80075e6 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80075d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075dc:	461a      	mov	r2, r3
 80075de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f917 	bl	8007814 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	b21b      	sxth	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f6ff ac49 	blt.w	8006e8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3758      	adds	r7, #88	@ 0x58
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b088      	sub	sp, #32
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d07c      	beq.n	8007714 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007622:	b29b      	uxth	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	4413      	add	r3, r2
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	4413      	add	r3, r2
 8007634:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800763e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	8b7b      	ldrh	r3, [r7, #26]
 8007646:	429a      	cmp	r2, r3
 8007648:	d306      	bcc.n	8007658 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	8b7b      	ldrh	r3, [r7, #26]
 8007650:	1ad2      	subs	r2, r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	619a      	str	r2, [r3, #24]
 8007656:	e002      	b.n	800765e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d123      	bne.n	80076ae <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800767c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007680:	833b      	strh	r3, [r7, #24]
 8007682:	8b3b      	ldrh	r3, [r7, #24]
 8007684:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007688:	833b      	strh	r3, [r7, #24]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	8b3b      	ldrh	r3, [r7, #24]
 800769a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800769e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01f      	beq.n	80076f8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d2:	82fb      	strh	r3, [r7, #22]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	441a      	add	r2, r3
 80076e2:	8afb      	ldrh	r3, [r7, #22]
 80076e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80076f8:	8b7b      	ldrh	r3, [r7, #26]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8085 	beq.w	800780a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6959      	ldr	r1, [r3, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	891a      	ldrh	r2, [r3, #8]
 800770c:	8b7b      	ldrh	r3, [r7, #26]
 800770e:	f006 faad 	bl	800dc6c <USB_ReadPMA>
 8007712:	e07a      	b.n	800780a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800771c:	b29b      	uxth	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4413      	add	r3, r2
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	4413      	add	r3, r2
 800772e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007738:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	8b7b      	ldrh	r3, [r7, #26]
 8007740:	429a      	cmp	r2, r3
 8007742:	d306      	bcc.n	8007752 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	8b7b      	ldrh	r3, [r7, #26]
 800774a:	1ad2      	subs	r2, r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	619a      	str	r2, [r3, #24]
 8007750:	e002      	b.n	8007758 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d123      	bne.n	80077a8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800777a:	83fb      	strh	r3, [r7, #30]
 800777c:	8bfb      	ldrh	r3, [r7, #30]
 800777e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007782:	83fb      	strh	r3, [r7, #30]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	8bfb      	ldrh	r3, [r7, #30]
 8007794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800779c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d11f      	bne.n	80077f2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077cc:	83bb      	strh	r3, [r7, #28]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	441a      	add	r2, r3
 80077dc:	8bbb      	ldrh	r3, [r7, #28]
 80077de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80077f2:	8b7b      	ldrh	r3, [r7, #26]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6959      	ldr	r1, [r3, #20]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	895a      	ldrh	r2, [r3, #10]
 8007804:	8b7b      	ldrh	r3, [r7, #26]
 8007806:	f006 fa31 	bl	800dc6c <USB_ReadPMA>
    }
  }

  return count;
 800780a:	8b7b      	ldrh	r3, [r7, #26]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3720      	adds	r7, #32
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b0a4      	sub	sp, #144	@ 0x90
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 81db 	beq.w	8007be4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	4413      	add	r3, r2
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	4413      	add	r3, r2
 8007848:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007852:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800785e:	429a      	cmp	r2, r3
 8007860:	d907      	bls.n	8007872 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	619a      	str	r2, [r3, #24]
 8007870:	e002      	b.n	8007878 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 80b9 	bne.w	80079f4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d126      	bne.n	80078d8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007898:	b29b      	uxth	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	4413      	add	r3, r2
 80078a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	00da      	lsls	r2, r3, #3
 80078a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078aa:	4413      	add	r3, r2
 80078ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078bc:	b29a      	uxth	r2, r3
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	e01a      	b.n	800790e <HAL_PCD_EP_DB_Transmit+0xfa>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d116      	bne.n	800790e <HAL_PCD_EP_DB_Transmit+0xfa>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f4:	4413      	add	r3, r2
 80078f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	00da      	lsls	r2, r3, #3
 80078fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007900:	4413      	add	r3, r2
 8007902:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007906:	633b      	str	r3, [r7, #48]	@ 0x30
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	2200      	movs	r2, #0
 800790c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	785b      	ldrb	r3, [r3, #1]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d126      	bne.n	800796a <HAL_PCD_EP_DB_Transmit+0x156>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	00da      	lsls	r2, r3, #3
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800794e:	b29a      	uxth	r2, r3
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007962:	b29a      	uxth	r2, r3
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	e017      	b.n	800799a <HAL_PCD_EP_DB_Transmit+0x186>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d113      	bne.n	800799a <HAL_PCD_EP_DB_Transmit+0x186>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007980:	4413      	add	r3, r2
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	00da      	lsls	r2, r3, #3
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	4413      	add	r3, r2
 800798e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007992:	623b      	str	r3, [r7, #32]
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	2200      	movs	r2, #0
 8007998:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f007 fd9e 	bl	800f4e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 82fa 	beq.w	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079cc:	82fb      	strh	r3, [r7, #22]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	8afb      	ldrh	r3, [r7, #22]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
 80079f2:	e2d8      	b.n	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d021      	beq.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	f040 82ac 	bne.w	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	695a      	ldr	r2, [r3, #20]
 8007a52:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007a56:	441a      	add	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007a64:	441a      	add	r2, r3
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d30b      	bcc.n	8007a8e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a86:	1ad2      	subs	r2, r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	621a      	str	r2, [r3, #32]
 8007a8c:	e017      	b.n	8007abe <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d108      	bne.n	8007aa8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8007a96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007aa6:	e00a      	b.n	8007abe <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d165      	bne.n	8007b92 <HAL_PCD_EP_DB_Transmit+0x37e>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ada:	4413      	add	r3, r2
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10a      	bne.n	8007b1c <HAL_PCD_EP_DB_Transmit+0x308>
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	801a      	strh	r2, [r3, #0]
 8007b1a:	e057      	b.n	8007bcc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b20:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b22:	d818      	bhi.n	8007b56 <HAL_PCD_EP_DB_Transmit+0x342>
 8007b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b28:	085b      	lsrs	r3, r3, #1
 8007b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <HAL_PCD_EP_DB_Transmit+0x32a>
 8007b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	029b      	lsls	r3, r3, #10
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e03a      	b.n	8007bcc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b5a:	095b      	lsrs	r3, r3, #5
 8007b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x35c>
 8007b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	029b      	lsls	r3, r3, #10
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e01c      	b.n	8007bcc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d118      	bne.n	8007bcc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bae:	4413      	add	r3, r2
 8007bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	00da      	lsls	r2, r3, #3
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	6959      	ldr	r1, [r3, #20]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	891a      	ldrh	r2, [r3, #8]
 8007bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f006 f802 	bl	800dbe6 <USB_WritePMA>
 8007be2:	e1e0      	b.n	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c08:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d307      	bcc.n	8007c28 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007c20:	1ad2      	subs	r2, r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	619a      	str	r2, [r3, #24]
 8007c26:	e002      	b.n	8007c2e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f040 80c0 	bne.w	8007db8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d126      	bne.n	8007c8e <HAL_PCD_EP_DB_Transmit+0x47a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c54:	4413      	add	r3, r2
 8007c56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	00da      	lsls	r2, r3, #3
 8007c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c60:	4413      	add	r3, r2
 8007c62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e01a      	b.n	8007cc4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d116      	bne.n	8007cc4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007caa:	4413      	add	r3, r2
 8007cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	00da      	lsls	r2, r3, #3
 8007cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d12b      	bne.n	8007d2a <HAL_PCD_EP_DB_Transmit+0x516>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce6:	4413      	add	r3, r2
 8007ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	00da      	lsls	r2, r3, #3
 8007cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	e017      	b.n	8007d5a <HAL_PCD_EP_DB_Transmit+0x546>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d113      	bne.n	8007d5a <HAL_PCD_EP_DB_Transmit+0x546>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d40:	4413      	add	r3, r2
 8007d42:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	00da      	lsls	r2, r3, #3
 8007d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d56:	2200      	movs	r2, #0
 8007d58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f007 fbbe 	bl	800f4e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 811a 	bne.w	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d8c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	441a      	add	r2, r3
 8007d9e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007daa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	8013      	strh	r3, [r2, #0]
 8007db6:	e0f6      	b.n	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d121      	bne.n	8007e06 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ddc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	441a      	add	r2, r3
 8007dee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	f040 80ca 	bne.w	8007fa6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	695a      	ldr	r2, [r3, #20]
 8007e16:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e1a:	441a      	add	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e28:	441a      	add	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d30b      	bcc.n	8007e52 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	621a      	str	r2, [r3, #32]
 8007e50:	e017      	b.n	8007e82 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007e5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007e6a:	e00a      	b.n	8007e82 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2200      	movs	r2, #0
 8007e78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d165      	bne.n	8007f5c <HAL_PCD_EP_DB_Transmit+0x748>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ea4:	4413      	add	r3, r2
 8007ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	00da      	lsls	r2, r3, #3
 8007eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8007ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	e054      	b.n	8007f90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8007eec:	d818      	bhi.n	8007f20 <HAL_PCD_EP_DB_Transmit+0x70c>
 8007eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8007f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f04:	3301      	adds	r3, #1
 8007f06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	029b      	lsls	r3, r3, #10
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f1c:	801a      	strh	r2, [r3, #0]
 8007f1e:	e037      	b.n	8007f90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f2c:	f003 031f 	and.w	r3, r3, #31
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <HAL_PCD_EP_DB_Transmit+0x726>
 8007f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f36:	3b01      	subs	r3, #1
 8007f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e019      	b.n	8007f90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d115      	bne.n	8007f90 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f72:	4413      	add	r3, r2
 8007f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	00da      	lsls	r2, r3, #3
 8007f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f7e:	4413      	add	r3, r2
 8007f80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f84:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6959      	ldr	r1, [r3, #20]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	895a      	ldrh	r2, [r3, #10]
 8007f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f005 fe20 	bl	800dbe6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc0:	82bb      	strh	r3, [r7, #20]
 8007fc2:	8abb      	ldrh	r3, [r7, #20]
 8007fc4:	f083 0310 	eor.w	r3, r3, #16
 8007fc8:	82bb      	strh	r3, [r7, #20]
 8007fca:	8abb      	ldrh	r3, [r7, #20]
 8007fcc:	f083 0320 	eor.w	r3, r3, #32
 8007fd0:	82bb      	strh	r3, [r7, #20]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	8abb      	ldrh	r3, [r7, #20]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3790      	adds	r7, #144	@ 0x90
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008004:	4b04      	ldr	r3, [pc, #16]	@ (8008018 <HAL_PWREx_GetVoltageRange+0x18>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800800c:	4618      	mov	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40007000 	.word	0x40007000

0800801c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8008024:	4b27      	ldr	r3, [pc, #156]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800802c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800802e:	f000 f861 	bl	80080f4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8008032:	4603      	mov	r3, r0
 8008034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008038:	d101      	bne.n	800803e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e03e      	b.n	80080bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800803e:	4b21      	ldr	r3, [pc, #132]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800804a:	d101      	bne.n	8008050 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e035      	b.n	80080bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d101      	bne.n	800805c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	e02f      	b.n	80080bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800805c:	4b19      	ldr	r3, [pc, #100]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008064:	4917      	ldr	r1, [pc, #92]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4313      	orrs	r3, r2
 800806a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800806c:	4b16      	ldr	r3, [pc, #88]	@ (80080c8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	4a16      	ldr	r2, [pc, #88]	@ (80080cc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8008074:	fba2 2303 	umull	r2, r3, r2, r3
 8008078:	09db      	lsrs	r3, r3, #7
 800807a:	2232      	movs	r2, #50	@ 0x32
 800807c:	fb02 f303 	mul.w	r3, r2, r3
 8008080:	4a13      	ldr	r2, [pc, #76]	@ (80080d0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8008082:	fba2 2303 	umull	r2, r3, r2, r3
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800808c:	e002      	b.n	8008094 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b01      	subs	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008094:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800809c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080a0:	d102      	bne.n	80080a8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f2      	bne.n	800808e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080a8:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b4:	d101      	bne.n	80080ba <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e000      	b.n	80080bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	40007000 	.word	0x40007000
 80080c8:	20000020 	.word	0x20000020
 80080cc:	0a7c5ac5 	.word	0x0a7c5ac5
 80080d0:	cccccccd 	.word	0xcccccccd

080080d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80080d8:	4b05      	ldr	r3, [pc, #20]	@ (80080f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	4a04      	ldr	r2, [pc, #16]	@ (80080f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80080de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080e2:	6093      	str	r3, [r2, #8]
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40007000 	.word	0x40007000

080080f4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80080fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008138 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800810a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	e00a      	b.n	8008128 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d103      	bne.n	8008124 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800811c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e001      	b.n	8008128 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8008124:	2300      	movs	r3, #0
 8008126:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8008128:	687b      	ldr	r3, [r7, #4]
}
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40007000 	.word	0x40007000

0800813c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	f000 bcc2 	b.w	8008ad4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008150:	4b99      	ldr	r3, [pc, #612]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 030c 	and.w	r3, r3, #12
 8008158:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800815a:	4b97      	ldr	r3, [pc, #604]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80e9 	beq.w	8008344 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <HAL_RCC_OscConfig+0x4a>
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b0c      	cmp	r3, #12
 800817c:	f040 8083 	bne.w	8008286 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d17f      	bne.n	8008286 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008186:	4b8c      	ldr	r3, [pc, #560]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <HAL_RCC_OscConfig+0x64>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f000 bc9a 	b.w	8008ad4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081a4:	4b84      	ldr	r3, [pc, #528]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <HAL_RCC_OscConfig+0x7e>
 80081b0:	4b81      	ldr	r3, [pc, #516]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081b8:	e005      	b.n	80081c6 <HAL_RCC_OscConfig+0x8a>
 80081ba:	4b7f      	ldr	r3, [pc, #508]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d224      	bcs.n	8008214 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 feb8 	bl	8008f44 <RCC_SetFlashLatencyFromMSIRange>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f000 bc7a 	b.w	8008ad4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081e0:	4b75      	ldr	r3, [pc, #468]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a74      	ldr	r2, [pc, #464]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081e6:	f043 0308 	orr.w	r3, r3, #8
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	4b72      	ldr	r3, [pc, #456]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f8:	496f      	ldr	r1, [pc, #444]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081fe:	4b6e      	ldr	r3, [pc, #440]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	496a      	ldr	r1, [pc, #424]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 800820e:	4313      	orrs	r3, r2
 8008210:	604b      	str	r3, [r1, #4]
 8008212:	e026      	b.n	8008262 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008214:	4b68      	ldr	r3, [pc, #416]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a67      	ldr	r2, [pc, #412]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 800821a:	f043 0308 	orr.w	r3, r3, #8
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4b65      	ldr	r3, [pc, #404]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822c:	4962      	ldr	r1, [pc, #392]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008232:	4b61      	ldr	r3, [pc, #388]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	495d      	ldr	r1, [pc, #372]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008242:	4313      	orrs	r3, r2
 8008244:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fe77 	bl	8008f44 <RCC_SetFlashLatencyFromMSIRange>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f000 bc39 	b.w	8008ad4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008262:	f000 fe15 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008266:	4603      	mov	r3, r0
 8008268:	4a54      	ldr	r2, [pc, #336]	@ (80083bc <HAL_RCC_OscConfig+0x280>)
 800826a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800826c:	4b54      	ldr	r3, [pc, #336]	@ (80083c0 <HAL_RCC_OscConfig+0x284>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	f7fb fc13 	bl	8003a9c <HAL_InitTick>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d060      	beq.n	8008342 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	f000 bc27 	b.w	8008ad4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d039      	beq.n	8008302 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800828e:	4b4a      	ldr	r3, [pc, #296]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a49      	ldr	r2, [pc, #292]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800829a:	f7fc f911 	bl	80044c0 <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082a0:	e00f      	b.n	80082c2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082a2:	f7fc f90d 	bl	80044c0 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d908      	bls.n	80082c2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082b0:	4b41      	ldr	r3, [pc, #260]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	f000 bc09 	b.w	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082c2:	4b3d      	ldr	r3, [pc, #244]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0e9      	beq.n	80082a2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082ce:	4b3a      	ldr	r3, [pc, #232]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a39      	ldr	r2, [pc, #228]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082d4:	f043 0308 	orr.w	r3, r3, #8
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	4b37      	ldr	r3, [pc, #220]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e6:	4934      	ldr	r1, [pc, #208]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082ec:	4b32      	ldr	r3, [pc, #200]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	492f      	ldr	r1, [pc, #188]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	604b      	str	r3, [r1, #4]
 8008300:	e020      	b.n	8008344 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008302:	4b2d      	ldr	r3, [pc, #180]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a2c      	ldr	r2, [pc, #176]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800830e:	f7fc f8d7 	bl	80044c0 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008314:	e00e      	b.n	8008334 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008316:	f7fc f8d3 	bl	80044c0 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d907      	bls.n	8008334 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008324:	4b24      	ldr	r3, [pc, #144]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e3cf      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008334:	4b20      	ldr	r3, [pc, #128]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1ea      	bne.n	8008316 <HAL_RCC_OscConfig+0x1da>
 8008340:	e000      	b.n	8008344 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008342:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d07e      	beq.n	800844e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b08      	cmp	r3, #8
 8008354:	d005      	beq.n	8008362 <HAL_RCC_OscConfig+0x226>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b0c      	cmp	r3, #12
 800835a:	d10e      	bne.n	800837a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d10b      	bne.n	800837a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008362:	4b15      	ldr	r3, [pc, #84]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d06e      	beq.n	800844c <HAL_RCC_OscConfig+0x310>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d16a      	bne.n	800844c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e3ac      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008382:	d106      	bne.n	8008392 <HAL_RCC_OscConfig+0x256>
 8008384:	4b0c      	ldr	r3, [pc, #48]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a0b      	ldr	r2, [pc, #44]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 800838a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	e024      	b.n	80083dc <HAL_RCC_OscConfig+0x2a0>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800839a:	d113      	bne.n	80083c4 <HAL_RCC_OscConfig+0x288>
 800839c:	4b06      	ldr	r3, [pc, #24]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a05      	ldr	r2, [pc, #20]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80083a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4b03      	ldr	r3, [pc, #12]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a02      	ldr	r2, [pc, #8]	@ (80083b8 <HAL_RCC_OscConfig+0x27c>)
 80083ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e012      	b.n	80083dc <HAL_RCC_OscConfig+0x2a0>
 80083b6:	bf00      	nop
 80083b8:	40021000 	.word	0x40021000
 80083bc:	20000020 	.word	0x20000020
 80083c0:	20000024 	.word	0x20000024
 80083c4:	4b8b      	ldr	r3, [pc, #556]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a8a      	ldr	r2, [pc, #552]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80083ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	4b88      	ldr	r3, [pc, #544]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a87      	ldr	r2, [pc, #540]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80083d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d019      	beq.n	8008418 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fc f86c 	bl	80044c0 <HAL_GetTick>
 80083e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083ea:	e00e      	b.n	800840a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083ec:	f7fc f868 	bl	80044c0 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b64      	cmp	r3, #100	@ 0x64
 80083f8:	d907      	bls.n	800840a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083fa:	4b7e      	ldr	r3, [pc, #504]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e364      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800840a:	4b7a      	ldr	r3, [pc, #488]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0ea      	beq.n	80083ec <HAL_RCC_OscConfig+0x2b0>
 8008416:	e01a      	b.n	800844e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fc f852 	bl	80044c0 <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800841e:	e00e      	b.n	800843e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008420:	f7fc f84e 	bl	80044c0 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b64      	cmp	r3, #100	@ 0x64
 800842c:	d907      	bls.n	800843e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800842e:	4b71      	ldr	r3, [pc, #452]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e34a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800843e:	4b6d      	ldr	r3, [pc, #436]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1ea      	bne.n	8008420 <HAL_RCC_OscConfig+0x2e4>
 800844a:	e000      	b.n	800844e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800844c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d06c      	beq.n	8008534 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b04      	cmp	r3, #4
 800845e:	d005      	beq.n	800846c <HAL_RCC_OscConfig+0x330>
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b0c      	cmp	r3, #12
 8008464:	d119      	bne.n	800849a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d116      	bne.n	800849a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800846c:	4b61      	ldr	r3, [pc, #388]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_RCC_OscConfig+0x348>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e327      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008484:	4b5b      	ldr	r3, [pc, #364]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	061b      	lsls	r3, r3, #24
 8008492:	4958      	ldr	r1, [pc, #352]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008494:	4313      	orrs	r3, r2
 8008496:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008498:	e04c      	b.n	8008534 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d029      	beq.n	80084f6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084a2:	4b54      	ldr	r3, [pc, #336]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a53      	ldr	r2, [pc, #332]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ae:	f7fc f807 	bl	80044c0 <HAL_GetTick>
 80084b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b4:	e00e      	b.n	80084d4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084b6:	f7fc f803 	bl	80044c0 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d907      	bls.n	80084d4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084c4:	4b4b      	ldr	r3, [pc, #300]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e2ff      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084d4:	4b47      	ldr	r3, [pc, #284]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0ea      	beq.n	80084b6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084e0:	4b44      	ldr	r3, [pc, #272]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	061b      	lsls	r3, r3, #24
 80084ee:	4941      	ldr	r1, [pc, #260]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	604b      	str	r3, [r1, #4]
 80084f4:	e01e      	b.n	8008534 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084f6:	4b3f      	ldr	r3, [pc, #252]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a3e      	ldr	r2, [pc, #248]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80084fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008502:	f7fb ffdd 	bl	80044c0 <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008508:	e00e      	b.n	8008528 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800850a:	f7fb ffd9 	bl	80044c0 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d907      	bls.n	8008528 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008518:	4b36      	ldr	r3, [pc, #216]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e2d5      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008528:	4b32      	ldr	r3, [pc, #200]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ea      	bne.n	800850a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d062      	beq.n	8008606 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d038      	beq.n	80085ba <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d108      	bne.n	8008562 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8008550:	4b28      	ldr	r3, [pc, #160]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008556:	4a27      	ldr	r2, [pc, #156]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008558:	f023 0310 	bic.w	r3, r3, #16
 800855c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008560:	e007      	b.n	8008572 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8008562:	4b24      	ldr	r3, [pc, #144]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008568:	4a22      	ldr	r2, [pc, #136]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800856a:	f043 0310 	orr.w	r3, r3, #16
 800856e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008572:	4b20      	ldr	r3, [pc, #128]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 8008574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008578:	4a1e      	ldr	r2, [pc, #120]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008582:	f7fb ff9d 	bl	80044c0 <HAL_GetTick>
 8008586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008588:	e00f      	b.n	80085aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800858a:	f7fb ff99 	bl	80044c0 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b07      	cmp	r3, #7
 8008596:	d908      	bls.n	80085aa <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008598:	4b16      	ldr	r3, [pc, #88]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 800859a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e294      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085aa:	4b12      	ldr	r3, [pc, #72]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80085ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0e8      	beq.n	800858a <HAL_RCC_OscConfig+0x44e>
 80085b8:	e025      	b.n	8008606 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ba:	4b0e      	ldr	r3, [pc, #56]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80085bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085c0:	4a0c      	ldr	r2, [pc, #48]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80085c2:	f023 0301 	bic.w	r3, r3, #1
 80085c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ca:	f7fb ff79 	bl	80044c0 <HAL_GetTick>
 80085ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085d0:	e012      	b.n	80085f8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085d2:	f7fb ff75 	bl	80044c0 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b07      	cmp	r3, #7
 80085de:	d90b      	bls.n	80085f8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085e0:	4b04      	ldr	r3, [pc, #16]	@ (80085f4 <HAL_RCC_OscConfig+0x4b8>)
 80085e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e270      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
 80085f2:	bf00      	nop
 80085f4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085f8:	4ba8      	ldr	r3, [pc, #672]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80085fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 812d 	beq.w	800886e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008614:	2300      	movs	r3, #0
 8008616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008618:	4ba0      	ldr	r3, [pc, #640]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800861a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10d      	bne.n	8008640 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008624:	4b9d      	ldr	r3, [pc, #628]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008628:	4a9c      	ldr	r2, [pc, #624]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800862a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800862e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008630:	4b9a      	ldr	r3, [pc, #616]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800863c:	2301      	movs	r3, #1
 800863e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008640:	4b97      	ldr	r3, [pc, #604]	@ (80088a0 <HAL_RCC_OscConfig+0x764>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11e      	bne.n	800868a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800864c:	4b94      	ldr	r3, [pc, #592]	@ (80088a0 <HAL_RCC_OscConfig+0x764>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a93      	ldr	r2, [pc, #588]	@ (80088a0 <HAL_RCC_OscConfig+0x764>)
 8008652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008658:	f7fb ff32 	bl	80044c0 <HAL_GetTick>
 800865c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800865e:	e00e      	b.n	800867e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008660:	f7fb ff2e 	bl	80044c0 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d907      	bls.n	800867e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800866e:	4b8c      	ldr	r3, [pc, #560]	@ (80088a0 <HAL_RCC_OscConfig+0x764>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e22a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800867e:	4b88      	ldr	r3, [pc, #544]	@ (80088a0 <HAL_RCC_OscConfig+0x764>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0ea      	beq.n	8008660 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d01f      	beq.n	80086d6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d010      	beq.n	80086c4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80086a2:	4b7e      	ldr	r3, [pc, #504]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a8:	4a7c      	ldr	r2, [pc, #496]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086aa:	f043 0304 	orr.w	r3, r3, #4
 80086ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086b2:	4b7a      	ldr	r3, [pc, #488]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b8:	4a78      	ldr	r2, [pc, #480]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80086c2:	e018      	b.n	80086f6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086c4:	4b75      	ldr	r3, [pc, #468]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ca:	4a74      	ldr	r2, [pc, #464]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80086d4:	e00f      	b.n	80086f6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086d6:	4b71      	ldr	r3, [pc, #452]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086dc:	4a6f      	ldr	r2, [pc, #444]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80086e6:	4b6d      	ldr	r3, [pc, #436]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ec:	4a6b      	ldr	r2, [pc, #428]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80086ee:	f023 0304 	bic.w	r3, r3, #4
 80086f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d068      	beq.n	80087d0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086fe:	f7fb fedf 	bl	80044c0 <HAL_GetTick>
 8008702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008704:	e011      	b.n	800872a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7fb fedb 	bl	80044c0 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008714:	4293      	cmp	r3, r2
 8008716:	d908      	bls.n	800872a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008718:	4b60      	ldr	r3, [pc, #384]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800871a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e1d4      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800872a:	4b5c      	ldr	r3, [pc, #368]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800872c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0e6      	beq.n	8008706 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008740:	2b00      	cmp	r3, #0
 8008742:	d022      	beq.n	800878a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008744:	4b55      	ldr	r3, [pc, #340]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800874a:	4a54      	ldr	r2, [pc, #336]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800874c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008754:	e011      	b.n	800877a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008756:	f7fb feb3 	bl	80044c0 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008764:	4293      	cmp	r3, r2
 8008766:	d908      	bls.n	800877a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008768:	4b4c      	ldr	r3, [pc, #304]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e1ac      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800877a:	4b48      	ldr	r3, [pc, #288]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800877c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0e6      	beq.n	8008756 <HAL_RCC_OscConfig+0x61a>
 8008788:	e068      	b.n	800885c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800878a:	4b44      	ldr	r3, [pc, #272]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008790:	4a42      	ldr	r2, [pc, #264]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800879a:	e011      	b.n	80087c0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879c:	f7fb fe90 	bl	80044c0 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d908      	bls.n	80087c0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087ae:	4b3b      	ldr	r3, [pc, #236]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e189      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087c0:	4b36      	ldr	r3, [pc, #216]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e6      	bne.n	800879c <HAL_RCC_OscConfig+0x660>
 80087ce:	e045      	b.n	800885c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d0:	f7fb fe76 	bl	80044c0 <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087d6:	e011      	b.n	80087fc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d8:	f7fb fe72 	bl	80044c0 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d908      	bls.n	80087fc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087ea:	4b2c      	ldr	r3, [pc, #176]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80087ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e16b      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087fc:	4b27      	ldr	r3, [pc, #156]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800880a:	4b24      	ldr	r3, [pc, #144]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008814:	2b00      	cmp	r3, #0
 8008816:	d021      	beq.n	800885c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008818:	4b20      	ldr	r3, [pc, #128]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881e:	4a1f      	ldr	r2, [pc, #124]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008828:	e011      	b.n	800884e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800882a:	f7fb fe49 	bl	80044c0 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008838:	4293      	cmp	r3, r2
 800883a:	d908      	bls.n	800884e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800883c:	4b17      	ldr	r3, [pc, #92]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e142      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800884e:	4b13      	ldr	r3, [pc, #76]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e6      	bne.n	800882a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800885c:	7ffb      	ldrb	r3, [r7, #31]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d105      	bne.n	800886e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008862:	4b0e      	ldr	r3, [pc, #56]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008866:	4a0d      	ldr	r2, [pc, #52]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800886c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0320 	and.w	r3, r3, #32
 8008876:	2b00      	cmp	r3, #0
 8008878:	d04f      	beq.n	800891a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887e:	2b00      	cmp	r3, #0
 8008880:	d028      	beq.n	80088d4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008882:	4b06      	ldr	r3, [pc, #24]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 8008884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008888:	4a04      	ldr	r2, [pc, #16]	@ (800889c <HAL_RCC_OscConfig+0x760>)
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008892:	f7fb fe15 	bl	80044c0 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008898:	e014      	b.n	80088c4 <HAL_RCC_OscConfig+0x788>
 800889a:	bf00      	nop
 800889c:	40021000 	.word	0x40021000
 80088a0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088a4:	f7fb fe0c 	bl	80044c0 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d908      	bls.n	80088c4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80088b2:	4b8a      	ldr	r3, [pc, #552]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80088b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e107      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80088c4:	4b85      	ldr	r3, [pc, #532]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80088c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0e8      	beq.n	80088a4 <HAL_RCC_OscConfig+0x768>
 80088d2:	e022      	b.n	800891a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088d4:	4b81      	ldr	r3, [pc, #516]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80088d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088da:	4a80      	ldr	r2, [pc, #512]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80088dc:	f023 0301 	bic.w	r3, r3, #1
 80088e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e4:	f7fb fdec 	bl	80044c0 <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088ea:	e00f      	b.n	800890c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088ec:	f7fb fde8 	bl	80044c0 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d908      	bls.n	800890c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088fa:	4b78      	ldr	r3, [pc, #480]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80088fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e0e3      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800890c:	4b73      	ldr	r3, [pc, #460]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 800890e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e8      	bne.n	80088ec <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80d7 	beq.w	8008ad2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008924:	4b6d      	ldr	r3, [pc, #436]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 030c 	and.w	r3, r3, #12
 800892c:	2b0c      	cmp	r3, #12
 800892e:	f000 8091 	beq.w	8008a54 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008936:	2b02      	cmp	r3, #2
 8008938:	d166      	bne.n	8008a08 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800893a:	4b68      	ldr	r3, [pc, #416]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a67      	ldr	r2, [pc, #412]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008946:	f7fb fdbb 	bl	80044c0 <HAL_GetTick>
 800894a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800894c:	e00e      	b.n	800896c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800894e:	f7fb fdb7 	bl	80044c0 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d907      	bls.n	800896c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800895c:	4b5f      	ldr	r3, [pc, #380]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e0b3      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800896c:	4b5b      	ldr	r3, [pc, #364]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1ea      	bne.n	800894e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008978:	4b58      	ldr	r3, [pc, #352]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	4b58      	ldr	r3, [pc, #352]	@ (8008ae0 <HAL_RCC_OscConfig+0x9a4>)
 800897e:	4013      	ands	r3, r2
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008988:	3a01      	subs	r2, #1
 800898a:	0112      	lsls	r2, r2, #4
 800898c:	4311      	orrs	r1, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008992:	0212      	lsls	r2, r2, #8
 8008994:	4311      	orrs	r1, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800899a:	0852      	lsrs	r2, r2, #1
 800899c:	3a01      	subs	r2, #1
 800899e:	0552      	lsls	r2, r2, #21
 80089a0:	4311      	orrs	r1, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80089a6:	0852      	lsrs	r2, r2, #1
 80089a8:	3a01      	subs	r2, #1
 80089aa:	0652      	lsls	r2, r2, #25
 80089ac:	4311      	orrs	r1, r2
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089b2:	06d2      	lsls	r2, r2, #27
 80089b4:	430a      	orrs	r2, r1
 80089b6:	4949      	ldr	r1, [pc, #292]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089bc:	4b47      	ldr	r3, [pc, #284]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a46      	ldr	r2, [pc, #280]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80089c8:	4b44      	ldr	r3, [pc, #272]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4a43      	ldr	r2, [pc, #268]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d4:	f7fb fd74 	bl	80044c0 <HAL_GetTick>
 80089d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089da:	e00e      	b.n	80089fa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089dc:	f7fb fd70 	bl	80044c0 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d907      	bls.n	80089fa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089ea:	4b3c      	ldr	r3, [pc, #240]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e06c      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089fa:	4b38      	ldr	r3, [pc, #224]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0ea      	beq.n	80089dc <HAL_RCC_OscConfig+0x8a0>
 8008a06:	e064      	b.n	8008ad2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a08:	4b34      	ldr	r3, [pc, #208]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a33      	ldr	r2, [pc, #204]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a14:	f7fb fd54 	bl	80044c0 <HAL_GetTick>
 8008a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a1a:	e00e      	b.n	8008a3a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1c:	f7fb fd50 	bl	80044c0 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d907      	bls.n	8008a3a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e04c      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a3a:	4b28      	ldr	r3, [pc, #160]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1ea      	bne.n	8008a1c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008a46:	4b25      	ldr	r3, [pc, #148]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	4924      	ldr	r1, [pc, #144]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a4c:	4b25      	ldr	r3, [pc, #148]	@ (8008ae4 <HAL_RCC_OscConfig+0x9a8>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	60cb      	str	r3, [r1, #12]
 8008a52:	e03e      	b.n	8008ad2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e039      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8008a60:	4b1e      	ldr	r3, [pc, #120]	@ (8008adc <HAL_RCC_OscConfig+0x9a0>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f003 0203 	and.w	r2, r3, #3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d12c      	bne.n	8008ace <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d123      	bne.n	8008ace <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a90:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d11b      	bne.n	8008ace <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d113      	bne.n	8008ace <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab0:	085b      	lsrs	r3, r3, #1
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d109      	bne.n	8008ace <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d001      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	019f800c 	.word	0x019f800c
 8008ae4:	feeefffc 	.word	0xfeeefffc

08008ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e11c      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b00:	4b90      	ldr	r3, [pc, #576]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d910      	bls.n	8008b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f023 020f 	bic.w	r2, r3, #15
 8008b16:	498b      	ldr	r1, [pc, #556]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1e:	4b89      	ldr	r3, [pc, #548]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d001      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e104      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d010      	beq.n	8008b5e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	4b81      	ldr	r3, [pc, #516]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d908      	bls.n	8008b5e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b4c:	4b7e      	ldr	r3, [pc, #504]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	497b      	ldr	r1, [pc, #492]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8085 	beq.w	8008c76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d11f      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b74:	4b74      	ldr	r3, [pc, #464]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0da      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008b84:	f000 fa42 	bl	800900c <RCC_GetSysClockFreqFromPLLSource>
 8008b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	4a6f      	ldr	r2, [pc, #444]	@ (8008d4c <HAL_RCC_ClockConfig+0x264>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d947      	bls.n	8008c22 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008b92:	4b6d      	ldr	r3, [pc, #436]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d141      	bne.n	8008c22 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ba6:	4a68      	ldr	r2, [pc, #416]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008bae:	2380      	movs	r3, #128	@ 0x80
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e036      	b.n	8008c22 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d107      	bne.n	8008bcc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bbc:	4b62      	ldr	r3, [pc, #392]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d115      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0b6      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d107      	bne.n	8008be4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008bd4:	4b5c      	ldr	r3, [pc, #368]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d109      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0aa      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008be4:	4b58      	ldr	r3, [pc, #352]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0a2      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008bf4:	f000 f8b0 	bl	8008d58 <HAL_RCC_GetSysClockFreq>
 8008bf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4a53      	ldr	r2, [pc, #332]	@ (8008d4c <HAL_RCC_ClockConfig+0x264>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d90f      	bls.n	8008c22 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008c02:	4b51      	ldr	r3, [pc, #324]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c16:	4a4c      	ldr	r2, [pc, #304]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c1e:	2380      	movs	r3, #128	@ 0x80
 8008c20:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c22:	4b49      	ldr	r3, [pc, #292]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f023 0203 	bic.w	r2, r3, #3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4946      	ldr	r1, [pc, #280]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c34:	f7fb fc44 	bl	80044c0 <HAL_GetTick>
 8008c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c3a:	e013      	b.n	8008c64 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c3c:	f7fb fc40 	bl	80044c0 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d90a      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 020c 	and.w	r2, r3, #12
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d001      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e06a      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c64:	4b38      	ldr	r3, [pc, #224]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 020c 	and.w	r2, r3, #12
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d1e2      	bne.n	8008c3c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b80      	cmp	r3, #128	@ 0x80
 8008c7a:	d105      	bne.n	8008c88 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008c7c:	4b32      	ldr	r3, [pc, #200]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4a31      	ldr	r2, [pc, #196]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c86:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d010      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	4b2b      	ldr	r3, [pc, #172]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d208      	bcs.n	8008cb6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca4:	4b28      	ldr	r3, [pc, #160]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	4925      	ldr	r1, [pc, #148]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cb6:	4b23      	ldr	r3, [pc, #140]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d210      	bcs.n	8008ce6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f023 020f 	bic.w	r2, r3, #15
 8008ccc:	491d      	ldr	r1, [pc, #116]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d44 <HAL_RCC_ClockConfig+0x25c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d001      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e029      	b.n	8008d3a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d008      	beq.n	8008d04 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cf2:	4b15      	ldr	r3, [pc, #84]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	4912      	ldr	r1, [pc, #72]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d10:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	490a      	ldr	r1, [pc, #40]	@ (8008d48 <HAL_RCC_ClockConfig+0x260>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008d24:	f000 f8b4 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <HAL_RCC_ClockConfig+0x268>)
 8008d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008d2e:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <HAL_RCC_ClockConfig+0x26c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fa feb2 	bl	8003a9c <HAL_InitTick>
 8008d38:	4603      	mov	r3, r0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	40022000 	.word	0x40022000
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	04c4b400 	.word	0x04c4b400
 8008d50:	20000020 	.word	0x20000020
 8008d54:	20000024 	.word	0x20000024

08008d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b089      	sub	sp, #36	@ 0x24
 8008d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	2300      	movs	r3, #0
 8008d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d66:	4b47      	ldr	r3, [pc, #284]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 030c 	and.w	r3, r3, #12
 8008d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d70:	4b44      	ldr	r3, [pc, #272]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0303 	and.w	r3, r3, #3
 8008d78:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_RCC_GetSysClockFreq+0x34>
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b0c      	cmp	r3, #12
 8008d84:	d121      	bne.n	8008dca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d11e      	bne.n	8008dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d107      	bne.n	8008da8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008d98:	4b3a      	ldr	r3, [pc, #232]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e005      	b.n	8008db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008da8:	4b36      	ldr	r3, [pc, #216]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	091b      	lsrs	r3, r3, #4
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8008db4:	4a34      	ldr	r2, [pc, #208]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x130>)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dbc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10d      	bne.n	8008de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008dc8:	e00a      	b.n	8008de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x134>)
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	e004      	b.n	8008de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d101      	bne.n	8008de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x134>)
 8008dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b0c      	cmp	r3, #12
 8008de4:	d146      	bne.n	8008e74 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008de6:	4b27      	ldr	r3, [pc, #156]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008df0:	4b24      	ldr	r3, [pc, #144]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	091b      	lsrs	r3, r3, #4
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d003      	beq.n	8008e0c <HAL_RCC_GetSysClockFreq+0xb4>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d00d      	beq.n	8008e26 <HAL_RCC_GetSysClockFreq+0xce>
 8008e0a:	e019      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x134>)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	4a1b      	ldr	r2, [pc, #108]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008e16:	68d2      	ldr	r2, [r2, #12]
 8008e18:	0a12      	lsrs	r2, r2, #8
 8008e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e1e:	fb02 f303 	mul.w	r3, r2, r3
 8008e22:	617b      	str	r3, [r7, #20]
        break;
 8008e24:	e019      	b.n	8008e5a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e26:	4a19      	ldr	r2, [pc, #100]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x134>)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2e:	4a15      	ldr	r2, [pc, #84]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008e30:	68d2      	ldr	r2, [r2, #12]
 8008e32:	0a12      	lsrs	r2, r2, #8
 8008e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e38:	fb02 f303 	mul.w	r3, r2, r3
 8008e3c:	617b      	str	r3, [r7, #20]
        break;
 8008e3e:	e00c      	b.n	8008e5a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	4a0e      	ldr	r2, [pc, #56]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008e4a:	68d2      	ldr	r2, [r2, #12]
 8008e4c:	0a12      	lsrs	r2, r2, #8
 8008e4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	617b      	str	r3, [r7, #20]
        break;
 8008e58:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	0e5b      	lsrs	r3, r3, #25
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	3301      	adds	r3, #1
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008e74:	69bb      	ldr	r3, [r7, #24]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3724      	adds	r7, #36	@ 0x24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40021000 	.word	0x40021000
 8008e88:	0801014c 	.word	0x0801014c
 8008e8c:	00f42400 	.word	0x00f42400

08008e90 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8008e94:	f7ff ff60 	bl	8008d58 <HAL_RCC_GetSysClockFreq>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <HAL_RCC_GetHCLKFreq+0x20>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	091b      	lsrs	r3, r3, #4
 8008ea0:	f003 030f 	and.w	r3, r3, #15
 8008ea4:	4903      	ldr	r1, [pc, #12]	@ (8008eb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8008ea6:	5ccb      	ldrb	r3, [r1, r3]
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	08010134 	.word	0x08010134

08008eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ebc:	f7ff ffe8 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	4903      	ldr	r1, [pc, #12]	@ (8008edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ece:	5ccb      	ldrb	r3, [r1, r3]
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	08010144 	.word	0x08010144

08008ee0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	220f      	movs	r2, #15
 8008eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ef0:	4b12      	ldr	r3, [pc, #72]	@ (8008f3c <HAL_RCC_GetClockConfig+0x5c>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 0203 	and.w	r2, r3, #3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008efc:	4b0f      	ldr	r3, [pc, #60]	@ (8008f3c <HAL_RCC_GetClockConfig+0x5c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f08:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <HAL_RCC_GetClockConfig+0x5c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f14:	4b09      	ldr	r3, [pc, #36]	@ (8008f3c <HAL_RCC_GetClockConfig+0x5c>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	08db      	lsrs	r3, r3, #3
 8008f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f22:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <HAL_RCC_GetClockConfig+0x60>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 020f 	and.w	r2, r3, #15
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	601a      	str	r2, [r3, #0]
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40021000 	.word	0x40021000
 8008f40:	40022000 	.word	0x40022000

08008f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008f50:	4b2c      	ldr	r3, [pc, #176]	@ (8009004 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008f5c:	f7ff f850 	bl	8008000 <HAL_PWREx_GetVoltageRange>
 8008f60:	6138      	str	r0, [r7, #16]
 8008f62:	e014      	b.n	8008f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f64:	4b27      	ldr	r3, [pc, #156]	@ (8009004 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f68:	4a26      	ldr	r2, [pc, #152]	@ (8009004 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f70:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f7c:	f7ff f840 	bl	8008000 <HAL_PWREx_GetVoltageRange>
 8008f80:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f82:	4b20      	ldr	r3, [pc, #128]	@ (8009004 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f86:	4a1f      	ldr	r2, [pc, #124]	@ (8009004 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f9a:	d10b      	bne.n	8008fb4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b80      	cmp	r3, #128	@ 0x80
 8008fa0:	d919      	bls.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2ba0      	cmp	r3, #160	@ 0xa0
 8008fa6:	d902      	bls.n	8008fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008fa8:	2302      	movs	r3, #2
 8008faa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8008fac:	e013      	b.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008fae:	2301      	movs	r3, #1
 8008fb0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8008fb2:	e010      	b.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b80      	cmp	r3, #128	@ 0x80
 8008fb8:	d902      	bls.n	8008fc0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008fba:	2303      	movs	r3, #3
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e00a      	b.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b80      	cmp	r3, #128	@ 0x80
 8008fc4:	d102      	bne.n	8008fcc <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	e004      	b.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b70      	cmp	r3, #112	@ 0x70
 8008fd0:	d101      	bne.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009008 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f023 020f 	bic.w	r2, r3, #15
 8008fde:	490a      	ldr	r1, [pc, #40]	@ (8009008 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008fe6:	4b08      	ldr	r3, [pc, #32]	@ (8009008 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d001      	beq.n	8008ff8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e000      	b.n	8008ffa <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40021000 	.word	0x40021000
 8009008:	40022000 	.word	0x40022000

0800900c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009012:	4b31      	ldr	r3, [pc, #196]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800901c:	4b2e      	ldr	r3, [pc, #184]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	091b      	lsrs	r3, r3, #4
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	3301      	adds	r3, #1
 8009028:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b03      	cmp	r3, #3
 800902e:	d015      	beq.n	800905c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d839      	bhi.n	80090aa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d01c      	beq.n	8009076 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d133      	bne.n	80090aa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009042:	4a26      	ldr	r2, [pc, #152]	@ (80090dc <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	fbb2 f3f3 	udiv	r3, r2, r3
 800904a:	4a23      	ldr	r2, [pc, #140]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800904c:	68d2      	ldr	r2, [r2, #12]
 800904e:	0a12      	lsrs	r2, r2, #8
 8009050:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009054:	fb02 f303 	mul.w	r3, r2, r3
 8009058:	613b      	str	r3, [r7, #16]
      break;
 800905a:	e029      	b.n	80090b0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800905c:	4a1f      	ldr	r2, [pc, #124]	@ (80090dc <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	fbb2 f3f3 	udiv	r3, r2, r3
 8009064:	4a1c      	ldr	r2, [pc, #112]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009066:	68d2      	ldr	r2, [r2, #12]
 8009068:	0a12      	lsrs	r2, r2, #8
 800906a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	613b      	str	r3, [r7, #16]
      break;
 8009074:	e01c      	b.n	80090b0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009076:	4b18      	ldr	r3, [pc, #96]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	2b00      	cmp	r3, #0
 8009080:	d107      	bne.n	8009092 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009082:	4b15      	ldr	r3, [pc, #84]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	e005      	b.n	800909e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009092:	4b11      	ldr	r3, [pc, #68]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	091b      	lsrs	r3, r3, #4
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800909e:	4a10      	ldr	r2, [pc, #64]	@ (80090e0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a6:	613b      	str	r3, [r7, #16]
        break;
 80090a8:	e002      	b.n	80090b0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
      break;
 80090ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80090b0:	4b09      	ldr	r3, [pc, #36]	@ (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	0e5b      	lsrs	r3, r3, #25
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	3301      	adds	r3, #1
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80090ca:	683b      	ldr	r3, [r7, #0]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40021000 	.word	0x40021000
 80090dc:	00f42400 	.word	0x00f42400
 80090e0:	0801014c 	.word	0x0801014c

080090e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090ec:	2300      	movs	r3, #0
 80090ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090f0:	2300      	movs	r3, #0
 80090f2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d040      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009104:	2b80      	cmp	r3, #128	@ 0x80
 8009106:	d02a      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009108:	2b80      	cmp	r3, #128	@ 0x80
 800910a:	d825      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800910c:	2b60      	cmp	r3, #96	@ 0x60
 800910e:	d026      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009110:	2b60      	cmp	r3, #96	@ 0x60
 8009112:	d821      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009114:	2b40      	cmp	r3, #64	@ 0x40
 8009116:	d006      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009118:	2b40      	cmp	r3, #64	@ 0x40
 800911a:	d81d      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009120:	2b20      	cmp	r3, #32
 8009122:	d010      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009124:	e018      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009126:	4b8f      	ldr	r3, [pc, #572]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	4a8e      	ldr	r2, [pc, #568]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800912c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009130:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009132:	e015      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3304      	adds	r3, #4
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fb56 	bl	80097ec <RCCEx_PLLSAI1_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009144:	e00c      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3320      	adds	r3, #32
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fc33 	bl	80099b8 <RCCEx_PLLSAI2_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009156:	e003      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	77fb      	strb	r3, [r7, #31]
        break;
 800915c:	e000      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800915e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009160:	7ffb      	ldrb	r3, [r7, #31]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10b      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009166:	4b7f      	ldr	r3, [pc, #508]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009168:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800916c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009174:	497b      	ldr	r1, [pc, #492]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009176:	4313      	orrs	r3, r2
 8009178:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800917c:	e001      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	7ffb      	ldrb	r3, [r7, #31]
 8009180:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d047      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009196:	d030      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800919c:	d82a      	bhi.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800919e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a2:	d02a      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80091a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a8:	d824      	bhi.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80091aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ae:	d008      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80091b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091b4:	d81e      	bhi.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091be:	d010      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80091c0:	e018      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091c2:	4b68      	ldr	r3, [pc, #416]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	4a67      	ldr	r2, [pc, #412]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091cc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80091ce:	e015      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3304      	adds	r3, #4
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fb08 	bl	80097ec <RCCEx_PLLSAI1_Config>
 80091dc:	4603      	mov	r3, r0
 80091de:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80091e0:	e00c      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3320      	adds	r3, #32
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fbe5 	bl	80099b8 <RCCEx_PLLSAI2_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80091f2:	e003      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	77fb      	strb	r3, [r7, #31]
        break;
 80091f8:	e000      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80091fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091fc:	7ffb      	ldrb	r3, [r7, #31]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009202:	4b58      	ldr	r3, [pc, #352]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009208:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009210:	4954      	ldr	r1, [pc, #336]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009212:	4313      	orrs	r3, r2
 8009214:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009218:	e001      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921a:	7ffb      	ldrb	r3, [r7, #31]
 800921c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80ab 	beq.w	8009382 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800922c:	2300      	movs	r3, #0
 800922e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009230:	4b4c      	ldr	r3, [pc, #304]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10d      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800923c:	4b49      	ldr	r3, [pc, #292]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800923e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009240:	4a48      	ldr	r2, [pc, #288]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009246:	6593      	str	r3, [r2, #88]	@ 0x58
 8009248:	4b46      	ldr	r3, [pc, #280]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800924a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009254:	2301      	movs	r3, #1
 8009256:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009258:	4b43      	ldr	r3, [pc, #268]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a42      	ldr	r2, [pc, #264]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800925e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009264:	f7fb f92c 	bl	80044c0 <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800926a:	e00f      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800926c:	f7fb f928 	bl	80044c0 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b02      	cmp	r3, #2
 8009278:	d908      	bls.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800927a:	4b3b      	ldr	r3, [pc, #236]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009282:	2b00      	cmp	r3, #0
 8009284:	d109      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800928a:	e006      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800928c:	4b36      	ldr	r3, [pc, #216]	@ (8009368 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0e9      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009298:	e000      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800929a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800929c:	7ffb      	ldrb	r3, [r7, #31]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d164      	bne.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80092a2:	4b30      	ldr	r3, [pc, #192]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01f      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d019      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092c0:	4b28      	ldr	r3, [pc, #160]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092cc:	4b25      	ldr	r3, [pc, #148]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d2:	4a24      	ldr	r2, [pc, #144]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092dc:	4b21      	ldr	r3, [pc, #132]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e2:	4a20      	ldr	r2, [pc, #128]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01f      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fe:	f7fb f8df 	bl	80044c0 <HAL_GetTick>
 8009302:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009304:	e012      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009306:	f7fb f8db 	bl	80044c0 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8009314:	4293      	cmp	r3, r2
 8009316:	d909      	bls.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009318:	4b12      	ldr	r3, [pc, #72]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800931a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800932a:	e007      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800932c:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0e5      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800933a:	e000      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800933c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800933e:	7ffb      	ldrb	r3, [r7, #31]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10c      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009344:	4b07      	ldr	r3, [pc, #28]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800934a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009354:	4903      	ldr	r1, [pc, #12]	@ (8009364 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009356:	4313      	orrs	r3, r2
 8009358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800935c:	e008      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800935e:	7ffb      	ldrb	r3, [r7, #31]
 8009360:	77bb      	strb	r3, [r7, #30]
 8009362:	e005      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009364:	40021000 	.word	0x40021000
 8009368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800936c:	7ffb      	ldrb	r3, [r7, #31]
 800936e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d105      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009376:	4b9c      	ldr	r3, [pc, #624]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800937a:	4a9b      	ldr	r2, [pc, #620]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800937c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009380:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800938e:	4b96      	ldr	r3, [pc, #600]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009394:	f023 0203 	bic.w	r2, r3, #3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800939c:	4992      	ldr	r1, [pc, #584]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093b0:	4b8d      	ldr	r3, [pc, #564]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b6:	f023 020c 	bic.w	r2, r3, #12
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	498a      	ldr	r1, [pc, #552]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093d2:	4b85      	ldr	r3, [pc, #532]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e0:	4981      	ldr	r1, [pc, #516]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093f4:	4b7c      	ldr	r3, [pc, #496]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009402:	4979      	ldr	r1, [pc, #484]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009416:	4b74      	ldr	r3, [pc, #464]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800941c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009424:	4970      	ldr	r1, [pc, #448]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009438:	4b6b      	ldr	r3, [pc, #428]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009446:	4968      	ldr	r1, [pc, #416]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009448:	4313      	orrs	r3, r2
 800944a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800945a:	4b63      	ldr	r3, [pc, #396]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800945c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009460:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009468:	495f      	ldr	r1, [pc, #380]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800947c:	4b5a      	ldr	r3, [pc, #360]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800948a:	4957      	ldr	r1, [pc, #348]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800949e:	4b52      	ldr	r3, [pc, #328]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ac:	494e      	ldr	r1, [pc, #312]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d031      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094c8:	d00e      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80094ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094ce:	d814      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d015      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80094d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094d8:	d10f      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094da:	4b43      	ldr	r3, [pc, #268]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	4a42      	ldr	r2, [pc, #264]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80094e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094e4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80094e6:	e00c      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3304      	adds	r3, #4
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f97c 	bl	80097ec <RCCEx_PLLSAI1_Config>
 80094f4:	4603      	mov	r3, r0
 80094f6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80094f8:	e003      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	77fb      	strb	r3, [r7, #31]
        break;
 80094fe:	e000      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8009500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009502:	7ffb      	ldrb	r3, [r7, #31]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009508:	4b37      	ldr	r3, [pc, #220]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800950a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800950e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009516:	4934      	ldr	r1, [pc, #208]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009518:	4313      	orrs	r3, r2
 800951a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800951e:	e001      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00a      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009530:	4b2d      	ldr	r3, [pc, #180]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009536:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800953e:	492a      	ldr	r1, [pc, #168]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009540:	4313      	orrs	r3, r2
 8009542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009552:	4b25      	ldr	r3, [pc, #148]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009558:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009560:	4921      	ldr	r1, [pc, #132]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009562:	4313      	orrs	r3, r2
 8009564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009574:	4b1c      	ldr	r3, [pc, #112]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	4919      	ldr	r1, [pc, #100]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009584:	4313      	orrs	r3, r2
 8009586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009596:	4b14      	ldr	r3, [pc, #80]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009598:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800959c:	f023 0203 	bic.w	r2, r3, #3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095a4:	4910      	ldr	r1, [pc, #64]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d02b      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095b8:	4b0b      	ldr	r3, [pc, #44]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80095ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095c6:	4908      	ldr	r1, [pc, #32]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095d6:	d109      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095d8:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	4a02      	ldr	r2, [pc, #8]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80095de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e2:	60d3      	str	r3, [r2, #12]
 80095e4:	e014      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80095e6:	bf00      	nop
 80095e8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095f4:	d10c      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3304      	adds	r3, #4
 80095fa:	2101      	movs	r1, #1
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f8f5 	bl	80097ec <RCCEx_PLLSAI1_Config>
 8009602:	4603      	mov	r3, r0
 8009604:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8009606:	7ffb      	ldrb	r3, [r7, #31]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800960c:	7ffb      	ldrb	r3, [r7, #31]
 800960e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d04a      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009624:	d108      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8009626:	4b70      	ldr	r3, [pc, #448]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800962c:	4a6e      	ldr	r2, [pc, #440]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800962e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009632:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009636:	e012      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8009638:	4b6b      	ldr	r3, [pc, #428]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800963a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009646:	4968      	ldr	r1, [pc, #416]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009648:	4313      	orrs	r3, r2
 800964a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800964e:	4b66      	ldr	r3, [pc, #408]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009650:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009654:	4a64      	ldr	r2, [pc, #400]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800965a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009662:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009666:	d10d      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	2101      	movs	r1, #1
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f8bc 	bl	80097ec <RCCEx_PLLSAI1_Config>
 8009674:	4603      	mov	r3, r0
 8009676:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009678:	7ffb      	ldrb	r3, [r7, #31]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d019      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800967e:	7ffb      	ldrb	r3, [r7, #31]
 8009680:	77bb      	strb	r3, [r7, #30]
 8009682:	e016      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800968c:	d106      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800968e:	4b56      	ldr	r3, [pc, #344]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	4a55      	ldr	r2, [pc, #340]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009698:	60d3      	str	r3, [r2, #12]
 800969a:	e00a      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096a4:	d105      	bne.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80096a6:	4b50      	ldr	r3, [pc, #320]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	4a4f      	ldr	r2, [pc, #316]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80096ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096b0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d028      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096be:	4b4a      	ldr	r3, [pc, #296]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096cc:	4946      	ldr	r1, [pc, #280]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096dc:	d106      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096de:	4b42      	ldr	r3, [pc, #264]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	4a41      	ldr	r2, [pc, #260]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80096e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096e8:	60d3      	str	r3, [r2, #12]
 80096ea:	e011      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096f4:	d10c      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3304      	adds	r3, #4
 80096fa:	2101      	movs	r1, #1
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f875 	bl	80097ec <RCCEx_PLLSAI1_Config>
 8009702:	4603      	mov	r3, r0
 8009704:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009706:	7ffb      	ldrb	r3, [r7, #31]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800970c:	7ffb      	ldrb	r3, [r7, #31]
 800970e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01e      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800971c:	4b32      	ldr	r3, [pc, #200]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800971e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009722:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800972c:	492e      	ldr	r1, [pc, #184]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800972e:	4313      	orrs	r3, r2
 8009730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800973a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800973e:	d10c      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	2102      	movs	r1, #2
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f850 	bl	80097ec <RCCEx_PLLSAI1_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009750:	7ffb      	ldrb	r3, [r7, #31]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8009756:	7ffb      	ldrb	r3, [r7, #31]
 8009758:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00b      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009766:	4b20      	ldr	r3, [pc, #128]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009768:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800976c:	f023 0204 	bic.w	r2, r3, #4
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009776:	491c      	ldr	r1, [pc, #112]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009778:	4313      	orrs	r3, r2
 800977a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800978a:	4b17      	ldr	r3, [pc, #92]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800978c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009790:	f023 0218 	bic.w	r2, r3, #24
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800979a:	4913      	ldr	r1, [pc, #76]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80097ae:	4b0e      	ldr	r3, [pc, #56]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80097b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097be:	490a      	ldr	r1, [pc, #40]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097d0:	d105      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097d2:	4b05      	ldr	r3, [pc, #20]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	4a04      	ldr	r2, [pc, #16]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80097d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80097de:	7fbb      	ldrb	r3, [r7, #30]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	40021000 	.word	0x40021000

080097ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d018      	beq.n	8009834 <RCCEx_PLLSAI1_Config+0x48>
 8009802:	2b03      	cmp	r3, #3
 8009804:	d81f      	bhi.n	8009846 <RCCEx_PLLSAI1_Config+0x5a>
 8009806:	2b01      	cmp	r3, #1
 8009808:	d002      	beq.n	8009810 <RCCEx_PLLSAI1_Config+0x24>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d009      	beq.n	8009822 <RCCEx_PLLSAI1_Config+0x36>
 800980e:	e01a      	b.n	8009846 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009810:	4b65      	ldr	r3, [pc, #404]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d117      	bne.n	800984c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009820:	e014      	b.n	800984c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009822:	4b61      	ldr	r3, [pc, #388]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800982a:	2b00      	cmp	r3, #0
 800982c:	d110      	bne.n	8009850 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009832:	e00d      	b.n	8009850 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8009834:	4b5c      	ldr	r3, [pc, #368]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009844:	e006      	b.n	8009854 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	73fb      	strb	r3, [r7, #15]
      break;
 800984a:	e004      	b.n	8009856 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800984c:	bf00      	nop
 800984e:	e002      	b.n	8009856 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8009854:	bf00      	nop
  }

  if (status == HAL_OK)
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 809f 	bne.w	800999c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800985e:	4b52      	ldr	r3, [pc, #328]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a51      	ldr	r2, [pc, #324]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009864:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986a:	f7fa fe29 	bl	80044c0 <HAL_GetTick>
 800986e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009870:	e00f      	b.n	8009892 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009872:	f7fa fe25 	bl	80044c0 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b02      	cmp	r3, #2
 800987e:	d908      	bls.n	8009892 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009880:	4b49      	ldr	r3, [pc, #292]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009890:	e006      	b.n	80098a0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009892:	4b45      	ldr	r3, [pc, #276]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1e9      	bne.n	8009872 <RCCEx_PLLSAI1_Config+0x86>
 800989e:	e000      	b.n	80098a2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80098a0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d179      	bne.n	800999c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d116      	bne.n	80098dc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098ae:	4b3e      	ldr	r3, [pc, #248]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80098b0:	691a      	ldr	r2, [r3, #16]
 80098b2:	4b3e      	ldr	r3, [pc, #248]	@ (80099ac <RCCEx_PLLSAI1_Config+0x1c0>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	6892      	ldr	r2, [r2, #8]
 80098ba:	0211      	lsls	r1, r2, #8
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68d2      	ldr	r2, [r2, #12]
 80098c0:	06d2      	lsls	r2, r2, #27
 80098c2:	4311      	orrs	r1, r2
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6852      	ldr	r2, [r2, #4]
 80098c8:	3a01      	subs	r2, #1
 80098ca:	0112      	lsls	r2, r2, #4
 80098cc:	4311      	orrs	r1, r2
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	4934      	ldr	r1, [pc, #208]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	610b      	str	r3, [r1, #16]
 80098da:	e033      	b.n	8009944 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d118      	bne.n	8009914 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098e2:	4b31      	ldr	r3, [pc, #196]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80098e4:	691a      	ldr	r2, [r3, #16]
 80098e6:	4b32      	ldr	r3, [pc, #200]	@ (80099b0 <RCCEx_PLLSAI1_Config+0x1c4>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6892      	ldr	r2, [r2, #8]
 80098ee:	0211      	lsls	r1, r2, #8
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6912      	ldr	r2, [r2, #16]
 80098f4:	0852      	lsrs	r2, r2, #1
 80098f6:	3a01      	subs	r2, #1
 80098f8:	0552      	lsls	r2, r2, #21
 80098fa:	4311      	orrs	r1, r2
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6852      	ldr	r2, [r2, #4]
 8009900:	3a01      	subs	r2, #1
 8009902:	0112      	lsls	r2, r2, #4
 8009904:	4311      	orrs	r1, r2
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	6812      	ldr	r2, [r2, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	4926      	ldr	r1, [pc, #152]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800990e:	4313      	orrs	r3, r2
 8009910:	610b      	str	r3, [r1, #16]
 8009912:	e017      	b.n	8009944 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009914:	4b24      	ldr	r3, [pc, #144]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	4b26      	ldr	r3, [pc, #152]	@ (80099b4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800991a:	4013      	ands	r3, r2
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6892      	ldr	r2, [r2, #8]
 8009920:	0211      	lsls	r1, r2, #8
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6952      	ldr	r2, [r2, #20]
 8009926:	0852      	lsrs	r2, r2, #1
 8009928:	3a01      	subs	r2, #1
 800992a:	0652      	lsls	r2, r2, #25
 800992c:	4311      	orrs	r1, r2
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6852      	ldr	r2, [r2, #4]
 8009932:	3a01      	subs	r2, #1
 8009934:	0112      	lsls	r2, r2, #4
 8009936:	4311      	orrs	r1, r2
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	491a      	ldr	r1, [pc, #104]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009940:	4313      	orrs	r3, r2
 8009942:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009944:	4b18      	ldr	r3, [pc, #96]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a17      	ldr	r2, [pc, #92]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800994a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800994e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009950:	f7fa fdb6 	bl	80044c0 <HAL_GetTick>
 8009954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009956:	e00f      	b.n	8009978 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009958:	f7fa fdb2 	bl	80044c0 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b02      	cmp	r3, #2
 8009964:	d908      	bls.n	8009978 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009966:	4b10      	ldr	r3, [pc, #64]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d109      	bne.n	8009986 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8009976:	e006      	b.n	8009986 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009978:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0e9      	beq.n	8009958 <RCCEx_PLLSAI1_Config+0x16c>
 8009984:	e000      	b.n	8009988 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8009986:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800998e:	4b06      	ldr	r3, [pc, #24]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	4904      	ldr	r1, [pc, #16]	@ (80099a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009998:	4313      	orrs	r3, r2
 800999a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	40021000 	.word	0x40021000
 80099ac:	07ff800c 	.word	0x07ff800c
 80099b0:	ff9f800c 	.word	0xff9f800c
 80099b4:	f9ff800c 	.word	0xf9ff800c

080099b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d018      	beq.n	8009a00 <RCCEx_PLLSAI2_Config+0x48>
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d81f      	bhi.n	8009a12 <RCCEx_PLLSAI2_Config+0x5a>
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d002      	beq.n	80099dc <RCCEx_PLLSAI2_Config+0x24>
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d009      	beq.n	80099ee <RCCEx_PLLSAI2_Config+0x36>
 80099da:	e01a      	b.n	8009a12 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80099dc:	4b4a      	ldr	r3, [pc, #296]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d117      	bne.n	8009a18 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099ec:	e014      	b.n	8009a18 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80099ee:	4b46      	ldr	r3, [pc, #280]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d110      	bne.n	8009a1c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099fe:	e00d      	b.n	8009a1c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8009a00:	4b41      	ldr	r3, [pc, #260]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a10:	e006      	b.n	8009a20 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]
      break;
 8009a16:	e004      	b.n	8009a22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8009a18:	bf00      	nop
 8009a1a:	e002      	b.n	8009a22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8009a20:	bf00      	nop
  }

  if (status == HAL_OK)
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d169      	bne.n	8009afc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a28:	4b37      	ldr	r3, [pc, #220]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a36      	ldr	r2, [pc, #216]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a34:	f7fa fd44 	bl	80044c0 <HAL_GetTick>
 8009a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a3a:	e00f      	b.n	8009a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a3c:	f7fa fd40 	bl	80044c0 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d908      	bls.n	8009a5c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a5a:	e006      	b.n	8009a6a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e9      	bne.n	8009a3c <RCCEx_PLLSAI2_Config+0x84>
 8009a68:	e000      	b.n	8009a6c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8009a6a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d144      	bne.n	8009afc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d115      	bne.n	8009aa4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a78:	4b23      	ldr	r3, [pc, #140]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009a7a:	695a      	ldr	r2, [r3, #20]
 8009a7c:	4b23      	ldr	r3, [pc, #140]	@ (8009b0c <RCCEx_PLLSAI2_Config+0x154>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6892      	ldr	r2, [r2, #8]
 8009a84:	0211      	lsls	r1, r2, #8
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	68d2      	ldr	r2, [r2, #12]
 8009a8a:	06d2      	lsls	r2, r2, #27
 8009a8c:	4311      	orrs	r1, r2
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6852      	ldr	r2, [r2, #4]
 8009a92:	3a01      	subs	r2, #1
 8009a94:	0112      	lsls	r2, r2, #4
 8009a96:	4311      	orrs	r1, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	491a      	ldr	r1, [pc, #104]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009aa4:	4b18      	ldr	r3, [pc, #96]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a17      	ldr	r2, [pc, #92]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab0:	f7fa fd06 	bl	80044c0 <HAL_GetTick>
 8009ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009ab6:	e00f      	b.n	8009ad8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009ab8:	f7fa fd02 	bl	80044c0 <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d908      	bls.n	8009ad8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009ac6:	4b10      	ldr	r3, [pc, #64]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8009ad6:	e006      	b.n	8009ae6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0e9      	beq.n	8009ab8 <RCCEx_PLLSAI2_Config+0x100>
 8009ae4:	e000      	b.n	8009ae8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8009ae6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d106      	bne.n	8009afc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8009aee:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009af0:	695a      	ldr	r2, [r3, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	4904      	ldr	r1, [pc, #16]	@ (8009b08 <RCCEx_PLLSAI2_Config+0x150>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	07ff800c 	.word	0x07ff800c

08009b10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d066      	beq.n	8009bf0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d106      	bne.n	8009b3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f9 fec6 	bl	80038c8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f003 0310 	and.w	r3, r3, #16
 8009b4e:	2b10      	cmp	r3, #16
 8009b50:	d045      	beq.n	8009bde <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b52:	4b2a      	ldr	r3, [pc, #168]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009b54:	22ca      	movs	r2, #202	@ 0xca
 8009b56:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b58:	4b28      	ldr	r3, [pc, #160]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009b5a:	2253      	movs	r2, #83	@ 0x53
 8009b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f98e 	bl	8009e80 <RTC_EnterInitMode>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d121      	bne.n	8009bb2 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009b6e:	4b23      	ldr	r3, [pc, #140]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	4a22      	ldr	r2, [pc, #136]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009b74:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8009b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b7c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6859      	ldr	r1, [r3, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	4319      	orrs	r1, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	430b      	orrs	r3, r1
 8009b92:	491a      	ldr	r1, [pc, #104]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	041b      	lsls	r3, r3, #16
 8009ba2:	4916      	ldr	r1, [pc, #88]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f99d 	bl	8009ee8 <RTC_ExitInitMode>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10e      	bne.n	8009bd6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8009bb8:	4b10      	ldr	r3, [pc, #64]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a19      	ldr	r1, [r3, #32]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	4319      	orrs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	490a      	ldr	r1, [pc, #40]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bd6:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <HAL_RTC_Init+0xec>)
 8009bd8:	22ff      	movs	r2, #255	@ 0xff
 8009bda:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bdc:	e001      	b.n	8009be2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40002800 	.word	0x40002800

08009c00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d101      	bne.n	8009c1a <HAL_RTC_SetTime+0x1a>
 8009c16:	2302      	movs	r3, #2
 8009c18:	e081      	b.n	8009d1e <HAL_RTC_SetTime+0x11e>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2202      	movs	r2, #2
 8009c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009c2c:	22ca      	movs	r2, #202	@ 0xca
 8009c2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c30:	4b3d      	ldr	r3, [pc, #244]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009c32:	2253      	movs	r2, #83	@ 0x53
 8009c34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 f922 	bl	8009e80 <RTC_EnterInitMode>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009c40:	7cfb      	ldrb	r3, [r7, #19]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d15c      	bne.n	8009d00 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d125      	bne.n	8009c98 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009c4c:	4b36      	ldr	r3, [pc, #216]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f97e 	bl	8009f64 <RTC_ByteToBcd2>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f977 	bl	8009f64 <RTC_ByteToBcd2>
 8009c76:	4603      	mov	r3, r0
 8009c78:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c7a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	789b      	ldrb	r3, [r3, #2]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 f96f 	bl	8009f64 <RTC_ByteToBcd2>
 8009c86:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c88:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	78db      	ldrb	r3, [r3, #3]
 8009c90:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]
 8009c96:	e017      	b.n	8009cc8 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009c98:	4b23      	ldr	r3, [pc, #140]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009cb6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cbc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	78db      	ldrb	r3, [r3, #3]
 8009cc2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8009cc8:	4a17      	ldr	r2, [pc, #92]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009cd0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009cd4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8009cd6:	4b14      	ldr	r3, [pc, #80]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	4a13      	ldr	r2, [pc, #76]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ce0:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009ce2:	4b11      	ldr	r3, [pc, #68]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	68d9      	ldr	r1, [r3, #12]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	430b      	orrs	r3, r1
 8009cf0:	490d      	ldr	r1, [pc, #52]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 f8f6 	bl	8009ee8 <RTC_ExitInitMode>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d00:	4b09      	ldr	r3, [pc, #36]	@ (8009d28 <HAL_RTC_SetTime+0x128>)
 8009d02:	22ff      	movs	r2, #255	@ 0xff
 8009d04:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009d06:	7cfb      	ldrb	r3, [r7, #19]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009d1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd90      	pop	{r4, r7, pc}
 8009d26:	bf00      	nop
 8009d28:	40002800 	.word	0x40002800

08009d2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_RTC_SetDate+0x1a>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e071      	b.n	8009e2a <HAL_RTC_SetDate+0xfe>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2202      	movs	r2, #2
 8009d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10e      	bne.n	8009d7a <HAL_RTC_SetDate+0x4e>
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d008      	beq.n	8009d7a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	f023 0310 	bic.w	r3, r3, #16
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	330a      	adds	r3, #10
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d11c      	bne.n	8009dba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	78db      	ldrb	r3, [r3, #3]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 f8ed 	bl	8009f64 <RTC_ByteToBcd2>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	785b      	ldrb	r3, [r3, #1]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 f8e6 	bl	8009f64 <RTC_ByteToBcd2>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009d9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	789b      	ldrb	r3, [r3, #2]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 f8de 	bl	8009f64 <RTC_ByteToBcd2>
 8009da8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009daa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e00e      	b.n	8009dd8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	78db      	ldrb	r3, [r3, #3]
 8009dbe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009dc6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009dcc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dd8:	4b16      	ldr	r3, [pc, #88]	@ (8009e34 <HAL_RTC_SetDate+0x108>)
 8009dda:	22ca      	movs	r2, #202	@ 0xca
 8009ddc:	625a      	str	r2, [r3, #36]	@ 0x24
 8009dde:	4b15      	ldr	r3, [pc, #84]	@ (8009e34 <HAL_RTC_SetDate+0x108>)
 8009de0:	2253      	movs	r2, #83	@ 0x53
 8009de2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f84b 	bl	8009e80 <RTC_EnterInitMode>
 8009dea:	4603      	mov	r3, r0
 8009dec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009dee:	7cfb      	ldrb	r3, [r7, #19]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10b      	bne.n	8009e0c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009df4:	4a0f      	ldr	r2, [pc, #60]	@ (8009e34 <HAL_RTC_SetDate+0x108>)
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009dfc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e00:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f870 	bl	8009ee8 <RTC_ExitInitMode>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e0c:	4b09      	ldr	r3, [pc, #36]	@ (8009e34 <HAL_RTC_SetDate+0x108>)
 8009e0e:	22ff      	movs	r2, #255	@ 0xff
 8009e10:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009e12:	7cfb      	ldrb	r3, [r7, #19]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d103      	bne.n	8009e20 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009e28:	7cfb      	ldrb	r3, [r7, #19]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	371c      	adds	r7, #28
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd90      	pop	{r4, r7, pc}
 8009e32:	bf00      	nop
 8009e34:	40002800 	.word	0x40002800

08009e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8009e40:	4b0d      	ldr	r3, [pc, #52]	@ (8009e78 <HAL_RTC_WaitForSynchro+0x40>)
 8009e42:	4a0e      	ldr	r2, [pc, #56]	@ (8009e7c <HAL_RTC_WaitForSynchro+0x44>)
 8009e44:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009e46:	f7fa fb3b 	bl	80044c0 <HAL_GetTick>
 8009e4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e4c:	e009      	b.n	8009e62 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e4e:	f7fa fb37 	bl	80044c0 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e5c:	d901      	bls.n	8009e62 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e006      	b.n	8009e70 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e62:	4b05      	ldr	r3, [pc, #20]	@ (8009e78 <HAL_RTC_WaitForSynchro+0x40>)
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0ef      	beq.n	8009e4e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	40002800 	.word	0x40002800
 8009e7c:	0001005c 	.word	0x0001005c

08009e80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009e8c:	4b15      	ldr	r3, [pc, #84]	@ (8009ee4 <RTC_EnterInitMode+0x64>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d120      	bne.n	8009eda <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009e98:	4b12      	ldr	r3, [pc, #72]	@ (8009ee4 <RTC_EnterInitMode+0x64>)
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	4a11      	ldr	r2, [pc, #68]	@ (8009ee4 <RTC_EnterInitMode+0x64>)
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009ea4:	f7fa fb0c 	bl	80044c0 <HAL_GetTick>
 8009ea8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009eaa:	e00d      	b.n	8009ec8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009eac:	f7fa fb08 	bl	80044c0 <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009eba:	d905      	bls.n	8009ec8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ec8:	4b06      	ldr	r3, [pc, #24]	@ (8009ee4 <RTC_EnterInitMode+0x64>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <RTC_EnterInitMode+0x5a>
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d1e8      	bne.n	8009eac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40002800 	.word	0x40002800

08009ee8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	4a19      	ldr	r2, [pc, #100]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009efe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009f00:	4b17      	ldr	r3, [pc, #92]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10c      	bne.n	8009f26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff93 	bl	8009e38 <HAL_RTC_WaitForSynchro>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01e      	beq.n	8009f56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2203      	movs	r2, #3
 8009f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	e017      	b.n	8009f56 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f26:	4b0e      	ldr	r3, [pc, #56]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009f2c:	f023 0320 	bic.w	r3, r3, #32
 8009f30:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff ff80 	bl	8009e38 <HAL_RTC_WaitForSynchro>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2203      	movs	r2, #3
 8009f42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f4a:	4b05      	ldr	r3, [pc, #20]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	4a04      	ldr	r2, [pc, #16]	@ (8009f60 <RTC_ExitInitMode+0x78>)
 8009f50:	f043 0320 	orr.w	r3, r3, #32
 8009f54:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	40002800 	.word	0x40002800

08009f64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009f76:	e005      	b.n	8009f84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009f7e:	7afb      	ldrb	r3, [r7, #11]
 8009f80:	3b0a      	subs	r3, #10
 8009f82:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009f84:	7afb      	ldrb	r3, [r7, #11]
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d8f6      	bhi.n	8009f78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	b2db      	uxtb	r3, r3
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	490f      	ldr	r1, [pc, #60]	@ (8009ff4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	490c      	ldr	r1, [pc, #48]	@ (8009ff8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8009fca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	6919      	ldr	r1, [r3, #16]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	041b      	lsls	r3, r3, #16
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	4906      	ldr	r1, [pc, #24]	@ (8009ff8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40002800 	.word	0x40002800
 8009ff8:	40003400 	.word	0x40003400

08009ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e095      	b.n	800a13a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a012:	2b00      	cmp	r3, #0
 800a014:	d108      	bne.n	800a028 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a01e:	d009      	beq.n	800a034 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	61da      	str	r2, [r3, #28]
 800a026:	e005      	b.n	800a034 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f9 fcb6 	bl	80039c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a06a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a074:	d902      	bls.n	800a07c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e002      	b.n	800a082 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a07c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a080:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a08a:	d007      	beq.n	800a09c <HAL_SPI_Init+0xa0>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a094:	d002      	beq.n	800a09c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0d4:	431a      	orrs	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0de:	ea42 0103 	orr.w	r1, r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	0c1b      	lsrs	r3, r3, #16
 800a0f8:	f003 0204 	and.w	r2, r3, #4
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	431a      	orrs	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a118:	ea42 0103 	orr.w	r1, r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b08a      	sub	sp, #40	@ 0x28
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
 800a14e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a150:	2301      	movs	r3, #1
 800a152:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_SPI_TransmitReceive+0x26>
 800a164:	2302      	movs	r3, #2
 800a166:	e20a      	b.n	800a57e <HAL_SPI_TransmitReceive+0x43c>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a170:	f7fa f9a6 	bl	80044c0 <HAL_GetTick>
 800a174:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a17c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a184:	887b      	ldrh	r3, [r7, #2]
 800a186:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a188:	887b      	ldrh	r3, [r7, #2]
 800a18a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a18c:	7efb      	ldrb	r3, [r7, #27]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d00e      	beq.n	800a1b0 <HAL_SPI_TransmitReceive+0x6e>
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a198:	d106      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x66>
 800a1a2:	7efb      	ldrb	r3, [r7, #27]
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d003      	beq.n	800a1b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a1ae:	e1e0      	b.n	800a572 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d005      	beq.n	800a1c2 <HAL_SPI_TransmitReceive+0x80>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <HAL_SPI_TransmitReceive+0x80>
 800a1bc:	887b      	ldrh	r3, [r7, #2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a1c8:	e1d3      	b.n	800a572 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d003      	beq.n	800a1de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2205      	movs	r2, #5
 800a1da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	887a      	ldrh	r2, [r7, #2]
 800a1ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	887a      	ldrh	r2, [r7, #2]
 800a1f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	887a      	ldrh	r2, [r7, #2]
 800a204:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	887a      	ldrh	r2, [r7, #2]
 800a20a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a220:	d802      	bhi.n	800a228 <HAL_SPI_TransmitReceive+0xe6>
 800a222:	8a3b      	ldrh	r3, [r7, #16]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d908      	bls.n	800a23a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a236:	605a      	str	r2, [r3, #4]
 800a238:	e007      	b.n	800a24a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a248:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a254:	2b40      	cmp	r3, #64	@ 0x40
 800a256:	d007      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a270:	f240 8081 	bls.w	800a376 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <HAL_SPI_TransmitReceive+0x140>
 800a27c:	8a7b      	ldrh	r3, [r7, #18]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d16d      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a286:	881a      	ldrh	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a292:	1c9a      	adds	r2, r3, #2
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2a6:	e05a      	b.n	800a35e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d11b      	bne.n	800a2ee <HAL_SPI_TransmitReceive+0x1ac>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d016      	beq.n	800a2ee <HAL_SPI_TransmitReceive+0x1ac>
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d113      	bne.n	800a2ee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ca:	881a      	ldrh	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d6:	1c9a      	adds	r2, r3, #2
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d11c      	bne.n	800a336 <HAL_SPI_TransmitReceive+0x1f4>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d016      	beq.n	800a336 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	b292      	uxth	r2, r2
 800a314:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31a:	1c9a      	adds	r2, r3, #2
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a326:	b29b      	uxth	r3, r3
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a332:	2301      	movs	r3, #1
 800a334:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a336:	f7fa f8c3 	bl	80044c0 <HAL_GetTick>
 800a33a:	4602      	mov	r2, r0
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a342:	429a      	cmp	r2, r3
 800a344:	d80b      	bhi.n	800a35e <HAL_SPI_TransmitReceive+0x21c>
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a34c:	d007      	beq.n	800a35e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a35c:	e109      	b.n	800a572 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a362:	b29b      	uxth	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d19f      	bne.n	800a2a8 <HAL_SPI_TransmitReceive+0x166>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	d199      	bne.n	800a2a8 <HAL_SPI_TransmitReceive+0x166>
 800a374:	e0e3      	b.n	800a53e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_SPI_TransmitReceive+0x244>
 800a37e:	8a7b      	ldrh	r3, [r7, #18]
 800a380:	2b01      	cmp	r3, #1
 800a382:	f040 80cf 	bne.w	800a524 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d912      	bls.n	800a3b6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a394:	881a      	ldrh	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a0:	1c9a      	adds	r2, r3, #2
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	3b02      	subs	r3, #2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a3b4:	e0b6      	b.n	800a524 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	330c      	adds	r3, #12
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3dc:	e0a2      	b.n	800a524 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d134      	bne.n	800a456 <HAL_SPI_TransmitReceive+0x314>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02f      	beq.n	800a456 <HAL_SPI_TransmitReceive+0x314>
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d12c      	bne.n	800a456 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a400:	b29b      	uxth	r3, r3
 800a402:	2b01      	cmp	r3, #1
 800a404:	d912      	bls.n	800a42c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a40a:	881a      	ldrh	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a416:	1c9a      	adds	r2, r3, #2
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b02      	subs	r3, #2
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a42a:	e012      	b.n	800a452 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	330c      	adds	r3, #12
 800a436:	7812      	ldrb	r2, [r2, #0]
 800a438:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	d148      	bne.n	800a4f6 <HAL_SPI_TransmitReceive+0x3b4>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d042      	beq.n	800a4f6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d923      	bls.n	800a4c4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a486:	b292      	uxth	r2, r2
 800a488:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48e:	1c9a      	adds	r2, r3, #2
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	3b02      	subs	r3, #2
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d81f      	bhi.n	800a4f2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4c0:	605a      	str	r2, [r3, #4]
 800a4c2:	e016      	b.n	800a4f2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f103 020c 	add.w	r2, r3, #12
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d0:	7812      	ldrb	r2, [r2, #0]
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4f6:	f7f9 ffe3 	bl	80044c0 <HAL_GetTick>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a502:	429a      	cmp	r2, r3
 800a504:	d803      	bhi.n	800a50e <HAL_SPI_TransmitReceive+0x3cc>
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a50c:	d102      	bne.n	800a514 <HAL_SPI_TransmitReceive+0x3d2>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	2b00      	cmp	r3, #0
 800a512:	d107      	bne.n	800a524 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a522:	e026      	b.n	800a572 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f47f af57 	bne.w	800a3de <HAL_SPI_TransmitReceive+0x29c>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a536:	b29b      	uxth	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f47f af50 	bne.w	800a3de <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f93e 	bl	800a7c4 <SPI_EndRxTxTransaction>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a568:	e003      	b.n	800a572 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a57a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3728      	adds	r7, #40	@ 0x28
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	4613      	mov	r3, r2
 800a596:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a598:	f7f9 ff92 	bl	80044c0 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a5a8:	f7f9 ff8a 	bl	80044c0 <HAL_GetTick>
 800a5ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a5ae:	4b39      	ldr	r3, [pc, #228]	@ (800a694 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	015b      	lsls	r3, r3, #5
 800a5b4:	0d1b      	lsrs	r3, r3, #20
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	fb02 f303 	mul.w	r3, r2, r3
 800a5bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5be:	e054      	b.n	800a66a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5c6:	d050      	beq.n	800a66a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5c8:	f7f9 ff7a 	bl	80044c0 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	69fa      	ldr	r2, [r7, #28]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d902      	bls.n	800a5de <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d13d      	bne.n	800a65a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a5ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5f6:	d111      	bne.n	800a61c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a600:	d004      	beq.n	800a60c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a60a:	d107      	bne.n	800a61c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a61a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a624:	d10f      	bne.n	800a646 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e017      	b.n	800a68a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	3b01      	subs	r3, #1
 800a668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4013      	ands	r3, r2
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	bf0c      	ite	eq
 800a67a:	2301      	moveq	r3, #1
 800a67c:	2300      	movne	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	429a      	cmp	r2, r3
 800a686:	d19b      	bne.n	800a5c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20000020 	.word	0x20000020

0800a698 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	@ 0x28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a6aa:	f7f9 ff09 	bl	80044c0 <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a6ba:	f7f9 ff01 	bl	80044c0 <HAL_GetTick>
 800a6be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	330c      	adds	r3, #12
 800a6c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a6c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a7c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	00da      	lsls	r2, r3, #3
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	0d1b      	lsrs	r3, r3, #20
 800a6d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6da:	fb02 f303 	mul.w	r3, r2, r3
 800a6de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a6e0:	e060      	b.n	800a7a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6e8:	d107      	bne.n	800a6fa <SPI_WaitFifoStateUntilTimeout+0x62>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d104      	bne.n	800a6fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a700:	d050      	beq.n	800a7a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a702:	f7f9 fedd 	bl	80044c0 <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a70e:	429a      	cmp	r2, r3
 800a710:	d902      	bls.n	800a718 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	d13d      	bne.n	800a794 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a726:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a730:	d111      	bne.n	800a756 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a73a:	d004      	beq.n	800a746 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a744:	d107      	bne.n	800a756 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a754:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a75e:	d10f      	bne.n	800a780 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a77e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e010      	b.n	800a7b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d196      	bne.n	800a6e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3728      	adds	r7, #40	@ 0x28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000020 	.word	0x20000020

0800a7c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f7ff ff5b 	bl	800a698 <SPI_WaitFifoStateUntilTimeout>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ec:	f043 0220 	orr.w	r2, r3, #32
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e027      	b.n	800a848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2200      	movs	r2, #0
 800a800:	2180      	movs	r1, #128	@ 0x80
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fec0 	bl	800a588 <SPI_WaitFlagStateUntilTimeout>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a812:	f043 0220 	orr.w	r2, r3, #32
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e014      	b.n	800a848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7ff ff34 	bl	800a698 <SPI_WaitFifoStateUntilTimeout>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d007      	beq.n	800a846 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a83a:	f043 0220 	orr.w	r2, r3, #32
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e000      	b.n	800a848 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e049      	b.n	800a8f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7f9 fd1a 	bl	80042b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4619      	mov	r1, r3
 800a88e:	4610      	mov	r0, r2
 800a890:	f000 fbbc 	bl	800b00c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b01      	cmp	r3, #1
 800a912:	d001      	beq.n	800a918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e04f      	b.n	800a9b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a23      	ldr	r2, [pc, #140]	@ (800a9c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d01d      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0x76>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a942:	d018      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0x76>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a1f      	ldr	r2, [pc, #124]	@ (800a9c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0x76>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a1e      	ldr	r2, [pc, #120]	@ (800a9cc <HAL_TIM_Base_Start_IT+0xcc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00e      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0x76>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a1c      	ldr	r2, [pc, #112]	@ (800a9d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d009      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0x76>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a1b      	ldr	r2, [pc, #108]	@ (800a9d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d004      	beq.n	800a976 <HAL_TIM_Base_Start_IT+0x76>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a19      	ldr	r2, [pc, #100]	@ (800a9d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d115      	bne.n	800a9a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	4b17      	ldr	r3, [pc, #92]	@ (800a9dc <HAL_TIM_Base_Start_IT+0xdc>)
 800a97e:	4013      	ands	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b06      	cmp	r3, #6
 800a986:	d015      	beq.n	800a9b4 <HAL_TIM_Base_Start_IT+0xb4>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a98e:	d011      	beq.n	800a9b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a0:	e008      	b.n	800a9b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0201 	orr.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	e000      	b.n	800a9b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	40012c00 	.word	0x40012c00
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800
 800a9d0:	40000c00 	.word	0x40000c00
 800a9d4:	40013400 	.word	0x40013400
 800a9d8:	40014000 	.word	0x40014000
 800a9dc:	00010007 	.word	0x00010007

0800a9e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e049      	b.n	800aa86 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f841 	bl	800aa8e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f000 faf4 	bl	800b00c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d020      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01b      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f06f 0202 	mvn.w	r2, #2
 800aad6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa6e 	bl	800afce <HAL_TIM_IC_CaptureCallback>
 800aaf2:	e005      	b.n	800ab00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa60 	bl	800afba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fa71 	bl	800afe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d020      	beq.n	800ab52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f003 0304 	and.w	r3, r3, #4
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01b      	beq.n	800ab52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f06f 0204 	mvn.w	r2, #4
 800ab22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa48 	bl	800afce <HAL_TIM_IC_CaptureCallback>
 800ab3e:	e005      	b.n	800ab4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa3a 	bl	800afba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa4b 	bl	800afe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f003 0308 	and.w	r3, r3, #8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d020      	beq.n	800ab9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01b      	beq.n	800ab9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f06f 0208 	mvn.w	r2, #8
 800ab6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2204      	movs	r2, #4
 800ab74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fa22 	bl	800afce <HAL_TIM_IC_CaptureCallback>
 800ab8a:	e005      	b.n	800ab98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 fa14 	bl	800afba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa25 	bl	800afe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f003 0310 	and.w	r3, r3, #16
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d020      	beq.n	800abea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d01b      	beq.n	800abea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f06f 0210 	mvn.w	r2, #16
 800abba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2208      	movs	r2, #8
 800abc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f9fc 	bl	800afce <HAL_TIM_IC_CaptureCallback>
 800abd6:	e005      	b.n	800abe4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f9ee 	bl	800afba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f9ff 	bl	800afe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00c      	beq.n	800ac0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d007      	beq.n	800ac0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f06f 0201 	mvn.w	r2, #1
 800ac06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7f8 fd85 	bl	8003718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00c      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 ff28 	bl	800ba8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00c      	beq.n	800ac60 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 ff20 	bl	800baa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00c      	beq.n	800ac84 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d007      	beq.n	800ac84 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f9b9 	bl	800aff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00c      	beq.n	800aca8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d007      	beq.n	800aca8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f06f 0220 	mvn.w	r2, #32
 800aca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fee8 	bl	800ba78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aca8:	bf00      	nop
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d101      	bne.n	800acce <HAL_TIM_OC_ConfigChannel+0x1e>
 800acca:	2302      	movs	r3, #2
 800accc:	e066      	b.n	800ad9c <HAL_TIM_OC_ConfigChannel+0xec>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b14      	cmp	r3, #20
 800acda:	d857      	bhi.n	800ad8c <HAL_TIM_OC_ConfigChannel+0xdc>
 800acdc:	a201      	add	r2, pc, #4	@ (adr r2, 800ace4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad39 	.word	0x0800ad39
 800ace8:	0800ad8d 	.word	0x0800ad8d
 800acec:	0800ad8d 	.word	0x0800ad8d
 800acf0:	0800ad8d 	.word	0x0800ad8d
 800acf4:	0800ad47 	.word	0x0800ad47
 800acf8:	0800ad8d 	.word	0x0800ad8d
 800acfc:	0800ad8d 	.word	0x0800ad8d
 800ad00:	0800ad8d 	.word	0x0800ad8d
 800ad04:	0800ad55 	.word	0x0800ad55
 800ad08:	0800ad8d 	.word	0x0800ad8d
 800ad0c:	0800ad8d 	.word	0x0800ad8d
 800ad10:	0800ad8d 	.word	0x0800ad8d
 800ad14:	0800ad63 	.word	0x0800ad63
 800ad18:	0800ad8d 	.word	0x0800ad8d
 800ad1c:	0800ad8d 	.word	0x0800ad8d
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800ad71 	.word	0x0800ad71
 800ad28:	0800ad8d 	.word	0x0800ad8d
 800ad2c:	0800ad8d 	.word	0x0800ad8d
 800ad30:	0800ad8d 	.word	0x0800ad8d
 800ad34:	0800ad7f 	.word	0x0800ad7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fa0a 	bl	800b158 <TIM_OC1_SetConfig>
      break;
 800ad44:	e025      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fa93 	bl	800b278 <TIM_OC2_SetConfig>
      break;
 800ad52:	e01e      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fb16 	bl	800b38c <TIM_OC3_SetConfig>
      break;
 800ad60:	e017      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68b9      	ldr	r1, [r7, #8]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 fb97 	bl	800b49c <TIM_OC4_SetConfig>
      break;
 800ad6e:	e010      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fbfa 	bl	800b570 <TIM_OC5_SetConfig>
      break;
 800ad7c:	e009      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 fc57 	bl	800b638 <TIM_OC6_SetConfig>
      break;
 800ad8a:	e002      	b.n	800ad92 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_TIM_ConfigClockSource+0x1c>
 800adbc:	2302      	movs	r3, #2
 800adbe:	e0b6      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x18a>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2202      	movs	r2, #2
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800adde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ade2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adfc:	d03e      	beq.n	800ae7c <HAL_TIM_ConfigClockSource+0xd8>
 800adfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae02:	f200 8087 	bhi.w	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae0a:	f000 8086 	beq.w	800af1a <HAL_TIM_ConfigClockSource+0x176>
 800ae0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae12:	d87f      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae14:	2b70      	cmp	r3, #112	@ 0x70
 800ae16:	d01a      	beq.n	800ae4e <HAL_TIM_ConfigClockSource+0xaa>
 800ae18:	2b70      	cmp	r3, #112	@ 0x70
 800ae1a:	d87b      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae1c:	2b60      	cmp	r3, #96	@ 0x60
 800ae1e:	d050      	beq.n	800aec2 <HAL_TIM_ConfigClockSource+0x11e>
 800ae20:	2b60      	cmp	r3, #96	@ 0x60
 800ae22:	d877      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae24:	2b50      	cmp	r3, #80	@ 0x50
 800ae26:	d03c      	beq.n	800aea2 <HAL_TIM_ConfigClockSource+0xfe>
 800ae28:	2b50      	cmp	r3, #80	@ 0x50
 800ae2a:	d873      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae2c:	2b40      	cmp	r3, #64	@ 0x40
 800ae2e:	d058      	beq.n	800aee2 <HAL_TIM_ConfigClockSource+0x13e>
 800ae30:	2b40      	cmp	r3, #64	@ 0x40
 800ae32:	d86f      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae34:	2b30      	cmp	r3, #48	@ 0x30
 800ae36:	d064      	beq.n	800af02 <HAL_TIM_ConfigClockSource+0x15e>
 800ae38:	2b30      	cmp	r3, #48	@ 0x30
 800ae3a:	d86b      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d060      	beq.n	800af02 <HAL_TIM_ConfigClockSource+0x15e>
 800ae40:	2b20      	cmp	r3, #32
 800ae42:	d867      	bhi.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d05c      	beq.n	800af02 <HAL_TIM_ConfigClockSource+0x15e>
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d05a      	beq.n	800af02 <HAL_TIM_ConfigClockSource+0x15e>
 800ae4c:	e062      	b.n	800af14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae5e:	f000 fd62 	bl	800b926 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	609a      	str	r2, [r3, #8]
      break;
 800ae7a:	e04f      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae8c:	f000 fd4b 	bl	800b926 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689a      	ldr	r2, [r3, #8]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae9e:	609a      	str	r2, [r3, #8]
      break;
 800aea0:	e03c      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f000 fcbd 	bl	800b82e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2150      	movs	r1, #80	@ 0x50
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 fd16 	bl	800b8ec <TIM_ITRx_SetConfig>
      break;
 800aec0:	e02c      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aece:	461a      	mov	r2, r3
 800aed0:	f000 fcdc 	bl	800b88c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2160      	movs	r1, #96	@ 0x60
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fd06 	bl	800b8ec <TIM_ITRx_SetConfig>
      break;
 800aee0:	e01c      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeee:	461a      	mov	r2, r3
 800aef0:	f000 fc9d 	bl	800b82e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2140      	movs	r1, #64	@ 0x40
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fcf6 	bl	800b8ec <TIM_ITRx_SetConfig>
      break;
 800af00:	e00c      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f000 fced 	bl	800b8ec <TIM_ITRx_SetConfig>
      break;
 800af12:	e003      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	73fb      	strb	r3, [r7, #15]
      break;
 800af18:	e000      	b.n	800af1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800af1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d101      	bne.n	800af4e <HAL_TIM_SlaveConfigSynchro+0x18>
 800af4a:	2302      	movs	r3, #2
 800af4c:	e031      	b.n	800afb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2202      	movs	r2, #2
 800af5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fbcf 	bl	800b704 <TIM_SlaveTimer_SetConfig>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e018      	b.n	800afb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af8e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800af9e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afba:	b480      	push	{r7}
 800afbc:	b083      	sub	sp, #12
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afc2:	bf00      	nop
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800afd6:	bf00      	nop
 800afd8:	370c      	adds	r7, #12
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b083      	sub	sp, #12
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800afea:	bf00      	nop
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800affe:	bf00      	nop
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
	...

0800b00c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a46      	ldr	r2, [pc, #280]	@ (800b138 <TIM_Base_SetConfig+0x12c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d013      	beq.n	800b04c <TIM_Base_SetConfig+0x40>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b02a:	d00f      	beq.n	800b04c <TIM_Base_SetConfig+0x40>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a43      	ldr	r2, [pc, #268]	@ (800b13c <TIM_Base_SetConfig+0x130>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00b      	beq.n	800b04c <TIM_Base_SetConfig+0x40>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a42      	ldr	r2, [pc, #264]	@ (800b140 <TIM_Base_SetConfig+0x134>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d007      	beq.n	800b04c <TIM_Base_SetConfig+0x40>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a41      	ldr	r2, [pc, #260]	@ (800b144 <TIM_Base_SetConfig+0x138>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d003      	beq.n	800b04c <TIM_Base_SetConfig+0x40>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a40      	ldr	r2, [pc, #256]	@ (800b148 <TIM_Base_SetConfig+0x13c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d108      	bne.n	800b05e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a35      	ldr	r2, [pc, #212]	@ (800b138 <TIM_Base_SetConfig+0x12c>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d01f      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06c:	d01b      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a32      	ldr	r2, [pc, #200]	@ (800b13c <TIM_Base_SetConfig+0x130>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d017      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a31      	ldr	r2, [pc, #196]	@ (800b140 <TIM_Base_SetConfig+0x134>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d013      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a30      	ldr	r2, [pc, #192]	@ (800b144 <TIM_Base_SetConfig+0x138>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00f      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a2f      	ldr	r2, [pc, #188]	@ (800b148 <TIM_Base_SetConfig+0x13c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00b      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a2e      	ldr	r2, [pc, #184]	@ (800b14c <TIM_Base_SetConfig+0x140>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d007      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a2d      	ldr	r2, [pc, #180]	@ (800b150 <TIM_Base_SetConfig+0x144>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d003      	beq.n	800b0a6 <TIM_Base_SetConfig+0x9a>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a2c      	ldr	r2, [pc, #176]	@ (800b154 <TIM_Base_SetConfig+0x148>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d108      	bne.n	800b0b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a16      	ldr	r2, [pc, #88]	@ (800b138 <TIM_Base_SetConfig+0x12c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d00f      	beq.n	800b104 <TIM_Base_SetConfig+0xf8>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a18      	ldr	r2, [pc, #96]	@ (800b148 <TIM_Base_SetConfig+0x13c>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d00b      	beq.n	800b104 <TIM_Base_SetConfig+0xf8>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a17      	ldr	r2, [pc, #92]	@ (800b14c <TIM_Base_SetConfig+0x140>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d007      	beq.n	800b104 <TIM_Base_SetConfig+0xf8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a16      	ldr	r2, [pc, #88]	@ (800b150 <TIM_Base_SetConfig+0x144>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d003      	beq.n	800b104 <TIM_Base_SetConfig+0xf8>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a15      	ldr	r2, [pc, #84]	@ (800b154 <TIM_Base_SetConfig+0x148>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d103      	bne.n	800b10c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	691a      	ldr	r2, [r3, #16]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d105      	bne.n	800b12a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f023 0201 	bic.w	r2, r3, #1
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	611a      	str	r2, [r3, #16]
  }
}
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	40012c00 	.word	0x40012c00
 800b13c:	40000400 	.word	0x40000400
 800b140:	40000800 	.word	0x40000800
 800b144:	40000c00 	.word	0x40000c00
 800b148:	40013400 	.word	0x40013400
 800b14c:	40014000 	.word	0x40014000
 800b150:	40014400 	.word	0x40014400
 800b154:	40014800 	.word	0x40014800

0800b158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	f023 0201 	bic.w	r2, r3, #1
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f023 0303 	bic.w	r3, r3, #3
 800b192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f023 0302 	bic.w	r3, r3, #2
 800b1a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a2c      	ldr	r2, [pc, #176]	@ (800b264 <TIM_OC1_SetConfig+0x10c>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00f      	beq.n	800b1d8 <TIM_OC1_SetConfig+0x80>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a2b      	ldr	r2, [pc, #172]	@ (800b268 <TIM_OC1_SetConfig+0x110>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d00b      	beq.n	800b1d8 <TIM_OC1_SetConfig+0x80>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b26c <TIM_OC1_SetConfig+0x114>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d007      	beq.n	800b1d8 <TIM_OC1_SetConfig+0x80>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a29      	ldr	r2, [pc, #164]	@ (800b270 <TIM_OC1_SetConfig+0x118>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_OC1_SetConfig+0x80>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a28      	ldr	r2, [pc, #160]	@ (800b274 <TIM_OC1_SetConfig+0x11c>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d10c      	bne.n	800b1f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f023 0308 	bic.w	r3, r3, #8
 800b1de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f023 0304 	bic.w	r3, r3, #4
 800b1f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b264 <TIM_OC1_SetConfig+0x10c>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00f      	beq.n	800b21a <TIM_OC1_SetConfig+0xc2>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b268 <TIM_OC1_SetConfig+0x110>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00b      	beq.n	800b21a <TIM_OC1_SetConfig+0xc2>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a19      	ldr	r2, [pc, #100]	@ (800b26c <TIM_OC1_SetConfig+0x114>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d007      	beq.n	800b21a <TIM_OC1_SetConfig+0xc2>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a18      	ldr	r2, [pc, #96]	@ (800b270 <TIM_OC1_SetConfig+0x118>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d003      	beq.n	800b21a <TIM_OC1_SetConfig+0xc2>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a17      	ldr	r2, [pc, #92]	@ (800b274 <TIM_OC1_SetConfig+0x11c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d111      	bne.n	800b23e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	4313      	orrs	r3, r2
 800b232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	621a      	str	r2, [r3, #32]
}
 800b258:	bf00      	nop
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	40012c00 	.word	0x40012c00
 800b268:	40013400 	.word	0x40013400
 800b26c:	40014000 	.word	0x40014000
 800b270:	40014400 	.word	0x40014400
 800b274:	40014800 	.word	0x40014800

0800b278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	f023 0210 	bic.w	r2, r3, #16
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b2a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	021b      	lsls	r3, r3, #8
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f023 0320 	bic.w	r3, r3, #32
 800b2c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	011b      	lsls	r3, r3, #4
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a28      	ldr	r2, [pc, #160]	@ (800b378 <TIM_OC2_SetConfig+0x100>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_OC2_SetConfig+0x6c>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a27      	ldr	r2, [pc, #156]	@ (800b37c <TIM_OC2_SetConfig+0x104>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d10d      	bne.n	800b300 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a1d      	ldr	r2, [pc, #116]	@ (800b378 <TIM_OC2_SetConfig+0x100>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d00f      	beq.n	800b328 <TIM_OC2_SetConfig+0xb0>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a1c      	ldr	r2, [pc, #112]	@ (800b37c <TIM_OC2_SetConfig+0x104>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d00b      	beq.n	800b328 <TIM_OC2_SetConfig+0xb0>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a1b      	ldr	r2, [pc, #108]	@ (800b380 <TIM_OC2_SetConfig+0x108>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d007      	beq.n	800b328 <TIM_OC2_SetConfig+0xb0>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a1a      	ldr	r2, [pc, #104]	@ (800b384 <TIM_OC2_SetConfig+0x10c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d003      	beq.n	800b328 <TIM_OC2_SetConfig+0xb0>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a19      	ldr	r2, [pc, #100]	@ (800b388 <TIM_OC2_SetConfig+0x110>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d113      	bne.n	800b350 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b32e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	4313      	orrs	r3, r2
 800b342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	40012c00 	.word	0x40012c00
 800b37c:	40013400 	.word	0x40013400
 800b380:	40014000 	.word	0x40014000
 800b384:	40014400 	.word	0x40014400
 800b388:	40014800 	.word	0x40014800

0800b38c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0303 	bic.w	r3, r3, #3
 800b3c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	021b      	lsls	r3, r3, #8
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a27      	ldr	r2, [pc, #156]	@ (800b488 <TIM_OC3_SetConfig+0xfc>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d003      	beq.n	800b3f6 <TIM_OC3_SetConfig+0x6a>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a26      	ldr	r2, [pc, #152]	@ (800b48c <TIM_OC3_SetConfig+0x100>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d10d      	bne.n	800b412 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a1c      	ldr	r2, [pc, #112]	@ (800b488 <TIM_OC3_SetConfig+0xfc>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d00f      	beq.n	800b43a <TIM_OC3_SetConfig+0xae>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a1b      	ldr	r2, [pc, #108]	@ (800b48c <TIM_OC3_SetConfig+0x100>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00b      	beq.n	800b43a <TIM_OC3_SetConfig+0xae>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a1a      	ldr	r2, [pc, #104]	@ (800b490 <TIM_OC3_SetConfig+0x104>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d007      	beq.n	800b43a <TIM_OC3_SetConfig+0xae>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a19      	ldr	r2, [pc, #100]	@ (800b494 <TIM_OC3_SetConfig+0x108>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d003      	beq.n	800b43a <TIM_OC3_SetConfig+0xae>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a18      	ldr	r2, [pc, #96]	@ (800b498 <TIM_OC3_SetConfig+0x10c>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d113      	bne.n	800b462 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	011b      	lsls	r3, r3, #4
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	4313      	orrs	r3, r2
 800b454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	4313      	orrs	r3, r2
 800b460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	621a      	str	r2, [r3, #32]
}
 800b47c:	bf00      	nop
 800b47e:	371c      	adds	r7, #28
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	40012c00 	.word	0x40012c00
 800b48c:	40013400 	.word	0x40013400
 800b490:	40014000 	.word	0x40014000
 800b494:	40014400 	.word	0x40014400
 800b498:	40014800 	.word	0x40014800

0800b49c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
 800b4b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b4ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	031b      	lsls	r3, r3, #12
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a18      	ldr	r2, [pc, #96]	@ (800b55c <TIM_OC4_SetConfig+0xc0>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d00f      	beq.n	800b520 <TIM_OC4_SetConfig+0x84>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a17      	ldr	r2, [pc, #92]	@ (800b560 <TIM_OC4_SetConfig+0xc4>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d00b      	beq.n	800b520 <TIM_OC4_SetConfig+0x84>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a16      	ldr	r2, [pc, #88]	@ (800b564 <TIM_OC4_SetConfig+0xc8>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d007      	beq.n	800b520 <TIM_OC4_SetConfig+0x84>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a15      	ldr	r2, [pc, #84]	@ (800b568 <TIM_OC4_SetConfig+0xcc>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d003      	beq.n	800b520 <TIM_OC4_SetConfig+0x84>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a14      	ldr	r2, [pc, #80]	@ (800b56c <TIM_OC4_SetConfig+0xd0>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d109      	bne.n	800b534 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	019b      	lsls	r3, r3, #6
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4313      	orrs	r3, r2
 800b532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	621a      	str	r2, [r3, #32]
}
 800b54e:	bf00      	nop
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40012c00 	.word	0x40012c00
 800b560:	40013400 	.word	0x40013400
 800b564:	40014000 	.word	0x40014000
 800b568:	40014400 	.word	0x40014400
 800b56c:	40014800 	.word	0x40014800

0800b570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b5b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	041b      	lsls	r3, r3, #16
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a17      	ldr	r2, [pc, #92]	@ (800b624 <TIM_OC5_SetConfig+0xb4>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d00f      	beq.n	800b5ea <TIM_OC5_SetConfig+0x7a>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a16      	ldr	r2, [pc, #88]	@ (800b628 <TIM_OC5_SetConfig+0xb8>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d00b      	beq.n	800b5ea <TIM_OC5_SetConfig+0x7a>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a15      	ldr	r2, [pc, #84]	@ (800b62c <TIM_OC5_SetConfig+0xbc>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d007      	beq.n	800b5ea <TIM_OC5_SetConfig+0x7a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a14      	ldr	r2, [pc, #80]	@ (800b630 <TIM_OC5_SetConfig+0xc0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d003      	beq.n	800b5ea <TIM_OC5_SetConfig+0x7a>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a13      	ldr	r2, [pc, #76]	@ (800b634 <TIM_OC5_SetConfig+0xc4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d109      	bne.n	800b5fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	021b      	lsls	r3, r3, #8
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	621a      	str	r2, [r3, #32]
}
 800b618:	bf00      	nop
 800b61a:	371c      	adds	r7, #28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	40012c00 	.word	0x40012c00
 800b628:	40013400 	.word	0x40013400
 800b62c:	40014000 	.word	0x40014000
 800b630:	40014400 	.word	0x40014400
 800b634:	40014800 	.word	0x40014800

0800b638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b638:	b480      	push	{r7}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b66a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	021b      	lsls	r3, r3, #8
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4313      	orrs	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b67e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	051b      	lsls	r3, r3, #20
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	4313      	orrs	r3, r2
 800b68a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a18      	ldr	r2, [pc, #96]	@ (800b6f0 <TIM_OC6_SetConfig+0xb8>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00f      	beq.n	800b6b4 <TIM_OC6_SetConfig+0x7c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a17      	ldr	r2, [pc, #92]	@ (800b6f4 <TIM_OC6_SetConfig+0xbc>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00b      	beq.n	800b6b4 <TIM_OC6_SetConfig+0x7c>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a16      	ldr	r2, [pc, #88]	@ (800b6f8 <TIM_OC6_SetConfig+0xc0>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d007      	beq.n	800b6b4 <TIM_OC6_SetConfig+0x7c>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a15      	ldr	r2, [pc, #84]	@ (800b6fc <TIM_OC6_SetConfig+0xc4>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d003      	beq.n	800b6b4 <TIM_OC6_SetConfig+0x7c>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a14      	ldr	r2, [pc, #80]	@ (800b700 <TIM_OC6_SetConfig+0xc8>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d109      	bne.n	800b6c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b6ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	029b      	lsls	r3, r3, #10
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	40012c00 	.word	0x40012c00
 800b6f4:	40013400 	.word	0x40013400
 800b6f8:	40014000 	.word	0x40014000
 800b6fc:	40014400 	.word	0x40014400
 800b700:	40014800 	.word	0x40014800

0800b704 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b724:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b736:	f023 0307 	bic.w	r3, r3, #7
 800b73a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b70      	cmp	r3, #112	@ 0x70
 800b754:	d01a      	beq.n	800b78c <TIM_SlaveTimer_SetConfig+0x88>
 800b756:	2b70      	cmp	r3, #112	@ 0x70
 800b758:	d860      	bhi.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
 800b75a:	2b60      	cmp	r3, #96	@ 0x60
 800b75c:	d054      	beq.n	800b808 <TIM_SlaveTimer_SetConfig+0x104>
 800b75e:	2b60      	cmp	r3, #96	@ 0x60
 800b760:	d85c      	bhi.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
 800b762:	2b50      	cmp	r3, #80	@ 0x50
 800b764:	d046      	beq.n	800b7f4 <TIM_SlaveTimer_SetConfig+0xf0>
 800b766:	2b50      	cmp	r3, #80	@ 0x50
 800b768:	d858      	bhi.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
 800b76a:	2b40      	cmp	r3, #64	@ 0x40
 800b76c:	d019      	beq.n	800b7a2 <TIM_SlaveTimer_SetConfig+0x9e>
 800b76e:	2b40      	cmp	r3, #64	@ 0x40
 800b770:	d854      	bhi.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
 800b772:	2b30      	cmp	r3, #48	@ 0x30
 800b774:	d055      	beq.n	800b822 <TIM_SlaveTimer_SetConfig+0x11e>
 800b776:	2b30      	cmp	r3, #48	@ 0x30
 800b778:	d850      	bhi.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
 800b77a:	2b20      	cmp	r3, #32
 800b77c:	d051      	beq.n	800b822 <TIM_SlaveTimer_SetConfig+0x11e>
 800b77e:	2b20      	cmp	r3, #32
 800b780:	d84c      	bhi.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
 800b782:	2b00      	cmp	r3, #0
 800b784:	d04d      	beq.n	800b822 <TIM_SlaveTimer_SetConfig+0x11e>
 800b786:	2b10      	cmp	r3, #16
 800b788:	d04b      	beq.n	800b822 <TIM_SlaveTimer_SetConfig+0x11e>
 800b78a:	e047      	b.n	800b81c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b79c:	f000 f8c3 	bl	800b926 <TIM_ETR_SetConfig>
      break;
 800b7a0:	e040      	b.n	800b824 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	d101      	bne.n	800b7ae <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e03b      	b.n	800b826 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6a1b      	ldr	r3, [r3, #32]
 800b7b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6a1a      	ldr	r2, [r3, #32]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0201 	bic.w	r2, r2, #1
 800b7c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7d4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	621a      	str	r2, [r3, #32]
      break;
 800b7f2:	e017      	b.n	800b824 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b800:	461a      	mov	r2, r3
 800b802:	f000 f814 	bl	800b82e <TIM_TI1_ConfigInputStage>
      break;
 800b806:	e00d      	b.n	800b824 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b814:	461a      	mov	r2, r3
 800b816:	f000 f839 	bl	800b88c <TIM_TI2_ConfigInputStage>
      break;
 800b81a:	e003      	b.n	800b824 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	75fb      	strb	r3, [r7, #23]
      break;
 800b820:	e000      	b.n	800b824 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800b822:	bf00      	nop
  }

  return status;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b82e:	b480      	push	{r7}
 800b830:	b087      	sub	sp, #28
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	f023 0201 	bic.w	r2, r3, #1
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4313      	orrs	r3, r2
 800b862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f023 030a 	bic.w	r3, r3, #10
 800b86a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4313      	orrs	r3, r2
 800b872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	f023 0210 	bic.w	r2, r3, #16
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	031b      	lsls	r3, r3, #12
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b8c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	011b      	lsls	r3, r3, #4
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	621a      	str	r2, [r3, #32]
}
 800b8e0:	bf00      	nop
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b906:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	f043 0307 	orr.w	r3, r3, #7
 800b912:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	609a      	str	r2, [r3, #8]
}
 800b91a:	bf00      	nop
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b926:	b480      	push	{r7}
 800b928:	b087      	sub	sp, #28
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	021a      	lsls	r2, r3, #8
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	431a      	orrs	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	4313      	orrs	r3, r2
 800b952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	609a      	str	r2, [r3, #8]
}
 800b95a:	bf00      	nop
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d101      	bne.n	800b980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b97c:	2302      	movs	r3, #2
 800b97e:	e068      	b.n	800ba52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a2e      	ldr	r2, [pc, #184]	@ (800ba60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d004      	beq.n	800b9b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a2d      	ldr	r2, [pc, #180]	@ (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d108      	bne.n	800b9c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b9ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a1e      	ldr	r2, [pc, #120]	@ (800ba60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d01d      	beq.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9f2:	d018      	beq.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a1b      	ldr	r2, [pc, #108]	@ (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d013      	beq.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a1a      	ldr	r2, [pc, #104]	@ (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d00e      	beq.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a18      	ldr	r2, [pc, #96]	@ (800ba70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d009      	beq.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a13      	ldr	r2, [pc, #76]	@ (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d004      	beq.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a14      	ldr	r2, [pc, #80]	@ (800ba74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d10c      	bne.n	800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	40012c00 	.word	0x40012c00
 800ba64:	40013400 	.word	0x40013400
 800ba68:	40000400 	.word	0x40000400
 800ba6c:	40000800 	.word	0x40000800
 800ba70:	40000c00 	.word	0x40000c00
 800ba74:	40014000 	.word	0x40014000

0800ba78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b09d      	sub	sp, #116	@ 0x74
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bada:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	78db      	ldrb	r3, [r3, #3]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d81f      	bhi.n	800bb26 <USB_ActivateEndpoint+0x72>
 800bae6:	a201      	add	r2, pc, #4	@ (adr r2, 800baec <USB_ActivateEndpoint+0x38>)
 800bae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baec:	0800bafd 	.word	0x0800bafd
 800baf0:	0800bb19 	.word	0x0800bb19
 800baf4:	0800bb2f 	.word	0x0800bb2f
 800baf8:	0800bb0b 	.word	0x0800bb0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bafc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bb00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bb04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bb08:	e012      	b.n	800bb30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bb0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bb0e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bb12:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bb16:	e00b      	b.n	800bb30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bb18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bb1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bb20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bb24:	e004      	b.n	800bb30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bb2c:	e000      	b.n	800bb30 <USB_ActivateEndpoint+0x7c>
      break;
 800bb2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	441a      	add	r2, r3
 800bb3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bb3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	b21b      	sxth	r3, r3
 800bb62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb6a:	b21a      	sxth	r2, r3
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	b21b      	sxth	r3, r3
 800bb72:	4313      	orrs	r3, r2
 800bb74:	b21b      	sxth	r3, r3
 800bb76:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	441a      	add	r2, r3
 800bb84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bb88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	7b1b      	ldrb	r3, [r3, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f040 8178 	bne.w	800be96 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8084 	beq.w	800bcb8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	61bb      	str	r3, [r7, #24]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	61bb      	str	r3, [r7, #24]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	00da      	lsls	r2, r3, #3
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	4413      	add	r3, r2
 800bbce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	88db      	ldrh	r3, [r3, #6]
 800bbd8:	085b      	lsrs	r3, r3, #1
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	827b      	strh	r3, [r7, #18]
 800bbf2:	8a7b      	ldrh	r3, [r7, #18]
 800bbf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01b      	beq.n	800bc34 <USB_ActivateEndpoint+0x180>
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc12:	823b      	strh	r3, [r7, #16]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	441a      	add	r2, r3
 800bc1e:	8a3b      	ldrh	r3, [r7, #16]
 800bc20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	78db      	ldrb	r3, [r3, #3]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d020      	beq.n	800bc7e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc52:	81bb      	strh	r3, [r7, #12]
 800bc54:	89bb      	ldrh	r3, [r7, #12]
 800bc56:	f083 0320 	eor.w	r3, r3, #32
 800bc5a:	81bb      	strh	r3, [r7, #12]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	441a      	add	r2, r3
 800bc66:	89bb      	ldrh	r3, [r7, #12]
 800bc68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	8013      	strh	r3, [r2, #0]
 800bc7c:	e2d5      	b.n	800c22a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc94:	81fb      	strh	r3, [r7, #14]
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	441a      	add	r2, r3
 800bca0:	89fb      	ldrh	r3, [r7, #14]
 800bca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	8013      	strh	r3, [r2, #0]
 800bcb6:	e2b8      	b.n	800c22a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc8:	4413      	add	r3, r2
 800bcca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	00da      	lsls	r2, r3, #3
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bcda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	88db      	ldrh	r3, [r3, #6]
 800bce0:	085b      	lsrs	r3, r3, #1
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfc:	4413      	add	r3, r2
 800bcfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	00da      	lsls	r2, r3, #3
 800bd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd08:	4413      	add	r3, r2
 800bd0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	801a      	strh	r2, [r3, #0]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <USB_ActivateEndpoint+0x28a>
 800bd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3a:	801a      	strh	r2, [r3, #0]
 800bd3c:	e039      	b.n	800bdb2 <USB_ActivateEndpoint+0x2fe>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd44:	d818      	bhi.n	800bd78 <USB_ActivateEndpoint+0x2c4>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	085b      	lsrs	r3, r3, #1
 800bd4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <USB_ActivateEndpoint+0x2ac>
 800bd5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	029b      	lsls	r3, r3, #10
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	e01c      	b.n	800bdb2 <USB_ActivateEndpoint+0x2fe>
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	095b      	lsrs	r3, r3, #5
 800bd7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	f003 031f 	and.w	r3, r3, #31
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <USB_ActivateEndpoint+0x2de>
 800bd8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	029b      	lsls	r3, r3, #10
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	4313      	orrs	r3, r2
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bda8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bdc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bdc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01b      	beq.n	800be02 <USB_ActivateEndpoint+0x34e>
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bde0:	843b      	strh	r3, [r7, #32]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	441a      	add	r2, r3
 800bdec:	8c3b      	ldrh	r3, [r7, #32]
 800bdee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bdfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d124      	bne.n	800be54 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be20:	83bb      	strh	r3, [r7, #28]
 800be22:	8bbb      	ldrh	r3, [r7, #28]
 800be24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800be28:	83bb      	strh	r3, [r7, #28]
 800be2a:	8bbb      	ldrh	r3, [r7, #28]
 800be2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800be30:	83bb      	strh	r3, [r7, #28]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	441a      	add	r2, r3
 800be3c:	8bbb      	ldrh	r3, [r7, #28]
 800be3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be4e:	b29b      	uxth	r3, r3
 800be50:	8013      	strh	r3, [r2, #0]
 800be52:	e1ea      	b.n	800c22a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4413      	add	r3, r2
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	b29b      	uxth	r3, r3
 800be62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be6a:	83fb      	strh	r3, [r7, #30]
 800be6c:	8bfb      	ldrh	r3, [r7, #30]
 800be6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800be72:	83fb      	strh	r3, [r7, #30]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	441a      	add	r2, r3
 800be7e:	8bfb      	ldrh	r3, [r7, #30]
 800be80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be90:	b29b      	uxth	r3, r3
 800be92:	8013      	strh	r3, [r2, #0]
 800be94:	e1c9      	b.n	800c22a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	78db      	ldrb	r3, [r3, #3]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d11e      	bne.n	800bedc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	441a      	add	r2, r3
 800bec2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800beca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bece:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	8013      	strh	r3, [r2, #0]
 800beda:	e01d      	b.n	800bf18 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800beee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bef2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	441a      	add	r2, r3
 800bf00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bf04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf28:	4413      	add	r3, r2
 800bf2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	00da      	lsls	r2, r3, #3
 800bf32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	891b      	ldrh	r3, [r3, #8]
 800bf40:	085b      	lsrs	r3, r3, #1
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf4a:	801a      	strh	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf5c:	4413      	add	r3, r2
 800bf5e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	00da      	lsls	r2, r3, #3
 800bf66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf68:	4413      	add	r3, r2
 800bf6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	895b      	ldrh	r3, [r3, #10]
 800bf74:	085b      	lsrs	r3, r3, #1
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf7e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f040 8093 	bne.w	800c0b0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800bf9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bf9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d01b      	beq.n	800bfde <USB_ActivateEndpoint+0x52a>
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfbc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	441a      	add	r2, r3
 800bfc8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800bfec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bfee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d01b      	beq.n	800c02e <USB_ActivateEndpoint+0x57a>
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	b29b      	uxth	r3, r3
 800c004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c00c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	441a      	add	r2, r3
 800c018:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c01a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c01e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c026:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c044:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c046:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c048:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c04c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c04e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c050:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c054:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	441a      	add	r2, r3
 800c060:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c06a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c072:	b29b      	uxth	r3, r3
 800c074:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	b29b      	uxth	r3, r3
 800c084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c08c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	441a      	add	r2, r3
 800c098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c09a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c09e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	8013      	strh	r3, [r2, #0]
 800c0ae:	e0bc      	b.n	800c22a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	881b      	ldrh	r3, [r3, #0]
 800c0bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c0c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c0c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01d      	beq.n	800c108 <USB_ActivateEndpoint+0x654>
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0e2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	441a      	add	r2, r3
 800c0f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c104:	b29b      	uxth	r3, r3
 800c106:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c118:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c120:	2b00      	cmp	r3, #0
 800c122:	d01d      	beq.n	800c160 <USB_ActivateEndpoint+0x6ac>
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	b29b      	uxth	r3, r3
 800c132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c13a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	441a      	add	r2, r3
 800c148:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c14c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	78db      	ldrb	r3, [r3, #3]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d024      	beq.n	800c1b2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	b29b      	uxth	r3, r3
 800c176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c17a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c17e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c182:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c186:	f083 0320 	eor.w	r3, r3, #32
 800c18a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	441a      	add	r2, r3
 800c198:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c19c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	8013      	strh	r3, [r2, #0]
 800c1b0:	e01d      	b.n	800c1ee <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	441a      	add	r2, r3
 800c1d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c1da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c204:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	441a      	add	r2, r3
 800c212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c21a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c21e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c226:	b29b      	uxth	r3, r3
 800c228:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c22a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3774      	adds	r7, #116	@ 0x74
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop

0800c23c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b0c2      	sub	sp, #264	@ 0x108
 800c240:	af00      	add	r7, sp, #0
 800c242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c24a:	6018      	str	r0, [r3, #0]
 800c24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c254:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	785b      	ldrb	r3, [r3, #1]
 800c262:	2b01      	cmp	r3, #1
 800c264:	f040 86b7 	bne.w	800cfd6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	699a      	ldr	r2, [r3, #24]
 800c274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	429a      	cmp	r2, r3
 800c282:	d908      	bls.n	800c296 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c294:	e007      	b.n	800c2a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c29a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	7b1b      	ldrb	r3, [r3, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d13a      	bne.n	800c32c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	6959      	ldr	r1, [r3, #20]
 800c2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	88da      	ldrh	r2, [r3, #6]
 800c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c2d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c2dc:	6800      	ldr	r0, [r0, #0]
 800c2de:	f001 fc82 	bl	800dbe6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	613b      	str	r3, [r7, #16]
 800c2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	461a      	mov	r2, r3
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	4413      	add	r3, r2
 800c304:	613b      	str	r3, [r7, #16]
 800c306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c30a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	00da      	lsls	r2, r3, #3
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	4413      	add	r3, r2
 800c318:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c322:	b29a      	uxth	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	801a      	strh	r2, [r3, #0]
 800c328:	f000 be1f 	b.w	800cf6a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	78db      	ldrb	r3, [r3, #3]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	f040 8462 	bne.w	800cc02 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6a1a      	ldr	r2, [r3, #32]
 800c34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	429a      	cmp	r2, r3
 800c358:	f240 83df 	bls.w	800cb1a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c36a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c37e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c382:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c38a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	441a      	add	r2, r3
 800c3a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c3a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c3b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6a1a      	ldr	r2, [r3, #32]
 800c3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c8:	1ad2      	subs	r2, r2, r3
 800c3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 81c7 	beq.w	800c78c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	633b      	str	r3, [r7, #48]	@ 0x30
 800c40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	785b      	ldrb	r3, [r3, #1]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d177      	bne.n	800c50a <USB_EPStartXfer+0x2ce>
 800c41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c41e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c42a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c434:	b29b      	uxth	r3, r3
 800c436:	461a      	mov	r2, r3
 800c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43a:	4413      	add	r3, r2
 800c43c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	00da      	lsls	r2, r3, #3
 800c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44e:	4413      	add	r3, r2
 800c450:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c454:	627b      	str	r3, [r7, #36]	@ 0x24
 800c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c460:	b29a      	uxth	r2, r3
 800c462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c464:	801a      	strh	r2, [r3, #0]
 800c466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <USB_EPStartXfer+0x248>
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	881b      	ldrh	r3, [r3, #0]
 800c472:	b29b      	uxth	r3, r3
 800c474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c480:	801a      	strh	r2, [r3, #0]
 800c482:	e067      	b.n	800c554 <USB_EPStartXfer+0x318>
 800c484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c488:	2b3e      	cmp	r3, #62	@ 0x3e
 800c48a:	d81c      	bhi.n	800c4c6 <USB_EPStartXfer+0x28a>
 800c48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c490:	085b      	lsrs	r3, r3, #1
 800c492:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d004      	beq.n	800c4ac <USB_EPStartXfer+0x270>
 800c4a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	029b      	lsls	r3, r3, #10
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c2:	801a      	strh	r2, [r3, #0]
 800c4c4:	e046      	b.n	800c554 <USB_EPStartXfer+0x318>
 800c4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ca:	095b      	lsrs	r3, r3, #5
 800c4cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4d4:	f003 031f 	and.w	r3, r3, #31
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d104      	bne.n	800c4e6 <USB_EPStartXfer+0x2aa>
 800c4dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	029b      	lsls	r3, r3, #10
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c502:	b29a      	uxth	r2, r3
 800c504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c506:	801a      	strh	r2, [r3, #0]
 800c508:	e024      	b.n	800c554 <USB_EPStartXfer+0x318>
 800c50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c50e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	785b      	ldrb	r3, [r3, #1]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d11c      	bne.n	800c554 <USB_EPStartXfer+0x318>
 800c51a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c51e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c528:	b29b      	uxth	r3, r3
 800c52a:	461a      	mov	r2, r3
 800c52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52e:	4413      	add	r3, r2
 800c530:	633b      	str	r3, [r7, #48]	@ 0x30
 800c532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	00da      	lsls	r2, r3, #3
 800c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c542:	4413      	add	r3, r2
 800c544:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c54e:	b29a      	uxth	r2, r3
 800c550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c552:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	895b      	ldrh	r3, [r3, #10]
 800c560:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6959      	ldr	r1, [r3, #20]
 800c570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c574:	b29b      	uxth	r3, r3
 800c576:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c57a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c57e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c582:	6800      	ldr	r0, [r0, #0]
 800c584:	f001 fb2f 	bl	800dbe6 <USB_WritePMA>
            ep->xfer_buff += len;
 800c588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c58c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	695a      	ldr	r2, [r3, #20]
 800c594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c598:	441a      	add	r2, r3
 800c59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c5a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6a1a      	ldr	r2, [r3, #32]
 800c5b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d90f      	bls.n	800c5e2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6a1a      	ldr	r2, [r3, #32]
 800c5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d2:	1ad2      	subs	r2, r2, r3
 800c5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	621a      	str	r2, [r3, #32]
 800c5e0:	e00e      	b.n	800c600 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d177      	bne.n	800c700 <USB_EPStartXfer+0x4c4>
 800c610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	61bb      	str	r3, [r7, #24]
 800c61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	461a      	mov	r2, r3
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	4413      	add	r3, r2
 800c632:	61bb      	str	r3, [r7, #24]
 800c634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	00da      	lsls	r2, r3, #3
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	4413      	add	r3, r2
 800c646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c64a:	617b      	str	r3, [r7, #20]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	b29b      	uxth	r3, r3
 800c652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c656:	b29a      	uxth	r2, r3
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	801a      	strh	r2, [r3, #0]
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10a      	bne.n	800c67a <USB_EPStartXfer+0x43e>
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c66e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c672:	b29a      	uxth	r2, r3
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	801a      	strh	r2, [r3, #0]
 800c678:	e06d      	b.n	800c756 <USB_EPStartXfer+0x51a>
 800c67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c67e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c680:	d81c      	bhi.n	800c6bc <USB_EPStartXfer+0x480>
 800c682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c686:	085b      	lsrs	r3, r3, #1
 800c688:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <USB_EPStartXfer+0x466>
 800c698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c69c:	3301      	adds	r3, #1
 800c69e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	029b      	lsls	r3, r3, #10
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	801a      	strh	r2, [r3, #0]
 800c6ba:	e04c      	b.n	800c756 <USB_EPStartXfer+0x51a>
 800c6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c0:	095b      	lsrs	r3, r3, #5
 800c6c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ca:	f003 031f 	and.w	r3, r3, #31
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d104      	bne.n	800c6dc <USB_EPStartXfer+0x4a0>
 800c6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	881b      	ldrh	r3, [r3, #0]
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	029b      	lsls	r3, r3, #10
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	801a      	strh	r2, [r3, #0]
 800c6fe:	e02a      	b.n	800c756 <USB_EPStartXfer+0x51a>
 800c700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	785b      	ldrb	r3, [r3, #1]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d122      	bne.n	800c756 <USB_EPStartXfer+0x51a>
 800c710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	623b      	str	r3, [r7, #32]
 800c71c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	461a      	mov	r2, r3
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	4413      	add	r3, r2
 800c732:	623b      	str	r3, [r7, #32]
 800c734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	00da      	lsls	r2, r3, #3
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	4413      	add	r3, r2
 800c746:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c74a:	61fb      	str	r3, [r7, #28]
 800c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c750:	b29a      	uxth	r2, r3
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c75a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	891b      	ldrh	r3, [r3, #8]
 800c762:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c76a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6959      	ldr	r1, [r3, #20]
 800c772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c776:	b29b      	uxth	r3, r3
 800c778:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c77c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c780:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c784:	6800      	ldr	r0, [r0, #0]
 800c786:	f001 fa2e 	bl	800dbe6 <USB_WritePMA>
 800c78a:	e3ee      	b.n	800cf6a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c78c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d177      	bne.n	800c88c <USB_EPStartXfer+0x650>
 800c79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7bc:	4413      	add	r3, r2
 800c7be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	00da      	lsls	r2, r3, #3
 800c7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e6:	801a      	strh	r2, [r3, #0]
 800c7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <USB_EPStartXfer+0x5ca>
 800c7f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c802:	801a      	strh	r2, [r3, #0]
 800c804:	e06d      	b.n	800c8e2 <USB_EPStartXfer+0x6a6>
 800c806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c80c:	d81c      	bhi.n	800c848 <USB_EPStartXfer+0x60c>
 800c80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c812:	085b      	lsrs	r3, r3, #1
 800c814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <USB_EPStartXfer+0x5f2>
 800c824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c828:	3301      	adds	r3, #1
 800c82a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	b29a      	uxth	r2, r3
 800c834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c838:	b29b      	uxth	r3, r3
 800c83a:	029b      	lsls	r3, r3, #10
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	4313      	orrs	r3, r2
 800c840:	b29a      	uxth	r2, r3
 800c842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c844:	801a      	strh	r2, [r3, #0]
 800c846:	e04c      	b.n	800c8e2 <USB_EPStartXfer+0x6a6>
 800c848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c84c:	095b      	lsrs	r3, r3, #5
 800c84e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c856:	f003 031f 	and.w	r3, r3, #31
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d104      	bne.n	800c868 <USB_EPStartXfer+0x62c>
 800c85e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c862:	3b01      	subs	r3, #1
 800c864:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c86a:	881b      	ldrh	r3, [r3, #0]
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c872:	b29b      	uxth	r3, r3
 800c874:	029b      	lsls	r3, r3, #10
 800c876:	b29b      	uxth	r3, r3
 800c878:	4313      	orrs	r3, r2
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c884:	b29a      	uxth	r2, r3
 800c886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c888:	801a      	strh	r2, [r3, #0]
 800c88a:	e02a      	b.n	800c8e2 <USB_EPStartXfer+0x6a6>
 800c88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	785b      	ldrb	r3, [r3, #1]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d122      	bne.n	800c8e2 <USB_EPStartXfer+0x6a6>
 800c89c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8bc:	4413      	add	r3, r2
 800c8be:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	00da      	lsls	r2, r3, #3
 800c8ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	891b      	ldrh	r3, [r3, #8]
 800c8ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6959      	ldr	r1, [r3, #20]
 800c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c902:	b29b      	uxth	r3, r3
 800c904:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c908:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c90c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c910:	6800      	ldr	r0, [r0, #0]
 800c912:	f001 f968 	bl	800dbe6 <USB_WritePMA>
            ep->xfer_buff += len;
 800c916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	695a      	ldr	r2, [r3, #20]
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c926:	441a      	add	r2, r3
 800c928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c92c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6a1a      	ldr	r2, [r3, #32]
 800c940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	691b      	ldr	r3, [r3, #16]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d90f      	bls.n	800c970 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6a1a      	ldr	r2, [r3, #32]
 800c95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c960:	1ad2      	subs	r2, r2, r3
 800c962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	621a      	str	r2, [r3, #32]
 800c96e:	e00e      	b.n	800c98e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2200      	movs	r2, #0
 800c98c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	643b      	str	r3, [r7, #64]	@ 0x40
 800c99a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c99e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	785b      	ldrb	r3, [r3, #1]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d177      	bne.n	800ca9a <USB_EPStartXfer+0x85e>
 800c9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ca:	4413      	add	r3, r2
 800c9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	00da      	lsls	r2, r3, #3
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9de:	4413      	add	r3, r2
 800c9e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f4:	801a      	strh	r2, [r3, #0]
 800c9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <USB_EPStartXfer+0x7d8>
 800c9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca10:	801a      	strh	r2, [r3, #0]
 800ca12:	e067      	b.n	800cae4 <USB_EPStartXfer+0x8a8>
 800ca14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca18:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca1a:	d81c      	bhi.n	800ca56 <USB_EPStartXfer+0x81a>
 800ca1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca20:	085b      	lsrs	r3, r3, #1
 800ca22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d004      	beq.n	800ca3c <USB_EPStartXfer+0x800>
 800ca32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca36:	3301      	adds	r3, #1
 800ca38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ca3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	029b      	lsls	r3, r3, #10
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca52:	801a      	strh	r2, [r3, #0]
 800ca54:	e046      	b.n	800cae4 <USB_EPStartXfer+0x8a8>
 800ca56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca5a:	095b      	lsrs	r3, r3, #5
 800ca5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ca60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca64:	f003 031f 	and.w	r3, r3, #31
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d104      	bne.n	800ca76 <USB_EPStartXfer+0x83a>
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca70:	3b01      	subs	r3, #1
 800ca72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ca76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	029b      	lsls	r3, r3, #10
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	4313      	orrs	r3, r2
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca96:	801a      	strh	r2, [r3, #0]
 800ca98:	e024      	b.n	800cae4 <USB_EPStartXfer+0x8a8>
 800ca9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d11c      	bne.n	800cae4 <USB_EPStartXfer+0x8a8>
 800caaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cab8:	b29b      	uxth	r3, r3
 800caba:	461a      	mov	r2, r3
 800cabc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cabe:	4413      	add	r3, r2
 800cac0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	00da      	lsls	r2, r3, #3
 800cad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad2:	4413      	add	r3, r2
 800cad4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cade:	b29a      	uxth	r2, r3
 800cae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	895b      	ldrh	r3, [r3, #10]
 800caf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800caf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	6959      	ldr	r1, [r3, #20]
 800cb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cb0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cb0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cb12:	6800      	ldr	r0, [r0, #0]
 800cb14:	f001 f867 	bl	800dbe6 <USB_WritePMA>
 800cb18:	e227      	b.n	800cf6a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cb1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cb2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cb4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb50:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cb54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	441a      	add	r2, r3
 800cb6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cb72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cb86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	461a      	mov	r2, r3
 800cba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cba6:	4413      	add	r3, r2
 800cba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	00da      	lsls	r2, r3, #3
 800cbb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbba:	4413      	add	r3, r2
 800cbbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cbc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cbcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	891b      	ldrh	r3, [r3, #8]
 800cbd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6959      	ldr	r1, [r3, #20]
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cbf2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cbf6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cbfa:	6800      	ldr	r0, [r0, #0]
 800cbfc:	f000 fff3 	bl	800dbe6 <USB_WritePMA>
 800cc00:	e1b3      	b.n	800cf6a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cc02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6a1a      	ldr	r2, [r3, #32]
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc12:	1ad2      	subs	r2, r2, r3
 800cc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f000 80c6 	beq.w	800cdd4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	785b      	ldrb	r3, [r3, #1]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d177      	bne.n	800cd54 <USB_EPStartXfer+0xb18>
 800cc64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	461a      	mov	r2, r3
 800cc82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc84:	4413      	add	r3, r2
 800cc86:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	00da      	lsls	r2, r3, #3
 800cc96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc98:	4413      	add	r3, r2
 800cc9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc9e:	667b      	str	r3, [r7, #100]	@ 0x64
 800cca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccae:	801a      	strh	r2, [r3, #0]
 800ccb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10a      	bne.n	800ccce <USB_EPStartXfer+0xa92>
 800ccb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccca:	801a      	strh	r2, [r3, #0]
 800cccc:	e067      	b.n	800cd9e <USB_EPStartXfer+0xb62>
 800ccce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccd4:	d81c      	bhi.n	800cd10 <USB_EPStartXfer+0xad4>
 800ccd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccda:	085b      	lsrs	r3, r3, #1
 800ccdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800cce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d004      	beq.n	800ccf6 <USB_EPStartXfer+0xaba>
 800ccec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ccf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccf8:	881b      	ldrh	r3, [r3, #0]
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	029b      	lsls	r3, r3, #10
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	4313      	orrs	r3, r2
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd0c:	801a      	strh	r2, [r3, #0]
 800cd0e:	e046      	b.n	800cd9e <USB_EPStartXfer+0xb62>
 800cd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd14:	095b      	lsrs	r3, r3, #5
 800cd16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800cd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1e:	f003 031f 	and.w	r3, r3, #31
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d104      	bne.n	800cd30 <USB_EPStartXfer+0xaf4>
 800cd26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800cd30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	029b      	lsls	r3, r3, #10
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	4313      	orrs	r3, r2
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd50:	801a      	strh	r2, [r3, #0]
 800cd52:	e024      	b.n	800cd9e <USB_EPStartXfer+0xb62>
 800cd54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	785b      	ldrb	r3, [r3, #1]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d11c      	bne.n	800cd9e <USB_EPStartXfer+0xb62>
 800cd64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	461a      	mov	r2, r3
 800cd76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd78:	4413      	add	r3, r2
 800cd7a:	673b      	str	r3, [r7, #112]	@ 0x70
 800cd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	00da      	lsls	r2, r3, #3
 800cd8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cd92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cd9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	895b      	ldrh	r3, [r3, #10]
 800cdaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6959      	ldr	r1, [r3, #20]
 800cdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cdc4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cdc8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cdcc:	6800      	ldr	r0, [r0, #0]
 800cdce:	f000 ff0a 	bl	800dbe6 <USB_WritePMA>
 800cdd2:	e0ca      	b.n	800cf6a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d177      	bne.n	800ced4 <USB_EPStartXfer+0xc98>
 800cde4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cdf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	461a      	mov	r2, r3
 800ce02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce04:	4413      	add	r3, r2
 800ce06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ce08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	00da      	lsls	r2, r3, #3
 800ce16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce18:	4413      	add	r3, r2
 800ce1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce2e:	801a      	strh	r2, [r3, #0]
 800ce30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10a      	bne.n	800ce4e <USB_EPStartXfer+0xc12>
 800ce38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce4a:	801a      	strh	r2, [r3, #0]
 800ce4c:	e073      	b.n	800cf36 <USB_EPStartXfer+0xcfa>
 800ce4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce54:	d81c      	bhi.n	800ce90 <USB_EPStartXfer+0xc54>
 800ce56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce5a:	085b      	lsrs	r3, r3, #1
 800ce5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ce60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d004      	beq.n	800ce76 <USB_EPStartXfer+0xc3a>
 800ce6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ce70:	3301      	adds	r3, #1
 800ce72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ce76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	029b      	lsls	r3, r3, #10
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	4313      	orrs	r3, r2
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce8c:	801a      	strh	r2, [r3, #0]
 800ce8e:	e052      	b.n	800cf36 <USB_EPStartXfer+0xcfa>
 800ce90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce94:	095b      	lsrs	r3, r3, #5
 800ce96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ce9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d104      	bne.n	800ceb0 <USB_EPStartXfer+0xc74>
 800cea6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ceb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	029b      	lsls	r3, r3, #10
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	4313      	orrs	r3, r2
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cecc:	b29a      	uxth	r2, r3
 800cece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ced0:	801a      	strh	r2, [r3, #0]
 800ced2:	e030      	b.n	800cf36 <USB_EPStartXfer+0xcfa>
 800ced4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ced8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	785b      	ldrb	r3, [r3, #1]
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d128      	bne.n	800cf36 <USB_EPStartXfer+0xcfa>
 800cee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	461a      	mov	r2, r3
 800cf04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf08:	4413      	add	r3, r2
 800cf0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	00da      	lsls	r2, r3, #3
 800cf1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf20:	4413      	add	r3, r2
 800cf22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cf34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cf36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	891b      	ldrh	r3, [r3, #8]
 800cf42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6959      	ldr	r1, [r3, #20]
 800cf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cf64:	6800      	ldr	r0, [r0, #0]
 800cf66:	f000 fe3e 	bl	800dbe6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cf6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf90:	817b      	strh	r3, [r7, #10]
 800cf92:	897b      	ldrh	r3, [r7, #10]
 800cf94:	f083 0310 	eor.w	r3, r3, #16
 800cf98:	817b      	strh	r3, [r7, #10]
 800cf9a:	897b      	ldrh	r3, [r7, #10]
 800cf9c:	f083 0320 	eor.w	r3, r3, #32
 800cfa0:	817b      	strh	r3, [r7, #10]
 800cfa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	441a      	add	r2, r3
 800cfbc:	897b      	ldrh	r3, [r7, #10]
 800cfbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	8013      	strh	r3, [r2, #0]
 800cfd2:	f000 bcdf 	b.w	800d994 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	7b1b      	ldrb	r3, [r3, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f040 80bc 	bne.w	800d160 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cfe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	699a      	ldr	r2, [r3, #24]
 800cff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	429a      	cmp	r2, r3
 800d002:	d917      	bls.n	800d034 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	699a      	ldr	r2, [r3, #24]
 800d020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d024:	1ad2      	subs	r2, r2, r3
 800d026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	619a      	str	r2, [r3, #24]
 800d032:	e00e      	b.n	800d052 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2200      	movs	r2, #0
 800d050:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d06e:	b29b      	uxth	r3, r3
 800d070:	461a      	mov	r2, r3
 800d072:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d076:	4413      	add	r3, r2
 800d078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	00da      	lsls	r2, r3, #3
 800d08a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d08e:	4413      	add	r3, r2
 800d090:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d094:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d098:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0aa:	801a      	strh	r2, [r3, #0]
 800d0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10d      	bne.n	800d0d0 <USB_EPStartXfer+0xe94>
 800d0b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0ca:	801a      	strh	r2, [r3, #0]
 800d0cc:	f000 bc28 	b.w	800d920 <USB_EPStartXfer+0x16e4>
 800d0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0d6:	d81f      	bhi.n	800d118 <USB_EPStartXfer+0xedc>
 800d0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0dc:	085b      	lsrs	r3, r3, #1
 800d0de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d004      	beq.n	800d0f8 <USB_EPStartXfer+0xebc>
 800d0ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d0f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0fc:	881b      	ldrh	r3, [r3, #0]
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d104:	b29b      	uxth	r3, r3
 800d106:	029b      	lsls	r3, r3, #10
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4313      	orrs	r3, r2
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d112:	801a      	strh	r2, [r3, #0]
 800d114:	f000 bc04 	b.w	800d920 <USB_EPStartXfer+0x16e4>
 800d118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d11c:	095b      	lsrs	r3, r3, #5
 800d11e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d126:	f003 031f 	and.w	r3, r3, #31
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d104      	bne.n	800d138 <USB_EPStartXfer+0xefc>
 800d12e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d132:	3b01      	subs	r3, #1
 800d134:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	b29a      	uxth	r2, r3
 800d140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d144:	b29b      	uxth	r3, r3
 800d146:	029b      	lsls	r3, r3, #10
 800d148:	b29b      	uxth	r3, r3
 800d14a:	4313      	orrs	r3, r2
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d156:	b29a      	uxth	r2, r3
 800d158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d15c:	801a      	strh	r2, [r3, #0]
 800d15e:	e3df      	b.n	800d920 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	78db      	ldrb	r3, [r3, #3]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	f040 8218 	bne.w	800d5a2 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	785b      	ldrb	r3, [r3, #1]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f040 809d 	bne.w	800d2be <USB_EPStartXfer+0x1082>
 800d184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d1ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	00da      	lsls	r2, r3, #3
 800d1bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d1ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d1dc:	801a      	strh	r2, [r3, #0]
 800d1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10c      	bne.n	800d208 <USB_EPStartXfer+0xfcc>
 800d1ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d204:	801a      	strh	r2, [r3, #0]
 800d206:	e08f      	b.n	800d328 <USB_EPStartXfer+0x10ec>
 800d208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d20c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	2b3e      	cmp	r3, #62	@ 0x3e
 800d216:	d826      	bhi.n	800d266 <USB_EPStartXfer+0x102a>
 800d218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	085b      	lsrs	r3, r3, #1
 800d226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	f003 0301 	and.w	r3, r3, #1
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d004      	beq.n	800d248 <USB_EPStartXfer+0x100c>
 800d23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d242:	3301      	adds	r3, #1
 800d244:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	b29a      	uxth	r2, r3
 800d250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d254:	b29b      	uxth	r3, r3
 800d256:	029b      	lsls	r3, r3, #10
 800d258:	b29b      	uxth	r3, r3
 800d25a:	4313      	orrs	r3, r2
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d262:	801a      	strh	r2, [r3, #0]
 800d264:	e060      	b.n	800d328 <USB_EPStartXfer+0x10ec>
 800d266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	095b      	lsrs	r3, r3, #5
 800d274:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	f003 031f 	and.w	r3, r3, #31
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d104      	bne.n	800d296 <USB_EPStartXfer+0x105a>
 800d28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d290:	3b01      	subs	r3, #1
 800d292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d29a:	881b      	ldrh	r3, [r3, #0]
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	029b      	lsls	r3, r3, #10
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d2ba:	801a      	strh	r2, [r3, #0]
 800d2bc:	e034      	b.n	800d328 <USB_EPStartXfer+0x10ec>
 800d2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	785b      	ldrb	r3, [r3, #1]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d12c      	bne.n	800d328 <USB_EPStartXfer+0x10ec>
 800d2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d2f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	00da      	lsls	r2, r3, #3
 800d306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d30a:	4413      	add	r3, r2
 800d30c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	b29a      	uxth	r2, r3
 800d322:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d326:	801a      	strh	r2, [r3, #0]
 800d328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	2b00      	cmp	r3, #0
 800d344:	f040 809d 	bne.w	800d482 <USB_EPStartXfer+0x1246>
 800d348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d364:	b29b      	uxth	r3, r3
 800d366:	461a      	mov	r2, r3
 800d368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d36c:	4413      	add	r3, r2
 800d36e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	00da      	lsls	r2, r3, #3
 800d380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d384:	4413      	add	r3, r2
 800d386:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d38a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d38e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	b29b      	uxth	r3, r3
 800d396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d3a0:	801a      	strh	r2, [r3, #0]
 800d3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10c      	bne.n	800d3cc <USB_EPStartXfer+0x1190>
 800d3b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d3c8:	801a      	strh	r2, [r3, #0]
 800d3ca:	e088      	b.n	800d4de <USB_EPStartXfer+0x12a2>
 800d3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3da:	d826      	bhi.n	800d42a <USB_EPStartXfer+0x11ee>
 800d3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	085b      	lsrs	r3, r3, #1
 800d3ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d3ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d004      	beq.n	800d40c <USB_EPStartXfer+0x11d0>
 800d402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d406:	3301      	adds	r3, #1
 800d408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	b29a      	uxth	r2, r3
 800d414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d418:	b29b      	uxth	r3, r3
 800d41a:	029b      	lsls	r3, r3, #10
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	4313      	orrs	r3, r2
 800d420:	b29a      	uxth	r2, r3
 800d422:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d426:	801a      	strh	r2, [r3, #0]
 800d428:	e059      	b.n	800d4de <USB_EPStartXfer+0x12a2>
 800d42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	095b      	lsrs	r3, r3, #5
 800d438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	f003 031f 	and.w	r3, r3, #31
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <USB_EPStartXfer+0x121e>
 800d450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d454:	3b01      	subs	r3, #1
 800d456:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d45a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	b29a      	uxth	r2, r3
 800d462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d466:	b29b      	uxth	r3, r3
 800d468:	029b      	lsls	r3, r3, #10
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	4313      	orrs	r3, r2
 800d46e:	b29b      	uxth	r3, r3
 800d470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d478:	b29a      	uxth	r2, r3
 800d47a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d47e:	801a      	strh	r2, [r3, #0]
 800d480:	e02d      	b.n	800d4de <USB_EPStartXfer+0x12a2>
 800d482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	785b      	ldrb	r3, [r3, #1]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d125      	bne.n	800d4de <USB_EPStartXfer+0x12a2>
 800d492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4a8:	4413      	add	r3, r2
 800d4aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	00da      	lsls	r2, r3, #3
 800d4bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d4ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d4dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d4de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	69db      	ldr	r3, [r3, #28]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 8218 	beq.w	800d920 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	881b      	ldrh	r3, [r3, #0]
 800d50c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d510:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d005      	beq.n	800d528 <USB_EPStartXfer+0x12ec>
 800d51c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10d      	bne.n	800d544 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d528:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d52c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d530:	2b00      	cmp	r3, #0
 800d532:	f040 81f5 	bne.w	800d920 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d536:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f040 81ee 	bne.w	800d920 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	b29b      	uxth	r3, r3
 800d562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d56a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800d56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d57c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	441a      	add	r2, r3
 800d588:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d58c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d598:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	8013      	strh	r3, [r2, #0]
 800d5a0:	e1be      	b.n	800d920 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	78db      	ldrb	r3, [r3, #3]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	f040 81b4 	bne.w	800d91c <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	699a      	ldr	r2, [r3, #24]
 800d5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d917      	bls.n	800d600 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800d5d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800d5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	699a      	ldr	r2, [r3, #24]
 800d5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5f0:	1ad2      	subs	r2, r2, r3
 800d5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	619a      	str	r2, [r3, #24]
 800d5fe:	e00e      	b.n	800d61e <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800d600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800d610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	785b      	ldrb	r3, [r3, #1]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f040 8085 	bne.w	800d73a <USB_EPStartXfer+0x14fe>
 800d630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d63e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	461a      	mov	r2, r3
 800d650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d654:	4413      	add	r3, r2
 800d656:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	00da      	lsls	r2, r3, #3
 800d668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d66c:	4413      	add	r3, r2
 800d66e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d672:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d682:	b29a      	uxth	r2, r3
 800d684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d688:	801a      	strh	r2, [r3, #0]
 800d68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10c      	bne.n	800d6ac <USB_EPStartXfer+0x1470>
 800d692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d69e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d6a8:	801a      	strh	r2, [r3, #0]
 800d6aa:	e077      	b.n	800d79c <USB_EPStartXfer+0x1560>
 800d6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6b2:	d81e      	bhi.n	800d6f2 <USB_EPStartXfer+0x14b6>
 800d6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6b8:	085b      	lsrs	r3, r3, #1
 800d6ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d004      	beq.n	800d6d4 <USB_EPStartXfer+0x1498>
 800d6ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d6d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	029b      	lsls	r3, r3, #10
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d6ee:	801a      	strh	r2, [r3, #0]
 800d6f0:	e054      	b.n	800d79c <USB_EPStartXfer+0x1560>
 800d6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f6:	095b      	lsrs	r3, r3, #5
 800d6f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d700:	f003 031f 	and.w	r3, r3, #31
 800d704:	2b00      	cmp	r3, #0
 800d706:	d104      	bne.n	800d712 <USB_EPStartXfer+0x14d6>
 800d708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d70c:	3b01      	subs	r3, #1
 800d70e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	b29a      	uxth	r2, r3
 800d71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d71e:	b29b      	uxth	r3, r3
 800d720:	029b      	lsls	r3, r3, #10
 800d722:	b29b      	uxth	r3, r3
 800d724:	4313      	orrs	r3, r2
 800d726:	b29b      	uxth	r3, r3
 800d728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d730:	b29a      	uxth	r2, r3
 800d732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d736:	801a      	strh	r2, [r3, #0]
 800d738:	e030      	b.n	800d79c <USB_EPStartXfer+0x1560>
 800d73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	785b      	ldrb	r3, [r3, #1]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d128      	bne.n	800d79c <USB_EPStartXfer+0x1560>
 800d74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d766:	b29b      	uxth	r3, r3
 800d768:	461a      	mov	r2, r3
 800d76a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d76e:	4413      	add	r3, r2
 800d770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	00da      	lsls	r2, r3, #3
 800d782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d786:	4413      	add	r3, r2
 800d788:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d78c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d794:	b29a      	uxth	r2, r3
 800d796:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d79a:	801a      	strh	r2, [r3, #0]
 800d79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	785b      	ldrb	r3, [r3, #1]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f040 8085 	bne.w	800d8c6 <USB_EPStartXfer+0x168a>
 800d7bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d7e0:	4413      	add	r3, r2
 800d7e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	00da      	lsls	r2, r3, #3
 800d7f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d7fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	b29b      	uxth	r3, r3
 800d80a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d80e:	b29a      	uxth	r2, r3
 800d810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d814:	801a      	strh	r2, [r3, #0]
 800d816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10c      	bne.n	800d838 <USB_EPStartXfer+0x15fc>
 800d81e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	b29b      	uxth	r3, r3
 800d826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d82a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d82e:	b29a      	uxth	r2, r3
 800d830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d834:	801a      	strh	r2, [r3, #0]
 800d836:	e073      	b.n	800d920 <USB_EPStartXfer+0x16e4>
 800d838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d83c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d83e:	d81e      	bhi.n	800d87e <USB_EPStartXfer+0x1642>
 800d840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d844:	085b      	lsrs	r3, r3, #1
 800d846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	2b00      	cmp	r3, #0
 800d854:	d004      	beq.n	800d860 <USB_EPStartXfer+0x1624>
 800d856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d85a:	3301      	adds	r3, #1
 800d85c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	b29a      	uxth	r2, r3
 800d868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	029b      	lsls	r3, r3, #10
 800d870:	b29b      	uxth	r3, r3
 800d872:	4313      	orrs	r3, r2
 800d874:	b29a      	uxth	r2, r3
 800d876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d87a:	801a      	strh	r2, [r3, #0]
 800d87c:	e050      	b.n	800d920 <USB_EPStartXfer+0x16e4>
 800d87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d882:	095b      	lsrs	r3, r3, #5
 800d884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d88c:	f003 031f 	and.w	r3, r3, #31
 800d890:	2b00      	cmp	r3, #0
 800d892:	d104      	bne.n	800d89e <USB_EPStartXfer+0x1662>
 800d894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d898:	3b01      	subs	r3, #1
 800d89a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d89e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d8a2:	881b      	ldrh	r3, [r3, #0]
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	029b      	lsls	r3, r3, #10
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	e02c      	b.n	800d920 <USB_EPStartXfer+0x16e4>
 800d8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	785b      	ldrb	r3, [r3, #1]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d124      	bne.n	800d920 <USB_EPStartXfer+0x16e4>
 800d8d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	00da      	lsls	r2, r3, #3
 800d900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d904:	4413      	add	r3, r2
 800d906:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d90a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d912:	b29a      	uxth	r2, r3
 800d914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d918:	801a      	strh	r2, [r3, #0]
 800d91a:	e001      	b.n	800d920 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e03a      	b.n	800d996 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d946:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d94a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d94e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d952:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d956:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d95a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d95e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	441a      	add	r2, r3
 800d97c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d990:	b29b      	uxth	r3, r3
 800d992:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d020      	beq.n	800d9f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4413      	add	r3, r2
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9c8:	81bb      	strh	r3, [r7, #12]
 800d9ca:	89bb      	ldrh	r3, [r7, #12]
 800d9cc:	f083 0310 	eor.w	r3, r3, #16
 800d9d0:	81bb      	strh	r3, [r7, #12]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	441a      	add	r2, r3
 800d9dc:	89bb      	ldrh	r3, [r7, #12]
 800d9de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	8013      	strh	r3, [r2, #0]
 800d9f2:	e01f      	b.n	800da34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da0a:	81fb      	strh	r3, [r7, #14]
 800da0c:	89fb      	ldrh	r3, [r7, #14]
 800da0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800da12:	81fb      	strh	r3, [r7, #14]
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	441a      	add	r2, r3
 800da1e:	89fb      	ldrh	r3, [r7, #14]
 800da20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da30:	b29b      	uxth	r3, r3
 800da32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800da42:	b480      	push	{r7}
 800da44:	b087      	sub	sp, #28
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	7b1b      	ldrb	r3, [r3, #12]
 800da50:	2b00      	cmp	r3, #0
 800da52:	f040 809d 	bne.w	800db90 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	785b      	ldrb	r3, [r3, #1]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d04c      	beq.n	800daf8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4413      	add	r3, r2
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	823b      	strh	r3, [r7, #16]
 800da6c:	8a3b      	ldrh	r3, [r7, #16]
 800da6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da72:	2b00      	cmp	r3, #0
 800da74:	d01b      	beq.n	800daae <USB_EPClearStall+0x6c>
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	b29b      	uxth	r3, r3
 800da84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da8c:	81fb      	strh	r3, [r7, #14]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	441a      	add	r2, r3
 800da98:	89fb      	ldrh	r3, [r7, #14]
 800da9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800daaa:	b29b      	uxth	r3, r3
 800daac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	78db      	ldrb	r3, [r3, #3]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d06c      	beq.n	800db90 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dacc:	81bb      	strh	r3, [r7, #12]
 800dace:	89bb      	ldrh	r3, [r7, #12]
 800dad0:	f083 0320 	eor.w	r3, r3, #32
 800dad4:	81bb      	strh	r3, [r7, #12]
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	441a      	add	r2, r3
 800dae0:	89bb      	ldrh	r3, [r7, #12]
 800dae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	8013      	strh	r3, [r2, #0]
 800daf6:	e04b      	b.n	800db90 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	881b      	ldrh	r3, [r3, #0]
 800db04:	82fb      	strh	r3, [r7, #22]
 800db06:	8afb      	ldrh	r3, [r7, #22]
 800db08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01b      	beq.n	800db48 <USB_EPClearStall+0x106>
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	4413      	add	r3, r2
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db26:	82bb      	strh	r3, [r7, #20]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	441a      	add	r2, r3
 800db32:	8abb      	ldrh	r3, [r7, #20]
 800db34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800db40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db44:	b29b      	uxth	r3, r3
 800db46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	4413      	add	r3, r2
 800db52:	881b      	ldrh	r3, [r3, #0]
 800db54:	b29b      	uxth	r3, r3
 800db56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db5e:	827b      	strh	r3, [r7, #18]
 800db60:	8a7b      	ldrh	r3, [r7, #18]
 800db62:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800db66:	827b      	strh	r3, [r7, #18]
 800db68:	8a7b      	ldrh	r3, [r7, #18]
 800db6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800db6e:	827b      	strh	r3, [r7, #18]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	441a      	add	r2, r3
 800db7a:	8a7b      	ldrh	r3, [r7, #18]
 800db7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	371c      	adds	r7, #28
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	460b      	mov	r3, r1
 800dba8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dbaa:	78fb      	ldrb	r3, [r7, #3]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d103      	bne.n	800dbb8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2280      	movs	r2, #128	@ 0x80
 800dbb4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b085      	sub	sp, #20
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b08b      	sub	sp, #44	@ 0x2c
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	60f8      	str	r0, [r7, #12]
 800dbee:	60b9      	str	r1, [r7, #8]
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	80fb      	strh	r3, [r7, #6]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800dbfc:	88bb      	ldrh	r3, [r7, #4]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	085b      	lsrs	r3, r3, #1
 800dc02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dc0c:	88fa      	ldrh	r2, [r7, #6]
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	4413      	add	r3, r2
 800dc12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc1c:	e01c      	b.n	800dc58 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	3301      	adds	r3, #1
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	b21b      	sxth	r3, r3
 800dc2c:	021b      	lsls	r3, r3, #8
 800dc2e:	b21a      	sxth	r2, r3
 800dc30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	b21b      	sxth	r3, r3
 800dc38:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	8a7a      	ldrh	r2, [r7, #18]
 800dc3e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	3302      	adds	r3, #2
 800dc44:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc54:	3b01      	subs	r3, #1
 800dc56:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1df      	bne.n	800dc1e <USB_WritePMA+0x38>
  }
}
 800dc5e:	bf00      	nop
 800dc60:	bf00      	nop
 800dc62:	372c      	adds	r7, #44	@ 0x2c
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b08b      	sub	sp, #44	@ 0x2c
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4611      	mov	r1, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	80fb      	strh	r3, [r7, #6]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800dc82:	88bb      	ldrh	r3, [r7, #4]
 800dc84:	085b      	lsrs	r3, r3, #1
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dc92:	88fa      	ldrh	r2, [r7, #6]
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	4413      	add	r3, r2
 800dc98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dca2:	e018      	b.n	800dcd6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	3302      	adds	r3, #2
 800dcb0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	0a1b      	lsrs	r3, r3, #8
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	3301      	adds	r3, #1
 800dcce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e3      	bne.n	800dca4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800dcdc:	88bb      	ldrh	r3, [r7, #4]
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d007      	beq.n	800dcf8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	701a      	strb	r2, [r3, #0]
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	372c      	adds	r7, #44	@ 0x2c
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	460b      	mov	r3, r1
 800dd24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d009      	beq.n	800dd48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	78fa      	ldrb	r2, [r7, #3]
 800dd3e:	4611      	mov	r1, r2
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	4798      	blx	r3
 800dd44:	4603      	mov	r3, r0
 800dd46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	78fa      	ldrb	r2, [r7, #3]
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	4798      	blx	r3
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f001 f850 	bl	800ee3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ddac:	461a      	mov	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ddba:	f003 031f 	and.w	r3, r3, #31
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d01a      	beq.n	800ddf8 <USBD_LL_SetupStage+0x72>
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d822      	bhi.n	800de0c <USBD_LL_SetupStage+0x86>
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d002      	beq.n	800ddd0 <USBD_LL_SetupStage+0x4a>
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d00a      	beq.n	800dde4 <USBD_LL_SetupStage+0x5e>
 800ddce:	e01d      	b.n	800de0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fa7d 	bl	800e2d8 <USBD_StdDevReq>
 800ddde:	4603      	mov	r3, r0
 800dde0:	73fb      	strb	r3, [r7, #15]
      break;
 800dde2:	e020      	b.n	800de26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fae5 	bl	800e3bc <USBD_StdItfReq>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	73fb      	strb	r3, [r7, #15]
      break;
 800ddf6:	e016      	b.n	800de26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddfe:	4619      	mov	r1, r3
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fb47 	bl	800e494 <USBD_StdEPReq>
 800de06:	4603      	mov	r3, r0
 800de08:	73fb      	strb	r3, [r7, #15]
      break;
 800de0a:	e00c      	b.n	800de26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800de12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800de16:	b2db      	uxtb	r3, r3
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f001 fc04 	bl	800f628 <USBD_LL_StallEP>
 800de20:	4603      	mov	r3, r0
 800de22:	73fb      	strb	r3, [r7, #15]
      break;
 800de24:	bf00      	nop
  }

  return ret;
 800de26:	7bfb      	ldrb	r3, [r7, #15]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	460b      	mov	r3, r1
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800de3e:	2300      	movs	r3, #0
 800de40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800de42:	7afb      	ldrb	r3, [r7, #11]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d16e      	bne.n	800df26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800de4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800de56:	2b03      	cmp	r3, #3
 800de58:	f040 8098 	bne.w	800df8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	689a      	ldr	r2, [r3, #8]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	429a      	cmp	r2, r3
 800de66:	d913      	bls.n	800de90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	1ad2      	subs	r2, r2, r3
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	68da      	ldr	r2, [r3, #12]
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	4293      	cmp	r3, r2
 800de80:	bf28      	it	cs
 800de82:	4613      	movcs	r3, r2
 800de84:	461a      	mov	r2, r3
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f001 f84f 	bl	800ef2c <USBD_CtlContinueRx>
 800de8e:	e07d      	b.n	800df8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800de96:	f003 031f 	and.w	r3, r3, #31
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	d014      	beq.n	800dec8 <USBD_LL_DataOutStage+0x98>
 800de9e:	2b02      	cmp	r3, #2
 800dea0:	d81d      	bhi.n	800dede <USBD_LL_DataOutStage+0xae>
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d002      	beq.n	800deac <USBD_LL_DataOutStage+0x7c>
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d003      	beq.n	800deb2 <USBD_LL_DataOutStage+0x82>
 800deaa:	e018      	b.n	800dede <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800deac:	2300      	movs	r3, #0
 800deae:	75bb      	strb	r3, [r7, #22]
            break;
 800deb0:	e018      	b.n	800dee4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	4619      	mov	r1, r3
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f000 f9d2 	bl	800e266 <USBD_CoreFindIF>
 800dec2:	4603      	mov	r3, r0
 800dec4:	75bb      	strb	r3, [r7, #22]
            break;
 800dec6:	e00d      	b.n	800dee4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	4619      	mov	r1, r3
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f000 f9d4 	bl	800e280 <USBD_CoreFindEP>
 800ded8:	4603      	mov	r3, r0
 800deda:	75bb      	strb	r3, [r7, #22]
            break;
 800dedc:	e002      	b.n	800dee4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	75bb      	strb	r3, [r7, #22]
            break;
 800dee2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dee4:	7dbb      	ldrb	r3, [r7, #22]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d119      	bne.n	800df1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b03      	cmp	r3, #3
 800def4:	d113      	bne.n	800df1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800def6:	7dba      	ldrb	r2, [r7, #22]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	32ae      	adds	r2, #174	@ 0xae
 800defc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df00:	691b      	ldr	r3, [r3, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00b      	beq.n	800df1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800df06:	7dba      	ldrb	r2, [r7, #22]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800df0e:	7dba      	ldrb	r2, [r7, #22]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	32ae      	adds	r2, #174	@ 0xae
 800df14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f001 f815 	bl	800ef4e <USBD_CtlSendStatus>
 800df24:	e032      	b.n	800df8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800df26:	7afb      	ldrb	r3, [r7, #11]
 800df28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	4619      	mov	r1, r3
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f000 f9a5 	bl	800e280 <USBD_CoreFindEP>
 800df36:	4603      	mov	r3, r0
 800df38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df3a:	7dbb      	ldrb	r3, [r7, #22]
 800df3c:	2bff      	cmp	r3, #255	@ 0xff
 800df3e:	d025      	beq.n	800df8c <USBD_LL_DataOutStage+0x15c>
 800df40:	7dbb      	ldrb	r3, [r7, #22]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d122      	bne.n	800df8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d117      	bne.n	800df82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800df52:	7dba      	ldrb	r2, [r7, #22]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	32ae      	adds	r2, #174	@ 0xae
 800df58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df5c:	699b      	ldr	r3, [r3, #24]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00f      	beq.n	800df82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800df62:	7dba      	ldrb	r2, [r7, #22]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800df6a:	7dba      	ldrb	r2, [r7, #22]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	32ae      	adds	r2, #174	@ 0xae
 800df70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	7afa      	ldrb	r2, [r7, #11]
 800df78:	4611      	mov	r1, r2
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	4798      	blx	r3
 800df7e:	4603      	mov	r3, r0
 800df80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800df88:	7dfb      	ldrb	r3, [r7, #23]
 800df8a:	e000      	b.n	800df8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3718      	adds	r7, #24
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b086      	sub	sp, #24
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	60f8      	str	r0, [r7, #12]
 800df9e:	460b      	mov	r3, r1
 800dfa0:	607a      	str	r2, [r7, #4]
 800dfa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dfa4:	7afb      	ldrb	r3, [r7, #11]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d16f      	bne.n	800e08a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3314      	adds	r3, #20
 800dfae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d15a      	bne.n	800e070 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	689a      	ldr	r2, [r3, #8]
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d914      	bls.n	800dff0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	689a      	ldr	r2, [r3, #8]
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	1ad2      	subs	r2, r2, r3
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	6879      	ldr	r1, [r7, #4]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 ff94 	bl	800ef0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f001 fbc7 	bl	800f77c <USBD_LL_PrepareReceive>
 800dfee:	e03f      	b.n	800e070 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	68da      	ldr	r2, [r3, #12]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d11c      	bne.n	800e036 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e004:	429a      	cmp	r2, r3
 800e006:	d316      	bcc.n	800e036 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e012:	429a      	cmp	r2, r3
 800e014:	d20f      	bcs.n	800e036 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e016:	2200      	movs	r2, #0
 800e018:	2100      	movs	r1, #0
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f000 ff75 	bl	800ef0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e028:	2300      	movs	r3, #0
 800e02a:	2200      	movs	r2, #0
 800e02c:	2100      	movs	r1, #0
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f001 fba4 	bl	800f77c <USBD_LL_PrepareReceive>
 800e034:	e01c      	b.n	800e070 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d10f      	bne.n	800e062 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e062:	2180      	movs	r1, #128	@ 0x80
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f001 fadf 	bl	800f628 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f000 ff82 	bl	800ef74 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d03a      	beq.n	800e0f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	f7ff fe42 	bl	800dd04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e088:	e032      	b.n	800e0f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e08a:	7afb      	ldrb	r3, [r7, #11]
 800e08c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e090:	b2db      	uxtb	r3, r3
 800e092:	4619      	mov	r1, r3
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f000 f8f3 	bl	800e280 <USBD_CoreFindEP>
 800e09a:	4603      	mov	r3, r0
 800e09c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
 800e0a0:	2bff      	cmp	r3, #255	@ 0xff
 800e0a2:	d025      	beq.n	800e0f0 <USBD_LL_DataInStage+0x15a>
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d122      	bne.n	800e0f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	d11c      	bne.n	800e0f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e0b6:	7dfa      	ldrb	r2, [r7, #23]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	32ae      	adds	r2, #174	@ 0xae
 800e0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d014      	beq.n	800e0f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e0c6:	7dfa      	ldrb	r2, [r7, #23]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e0ce:	7dfa      	ldrb	r2, [r7, #23]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	32ae      	adds	r2, #174	@ 0xae
 800e0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d8:	695b      	ldr	r3, [r3, #20]
 800e0da:	7afa      	ldrb	r2, [r7, #11]
 800e0dc:	4611      	mov	r1, r2
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	4798      	blx	r3
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e0e6:	7dbb      	ldrb	r3, [r7, #22]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e0ec:	7dbb      	ldrb	r3, [r7, #22]
 800e0ee:	e000      	b.n	800e0f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e132:	2b00      	cmp	r3, #0
 800e134:	d014      	beq.n	800e160 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00e      	beq.n	800e160 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	6852      	ldr	r2, [r2, #4]
 800e14e:	b2d2      	uxtb	r2, r2
 800e150:	4611      	mov	r1, r2
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	4798      	blx	r3
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e15c:	2303      	movs	r3, #3
 800e15e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e160:	2340      	movs	r3, #64	@ 0x40
 800e162:	2200      	movs	r2, #0
 800e164:	2100      	movs	r1, #0
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f001 fa38 	bl	800f5dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2240      	movs	r2, #64	@ 0x40
 800e178:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e17c:	2340      	movs	r3, #64	@ 0x40
 800e17e:	2200      	movs	r2, #0
 800e180:	2180      	movs	r1, #128	@ 0x80
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f001 fa2a 	bl	800f5dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2240      	movs	r2, #64	@ 0x40
 800e192:	621a      	str	r2, [r3, #32]

  return ret;
 800e194:	7bfb      	ldrb	r3, [r7, #15]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b083      	sub	sp, #12
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	78fa      	ldrb	r2, [r7, #3]
 800e1ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	d006      	beq.n	800e1e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2204      	movs	r2, #4
 800e1e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b083      	sub	sp, #12
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b04      	cmp	r3, #4
 800e208:	d106      	bne.n	800e218 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e210:	b2da      	uxtb	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b03      	cmp	r3, #3
 800e238:	d110      	bne.n	800e25c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00b      	beq.n	800e25c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e24a:	69db      	ldr	r3, [r3, #28]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d005      	beq.n	800e25c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e272:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e274:	4618      	mov	r0, r3
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e28c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e28e:	4618      	mov	r0, r3
 800e290:	370c      	adds	r7, #12
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b087      	sub	sp, #28
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e2b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	b21a      	sxth	r2, r3
 800e2c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	b21b      	sxth	r3, r3
 800e2c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e2ca:	89fb      	ldrh	r3, [r7, #14]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	371c      	adds	r7, #28
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e2ee:	2b40      	cmp	r3, #64	@ 0x40
 800e2f0:	d005      	beq.n	800e2fe <USBD_StdDevReq+0x26>
 800e2f2:	2b40      	cmp	r3, #64	@ 0x40
 800e2f4:	d857      	bhi.n	800e3a6 <USBD_StdDevReq+0xce>
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00f      	beq.n	800e31a <USBD_StdDevReq+0x42>
 800e2fa:	2b20      	cmp	r3, #32
 800e2fc:	d153      	bne.n	800e3a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	32ae      	adds	r2, #174	@ 0xae
 800e308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	4798      	blx	r3
 800e314:	4603      	mov	r3, r0
 800e316:	73fb      	strb	r3, [r7, #15]
      break;
 800e318:	e04a      	b.n	800e3b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	785b      	ldrb	r3, [r3, #1]
 800e31e:	2b09      	cmp	r3, #9
 800e320:	d83b      	bhi.n	800e39a <USBD_StdDevReq+0xc2>
 800e322:	a201      	add	r2, pc, #4	@ (adr r2, 800e328 <USBD_StdDevReq+0x50>)
 800e324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e328:	0800e37d 	.word	0x0800e37d
 800e32c:	0800e391 	.word	0x0800e391
 800e330:	0800e39b 	.word	0x0800e39b
 800e334:	0800e387 	.word	0x0800e387
 800e338:	0800e39b 	.word	0x0800e39b
 800e33c:	0800e35b 	.word	0x0800e35b
 800e340:	0800e351 	.word	0x0800e351
 800e344:	0800e39b 	.word	0x0800e39b
 800e348:	0800e373 	.word	0x0800e373
 800e34c:	0800e365 	.word	0x0800e365
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 fa3c 	bl	800e7d0 <USBD_GetDescriptor>
          break;
 800e358:	e024      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e35a:	6839      	ldr	r1, [r7, #0]
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 fbcb 	bl	800eaf8 <USBD_SetAddress>
          break;
 800e362:	e01f      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 fc0a 	bl	800eb80 <USBD_SetConfig>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73fb      	strb	r3, [r7, #15]
          break;
 800e370:	e018      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fcad 	bl	800ecd4 <USBD_GetConfig>
          break;
 800e37a:	e013      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e37c:	6839      	ldr	r1, [r7, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fcde 	bl	800ed40 <USBD_GetStatus>
          break;
 800e384:	e00e      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fd0d 	bl	800eda8 <USBD_SetFeature>
          break;
 800e38e:	e009      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e390:	6839      	ldr	r1, [r7, #0]
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 fd31 	bl	800edfa <USBD_ClrFeature>
          break;
 800e398:	e004      	b.n	800e3a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 fd88 	bl	800eeb2 <USBD_CtlError>
          break;
 800e3a2:	bf00      	nop
      }
      break;
 800e3a4:	e004      	b.n	800e3b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fd82 	bl	800eeb2 <USBD_CtlError>
      break;
 800e3ae:	bf00      	nop
  }

  return ret;
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop

0800e3bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e3d2:	2b40      	cmp	r3, #64	@ 0x40
 800e3d4:	d005      	beq.n	800e3e2 <USBD_StdItfReq+0x26>
 800e3d6:	2b40      	cmp	r3, #64	@ 0x40
 800e3d8:	d852      	bhi.n	800e480 <USBD_StdItfReq+0xc4>
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d001      	beq.n	800e3e2 <USBD_StdItfReq+0x26>
 800e3de:	2b20      	cmp	r3, #32
 800e3e0:	d14e      	bne.n	800e480 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	d840      	bhi.n	800e472 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	889b      	ldrh	r3, [r3, #4]
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d836      	bhi.n	800e468 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	889b      	ldrh	r3, [r3, #4]
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff ff2f 	bl	800e266 <USBD_CoreFindIF>
 800e408:	4603      	mov	r3, r0
 800e40a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e40c:	7bbb      	ldrb	r3, [r7, #14]
 800e40e:	2bff      	cmp	r3, #255	@ 0xff
 800e410:	d01d      	beq.n	800e44e <USBD_StdItfReq+0x92>
 800e412:	7bbb      	ldrb	r3, [r7, #14]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d11a      	bne.n	800e44e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e418:	7bba      	ldrb	r2, [r7, #14]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	32ae      	adds	r2, #174	@ 0xae
 800e41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00f      	beq.n	800e448 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e428:	7bba      	ldrb	r2, [r7, #14]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e430:	7bba      	ldrb	r2, [r7, #14]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32ae      	adds	r2, #174	@ 0xae
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
 800e442:	4603      	mov	r3, r0
 800e444:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e446:	e004      	b.n	800e452 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e448:	2303      	movs	r3, #3
 800e44a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e44c:	e001      	b.n	800e452 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e44e:	2303      	movs	r3, #3
 800e450:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	88db      	ldrh	r3, [r3, #6]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d110      	bne.n	800e47c <USBD_StdItfReq+0xc0>
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10d      	bne.n	800e47c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fd74 	bl	800ef4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e466:	e009      	b.n	800e47c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fd21 	bl	800eeb2 <USBD_CtlError>
          break;
 800e470:	e004      	b.n	800e47c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 fd1c 	bl	800eeb2 <USBD_CtlError>
          break;
 800e47a:	e000      	b.n	800e47e <USBD_StdItfReq+0xc2>
          break;
 800e47c:	bf00      	nop
      }
      break;
 800e47e:	e004      	b.n	800e48a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 fd15 	bl	800eeb2 <USBD_CtlError>
      break;
 800e488:	bf00      	nop
  }

  return ret;
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	889b      	ldrh	r3, [r3, #4]
 800e4a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e4b0:	2b40      	cmp	r3, #64	@ 0x40
 800e4b2:	d007      	beq.n	800e4c4 <USBD_StdEPReq+0x30>
 800e4b4:	2b40      	cmp	r3, #64	@ 0x40
 800e4b6:	f200 817f 	bhi.w	800e7b8 <USBD_StdEPReq+0x324>
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d02a      	beq.n	800e514 <USBD_StdEPReq+0x80>
 800e4be:	2b20      	cmp	r3, #32
 800e4c0:	f040 817a 	bne.w	800e7b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e4c4:	7bbb      	ldrb	r3, [r7, #14]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff fed9 	bl	800e280 <USBD_CoreFindEP>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4d2:	7b7b      	ldrb	r3, [r7, #13]
 800e4d4:	2bff      	cmp	r3, #255	@ 0xff
 800e4d6:	f000 8174 	beq.w	800e7c2 <USBD_StdEPReq+0x32e>
 800e4da:	7b7b      	ldrb	r3, [r7, #13]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f040 8170 	bne.w	800e7c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e4e2:	7b7a      	ldrb	r2, [r7, #13]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e4ea:	7b7a      	ldrb	r2, [r7, #13]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	32ae      	adds	r2, #174	@ 0xae
 800e4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f000 8163 	beq.w	800e7c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e4fc:	7b7a      	ldrb	r2, [r7, #13]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	32ae      	adds	r2, #174	@ 0xae
 800e502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	6839      	ldr	r1, [r7, #0]
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	4798      	blx	r3
 800e50e:	4603      	mov	r3, r0
 800e510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e512:	e156      	b.n	800e7c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d008      	beq.n	800e52e <USBD_StdEPReq+0x9a>
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	f300 8145 	bgt.w	800e7ac <USBD_StdEPReq+0x318>
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 809b 	beq.w	800e65e <USBD_StdEPReq+0x1ca>
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d03c      	beq.n	800e5a6 <USBD_StdEPReq+0x112>
 800e52c:	e13e      	b.n	800e7ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e534:	b2db      	uxtb	r3, r3
 800e536:	2b02      	cmp	r3, #2
 800e538:	d002      	beq.n	800e540 <USBD_StdEPReq+0xac>
 800e53a:	2b03      	cmp	r3, #3
 800e53c:	d016      	beq.n	800e56c <USBD_StdEPReq+0xd8>
 800e53e:	e02c      	b.n	800e59a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e540:	7bbb      	ldrb	r3, [r7, #14]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00d      	beq.n	800e562 <USBD_StdEPReq+0xce>
 800e546:	7bbb      	ldrb	r3, [r7, #14]
 800e548:	2b80      	cmp	r3, #128	@ 0x80
 800e54a:	d00a      	beq.n	800e562 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e54c:	7bbb      	ldrb	r3, [r7, #14]
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 f869 	bl	800f628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e556:	2180      	movs	r1, #128	@ 0x80
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f001 f865 	bl	800f628 <USBD_LL_StallEP>
 800e55e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e560:	e020      	b.n	800e5a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 fca4 	bl	800eeb2 <USBD_CtlError>
              break;
 800e56a:	e01b      	b.n	800e5a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	885b      	ldrh	r3, [r3, #2]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10e      	bne.n	800e592 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e574:	7bbb      	ldrb	r3, [r7, #14]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00b      	beq.n	800e592 <USBD_StdEPReq+0xfe>
 800e57a:	7bbb      	ldrb	r3, [r7, #14]
 800e57c:	2b80      	cmp	r3, #128	@ 0x80
 800e57e:	d008      	beq.n	800e592 <USBD_StdEPReq+0xfe>
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	88db      	ldrh	r3, [r3, #6]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d104      	bne.n	800e592 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f001 f84b 	bl	800f628 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fcdb 	bl	800ef4e <USBD_CtlSendStatus>

              break;
 800e598:	e004      	b.n	800e5a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fc88 	bl	800eeb2 <USBD_CtlError>
              break;
 800e5a2:	bf00      	nop
          }
          break;
 800e5a4:	e107      	b.n	800e7b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d002      	beq.n	800e5b8 <USBD_StdEPReq+0x124>
 800e5b2:	2b03      	cmp	r3, #3
 800e5b4:	d016      	beq.n	800e5e4 <USBD_StdEPReq+0x150>
 800e5b6:	e04b      	b.n	800e650 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00d      	beq.n	800e5da <USBD_StdEPReq+0x146>
 800e5be:	7bbb      	ldrb	r3, [r7, #14]
 800e5c0:	2b80      	cmp	r3, #128	@ 0x80
 800e5c2:	d00a      	beq.n	800e5da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5c4:	7bbb      	ldrb	r3, [r7, #14]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f001 f82d 	bl	800f628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5ce:	2180      	movs	r1, #128	@ 0x80
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f001 f829 	bl	800f628 <USBD_LL_StallEP>
 800e5d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5d8:	e040      	b.n	800e65c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 fc68 	bl	800eeb2 <USBD_CtlError>
              break;
 800e5e2:	e03b      	b.n	800e65c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	885b      	ldrh	r3, [r3, #2]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d136      	bne.n	800e65a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e5ec:	7bbb      	ldrb	r3, [r7, #14]
 800e5ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d004      	beq.n	800e600 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5f6:	7bbb      	ldrb	r3, [r7, #14]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f001 f833 	bl	800f666 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 fca4 	bl	800ef4e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e606:	7bbb      	ldrb	r3, [r7, #14]
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fe38 	bl	800e280 <USBD_CoreFindEP>
 800e610:	4603      	mov	r3, r0
 800e612:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e614:	7b7b      	ldrb	r3, [r7, #13]
 800e616:	2bff      	cmp	r3, #255	@ 0xff
 800e618:	d01f      	beq.n	800e65a <USBD_StdEPReq+0x1c6>
 800e61a:	7b7b      	ldrb	r3, [r7, #13]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d11c      	bne.n	800e65a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e620:	7b7a      	ldrb	r2, [r7, #13]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e628:	7b7a      	ldrb	r2, [r7, #13]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	32ae      	adds	r2, #174	@ 0xae
 800e62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d010      	beq.n	800e65a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e638:	7b7a      	ldrb	r2, [r7, #13]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	32ae      	adds	r2, #174	@ 0xae
 800e63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	4798      	blx	r3
 800e64a:	4603      	mov	r3, r0
 800e64c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e64e:	e004      	b.n	800e65a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fc2d 	bl	800eeb2 <USBD_CtlError>
              break;
 800e658:	e000      	b.n	800e65c <USBD_StdEPReq+0x1c8>
              break;
 800e65a:	bf00      	nop
          }
          break;
 800e65c:	e0ab      	b.n	800e7b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b02      	cmp	r3, #2
 800e668:	d002      	beq.n	800e670 <USBD_StdEPReq+0x1dc>
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d032      	beq.n	800e6d4 <USBD_StdEPReq+0x240>
 800e66e:	e097      	b.n	800e7a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e670:	7bbb      	ldrb	r3, [r7, #14]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d007      	beq.n	800e686 <USBD_StdEPReq+0x1f2>
 800e676:	7bbb      	ldrb	r3, [r7, #14]
 800e678:	2b80      	cmp	r3, #128	@ 0x80
 800e67a:	d004      	beq.n	800e686 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fc17 	bl	800eeb2 <USBD_CtlError>
                break;
 800e684:	e091      	b.n	800e7aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	da0b      	bge.n	800e6a6 <USBD_StdEPReq+0x212>
 800e68e:	7bbb      	ldrb	r3, [r7, #14]
 800e690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e694:	4613      	mov	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	3310      	adds	r3, #16
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	e00b      	b.n	800e6be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6a6:	7bbb      	ldrb	r3, [r7, #14]
 800e6a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	3304      	adds	r3, #4
 800e6be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fc01 	bl	800eed4 <USBD_CtlSendData>
              break;
 800e6d2:	e06a      	b.n	800e7aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	da11      	bge.n	800e700 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e6dc:	7bbb      	ldrb	r3, [r7, #14]
 800e6de:	f003 020f 	and.w	r2, r3, #15
 800e6e2:	6879      	ldr	r1, [r7, #4]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4413      	add	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	440b      	add	r3, r1
 800e6ee:	3324      	adds	r3, #36	@ 0x24
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d117      	bne.n	800e726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e6f6:	6839      	ldr	r1, [r7, #0]
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fbda 	bl	800eeb2 <USBD_CtlError>
                  break;
 800e6fe:	e054      	b.n	800e7aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e700:	7bbb      	ldrb	r3, [r7, #14]
 800e702:	f003 020f 	and.w	r2, r3, #15
 800e706:	6879      	ldr	r1, [r7, #4]
 800e708:	4613      	mov	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	440b      	add	r3, r1
 800e712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d104      	bne.n	800e726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fbc7 	bl	800eeb2 <USBD_CtlError>
                  break;
 800e724:	e041      	b.n	800e7aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da0b      	bge.n	800e746 <USBD_StdEPReq+0x2b2>
 800e72e:	7bbb      	ldrb	r3, [r7, #14]
 800e730:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e734:	4613      	mov	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	4413      	add	r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	3310      	adds	r3, #16
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	4413      	add	r3, r2
 800e742:	3304      	adds	r3, #4
 800e744:	e00b      	b.n	800e75e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	4413      	add	r3, r2
 800e75c:	3304      	adds	r3, #4
 800e75e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e760:	7bbb      	ldrb	r3, [r7, #14]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <USBD_StdEPReq+0x2d8>
 800e766:	7bbb      	ldrb	r3, [r7, #14]
 800e768:	2b80      	cmp	r3, #128	@ 0x80
 800e76a:	d103      	bne.n	800e774 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2200      	movs	r2, #0
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	e00e      	b.n	800e792 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 ff93 	bl	800f6a4 <USBD_LL_IsStallEP>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2201      	movs	r2, #1
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	e002      	b.n	800e792 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2200      	movs	r2, #0
 800e790:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2202      	movs	r2, #2
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fb9b 	bl	800eed4 <USBD_CtlSendData>
              break;
 800e79e:	e004      	b.n	800e7aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e7a0:	6839      	ldr	r1, [r7, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fb85 	bl	800eeb2 <USBD_CtlError>
              break;
 800e7a8:	bf00      	nop
          }
          break;
 800e7aa:	e004      	b.n	800e7b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 fb7f 	bl	800eeb2 <USBD_CtlError>
          break;
 800e7b4:	bf00      	nop
      }
      break;
 800e7b6:	e005      	b.n	800e7c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fb79 	bl	800eeb2 <USBD_CtlError>
      break;
 800e7c0:	e000      	b.n	800e7c4 <USBD_StdEPReq+0x330>
      break;
 800e7c2:	bf00      	nop
  }

  return ret;
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	885b      	ldrh	r3, [r3, #2]
 800e7ea:	0a1b      	lsrs	r3, r3, #8
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	2b0e      	cmp	r3, #14
 800e7f2:	f200 8152 	bhi.w	800ea9a <USBD_GetDescriptor+0x2ca>
 800e7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7fc <USBD_GetDescriptor+0x2c>)
 800e7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fc:	0800e86d 	.word	0x0800e86d
 800e800:	0800e885 	.word	0x0800e885
 800e804:	0800e8c5 	.word	0x0800e8c5
 800e808:	0800ea9b 	.word	0x0800ea9b
 800e80c:	0800ea9b 	.word	0x0800ea9b
 800e810:	0800ea3b 	.word	0x0800ea3b
 800e814:	0800ea67 	.word	0x0800ea67
 800e818:	0800ea9b 	.word	0x0800ea9b
 800e81c:	0800ea9b 	.word	0x0800ea9b
 800e820:	0800ea9b 	.word	0x0800ea9b
 800e824:	0800ea9b 	.word	0x0800ea9b
 800e828:	0800ea9b 	.word	0x0800ea9b
 800e82c:	0800ea9b 	.word	0x0800ea9b
 800e830:	0800ea9b 	.word	0x0800ea9b
 800e834:	0800e839 	.word	0x0800e839
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e83e:	69db      	ldr	r3, [r3, #28]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00b      	beq.n	800e85c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e84a:	69db      	ldr	r3, [r3, #28]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	7c12      	ldrb	r2, [r2, #16]
 800e850:	f107 0108 	add.w	r1, r7, #8
 800e854:	4610      	mov	r0, r2
 800e856:	4798      	blx	r3
 800e858:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e85a:	e126      	b.n	800eaaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fb27 	bl	800eeb2 <USBD_CtlError>
        err++;
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	3301      	adds	r3, #1
 800e868:	72fb      	strb	r3, [r7, #11]
      break;
 800e86a:	e11e      	b.n	800eaaa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	7c12      	ldrb	r2, [r2, #16]
 800e878:	f107 0108 	add.w	r1, r7, #8
 800e87c:	4610      	mov	r0, r2
 800e87e:	4798      	blx	r3
 800e880:	60f8      	str	r0, [r7, #12]
      break;
 800e882:	e112      	b.n	800eaaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7c1b      	ldrb	r3, [r3, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10d      	bne.n	800e8a8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e894:	f107 0208 	add.w	r2, r7, #8
 800e898:	4610      	mov	r0, r2
 800e89a:	4798      	blx	r3
 800e89c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e8a6:	e100      	b.n	800eaaa <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b0:	f107 0208 	add.w	r2, r7, #8
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	4798      	blx	r3
 800e8b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	2202      	movs	r2, #2
 800e8c0:	701a      	strb	r2, [r3, #0]
      break;
 800e8c2:	e0f2      	b.n	800eaaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	885b      	ldrh	r3, [r3, #2]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b05      	cmp	r3, #5
 800e8cc:	f200 80ac 	bhi.w	800ea28 <USBD_GetDescriptor+0x258>
 800e8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e8d8 <USBD_GetDescriptor+0x108>)
 800e8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d6:	bf00      	nop
 800e8d8:	0800e8f1 	.word	0x0800e8f1
 800e8dc:	0800e925 	.word	0x0800e925
 800e8e0:	0800e959 	.word	0x0800e959
 800e8e4:	0800e98d 	.word	0x0800e98d
 800e8e8:	0800e9c1 	.word	0x0800e9c1
 800e8ec:	0800e9f5 	.word	0x0800e9f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00b      	beq.n	800e914 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	7c12      	ldrb	r2, [r2, #16]
 800e908:	f107 0108 	add.w	r1, r7, #8
 800e90c:	4610      	mov	r0, r2
 800e90e:	4798      	blx	r3
 800e910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e912:	e091      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e914:	6839      	ldr	r1, [r7, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 facb 	bl	800eeb2 <USBD_CtlError>
            err++;
 800e91c:	7afb      	ldrb	r3, [r7, #11]
 800e91e:	3301      	adds	r3, #1
 800e920:	72fb      	strb	r3, [r7, #11]
          break;
 800e922:	e089      	b.n	800ea38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e92a:	689b      	ldr	r3, [r3, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00b      	beq.n	800e948 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	7c12      	ldrb	r2, [r2, #16]
 800e93c:	f107 0108 	add.w	r1, r7, #8
 800e940:	4610      	mov	r0, r2
 800e942:	4798      	blx	r3
 800e944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e946:	e077      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 fab1 	bl	800eeb2 <USBD_CtlError>
            err++;
 800e950:	7afb      	ldrb	r3, [r7, #11]
 800e952:	3301      	adds	r3, #1
 800e954:	72fb      	strb	r3, [r7, #11]
          break;
 800e956:	e06f      	b.n	800ea38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00b      	beq.n	800e97c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	7c12      	ldrb	r2, [r2, #16]
 800e970:	f107 0108 	add.w	r1, r7, #8
 800e974:	4610      	mov	r0, r2
 800e976:	4798      	blx	r3
 800e978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e97a:	e05d      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 fa97 	bl	800eeb2 <USBD_CtlError>
            err++;
 800e984:	7afb      	ldrb	r3, [r7, #11]
 800e986:	3301      	adds	r3, #1
 800e988:	72fb      	strb	r3, [r7, #11]
          break;
 800e98a:	e055      	b.n	800ea38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00b      	beq.n	800e9b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	7c12      	ldrb	r2, [r2, #16]
 800e9a4:	f107 0108 	add.w	r1, r7, #8
 800e9a8:	4610      	mov	r0, r2
 800e9aa:	4798      	blx	r3
 800e9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9ae:	e043      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9b0:	6839      	ldr	r1, [r7, #0]
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 fa7d 	bl	800eeb2 <USBD_CtlError>
            err++;
 800e9b8:	7afb      	ldrb	r3, [r7, #11]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e9be:	e03b      	b.n	800ea38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9c6:	695b      	ldr	r3, [r3, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00b      	beq.n	800e9e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9d2:	695b      	ldr	r3, [r3, #20]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	7c12      	ldrb	r2, [r2, #16]
 800e9d8:	f107 0108 	add.w	r1, r7, #8
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3
 800e9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9e2:	e029      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9e4:	6839      	ldr	r1, [r7, #0]
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fa63 	bl	800eeb2 <USBD_CtlError>
            err++;
 800e9ec:	7afb      	ldrb	r3, [r7, #11]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9f2:	e021      	b.n	800ea38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9fa:	699b      	ldr	r3, [r3, #24]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00b      	beq.n	800ea18 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea06:	699b      	ldr	r3, [r3, #24]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	7c12      	ldrb	r2, [r2, #16]
 800ea0c:	f107 0108 	add.w	r1, r7, #8
 800ea10:	4610      	mov	r0, r2
 800ea12:	4798      	blx	r3
 800ea14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea16:	e00f      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 fa49 	bl	800eeb2 <USBD_CtlError>
            err++;
 800ea20:	7afb      	ldrb	r3, [r7, #11]
 800ea22:	3301      	adds	r3, #1
 800ea24:	72fb      	strb	r3, [r7, #11]
          break;
 800ea26:	e007      	b.n	800ea38 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 fa41 	bl	800eeb2 <USBD_CtlError>
          err++;
 800ea30:	7afb      	ldrb	r3, [r7, #11]
 800ea32:	3301      	adds	r3, #1
 800ea34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ea36:	bf00      	nop
      }
      break;
 800ea38:	e037      	b.n	800eaaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	7c1b      	ldrb	r3, [r3, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d109      	bne.n	800ea56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4a:	f107 0208 	add.w	r2, r7, #8
 800ea4e:	4610      	mov	r0, r2
 800ea50:	4798      	blx	r3
 800ea52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea54:	e029      	b.n	800eaaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fa2a 	bl	800eeb2 <USBD_CtlError>
        err++;
 800ea5e:	7afb      	ldrb	r3, [r7, #11]
 800ea60:	3301      	adds	r3, #1
 800ea62:	72fb      	strb	r3, [r7, #11]
      break;
 800ea64:	e021      	b.n	800eaaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7c1b      	ldrb	r3, [r3, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10d      	bne.n	800ea8a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea76:	f107 0208 	add.w	r2, r7, #8
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	4798      	blx	r3
 800ea7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	3301      	adds	r3, #1
 800ea84:	2207      	movs	r2, #7
 800ea86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea88:	e00f      	b.n	800eaaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fa10 	bl	800eeb2 <USBD_CtlError>
        err++;
 800ea92:	7afb      	ldrb	r3, [r7, #11]
 800ea94:	3301      	adds	r3, #1
 800ea96:	72fb      	strb	r3, [r7, #11]
      break;
 800ea98:	e007      	b.n	800eaaa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 fa08 	bl	800eeb2 <USBD_CtlError>
      err++;
 800eaa2:	7afb      	ldrb	r3, [r7, #11]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	72fb      	strb	r3, [r7, #11]
      break;
 800eaa8:	bf00      	nop
  }

  if (err != 0U)
 800eaaa:	7afb      	ldrb	r3, [r7, #11]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d11e      	bne.n	800eaee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	88db      	ldrh	r3, [r3, #6]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d016      	beq.n	800eae6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800eab8:	893b      	ldrh	r3, [r7, #8]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00e      	beq.n	800eadc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	88da      	ldrh	r2, [r3, #6]
 800eac2:	893b      	ldrh	r3, [r7, #8]
 800eac4:	4293      	cmp	r3, r2
 800eac6:	bf28      	it	cs
 800eac8:	4613      	movcs	r3, r2
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eace:	893b      	ldrh	r3, [r7, #8]
 800ead0:	461a      	mov	r2, r3
 800ead2:	68f9      	ldr	r1, [r7, #12]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f9fd 	bl	800eed4 <USBD_CtlSendData>
 800eada:	e009      	b.n	800eaf0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f9e7 	bl	800eeb2 <USBD_CtlError>
 800eae4:	e004      	b.n	800eaf0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fa31 	bl	800ef4e <USBD_CtlSendStatus>
 800eaec:	e000      	b.n	800eaf0 <USBD_GetDescriptor+0x320>
    return;
 800eaee:	bf00      	nop
  }
}
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop

0800eaf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	889b      	ldrh	r3, [r3, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d131      	bne.n	800eb6e <USBD_SetAddress+0x76>
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	88db      	ldrh	r3, [r3, #6]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d12d      	bne.n	800eb6e <USBD_SetAddress+0x76>
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	885b      	ldrh	r3, [r3, #2]
 800eb16:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb18:	d829      	bhi.n	800eb6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	885b      	ldrh	r3, [r3, #2]
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d104      	bne.n	800eb3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eb32:	6839      	ldr	r1, [r7, #0]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f9bc 	bl	800eeb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb3a:	e01d      	b.n	800eb78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	7bfa      	ldrb	r2, [r7, #15]
 800eb40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
 800eb46:	4619      	mov	r1, r3
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fdd7 	bl	800f6fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f9fd 	bl	800ef4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d004      	beq.n	800eb64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2202      	movs	r2, #2
 800eb5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb62:	e009      	b.n	800eb78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb6c:	e004      	b.n	800eb78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f99e 	bl	800eeb2 <USBD_CtlError>
  }
}
 800eb76:	bf00      	nop
 800eb78:	bf00      	nop
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	885b      	ldrh	r3, [r3, #2]
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	4b4e      	ldr	r3, [pc, #312]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800eb96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb98:	4b4d      	ldr	r3, [pc, #308]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d905      	bls.n	800ebac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f985 	bl	800eeb2 <USBD_CtlError>
    return USBD_FAIL;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e08c      	b.n	800ecc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	d002      	beq.n	800ebbe <USBD_SetConfig+0x3e>
 800ebb8:	2b03      	cmp	r3, #3
 800ebba:	d029      	beq.n	800ec10 <USBD_SetConfig+0x90>
 800ebbc:	e075      	b.n	800ecaa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ebbe:	4b44      	ldr	r3, [pc, #272]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d020      	beq.n	800ec08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ebc6:	4b42      	ldr	r3, [pc, #264]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebd0:	4b3f      	ldr	r3, [pc, #252]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7ff f89f 	bl	800dd1a <USBD_SetClassConfig>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d008      	beq.n	800ebf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ebe6:	6839      	ldr	r1, [r7, #0]
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 f962 	bl	800eeb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2202      	movs	r2, #2
 800ebf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebf6:	e065      	b.n	800ecc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f9a8 	bl	800ef4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2203      	movs	r2, #3
 800ec02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ec06:	e05d      	b.n	800ecc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f9a0 	bl	800ef4e <USBD_CtlSendStatus>
      break;
 800ec0e:	e059      	b.n	800ecc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ec10:	4b2f      	ldr	r3, [pc, #188]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d112      	bne.n	800ec3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ec20:	4b2b      	ldr	r3, [pc, #172]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	461a      	mov	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec2a:	4b29      	ldr	r3, [pc, #164]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7ff f88e 	bl	800dd52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 f989 	bl	800ef4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec3c:	e042      	b.n	800ecc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ec3e:	4b24      	ldr	r3, [pc, #144]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d02a      	beq.n	800eca2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	4619      	mov	r1, r3
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff f87c 	bl	800dd52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec5a:	4b1d      	ldr	r3, [pc, #116]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec64:	4b1a      	ldr	r3, [pc, #104]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7ff f855 	bl	800dd1a <USBD_SetClassConfig>
 800ec70:	4603      	mov	r3, r0
 800ec72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec74:	7bfb      	ldrb	r3, [r7, #15]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00f      	beq.n	800ec9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ec7a:	6839      	ldr	r1, [r7, #0]
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 f918 	bl	800eeb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	4619      	mov	r1, r3
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff f861 	bl	800dd52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2202      	movs	r2, #2
 800ec94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ec98:	e014      	b.n	800ecc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 f957 	bl	800ef4e <USBD_CtlSendStatus>
      break;
 800eca0:	e010      	b.n	800ecc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f953 	bl	800ef4e <USBD_CtlSendStatus>
      break;
 800eca8:	e00c      	b.n	800ecc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 f900 	bl	800eeb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ecb2:	4b07      	ldr	r3, [pc, #28]	@ (800ecd0 <USBD_SetConfig+0x150>)
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff f84a 	bl	800dd52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	73fb      	strb	r3, [r7, #15]
      break;
 800ecc2:	bf00      	nop
  }

  return ret;
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	2000070c 	.word	0x2000070c

0800ecd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	88db      	ldrh	r3, [r3, #6]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d004      	beq.n	800ecf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f8e2 	bl	800eeb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ecee:	e023      	b.n	800ed38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	dc02      	bgt.n	800ed02 <USBD_GetConfig+0x2e>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	dc03      	bgt.n	800ed08 <USBD_GetConfig+0x34>
 800ed00:	e015      	b.n	800ed2e <USBD_GetConfig+0x5a>
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d00b      	beq.n	800ed1e <USBD_GetConfig+0x4a>
 800ed06:	e012      	b.n	800ed2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	3308      	adds	r3, #8
 800ed12:	2201      	movs	r2, #1
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 f8dc 	bl	800eed4 <USBD_CtlSendData>
        break;
 800ed1c:	e00c      	b.n	800ed38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3304      	adds	r3, #4
 800ed22:	2201      	movs	r2, #1
 800ed24:	4619      	mov	r1, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 f8d4 	bl	800eed4 <USBD_CtlSendData>
        break;
 800ed2c:	e004      	b.n	800ed38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f8be 	bl	800eeb2 <USBD_CtlError>
        break;
 800ed36:	bf00      	nop
}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	3b01      	subs	r3, #1
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d81e      	bhi.n	800ed96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	88db      	ldrh	r3, [r3, #6]
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d004      	beq.n	800ed6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed60:	6839      	ldr	r1, [r7, #0]
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 f8a5 	bl	800eeb2 <USBD_CtlError>
        break;
 800ed68:	e01a      	b.n	800eda0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d005      	beq.n	800ed86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	f043 0202 	orr.w	r2, r3, #2
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	330c      	adds	r3, #12
 800ed8a:	2202      	movs	r2, #2
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f8a0 	bl	800eed4 <USBD_CtlSendData>
      break;
 800ed94:	e004      	b.n	800eda0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 f88a 	bl	800eeb2 <USBD_CtlError>
      break;
 800ed9e:	bf00      	nop
  }
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	885b      	ldrh	r3, [r3, #2]
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d107      	bne.n	800edca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f8c3 	bl	800ef4e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800edc8:	e013      	b.n	800edf2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	885b      	ldrh	r3, [r3, #2]
 800edce:	2b02      	cmp	r3, #2
 800edd0:	d10b      	bne.n	800edea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	889b      	ldrh	r3, [r3, #4]
 800edd6:	0a1b      	lsrs	r3, r3, #8
 800edd8:	b29b      	uxth	r3, r3
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 f8b3 	bl	800ef4e <USBD_CtlSendStatus>
}
 800ede8:	e003      	b.n	800edf2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800edea:	6839      	ldr	r1, [r7, #0]
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f860 	bl	800eeb2 <USBD_CtlError>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d80b      	bhi.n	800ee2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	885b      	ldrh	r3, [r3, #2]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d10c      	bne.n	800ee34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f893 	bl	800ef4e <USBD_CtlSendStatus>
      }
      break;
 800ee28:	e004      	b.n	800ee34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 f840 	bl	800eeb2 <USBD_CtlError>
      break;
 800ee32:	e000      	b.n	800ee36 <USBD_ClrFeature+0x3c>
      break;
 800ee34:	bf00      	nop
  }
}
 800ee36:	bf00      	nop
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b084      	sub	sp, #16
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	781a      	ldrb	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3301      	adds	r3, #1
 800ee58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	781a      	ldrb	r2, [r3, #0]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f7ff fa16 	bl	800e29a <SWAPBYTE>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	461a      	mov	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff fa09 	bl	800e29a <SWAPBYTE>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3301      	adds	r3, #1
 800ee94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f7ff f9fc 	bl	800e29a <SWAPBYTE>
 800eea2:	4603      	mov	r3, r0
 800eea4:	461a      	mov	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	80da      	strh	r2, [r3, #6]
}
 800eeaa:	bf00      	nop
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b082      	sub	sp, #8
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eebc:	2180      	movs	r1, #128	@ 0x80
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fbb2 	bl	800f628 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eec4:	2100      	movs	r1, #0
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fbae 	bl	800f628 <USBD_LL_StallEP>
}
 800eecc:	bf00      	nop
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2202      	movs	r2, #2
 800eee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	2100      	movs	r1, #0
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 fc1d 	bl	800f73a <USBD_LL_Transmit>

  return USBD_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b084      	sub	sp, #16
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	60f8      	str	r0, [r7, #12]
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f000 fc0c 	bl	800f73a <USBD_LL_Transmit>

  return USBD_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3710      	adds	r7, #16
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f000 fc1c 	bl	800f77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b082      	sub	sp, #8
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2204      	movs	r2, #4
 800ef5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef5e:	2300      	movs	r3, #0
 800ef60:	2200      	movs	r2, #0
 800ef62:	2100      	movs	r1, #0
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fbe8 	bl	800f73a <USBD_LL_Transmit>

  return USBD_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2205      	movs	r2, #5
 800ef80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef84:	2300      	movs	r3, #0
 800ef86:	2200      	movs	r2, #0
 800ef88:	2100      	movs	r1, #0
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 fbf6 	bl	800f77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800efa0:	4b05      	ldr	r3, [pc, #20]	@ (800efb8 <SysTick_Handler+0x1c>)
 800efa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800efa4:	f000 f986 	bl	800f2b4 <xTaskGetSchedulerState>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d001      	beq.n	800efb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800efae:	f000 f9b7 	bl	800f320 <xPortSysTickHandler>
  }
}
 800efb2:	bf00      	nop
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	e000e010 	.word	0xe000e010

0800efbc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	689a      	ldr	r2, [r3, #8]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	1c5a      	adds	r2, r3, #1
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	601a      	str	r2, [r3, #0]
}
 800eff8:	bf00      	nop
 800effa:	3714      	adds	r7, #20
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	6892      	ldr	r2, [r2, #8]
 800f01a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	6852      	ldr	r2, [r2, #4]
 800f024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d103      	bne.n	800f038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	689a      	ldr	r2, [r3, #8]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	1e5a      	subs	r2, r3, #1
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f05e:	2300      	movs	r3, #0
 800f060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f062:	4b4b      	ldr	r3, [pc, #300]	@ (800f190 <xTaskIncrementTick+0x138>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	f040 8088 	bne.w	800f17c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f06c:	4b49      	ldr	r3, [pc, #292]	@ (800f194 <xTaskIncrementTick+0x13c>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3301      	adds	r3, #1
 800f072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f074:	4a47      	ldr	r2, [pc, #284]	@ (800f194 <xTaskIncrementTick+0x13c>)
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d119      	bne.n	800f0b4 <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f080:	4b45      	ldr	r3, [pc, #276]	@ (800f198 <xTaskIncrementTick+0x140>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d003      	beq.n	800f092 <xTaskIncrementTick+0x3a>
 800f08a:	f000 f995 	bl	800f3b8 <ulSetInterruptMask>
 800f08e:	bf00      	nop
 800f090:	e7fd      	b.n	800f08e <xTaskIncrementTick+0x36>
 800f092:	4b41      	ldr	r3, [pc, #260]	@ (800f198 <xTaskIncrementTick+0x140>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	60fb      	str	r3, [r7, #12]
 800f098:	4b40      	ldr	r3, [pc, #256]	@ (800f19c <xTaskIncrementTick+0x144>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a3e      	ldr	r2, [pc, #248]	@ (800f198 <xTaskIncrementTick+0x140>)
 800f09e:	6013      	str	r3, [r2, #0]
 800f0a0:	4a3e      	ldr	r2, [pc, #248]	@ (800f19c <xTaskIncrementTick+0x144>)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6013      	str	r3, [r2, #0]
 800f0a6:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a0 <xTaskIncrementTick+0x148>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	4a3c      	ldr	r2, [pc, #240]	@ (800f1a0 <xTaskIncrementTick+0x148>)
 800f0ae:	6013      	str	r3, [r2, #0]
 800f0b0:	f000 f8e0 	bl	800f274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0b4:	4b3b      	ldr	r3, [pc, #236]	@ (800f1a4 <xTaskIncrementTick+0x14c>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d349      	bcc.n	800f152 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0be:	4b36      	ldr	r3, [pc, #216]	@ (800f198 <xTaskIncrementTick+0x140>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d104      	bne.n	800f0d2 <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0c8:	4b36      	ldr	r3, [pc, #216]	@ (800f1a4 <xTaskIncrementTick+0x14c>)
 800f0ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0ce:	601a      	str	r2, [r3, #0]
					break;
 800f0d0:	e03f      	b.n	800f152 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0d2:	4b31      	ldr	r3, [pc, #196]	@ (800f198 <xTaskIncrementTick+0x140>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d203      	bcs.n	800f0f2 <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0ea:	4a2e      	ldr	r2, [pc, #184]	@ (800f1a4 <xTaskIncrementTick+0x14c>)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0f0:	e02f      	b.n	800f152 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff ff84 	bl	800f004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f100:	2b00      	cmp	r3, #0
 800f102:	d004      	beq.n	800f10e <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	3318      	adds	r3, #24
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff ff7b 	bl	800f004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f112:	4b25      	ldr	r3, [pc, #148]	@ (800f1a8 <xTaskIncrementTick+0x150>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	429a      	cmp	r2, r3
 800f118:	d903      	bls.n	800f122 <xTaskIncrementTick+0xca>
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f11e:	4a22      	ldr	r2, [pc, #136]	@ (800f1a8 <xTaskIncrementTick+0x150>)
 800f120:	6013      	str	r3, [r2, #0]
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f126:	4613      	mov	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4a1f      	ldr	r2, [pc, #124]	@ (800f1ac <xTaskIncrementTick+0x154>)
 800f130:	441a      	add	r2, r3
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	3304      	adds	r3, #4
 800f136:	4619      	mov	r1, r3
 800f138:	4610      	mov	r0, r2
 800f13a:	f7ff ff3f 	bl	800efbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f142:	4b1b      	ldr	r3, [pc, #108]	@ (800f1b0 <xTaskIncrementTick+0x158>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f148:	429a      	cmp	r2, r3
 800f14a:	d3b8      	bcc.n	800f0be <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 800f14c:	2301      	movs	r3, #1
 800f14e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f150:	e7b5      	b.n	800f0be <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f152:	4b17      	ldr	r3, [pc, #92]	@ (800f1b0 <xTaskIncrementTick+0x158>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f158:	4914      	ldr	r1, [pc, #80]	@ (800f1ac <xTaskIncrementTick+0x154>)
 800f15a:	4613      	mov	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4413      	add	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	440b      	add	r3, r1
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d901      	bls.n	800f16e <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 800f16a:	2301      	movs	r3, #1
 800f16c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f16e:	4b11      	ldr	r3, [pc, #68]	@ (800f1b4 <xTaskIncrementTick+0x15c>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d007      	beq.n	800f186 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800f176:	2301      	movs	r3, #1
 800f178:	617b      	str	r3, [r7, #20]
 800f17a:	e004      	b.n	800f186 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f17c:	4b0e      	ldr	r3, [pc, #56]	@ (800f1b8 <xTaskIncrementTick+0x160>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	3301      	adds	r3, #1
 800f182:	4a0d      	ldr	r2, [pc, #52]	@ (800f1b8 <xTaskIncrementTick+0x160>)
 800f184:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f186:	697b      	ldr	r3, [r7, #20]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20000b98 	.word	0x20000b98
 800f194:	20000b7c 	.word	0x20000b7c
 800f198:	20000b74 	.word	0x20000b74
 800f19c:	20000b78 	.word	0x20000b78
 800f1a0:	20000b90 	.word	0x20000b90
 800f1a4:	20000b94 	.word	0x20000b94
 800f1a8:	20000b80 	.word	0x20000b80
 800f1ac:	20000714 	.word	0x20000714
 800f1b0:	20000710 	.word	0x20000710
 800f1b4:	20000b8c 	.word	0x20000b8c
 800f1b8:	20000b88 	.word	0x20000b88

0800f1bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f1c2:	4b26      	ldr	r3, [pc, #152]	@ (800f25c <vTaskSwitchContext+0xa0>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d003      	beq.n	800f1d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f1ca:	4b25      	ldr	r3, [pc, #148]	@ (800f260 <vTaskSwitchContext+0xa4>)
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f1d0:	e03f      	b.n	800f252 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f1d2:	4b23      	ldr	r3, [pc, #140]	@ (800f260 <vTaskSwitchContext+0xa4>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1d8:	4b22      	ldr	r3, [pc, #136]	@ (800f264 <vTaskSwitchContext+0xa8>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	607b      	str	r3, [r7, #4]
 800f1de:	e009      	b.n	800f1f4 <vTaskSwitchContext+0x38>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d103      	bne.n	800f1ee <vTaskSwitchContext+0x32>
 800f1e6:	f000 f8e7 	bl	800f3b8 <ulSetInterruptMask>
 800f1ea:	bf00      	nop
 800f1ec:	e7fd      	b.n	800f1ea <vTaskSwitchContext+0x2e>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	607b      	str	r3, [r7, #4]
 800f1f4:	491c      	ldr	r1, [pc, #112]	@ (800f268 <vTaskSwitchContext+0xac>)
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	440b      	add	r3, r1
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0eb      	beq.n	800f1e0 <vTaskSwitchContext+0x24>
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	4613      	mov	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4413      	add	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4a15      	ldr	r2, [pc, #84]	@ (800f268 <vTaskSwitchContext+0xac>)
 800f214:	4413      	add	r3, r2
 800f216:	603b      	str	r3, [r7, #0]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	605a      	str	r2, [r3, #4]
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	3308      	adds	r3, #8
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d104      	bne.n	800f238 <vTaskSwitchContext+0x7c>
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	685a      	ldr	r2, [r3, #4]
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	605a      	str	r2, [r3, #4]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	4a0b      	ldr	r2, [pc, #44]	@ (800f26c <vTaskSwitchContext+0xb0>)
 800f240:	6013      	str	r3, [r2, #0]
 800f242:	4a08      	ldr	r2, [pc, #32]	@ (800f264 <vTaskSwitchContext+0xa8>)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f248:	4b08      	ldr	r3, [pc, #32]	@ (800f26c <vTaskSwitchContext+0xb0>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3354      	adds	r3, #84	@ 0x54
 800f24e:	4a08      	ldr	r2, [pc, #32]	@ (800f270 <vTaskSwitchContext+0xb4>)
 800f250:	6013      	str	r3, [r2, #0]
}
 800f252:	bf00      	nop
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20000b98 	.word	0x20000b98
 800f260:	20000b8c 	.word	0x20000b8c
 800f264:	20000b80 	.word	0x20000b80
 800f268:	20000714 	.word	0x20000714
 800f26c:	20000710 	.word	0x20000710
 800f270:	2000002c 	.word	0x2000002c

0800f274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f27a:	4b0c      	ldr	r3, [pc, #48]	@ (800f2ac <prvResetNextTaskUnblockTime+0x38>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d104      	bne.n	800f28e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f284:	4b0a      	ldr	r3, [pc, #40]	@ (800f2b0 <prvResetNextTaskUnblockTime+0x3c>)
 800f286:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f28a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f28c:	e008      	b.n	800f2a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f28e:	4b07      	ldr	r3, [pc, #28]	@ (800f2ac <prvResetNextTaskUnblockTime+0x38>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	4a04      	ldr	r2, [pc, #16]	@ (800f2b0 <prvResetNextTaskUnblockTime+0x3c>)
 800f29e:	6013      	str	r3, [r2, #0]
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20000b74 	.word	0x20000b74
 800f2b0:	20000b94 	.word	0x20000b94

0800f2b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e8 <xTaskGetSchedulerState+0x34>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d102      	bne.n	800f2c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	607b      	str	r3, [r7, #4]
 800f2c6:	e008      	b.n	800f2da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2c8:	4b08      	ldr	r3, [pc, #32]	@ (800f2ec <xTaskGetSchedulerState+0x38>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d102      	bne.n	800f2d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	607b      	str	r3, [r7, #4]
 800f2d4:	e001      	b.n	800f2da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f2da:	687b      	ldr	r3, [r7, #4]
	}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	20000b84 	.word	0x20000b84
 800f2ec:	20000b98 	.word	0x20000b98

0800f2f0 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 800f2f0:	b480      	push	{r7}
 800f2f2:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800f2f4:	4b08      	ldr	r3, [pc, #32]	@ (800f318 <prvSetupFPU+0x28>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a07      	ldr	r2, [pc, #28]	@ (800f318 <prvSetupFPU+0x28>)
 800f2fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f2fe:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800f300:	4b06      	ldr	r3, [pc, #24]	@ (800f31c <prvSetupFPU+0x2c>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4a05      	ldr	r2, [pc, #20]	@ (800f31c <prvSetupFPU+0x2c>)
 800f306:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f30a:	6013      	str	r3, [r2, #0]
	}
 800f30c:	bf00      	nop
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	e000ed88 	.word	0xe000ed88
 800f31c:	e000ef34 	.word	0xe000ef34

0800f320 <xPortSysTickHandler>:
	}
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f326:	f000 f847 	bl	800f3b8 <ulSetInterruptMask>
 800f32a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f32c:	f7ff fe94 	bl	800f058 <xTaskIncrementTick>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f336:	4b05      	ldr	r3, [pc, #20]	@ (800f34c <xPortSysTickHandler+0x2c>)
 800f338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f33c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 f847 	bl	800f3d2 <vClearInterruptMask>
}
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	e000ed04 	.word	0xe000ed04

0800f350 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	699b      	ldr	r3, [r3, #24]
 800f35c:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	3b02      	subs	r3, #2
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800f366:	7afb      	ldrb	r3, [r7, #11]
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d104      	bne.n	800f376 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 800f36c:	f7ff ffc0 	bl	800f2f0 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800f370:	f000 f80e 	bl	800f390 <vRestoreContextOfFirstTask>
		}
		break;
 800f374:	e003      	b.n	800f37e <vPortSVCHandler_C+0x2e>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800f376:	f000 f81f 	bl	800f3b8 <ulSetInterruptMask>
 800f37a:	bf00      	nop
 800f37c:	e7fd      	b.n	800f37a <vPortSVCHandler_C+0x2a>
		}
	}
}
 800f37e:	bf00      	nop
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
	...

0800f390 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800f390:	4a07      	ldr	r2, [pc, #28]	@ (800f3b0 <pxCurrentTCBConst2>)
 800f392:	6811      	ldr	r1, [r2, #0]
 800f394:	6808      	ldr	r0, [r1, #0]
 800f396:	c806      	ldmia	r0!, {r1, r2}
 800f398:	f381 880b 	msr	PSPLIM, r1
 800f39c:	2102      	movs	r1, #2
 800f39e:	f381 8814 	msr	CONTROL, r1
 800f3a2:	3020      	adds	r0, #32
 800f3a4:	f380 8809 	msr	PSP, r0
 800f3a8:	f3bf 8f6f 	isb	sy
 800f3ac:	4710      	bx	r2
 800f3ae:	bf00      	nop

0800f3b0 <pxCurrentTCBConst2>:
 800f3b0:	20000710 	.word	0x20000710
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop

0800f3b8 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800f3b8:	f3ef 8011 	mrs	r0, BASEPRI
 800f3bc:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 800f3c0:	f381 8811 	msr	BASEPRI, r1
 800f3c4:	f3bf 8f4f 	dsb	sy
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3ce:	bf00      	nop
 800f3d0:	4618      	mov	r0, r3

0800f3d2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800f3d2:	f380 8811 	msr	BASEPRI, r0
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	f3bf 8f6f 	isb	sy
 800f3de:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800f3e0:	bf00      	nop
	...

0800f3f0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800f3f0:	f3ef 8009 	mrs	r0, PSP
 800f3f4:	f01e 0f10 	tst.w	lr, #16
 800f3f8:	bf08      	it	eq
 800f3fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3fe:	f3ef 820b 	mrs	r2, PSPLIM
 800f402:	4673      	mov	r3, lr
 800f404:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800f408:	4a11      	ldr	r2, [pc, #68]	@ (800f450 <pxCurrentTCBConst>)
 800f40a:	6811      	ldr	r1, [r2, #0]
 800f40c:	6008      	str	r0, [r1, #0]
 800f40e:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 800f412:	f380 8811 	msr	BASEPRI, r0
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f7ff fecd 	bl	800f1bc <vTaskSwitchContext>
 800f422:	f04f 0000 	mov.w	r0, #0
 800f426:	f380 8811 	msr	BASEPRI, r0
 800f42a:	4a09      	ldr	r2, [pc, #36]	@ (800f450 <pxCurrentTCBConst>)
 800f42c:	6811      	ldr	r1, [r2, #0]
 800f42e:	6808      	ldr	r0, [r1, #0]
 800f430:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800f434:	f013 0f10 	tst.w	r3, #16
 800f438:	bf08      	it	eq
 800f43a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f43e:	f382 880b 	msr	PSPLIM, r2
 800f442:	f380 8809 	msr	PSP, r0
 800f446:	4718      	bx	r3
 800f448:	f3af 8000 	nop.w
 800f44c:	f3af 8000 	nop.w

0800f450 <pxCurrentTCBConst>:
 800f450:	20000710 	.word	0x20000710
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800f454:	bf00      	nop
 800f456:	bf00      	nop
	...

0800f460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800f460:	f01e 0f04 	tst.w	lr, #4
 800f464:	bf0c      	ite	eq
 800f466:	f3ef 8008 	mrseq	r0, MSP
 800f46a:	f3ef 8009 	mrsne	r0, PSP
 800f46e:	4904      	ldr	r1, [pc, #16]	@ (800f480 <svchandler_address_const>)
 800f470:	4708      	bx	r1
 800f472:	bf00      	nop
 800f474:	f3af 8000 	nop.w
 800f478:	f3af 8000 	nop.w
 800f47c:	f3af 8000 	nop.w

0800f480 <svchandler_address_const>:
 800f480:	0800f351 	.word	0x0800f351
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800f484:	bf00      	nop
 800f486:	bf00      	nop

0800f488 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f49c:	4619      	mov	r1, r3
 800f49e:	4610      	mov	r0, r2
 800f4a0:	f7fe fc71 	bl	800dd86 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f4a4:	bf00      	nop
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f4be:	78fa      	ldrb	r2, [r7, #3]
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	440b      	add	r3, r1
 800f4cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	78fb      	ldrb	r3, [r7, #3]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	f7fe fcab 	bl	800de30 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f4f4:	78fa      	ldrb	r2, [r7, #3]
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4413      	add	r3, r2
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	440b      	add	r3, r1
 800f502:	3324      	adds	r3, #36	@ 0x24
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	78fb      	ldrb	r3, [r7, #3]
 800f508:	4619      	mov	r1, r3
 800f50a:	f7fe fd44 	bl	800df96 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f524:	4618      	mov	r0, r3
 800f526:	f7fe fe7e 	bl	800e226 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f52a:	bf00      	nop
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b084      	sub	sp, #16
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f53a:	2301      	movs	r3, #1
 800f53c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	795b      	ldrb	r3, [r3, #5]
 800f542:	2b02      	cmp	r3, #2
 800f544:	d001      	beq.n	800f54a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f546:	f7f4 f93d 	bl	80037c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f550:	7bfa      	ldrb	r2, [r7, #15]
 800f552:	4611      	mov	r1, r2
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe fe22 	bl	800e19e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f560:	4618      	mov	r0, r3
 800f562:	f7fe fdca 	bl	800e0fa <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f566:	bf00      	nop
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
	...

0800f570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fe fe1d 	bl	800e1be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7a5b      	ldrb	r3, [r3, #9]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d005      	beq.n	800f598 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f58c:	4b04      	ldr	r3, [pc, #16]	@ (800f5a0 <HAL_PCD_SuspendCallback+0x30>)
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	4a03      	ldr	r2, [pc, #12]	@ (800f5a0 <HAL_PCD_SuspendCallback+0x30>)
 800f592:	f043 0306 	orr.w	r3, r3, #6
 800f596:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f598:	bf00      	nop
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	e000ed00 	.word	0xe000ed00

0800f5a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	7a5b      	ldrb	r3, [r3, #9]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d007      	beq.n	800f5c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5b4:	4b08      	ldr	r3, [pc, #32]	@ (800f5d8 <HAL_PCD_ResumeCallback+0x34>)
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	4a07      	ldr	r2, [pc, #28]	@ (800f5d8 <HAL_PCD_ResumeCallback+0x34>)
 800f5ba:	f023 0306 	bic.w	r3, r3, #6
 800f5be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f5c0:	f000 f934 	bl	800f82c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fe fe13 	bl	800e1f6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	e000ed00 	.word	0xe000ed00

0800f5dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	4611      	mov	r1, r2
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	70fb      	strb	r3, [r7, #3]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	70bb      	strb	r3, [r7, #2]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f604:	78bb      	ldrb	r3, [r7, #2]
 800f606:	883a      	ldrh	r2, [r7, #0]
 800f608:	78f9      	ldrb	r1, [r7, #3]
 800f60a:	f7f7 face 	bl	8006baa <HAL_PCD_EP_Open>
 800f60e:	4603      	mov	r3, r0
 800f610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f612:	7bfb      	ldrb	r3, [r7, #15]
 800f614:	4618      	mov	r0, r3
 800f616:	f000 f90f 	bl	800f838 <USBD_Get_USB_Status>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f634:	2300      	movs	r3, #0
 800f636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f642:	78fa      	ldrb	r2, [r7, #3]
 800f644:	4611      	mov	r1, r2
 800f646:	4618      	mov	r0, r3
 800f648:	f7f7 fb74 	bl	8006d34 <HAL_PCD_EP_SetStall>
 800f64c:	4603      	mov	r3, r0
 800f64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	4618      	mov	r0, r3
 800f654:	f000 f8f0 	bl	800f838 <USBD_Get_USB_Status>
 800f658:	4603      	mov	r3, r0
 800f65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b084      	sub	sp, #16
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	460b      	mov	r3, r1
 800f670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f672:	2300      	movs	r3, #0
 800f674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f676:	2300      	movs	r3, #0
 800f678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f680:	78fa      	ldrb	r2, [r7, #3]
 800f682:	4611      	mov	r1, r2
 800f684:	4618      	mov	r0, r3
 800f686:	f7f7 fba7 	bl	8006dd8 <HAL_PCD_EP_ClrStall>
 800f68a:	4603      	mov	r3, r0
 800f68c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	4618      	mov	r0, r3
 800f692:	f000 f8d1 	bl	800f838 <USBD_Get_USB_Status>
 800f696:	4603      	mov	r3, r0
 800f698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	da0b      	bge.n	800f6d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f6c0:	78fb      	ldrb	r3, [r7, #3]
 800f6c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6c6:	68f9      	ldr	r1, [r7, #12]
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	4413      	add	r3, r2
 800f6ce:	00db      	lsls	r3, r3, #3
 800f6d0:	440b      	add	r3, r1
 800f6d2:	3312      	adds	r3, #18
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	e00b      	b.n	800f6f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6de:	68f9      	ldr	r1, [r7, #12]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	440b      	add	r3, r1
 800f6ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f6ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3714      	adds	r7, #20
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	460b      	mov	r3, r1
 800f706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f708:	2300      	movs	r3, #0
 800f70a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f70c:	2300      	movs	r3, #0
 800f70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f716:	78fa      	ldrb	r2, [r7, #3]
 800f718:	4611      	mov	r1, r2
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7f7 fa21 	bl	8006b62 <HAL_PCD_SetAddress>
 800f720:	4603      	mov	r3, r0
 800f722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f724:	7bfb      	ldrb	r3, [r7, #15]
 800f726:	4618      	mov	r0, r3
 800f728:	f000 f886 	bl	800f838 <USBD_Get_USB_Status>
 800f72c:	4603      	mov	r3, r0
 800f72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f730:	7bbb      	ldrb	r3, [r7, #14]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b086      	sub	sp, #24
 800f73e:	af00      	add	r7, sp, #0
 800f740:	60f8      	str	r0, [r7, #12]
 800f742:	607a      	str	r2, [r7, #4]
 800f744:	603b      	str	r3, [r7, #0]
 800f746:	460b      	mov	r3, r1
 800f748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f74a:	2300      	movs	r3, #0
 800f74c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f758:	7af9      	ldrb	r1, [r7, #11]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	f7f7 fab2 	bl	8006cc6 <HAL_PCD_EP_Transmit>
 800f762:	4603      	mov	r3, r0
 800f764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f766:	7dfb      	ldrb	r3, [r7, #23]
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 f865 	bl	800f838 <USBD_Get_USB_Status>
 800f76e:	4603      	mov	r3, r0
 800f770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f772:	7dbb      	ldrb	r3, [r7, #22]
}
 800f774:	4618      	mov	r0, r3
 800f776:	3718      	adds	r7, #24
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b086      	sub	sp, #24
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	607a      	str	r2, [r7, #4]
 800f786:	603b      	str	r3, [r7, #0]
 800f788:	460b      	mov	r3, r1
 800f78a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f79a:	7af9      	ldrb	r1, [r7, #11]
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	f7f7 fa60 	bl	8006c64 <HAL_PCD_EP_Receive>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7a8:	7dfb      	ldrb	r3, [r7, #23]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 f844 	bl	800f838 <USBD_Get_USB_Status>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3718      	adds	r7, #24
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
	...

0800f7c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d002      	beq.n	800f7d8 <HAL_PCDEx_LPM_Callback+0x18>
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d013      	beq.n	800f7fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f7d6:	e023      	b.n	800f820 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	7a5b      	ldrb	r3, [r3, #9]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d007      	beq.n	800f7f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f7e0:	f000 f824 	bl	800f82c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7e4:	4b10      	ldr	r3, [pc, #64]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x68>)
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	4a0f      	ldr	r2, [pc, #60]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x68>)
 800f7ea:	f023 0306 	bic.w	r3, r3, #6
 800f7ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe fcfd 	bl	800e1f6 <USBD_LL_Resume>
    break;
 800f7fc:	e010      	b.n	800f820 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe fcda 	bl	800e1be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	7a5b      	ldrb	r3, [r3, #9]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d005      	beq.n	800f81e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f812:	4b05      	ldr	r3, [pc, #20]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x68>)
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	4a04      	ldr	r2, [pc, #16]	@ (800f828 <HAL_PCDEx_LPM_Callback+0x68>)
 800f818:	f043 0306 	orr.w	r3, r3, #6
 800f81c:	6113      	str	r3, [r2, #16]
    break;
 800f81e:	bf00      	nop
}
 800f820:	bf00      	nop
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	e000ed00 	.word	0xe000ed00

0800f82c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f830:	f7f3 ff0e 	bl	8003650 <SystemClock_Config>
}
 800f834:	bf00      	nop
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f842:	2300      	movs	r3, #0
 800f844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	2b03      	cmp	r3, #3
 800f84a:	d817      	bhi.n	800f87c <USBD_Get_USB_Status+0x44>
 800f84c:	a201      	add	r2, pc, #4	@ (adr r2, 800f854 <USBD_Get_USB_Status+0x1c>)
 800f84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f852:	bf00      	nop
 800f854:	0800f865 	.word	0x0800f865
 800f858:	0800f86b 	.word	0x0800f86b
 800f85c:	0800f871 	.word	0x0800f871
 800f860:	0800f877 	.word	0x0800f877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f864:	2300      	movs	r3, #0
 800f866:	73fb      	strb	r3, [r7, #15]
    break;
 800f868:	e00b      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f86a:	2303      	movs	r3, #3
 800f86c:	73fb      	strb	r3, [r7, #15]
    break;
 800f86e:	e008      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f870:	2301      	movs	r3, #1
 800f872:	73fb      	strb	r3, [r7, #15]
    break;
 800f874:	e005      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f876:	2303      	movs	r3, #3
 800f878:	73fb      	strb	r3, [r7, #15]
    break;
 800f87a:	e002      	b.n	800f882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f87c:	2303      	movs	r3, #3
 800f87e:	73fb      	strb	r3, [r7, #15]
    break;
 800f880:	bf00      	nop
  }
  return usb_status;
 800f882:	7bfb      	ldrb	r3, [r7, #15]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3714      	adds	r7, #20
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <malloc>:
 800f890:	4b02      	ldr	r3, [pc, #8]	@ (800f89c <malloc+0xc>)
 800f892:	4601      	mov	r1, r0
 800f894:	6818      	ldr	r0, [r3, #0]
 800f896:	f000 b82d 	b.w	800f8f4 <_malloc_r>
 800f89a:	bf00      	nop
 800f89c:	2000002c 	.word	0x2000002c

0800f8a0 <free>:
 800f8a0:	4b02      	ldr	r3, [pc, #8]	@ (800f8ac <free+0xc>)
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	6818      	ldr	r0, [r3, #0]
 800f8a6:	f000 b8f5 	b.w	800fa94 <_free_r>
 800f8aa:	bf00      	nop
 800f8ac:	2000002c 	.word	0x2000002c

0800f8b0 <sbrk_aligned>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	4e0f      	ldr	r6, [pc, #60]	@ (800f8f0 <sbrk_aligned+0x40>)
 800f8b4:	460c      	mov	r4, r1
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	6831      	ldr	r1, [r6, #0]
 800f8ba:	b911      	cbnz	r1, 800f8c2 <sbrk_aligned+0x12>
 800f8bc:	f000 f8ae 	bl	800fa1c <_sbrk_r>
 800f8c0:	6030      	str	r0, [r6, #0]
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f000 f8a9 	bl	800fa1c <_sbrk_r>
 800f8ca:	1c43      	adds	r3, r0, #1
 800f8cc:	d103      	bne.n	800f8d6 <sbrk_aligned+0x26>
 800f8ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	bd70      	pop	{r4, r5, r6, pc}
 800f8d6:	1cc4      	adds	r4, r0, #3
 800f8d8:	f024 0403 	bic.w	r4, r4, #3
 800f8dc:	42a0      	cmp	r0, r4
 800f8de:	d0f8      	beq.n	800f8d2 <sbrk_aligned+0x22>
 800f8e0:	1a21      	subs	r1, r4, r0
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	f000 f89a 	bl	800fa1c <_sbrk_r>
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d1f2      	bne.n	800f8d2 <sbrk_aligned+0x22>
 800f8ec:	e7ef      	b.n	800f8ce <sbrk_aligned+0x1e>
 800f8ee:	bf00      	nop
 800f8f0:	20000e78 	.word	0x20000e78

0800f8f4 <_malloc_r>:
 800f8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f8:	1ccd      	adds	r5, r1, #3
 800f8fa:	4606      	mov	r6, r0
 800f8fc:	f025 0503 	bic.w	r5, r5, #3
 800f900:	3508      	adds	r5, #8
 800f902:	2d0c      	cmp	r5, #12
 800f904:	bf38      	it	cc
 800f906:	250c      	movcc	r5, #12
 800f908:	2d00      	cmp	r5, #0
 800f90a:	db01      	blt.n	800f910 <_malloc_r+0x1c>
 800f90c:	42a9      	cmp	r1, r5
 800f90e:	d904      	bls.n	800f91a <_malloc_r+0x26>
 800f910:	230c      	movs	r3, #12
 800f912:	6033      	str	r3, [r6, #0]
 800f914:	2000      	movs	r0, #0
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9f0 <_malloc_r+0xfc>
 800f91e:	f000 f869 	bl	800f9f4 <__malloc_lock>
 800f922:	f8d8 3000 	ldr.w	r3, [r8]
 800f926:	461c      	mov	r4, r3
 800f928:	bb44      	cbnz	r4, 800f97c <_malloc_r+0x88>
 800f92a:	4629      	mov	r1, r5
 800f92c:	4630      	mov	r0, r6
 800f92e:	f7ff ffbf 	bl	800f8b0 <sbrk_aligned>
 800f932:	1c43      	adds	r3, r0, #1
 800f934:	4604      	mov	r4, r0
 800f936:	d158      	bne.n	800f9ea <_malloc_r+0xf6>
 800f938:	f8d8 4000 	ldr.w	r4, [r8]
 800f93c:	4627      	mov	r7, r4
 800f93e:	2f00      	cmp	r7, #0
 800f940:	d143      	bne.n	800f9ca <_malloc_r+0xd6>
 800f942:	2c00      	cmp	r4, #0
 800f944:	d04b      	beq.n	800f9de <_malloc_r+0xea>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	4639      	mov	r1, r7
 800f94a:	4630      	mov	r0, r6
 800f94c:	eb04 0903 	add.w	r9, r4, r3
 800f950:	f000 f864 	bl	800fa1c <_sbrk_r>
 800f954:	4581      	cmp	r9, r0
 800f956:	d142      	bne.n	800f9de <_malloc_r+0xea>
 800f958:	6821      	ldr	r1, [r4, #0]
 800f95a:	4630      	mov	r0, r6
 800f95c:	1a6d      	subs	r5, r5, r1
 800f95e:	4629      	mov	r1, r5
 800f960:	f7ff ffa6 	bl	800f8b0 <sbrk_aligned>
 800f964:	3001      	adds	r0, #1
 800f966:	d03a      	beq.n	800f9de <_malloc_r+0xea>
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	442b      	add	r3, r5
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	f8d8 3000 	ldr.w	r3, [r8]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	bb62      	cbnz	r2, 800f9d0 <_malloc_r+0xdc>
 800f976:	f8c8 7000 	str.w	r7, [r8]
 800f97a:	e00f      	b.n	800f99c <_malloc_r+0xa8>
 800f97c:	6822      	ldr	r2, [r4, #0]
 800f97e:	1b52      	subs	r2, r2, r5
 800f980:	d420      	bmi.n	800f9c4 <_malloc_r+0xd0>
 800f982:	2a0b      	cmp	r2, #11
 800f984:	d917      	bls.n	800f9b6 <_malloc_r+0xc2>
 800f986:	1961      	adds	r1, r4, r5
 800f988:	42a3      	cmp	r3, r4
 800f98a:	6025      	str	r5, [r4, #0]
 800f98c:	bf18      	it	ne
 800f98e:	6059      	strne	r1, [r3, #4]
 800f990:	6863      	ldr	r3, [r4, #4]
 800f992:	bf08      	it	eq
 800f994:	f8c8 1000 	streq.w	r1, [r8]
 800f998:	5162      	str	r2, [r4, r5]
 800f99a:	604b      	str	r3, [r1, #4]
 800f99c:	4630      	mov	r0, r6
 800f99e:	f000 f82f 	bl	800fa00 <__malloc_unlock>
 800f9a2:	f104 000b 	add.w	r0, r4, #11
 800f9a6:	1d23      	adds	r3, r4, #4
 800f9a8:	f020 0007 	bic.w	r0, r0, #7
 800f9ac:	1ac2      	subs	r2, r0, r3
 800f9ae:	bf1c      	itt	ne
 800f9b0:	1a1b      	subne	r3, r3, r0
 800f9b2:	50a3      	strne	r3, [r4, r2]
 800f9b4:	e7af      	b.n	800f916 <_malloc_r+0x22>
 800f9b6:	6862      	ldr	r2, [r4, #4]
 800f9b8:	42a3      	cmp	r3, r4
 800f9ba:	bf0c      	ite	eq
 800f9bc:	f8c8 2000 	streq.w	r2, [r8]
 800f9c0:	605a      	strne	r2, [r3, #4]
 800f9c2:	e7eb      	b.n	800f99c <_malloc_r+0xa8>
 800f9c4:	4623      	mov	r3, r4
 800f9c6:	6864      	ldr	r4, [r4, #4]
 800f9c8:	e7ae      	b.n	800f928 <_malloc_r+0x34>
 800f9ca:	463c      	mov	r4, r7
 800f9cc:	687f      	ldr	r7, [r7, #4]
 800f9ce:	e7b6      	b.n	800f93e <_malloc_r+0x4a>
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	42a3      	cmp	r3, r4
 800f9d6:	d1fb      	bne.n	800f9d0 <_malloc_r+0xdc>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	6053      	str	r3, [r2, #4]
 800f9dc:	e7de      	b.n	800f99c <_malloc_r+0xa8>
 800f9de:	230c      	movs	r3, #12
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	6033      	str	r3, [r6, #0]
 800f9e4:	f000 f80c 	bl	800fa00 <__malloc_unlock>
 800f9e8:	e794      	b.n	800f914 <_malloc_r+0x20>
 800f9ea:	6005      	str	r5, [r0, #0]
 800f9ec:	e7d6      	b.n	800f99c <_malloc_r+0xa8>
 800f9ee:	bf00      	nop
 800f9f0:	20000e7c 	.word	0x20000e7c

0800f9f4 <__malloc_lock>:
 800f9f4:	4801      	ldr	r0, [pc, #4]	@ (800f9fc <__malloc_lock+0x8>)
 800f9f6:	f000 b84b 	b.w	800fa90 <__retarget_lock_acquire_recursive>
 800f9fa:	bf00      	nop
 800f9fc:	20000fbc 	.word	0x20000fbc

0800fa00 <__malloc_unlock>:
 800fa00:	4801      	ldr	r0, [pc, #4]	@ (800fa08 <__malloc_unlock+0x8>)
 800fa02:	f000 b846 	b.w	800fa92 <__retarget_lock_release_recursive>
 800fa06:	bf00      	nop
 800fa08:	20000fbc 	.word	0x20000fbc

0800fa0c <memset>:
 800fa0c:	4402      	add	r2, r0
 800fa0e:	4603      	mov	r3, r0
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d100      	bne.n	800fa16 <memset+0xa>
 800fa14:	4770      	bx	lr
 800fa16:	f803 1b01 	strb.w	r1, [r3], #1
 800fa1a:	e7f9      	b.n	800fa10 <memset+0x4>

0800fa1c <_sbrk_r>:
 800fa1c:	b538      	push	{r3, r4, r5, lr}
 800fa1e:	2300      	movs	r3, #0
 800fa20:	4d05      	ldr	r5, [pc, #20]	@ (800fa38 <_sbrk_r+0x1c>)
 800fa22:	4604      	mov	r4, r0
 800fa24:	4608      	mov	r0, r1
 800fa26:	602b      	str	r3, [r5, #0]
 800fa28:	f7f4 f90e 	bl	8003c48 <_sbrk>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d102      	bne.n	800fa36 <_sbrk_r+0x1a>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	b103      	cbz	r3, 800fa36 <_sbrk_r+0x1a>
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	bd38      	pop	{r3, r4, r5, pc}
 800fa38:	20000fb8 	.word	0x20000fb8

0800fa3c <__errno>:
 800fa3c:	4b01      	ldr	r3, [pc, #4]	@ (800fa44 <__errno+0x8>)
 800fa3e:	6818      	ldr	r0, [r3, #0]
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	2000002c 	.word	0x2000002c

0800fa48 <__libc_init_array>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	4d0d      	ldr	r5, [pc, #52]	@ (800fa80 <__libc_init_array+0x38>)
 800fa4c:	2600      	movs	r6, #0
 800fa4e:	4c0d      	ldr	r4, [pc, #52]	@ (800fa84 <__libc_init_array+0x3c>)
 800fa50:	1b64      	subs	r4, r4, r5
 800fa52:	10a4      	asrs	r4, r4, #2
 800fa54:	42a6      	cmp	r6, r4
 800fa56:	d109      	bne.n	800fa6c <__libc_init_array+0x24>
 800fa58:	4d0b      	ldr	r5, [pc, #44]	@ (800fa88 <__libc_init_array+0x40>)
 800fa5a:	2600      	movs	r6, #0
 800fa5c:	4c0b      	ldr	r4, [pc, #44]	@ (800fa8c <__libc_init_array+0x44>)
 800fa5e:	f000 fa5d 	bl	800ff1c <_init>
 800fa62:	1b64      	subs	r4, r4, r5
 800fa64:	10a4      	asrs	r4, r4, #2
 800fa66:	42a6      	cmp	r6, r4
 800fa68:	d105      	bne.n	800fa76 <__libc_init_array+0x2e>
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
 800fa6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa70:	3601      	adds	r6, #1
 800fa72:	4798      	blx	r3
 800fa74:	e7ee      	b.n	800fa54 <__libc_init_array+0xc>
 800fa76:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa7a:	3601      	adds	r6, #1
 800fa7c:	4798      	blx	r3
 800fa7e:	e7f2      	b.n	800fa66 <__libc_init_array+0x1e>
 800fa80:	08010190 	.word	0x08010190
 800fa84:	08010190 	.word	0x08010190
 800fa88:	08010190 	.word	0x08010190
 800fa8c:	08010194 	.word	0x08010194

0800fa90 <__retarget_lock_acquire_recursive>:
 800fa90:	4770      	bx	lr

0800fa92 <__retarget_lock_release_recursive>:
 800fa92:	4770      	bx	lr

0800fa94 <_free_r>:
 800fa94:	b538      	push	{r3, r4, r5, lr}
 800fa96:	4605      	mov	r5, r0
 800fa98:	2900      	cmp	r1, #0
 800fa9a:	d041      	beq.n	800fb20 <_free_r+0x8c>
 800fa9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa0:	1f0c      	subs	r4, r1, #4
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	bfb8      	it	lt
 800faa6:	18e4      	addlt	r4, r4, r3
 800faa8:	f7ff ffa4 	bl	800f9f4 <__malloc_lock>
 800faac:	4a1d      	ldr	r2, [pc, #116]	@ (800fb24 <_free_r+0x90>)
 800faae:	6813      	ldr	r3, [r2, #0]
 800fab0:	b933      	cbnz	r3, 800fac0 <_free_r+0x2c>
 800fab2:	6063      	str	r3, [r4, #4]
 800fab4:	6014      	str	r4, [r2, #0]
 800fab6:	4628      	mov	r0, r5
 800fab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fabc:	f7ff bfa0 	b.w	800fa00 <__malloc_unlock>
 800fac0:	42a3      	cmp	r3, r4
 800fac2:	d908      	bls.n	800fad6 <_free_r+0x42>
 800fac4:	6820      	ldr	r0, [r4, #0]
 800fac6:	1821      	adds	r1, r4, r0
 800fac8:	428b      	cmp	r3, r1
 800faca:	bf01      	itttt	eq
 800facc:	6819      	ldreq	r1, [r3, #0]
 800face:	685b      	ldreq	r3, [r3, #4]
 800fad0:	1809      	addeq	r1, r1, r0
 800fad2:	6021      	streq	r1, [r4, #0]
 800fad4:	e7ed      	b.n	800fab2 <_free_r+0x1e>
 800fad6:	461a      	mov	r2, r3
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	b10b      	cbz	r3, 800fae0 <_free_r+0x4c>
 800fadc:	42a3      	cmp	r3, r4
 800fade:	d9fa      	bls.n	800fad6 <_free_r+0x42>
 800fae0:	6811      	ldr	r1, [r2, #0]
 800fae2:	1850      	adds	r0, r2, r1
 800fae4:	42a0      	cmp	r0, r4
 800fae6:	d10b      	bne.n	800fb00 <_free_r+0x6c>
 800fae8:	6820      	ldr	r0, [r4, #0]
 800faea:	4401      	add	r1, r0
 800faec:	1850      	adds	r0, r2, r1
 800faee:	6011      	str	r1, [r2, #0]
 800faf0:	4283      	cmp	r3, r0
 800faf2:	d1e0      	bne.n	800fab6 <_free_r+0x22>
 800faf4:	6818      	ldr	r0, [r3, #0]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	4408      	add	r0, r1
 800fafa:	6053      	str	r3, [r2, #4]
 800fafc:	6010      	str	r0, [r2, #0]
 800fafe:	e7da      	b.n	800fab6 <_free_r+0x22>
 800fb00:	d902      	bls.n	800fb08 <_free_r+0x74>
 800fb02:	230c      	movs	r3, #12
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	e7d6      	b.n	800fab6 <_free_r+0x22>
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	1821      	adds	r1, r4, r0
 800fb0c:	428b      	cmp	r3, r1
 800fb0e:	bf02      	ittt	eq
 800fb10:	6819      	ldreq	r1, [r3, #0]
 800fb12:	685b      	ldreq	r3, [r3, #4]
 800fb14:	1809      	addeq	r1, r1, r0
 800fb16:	6063      	str	r3, [r4, #4]
 800fb18:	bf08      	it	eq
 800fb1a:	6021      	streq	r1, [r4, #0]
 800fb1c:	6054      	str	r4, [r2, #4]
 800fb1e:	e7ca      	b.n	800fab6 <_free_r+0x22>
 800fb20:	bd38      	pop	{r3, r4, r5, pc}
 800fb22:	bf00      	nop
 800fb24:	20000e7c 	.word	0x20000e7c

0800fb28 <log>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	ec55 4b10 	vmov	r4, r5, d0
 800fb2e:	ed2d 8b02 	vpush	{d8}
 800fb32:	f000 f841 	bl	800fbb8 <__ieee754_log>
 800fb36:	4622      	mov	r2, r4
 800fb38:	462b      	mov	r3, r5
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	eeb0 8a40 	vmov.f32	s16, s0
 800fb42:	eef0 8a60 	vmov.f32	s17, s1
 800fb46:	f7f0 ffd1 	bl	8000aec <__aeabi_dcmpun>
 800fb4a:	b998      	cbnz	r0, 800fb74 <log+0x4c>
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	2300      	movs	r3, #0
 800fb50:	4620      	mov	r0, r4
 800fb52:	4629      	mov	r1, r5
 800fb54:	f7f0 ffc0 	bl	8000ad8 <__aeabi_dcmpgt>
 800fb58:	b960      	cbnz	r0, 800fb74 <log+0x4c>
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4629      	mov	r1, r5
 800fb62:	f7f0 ff91 	bl	8000a88 <__aeabi_dcmpeq>
 800fb66:	b160      	cbz	r0, 800fb82 <log+0x5a>
 800fb68:	f7ff ff68 	bl	800fa3c <__errno>
 800fb6c:	2322      	movs	r3, #34	@ 0x22
 800fb6e:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fb98 <log+0x70>
 800fb72:	6003      	str	r3, [r0, #0]
 800fb74:	eeb0 0a48 	vmov.f32	s0, s16
 800fb78:	eef0 0a68 	vmov.f32	s1, s17
 800fb7c:	ecbd 8b02 	vpop	{d8}
 800fb80:	bd38      	pop	{r3, r4, r5, pc}
 800fb82:	f7ff ff5b 	bl	800fa3c <__errno>
 800fb86:	2321      	movs	r3, #33	@ 0x21
 800fb88:	ecbd 8b02 	vpop	{d8}
 800fb8c:	6003      	str	r3, [r0, #0]
 800fb8e:	4804      	ldr	r0, [pc, #16]	@ (800fba0 <log+0x78>)
 800fb90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb94:	f000 b808 	b.w	800fba8 <nan>
 800fb98:	00000000 	.word	0x00000000
 800fb9c:	fff00000 	.word	0xfff00000
 800fba0:	0801018c 	.word	0x0801018c
 800fba4:	00000000 	.word	0x00000000

0800fba8 <nan>:
 800fba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fbb0 <nan+0x8>
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	7ff80000 	.word	0x7ff80000

0800fbb8 <__ieee754_log>:
 800fbb8:	ec51 0b10 	vmov	r0, r1, d0
 800fbbc:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	b087      	sub	sp, #28
 800fbc8:	da26      	bge.n	800fc18 <__ieee754_log+0x60>
 800fbca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fbce:	4602      	mov	r2, r0
 800fbd0:	4303      	orrs	r3, r0
 800fbd2:	d10a      	bne.n	800fbea <__ieee754_log+0x32>
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	2000      	movs	r0, #0
 800fbda:	49cb      	ldr	r1, [pc, #812]	@ (800ff08 <__ieee754_log+0x350>)
 800fbdc:	f7f0 fe16 	bl	800080c <__aeabi_ddiv>
 800fbe0:	ec41 0b10 	vmov	d0, r0, r1
 800fbe4:	b007      	add	sp, #28
 800fbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbea:	2900      	cmp	r1, #0
 800fbec:	da05      	bge.n	800fbfa <__ieee754_log+0x42>
 800fbee:	460b      	mov	r3, r1
 800fbf0:	f7f0 fb2a 	bl	8000248 <__aeabi_dsub>
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e7f0      	b.n	800fbdc <__ieee754_log+0x24>
 800fbfa:	4bc4      	ldr	r3, [pc, #784]	@ (800ff0c <__ieee754_log+0x354>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f7f0 fcdb 	bl	80005b8 <__aeabi_dmul>
 800fc02:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800fc06:	460d      	mov	r5, r1
 800fc08:	4ac1      	ldr	r2, [pc, #772]	@ (800ff10 <__ieee754_log+0x358>)
 800fc0a:	4295      	cmp	r5, r2
 800fc0c:	dd06      	ble.n	800fc1c <__ieee754_log+0x64>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	460b      	mov	r3, r1
 800fc12:	f7f0 fb1b 	bl	800024c <__adddf3>
 800fc16:	e7e3      	b.n	800fbe0 <__ieee754_log+0x28>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e7f5      	b.n	800fc08 <__ieee754_log+0x50>
 800fc1c:	152c      	asrs	r4, r5, #20
 800fc1e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fc22:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800fc26:	441c      	add	r4, r3
 800fc28:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800fc2c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800fc30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fc34:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800fc38:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800fc3c:	4bb5      	ldr	r3, [pc, #724]	@ (800ff14 <__ieee754_log+0x35c>)
 800fc3e:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800fc42:	ea42 0105 	orr.w	r1, r2, r5
 800fc46:	2200      	movs	r2, #0
 800fc48:	f7f0 fafe 	bl	8000248 <__aeabi_dsub>
 800fc4c:	1cab      	adds	r3, r5, #2
 800fc4e:	4682      	mov	sl, r0
 800fc50:	468b      	mov	fp, r1
 800fc52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc56:	2200      	movs	r2, #0
 800fc58:	2b02      	cmp	r3, #2
 800fc5a:	dc53      	bgt.n	800fd04 <__ieee754_log+0x14c>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	f7f0 ff13 	bl	8000a88 <__aeabi_dcmpeq>
 800fc62:	b1d0      	cbz	r0, 800fc9a <__ieee754_log+0xe2>
 800fc64:	2c00      	cmp	r4, #0
 800fc66:	f000 8120 	beq.w	800feaa <__ieee754_log+0x2f2>
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f7f0 fc3a 	bl	80004e4 <__aeabi_i2d>
 800fc70:	4606      	mov	r6, r0
 800fc72:	460f      	mov	r7, r1
 800fc74:	a38e      	add	r3, pc, #568	@ (adr r3, 800feb0 <__ieee754_log+0x2f8>)
 800fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7a:	f7f0 fc9d 	bl	80005b8 <__aeabi_dmul>
 800fc7e:	4604      	mov	r4, r0
 800fc80:	460d      	mov	r5, r1
 800fc82:	4630      	mov	r0, r6
 800fc84:	4639      	mov	r1, r7
 800fc86:	a38c      	add	r3, pc, #560	@ (adr r3, 800feb8 <__ieee754_log+0x300>)
 800fc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8c:	f7f0 fc94 	bl	80005b8 <__aeabi_dmul>
 800fc90:	4602      	mov	r2, r0
 800fc92:	460b      	mov	r3, r1
 800fc94:	4620      	mov	r0, r4
 800fc96:	4629      	mov	r1, r5
 800fc98:	e7bb      	b.n	800fc12 <__ieee754_log+0x5a>
 800fc9a:	a389      	add	r3, pc, #548	@ (adr r3, 800fec0 <__ieee754_log+0x308>)
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	4650      	mov	r0, sl
 800fca2:	4659      	mov	r1, fp
 800fca4:	f7f0 fc88 	bl	80005b8 <__aeabi_dmul>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	460b      	mov	r3, r1
 800fcac:	2000      	movs	r0, #0
 800fcae:	499a      	ldr	r1, [pc, #616]	@ (800ff18 <__ieee754_log+0x360>)
 800fcb0:	f7f0 faca 	bl	8000248 <__aeabi_dsub>
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	460f      	mov	r7, r1
 800fcb8:	4652      	mov	r2, sl
 800fcba:	465b      	mov	r3, fp
 800fcbc:	4650      	mov	r0, sl
 800fcbe:	4659      	mov	r1, fp
 800fcc0:	f7f0 fc7a 	bl	80005b8 <__aeabi_dmul>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	4630      	mov	r0, r6
 800fcca:	4639      	mov	r1, r7
 800fccc:	f7f0 fc74 	bl	80005b8 <__aeabi_dmul>
 800fcd0:	4606      	mov	r6, r0
 800fcd2:	460f      	mov	r7, r1
 800fcd4:	b914      	cbnz	r4, 800fcdc <__ieee754_log+0x124>
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	463b      	mov	r3, r7
 800fcda:	e0a0      	b.n	800fe1e <__ieee754_log+0x266>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f7f0 fc01 	bl	80004e4 <__aeabi_i2d>
 800fce2:	4680      	mov	r8, r0
 800fce4:	4689      	mov	r9, r1
 800fce6:	a372      	add	r3, pc, #456	@ (adr r3, 800feb0 <__ieee754_log+0x2f8>)
 800fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcec:	f7f0 fc64 	bl	80005b8 <__aeabi_dmul>
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	460d      	mov	r5, r1
 800fcf4:	4640      	mov	r0, r8
 800fcf6:	4649      	mov	r1, r9
 800fcf8:	a36f      	add	r3, pc, #444	@ (adr r3, 800feb8 <__ieee754_log+0x300>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fc5b 	bl	80005b8 <__aeabi_dmul>
 800fd02:	e0a5      	b.n	800fe50 <__ieee754_log+0x298>
 800fd04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fd08:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800fd0c:	f7f0 fa9e 	bl	800024c <__adddf3>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	4650      	mov	r0, sl
 800fd16:	4659      	mov	r1, fp
 800fd18:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800fd1c:	f7f0 fd76 	bl	800080c <__aeabi_ddiv>
 800fd20:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800fd24:	3551      	adds	r5, #81	@ 0x51
 800fd26:	e9cd 0100 	strd	r0, r1, [sp]
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	4335      	orrs	r5, r6
 800fd2e:	f7f0 fbd9 	bl	80004e4 <__aeabi_i2d>
 800fd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	f7f0 fc3b 	bl	80005b8 <__aeabi_dmul>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd4a:	f7f0 fc35 	bl	80005b8 <__aeabi_dmul>
 800fd4e:	4680      	mov	r8, r0
 800fd50:	4689      	mov	r9, r1
 800fd52:	a35d      	add	r3, pc, #372	@ (adr r3, 800fec8 <__ieee754_log+0x310>)
 800fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd58:	f7f0 fc2e 	bl	80005b8 <__aeabi_dmul>
 800fd5c:	a35c      	add	r3, pc, #368	@ (adr r3, 800fed0 <__ieee754_log+0x318>)
 800fd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd62:	f7f0 fa73 	bl	800024c <__adddf3>
 800fd66:	4642      	mov	r2, r8
 800fd68:	464b      	mov	r3, r9
 800fd6a:	f7f0 fc25 	bl	80005b8 <__aeabi_dmul>
 800fd6e:	a35a      	add	r3, pc, #360	@ (adr r3, 800fed8 <__ieee754_log+0x320>)
 800fd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd74:	f7f0 fa6a 	bl	800024c <__adddf3>
 800fd78:	4642      	mov	r2, r8
 800fd7a:	464b      	mov	r3, r9
 800fd7c:	f7f0 fc1c 	bl	80005b8 <__aeabi_dmul>
 800fd80:	a357      	add	r3, pc, #348	@ (adr r3, 800fee0 <__ieee754_log+0x328>)
 800fd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd86:	f7f0 fa61 	bl	800024c <__adddf3>
 800fd8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd8e:	f7f0 fc13 	bl	80005b8 <__aeabi_dmul>
 800fd92:	a355      	add	r3, pc, #340	@ (adr r3, 800fee8 <__ieee754_log+0x330>)
 800fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	4649      	mov	r1, r9
 800fda0:	f7f0 fc0a 	bl	80005b8 <__aeabi_dmul>
 800fda4:	a352      	add	r3, pc, #328	@ (adr r3, 800fef0 <__ieee754_log+0x338>)
 800fda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdaa:	f7f0 fa4f 	bl	800024c <__adddf3>
 800fdae:	4642      	mov	r2, r8
 800fdb0:	464b      	mov	r3, r9
 800fdb2:	f7f0 fc01 	bl	80005b8 <__aeabi_dmul>
 800fdb6:	a350      	add	r3, pc, #320	@ (adr r3, 800fef8 <__ieee754_log+0x340>)
 800fdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbc:	f7f0 fa46 	bl	800024c <__adddf3>
 800fdc0:	4642      	mov	r2, r8
 800fdc2:	464b      	mov	r3, r9
 800fdc4:	f7f0 fbf8 	bl	80005b8 <__aeabi_dmul>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	460b      	mov	r3, r1
 800fdcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdd0:	f7f0 fa3c 	bl	800024c <__adddf3>
 800fdd4:	2d00      	cmp	r5, #0
 800fdd6:	4680      	mov	r8, r0
 800fdd8:	4689      	mov	r9, r1
 800fdda:	dd48      	ble.n	800fe6e <__ieee754_log+0x2b6>
 800fddc:	2200      	movs	r2, #0
 800fdde:	4b4e      	ldr	r3, [pc, #312]	@ (800ff18 <__ieee754_log+0x360>)
 800fde0:	4650      	mov	r0, sl
 800fde2:	4659      	mov	r1, fp
 800fde4:	f7f0 fbe8 	bl	80005b8 <__aeabi_dmul>
 800fde8:	4652      	mov	r2, sl
 800fdea:	465b      	mov	r3, fp
 800fdec:	f7f0 fbe4 	bl	80005b8 <__aeabi_dmul>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	460f      	mov	r7, r1
 800fdf8:	4640      	mov	r0, r8
 800fdfa:	4649      	mov	r1, r9
 800fdfc:	f7f0 fa26 	bl	800024c <__adddf3>
 800fe00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe04:	f7f0 fbd8 	bl	80005b8 <__aeabi_dmul>
 800fe08:	4680      	mov	r8, r0
 800fe0a:	4689      	mov	r9, r1
 800fe0c:	b964      	cbnz	r4, 800fe28 <__ieee754_log+0x270>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	460b      	mov	r3, r1
 800fe12:	4630      	mov	r0, r6
 800fe14:	4639      	mov	r1, r7
 800fe16:	f7f0 fa17 	bl	8000248 <__aeabi_dsub>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	4650      	mov	r0, sl
 800fe20:	4659      	mov	r1, fp
 800fe22:	f7f0 fa11 	bl	8000248 <__aeabi_dsub>
 800fe26:	e6db      	b.n	800fbe0 <__ieee754_log+0x28>
 800fe28:	a321      	add	r3, pc, #132	@ (adr r3, 800feb0 <__ieee754_log+0x2f8>)
 800fe2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe32:	f7f0 fbc1 	bl	80005b8 <__aeabi_dmul>
 800fe36:	4604      	mov	r4, r0
 800fe38:	460d      	mov	r5, r1
 800fe3a:	a31f      	add	r3, pc, #124	@ (adr r3, 800feb8 <__ieee754_log+0x300>)
 800fe3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe44:	f7f0 fbb8 	bl	80005b8 <__aeabi_dmul>
 800fe48:	4642      	mov	r2, r8
 800fe4a:	464b      	mov	r3, r9
 800fe4c:	f7f0 f9fe 	bl	800024c <__adddf3>
 800fe50:	4602      	mov	r2, r0
 800fe52:	460b      	mov	r3, r1
 800fe54:	4630      	mov	r0, r6
 800fe56:	4639      	mov	r1, r7
 800fe58:	f7f0 f9f6 	bl	8000248 <__aeabi_dsub>
 800fe5c:	4652      	mov	r2, sl
 800fe5e:	465b      	mov	r3, fp
 800fe60:	f7f0 f9f2 	bl	8000248 <__aeabi_dsub>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	e7d9      	b.n	800fe22 <__ieee754_log+0x26a>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	460b      	mov	r3, r1
 800fe72:	4650      	mov	r0, sl
 800fe74:	4659      	mov	r1, fp
 800fe76:	f7f0 f9e7 	bl	8000248 <__aeabi_dsub>
 800fe7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe7e:	f7f0 fb9b 	bl	80005b8 <__aeabi_dmul>
 800fe82:	4606      	mov	r6, r0
 800fe84:	460f      	mov	r7, r1
 800fe86:	2c00      	cmp	r4, #0
 800fe88:	f43f af25 	beq.w	800fcd6 <__ieee754_log+0x11e>
 800fe8c:	a308      	add	r3, pc, #32	@ (adr r3, 800feb0 <__ieee754_log+0x2f8>)
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe96:	f7f0 fb8f 	bl	80005b8 <__aeabi_dmul>
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	a306      	add	r3, pc, #24	@ (adr r3, 800feb8 <__ieee754_log+0x300>)
 800fea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fea8:	e729      	b.n	800fcfe <__ieee754_log+0x146>
 800feaa:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800ff00 <__ieee754_log+0x348>
 800feae:	e699      	b.n	800fbe4 <__ieee754_log+0x2c>
 800feb0:	fee00000 	.word	0xfee00000
 800feb4:	3fe62e42 	.word	0x3fe62e42
 800feb8:	35793c76 	.word	0x35793c76
 800febc:	3dea39ef 	.word	0x3dea39ef
 800fec0:	55555555 	.word	0x55555555
 800fec4:	3fd55555 	.word	0x3fd55555
 800fec8:	df3e5244 	.word	0xdf3e5244
 800fecc:	3fc2f112 	.word	0x3fc2f112
 800fed0:	96cb03de 	.word	0x96cb03de
 800fed4:	3fc74664 	.word	0x3fc74664
 800fed8:	94229359 	.word	0x94229359
 800fedc:	3fd24924 	.word	0x3fd24924
 800fee0:	55555593 	.word	0x55555593
 800fee4:	3fe55555 	.word	0x3fe55555
 800fee8:	d078c69f 	.word	0xd078c69f
 800feec:	3fc39a09 	.word	0x3fc39a09
 800fef0:	1d8e78af 	.word	0x1d8e78af
 800fef4:	3fcc71c5 	.word	0x3fcc71c5
 800fef8:	9997fa04 	.word	0x9997fa04
 800fefc:	3fd99999 	.word	0x3fd99999
	...
 800ff08:	c3500000 	.word	0xc3500000
 800ff0c:	43500000 	.word	0x43500000
 800ff10:	7fefffff 	.word	0x7fefffff
 800ff14:	3ff00000 	.word	0x3ff00000
 800ff18:	3fe00000 	.word	0x3fe00000

0800ff1c <_init>:
 800ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1e:	bf00      	nop
 800ff20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff22:	bc08      	pop	{r3}
 800ff24:	469e      	mov	lr, r3
 800ff26:	4770      	bx	lr

0800ff28 <_fini>:
 800ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2a:	bf00      	nop
 800ff2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff2e:	bc08      	pop	{r3}
 800ff30:	469e      	mov	lr, r3
 800ff32:	4770      	bx	lr
