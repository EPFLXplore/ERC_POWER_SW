
ERC_BMS_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001137c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08011574  08011574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011818  08011818  0001316c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08011818  08011818  0001316c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08011818  08011818  0001316c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011818  08011818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801181c  0801181c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08011820  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021bc  2000016c  0801198c  0001316c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002328  0801198c  00013328  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001316c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d46c  00000000  00000000  000131a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000663f  00000000  00000000  0004060e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026e8  00000000  00000000  00046c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d9f  00000000  00000000  00049338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032543  00000000  00000000  0004b0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002db38  00000000  00000000  0007d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b8c0  00000000  00000000  000ab152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d6a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a954  00000000  00000000  001d6a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001e13ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000016c 	.word	0x2000016c
 8000214:	00000000 	.word	0x00000000
 8000218:	0801155c 	.word	0x0801155c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000170 	.word	0x20000170
 8000234:	0801155c 	.word	0x0801155c

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <LTC6811_init>:
bool dischargeEnable = false;	//holds if conditions are met to enable discharge
bool system_OK = true;			//holds if the MCU and BMS_ICs are OK, turned off by watchdog, Comm errors or failed BMS Selftests(Green LED)


//Initializes the LTC's registers and the SPI communication, initialize STM SPI before
void LTC6811_init(){
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	@ 0x24
 8000bb4:	af06      	add	r7, sp, #24
	LTC6811_init_cfg(TOTAL_IC, bms_ic);	//Initializes the configuration registers to all 0s
 8000bb6:	491b      	ldr	r1, [pc, #108]	@ (8000c24 <LTC6811_init+0x74>)
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 feb8 	bl	800192e <LTC6811_init_cfg>
	//This for loop initializes the configuration register variables
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e018      	b.n	8000bf6 <LTC6811_init+0x46>
		LTC6811_set_cfgr(current_ic,bms_ic,REFON,ADCOPT,gpioBits_a,dccBits_a,dctoBits_a,uv_a,ov_a); // write LTC config like defined above
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <LTC6811_init+0x78>)
 8000bc6:	7819      	ldrb	r1, [r3, #0]
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <LTC6811_init+0x7c>)
 8000bca:	781c      	ldrb	r4, [r3, #0]
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <LTC6811_init+0x80>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <LTC6811_init+0x84>)
 8000bd2:	8812      	ldrh	r2, [r2, #0]
 8000bd4:	79f8      	ldrb	r0, [r7, #7]
 8000bd6:	9204      	str	r2, [sp, #16]
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <LTC6811_init+0x88>)
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <LTC6811_init+0x8c>)
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <LTC6811_init+0x90>)
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	4623      	mov	r3, r4
 8000be8:	460a      	mov	r2, r1
 8000bea:	490e      	ldr	r1, [pc, #56]	@ (8000c24 <LTC6811_init+0x74>)
 8000bec:	f000 feae 	bl	800194c <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0e3      	beq.n	8000bc4 <LTC6811_init+0x14>
    }
	LTC6811_reset_crc_count(TOTAL_IC,bms_ic);	//sets the CRC count to 0
 8000bfc:	4909      	ldr	r1, [pc, #36]	@ (8000c24 <LTC6811_init+0x74>)
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 fe86 	bl	8001910 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, bms_ic);	//Initializes the LTC's register limits for LTC6811 (because the generic LTC681x libraries can also be used for LTC6813 and others)
 8000c04:	4907      	ldr	r1, [pc, #28]	@ (8000c24 <LTC6811_init+0x74>)
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fdd2 	bl	80017b0 <LTC6811_init_reg_limits>
	wakeup_sleep(TOTAL_IC);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fedc 	bl	80019ca <wakeup_sleep>
	LTC6811_wrcfg(TOTAL_IC,bms_ic);	//writes the configuration variables in the configuration registers via SPI
 8000c12:	4904      	ldr	r1, [pc, #16]	@ (8000c24 <LTC6811_init+0x74>)
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 fe6c 	bl	80018f2 <LTC6811_wrcfg>
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000188 	.word	0x20000188
 8000c28:	2000000e 	.word	0x2000000e
 8000c2c:	2000000f 	.word	0x2000000f
 8000c30:	20000016 	.word	0x20000016
 8000c34:	20000018 	.word	0x20000018
 8000c38:	200002c8 	.word	0x200002c8
 8000c3c:	200002bc 	.word	0x200002bc
 8000c40:	20000010 	.word	0x20000010
 8000c44:	00000000 	.word	0x00000000

08000c48 <tempConvert>:
//convert ADC values into temperature
void tempConvert(){
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e095      	b.n	8000d80 <tempConvert+0x138>
		for(int sensor = 0; sensor < NbTherm; sensor++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e08b      	b.n	8000d72 <tempConvert+0x12a>
			if(bms_ic[current_ic].aux.a_codes[AUX_CH_VREF2-1] == 0x00){
 8000c5a:	4a53      	ldr	r2, [pc, #332]	@ (8000da8 <tempConvert+0x160>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	21e8      	movs	r1, #232	@ 0xe8
 8000c60:	fb01 f303 	mul.w	r3, r1, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	3352      	adds	r3, #82	@ 0x52
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10b      	bne.n	8000c86 <tempConvert+0x3e>
				temperatures[current_ic][sensor] = 7;
 8000c6e:	494f      	ldr	r1, [pc, #316]	@ (8000dac <tempConvert+0x164>)
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	4a4b      	ldr	r2, [pc, #300]	@ (8000db0 <tempConvert+0x168>)
 8000c82:	601a      	str	r2, [r3, #0]
				continue;
 8000c84:	e072      	b.n	8000d6c <tempConvert+0x124>
			}
			// 1(1/B * ln(R/Ro) + (1/To))
		  	temperatures[current_ic][sensor] = 1.0 / (log((ThermRs*bms_ic[current_ic].aux.a_codes[sensor] / (bms_ic[current_ic].aux.a_codes[AUX_CH_VREF2-1] - bms_ic[current_ic].aux.a_codes[sensor])) / ThermR25) / ThermB + 1.0 / 298.15) - 273.15;
 8000c86:	4948      	ldr	r1, [pc, #288]	@ (8000da8 <tempConvert+0x160>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2274      	movs	r2, #116	@ 0x74
 8000c8c:	fb03 f202 	mul.w	r2, r3, r2
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	3324      	adds	r3, #36	@ 0x24
 8000c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c9a:	ee07 3a90 	vmov	s15, r3
 8000c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca2:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <tempConvert+0x16c>)
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cac:	4a3e      	ldr	r2, [pc, #248]	@ (8000da8 <tempConvert+0x160>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	21e8      	movs	r1, #232	@ 0xe8
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	3352      	adds	r3, #82	@ 0x52
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	493a      	ldr	r1, [pc, #232]	@ (8000da8 <tempConvert+0x160>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2274      	movs	r2, #116	@ 0x74
 8000cc4:	fb03 f202 	mul.w	r2, r3, r2
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	3324      	adds	r3, #36	@ 0x24
 8000cce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cd2:	1ac3      	subs	r3, r0, r3
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ce0:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <tempConvert+0x170>)
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000cea:	ee16 0a90 	vmov	r0, s13
 8000cee:	f7ff fc07 	bl	8000500 <__aeabi_f2d>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	ec43 2b10 	vmov	d0, r2, r3
 8000cfa:	f010 fa35 	bl	8011168 <log>
 8000cfe:	ec55 4b10 	vmov	r4, r5, d0
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <tempConvert+0x174>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fbfa 	bl	8000500 <__aeabi_f2d>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	f7ff fd76 	bl	8000804 <__aeabi_ddiv>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	a31d      	add	r3, pc, #116	@ (adr r3, 8000d98 <tempConvert+0x150>)
 8000d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d26:	f7ff fa8d 	bl	8000244 <__adddf3>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	4923      	ldr	r1, [pc, #140]	@ (8000dc0 <tempConvert+0x178>)
 8000d34:	f7ff fd66 	bl	8000804 <__aeabi_ddiv>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	a317      	add	r3, pc, #92	@ (adr r3, 8000da0 <tempConvert+0x158>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	f7ff fa7b 	bl	8000240 <__aeabi_dsub>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fedd 	bl	8000b10 <__aeabi_d2f>
 8000d56:	4601      	mov	r1, r0
 8000d58:	4814      	ldr	r0, [pc, #80]	@ (8000dac <tempConvert+0x164>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4403      	add	r3, r0
 8000d6a:	6019      	str	r1, [r3, #0]
		for(int sensor = 0; sensor < NbTherm; sensor++){
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	f77f af70 	ble.w	8000c5a <tempConvert+0x12>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++){
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f77f af66 	ble.w	8000c54 <tempConvert+0xc>
		}
	}
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	dcb5db83 	.word	0xdcb5db83
 8000d9c:	3f6b79e1 	.word	0x3f6b79e1
 8000da0:	66666666 	.word	0x66666666
 8000da4:	40711266 	.word	0x40711266
 8000da8:	20000188 	.word	0x20000188
 8000dac:	20000298 	.word	0x20000298
 8000db0:	40e00000 	.word	0x40e00000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	3ff00000 	.word	0x3ff00000
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <readVoltages>:

void readVoltages(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	cvError = LTC6811_rdcv(CELL_CH_ALL, TOTAL_IC, bms_ic); // Reads and parses the LTC6811 cell voltage registers.
 8000dce:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <readVoltages+0xa8>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 fd5e 	bl	8001894 <LTC6811_rdcv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b25a      	sxtb	r2, r3
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <readVoltages+0xac>)
 8000dde:	701a      	strb	r2, [r3, #0]
//		uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
//		                     uint8_t total_ic, // the number of ICs in the system
//		                     cell_asic ic[] // Array of the parsed cell codes
//		                    )
	for(int i=0; i<TOTAL_IC; i++){
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	e035      	b.n	8000e52 <readVoltages+0x8a>
		for(int j=0; j<CellsNbS; j++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	e02c      	b.n	8000e46 <readVoltages+0x7e>
			voltages[i][j] = (float)bms_ic[i].cells.c_codes[j] * 0.0001; //convert the cell voltage codes to voltages
 8000dec:	4920      	ldr	r1, [pc, #128]	@ (8000e70 <readVoltages+0xa8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2274      	movs	r2, #116	@ 0x74
 8000df2:	fb03 f202 	mul.w	r2, r3, r2
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	330c      	adds	r3, #12
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	440b      	add	r3, r1
 8000e00:	88db      	ldrh	r3, [r3, #6]
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e0a:	ee17 0a90 	vmov	r0, s15
 8000e0e:	f7ff fb77 	bl	8000500 <__aeabi_f2d>
 8000e12:	a315      	add	r3, pc, #84	@ (adr r3, 8000e68 <readVoltages+0xa0>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	f7ff fbca 	bl	80005b0 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fe74 	bl	8000b10 <__aeabi_d2f>
 8000e28:	4601      	mov	r1, r0
 8000e2a:	4813      	ldr	r0, [pc, #76]	@ (8000e78 <readVoltages+0xb0>)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4403      	add	r3, r0
 8000e3e:	6019      	str	r1, [r3, #0]
		for(int j=0; j<CellsNbS; j++){
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	ddcf      	ble.n	8000dec <readVoltages+0x24>
	for(int i=0; i<TOTAL_IC; i++){
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	ddc6      	ble.n	8000de6 <readVoltages+0x1e>
		}
	}
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	eb1c432d 	.word	0xeb1c432d
 8000e6c:	3f1a36e2 	.word	0x3f1a36e2
 8000e70:	20000188 	.word	0x20000188
 8000e74:	200002cc 	.word	0x200002cc
 8000e78:	20000270 	.word	0x20000270

08000e7c <readTemperatures>:
void readTemperatures(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	auxError = LTC6811_rdaux(AUX_CH_ALL, TOTAL_IC, bms_ic);
 8000e80:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <readTemperatures+0x1c>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fd1c 	bl	80018c2 <LTC6811_rdaux>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <readTemperatures+0x20>)
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000188 	.word	0x20000188
 8000e9c:	200002cd 	.word	0x200002cd

08000ea0 <adcOffsetZero>:


void adcOffsetZero(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	//This function is used to zero the ADC offset, it is called once at the beginning of the program
	//It sets the adc1Val and adc2Val to 2048, which is the middle of the ADC range
	adc1Offset=adc2Offset=0;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <adcOffsetZero+0xa0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <adcOffsetZero+0xa0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a24      	ldr	r2, [pc, #144]	@ (8000f44 <adcOffsetZero+0xa4>)
 8000eb2:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 10; i++){ // Take 10 samples to average the offset
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	e026      	b.n	8000f08 <adcOffsetZero+0x68>
		HAL_ADC_Start(&hadc1);
 8000eba:	4823      	ldr	r0, [pc, #140]	@ (8000f48 <adcOffsetZero+0xa8>)
 8000ebc:	f003 febe 	bl	8004c3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Poll for conversion to complete
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ec4:	4820      	ldr	r0, [pc, #128]	@ (8000f48 <adcOffsetZero+0xa8>)
 8000ec6:	f003 ff73 	bl	8004db0 <HAL_ADC_PollForConversion>
		adc1Offset += HAL_ADC_GetValue(&hadc1); // Read the ADC value for current sensor 2
 8000eca:	481f      	ldr	r0, [pc, #124]	@ (8000f48 <adcOffsetZero+0xa8>)
 8000ecc:	f004 f976 	bl	80051bc <HAL_ADC_GetValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <adcOffsetZero+0xa4>)
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <adcOffsetZero+0xa4>)
 8000edc:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc2);
 8000ede:	481b      	ldr	r0, [pc, #108]	@ (8000f4c <adcOffsetZero+0xac>)
 8000ee0:	f003 feac 	bl	8004c3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY); // Poll for conversion to complete
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee8:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <adcOffsetZero+0xac>)
 8000eea:	f003 ff61 	bl	8004db0 <HAL_ADC_PollForConversion>
		adc2Offset += HAL_ADC_GetValue(&hadc2); // Read the ADC value for current sensor 2
 8000eee:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <adcOffsetZero+0xac>)
 8000ef0:	f004 f964 	bl	80051bc <HAL_ADC_GetValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <adcOffsetZero+0xa0>)
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <adcOffsetZero+0xa0>)
 8000f00:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++){ // Take 10 samples to average the offset
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3301      	adds	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b09      	cmp	r3, #9
 8000f0c:	ddd5      	ble.n	8000eba <adcOffsetZero+0x1a>
	}
	adc1Offset /= 10; // Average the offset
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <adcOffsetZero+0xa4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <adcOffsetZero+0xb0>)
 8000f14:	fb82 1203 	smull	r1, r2, r2, r3
 8000f18:	1092      	asrs	r2, r2, #2
 8000f1a:	17db      	asrs	r3, r3, #31
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <adcOffsetZero+0xa4>)
 8000f20:	6013      	str	r3, [r2, #0]
	adc2Offset /= 10; // Average the offset
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <adcOffsetZero+0xa0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <adcOffsetZero+0xb0>)
 8000f28:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2c:	1092      	asrs	r2, r2, #2
 8000f2e:	17db      	asrs	r3, r3, #31
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <adcOffsetZero+0xa0>)
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200002b8 	.word	0x200002b8
 8000f44:	200002b0 	.word	0x200002b0
 8000f48:	2000034c 	.word	0x2000034c
 8000f4c:	200003b4 	.word	0x200003b4
 8000f50:	66666667 	.word	0x66666667
 8000f54:	00000000 	.word	0x00000000

08000f58 <currentConvert>:
//convert ADC values into current sensor skaling 19.8mV/A, ->1 LSB = 40.6901041667mA
void currentConvert(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	currents[0] = (float)(adc1Val-adc1Offset)*0.0050863;///12.3;//*0.0406901041667;	//19.8mV/A
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <currentConvert+0x80>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <currentConvert+0x84>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6e:	ee17 0a90 	vmov	r0, s15
 8000f72:	f7ff fac5 	bl	8000500 <__aeabi_f2d>
 8000f76:	a316      	add	r3, pc, #88	@ (adr r3, 8000fd0 <currentConvert+0x78>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fb18 	bl	80005b0 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fdc2 	bl	8000b10 <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <currentConvert+0x88>)
 8000f90:	6013      	str	r3, [r2, #0]
	currents[1] = (float)(adc2Val-adc2Offset)*0.0050863;///12.3;//*0.0406901041667;	//19.8mV/A
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <currentConvert+0x8c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <currentConvert+0x90>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	ee17 0a90 	vmov	r0, s15
 8000fa8:	f7ff faaa 	bl	8000500 <__aeabi_f2d>
 8000fac:	a308      	add	r3, pc, #32	@ (adr r3, 8000fd0 <currentConvert+0x78>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fafd 	bl	80005b0 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fda7 	bl	8000b10 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <currentConvert+0x88>)
 8000fc6:	6053      	str	r3, [r2, #4]
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	4285b68e 	.word	0x4285b68e
 8000fd4:	3f74d55f 	.word	0x3f74d55f
 8000fd8:	200002ac 	.word	0x200002ac
 8000fdc:	200002b0 	.word	0x200002b0
 8000fe0:	200002a4 	.word	0x200002a4
 8000fe4:	200002b4 	.word	0x200002b4
 8000fe8:	200002b8 	.word	0x200002b8

08000fec <resetOutputLatch>:

bool resetOutputLatch(){ //as this is a low active RS latch, the output is reset by setting the pin to low
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	//check if error is still present, as in this case reseting the latch will put the system in undefined state
	HAL_GPIO_WritePin(ErrorReset_GPIO_Port, ErrorReset_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4812      	ldr	r0, [pc, #72]	@ (8001040 <resetOutputLatch+0x54>)
 8000ff6:	f005 fd71 	bl	8006adc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(HardwareFault_GPIO_Port, HardwareFault_Pin) == GPIO_PIN_RESET){
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4811      	ldr	r0, [pc, #68]	@ (8001044 <resetOutputLatch+0x58>)
 8000ffe:	f005 fd55 	bl	8006aac <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <resetOutputLatch+0x20>
//		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);	//turn on red LED
		return false;	//if the hardware fault pin is low, the latch cannot be reset
 8001008:	2300      	movs	r3, #0
 800100a:	e016      	b.n	800103a <resetOutputLatch+0x4e>
	}else{
		HAL_GPIO_WritePin(ErrorReset_GPIO_Port, ErrorReset_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <resetOutputLatch+0x54>)
 8001012:	f005 fd63 	bl	8006adc <HAL_GPIO_WritePin>
		HAL_Delay(10);	//wait for 10ms to ensure the latch is reset
 8001016:	200a      	movs	r0, #10
 8001018:	f003 fa84 	bl	8004524 <HAL_Delay>
		HAL_GPIO_WritePin(ErrorReset_GPIO_Port, ErrorReset_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2102      	movs	r1, #2
 8001020:	4807      	ldr	r0, [pc, #28]	@ (8001040 <resetOutputLatch+0x54>)
 8001022:	f005 fd5b 	bl	8006adc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(OutputEnable_GPIO_Port, OutputEnable_Pin) == GPIO_PIN_SET){
 8001026:	2120      	movs	r1, #32
 8001028:	4806      	ldr	r0, [pc, #24]	@ (8001044 <resetOutputLatch+0x58>)
 800102a:	f005 fd3f 	bl	8006aac <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <resetOutputLatch+0x4c>
//			HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);	//turn on yellow LED
			return true;	//output latch is reset
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <resetOutputLatch+0x4e>
		}else{
//			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);	//turn on green LED
			return false;	//output latch is not reset
 8001038:	2300      	movs	r3, #0
		}
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	42020400 	.word	0x42020400
 8001044:	42020800 	.word	0x42020800

08001048 <errorCheck>:

void errorCheck(){
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
	//Reset all status variables, as they can only be flipped to the negative during check
	tempError = false;
 800104e:	4bab      	ldr	r3, [pc, #684]	@ (80012fc <errorCheck+0x2b4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	voltageError = false;
 8001054:	4baa      	ldr	r3, [pc, #680]	@ (8001300 <errorCheck+0x2b8>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	currentError = false;
 800105a:	4baa      	ldr	r3, [pc, #680]	@ (8001304 <errorCheck+0x2bc>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	chargeEnable = true;
 8001060:	4ba9      	ldr	r3, [pc, #676]	@ (8001308 <errorCheck+0x2c0>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	dischargeEnable = true;
 8001066:	4ba9      	ldr	r3, [pc, #676]	@ (800130c <errorCheck+0x2c4>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
	system_OK = true;
 800106c:	4ba8      	ldr	r3, [pc, #672]	@ (8001310 <errorCheck+0x2c8>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
	//Check for overvoltage or undervoltage and increase the counting arrays accordingly
	for (int i = 0; i < TOTAL_IC; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e1b2      	b.n	80013de <errorCheck+0x396>
		for (int j = 0; j < CellsNbS; j++){
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	e0b2      	b.n	80011e4 <errorCheck+0x19c>
			if(voltages[i][j] > ChgEndVolt && NOV[i][j] < Max_Errors){
 800107e:	49a5      	ldr	r1, [pc, #660]	@ (8001314 <errorCheck+0x2cc>)
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001318 <errorCheck+0x2d0>
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	dd23      	ble.n	80010ec <errorCheck+0xa4>
 80010a4:	499d      	ldr	r1, [pc, #628]	@ (800131c <errorCheck+0x2d4>)
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4413      	add	r3, r2
 80010b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010b8:	4a99      	ldr	r2, [pc, #612]	@ (8001320 <errorCheck+0x2d8>)
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	4293      	cmp	r3, r2
 80010be:	da15      	bge.n	80010ec <errorCheck+0xa4>
				NOV[i][j]++;
 80010c0:	4996      	ldr	r1, [pc, #600]	@ (800131c <errorCheck+0x2d4>)
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010d4:	1c59      	adds	r1, r3, #1
 80010d6:	4891      	ldr	r0, [pc, #580]	@ (800131c <errorCheck+0x2d4>)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4413      	add	r3, r2
 80010e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80010ea:	e020      	b.n	800112e <errorCheck+0xe6>
			}else if(NOV[i][j]>0){
 80010ec:	498b      	ldr	r1, [pc, #556]	@ (800131c <errorCheck+0x2d4>)
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4413      	add	r3, r2
 80010fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dd14      	ble.n	800112e <errorCheck+0xe6>
				NOV[i][j]--;
 8001104:	4985      	ldr	r1, [pc, #532]	@ (800131c <errorCheck+0x2d4>)
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4413      	add	r3, r2
 8001114:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001118:	1e59      	subs	r1, r3, #1
 800111a:	4880      	ldr	r0, [pc, #512]	@ (800131c <errorCheck+0x2d4>)
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4413      	add	r3, r2
 800112a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			}
			if(voltages[i][j] < MinDschgVolt && NUV[i][j] < Max_Errors){
 800112e:	4979      	ldr	r1, [pc, #484]	@ (8001314 <errorCheck+0x2cc>)
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800114a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d523      	bpl.n	800119c <errorCheck+0x154>
 8001154:	4973      	ldr	r1, [pc, #460]	@ (8001324 <errorCheck+0x2dc>)
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4413      	add	r3, r2
 8001164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001168:	4a6d      	ldr	r2, [pc, #436]	@ (8001320 <errorCheck+0x2d8>)
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	4293      	cmp	r3, r2
 800116e:	da15      	bge.n	800119c <errorCheck+0x154>
				NUV[i][j]++;
 8001170:	496c      	ldr	r1, [pc, #432]	@ (8001324 <errorCheck+0x2dc>)
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001184:	1c59      	adds	r1, r3, #1
 8001186:	4867      	ldr	r0, [pc, #412]	@ (8001324 <errorCheck+0x2dc>)
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4413      	add	r3, r2
 8001196:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800119a:	e020      	b.n	80011de <errorCheck+0x196>
			}else if(NUV[i][j]>0){
 800119c:	4961      	ldr	r1, [pc, #388]	@ (8001324 <errorCheck+0x2dc>)
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4413      	add	r3, r2
 80011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dd14      	ble.n	80011de <errorCheck+0x196>
				NUV[i][j]--;
 80011b4:	495b      	ldr	r1, [pc, #364]	@ (8001324 <errorCheck+0x2dc>)
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011c8:	1e59      	subs	r1, r3, #1
 80011ca:	4856      	ldr	r0, [pc, #344]	@ (8001324 <errorCheck+0x2dc>)
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4413      	add	r3, r2
 80011da:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int j = 0; j < CellsNbS; j++){
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3301      	adds	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	f77f af49 	ble.w	800107e <errorCheck+0x36>
			}
		}
		//Check for overtemperature or undertemperature and increase the counting arrays accordingly
		for (int j = 0; j < NbTherm; j++){
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e0c3      	b.n	800137a <errorCheck+0x332>
			if(temperatures[i][j] > OverTemp && NOT[i][j] < Max_Errors){
 80011f2:	494d      	ldr	r1, [pc, #308]	@ (8001328 <errorCheck+0x2e0>)
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800132c <errorCheck+0x2e4>
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	dd20      	ble.n	8001258 <errorCheck+0x210>
 8001216:	4946      	ldr	r1, [pc, #280]	@ (8001330 <errorCheck+0x2e8>)
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001228:	4a3d      	ldr	r2, [pc, #244]	@ (8001320 <errorCheck+0x2d8>)
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	4293      	cmp	r3, r2
 800122e:	da13      	bge.n	8001258 <errorCheck+0x210>
				NOT[i][j]++;
 8001230:	493f      	ldr	r1, [pc, #252]	@ (8001330 <errorCheck+0x2e8>)
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001242:	1c59      	adds	r1, r3, #1
 8001244:	483a      	ldr	r0, [pc, #232]	@ (8001330 <errorCheck+0x2e8>)
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8001256:	e01d      	b.n	8001294 <errorCheck+0x24c>
			}else if(NOT[i][j]>0){
 8001258:	4935      	ldr	r1, [pc, #212]	@ (8001330 <errorCheck+0x2e8>)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	dd12      	ble.n	8001294 <errorCheck+0x24c>
				NOT[i][j]--;
 800126e:	4930      	ldr	r1, [pc, #192]	@ (8001330 <errorCheck+0x2e8>)
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001280:	1e59      	subs	r1, r3, #1
 8001282:	482b      	ldr	r0, [pc, #172]	@ (8001330 <errorCheck+0x2e8>)
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			}
			if(temperatures[i][j] < ChgUnderTemp && NUT[i][j] < Max_Errors){
 8001294:	4924      	ldr	r1, [pc, #144]	@ (8001328 <errorCheck+0x2e0>)
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	d53f      	bpl.n	8001338 <errorCheck+0x2f0>
 80012b8:	491e      	ldr	r1, [pc, #120]	@ (8001334 <errorCheck+0x2ec>)
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ca:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <errorCheck+0x2d8>)
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	4293      	cmp	r3, r2
 80012d0:	da32      	bge.n	8001338 <errorCheck+0x2f0>
				NUT[i][j]++;
 80012d2:	4918      	ldr	r1, [pc, #96]	@ (8001334 <errorCheck+0x2ec>)
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012e4:	1c59      	adds	r1, r3, #1
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <errorCheck+0x2ec>)
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80012f8:	e03c      	b.n	8001374 <errorCheck+0x32c>
 80012fa:	bf00      	nop
 80012fc:	20000344 	.word	0x20000344
 8001300:	20000345 	.word	0x20000345
 8001304:	20000346 	.word	0x20000346
 8001308:	20000347 	.word	0x20000347
 800130c:	20000348 	.word	0x20000348
 8001310:	2000001a 	.word	0x2000001a
 8001314:	20000270 	.word	0x20000270
 8001318:	4086147b 	.word	0x4086147b
 800131c:	200002d0 	.word	0x200002d0
 8001320:	2000000d 	.word	0x2000000d
 8001324:	200002f8 	.word	0x200002f8
 8001328:	20000298 	.word	0x20000298
 800132c:	42a00000 	.word	0x42a00000
 8001330:	20000320 	.word	0x20000320
 8001334:	2000032c 	.word	0x2000032c
			}else if(NUT[i][j]>0){
 8001338:	497f      	ldr	r1, [pc, #508]	@ (8001538 <errorCheck+0x4f0>)
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd12      	ble.n	8001374 <errorCheck+0x32c>
				NUT[i][j]--;
 800134e:	497a      	ldr	r1, [pc, #488]	@ (8001538 <errorCheck+0x4f0>)
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001360:	1e59      	subs	r1, r3, #1
 8001362:	4875      	ldr	r0, [pc, #468]	@ (8001538 <errorCheck+0x4f0>)
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int j = 0; j < NbTherm; j++){
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b02      	cmp	r3, #2
 800137e:	f77f af38 	ble.w	80011f2 <errorCheck+0x1aa>
			}
		}

		//check for communication errors
		if((cvError>0 || auxError>0) && NC[i] < Max_Errors){
 8001382:	4b6e      	ldr	r3, [pc, #440]	@ (800153c <errorCheck+0x4f4>)
 8001384:	f993 3000 	ldrsb.w	r3, [r3]
 8001388:	2b00      	cmp	r3, #0
 800138a:	dc04      	bgt.n	8001396 <errorCheck+0x34e>
 800138c:	4b6c      	ldr	r3, [pc, #432]	@ (8001540 <errorCheck+0x4f8>)
 800138e:	f993 3000 	ldrsb.w	r3, [r3]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd11      	ble.n	80013ba <errorCheck+0x372>
 8001396:	4a6b      	ldr	r2, [pc, #428]	@ (8001544 <errorCheck+0x4fc>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	4a6a      	ldr	r2, [pc, #424]	@ (8001548 <errorCheck+0x500>)
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	da09      	bge.n	80013ba <errorCheck+0x372>
			NC[i]++;
 80013a6:	4a67      	ldr	r2, [pc, #412]	@ (8001544 <errorCheck+0x4fc>)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	4964      	ldr	r1, [pc, #400]	@ (8001544 <errorCheck+0x4fc>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80013b8:	e00e      	b.n	80013d8 <errorCheck+0x390>
		}else if(NC[i]>0){
 80013ba:	4a62      	ldr	r2, [pc, #392]	@ (8001544 <errorCheck+0x4fc>)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	dd08      	ble.n	80013d8 <errorCheck+0x390>
			NC[i]--;
 80013c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001544 <errorCheck+0x4fc>)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	1e5a      	subs	r2, r3, #1
 80013d0:	495c      	ldr	r1, [pc, #368]	@ (8001544 <errorCheck+0x4fc>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < TOTAL_IC; i++){
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f77f ae49 	ble.w	8001078 <errorCheck+0x30>
//		NOC[1]++;
//	}else if(NOC[1] > 0){
//		NOC[1]--;
//	}
	//Output control
	for (int i = 0; i < TOTAL_IC; i++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	e076      	b.n	80014da <errorCheck+0x492>
		for (int j = 0; j < CellsNbS; j++){
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	e02a      	b.n	8001448 <errorCheck+0x400>
			if(NOV[i][j] > N_Error){
 80013f2:	4956      	ldr	r1, [pc, #344]	@ (800154c <errorCheck+0x504>)
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001406:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <errorCheck+0x508>)
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	4293      	cmp	r3, r2
 800140c:	dd05      	ble.n	800141a <errorCheck+0x3d2>
				chargeEnable = false;
 800140e:	4b51      	ldr	r3, [pc, #324]	@ (8001554 <errorCheck+0x50c>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
				voltageError = true;
 8001414:	4b50      	ldr	r3, [pc, #320]	@ (8001558 <errorCheck+0x510>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
			}
			if(NUV[i][j] > N_Error){
 800141a:	4950      	ldr	r1, [pc, #320]	@ (800155c <errorCheck+0x514>)
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	4a48      	ldr	r2, [pc, #288]	@ (8001550 <errorCheck+0x508>)
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	4293      	cmp	r3, r2
 8001434:	dd05      	ble.n	8001442 <errorCheck+0x3fa>
				dischargeEnable = false;
 8001436:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <errorCheck+0x518>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
				voltageError = true;
 800143c:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <errorCheck+0x510>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < CellsNbS; j++){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3301      	adds	r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b09      	cmp	r3, #9
 800144c:	ddd1      	ble.n	80013f2 <errorCheck+0x3aa>
			}
		}
		for (int j = 0; j < NbTherm; j++){
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	e02b      	b.n	80014ac <errorCheck+0x464>
			if(NOT[i][j] > N_Error){
 8001454:	4943      	ldr	r1, [pc, #268]	@ (8001564 <errorCheck+0x51c>)
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001466:	4a3a      	ldr	r2, [pc, #232]	@ (8001550 <errorCheck+0x508>)
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	4293      	cmp	r3, r2
 800146c:	dd08      	ble.n	8001480 <errorCheck+0x438>
				chargeEnable = false;
 800146e:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <errorCheck+0x50c>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
				dischargeEnable = false;
 8001474:	4b3a      	ldr	r3, [pc, #232]	@ (8001560 <errorCheck+0x518>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
				tempError = true;
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <errorCheck+0x520>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
			}
			if(NUT[i][j] > N_Error){
 8001480:	492d      	ldr	r1, [pc, #180]	@ (8001538 <errorCheck+0x4f0>)
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001492:	4a2f      	ldr	r2, [pc, #188]	@ (8001550 <errorCheck+0x508>)
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4293      	cmp	r3, r2
 8001498:	dd05      	ble.n	80014a6 <errorCheck+0x45e>
				chargeEnable = false;
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <errorCheck+0x50c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
				tempError = true;
 80014a0:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <errorCheck+0x520>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NbTherm; j++){
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	ddd0      	ble.n	8001454 <errorCheck+0x40c>
			}
		}
		if(NC[i] > N_Error){
 80014b2:	4a24      	ldr	r2, [pc, #144]	@ (8001544 <errorCheck+0x4fc>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <errorCheck+0x508>)
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	4293      	cmp	r3, r2
 80014c0:	dd08      	ble.n	80014d4 <errorCheck+0x48c>
			chargeEnable = false;
 80014c2:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <errorCheck+0x50c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
			dischargeEnable = false;
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <errorCheck+0x518>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
			system_OK = false;	//set system not OK
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <errorCheck+0x524>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < TOTAL_IC; i++){
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dd85      	ble.n	80013ec <errorCheck+0x3a4>
		}
	}
	if(NOC[0] > N_Error){
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <errorCheck+0x528>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001550 <errorCheck+0x508>)
 80014e6:	7812      	ldrb	r2, [r2, #0]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	dd05      	ble.n	80014f8 <errorCheck+0x4b0>
		chargeEnable = false;
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <errorCheck+0x50c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		currentError = true;
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <errorCheck+0x52c>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
	}
	if(NOC[1] > N_Error){
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <errorCheck+0x528>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <errorCheck+0x508>)
 80014fe:	7812      	ldrb	r2, [r2, #0]
 8001500:	4293      	cmp	r3, r2
 8001502:	dd05      	ble.n	8001510 <errorCheck+0x4c8>
		dischargeEnable = false;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <errorCheck+0x518>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
		currentError = true;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <errorCheck+0x52c>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(OutputEnable_GPIO_Port, OutputEnable_Pin) == GPIO_PIN_RESET){
 8001510:	2120      	movs	r1, #32
 8001512:	4819      	ldr	r0, [pc, #100]	@ (8001578 <errorCheck+0x530>)
 8001514:	f005 faca 	bl	8006aac <HAL_GPIO_ReadPin>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <errorCheck+0x4e8>
		//if the hardware fault is present, turn off the outputs
		chargeEnable = false;
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <errorCheck+0x50c>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		dischargeEnable = false;
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <errorCheck+0x518>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		system_OK = false;	//set system not OK
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <errorCheck+0x524>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
	}
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000032c 	.word	0x2000032c
 800153c:	200002cc 	.word	0x200002cc
 8001540:	200002cd 	.word	0x200002cd
 8001544:	20000338 	.word	0x20000338
 8001548:	2000000d 	.word	0x2000000d
 800154c:	200002d0 	.word	0x200002d0
 8001550:	2000000c 	.word	0x2000000c
 8001554:	20000347 	.word	0x20000347
 8001558:	20000345 	.word	0x20000345
 800155c:	200002f8 	.word	0x200002f8
 8001560:	20000348 	.word	0x20000348
 8001564:	20000320 	.word	0x20000320
 8001568:	20000344 	.word	0x20000344
 800156c:	2000001a 	.word	0x2000001a
 8001570:	2000033c 	.word	0x2000033c
 8001574:	20000346 	.word	0x20000346
 8001578:	42020800 	.word	0x42020800

0800157c <LEDControl>:

void LEDControl(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	//blink Red and Amber in case of hardware fault
	if(HAL_GPIO_ReadPin(OutputEnable_GPIO_Port, OutputEnable_Pin) == GPIO_PIN_RESET){
 8001580:	2120      	movs	r1, #32
 8001582:	4819      	ldr	r0, [pc, #100]	@ (80015e8 <LEDControl+0x6c>)
 8001584:	f005 fa92 	bl	8006aac <HAL_GPIO_ReadPin>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10a      	bne.n	80015a4 <LEDControl+0x28>
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800158e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001592:	4816      	ldr	r0, [pc, #88]	@ (80015ec <LEDControl+0x70>)
 8001594:	f005 faba 	bl	8006b0c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8001598:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800159c:	4813      	ldr	r0, [pc, #76]	@ (80015ec <LEDControl+0x70>)
 800159e:	f005 fab5 	bl	8006b0c <HAL_GPIO_TogglePin>
 80015a2:	e00f      	b.n	80015c4 <LEDControl+0x48>
	}else{
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, voltageError);
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <LEDControl+0x74>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ae:	480f      	ldr	r0, [pc, #60]	@ (80015ec <LEDControl+0x70>)
 80015b0:	f005 fa94 	bl	8006adc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, currentError);
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <LEDControl+0x78>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <LEDControl+0x70>)
 80015c0:	f005 fa8c 	bl	8006adc <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, tempError);
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <LEDControl+0x7c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ce:	4807      	ldr	r0, [pc, #28]	@ (80015ec <LEDControl+0x70>)
 80015d0:	f005 fa84 	bl	8006adc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, system_OK);
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <LEDControl+0x80>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015de:	4803      	ldr	r0, [pc, #12]	@ (80015ec <LEDControl+0x70>)
 80015e0:	f005 fa7c 	bl	8006adc <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	42020800 	.word	0x42020800
 80015ec:	42020400 	.word	0x42020400
 80015f0:	20000345 	.word	0x20000345
 80015f4:	20000346 	.word	0x20000346
 80015f8:	20000344 	.word	0x20000344
 80015fc:	2000001a 	.word	0x2000001a

08001600 <outputControl>:

void outputControl(){ //eventually integrate in errorcheck
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
		if(!resetOutputLatch()){
			return;	//if the output latch cannot be reset, return
		}
	}
	*/
	HAL_GPIO_WritePin(Enable1_GPIO_Port, Enable1_Pin, chargeEnable);
 8001604:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <outputControl+0x24>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	2110      	movs	r1, #16
 800160c:	4806      	ldr	r0, [pc, #24]	@ (8001628 <outputControl+0x28>)
 800160e:	f005 fa65 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Enable2_GPIO_Port, Enable2_Pin, dischargeEnable);
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <outputControl+0x2c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	2101      	movs	r1, #1
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <outputControl+0x30>)
 800161c:	f005 fa5e 	bl	8006adc <HAL_GPIO_WritePin>

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000347 	.word	0x20000347
 8001628:	42020800 	.word	0x42020800
 800162c:	20000348 	.word	0x20000348
 8001630:	42020400 	.word	0x42020400

08001634 <SetHardwareProtection>:
void SetHardwareProtection(){ //only set in idle mode stop TIM7 before calling this function
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	// HardwareOVP
    HAL_GPIO_WritePin(A1_1_GPIO_Port, A1_1_Pin, (HardwareOVP>>3)&1);
 8001638:	2309      	movs	r3, #9
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164a:	4854      	ldr	r0, [pc, #336]	@ (800179c <SetHardwareProtection+0x168>)
 800164c:	f005 fa46 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_1_GPIO_Port, A0_1_Pin, (HardwareOVP>>2)&1);
 8001650:	2309      	movs	r3, #9
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001662:	484e      	ldr	r0, [pc, #312]	@ (800179c <SetHardwareProtection+0x168>)
 8001664:	f005 fa3a 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A1_2_GPIO_Port, A1_2_Pin, (HardwareOVP>>1)&1);
 8001668:	2309      	movs	r3, #9
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800167a:	4849      	ldr	r0, [pc, #292]	@ (80017a0 <SetHardwareProtection+0x16c>)
 800167c:	f005 fa2e 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_2_GPIO_Port, A0_2_Pin, HardwareOVP&1);
 8001680:	2309      	movs	r3, #9
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800168e:	4843      	ldr	r0, [pc, #268]	@ (800179c <SetHardwareProtection+0x168>)
 8001690:	f005 fa24 	bl	8006adc <HAL_GPIO_WritePin>
    //HardwareUVP
    HAL_GPIO_WritePin(A1_3_GPIO_Port, A1_3_Pin, (HardwareUVP>>3)&1);
 8001694:	230a      	movs	r3, #10
 8001696:	08db      	lsrs	r3, r3, #3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016a6:	483e      	ldr	r0, [pc, #248]	@ (80017a0 <SetHardwareProtection+0x16c>)
 80016a8:	f005 fa18 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_3_GPIO_Port, A0_3_Pin, (HardwareUVP>>2)&1);
 80016ac:	230a      	movs	r3, #10
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016be:	4837      	ldr	r0, [pc, #220]	@ (800179c <SetHardwareProtection+0x168>)
 80016c0:	f005 fa0c 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A1_4_GPIO_Port, A1_4_Pin, (HardwareUVP>>1)&1);
 80016c4:	230a      	movs	r3, #10
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016d6:	4832      	ldr	r0, [pc, #200]	@ (80017a0 <SetHardwareProtection+0x16c>)
 80016d8:	f005 fa00 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_4_GPIO_Port, A0_4_Pin, HardwareUVP&1);
 80016dc:	230a      	movs	r3, #10
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	2104      	movs	r1, #4
 80016e8:	482e      	ldr	r0, [pc, #184]	@ (80017a4 <SetHardwareProtection+0x170>)
 80016ea:	f005 f9f7 	bl	8006adc <HAL_GPIO_WritePin>
    //Cell_CNT
    HAL_GPIO_WritePin(A1_6_GPIO_Port, A1_6_Pin, (HardwareCellCnt>>3)&1);
 80016ee:	2307      	movs	r3, #7
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	2120      	movs	r1, #32
 80016fe:	482a      	ldr	r0, [pc, #168]	@ (80017a8 <SetHardwareProtection+0x174>)
 8001700:	f005 f9ec 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_6_GPIO_Port, A0_6_Pin, (HardwareCellCnt>>2)&1);
 8001704:	2307      	movs	r3, #7
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	2140      	movs	r1, #64	@ 0x40
 8001714:	4824      	ldr	r0, [pc, #144]	@ (80017a8 <SetHardwareProtection+0x174>)
 8001716:	f005 f9e1 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A1_7_GPIO_Port, A1_7_Pin, (HardwareCellCnt>>1)&1);
 800171a:	2307      	movs	r3, #7
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800172c:	481b      	ldr	r0, [pc, #108]	@ (800179c <SetHardwareProtection+0x168>)
 800172e:	f005 f9d5 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_7_GPIO_Port, A0_7_Pin, HardwareCellCnt&1);
 8001732:	2307      	movs	r3, #7
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	481a      	ldr	r0, [pc, #104]	@ (80017a8 <SetHardwareProtection+0x174>)
 8001740:	f005 f9cc 	bl	8006adc <HAL_GPIO_WritePin>
    //Hysterysis
    HAL_GPIO_WritePin(A1_5_GPIO_Port, A1_5_Pin, (HardwareHysterysis>>1)&1);
 8001744:	2303      	movs	r3, #3
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001756:	4811      	ldr	r0, [pc, #68]	@ (800179c <SetHardwareProtection+0x168>)
 8001758:	f005 f9c0 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_5_GPIO_Port, A0_5_Pin, (HardwareHysterysis)&1);
 800175c:	2303      	movs	r3, #3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	2110      	movs	r1, #16
 8001768:	480f      	ldr	r0, [pc, #60]	@ (80017a8 <SetHardwareProtection+0x174>)
 800176a:	f005 f9b7 	bl	8006adc <HAL_GPIO_WritePin>
    //Cycle Time
    HAL_GPIO_WritePin(A1_8_GPIO_Port, A1_8_Pin, (HardwareCycleTime>>1)&1);
 800176e:	2301      	movs	r3, #1
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	2101      	movs	r1, #1
 800177e:	480b      	ldr	r0, [pc, #44]	@ (80017ac <SetHardwareProtection+0x178>)
 8001780:	f005 f9ac 	bl	8006adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A0_8_GPIO_Port, A0_8_Pin, (HardwareCycleTime)&1);
 8001784:	2301      	movs	r3, #1
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	2102      	movs	r1, #2
 8001790:	4806      	ldr	r0, [pc, #24]	@ (80017ac <SetHardwareProtection+0x178>)
 8001792:	f005 f9a3 	bl	8006adc <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	42020800 	.word	0x42020800
 80017a0:	42020000 	.word	0x42020000
 80017a4:	42020c00 	.word	0x42020c00
 80017a8:	42020400 	.word	0x42020400
 80017ac:	42021c00 	.word	0x42021c00

080017b0 <LTC6811_init_reg_limits>:
#include "stdint.h"
#include "LTC6811.h"
#include "LTC681x.h"

void LTC6811_init_reg_limits(uint8_t total_ic, cell_asic ic[])
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e038      	b.n	8001834 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	22e8      	movs	r2, #232	@ 0xe8
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	220c      	movs	r2, #12
 80017d0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    ic[cic].ic_reg.stat_channels=4;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	22e8      	movs	r2, #232	@ 0xe8
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	2204      	movs	r2, #4
 80017e2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    ic[cic].ic_reg.aux_channels=6;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	22e8      	movs	r2, #232	@ 0xe8
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	2206      	movs	r2, #6
 80017f4:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	22e8      	movs	r2, #232	@ 0xe8
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	2204      	movs	r2, #4
 8001806:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	22e8      	movs	r2, #232	@ 0xe8
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	2202      	movs	r2, #2
 8001818:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	22e8      	movs	r2, #232	@ 0xe8
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	2203      	movs	r2, #3
 800182a:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3c2      	bcc.n	80017c2 <LTC6811_init_reg_limits+0x12>
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LTC6811_adcv>:
void LTC6811_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	460b      	mov	r3, r1
 8001856:	71bb      	strb	r3, [r7, #6]
 8001858:	4613      	mov	r3, r2
 800185a:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 800185c:	797a      	ldrb	r2, [r7, #5]
 800185e:	79b9      	ldrb	r1, [r7, #6]
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f9b2 	bl	8001bcc <LTC681x_adcv>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <LTC6811_adax>:
//Start a GPIO and Vref2 Conversion
void LTC6811_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8001880:	79ba      	ldrb	r2, [r7, #6]
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f9cb 	bl	8001c22 <LTC681x_adax>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <LTC6811_rdcv>:
// Reads and parses the LTC6811 cell voltage registers.
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	603a      	str	r2, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	460b      	mov	r3, r1
 80018a2:	71bb      	strb	r3, [r7, #6]

  int8_t pec_error = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 80018a8:	79b9      	ldrb	r1, [r7, #6]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fafa 	bl	8001ea8 <LTC681x_rdcv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	603a      	str	r2, [r7, #0]
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	460b      	mov	r3, r1
 80018d0:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdaux(reg,total_ic,ic);
 80018d6:	79b9      	ldrb	r1, [r7, #6]
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fb97 	bl	8002010 <LTC681x_rdaux>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
  return (pec_error);
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[] //A two dimensional array of the configuration data that will be written
                  )
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	6039      	str	r1, [r7, #0]
 80018fc:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fc2c 	bl	8002160 <LTC681x_wrcfg>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <LTC6811_reset_crc_count>:
  LTC681x_check_pec(total_ic,reg,ic);
}

//Helper Function to reset PEC counters
void LTC6811_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fe3d 	bl	80025a0 <LTC681x_reset_crc_count>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <LTC6811_init_cfg>:

//Helper function to intialize CFG variables.
void LTC6811_init_cfg(uint8_t total_ic, cell_asic ic[])
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	6039      	str	r1, [r7, #0]
 8001938:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	6839      	ldr	r1, [r7, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fe94 	bl	800266c <LTC681x_init_cfg>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <LTC6811_set_cfgr>:
					  bool dcc[12], // The DCC bit
					  bool dcto[4], // The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af06      	add	r7, sp, #24
 8001952:	6039      	str	r1, [r7, #0]
 8001954:	4611      	mov	r1, r2
 8001956:	461a      	mov	r2, r3
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	460b      	mov	r3, r1
 800195e:	71bb      	strb	r3, [r7, #6]
 8001960:	4613      	mov	r3, r2
 8001962:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 8001964:	7979      	ldrb	r1, [r7, #5]
 8001966:	79ba      	ldrb	r2, [r7, #6]
 8001968:	79f8      	ldrb	r0, [r7, #7]
 800196a:	8c3b      	ldrh	r3, [r7, #32]
 800196c:	9304      	str	r3, [sp, #16]
 800196e:	8bbb      	ldrh	r3, [r7, #28]
 8001970:	9303      	str	r3, [sp, #12]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	460b      	mov	r3, r1
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	f000 fe9d 	bl	80026c0 <LTC681x_set_cfgr>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <wakeup_idle>:
                                0x2d02, 0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3,
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

void wakeup_idle(uint8_t total_ic)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e00c      	b.n	80019b8 <wakeup_idle+0x2a>
  {
    cs_low();
 800199e:	f001 f8e9 	bl	8002b74 <cs_low>
    HAL_Delay(1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f002 fdbe 	bl	8004524 <HAL_Delay>
    //delayMicroseconds(2); //Guarantees the isoSPI will be in ready mode
    spi_read_byte(0xff);
 80019a8:	20ff      	movs	r0, #255	@ 0xff
 80019aa:	f001 f95f 	bl	8002c6c <spi_read_byte>
    cs_high();
 80019ae:	f001 f8ed 	bl	8002b8c <cs_high>
  for (int i =0; i<total_ic; i++)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbee      	blt.n	800199e <wakeup_idle+0x10>
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <wakeup_sleep>:

//Generic wakeup commannd to wake the LTC6813 from sleep
void wakeup_sleep(uint8_t total_ic)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e009      	b.n	80019ee <wakeup_sleep+0x24>
  {
    cs_low();
 80019da:	f001 f8cb 	bl	8002b74 <cs_low>
    HAL_Delay(1); // Guarantees the LTC6811 will be in standby
 80019de:	2001      	movs	r0, #1
 80019e0:	f002 fda0 	bl	8004524 <HAL_Delay>
		cs_high();
 80019e4:	f001 f8d2 	bl	8002b8c <cs_high>
  for (int i =0; i<total_ic; i++)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dbf1      	blt.n	80019da <wakeup_sleep+0x10>
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <cmd_68>:

//Generic function to write 68xx commands. Function calculated PEC for tx_cmd data
void cmd_68(uint8_t tx_cmd[2])
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;
  uint8_t md_bits;

  cmd[0] = tx_cmd[0];
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	723b      	strb	r3, [r7, #8]
  cmd[1] =  tx_cmd[1];
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	727b      	strb	r3, [r7, #9]
  cmd_pec = pec15_calc(2, cmd);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	4619      	mov	r1, r3
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f000 f8a2 	bl	8001b64 <pec15_calc>
 8001a20:	4603      	mov	r3, r0
 8001a22:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	72fb      	strb	r3, [r7, #11]
	cs_low();
 8001a34:	f001 f89e 	bl	8002b74 <cs_low>
  spi_write_array(4,cmd);
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	2004      	movs	r0, #4
 8001a40:	f001 f8b0 	bl	8002ba4 <spi_write_array>
	cs_high();
 8001a44:	f001 f8a2 	bl	8002b8c <cs_high>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <write_68>:

//Generic function to write 68xx commands and write payload data. Function calculated PEC for tx_cmd data
void write_68(uint8_t total_ic , uint8_t tx_cmd[2], uint8_t data[])
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
  const uint8_t BYTES_IN_REG = 6;
 8001a5e:	2306      	movs	r3, #6
 8001a60:	773b      	strb	r3, [r7, #28]
  const uint8_t CMD_LEN = 4+(8*total_ic);
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3304      	adds	r3, #4
 8001a6a:	76fb      	strb	r3, [r7, #27]
  uint8_t *cmd;
  uint16_t data_pec;
  uint16_t cmd_pec;
  uint8_t cmd_index;

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001a6c:	7efb      	ldrb	r3, [r7, #27]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00f fa2c 	bl	8010ecc <malloc>
 8001a74:	4603      	mov	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]
  cmd[0] = tx_cmd[0];
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	701a      	strb	r2, [r3, #0]
  cmd[1] = tx_cmd[1];
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	7852      	ldrb	r2, [r2, #1]
 8001a88:	701a      	strb	r2, [r3, #0]
  cmd_pec = pec15_calc(2, cmd);
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f000 f869 	bl	8001b64 <pec15_calc>
 8001a92:	4603      	mov	r3, r0
 8001a94:	827b      	strh	r3, [r7, #18]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001a96:	8a7b      	ldrh	r3, [r7, #18]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	8a7a      	ldrh	r2, [r7, #18]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	77bb      	strb	r3, [r7, #30]
 8001ab6:	e042      	b.n	8001b3e <write_68+0xee>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	777b      	strb	r3, [r7, #29]
 8001abc:	e016      	b.n	8001aec <write_68+0x9c>
    {
      cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001abe:	7fbb      	ldrb	r3, [r7, #30]
 8001ac0:	1e5a      	subs	r2, r3, #1
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	461a      	mov	r2, r3
 8001acc:	7f7b      	ldrb	r3, [r7, #29]
 8001ace:	4413      	add	r3, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	440b      	add	r3, r1
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001ae0:	7ffb      	ldrb	r3, [r7, #31]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001ae6:	7f7b      	ldrb	r3, [r7, #29]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	777b      	strb	r3, [r7, #29]
 8001aec:	7f7a      	ldrb	r2, [r7, #29]
 8001aee:	7f3b      	ldrb	r3, [r7, #28]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3e4      	bcc.n	8001abe <write_68+0x6e>
    }

    data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 8001af4:	7fbb      	ldrb	r3, [r7, #30]
 8001af6:	1e5a      	subs	r2, r3, #1
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	441a      	add	r2, r3
 8001b06:	7f3b      	ldrb	r3, [r7, #28]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f82a 	bl	8001b64 <pec15_calc>
 8001b10:	4603      	mov	r3, r0
 8001b12:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8001b14:	8a3b      	ldrh	r3, [r7, #16]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)data_pec;
 8001b24:	7ffb      	ldrb	r3, [r7, #31]
 8001b26:	3301      	adds	r3, #1
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	8a3a      	ldrh	r2, [r7, #16]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	3302      	adds	r3, #2
 8001b36:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8001b38:	7fbb      	ldrb	r3, [r7, #30]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	77bb      	strb	r3, [r7, #30]
 8001b3e:	7fbb      	ldrb	r3, [r7, #30]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1b9      	bne.n	8001ab8 <write_68+0x68>
  }


  cs_low();
 8001b44:	f001 f816 	bl	8002b74 <cs_low>
  spi_write_array(CMD_LEN, cmd);
 8001b48:	7efb      	ldrb	r3, [r7, #27]
 8001b4a:	6979      	ldr	r1, [r7, #20]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 f829 	bl	8002ba4 <spi_write_array>
  cs_high();
 8001b52:	f001 f81b 	bl	8002b8c <cs_high>
  free(cmd);
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f00f f9c0 	bl	8010edc <free>
}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;

  remainder = 16;//initialize the PEC
 8001b70:	2310      	movs	r3, #16
 8001b72:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001b74:	2300      	movs	r3, #0
 8001b76:	737b      	strb	r3, [r7, #13]
 8001b78:	e019      	b.n	8001bae <pec15_calc+0x4a>
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	09db      	lsrs	r3, r3, #7
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	7b7a      	ldrb	r2, [r7, #13]
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	440a      	add	r2, r1
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	4053      	eors	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	817b      	strh	r3, [r7, #10]

    remainder = (remainder<<8)^crc15Table[addr];
 8001b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	897b      	ldrh	r3, [r7, #10]
 8001b9a:	490b      	ldr	r1, [pc, #44]	@ (8001bc8 <pec15_calc+0x64>)
 8001b9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4053      	eors	r3, r2
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	3301      	adds	r3, #1
 8001bac:	737b      	strb	r3, [r7, #13]
 8001bae:	7b7a      	ldrb	r2, [r7, #13]
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3e1      	bcc.n	8001b7a <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	b29b      	uxth	r3, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	080115bc 	.word	0x080115bc

08001bcc <LTC681x_adcv>:
void LTC681x_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	71bb      	strb	r3, [r7, #6]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	105b      	asrs	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x02;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	3302      	adds	r3, #2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	01db      	lsls	r3, r3, #7
 8001bf6:	73fb      	strb	r3, [r7, #15]
  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	4413      	add	r3, r2
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	4413      	add	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3360      	adds	r3, #96	@ 0x60
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fef3 	bl	8001a00 <cmd_68>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <LTC681x_adax>:
//Start a GPIO and Vref2 Conversion
void LTC681x_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	105b      	asrs	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x04;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	3304      	adds	r3, #4
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	01db      	lsls	r3, r3, #7
 8001c4a:	73fb      	strb	r3, [r7, #15]
  cmd[1] = md_bits + 0x60 + CHG ;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	4413      	add	r3, r2
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3360      	adds	r3, #96	@ 0x60
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fece 	bl	8001a00 <cmd_68>

}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <LTC681x_rdcv_reg>:
// Reads the raw cell voltage register data
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	603a      	str	r2, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1)     //1: RDCVA
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d104      	bne.n	8001c90 <LTC681x_rdcv_reg+0x24>
  {
    cmd[1] = 0x04;
 8001c86:	2304      	movs	r3, #4
 8001c88:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	723b      	strb	r3, [r7, #8]
 8001c8e:	e026      	b.n	8001cde <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 2) //2: RDCVB
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d104      	bne.n	8001ca0 <LTC681x_rdcv_reg+0x34>
  {
    cmd[1] = 0x06;
 8001c96:	2306      	movs	r3, #6
 8001c98:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	723b      	strb	r3, [r7, #8]
 8001c9e:	e01e      	b.n	8001cde <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 3) //3: RDCVC
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d104      	bne.n	8001cb0 <LTC681x_rdcv_reg+0x44>
  {
    cmd[1] = 0x08;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001caa:	2300      	movs	r3, #0
 8001cac:	723b      	strb	r3, [r7, #8]
 8001cae:	e016      	b.n	8001cde <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 4) //4: RDCVD
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d104      	bne.n	8001cc0 <LTC681x_rdcv_reg+0x54>
  {
    cmd[1] = 0x0A;
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	723b      	strb	r3, [r7, #8]
 8001cbe:	e00e      	b.n	8001cde <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 5) //4: RDCVE
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d104      	bne.n	8001cd0 <LTC681x_rdcv_reg+0x64>
  {
    cmd[1] = 0x09;
 8001cc6:	2309      	movs	r3, #9
 8001cc8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	723b      	strb	r3, [r7, #8]
 8001cce:	e006      	b.n	8001cde <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 6) //4: RDCVF
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d103      	bne.n	8001cde <LTC681x_rdcv_reg+0x72>
  {
    cmd[1] = 0x0B;
 8001cd6:	230b      	movs	r3, #11
 8001cd8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	723b      	strb	r3, [r7, #8]
  }


  cmd_pec = pec15_calc(2, cmd);
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7ff ff3d 	bl	8001b64 <pec15_calc>
 8001cea:	4603      	mov	r3, r0
 8001cec:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001cee:	89bb      	ldrh	r3, [r7, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001cf8:	89bb      	ldrh	r3, [r7, #12]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	72fb      	strb	r3, [r7, #11]

  cs_low();
 8001cfe:	f000 ff39 	bl	8002b74 <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	fb12 f303 	smulbb	r3, r2, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f107 0008 	add.w	r0, r7, #8
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	2104      	movs	r1, #4
 8001d14:	f000 ff6a 	bl	8002bec <spi_write_read>
  cs_high();
 8001d18:	f000 ff38 	bl	8002b8c <cs_high>

}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <parse_cells>:

//helper function that parses voltage measurement registers
int8_t parse_cells(uint8_t current_ic, uint8_t cell_reg, uint8_t cell_data[], uint16_t *cell_codes, uint8_t *ic_pec)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60ba      	str	r2, [r7, #8]
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	460b      	mov	r3, r1
 8001d34:	73bb      	strb	r3, [r7, #14]

  const uint8_t BYT_IN_REG = 6;
 8001d36:	2306      	movs	r3, #6
 8001d38:	773b      	strb	r3, [r7, #28]
  const uint8_t CELL_IN_REG = 3;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	76fb      	strb	r3, [r7, #27]
  int8_t pec_error = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	77fb      	strb	r3, [r7, #31]
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	77bb      	strb	r3, [r7, #30]


  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001d48:	2300      	movs	r3, #0
 8001d4a:	777b      	strb	r3, [r7, #29]
 8001d4c:	e01f      	b.n	8001d8e <parse_cells+0x6a>
  {
    // loops once for each of the 3 cell voltage codes in the register

    parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 8001d4e:	7fbb      	ldrb	r3, [r7, #30]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	7fbb      	ldrb	r3, [r7, #30]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	440b      	add	r3, r1
 8001d68:	82bb      	strh	r3, [r7, #20]
    // create the parsed cell voltage code
    cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001d6a:	7f7a      	ldrb	r2, [r7, #29]
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	7ef9      	ldrb	r1, [r7, #27]
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	8aba      	ldrh	r2, [r7, #20]
 8001d80:	801a      	strh	r2, [r3, #0]
    data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001d82:	7fbb      	ldrb	r3, [r7, #30]
 8001d84:	3302      	adds	r3, #2
 8001d86:	77bb      	strb	r3, [r7, #30]
  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001d88:	7f7b      	ldrb	r3, [r7, #29]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	777b      	strb	r3, [r7, #29]
 8001d8e:	7f7a      	ldrb	r2, [r7, #29]
 8001d90:	7efb      	ldrb	r3, [r7, #27]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d3db      	bcc.n	8001d4e <parse_cells+0x2a>
    //must increment by two for each parsed cell code
  }

  received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001d96:	7fbb      	ldrb	r3, [r7, #30]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	7fbb      	ldrb	r3, [r7, #30]
 8001da6:	3301      	adds	r3, #1
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	440b      	add	r3, r1
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	833b      	strh	r3, [r7, #24]
  //after the 6 cell voltage data bytes
  data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	441a      	add	r2, r3
 8001dc0:	7f3b      	ldrb	r3, [r7, #28]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fecd 	bl	8001b64 <pec15_calc>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	82fb      	strh	r3, [r7, #22]

  if (received_pec != data_pec)
 8001dce:	8b3a      	ldrh	r2, [r7, #24]
 8001dd0:	8afb      	ldrh	r3, [r7, #22]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d008      	beq.n	8001de8 <parse_cells+0xc4>
  {
    pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]
    ic_pec[cell_reg-1]=1;
 8001dda:	7bbb      	ldrb	r3, [r7, #14]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001de0:	4413      	add	r3, r2
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e005      	b.n	8001df4 <parse_cells+0xd0>
  }
  else
  {
    ic_pec[cell_reg-1]=0;
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dee:	4413      	add	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  }
  data_counter=data_counter+2;
 8001df4:	7fbb      	ldrb	r3, [r7, #30]
 8001df6:	3302      	adds	r3, #2
 8001df8:	77bb      	strb	r3, [r7, #30]
  return(pec_error);
 8001dfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	603a      	str	r2, [r7, #0]
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	460b      	mov	r3, r1
 8001e14:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8001e16:	2308      	movs	r3, #8
 8001e18:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d104      	bne.n	8001e2a <LTC681x_rdaux_reg+0x24>
  {
    cmd[1] = 0x0C;
 8001e20:	230c      	movs	r3, #12
 8001e22:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	723b      	strb	r3, [r7, #8]
 8001e28:	e01b      	b.n	8001e62 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 2)  //Read back auxiliary group B
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d104      	bne.n	8001e3a <LTC681x_rdaux_reg+0x34>
  {
    cmd[1] = 0x0e;
 8001e30:	230e      	movs	r3, #14
 8001e32:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001e34:	2300      	movs	r3, #0
 8001e36:	723b      	strb	r3, [r7, #8]
 8001e38:	e013      	b.n	8001e62 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 3)  //Read back auxiliary group C
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d104      	bne.n	8001e4a <LTC681x_rdaux_reg+0x44>
  {
    cmd[1] = 0x0D;
 8001e40:	230d      	movs	r3, #13
 8001e42:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	723b      	strb	r3, [r7, #8]
 8001e48:	e00b      	b.n	8001e62 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 4)  //Read back auxiliary group D
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d104      	bne.n	8001e5a <LTC681x_rdaux_reg+0x54>
  {
    cmd[1] = 0x0F;
 8001e50:	230f      	movs	r3, #15
 8001e52:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001e54:	2300      	movs	r3, #0
 8001e56:	723b      	strb	r3, [r7, #8]
 8001e58:	e003      	b.n	8001e62 <LTC681x_rdaux_reg+0x5c>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = pec15_calc(2, cmd);
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4619      	mov	r1, r3
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f7ff fe7b 	bl	8001b64 <pec15_calc>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001e72:	89bb      	ldrh	r3, [r7, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001e7c:	89bb      	ldrh	r3, [r7, #12]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	72fb      	strb	r3, [r7, #11]

  cs_low();
 8001e82:	f000 fe77 	bl	8002b74 <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	fb12 f303 	smulbb	r3, r2, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f107 0008 	add.w	r0, r7, #8
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	2104      	movs	r1, #4
 8001e98:	f000 fea8 	bl	8002bec <spi_write_read>
  cs_high();
 8001e9c:	f000 fe76 	bl	8002b8c <cs_high>

}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <LTC681x_rdcv>:
//Reads and parses the LTC681x cell voltage registers.
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	603a      	str	r2, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	75fb      	strb	r3, [r7, #23]
  uint8_t *cell_data;
  uint8_t c_ic = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75bb      	strb	r3, [r7, #22]
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00f f801 	bl	8010ecc <malloc>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d14b      	bne.n	8001f6c <LTC681x_rdcv+0xc4>
  {
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	757b      	strb	r3, [r7, #21]
 8001ed8:	e041      	b.n	8001f5e <LTC681x_rdcv+0xb6>
    {
      LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 8001eda:	79b9      	ldrb	r1, [r7, #6]
 8001edc:	7d7b      	ldrb	r3, [r7, #21]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fec3 	bl	8001c6c <LTC681x_rdcv_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e031      	b.n	8001f50 <LTC681x_rdcv+0xa8>
      {
        if (ic->isospi_reverse == false)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <LTC681x_rdcv+0x5a>
        {
          c_ic = current_ic;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	75bb      	strb	r3, [r7, #22]
 8001f00:	e006      	b.n	8001f10 <LTC681x_rdcv+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	b2d8      	uxtb	r0, r3
                                            &ic[c_ic].cells.c_codes[0],
 8001f14:	7dbb      	ldrb	r3, [r7, #22]
 8001f16:	22e8      	movs	r2, #232	@ 0xe8
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001f20:	f103 041e 	add.w	r4, r3, #30
                                            &ic[c_ic].cells.pec_match[0]);
 8001f24:	7dbb      	ldrb	r3, [r7, #22]
 8001f26:	22e8      	movs	r2, #232	@ 0xe8
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 8001f30:	3342      	adds	r3, #66	@ 0x42
 8001f32:	7d79      	ldrb	r1, [r7, #21]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	4623      	mov	r3, r4
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	f7ff fef3 	bl	8001d24 <parse_cells>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	4413      	add	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbc9      	blt.n	8001eec <LTC681x_rdcv+0x44>
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 8001f58:	7d7b      	ldrb	r3, [r7, #21]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	757b      	strb	r3, [r7, #21]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001f64:	7d7a      	ldrb	r2, [r7, #21]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d9b7      	bls.n	8001eda <LTC681x_rdcv+0x32>
 8001f6a:	e043      	b.n	8001ff4 <LTC681x_rdcv+0x14c>
    }
  }

  else
  {
    LTC681x_rdcv_reg(reg, total_ic,cell_data);
 8001f6c:	79b9      	ldrb	r1, [r7, #6]
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fe7a 	bl	8001c6c <LTC681x_rdcv_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e036      	b.n	8001fec <LTC681x_rdcv+0x144>
    {
      if (ic->isospi_reverse == false)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <LTC681x_rdcv+0xec>
      {
        c_ic = current_ic;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	75bb      	strb	r3, [r7, #22]
 8001f92:	e006      	b.n	8001fa2 <LTC681x_rdcv+0xfa>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	79ba      	ldrb	r2, [r7, #6]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	b2d8      	uxtb	r0, r3
 8001fa6:	7dbb      	ldrb	r3, [r7, #22]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	189c      	adds	r4, r3, r2
                                          &ic[c_ic].cells.c_codes[0],
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	22e8      	movs	r2, #232	@ 0xe8
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001fbc:	f103 051e 	add.w	r5, r3, #30
                                          &ic[c_ic].cells.pec_match[0]);
 8001fc0:	7dbb      	ldrb	r3, [r7, #22]
 8001fc2:	22e8      	movs	r2, #232	@ 0xe8
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001fcc:	3342      	adds	r3, #66	@ 0x42
 8001fce:	79f9      	ldrb	r1, [r7, #7]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	f7ff fea5 	bl	8001d24 <parse_cells>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbc4      	blt.n	8001f7e <LTC681x_rdcv+0xd6>
    }
  }
  LTC681x_check_pec(total_ic,CELL,ic);
 8001ff4:	79bb      	ldrb	r3, [r7, #6]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f92c 	bl	8002258 <LTC681x_check_pec>
  free(cell_data);
 8002000:	68b8      	ldr	r0, [r7, #8]
 8002002:	f00e ff6b 	bl	8010edc <free>
  return(pec_error);
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af02      	add	r7, sp, #8
 8002016:	4603      	mov	r3, r0
 8002018:	603a      	str	r2, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	460b      	mov	r3, r1
 800201e:	71bb      	strb	r3, [r7, #6]
  uint8_t *data;
  int8_t pec_error = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
  uint8_t c_ic =0;
 8002024:	2300      	movs	r3, #0
 8002026:	75bb      	strb	r3, [r7, #22]
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4618      	mov	r0, r3
 800202e:	f00e ff4d 	bl	8010ecc <malloc>
 8002032:	4603      	mov	r3, r0
 8002034:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d147      	bne.n	80020cc <LTC681x_rdaux+0xbc>
  {
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 800203c:	2301      	movs	r3, #1
 800203e:	757b      	strb	r3, [r7, #21]
 8002040:	e03d      	b.n	80020be <LTC681x_rdaux+0xae>
    {
      LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 8002042:	79b9      	ldrb	r1, [r7, #6]
 8002044:	7d7b      	ldrb	r3, [r7, #21]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fedc 	bl	8001e06 <LTC681x_rdaux_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	e02d      	b.n	80020b0 <LTC681x_rdaux+0xa0>
      {
        if (ic->isospi_reverse == false)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <LTC681x_rdaux+0x5a>
        {
          c_ic = current_ic;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	75bb      	strb	r3, [r7, #22]
 8002068:	e006      	b.n	8002078 <LTC681x_rdaux+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	79ba      	ldrb	r2, [r7, #6]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	b2d8      	uxtb	r0, r3
                                &ic[c_ic].aux.a_codes[0],
 800207c:	7dbb      	ldrb	r3, [r7, #22]
 800207e:	22e8      	movs	r2, #232	@ 0xe8
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8002088:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                                &ic[c_ic].aux.pec_match[0]);
 800208c:	7dbb      	ldrb	r3, [r7, #22]
 800208e:	22e8      	movs	r2, #232	@ 0xe8
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8002098:	335a      	adds	r3, #90	@ 0x5a
 800209a:	7d79      	ldrb	r1, [r7, #21]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4623      	mov	r3, r4
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	f7ff fe3f 	bl	8001d24 <parse_cells>
 80020a6:	4603      	mov	r3, r0
 80020a8:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	3301      	adds	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbcd      	blt.n	8002054 <LTC681x_rdaux+0x44>
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 80020b8:	7d7b      	ldrb	r3, [r7, #21]
 80020ba:	3301      	adds	r3, #1
 80020bc:	757b      	strb	r3, [r7, #21]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80020c4:	7d7a      	ldrb	r2, [r7, #21]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d9bb      	bls.n	8002042 <LTC681x_rdaux+0x32>
 80020ca:	e03a      	b.n	8002142 <LTC681x_rdaux+0x132>
      }
    }
  }
  else
  {
    LTC681x_rdaux_reg(reg, total_ic, data);
 80020cc:	79b9      	ldrb	r1, [r7, #6]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe97 	bl	8001e06 <LTC681x_rdaux_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e02d      	b.n	800213a <LTC681x_rdaux+0x12a>
    {
      if (ic->isospi_reverse == false)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <LTC681x_rdaux+0xe4>
      {
        c_ic = current_ic;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	75bb      	strb	r3, [r7, #22]
 80020f2:	e006      	b.n	8002102 <LTC681x_rdaux+0xf2>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = parse_cells(current_ic,reg, data,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	b2d8      	uxtb	r0, r3
                              &ic[c_ic].aux.a_codes[0],
 8002106:	7dbb      	ldrb	r3, [r7, #22]
 8002108:	22e8      	movs	r2, #232	@ 0xe8
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 8002112:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                              &ic[c_ic].aux.pec_match[0]);
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	22e8      	movs	r2, #232	@ 0xe8
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 8002122:	335a      	adds	r3, #90	@ 0x5a
 8002124:	79f9      	ldrb	r1, [r7, #7]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	4623      	mov	r3, r4
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f7ff fdfa 	bl	8001d24 <parse_cells>
 8002130:	4603      	mov	r3, r0
 8002132:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbcd      	blt.n	80020de <LTC681x_rdaux+0xce>
    }

  }
  LTC681x_check_pec(total_ic,AUX,ic);
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	2102      	movs	r1, #2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f885 	bl	8002258 <LTC681x_check_pec>
  free(data);
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f00e fec4 	bl	8010edc <free>
  return (pec_error);
 8002154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <LTC681x_wrcfg>:

//Write the LTC681x CFGRA
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]
                  )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0c4      	sub	sp, #272	@ 0x110
 8002164:	af00      	add	r7, sp, #0
 8002166:	4602      	mov	r2, r0
 8002168:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800216c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002170:	6019      	str	r1, [r3, #0]
 8002172:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002176:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800217a:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[2] = {0x00 , 0x01} ;
 800217c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002180:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
  uint8_t write_buffer[256];
  uint8_t write_count = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  uint8_t c_ic = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002190:	2300      	movs	r3, #0
 8002192:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002196:	e045      	b.n	8002224 <LTC681x_wrcfg+0xc4>
  {
    if (ic->isospi_reverse == true)
 8002198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800219c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <LTC681x_wrcfg+0x54>
    {
      c_ic = current_ic;
 80021aa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80021ae:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80021b2:	e00b      	b.n	80021cc <LTC681x_wrcfg+0x6c>
    }
    else
    {
      c_ic = total_ic - current_ic - 1;
 80021b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021b8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    }

    for (uint8_t data = 0; data<6; data++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80021d2:	e01e      	b.n	8002212 <LTC681x_wrcfg+0xb2>
    {
      write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80021d4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80021d8:	22e8      	movs	r2, #232	@ 0xe8
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80021e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	18d1      	adds	r1, r2, r3
 80021ea:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80021ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80021f2:	5c89      	ldrb	r1, [r1, r2]
 80021f4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80021f8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80021fc:	54d1      	strb	r1, [r2, r3]
      write_count++;
 80021fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002202:	3301      	adds	r3, #1
 8002204:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    for (uint8_t data = 0; data<6; data++)
 8002208:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800220c:	3301      	adds	r3, #1
 800220e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002212:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002216:	2b05      	cmp	r3, #5
 8002218:	d9dc      	bls.n	80021d4 <LTC681x_wrcfg+0x74>
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800221a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800221e:	3301      	adds	r3, #1
 8002220:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002228:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800222c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3b0      	bcc.n	8002198 <LTC681x_wrcfg+0x38>
    }
  }
  write_68(total_ic, cmd, write_buffer);
 8002236:	f107 0208 	add.w	r2, r7, #8
 800223a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800223e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002242:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc01 	bl	8001a50 <write_68>
}
 800224e:	bf00      	nop
 8002250:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <LTC681x_check_pec>:
  return(error);
}

//Helper function that increments PEC counters
void LTC681x_check_pec(uint8_t total_ic,uint8_t reg, cell_asic ic[])
{
 8002258:	b480      	push	{r7}
 800225a:	b08b      	sub	sp, #44	@ 0x2c
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	603a      	str	r2, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	460b      	mov	r3, r1
 8002266:	71bb      	strb	r3, [r7, #6]
  switch (reg)
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	2b04      	cmp	r3, #4
 800226c:	f200 8191 	bhi.w	8002592 <LTC681x_check_pec+0x33a>
 8002270:	a201      	add	r2, pc, #4	@ (adr r2, 8002278 <LTC681x_check_pec+0x20>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	0800228d 	.word	0x0800228d
 800227c:	08002389 	.word	0x08002389
 8002280:	0800243b 	.word	0x0800243b
 8002284:	080024e7 	.word	0x080024e7
 8002288:	0800230b 	.word	0x0800230b
  {
    case CFGRA:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002290:	e036      	b.n	8002300 <LTC681x_check_pec+0xa8>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	22e8      	movs	r2, #232	@ 0xe8
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	21e8      	movs	r1, #232	@ 0xe8
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	440b      	add	r3, r1
 80022ae:	7b9b      	ldrb	r3, [r3, #14]
 80022b0:	4618      	mov	r0, r3
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	21e8      	movs	r1, #232	@ 0xe8
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	440b      	add	r3, r1
 80022be:	4402      	add	r2, r0
 80022c0:	b292      	uxth	r2, r2
 80022c2:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	22e8      	movs	r2, #232	@ 0xe8
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	21e8      	movs	r1, #232	@ 0xe8
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	6839      	ldr	r1, [r7, #0]
 80022e0:	440b      	add	r3, r1
 80022e2:	7b9b      	ldrb	r3, [r3, #14]
 80022e4:	4618      	mov	r0, r3
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	21e8      	movs	r1, #232	@ 0xe8
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	6839      	ldr	r1, [r7, #0]
 80022f0:	440b      	add	r3, r1
 80022f2:	4402      	add	r2, r0
 80022f4:	b292      	uxth	r2, r2
 80022f6:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002304:	429a      	cmp	r2, r3
 8002306:	dbc4      	blt.n	8002292 <LTC681x_check_pec+0x3a>
      }
      break;
 8002308:	e144      	b.n	8002594 <LTC681x_check_pec+0x33c>

    case CFGRB:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	e036      	b.n	800237e <LTC681x_check_pec+0x126>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	22e8      	movs	r2, #232	@ 0xe8
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4413      	add	r3, r2
 800231c:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	21e8      	movs	r1, #232	@ 0xe8
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	440b      	add	r3, r1
 800232c:	7f5b      	ldrb	r3, [r3, #29]
 800232e:	4618      	mov	r0, r3
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	21e8      	movs	r1, #232	@ 0xe8
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	440b      	add	r3, r1
 800233c:	4402      	add	r2, r0
 800233e:	b292      	uxth	r2, r2
 8002340:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	22e8      	movs	r2, #232	@ 0xe8
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	21e8      	movs	r1, #232	@ 0xe8
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	440b      	add	r3, r1
 8002360:	7f5b      	ldrb	r3, [r3, #29]
 8002362:	4618      	mov	r0, r3
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	21e8      	movs	r1, #232	@ 0xe8
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	440b      	add	r3, r1
 8002370:	4402      	add	r2, r0
 8002372:	b292      	uxth	r2, r2
 8002374:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	3301      	adds	r3, #1
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	6a3a      	ldr	r2, [r7, #32]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbc4      	blt.n	8002310 <LTC681x_check_pec+0xb8>
      }
      break;
 8002386:	e105      	b.n	8002594 <LTC681x_check_pec+0x33c>
    case CELL:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	e050      	b.n	8002430 <LTC681x_check_pec+0x1d8>
      {
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e043      	b.n	800241c <LTC681x_check_pec+0x1c4>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	22e8      	movs	r2, #232	@ 0xe8
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	21e8      	movs	r1, #232	@ 0xe8
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4419      	add	r1, r3
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	440b      	add	r3, r1
 80023b4:	3342      	adds	r3, #66	@ 0x42
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	21e8      	movs	r1, #232	@ 0xe8
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	440b      	add	r3, r1
 80023c6:	4402      	add	r2, r0
 80023c8:	b292      	uxth	r2, r2
 80023ca:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	22e8      	movs	r2, #232	@ 0xe8
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	441a      	add	r2, r3
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	3360      	adds	r3, #96	@ 0x60
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	889b      	ldrh	r3, [r3, #4]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	21e8      	movs	r1, #232	@ 0xe8
 80023e8:	fb01 f202 	mul.w	r2, r1, r2
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	4411      	add	r1, r2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	440a      	add	r2, r1
 80023f4:	3242      	adds	r2, #66	@ 0x42
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	4610      	mov	r0, r2
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	21e8      	movs	r1, #232	@ 0xe8
 80023fe:	fb01 f202 	mul.w	r2, r1, r2
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	440a      	add	r2, r1
 8002406:	4403      	add	r3, r0
 8002408:	b299      	uxth	r1, r3
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3360      	adds	r3, #96	@ 0x60
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	460a      	mov	r2, r1
 8002414:	809a      	strh	r2, [r3, #4]
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3301      	adds	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8002422:	461a      	mov	r2, r3
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	4293      	cmp	r3, r2
 8002428:	dbb4      	blt.n	8002394 <LTC681x_check_pec+0x13c>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbaa      	blt.n	800238e <LTC681x_check_pec+0x136>
        }
      }
      break;
 8002438:	e0ac      	b.n	8002594 <LTC681x_check_pec+0x33c>
    case AUX:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e04d      	b.n	80024dc <LTC681x_check_pec+0x284>
      {
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	e040      	b.n	80024c8 <LTC681x_check_pec+0x270>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	22e8      	movs	r2, #232	@ 0xe8
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	21e8      	movs	r1, #232	@ 0xe8
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	4419      	add	r1, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	440b      	add	r3, r1
 8002466:	335a      	adds	r3, #90	@ 0x5a
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	21e8      	movs	r1, #232	@ 0xe8
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	440b      	add	r3, r1
 8002478:	4402      	add	r2, r0
 800247a:	b292      	uxth	r2, r2
 800247c:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	22e8      	movs	r2, #232	@ 0xe8
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	3268      	adds	r2, #104	@ 0x68
 8002490:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	21e8      	movs	r1, #232	@ 0xe8
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4419      	add	r1, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	440b      	add	r3, r1
 80024a4:	335a      	adds	r3, #90	@ 0x5a
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	21e8      	movs	r1, #232	@ 0xe8
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	440b      	add	r3, r1
 80024b6:	4402      	add	r2, r0
 80024b8:	b291      	uxth	r1, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	3268      	adds	r2, #104	@ 0x68
 80024be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	3301      	adds	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80024ce:	461a      	mov	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	dbb7      	blt.n	8002446 <LTC681x_check_pec+0x1ee>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dbad      	blt.n	8002440 <LTC681x_check_pec+0x1e8>
        }
      }

      break;
 80024e4:	e056      	b.n	8002594 <LTC681x_check_pec+0x33c>
    case STAT:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e04d      	b.n	8002588 <LTC681x_check_pec+0x330>
      {

        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	e040      	b.n	8002574 <LTC681x_check_pec+0x31c>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22e8      	movs	r2, #232	@ 0xe8
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	21e8      	movs	r1, #232	@ 0xe8
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	4419      	add	r1, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	440b      	add	r3, r1
 8002512:	336b      	adds	r3, #107	@ 0x6b
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	21e8      	movs	r1, #232	@ 0xe8
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	440b      	add	r3, r1
 8002524:	4402      	add	r2, r0
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	22e8      	movs	r2, #232	@ 0xe8
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4413      	add	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	326c      	adds	r2, #108	@ 0x6c
 800253c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	21e8      	movs	r1, #232	@ 0xe8
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	4419      	add	r1, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	440b      	add	r3, r1
 8002550:	336b      	adds	r3, #107	@ 0x6b
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	21e8      	movs	r1, #232	@ 0xe8
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	440b      	add	r3, r1
 8002562:	4402      	add	r2, r0
 8002564:	b291      	uxth	r1, r2
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	326c      	adds	r2, #108	@ 0x6c
 800256a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 800257a:	3b01      	subs	r3, #1
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	dbb7      	blt.n	80024f2 <LTC681x_check_pec+0x29a>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	dbad      	blt.n	80024ec <LTC681x_check_pec+0x294>
        }
      }
      break;
 8002590:	e000      	b.n	8002594 <LTC681x_check_pec+0x33c>
    default:
      break;
 8002592:	bf00      	nop
  }
}
 8002594:	bf00      	nop
 8002596:	372c      	adds	r7, #44	@ 0x2c
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LTC681x_reset_crc_count>:

//Helper Function to reset PEC counters
void LTC681x_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e051      	b.n	8002656 <LTC681x_reset_crc_count+0xb6>
  {
    ic[current_ic].crc_count.pec_count = 0;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	22e8      	movs	r2, #232	@ 0xe8
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4413      	add	r3, r2
 80025be:	2200      	movs	r2, #0
 80025c0:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    ic[current_ic].crc_count.cfgr_pec = 0;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	22e8      	movs	r2, #232	@ 0xe8
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
    for (int i=0; i<6; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e00e      	b.n	80025fa <LTC681x_reset_crc_count+0x5a>
    {
      ic[current_ic].crc_count.cell_pec[i]=0;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	22e8      	movs	r2, #232	@ 0xe8
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	441a      	add	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	3360      	adds	r3, #96	@ 0x60
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	2200      	movs	r2, #0
 80025f2:	809a      	strh	r2, [r3, #4]
    for (int i=0; i<6; i++)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	3301      	adds	r3, #1
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	dded      	ble.n	80025dc <LTC681x_reset_crc_count+0x3c>

    }
    for (int i=0; i<4; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e00d      	b.n	8002622 <LTC681x_reset_crc_count+0x82>
    {
      ic[current_ic].crc_count.aux_pec[i]=0;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	22e8      	movs	r2, #232	@ 0xe8
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	3268      	adds	r2, #104	@ 0x68
 8002616:	2100      	movs	r1, #0
 8002618:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<4; i++)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b03      	cmp	r3, #3
 8002626:	ddee      	ble.n	8002606 <LTC681x_reset_crc_count+0x66>
    }
    for (int i=0; i<2; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e00d      	b.n	800264a <LTC681x_reset_crc_count+0xaa>
    {
      ic[current_ic].crc_count.stat_pec[i]=0;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	22e8      	movs	r2, #232	@ 0xe8
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	326c      	adds	r2, #108	@ 0x6c
 800263e:	2100      	movs	r1, #0
 8002640:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<2; i++)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	3301      	adds	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	ddee      	ble.n	800262e <LTC681x_reset_crc_count+0x8e>
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	429a      	cmp	r2, r3
 800265c:	dba9      	blt.n	80025b2 <LTC681x_reset_crc_count+0x12>
    }
  }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LTC681x_init_cfg>:
*/
/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e015      	b.n	80026aa <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	e00c      	b.n	800269e <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	22e8      	movs	r2, #232	@ 0xe8
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	441a      	add	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3301      	adds	r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	ddef      	ble.n	8002684 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3e5      	bcc.n	800267e <LTC681x_init_cfg+0x12>
		}
	}
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6039      	str	r1, [r7, #0]
 80026c8:	4611      	mov	r1, r2
 80026ca:	461a      	mov	r2, r3
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	460b      	mov	r3, r1
 80026d2:	71bb      	strb	r3, [r7, #6]
 80026d4:	4613      	mov	r3, r2
 80026d6:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 80026d8:	79ba      	ldrb	r2, [r7, #6]
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f828 	bl	8002734 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 80026e4:	797a      	ldrb	r2, [r7, #5]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	6839      	ldr	r1, [r7, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f856 	bl	800279c <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f884 	bl	8002804 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f8ce 	bl	80028a4 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f957 	bl	80029c2 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8002714:	8bba      	ldrh	r2, [r7, #28]
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f9a1 	bl	8002a62 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8002720:	8c3a      	ldrh	r2, [r7, #32]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f9e1 	bl	8002aee <LTC681x_set_cfgr_ov>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <LTC681x_set_cfgr_refon>:

//Helper function to set the REFON bit
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic ic[], bool refon)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	71bb      	strb	r3, [r7, #6]
  if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8002744:	79bb      	ldrb	r3, [r7, #6]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <LTC681x_set_cfgr_refon+0x3a>
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	22e8      	movs	r2, #232	@ 0xe8
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	21e8      	movs	r1, #232	@ 0xe8
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	440b      	add	r3, r1
 8002764:	f042 0204 	orr.w	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 800276c:	e010      	b.n	8002790 <LTC681x_set_cfgr_refon+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	22e8      	movs	r2, #232	@ 0xe8
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	4413      	add	r3, r2
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	21e8      	movs	r1, #232	@ 0xe8
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	440b      	add	r3, r1
 8002788:	f022 0204 	bic.w	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LTC681x_set_cfgr_adcopt>:

//Helper function to set the adcopt bit
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic ic[], bool adcopt)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71bb      	strb	r3, [r7, #6]
  if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 80027ac:	79bb      	ldrb	r3, [r7, #6]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d011      	beq.n	80027d6 <LTC681x_set_cfgr_adcopt+0x3a>
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	22e8      	movs	r2, #232	@ 0xe8
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	21e8      	movs	r1, #232	@ 0xe8
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	440b      	add	r3, r1
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 80027d4:	e010      	b.n	80027f8 <LTC681x_set_cfgr_adcopt+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	22e8      	movs	r2, #232	@ 0xe8
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	21e8      	movs	r1, #232	@ 0xe8
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	440b      	add	r3, r1
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LTC681x_set_cfgr_gpio>:

//Helper function to set GPIO bits
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic ic[],bool gpio[5])
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<5; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e03b      	b.n	8002890 <LTC681x_set_cfgr_gpio+0x8c>
  {
    if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d018      	beq.n	8002856 <LTC681x_set_cfgr_gpio+0x52>
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	22e8      	movs	r2, #232	@ 0xe8
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b25a      	sxtb	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3303      	adds	r3, #3
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	b25b      	sxtb	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b259      	sxtb	r1, r3
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	22e8      	movs	r2, #232	@ 0xe8
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	4413      	add	r3, r2
 8002850:	b2ca      	uxtb	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e019      	b.n	800288a <LTC681x_set_cfgr_gpio+0x86>
    else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	22e8      	movs	r2, #232	@ 0xe8
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b25a      	sxtb	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3303      	adds	r3, #3
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	b25b      	sxtb	r3, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	b25b      	sxtb	r3, r3
 8002876:	4013      	ands	r3, r2
 8002878:	b259      	sxtb	r1, r3
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	22e8      	movs	r2, #232	@ 0xe8
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	b2ca      	uxtb	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
  for (int i =0; i<5; i++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b04      	cmp	r3, #4
 8002894:	ddc0      	ble.n	8002818 <LTC681x_set_cfgr_gpio+0x14>
  }
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LTC681x_set_cfgr_dis>:

//Helper function to control discharge
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic ic[],bool dcc[12])
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<8; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e039      	b.n	800292c <LTC681x_set_cfgr_dis+0x88>
  {
    if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <LTC681x_set_cfgr_dis+0x50>
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	22e8      	movs	r2, #232	@ 0xe8
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4413      	add	r3, r2
 80028d0:	791b      	ldrb	r3, [r3, #4]
 80028d2:	b25a      	sxtb	r2, r3
 80028d4:	2101      	movs	r1, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	b259      	sxtb	r1, r3
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	22e8      	movs	r2, #232	@ 0xe8
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4413      	add	r3, r2
 80028ee:	b2ca      	uxtb	r2, r1
 80028f0:	711a      	strb	r2, [r3, #4]
 80028f2:	e018      	b.n	8002926 <LTC681x_set_cfgr_dis+0x82>
    else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	22e8      	movs	r2, #232	@ 0xe8
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	4413      	add	r3, r2
 8002900:	791b      	ldrb	r3, [r3, #4]
 8002902:	b25a      	sxtb	r2, r3
 8002904:	2101      	movs	r1, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	b25b      	sxtb	r3, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	b25b      	sxtb	r3, r3
 8002912:	4013      	ands	r3, r2
 8002914:	b259      	sxtb	r1, r3
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	22e8      	movs	r2, #232	@ 0xe8
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	b2ca      	uxtb	r2, r1
 8002924:	711a      	strb	r2, [r3, #4]
  for (int i =0; i<8; i++)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b07      	cmp	r3, #7
 8002930:	ddc2      	ble.n	80028b8 <LTC681x_set_cfgr_dis+0x14>
  }
  for (int i =0; i<4; i++)
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e03a      	b.n	80029ae <LTC681x_set_cfgr_dis+0x10a>
  {
    if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3308      	adds	r3, #8
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d017      	beq.n	8002976 <LTC681x_set_cfgr_dis+0xd2>
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	22e8      	movs	r2, #232	@ 0xe8
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4413      	add	r3, r2
 8002952:	795b      	ldrb	r3, [r3, #5]
 8002954:	b25a      	sxtb	r2, r3
 8002956:	2101      	movs	r1, #1
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	b25b      	sxtb	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	b259      	sxtb	r1, r3
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	22e8      	movs	r2, #232	@ 0xe8
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4413      	add	r3, r2
 8002970:	b2ca      	uxtb	r2, r1
 8002972:	715a      	strb	r2, [r3, #5]
 8002974:	e018      	b.n	80029a8 <LTC681x_set_cfgr_dis+0x104>
    else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	22e8      	movs	r2, #232	@ 0xe8
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	795b      	ldrb	r3, [r3, #5]
 8002984:	b25a      	sxtb	r2, r3
 8002986:	2101      	movs	r1, #1
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	b25b      	sxtb	r3, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	b25b      	sxtb	r3, r3
 8002994:	4013      	ands	r3, r2
 8002996:	b259      	sxtb	r1, r3
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	22e8      	movs	r2, #232	@ 0xe8
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	4413      	add	r3, r2
 80029a4:	b2ca      	uxtb	r2, r1
 80029a6:	715a      	strb	r2, [r3, #5]
  for (int i =0; i<4; i++)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3301      	adds	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	ddc1      	ble.n	8002938 <LTC681x_set_cfgr_dis+0x94>
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 80029c2:	b480      	push	{r7}
 80029c4:	b087      	sub	sp, #28
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e03b      	b.n	8002a4e <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d018      	beq.n	8002a14 <LTC681x_set_cfgr_dcto+0x52>
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	22e8      	movs	r2, #232	@ 0xe8
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	4413      	add	r3, r2
 80029ee:	795b      	ldrb	r3, [r3, #5]
 80029f0:	b25a      	sxtb	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b259      	sxtb	r1, r3
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	22e8      	movs	r2, #232	@ 0xe8
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b2ca      	uxtb	r2, r1
 8002a10:	715a      	strb	r2, [r3, #5]
 8002a12:	e019      	b.n	8002a48 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	22e8      	movs	r2, #232	@ 0xe8
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	4413      	add	r3, r2
 8002a20:	795b      	ldrb	r3, [r3, #5]
 8002a22:	b25a      	sxtb	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3304      	adds	r3, #4
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	b259      	sxtb	r1, r3
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	22e8      	movs	r2, #232	@ 0xe8
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	4413      	add	r3, r2
 8002a44:	b2ca      	uxtb	r2, r1
 8002a46:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	ddc0      	ble.n	80029d6 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LTC681x_set_cfgr_uv>:

//Helper Function to set uv value in CFG register
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic ic[],uint16_t uv)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	6039      	str	r1, [r7, #0]
 8002a6c:	71fb      	strb	r3, [r7, #7]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (uv/16)-1;
 8002a72:	88bb      	ldrh	r3, [r7, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	22e8      	movs	r2, #232	@ 0xe8
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	89fa      	ldrh	r2, [r7, #14]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	705a      	strb	r2, [r3, #1]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	22e8      	movs	r2, #232	@ 0xe8
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	789a      	ldrb	r2, [r3, #2]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	21e8      	movs	r1, #232	@ 0xe8
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f022 020f 	bic.w	r2, r2, #15
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	22e8      	movs	r2, #232	@ 0xe8
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	789b      	ldrb	r3, [r3, #2]
 8002abe:	b25a      	sxtb	r2, r3
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	b259      	sxtb	r1, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	22e8      	movs	r2, #232	@ 0xe8
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	b2ca      	uxtb	r2, r1
 8002ae0:	709a      	strb	r2, [r3, #2]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LTC681x_set_cfgr_ov>:

//helper function to set OV value in CFG register
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic ic[],uint16_t ov)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	6039      	str	r1, [r7, #0]
 8002af8:	71fb      	strb	r3, [r7, #7]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (ov/16);
 8002afe:	88bb      	ldrh	r3, [r7, #4]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8002b04:	89fb      	ldrh	r3, [r7, #14]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	22e8      	movs	r2, #232	@ 0xe8
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	70da      	strb	r2, [r3, #3]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	22e8      	movs	r2, #232	@ 0xe8
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	789a      	ldrb	r2, [r3, #2]
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	21e8      	movs	r1, #232	@ 0xe8
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	440b      	add	r3, r1
 8002b34:	f002 020f 	and.w	r2, r2, #15
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	22e8      	movs	r2, #232	@ 0xe8
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	789b      	ldrb	r3, [r3, #2]
 8002b4a:	b25a      	sxtb	r2, r3
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	b25b      	sxtb	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b259      	sxtb	r1, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	22e8      	movs	r2, #232	@ 0xe8
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	b2ca      	uxtb	r2, r1
 8002b66:	709a      	strb	r2, [r3, #2]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <cs_low>:
#include "LT_SPI.h"
#include "stm32l5xx_hal.h"
#include "spi.h"

void cs_low(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    // Set chip select pin low.
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	4802      	ldr	r0, [pc, #8]	@ (8002b88 <cs_low+0x14>)
 8002b7e:	f003 ffad 	bl	8006adc <HAL_GPIO_WritePin>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	42020000 	.word	0x42020000

08002b8c <cs_high>:

void cs_high(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	2110      	movs	r1, #16
 8002b94:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <cs_high+0x14>)
 8002b96:	f003 ffa1 	bl	8006adc <HAL_GPIO_WritePin>
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	42020000 	.word	0x42020000

08002ba4 <spi_write_array>:
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data, &ret_val, 1, HAL_MAX_DELAY);
}

void spi_write_array(uint8_t len,
                     uint8_t data[])
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
    uint8_t ret_val;
    uint8_t i;

    for ( i = 0; i < len; i++ )
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e00e      	b.n	8002bd4 <spi_write_array+0x30>
    {
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data[i], &ret_val, 1, HAL_MAX_DELAY);
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	18d1      	adds	r1, r2, r3
 8002bbc:	f107 020e 	add.w	r2, r7, #14
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4807      	ldr	r0, [pc, #28]	@ (8002be8 <spi_write_array+0x44>)
 8002bca:	f007 fdaa 	bl	800a722 <HAL_SPI_TransmitReceive>
    for ( i = 0; i < len; i++ )
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3ec      	bcc.n	8002bb6 <spi_write_array+0x12>
    }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000584 	.word	0x20000584

08002bec <spi_write_read>:

void spi_write_read(uint8_t  tx_Data[],
                    uint8_t  tx_len,
                    uint8_t* rx_data,
                    uint8_t  rx_len)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	72fb      	strb	r3, [r7, #11]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	72bb      	strb	r3, [r7, #10]
    uint8_t i;
    uint8_t data;

    // Transfer data to LTC6803
    for ( i = 0; i < tx_len; i++ )
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
 8002c04:	e00e      	b.n	8002c24 <spi_write_read+0x38>
    {
        // Transmit byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_Data[i], &data, 1, HAL_MAX_DELAY);
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	18d1      	adds	r1, r2, r3
 8002c0c:	f107 0216 	add.w	r2, r7, #22
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2301      	movs	r3, #1
 8002c18:	4813      	ldr	r0, [pc, #76]	@ (8002c68 <spi_write_read+0x7c>)
 8002c1a:	f007 fd82 	bl	800a722 <HAL_SPI_TransmitReceive>
    for ( i = 0; i < tx_len; i++ )
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	3301      	adds	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
 8002c24:	7dfa      	ldrb	r2, [r7, #23]
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3ec      	bcc.n	8002c06 <spi_write_read+0x1a>
    }

    // Receive data from DC2259A board.
    uint8_t adress = 0xFF;
 8002c2c:	23ff      	movs	r3, #255	@ 0xff
 8002c2e:	757b      	strb	r3, [r7, #21]
    for ( i = 0; i < rx_len; i++ )
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]
 8002c34:	e00e      	b.n	8002c54 <spi_write_read+0x68>
    {
        // Receive byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&adress, (uint8_t*)&rx_data[i], 1, HAL_MAX_DELAY);
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	f107 0115 	add.w	r1, r7, #21
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2301      	movs	r3, #1
 8002c48:	4807      	ldr	r0, [pc, #28]	@ (8002c68 <spi_write_read+0x7c>)
 8002c4a:	f007 fd6a 	bl	800a722 <HAL_SPI_TransmitReceive>
    for ( i = 0; i < rx_len; i++ )
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	3301      	adds	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
 8002c54:	7dfa      	ldrb	r2, [r7, #23]
 8002c56:	7abb      	ldrb	r3, [r7, #10]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3ec      	bcc.n	8002c36 <spi_write_read+0x4a>
    }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000584 	.word	0x20000584

08002c6c <spi_read_byte>:

// spi_read_byte

uint8_t spi_read_byte(uint8_t tx_dat)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if ( HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_dat, (uint8_t*)&data, 1, HAL_MAX_DELAY) == HAL_OK )
 8002c76:	f107 020f 	add.w	r2, r7, #15
 8002c7a:	1df9      	adds	r1, r7, #7
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2301      	movs	r3, #1
 8002c84:	4806      	ldr	r0, [pc, #24]	@ (8002ca0 <spi_read_byte+0x34>)
 8002c86:	f007 fd4c 	bl	800a722 <HAL_SPI_TransmitReceive>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <spi_read_byte+0x28>
    {
        return(data);
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	e000      	b.n	8002c96 <spi_read_byte+0x2a>
    }
		return(-1);
 8002c94:	23ff      	movs	r3, #255	@ 0xff
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000584 	.word	0x20000584

08002ca4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	@ 0x28
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
 8002cc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cc6:	4b33      	ldr	r3, [pc, #204]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cc8:	4a33      	ldr	r2, [pc, #204]	@ (8002d98 <MX_ADC1_Init+0xf4>)
 8002cca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ccc:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cd2:	4b30      	ldr	r3, [pc, #192]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cde:	4b2d      	ldr	r3, [pc, #180]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cea:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cf0:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002cf6:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002d0c:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d22:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d2a:	481a      	ldr	r0, [pc, #104]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d2c:	f001 fe3a 	bl	80049a4 <HAL_ADC_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002d36:	f000 fd5d 	bl	80037f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d42:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4811      	ldr	r0, [pc, #68]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d50:	f002 ffc6 	bl	8005ce0 <HAL_ADCEx_MultiModeConfigChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8002d5a:	f000 fd4b 	bl	80037f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <MX_ADC1_Init+0xf8>)
 8002d60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d62:	2306      	movs	r3, #6
 8002d64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <MX_ADC1_Init+0xfc>)
 8002d6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4806      	ldr	r0, [pc, #24]	@ (8002d94 <MX_ADC1_Init+0xf0>)
 8002d7c:	f002 fa2c 	bl	80051d8 <HAL_ADC_ConfigChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002d86:	f000 fd35 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	3728      	adds	r7, #40	@ 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000034c 	.word	0x2000034c
 8002d98:	42028000 	.word	0x42028000
 8002d9c:	0c900008 	.word	0x0c900008
 8002da0:	407f0000 	.word	0x407f0000

08002da4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002daa:	463b      	mov	r3, r7
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
 8002db8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dbc:	4a26      	ldr	r2, [pc, #152]	@ (8002e58 <MX_ADC2_Init+0xb4>)
 8002dbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002dc6:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dda:	2204      	movs	r2, #4
 8002ddc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002df8:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002e06:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002e0e:	4811      	ldr	r0, [pc, #68]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002e10:	f001 fdc8 	bl	80049a4 <HAL_ADC_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8002e1a:	f000 fceb 	bl	80037f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <MX_ADC2_Init+0xb8>)
 8002e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e22:	2306      	movs	r3, #6
 8002e24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <MX_ADC2_Init+0xbc>)
 8002e2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4806      	ldr	r0, [pc, #24]	@ (8002e54 <MX_ADC2_Init+0xb0>)
 8002e3c:	f002 f9cc 	bl	80051d8 <HAL_ADC_ConfigChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8002e46:	f000 fcd5 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200003b4 	.word	0x200003b4
 8002e58:	42028100 	.word	0x42028100
 8002e5c:	1d500080 	.word	0x1d500080
 8002e60:	407f0000 	.word	0x407f0000

08002e64 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	@ 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 031c 	add.w	r3, r7, #28
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a68      	ldr	r2, [pc, #416]	@ (8003024 <HAL_ADC_MspInit+0x1c0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d162      	bne.n	8002f4c <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e86:	4b68      	ldr	r3, [pc, #416]	@ (8003028 <HAL_ADC_MspInit+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a66      	ldr	r2, [pc, #408]	@ (8003028 <HAL_ADC_MspInit+0x1c4>)
 8002e8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e90:	4b65      	ldr	r3, [pc, #404]	@ (8003028 <HAL_ADC_MspInit+0x1c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002e98:	4b64      	ldr	r3, [pc, #400]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9c:	4a63      	ldr	r2, [pc, #396]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002e9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ChargeCurrent_Pin|ChargeCurrRef_Pin;
 8002ec8:	230c      	movs	r3, #12
 8002eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4855      	ldr	r0, [pc, #340]	@ (8003030 <HAL_ADC_MspInit+0x1cc>)
 8002edc:	f003 fc66 	bl	80067ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8002ee0:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002ee2:	4a55      	ldr	r2, [pc, #340]	@ (8003038 <HAL_ADC_MspInit+0x1d4>)
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ee6:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002ee8:	2205      	movs	r2, #5
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eec:	4b51      	ldr	r3, [pc, #324]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef2:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002efe:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f06:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f0e:	4b49      	ldr	r3, [pc, #292]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f10:	2220      	movs	r2, #32
 8002f12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002f14:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f1c:	4845      	ldr	r0, [pc, #276]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f1e:	f003 f863 	bl	8005fe8 <HAL_DMA_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002f28:	f000 fc64 	bl	80037f4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f2c:	2110      	movs	r1, #16
 8002f2e:	4841      	ldr	r0, [pc, #260]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f30:	f003 fa02 	bl	8006338 <HAL_DMA_ConfigChannelAttributes>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8002f3a:	f000 fc5b 	bl	80037f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a3c      	ldr	r2, [pc, #240]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f42:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f44:	4a3b      	ldr	r2, [pc, #236]	@ (8003034 <HAL_ADC_MspInit+0x1d0>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002f4a:	e066      	b.n	800301a <HAL_ADC_MspInit+0x1b6>
  else if(adcHandle->Instance==ADC2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	@ (800303c <HAL_ADC_MspInit+0x1d8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d161      	bne.n	800301a <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <HAL_ADC_MspInit+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a32      	ldr	r2, [pc, #200]	@ (8003028 <HAL_ADC_MspInit+0x1c4>)
 8002f5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002f60:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_ADC_MspInit+0x1c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002f68:	4b30      	ldr	r3, [pc, #192]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002f6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f74:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f80:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f84:	4a29      	ldr	r2, [pc, #164]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f8c:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_ADC_MspInit+0x1c8>)
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DischgCurr_Pin|DischgCurrRef_Pin;
 8002f98:	230c      	movs	r3, #12
 8002f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4825      	ldr	r0, [pc, #148]	@ (8003040 <HAL_ADC_MspInit+0x1dc>)
 8002fac:	f003 fbfe 	bl	80067ac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8002fb0:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fb2:	4a25      	ldr	r2, [pc, #148]	@ (8003048 <HAL_ADC_MspInit+0x1e4>)
 8002fb4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fb8:	2206      	movs	r2, #6
 8002fba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fbc:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fca:	2280      	movs	r2, #128	@ 0x80
 8002fcc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fdc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8002fe4:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fe6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002fec:	4815      	ldr	r0, [pc, #84]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8002fee:	f002 fffb 	bl	8005fe8 <HAL_DMA_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8002ff8:	f000 fbfc 	bl	80037f4 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	4811      	ldr	r0, [pc, #68]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8003000:	f003 f99a 	bl	8006338 <HAL_DMA_ConfigChannelAttributes>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 800300a:	f000 fbf3 	bl	80037f4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a0c      	ldr	r2, [pc, #48]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8003012:	651a      	str	r2, [r3, #80]	@ 0x50
 8003014:	4a0b      	ldr	r2, [pc, #44]	@ (8003044 <HAL_ADC_MspInit+0x1e0>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800301a:	bf00      	nop
 800301c:	3730      	adds	r7, #48	@ 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	42028000 	.word	0x42028000
 8003028:	200004ec 	.word	0x200004ec
 800302c:	40021000 	.word	0x40021000
 8003030:	42020800 	.word	0x42020800
 8003034:	2000041c 	.word	0x2000041c
 8003038:	4002001c 	.word	0x4002001c
 800303c:	42028100 	.word	0x42028100
 8003040:	42020000 	.word	0x42020000
 8003044:	20000484 	.word	0x20000484
 8003048:	40020008 	.word	0x40020008

0800304c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003052:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <MX_DMA_Init+0x60>)
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	4a15      	ldr	r2, [pc, #84]	@ (80030ac <MX_DMA_Init+0x60>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6493      	str	r3, [r2, #72]	@ 0x48
 800305e:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <MX_DMA_Init+0x60>)
 8003060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <MX_DMA_Init+0x60>)
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	4a0f      	ldr	r2, [pc, #60]	@ (80030ac <MX_DMA_Init+0x60>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6493      	str	r3, [r2, #72]	@ 0x48
 8003076:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <MX_DMA_Init+0x60>)
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	201d      	movs	r0, #29
 8003088:	f002 ff86 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800308c:	201d      	movs	r0, #29
 800308e:	f002 ff9d 	bl	8005fcc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	201e      	movs	r0, #30
 8003098:	f002 ff7e 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800309c:	201e      	movs	r0, #30
 800309e:	f002 ff95 	bl	8005fcc <HAL_NVIC_EnableIRQ>

}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030b6:	4a20      	ldr	r2, [pc, #128]	@ (8003138 <MX_FDCAN1_Init+0x88>)
 80030b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80030c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80030c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80030d2:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030da:	2200      	movs	r2, #0
 80030dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80030de:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030e0:	2210      	movs	r2, #16
 80030e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80030e4:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 80030fe:	2201      	movs	r2, #1
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 8003104:	2201      	movs	r2, #1
 8003106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 800310a:	2201      	movs	r2, #1
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 8003110:	2200      	movs	r2, #0
 8003112:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003114:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 8003116:	2200      	movs	r2, #0
 8003118:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 800311c:	2200      	movs	r2, #0
 800311e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003120:	4804      	ldr	r0, [pc, #16]	@ (8003134 <MX_FDCAN1_Init+0x84>)
 8003122:	f003 f99b 	bl	800645c <HAL_FDCAN_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800312c:	f000 fb62 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200004f0 	.word	0x200004f0
 8003138:	4000a400 	.word	0x4000a400

0800313c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b0ae      	sub	sp, #184	@ 0xb8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	2294      	movs	r2, #148	@ 0x94
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f00d ff73 	bl	8011048 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_FDCAN_MspInit+0xb4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d13d      	bne.n	80031e8 <HAL_FDCAN_MspInit+0xac>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800316c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003170:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003172:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003176:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003178:	f107 0310 	add.w	r3, r7, #16
 800317c:	4618      	mov	r0, r3
 800317e:	f006 fa91 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003188:	f000 fb34 	bl	80037f4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_FDCAN_MspInit+0xb8>)
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_FDCAN_MspInit+0xb8>)
 8003192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003196:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003198:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <HAL_FDCAN_MspInit+0xb8>)
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a4:	4b13      	ldr	r3, [pc, #76]	@ (80031f4 <HAL_FDCAN_MspInit+0xb8>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a8:	4a12      	ldr	r2, [pc, #72]	@ (80031f4 <HAL_FDCAN_MspInit+0xb8>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b0:	4b10      	ldr	r3, [pc, #64]	@ (80031f4 <HAL_FDCAN_MspInit+0xb8>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80031c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80031d6:	2309      	movs	r3, #9
 80031d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <HAL_FDCAN_MspInit+0xbc>)
 80031e4:	f003 fae2 	bl	80067ac <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80031e8:	bf00      	nop
 80031ea:	37b8      	adds	r7, #184	@ 0xb8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	4000a400 	.word	0x4000a400
 80031f4:	40021000 	.word	0x40021000
 80031f8:	42020400 	.word	0x42020400

080031fc <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003212:	4b71      	ldr	r3, [pc, #452]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003216:	4a70      	ldr	r2, [pc, #448]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800321e:	4b6e      	ldr	r3, [pc, #440]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800322a:	4b6b      	ldr	r3, [pc, #428]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	4a6a      	ldr	r2, [pc, #424]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003236:	4b68      	ldr	r3, [pc, #416]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	4b65      	ldr	r3, [pc, #404]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003246:	4a64      	ldr	r2, [pc, #400]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800324e:	4b62      	ldr	r3, [pc, #392]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	4b5f      	ldr	r3, [pc, #380]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325e:	4a5e      	ldr	r2, [pc, #376]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003266:	4b5c      	ldr	r3, [pc, #368]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	4b59      	ldr	r3, [pc, #356]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	4a58      	ldr	r2, [pc, #352]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327e:	4b56      	ldr	r3, [pc, #344]	@ (80033d8 <MX_GPIO_Init+0x1dc>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 800328a:	2200      	movs	r2, #0
 800328c:	f643 7111 	movw	r1, #16145	@ 0x3f11
 8003290:	4852      	ldr	r0, [pc, #328]	@ (80033dc <MX_GPIO_Init+0x1e0>)
 8003292:	f003 fc23 	bl	8006adc <HAL_GPIO_WritePin>
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A1_8_GPIO_Port, A1_8_Pin, GPIO_PIN_RESET);
 8003296:	2200      	movs	r2, #0
 8003298:	2101      	movs	r1, #1
 800329a:	4851      	ldr	r0, [pc, #324]	@ (80033e0 <MX_GPIO_Init+0x1e4>)
 800329c:	f003 fc1e 	bl	8006adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|A1_2_Pin|A1_3_Pin|A1_4_Pin, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 80032a6:	484f      	ldr	r0, [pc, #316]	@ (80033e4 <MX_GPIO_Init+0x1e8>)
 80032a8:	f003 fc18 	bl	8006adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 80032ac:	2200      	movs	r2, #0
 80032ae:	f643 41f3 	movw	r1, #15603	@ 0x3cf3
 80032b2:	484d      	ldr	r0, [pc, #308]	@ (80033e8 <MX_GPIO_Init+0x1ec>)
 80032b4:	f003 fc12 	bl	8006adc <HAL_GPIO_WritePin>
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A0_4_GPIO_Port, A0_4_Pin, GPIO_PIN_RESET);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2104      	movs	r1, #4
 80032bc:	484b      	ldr	r0, [pc, #300]	@ (80033ec <MX_GPIO_Init+0x1f0>)
 80032be:	f003 fc0d 	bl	8006adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_7_Pin WDT_Stm_Pin Enable1_Pin A1_1_Pin
                           A0_1_Pin A1_5_Pin A0_2_Pin A0_3_Pin */
  GPIO_InitStruct.Pin = A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 80032c2:	f643 7311 	movw	r3, #16145	@ 0x3f11
 80032c6:	617b      	str	r3, [r7, #20]
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c8:	2301      	movs	r3, #1
 80032ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2300      	movs	r3, #0
 80032d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	4619      	mov	r1, r3
 80032da:	4840      	ldr	r0, [pc, #256]	@ (80033dc <MX_GPIO_Init+0x1e0>)
 80032dc:	f003 fa66 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pin : A1_8_Pin */
  GPIO_InitStruct.Pin = A1_8_Pin;
 80032e0:	2301      	movs	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A1_8_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4619      	mov	r1, r3
 80032f6:	483a      	ldr	r0, [pc, #232]	@ (80033e0 <MX_GPIO_Init+0x1e4>)
 80032f8:	f003 fa58 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_8_Pin */
  GPIO_InitStruct.Pin = A0_8_Pin;
 80032fc:	2302      	movs	r3, #2
 80032fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_8_GPIO_Port, &GPIO_InitStruct);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4619      	mov	r1, r3
 800330e:	4834      	ldr	r0, [pc, #208]	@ (80033e0 <MX_GPIO_Init+0x1e4>)
 8003310:	f003 fa4c 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pins : HardwareFault_Pin OutputEnable_Pin */
  GPIO_InitStruct.Pin = HardwareFault_Pin|OutputEnable_Pin;
 8003314:	2322      	movs	r3, #34	@ 0x22
 8003316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	482d      	ldr	r0, [pc, #180]	@ (80033dc <MX_GPIO_Init+0x1e0>)
 8003328:	f003 fa40 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LTCSelfTestOK_Pin LTCSelfTest_Pin */
  GPIO_InitStruct.Pin = LTCSelfTestOK_Pin|LTCSelfTest_Pin;
 800332c:	2303      	movs	r3, #3
 800332e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	4619      	mov	r1, r3
 800333e:	4829      	ldr	r0, [pc, #164]	@ (80033e4 <MX_GPIO_Init+0x1e8>)
 8003340:	f003 fa34 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin A1_2_Pin A1_3_Pin A1_4_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|A1_2_Pin|A1_3_Pin|A1_4_Pin;
 8003344:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8003348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	4821      	ldr	r0, [pc, #132]	@ (80033e4 <MX_GPIO_Init+0x1e8>)
 800335e:	f003 fa25 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable2_Pin ErrorReset_Pin LED_A_Pin LED_R_Pin
                           LED_Y_Pin LED_G_Pin A0_5_Pin A1_6_Pin
                           A0_6_Pin A0_7_Pin */
  GPIO_InitStruct.Pin = Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 8003362:	f643 43f3 	movw	r3, #15603	@ 0x3cf3
 8003366:	617b      	str	r3, [r7, #20]
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003368:	2301      	movs	r3, #1
 800336a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4619      	mov	r1, r3
 800337a:	481b      	ldr	r0, [pc, #108]	@ (80033e8 <MX_GPIO_Init+0x1ec>)
 800337c:	f003 fa16 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Config4_Pin Config3_Pin */
  GPIO_InitStruct.Pin = Config4_Pin|Config3_Pin;
 8003380:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800338a:	2301      	movs	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	4814      	ldr	r0, [pc, #80]	@ (80033e8 <MX_GPIO_Init+0x1ec>)
 8003396:	f003 fa09 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Config2_Pin Config1_Pin */
  GPIO_InitStruct.Pin = Config2_Pin|Config1_Pin;
 800339a:	23c0      	movs	r3, #192	@ 0xc0
 800339c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	480b      	ldr	r0, [pc, #44]	@ (80033dc <MX_GPIO_Init+0x1e0>)
 80033ae:	f003 f9fd 	bl	80067ac <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_4_Pin */
  GPIO_InitStruct.Pin = A0_4_Pin;
 80033b2:	2304      	movs	r3, #4
 80033b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A0_4_GPIO_Port, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	4808      	ldr	r0, [pc, #32]	@ (80033ec <MX_GPIO_Init+0x1f0>)
 80033ca:	f003 f9ef 	bl	80067ac <HAL_GPIO_Init>

}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	@ 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	42020800 	.word	0x42020800
 80033e0:	42021c00 	.word	0x42021c00
 80033e4:	42020000 	.word	0x42020000
 80033e8:	42020400 	.word	0x42020400
 80033ec:	42020c00 	.word	0x42020c00

080033f0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80033f4:	2000      	movs	r0, #0
 80033f6:	f003 fba3 	bl	8006b40 <HAL_ICACHE_ConfigAssociativityMode>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8003400:	f000 f9f8 	bl	80037f4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003404:	f003 fbbc 	bl	8006b80 <HAL_ICACHE_Enable>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800340e:	f000 f9f1 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800341c:	f001 f847 	bl	80044ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003420:	f000 f8f8 	bl	8003614 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003424:	f000 f960 	bl	80036e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003428:	f7ff fee8 	bl	80031fc <MX_GPIO_Init>
  MX_DMA_Init();
 800342c:	f7ff fe0e 	bl	800304c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003430:	f7ff fe3e 	bl	80030b0 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8003434:	f000 f9e4 	bl	8003800 <MX_RTC_Init>
  MX_USB_Device_Init();
 8003438:	f00d f8c6 	bl	80105c8 <MX_USB_Device_Init>
  MX_ADC1_Init();
 800343c:	f7ff fc32 	bl	8002ca4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003440:	f000 fa98 	bl	8003974 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8003444:	f7ff ffd4 	bl	80033f0 <MX_ICACHE_Init>
  MX_ADC2_Init();
 8003448:	f7ff fcac 	bl	8002da4 <MX_ADC2_Init>
  MX_TIM2_Init();
 800344c:	f000 fd6a 	bl	8003f24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003450:	f000 fddc 	bl	800400c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003454:	f000 fe52 	bl	80040fc <MX_TIM4_Init>
  MX_TIM5_Init();
 8003458:	f000 fec8 	bl	80041ec <MX_TIM5_Init>
  MX_TIM1_Init();
 800345c:	f000 fd0e 	bl	8003e7c <MX_TIM1_Init>
  MX_TIM7_Init();
 8003460:	f000 ff16 	bl	8004290 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LTC6811_init();	//initializes the LTC (and SPI communication)
 8003464:	f7fd fba4 	bl	8000bb0 <LTC6811_init>

  SetHardwareProtection();	//sets the hardware protection configuration pins to the correct values
 8003468:	f7fe f8e4 	bl	8001634 <SetHardwareProtection>
  HAL_Delay(100);	//wait for 100ms to ensure the hardware protection is set
 800346c:	2064      	movs	r0, #100	@ 0x64
 800346e:	f001 f859 	bl	8004524 <HAL_Delay>

  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);	//turn off red LED
 8003472:	2200      	movs	r2, #0
 8003474:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003478:	4854      	ldr	r0, [pc, #336]	@ (80035cc <main+0x1b4>)
 800347a:	f003 fb2f 	bl	8006adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);	//turn off amber LED
 800347e:	2200      	movs	r2, #0
 8003480:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003484:	4851      	ldr	r0, [pc, #324]	@ (80035cc <main+0x1b4>)
 8003486:	f003 fb29 	bl	8006adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);	//turn off yellow LED
 800348a:	2200      	movs	r2, #0
 800348c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003490:	484e      	ldr	r0, [pc, #312]	@ (80035cc <main+0x1b4>)
 8003492:	f003 fb23 	bl	8006adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);	//turn off green LED
 8003496:	2200      	movs	r2, #0
 8003498:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800349c:	484b      	ldr	r0, [pc, #300]	@ (80035cc <main+0x1b4>)
 800349e:	f003 fb1d 	bl	8006adc <HAL_GPIO_WritePin>

  //START ADCs

  HAL_ADC_Start_IT(&hadc2);
 80034a2:	484b      	ldr	r0, [pc, #300]	@ (80035d0 <main+0x1b8>)
 80034a4:	f001 fd5c 	bl	8004f60 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80034a8:	484a      	ldr	r0, [pc, #296]	@ (80035d4 <main+0x1bc>)
 80034aa:	f001 fd59 	bl	8004f60 <HAL_ADC_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED) ;
 80034ae:	494a      	ldr	r1, [pc, #296]	@ (80035d8 <main+0x1c0>)
 80034b0:	4848      	ldr	r0, [pc, #288]	@ (80035d4 <main+0x1bc>)
 80034b2:	f002 fbb3 	bl	8005c1c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED);
 80034b6:	4948      	ldr	r1, [pc, #288]	@ (80035d8 <main+0x1c0>)
 80034b8:	4845      	ldr	r0, [pc, #276]	@ (80035d0 <main+0x1b8>)
 80034ba:	f002 fbaf 	bl	8005c1c <HAL_ADCEx_Calibration_Start>

//  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adcVal, 1);	//start ADC conversion for current sensors, 2 channels in multi mode

  //START TIMERS
  HAL_TIM_Base_Start_IT(&htim5); // Triggers Reading of aux conversion
 80034be:	4847      	ldr	r0, [pc, #284]	@ (80035dc <main+0x1c4>)
 80034c0:	f007 fd0e 	bl	800aee0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Triggers aux conversion
 80034c4:	4846      	ldr	r0, [pc, #280]	@ (80035e0 <main+0x1c8>)
 80034c6:	f007 fd0b 	bl	800aee0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // Triggers Reading of voltage conversion
 80034ca:	4846      	ldr	r0, [pc, #280]	@ (80035e4 <main+0x1cc>)
 80034cc:	f007 fd08 	bl	800aee0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // Triggers voltage conversion
 80034d0:	4845      	ldr	r0, [pc, #276]	@ (80035e8 <main+0x1d0>)
 80034d2:	f007 fd05 	bl	800aee0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // 3khz clock for LTC6801
 80034d6:	4845      	ldr	r0, [pc, #276]	@ (80035ec <main+0x1d4>)
 80034d8:	f007 fd02 	bl	800aee0 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim8); // Triggers ADC

  HAL_Delay(100);	//wait for 100ms to ensure the system is stable
 80034dc:	2064      	movs	r0, #100	@ 0x64
 80034de:	f001 f821 	bl	8004524 <HAL_Delay>
  resetOutputLatch();	//reset the output latch
 80034e2:	f7fd fd83 	bl	8000fec <resetOutputLatch>
  HAL_TIM_Base_Start_IT(&htim1); // pseudo watchdog timer, needs to be reset every 0.5s
 80034e6:	4842      	ldr	r0, [pc, #264]	@ (80035f0 <main+0x1d8>)
 80034e8:	f007 fcfa 	bl	800aee0 <HAL_TIM_Base_Start_IT>
  adcOffsetZero();	//zero the ADC offset, this is done once at the beginning of the program
 80034ec:	f7fd fcd8 	bl	8000ea0 <adcOffsetZero>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FLAG_TIM2){
 80034f0:	4b40      	ldr	r3, [pc, #256]	@ (80035f4 <main+0x1dc>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <main+0xf6>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7fe fa48 	bl	800198e <wakeup_idle>
		  LTC6811_adcv(MD_422HZ_1KHZ, DCP_DISABLED, CELL_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2000      	movs	r0, #0
 8003504:	f7fe f9a1 	bl	800184a <LTC6811_adcv>
		  FLAG_TIM2 = false;	//sets the flag to false
 8003508:	4b3a      	ldr	r3, [pc, #232]	@ (80035f4 <main+0x1dc>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
	  }
	  if(FLAG_TIM3){
 800350e:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <main+0x1e0>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <main+0x10e>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8003516:	2001      	movs	r0, #1
 8003518:	f7fe fa39 	bl	800198e <wakeup_idle>
		  readVoltages();	//reads the cell voltages
 800351c:	f7fd fc54 	bl	8000dc8 <readVoltages>
		  FLAG_TIM3 = false;	//sets the flag to false
 8003520:	4b35      	ldr	r3, [pc, #212]	@ (80035f8 <main+0x1e0>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
	  }
	  if(FLAG_TIM4){
 8003526:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <main+0x1e4>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <main+0x12a>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 800352e:	2001      	movs	r0, #1
 8003530:	f7fe fa2d 	bl	800198e <wakeup_idle>
		  LTC6811_adax(MD_422HZ_1KHZ, AUX_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 8003534:	2100      	movs	r1, #0
 8003536:	2000      	movs	r0, #0
 8003538:	f7fe f99a 	bl	8001870 <LTC6811_adax>
		  FLAG_TIM4 = false;	//sets the flag to false
 800353c:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <main+0x1e4>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
//		  HAL_ADC_Start(&hadc1);	//start ADC conversion for current sensor
//		  HAL_ADC_Start(&hadc2);	//start ADC conversion for current sensor
//		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_Y_Pin);
	  }
	  if(FLAG_TIM5){
 8003542:	4b2f      	ldr	r3, [pc, #188]	@ (8003600 <main+0x1e8>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d014      	beq.n	8003574 <main+0x15c>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 800354a:	2001      	movs	r0, #1
 800354c:	f7fe fa1f 	bl	800198e <wakeup_idle>
		  readTemperatures();	//reads the cell voltages
 8003550:	f7fd fc94 	bl	8000e7c <readTemperatures>
		  tempConvert();	//converts the ADC values into temperature
 8003554:	f7fd fb78 	bl	8000c48 <tempConvert>
		  currentConvert();
 8003558:	f7fd fcfe 	bl	8000f58 <currentConvert>
//		  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);

		  FLAG_TIM5 = false;
 800355c:	4b28      	ldr	r3, [pc, #160]	@ (8003600 <main+0x1e8>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
		  FLAG_MainTask1 = true;
 8003562:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <main+0x1ec>)
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
		  FLAG_MainTask2 = true;
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <main+0x1f0>)
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
		  FLAG_MainTask3 = true;
 800356e:	4b27      	ldr	r3, [pc, #156]	@ (800360c <main+0x1f4>)
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
	  }
	  //reset the timer 1 counter (watchdog)
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003574:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <main+0x1d8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_GPIO_WritePin(Enable2_GPIO_Port, Enable2_Pin, GPIO_PIN_SET);
	  }else{
		  HAL_GPIO_WritePin(Enable2_GPIO_Port, Enable2_Pin, GPIO_PIN_RESET);
	  }
	  */
	  if(HAL_GPIO_ReadPin(Config1_GPIO_Port, Config1_Pin) == GPIO_PIN_RESET){
 800357c:	2180      	movs	r1, #128	@ 0x80
 800357e:	4824      	ldr	r0, [pc, #144]	@ (8003610 <main+0x1f8>)
 8003580:	f003 fa94 	bl	8006aac <HAL_GPIO_ReadPin>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <main+0x176>
		  resetOutputLatch();	//reset the output latch if Config1 is pressed
 800358a:	f7fd fd2f 	bl	8000fec <resetOutputLatch>
	  }
	  if(FLAG_MainTask1){
 800358e:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <main+0x1ec>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <main+0x18a>
		  errorCheck();
 8003596:	f7fd fd57 	bl	8001048 <errorCheck>
		  FLAG_MainTask1 = false;
 800359a:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <main+0x1ec>)
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e7a6      	b.n	80034f0 <main+0xd8>
	  }else if(FLAG_MainTask2){
 80035a2:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <main+0x1f0>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <main+0x19a>
//		  balancingControl();
		  FLAG_MainTask2 = false;
 80035aa:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <main+0x1f0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e79e      	b.n	80034f0 <main+0xd8>
	  }else if(FLAG_MainTask3){
 80035b2:	4b16      	ldr	r3, [pc, #88]	@ (800360c <main+0x1f4>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d09a      	beq.n	80034f0 <main+0xd8>
		  outputControl();
 80035ba:	f7fe f821 	bl	8001600 <outputControl>
		  LEDControl();
 80035be:	f7fd ffdd 	bl	800157c <LEDControl>
		  FLAG_MainTask3 = false;
 80035c2:	4b12      	ldr	r3, [pc, #72]	@ (800360c <main+0x1f4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
	  if(FLAG_TIM2){
 80035c8:	e792      	b.n	80034f0 <main+0xd8>
 80035ca:	bf00      	nop
 80035cc:	42020400 	.word	0x42020400
 80035d0:	200003b4 	.word	0x200003b4
 80035d4:	2000034c 	.word	0x2000034c
 80035d8:	407f0000 	.word	0x407f0000
 80035dc:	20000768 	.word	0x20000768
 80035e0:	2000071c 	.word	0x2000071c
 80035e4:	200006d0 	.word	0x200006d0
 80035e8:	20000684 	.word	0x20000684
 80035ec:	200007b4 	.word	0x200007b4
 80035f0:	20000638 	.word	0x20000638
 80035f4:	20000554 	.word	0x20000554
 80035f8:	20000555 	.word	0x20000555
 80035fc:	20000556 	.word	0x20000556
 8003600:	20000557 	.word	0x20000557
 8003604:	20000558 	.word	0x20000558
 8003608:	20000559 	.word	0x20000559
 800360c:	2000055a 	.word	0x2000055a
 8003610:	42020800 	.word	0x42020800

08003614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b098      	sub	sp, #96	@ 0x60
 8003618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800361a:	f107 0318 	add.w	r3, r7, #24
 800361e:	2248      	movs	r2, #72	@ 0x48
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f00d fd10 	bl	8011048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8003636:	2000      	movs	r0, #0
 8003638:	f004 ffc0 	bl	80085bc <HAL_PWREx_ControlVoltageScaling>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003642:	f000 f8d7 	bl	80037f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003646:	f004 ff9b 	bl	8008580 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800364a:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <SystemClock_Config+0xd0>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <SystemClock_Config+0xd0>)
 8003652:	f023 0318 	bic.w	r3, r3, #24
 8003656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800365a:	231e      	movs	r3, #30
 800365c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800365e:	2381      	movs	r3, #129	@ 0x81
 8003660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8003668:	2300      	movs	r3, #0
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800366c:	2340      	movs	r3, #64	@ 0x40
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003670:	2301      	movs	r3, #1
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003674:	2301      	movs	r3, #1
 8003676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003678:	2300      	movs	r3, #0
 800367a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800367c:	2370      	movs	r3, #112	@ 0x70
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003680:	2302      	movs	r3, #2
 8003682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003684:	2302      	movs	r3, #2
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003688:	2302      	movs	r3, #2
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 800368c:	2318      	movs	r3, #24
 800368e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003690:	2307      	movs	r3, #7
 8003692:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8003694:	2304      	movs	r3, #4
 8003696:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003698:	2302      	movs	r3, #2
 800369a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800369c:	f107 0318 	add.w	r3, r7, #24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f005 f82b 	bl	80086fc <HAL_RCC_OscConfig>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80036ac:	f000 f8a2 	bl	80037f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b0:	230f      	movs	r3, #15
 80036b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b4:	2303      	movs	r3, #3
 80036b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2104      	movs	r1, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 fced 	bl	80090a8 <HAL_RCC_ClockConfig>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80036d4:	f000 f88e 	bl	80037f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80036d8:	f006 fb68 	bl	8009dac <HAL_RCCEx_EnableMSIPLLMode>
}
 80036dc:	bf00      	nop
 80036de:	3760      	adds	r7, #96	@ 0x60
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000

080036e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b0a6      	sub	sp, #152	@ 0x98
 80036ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2294      	movs	r2, #148	@ 0x94
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00d fca7 	bl	8011048 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80036fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80036fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003700:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003708:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800370c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 800370e:	2301      	movs	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003712:	2301      	movs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8003716:	230c      	movs	r3, #12
 8003718:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800371a:	2307      	movs	r3, #7
 800371c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800371e:	2302      	movs	r3, #2
 8003720:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003722:	2302      	movs	r3, #2
 8003724:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8003726:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800372a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f005 ffb8 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800373a:	f000 f85b 	bl	80037f4 <Error_Handler>
  }
}
 800373e:	bf00      	nop
 8003740:	3798      	adds	r7, #152	@ 0x98
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//timers to control the LTC6811 value reading
	//TIM2 starts first and then triggers TIM3, which triggers TIM4, which triggers TIM5.
	//These 4 timers run in a loop at 5Hz each, and 20Hz overall
	//TIM2 starts cell voltage conversion
	if(htim->Instance == TIM2){
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003758:	d103      	bne.n	8003762 <HAL_TIM_PeriodElapsedCallback+0x1a>
		FLAG_TIM2 = true;	//sets the flag to true
 800375a:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e019      	b.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x4e>

	//TIM3 reads cell voltages
	}else if(htim->Instance == TIM3){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a19      	ldr	r2, [pc, #100]	@ (80037cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <HAL_TIM_PeriodElapsedCallback+0x2c>
		FLAG_TIM3 = true;	//sets the flag to true
 800376c:	4b18      	ldr	r3, [pc, #96]	@ (80037d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e010      	b.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x4e>

	//TIM4 starts aux voltage conversion
	}else if(htim->Instance == TIM4){
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	@ (80037d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d103      	bne.n	8003786 <HAL_TIM_PeriodElapsedCallback+0x3e>
		FLAG_TIM4 = true;	//sets the flag to true
 800377e:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e007      	b.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x4e>

	//TIM5 reads aux voltage conversion
	}else if(htim->Instance == TIM5){
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a14      	ldr	r2, [pc, #80]	@ (80037dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d102      	bne.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x4e>
		FLAG_TIM5 = true;	//sets the flag to true
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);	//toggles green LED
	}
	if(htim->Instance == TIM7){
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d107      	bne.n	80037b0 <HAL_TIM_PeriodElapsedCallback+0x68>
		if(FLAG_WDT){
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_TogglePin(WDT_Stm_GPIO_Port, WDT_Stm_Pin);	//toggles external watchdog
 80037a8:	2101      	movs	r1, #1
 80037aa:	4810      	ldr	r0, [pc, #64]	@ (80037ec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80037ac:	f003 f9ae 	bl	8006b0c <HAL_GPIO_TogglePin>
	if(htim->Instance == TIM1){
//		FLAG_WDT = false;	//watchdog fired, stop output toggling
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0e      	ldr	r2, [pc, #56]	@ (80037f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_TIM_PeriodElapsedCallback+0x76>
  {
    HAL_IncTick();
 80037ba:	f000 fe93 	bl	80044e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000554 	.word	0x20000554
 80037cc:	40000400 	.word	0x40000400
 80037d0:	20000555 	.word	0x20000555
 80037d4:	40000800 	.word	0x40000800
 80037d8:	20000556 	.word	0x20000556
 80037dc:	40000c00 	.word	0x40000c00
 80037e0:	20000557 	.word	0x20000557
 80037e4:	40001400 	.word	0x40001400
 80037e8:	2000001b 	.word	0x2000001b
 80037ec:	42020800 	.word	0x42020800
 80037f0:	40001000 	.word	0x40001000

080037f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037f8:	b672      	cpsid	i
}
 80037fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <Error_Handler+0x8>

08003800 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8003806:	f107 0318 	add.w	r3, r7, #24
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003826:	2300      	movs	r3, #0
 8003828:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <MX_RTC_Init+0xf0>)
 800382c:	4a31      	ldr	r2, [pc, #196]	@ (80038f4 <MX_RTC_Init+0xf4>)
 800382e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003830:	4b2f      	ldr	r3, [pc, #188]	@ (80038f0 <MX_RTC_Init+0xf0>)
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003836:	4b2e      	ldr	r3, [pc, #184]	@ (80038f0 <MX_RTC_Init+0xf0>)
 8003838:	227f      	movs	r2, #127	@ 0x7f
 800383a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800383c:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <MX_RTC_Init+0xf0>)
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003842:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <MX_RTC_Init+0xf0>)
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003848:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <MX_RTC_Init+0xf0>)
 800384a:	2200      	movs	r2, #0
 800384c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800384e:	4b28      	ldr	r3, [pc, #160]	@ (80038f0 <MX_RTC_Init+0xf0>)
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003854:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <MX_RTC_Init+0xf0>)
 8003856:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800385a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800385c:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <MX_RTC_Init+0xf0>)
 800385e:	2200      	movs	r2, #0
 8003860:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003862:	4823      	ldr	r0, [pc, #140]	@ (80038f0 <MX_RTC_Init+0xf0>)
 8003864:	f006 fc44 	bl	800a0f0 <HAL_RTC_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 800386e:	f7ff ffc1 	bl	80037f4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800387a:	2300      	movs	r3, #0
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800387e:	2300      	movs	r3, #0
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003882:	f107 0318 	add.w	r3, r7, #24
 8003886:	4619      	mov	r1, r3
 8003888:	4819      	ldr	r0, [pc, #100]	@ (80038f0 <MX_RTC_Init+0xf0>)
 800388a:	f006 fe7b 	bl	800a584 <HAL_RTCEx_PrivilegeModeSet>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8003894:	f7ff ffae 	bl	80037f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003898:	2300      	movs	r3, #0
 800389a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800389c:	2300      	movs	r3, #0
 800389e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2201      	movs	r2, #1
 80038b0:	4619      	mov	r1, r3
 80038b2:	480f      	ldr	r0, [pc, #60]	@ (80038f0 <MX_RTC_Init+0xf0>)
 80038b4:	f006 fc94 	bl	800a1e0 <HAL_RTC_SetTime>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80038be:	f7ff ff99 	bl	80037f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038c2:	2301      	movs	r3, #1
 80038c4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038c6:	2301      	movs	r3, #1
 80038c8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038d2:	463b      	mov	r3, r7
 80038d4:	2201      	movs	r2, #1
 80038d6:	4619      	mov	r1, r3
 80038d8:	4805      	ldr	r0, [pc, #20]	@ (80038f0 <MX_RTC_Init+0xf0>)
 80038da:	f006 fd17 	bl	800a30c <HAL_RTC_SetDate>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 80038e4:	f7ff ff86 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038e8:	bf00      	nop
 80038ea:	3730      	adds	r7, #48	@ 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000055c 	.word	0x2000055c
 80038f4:	40002800 	.word	0x40002800

080038f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b0a8      	sub	sp, #160	@ 0xa0
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	2294      	movs	r2, #148	@ 0x94
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f00d fb9d 	bl	8011048 <memset>
  if(rtcHandle->Instance==RTC)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a16      	ldr	r2, [pc, #88]	@ (800396c <HAL_RTC_MspInit+0x74>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d124      	bne.n	8003962 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800391e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	4618      	mov	r0, r3
 800392c:	f005 feba 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003936:	f7ff ff5d 	bl	80037f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800393a:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <HAL_RTC_MspInit+0x78>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003940:	4a0b      	ldr	r2, [pc, #44]	@ (8003970 <HAL_RTC_MspInit+0x78>)
 8003942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800394a:	4b09      	ldr	r3, [pc, #36]	@ (8003970 <HAL_RTC_MspInit+0x78>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394e:	4a08      	ldr	r2, [pc, #32]	@ (8003970 <HAL_RTC_MspInit+0x78>)
 8003950:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003954:	6593      	str	r3, [r2, #88]	@ 0x58
 8003956:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_RTC_MspInit+0x78>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003962:	bf00      	nop
 8003964:	37a0      	adds	r7, #160	@ 0xa0
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40002800 	.word	0x40002800
 8003970:	40021000 	.word	0x40021000

08003974 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <MX_SPI1_Init+0x74>)
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <MX_SPI1_Init+0x78>)
 800397c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <MX_SPI1_Init+0x74>)
 8003980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003986:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <MX_SPI1_Init+0x74>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <MX_SPI1_Init+0x74>)
 800398e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003992:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003994:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <MX_SPI1_Init+0x74>)
 8003996:	2202      	movs	r2, #2
 8003998:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800399a:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <MX_SPI1_Init+0x74>)
 800399c:	2201      	movs	r2, #1
 800399e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039aa:	2230      	movs	r2, #48	@ 0x30
 80039ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039bc:	2200      	movs	r2, #0
 80039be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039c2:	2207      	movs	r2, #7
 80039c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039d2:	4805      	ldr	r0, [pc, #20]	@ (80039e8 <MX_SPI1_Init+0x74>)
 80039d4:	f006 fe02 	bl	800a5dc <HAL_SPI_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039de:	f7ff ff09 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000584 	.word	0x20000584
 80039ec:	40013000 	.word	0x40013000

080039f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <HAL_SPI_MspInit+0x7c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d127      	bne.n	8003a62 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a12:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <HAL_SPI_MspInit+0x80>)
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <HAL_SPI_MspInit+0x80>)
 8003a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <HAL_SPI_MspInit+0x80>)
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_SPI_MspInit+0x80>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <HAL_SPI_MspInit+0x80>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_SPI_MspInit+0x80>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a42:	23e0      	movs	r3, #224	@ 0xe0
 8003a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a52:	2305      	movs	r3, #5
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4805      	ldr	r0, [pc, #20]	@ (8003a74 <HAL_SPI_MspInit+0x84>)
 8003a5e:	f002 fea5 	bl	80067ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	@ 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40013000 	.word	0x40013000
 8003a70:	40021000 	.word	0x40021000
 8003a74:	42020000 	.word	0x42020000

08003a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_MspInit+0x44>)
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <HAL_MspInit+0x44>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_MspInit+0x44>)
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_MspInit+0x44>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <HAL_MspInit+0x44>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_MspInit+0x44>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003aae:	f004 fdf1 	bl	8008694 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	@ 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	2031      	movs	r0, #49	@ 0x31
 8003ad6:	f002 fa5f 	bl	8005f98 <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003ada:	2031      	movs	r0, #49	@ 0x31
 8003adc:	f002 fa76 	bl	8005fcc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <HAL_InitTick+0x9c>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_InitTick+0x9c>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <HAL_InitTick+0x9c>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af8:	f107 0210 	add.w	r2, r7, #16
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 fccc 	bl	80094a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b08:	f005 fcb6 	bl	8009478 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <HAL_InitTick+0xa0>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <HAL_InitTick+0xa8>)
 8003b20:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b3c:	4809      	ldr	r0, [pc, #36]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b3e:	f007 f977 	bl	800ae30 <HAL_TIM_Base_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b48:	4806      	ldr	r0, [pc, #24]	@ (8003b64 <HAL_InitTick+0xa4>)
 8003b4a:	f007 f9c9 	bl	800aee0 <HAL_TIM_Base_Start_IT>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	e000      	b.n	8003b54 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	@ 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	431bde83 	.word	0x431bde83
 8003b64:	200005e8 	.word	0x200005e8
 8003b68:	40001000 	.word	0x40001000

08003b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b70:	bf00      	nop
 8003b72:	e7fd      	b.n	8003b70 <NMI_Handler+0x4>

08003b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <HardFault_Handler+0x4>

08003b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <MemManage_Handler+0x4>

08003b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <BusFault_Handler+0x4>

08003b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <UsageFault_Handler+0x4>

08003b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003bd0:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <DMA1_Channel1_IRQHandler+0x10>)
 8003bd2:	f002 fab1 	bl	8006138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000484 	.word	0x20000484

08003be0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003be4:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <DMA1_Channel2_IRQHandler+0x10>)
 8003be6:	f002 faa7 	bl	8006138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000041c 	.word	0x2000041c

08003bf4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bf8:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <TIM1_UP_IRQHandler+0x10>)
 8003bfa:	f007 fa42 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000638 	.word	0x20000638

08003c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <TIM2_IRQHandler+0x10>)
 8003c0e:	f007 fa38 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000684 	.word	0x20000684

08003c1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c20:	4802      	ldr	r0, [pc, #8]	@ (8003c2c <TIM3_IRQHandler+0x10>)
 8003c22:	f007 fa2e 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200006d0 	.word	0x200006d0

08003c30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c34:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <TIM4_IRQHandler+0x10>)
 8003c36:	f007 fa24 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000071c 	.word	0x2000071c

08003c44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003c48:	4802      	ldr	r0, [pc, #8]	@ (8003c54 <TIM5_IRQHandler+0x10>)
 8003c4a:	f007 fa1a 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000768 	.word	0x20000768

08003c58 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c5c:	4802      	ldr	r0, [pc, #8]	@ (8003c68 <TIM6_IRQHandler+0x10>)
 8003c5e:	f007 fa10 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200005e8 	.word	0x200005e8

08003c6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c70:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <TIM7_IRQHandler+0x10>)
 8003c72:	f007 fa06 	bl	800b082 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200007b4 	.word	0x200007b4

08003c80 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003c84:	4802      	ldr	r0, [pc, #8]	@ (8003c90 <USB_FS_IRQHandler+0x10>)
 8003c86:	f003 f87b 	bl	8006d80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20001ce4 	.word	0x20001ce4

08003c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c9c:	4a14      	ldr	r2, [pc, #80]	@ (8003cf0 <_sbrk+0x5c>)
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <_sbrk+0x60>)
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cb0:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <_sbrk+0x64>)
 8003cb2:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <_sbrk+0x68>)
 8003cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d207      	bcs.n	8003cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cc4:	f00d f9d8 	bl	8011078 <__errno>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	220c      	movs	r2, #12
 8003ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cd2:	e009      	b.n	8003ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <_sbrk+0x64>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <_sbrk+0x64>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4a05      	ldr	r2, [pc, #20]	@ (8003cf8 <_sbrk+0x64>)
 8003ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20030000 	.word	0x20030000
 8003cf4:	00000400 	.word	0x00000400
 8003cf8:	20000634 	.word	0x20000634
 8003cfc:	20002328 	.word	0x20002328

08003d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d04:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <SystemInit+0x20>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	4a05      	ldr	r2, [pc, #20]	@ (8003d20 <SystemInit+0x20>)
 8003d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003d36:	4b4c      	ldr	r3, [pc, #304]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e005      	b.n	8003d52 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003d46:	4b48      	ldr	r3, [pc, #288]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003d52:	4a46      	ldr	r2, [pc, #280]	@ (8003e6c <SystemCoreClockUpdate+0x148>)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5c:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d866      	bhi.n	8003e36 <SystemCoreClockUpdate+0x112>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <SystemCoreClockUpdate+0x4c>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003e37 	.word	0x08003e37
 8003d78:	08003e37 	.word	0x08003e37
 8003d7c:	08003e37 	.word	0x08003e37
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003e37 	.word	0x08003e37
 8003d88:	08003e37 	.word	0x08003e37
 8003d8c:	08003e37 	.word	0x08003e37
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003e37 	.word	0x08003e37
 8003d98:	08003e37 	.word	0x08003e37
 8003d9c:	08003e37 	.word	0x08003e37
 8003da0:	08003dbd 	.word	0x08003dbd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003da4:	4a32      	ldr	r2, [pc, #200]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6013      	str	r3, [r2, #0]
      break;
 8003daa:	e048      	b.n	8003e3e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003dac:	4b30      	ldr	r3, [pc, #192]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003dae:	4a31      	ldr	r2, [pc, #196]	@ (8003e74 <SystemCoreClockUpdate+0x150>)
 8003db0:	601a      	str	r2, [r3, #0]
      break;
 8003db2:	e044      	b.n	8003e3e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003db4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003db6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e74 <SystemCoreClockUpdate+0x150>)
 8003db8:	601a      	str	r2, [r3, #0]
      break;
 8003dba:	e040      	b.n	8003e3e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8003dc6:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d003      	beq.n	8003de2 <SystemCoreClockUpdate+0xbe>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d006      	beq.n	8003dee <SystemCoreClockUpdate+0xca>
 8003de0:	e00b      	b.n	8003dfa <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8003de2:	4a24      	ldr	r2, [pc, #144]	@ (8003e74 <SystemCoreClockUpdate+0x150>)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	613b      	str	r3, [r7, #16]
          break;
 8003dec:	e00b      	b.n	8003e06 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8003dee:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <SystemCoreClockUpdate+0x150>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	613b      	str	r3, [r7, #16]
          break;
 8003df8:	e005      	b.n	8003e06 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	613b      	str	r3, [r7, #16]
          break;
 8003e04:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003e06:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0e5b      	lsrs	r3, r3, #25
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	4a0f      	ldr	r2, [pc, #60]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003e32:	6013      	str	r3, [r2, #0]
      break;
 8003e34:	e003      	b.n	8003e3e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003e36:	4a0e      	ldr	r2, [pc, #56]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	6013      	str	r3, [r2, #0]
      break;
 8003e3c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <SystemCoreClockUpdate+0x144>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	4a0b      	ldr	r2, [pc, #44]	@ (8003e78 <SystemCoreClockUpdate+0x154>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003e4e:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	4a05      	ldr	r2, [pc, #20]	@ (8003e70 <SystemCoreClockUpdate+0x14c>)
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	080117d4 	.word	0x080117d4
 8003e70:	2000001c 	.word	0x2000001c
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	080117bc 	.word	0x080117bc

08003e7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e82:	f107 0310 	add.w	r3, r7, #16
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003e9c:	4a20      	ldr	r2, [pc, #128]	@ (8003f20 <MX_TIM1_Init+0xa4>)
 8003e9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2399;
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003ea2:	f640 125f 	movw	r2, #2399	@ 0x95f
 8003ea6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003eb0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003eb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb6:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ebc:	4b17      	ldr	r3, [pc, #92]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec2:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ec8:	4814      	ldr	r0, [pc, #80]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003eca:	f006 ffb1 	bl	800ae30 <HAL_TIM_Base_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8003ed4:	f7ff fc8e 	bl	80037f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ede:	f107 0310 	add.w	r3, r7, #16
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	480d      	ldr	r0, [pc, #52]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003ee6:	f007 fa4d 	bl	800b384 <HAL_TIM_ConfigClockSource>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003ef0:	f7ff fc80 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4805      	ldr	r0, [pc, #20]	@ (8003f1c <MX_TIM1_Init+0xa0>)
 8003f06:	f008 f81f 	bl	800bf48 <HAL_TIMEx_MasterConfigSynchronization>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003f10:	f7ff fc70 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f14:	bf00      	nop
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000638 	.word	0x20000638
 8003f20:	40012c00 	.word	0x40012c00

08003f24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08e      	sub	sp, #56	@ 0x38
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f44:	463b      	mov	r3, r7
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	615a      	str	r2, [r3, #20]
 8003f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f56:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8003f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f60:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8003f64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f66:	4b28      	ldr	r3, [pc, #160]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8003f6c:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f6e:	f240 128f 	movw	r2, #399	@ 0x18f
 8003f72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f74:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f7a:	4b23      	ldr	r3, [pc, #140]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f80:	4821      	ldr	r0, [pc, #132]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f82:	f006 ff55 	bl	800ae30 <HAL_TIM_Base_Init>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003f8c:	f7ff fc32 	bl	80037f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	481a      	ldr	r0, [pc, #104]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003f9e:	f007 f9f1 	bl	800b384 <HAL_TIM_ConfigClockSource>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003fa8:	f7ff fc24 	bl	80037f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003fac:	4816      	ldr	r0, [pc, #88]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003fae:	f007 f807 	bl	800afc0 <HAL_TIM_OC_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003fb8:	f7ff fc1c 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003fbc:	2340      	movs	r3, #64	@ 0x40
 8003fbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480f      	ldr	r0, [pc, #60]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003fcc:	f007 ffbc 	bl	800bf48 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003fd6:	f7ff fc0d 	bl	80037f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003fda:	2310      	movs	r3, #16
 8003fdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8003fde:	2363      	movs	r3, #99	@ 0x63
 8003fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fea:	463b      	mov	r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4805      	ldr	r0, [pc, #20]	@ (8004008 <MX_TIM2_Init+0xe4>)
 8003ff2:	f007 f94d 	bl	800b290 <HAL_TIM_OC_ConfigChannel>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003ffc:	f7ff fbfa 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004000:	bf00      	nop
 8004002:	3738      	adds	r7, #56	@ 0x38
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000684 	.word	0x20000684

0800400c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b090      	sub	sp, #64	@ 0x40
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004012:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004022:	f107 0320 	add.w	r3, r7, #32
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
 800403c:	615a      	str	r2, [r3, #20]
 800403e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004040:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 8004042:	4a2d      	ldr	r2, [pc, #180]	@ (80040f8 <MX_TIM3_Init+0xec>)
 8004044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8004046:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 8004048:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800404c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404e:	4b29      	ldr	r3, [pc, #164]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 8004054:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 8004056:	f240 128f 	movw	r2, #399	@ 0x18f
 800405a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405c:	4b25      	ldr	r3, [pc, #148]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004062:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004068:	4822      	ldr	r0, [pc, #136]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 800406a:	f006 fee1 	bl	800ae30 <HAL_TIM_Base_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8004074:	f7ff fbbe 	bl	80037f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004078:	481e      	ldr	r0, [pc, #120]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 800407a:	f006 ffa1 	bl	800afc0 <HAL_TIM_OC_Init>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004084:	f7ff fbb6 	bl	80037f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004088:	2306      	movs	r3, #6
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800408c:	2310      	movs	r3, #16
 800408e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004090:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004094:	4619      	mov	r1, r3
 8004096:	4817      	ldr	r0, [pc, #92]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 8004098:	f007 fa3d 	bl	800b516 <HAL_TIM_SlaveConfigSynchro>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80040a2:	f7ff fba7 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80040a6:	2340      	movs	r3, #64	@ 0x40
 80040a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040ae:	f107 0320 	add.w	r3, r7, #32
 80040b2:	4619      	mov	r1, r3
 80040b4:	480f      	ldr	r0, [pc, #60]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 80040b6:	f007 ff47 	bl	800bf48 <HAL_TIMEx_MasterConfigSynchronization>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80040c0:	f7ff fb98 	bl	80037f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80040c4:	2310      	movs	r3, #16
 80040c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 80040c8:	2363      	movs	r3, #99	@ 0x63
 80040ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	2200      	movs	r2, #0
 80040d8:	4619      	mov	r1, r3
 80040da:	4806      	ldr	r0, [pc, #24]	@ (80040f4 <MX_TIM3_Init+0xe8>)
 80040dc:	f007 f8d8 	bl	800b290 <HAL_TIM_OC_ConfigChannel>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80040e6:	f7ff fb85 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040ea:	bf00      	nop
 80040ec:	3740      	adds	r7, #64	@ 0x40
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200006d0 	.word	0x200006d0
 80040f8:	40000400 	.word	0x40000400

080040fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b090      	sub	sp, #64	@ 0x40
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004102:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004112:	f107 0320 	add.w	r3, r7, #32
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	615a      	str	r2, [r3, #20]
 800412e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004130:	4b2c      	ldr	r3, [pc, #176]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 8004132:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <MX_TIM4_Init+0xec>)
 8004134:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8004136:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 8004138:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800413c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413e:	4b29      	ldr	r3, [pc, #164]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8004144:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 8004146:	f240 128f 	movw	r2, #399	@ 0x18f
 800414a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414c:	4b25      	ldr	r3, [pc, #148]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004152:	4b24      	ldr	r3, [pc, #144]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004158:	4822      	ldr	r0, [pc, #136]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 800415a:	f006 fe69 	bl	800ae30 <HAL_TIM_Base_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004164:	f7ff fb46 	bl	80037f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004168:	481e      	ldr	r0, [pc, #120]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 800416a:	f006 ff29 	bl	800afc0 <HAL_TIM_OC_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004174:	f7ff fb3e 	bl	80037f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004178:	2306      	movs	r3, #6
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800417c:	2320      	movs	r3, #32
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8004180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004184:	4619      	mov	r1, r3
 8004186:	4817      	ldr	r0, [pc, #92]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 8004188:	f007 f9c5 	bl	800b516 <HAL_TIM_SlaveConfigSynchro>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004192:	f7ff fb2f 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8004196:	2340      	movs	r3, #64	@ 0x40
 8004198:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800419e:	f107 0320 	add.w	r3, r7, #32
 80041a2:	4619      	mov	r1, r3
 80041a4:	480f      	ldr	r0, [pc, #60]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 80041a6:	f007 fecf 	bl	800bf48 <HAL_TIMEx_MasterConfigSynchronization>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80041b0:	f7ff fb20 	bl	80037f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80041b4:	2310      	movs	r3, #16
 80041b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 80041b8:	2363      	movs	r3, #99	@ 0x63
 80041ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c4:	1d3b      	adds	r3, r7, #4
 80041c6:	2200      	movs	r2, #0
 80041c8:	4619      	mov	r1, r3
 80041ca:	4806      	ldr	r0, [pc, #24]	@ (80041e4 <MX_TIM4_Init+0xe8>)
 80041cc:	f007 f860 	bl	800b290 <HAL_TIM_OC_ConfigChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80041d6:	f7ff fb0d 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80041da:	bf00      	nop
 80041dc:	3740      	adds	r7, #64	@ 0x40
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2000071c 	.word	0x2000071c
 80041e8:	40000800 	.word	0x40000800

080041ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80041f2:	f107 030c 	add.w	r3, r7, #12
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	609a      	str	r2, [r3, #8]
 80041fe:	60da      	str	r2, [r3, #12]
 8004200:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004202:	463b      	mov	r3, r7
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800420c:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <MX_TIM5_Init+0x9c>)
 800420e:	4a1f      	ldr	r2, [pc, #124]	@ (800428c <MX_TIM5_Init+0xa0>)
 8004210:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47999;
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <MX_TIM5_Init+0x9c>)
 8004214:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8004218:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421a:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <MX_TIM5_Init+0x9c>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 399;
 8004220:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <MX_TIM5_Init+0x9c>)
 8004222:	f240 128f 	movw	r2, #399	@ 0x18f
 8004226:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <MX_TIM5_Init+0x9c>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800422e:	4b16      	ldr	r3, [pc, #88]	@ (8004288 <MX_TIM5_Init+0x9c>)
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004234:	4814      	ldr	r0, [pc, #80]	@ (8004288 <MX_TIM5_Init+0x9c>)
 8004236:	f006 fdfb 	bl	800ae30 <HAL_TIM_Base_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004240:	f7ff fad8 	bl	80037f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004244:	2306      	movs	r3, #6
 8004246:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8004248:	2320      	movs	r3, #32
 800424a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	4619      	mov	r1, r3
 8004252:	480d      	ldr	r0, [pc, #52]	@ (8004288 <MX_TIM5_Init+0x9c>)
 8004254:	f007 f95f 	bl	800b516 <HAL_TIM_SlaveConfigSynchro>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800425e:	f7ff fac9 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800426a:	463b      	mov	r3, r7
 800426c:	4619      	mov	r1, r3
 800426e:	4806      	ldr	r0, [pc, #24]	@ (8004288 <MX_TIM5_Init+0x9c>)
 8004270:	f007 fe6a 	bl	800bf48 <HAL_TIMEx_MasterConfigSynchronization>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800427a:	f7ff fabb 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800427e:	bf00      	nop
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000768 	.word	0x20000768
 800428c:	40000c00 	.word	0x40000c00

08004290 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042a0:	4b14      	ldr	r3, [pc, #80]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042a2:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <MX_TIM7_Init+0x68>)
 80042a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80042a6:	4b13      	ldr	r3, [pc, #76]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7999;
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80042b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042bc:	2200      	movs	r2, #0
 80042be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042c0:	480c      	ldr	r0, [pc, #48]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042c2:	f006 fdb5 	bl	800ae30 <HAL_TIM_Base_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80042cc:	f7ff fa92 	bl	80037f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	@ (80042f4 <MX_TIM7_Init+0x64>)
 80042de:	f007 fe33 	bl	800bf48 <HAL_TIMEx_MasterConfigSynchronization>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80042e8:	f7ff fa84 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200007b4 	.word	0x200007b4
 80042f8:	40001400 	.word	0x40001400

080042fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a4e      	ldr	r2, [pc, #312]	@ (8004444 <HAL_TIM_Base_MspInit+0x148>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d114      	bne.n	8004338 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800430e:	4b4e      	ldr	r3, [pc, #312]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004312:	4a4d      	ldr	r2, [pc, #308]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004314:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004318:	6613      	str	r3, [r2, #96]	@ 0x60
 800431a:	4b4b      	ldr	r3, [pc, #300]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 800431c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	202a      	movs	r0, #42	@ 0x2a
 800432c:	f001 fe34 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004330:	202a      	movs	r0, #42	@ 0x2a
 8004332:	f001 fe4b 	bl	8005fcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004336:	e080      	b.n	800443a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004340:	d114      	bne.n	800436c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004342:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	4a40      	ldr	r2, [pc, #256]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6593      	str	r3, [r2, #88]	@ 0x58
 800434e:	4b3e      	ldr	r3, [pc, #248]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	202d      	movs	r0, #45	@ 0x2d
 8004360:	f001 fe1a 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004364:	202d      	movs	r0, #45	@ 0x2d
 8004366:	f001 fe31 	bl	8005fcc <HAL_NVIC_EnableIRQ>
}
 800436a:	e066      	b.n	800443a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM3)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a36      	ldr	r2, [pc, #216]	@ (800444c <HAL_TIM_Base_MspInit+0x150>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d114      	bne.n	80043a0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004376:	4b34      	ldr	r3, [pc, #208]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	4a33      	ldr	r2, [pc, #204]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 800437c:	f043 0302 	orr.w	r3, r3, #2
 8004380:	6593      	str	r3, [r2, #88]	@ 0x58
 8004382:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2100      	movs	r1, #0
 8004392:	202e      	movs	r0, #46	@ 0x2e
 8004394:	f001 fe00 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004398:	202e      	movs	r0, #46	@ 0x2e
 800439a:	f001 fe17 	bl	8005fcc <HAL_NVIC_EnableIRQ>
}
 800439e:	e04c      	b.n	800443a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM4)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <HAL_TIM_Base_MspInit+0x154>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d114      	bne.n	80043d4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043aa:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ae:	4a26      	ldr	r2, [pc, #152]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b6:	4b24      	ldr	r3, [pc, #144]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80043c2:	2200      	movs	r2, #0
 80043c4:	2100      	movs	r1, #0
 80043c6:	202f      	movs	r0, #47	@ 0x2f
 80043c8:	f001 fde6 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80043cc:	202f      	movs	r0, #47	@ 0x2f
 80043ce:	f001 fdfd 	bl	8005fcc <HAL_NVIC_EnableIRQ>
}
 80043d2:	e032      	b.n	800443a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM5)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004454 <HAL_TIM_Base_MspInit+0x158>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d114      	bne.n	8004408 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043de:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ea:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	2030      	movs	r0, #48	@ 0x30
 80043fc:	f001 fdcc 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004400:	2030      	movs	r0, #48	@ 0x30
 8004402:	f001 fde3 	bl	8005fcc <HAL_NVIC_EnableIRQ>
}
 8004406:	e018      	b.n	800443a <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM7)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <HAL_TIM_Base_MspInit+0x15c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d113      	bne.n	800443a <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004412:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004416:	4a0c      	ldr	r2, [pc, #48]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004418:	f043 0320 	orr.w	r3, r3, #32
 800441c:	6593      	str	r3, [r2, #88]	@ 0x58
 800441e:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <HAL_TIM_Base_MspInit+0x14c>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800442a:	2200      	movs	r2, #0
 800442c:	2100      	movs	r1, #0
 800442e:	2032      	movs	r0, #50	@ 0x32
 8004430:	f001 fdb2 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004434:	2032      	movs	r0, #50	@ 0x32
 8004436:	f001 fdc9 	bl	8005fcc <HAL_NVIC_EnableIRQ>
}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40021000 	.word	0x40021000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40001400 	.word	0x40001400

0800445c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800445c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004494 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004460:	f7ff fc4e 	bl	8003d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004464:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004466:	e003      	b.n	8004470 <LoopCopyDataInit>

08004468 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800446a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800446c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800446e:	3104      	adds	r1, #4

08004470 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004470:	480a      	ldr	r0, [pc, #40]	@ (800449c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004474:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004476:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004478:	d3f6      	bcc.n	8004468 <CopyDataInit>
	ldr	r2, =_sbss
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800447c:	e002      	b.n	8004484 <LoopFillZerobss>

0800447e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800447e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004480:	f842 3b04 	str.w	r3, [r2], #4

08004484 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004484:	4b08      	ldr	r3, [pc, #32]	@ (80044a8 <LoopForever+0x16>)
	cmp	r2, r3
 8004486:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004488:	d3f9      	bcc.n	800447e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800448a:	f00c fdfb 	bl	8011084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800448e:	f7fe ffc3 	bl	8003418 <main>

08004492 <LoopForever>:

LoopForever:
    b LoopForever
 8004492:	e7fe      	b.n	8004492 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004494:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8004498:	08011820 	.word	0x08011820
	ldr	r0, =_sdata
 800449c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80044a0:	2000016c 	.word	0x2000016c
	ldr	r2, =_sbss
 80044a4:	2000016c 	.word	0x2000016c
	ldr	r3, = _ebss
 80044a8:	20002328 	.word	0x20002328

080044ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044ac:	e7fe      	b.n	80044ac <ADC1_2_IRQHandler>

080044ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80044b8:	2004      	movs	r0, #4
 80044ba:	f001 fd62 	bl	8005f82 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80044be:	f7ff fc31 	bl	8003d24 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044c2:	2007      	movs	r0, #7
 80044c4:	f7ff fafc 	bl	8003ac0 <HAL_InitTick>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	71fb      	strb	r3, [r7, #7]
 80044d2:	e001      	b.n	80044d8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044d4:	f7ff fad0 	bl	8003a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044d8:	79fb      	ldrb	r3, [r7, #7]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044e8:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <HAL_IncTick+0x20>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_IncTick+0x24>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <HAL_IncTick+0x24>)
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000024 	.word	0x20000024
 8004508:	20000800 	.word	0x20000800

0800450c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return uwTick;
 8004510:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <HAL_GetTick+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000800 	.word	0x20000800

08004524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800452c:	f7ff ffee 	bl	800450c <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800453c:	d005      	beq.n	800454a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800453e:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <HAL_Delay+0x44>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800454a:	bf00      	nop
 800454c:	f7ff ffde 	bl	800450c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	429a      	cmp	r2, r3
 800455a:	d8f7      	bhi.n	800454c <HAL_Delay+0x28>
  {
  }
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000024 	.word	0x20000024

0800456c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3360      	adds	r3, #96	@ 0x60
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <LL_ADC_SetOffset+0x44>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	03fff000 	.word	0x03fff000

0800461c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3360      	adds	r3, #96	@ 0x60
 800462a:	461a      	mov	r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3360      	adds	r3, #96	@ 0x60
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	431a      	orrs	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	615a      	str	r2, [r3, #20]
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3330      	adds	r3, #48	@ 0x30
 80046da:	461a      	mov	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	4413      	add	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	211f      	movs	r1, #31
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	401a      	ands	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 011f 	and.w	r1, r3, #31
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	431a      	orrs	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004722:	b480      	push	{r7}
 8004724:	b087      	sub	sp, #28
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3314      	adds	r3, #20
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	0e5b      	lsrs	r3, r3, #25
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	4413      	add	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	0d1b      	lsrs	r3, r3, #20
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	2107      	movs	r1, #7
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	401a      	ands	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	0d1b      	lsrs	r3, r3, #20
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	431a      	orrs	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f003 0318 	and.w	r3, r3, #24
 800479a:	4908      	ldr	r1, [pc, #32]	@ (80047bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800479c:	40d9      	lsrs	r1, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	400b      	ands	r3, r1
 80047a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a6:	431a      	orrs	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	0007ffff 	.word	0x0007ffff

080047c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 031f 	and.w	r3, r3, #31
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6093      	str	r3, [r2, #8]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800482c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004830:	d101      	bne.n	8004836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004858:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004880:	d101      	bne.n	8004886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048d0:	f043 0202 	orr.w	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <LL_ADC_IsEnabled+0x18>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <LL_ADC_IsEnabled+0x1a>
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d101      	bne.n	8004922 <LL_ADC_IsDisableOngoing+0x18>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <LL_ADC_IsDisableOngoing+0x1a>
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d101      	bne.n	8004970 <LL_ADC_REG_IsConversionOngoing+0x18>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b08      	cmp	r3, #8
 8004990:	d101      	bne.n	8004996 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b089      	sub	sp, #36	@ 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e12e      	b.n	8004c1c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fe fa49 	bl	8002e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff19 	bl	800481c <LL_ADC_IsDeepPowerDownEnabled>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff feff 	bl	80047f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff34 	bl	800486c <LL_ADC_IsInternalRegulatorEnabled>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d115      	bne.n	8004a36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ff18 	bl	8004844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a14:	4b83      	ldr	r3, [pc, #524]	@ (8004c24 <HAL_ADC_Init+0x280>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	099b      	lsrs	r3, r3, #6
 8004a1a:	4a83      	ldr	r2, [pc, #524]	@ (8004c28 <HAL_ADC_Init+0x284>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	099b      	lsrs	r3, r3, #6
 8004a22:	3301      	adds	r3, #1
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a28:	e002      	b.n	8004a30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f9      	bne.n	8004a2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ff16 	bl	800486c <LL_ADC_IsInternalRegulatorEnabled>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	f043 0210 	orr.w	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff76 	bl	8004958 <LL_ADC_REG_IsConversionOngoing>
 8004a6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 80c7 	bne.w	8004c0a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f040 80c3 	bne.w	8004c0a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a88:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004a8c:	f043 0202 	orr.w	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff23 	bl	80048e4 <LL_ADC_IsEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d110      	bne.n	8004ac6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aa4:	4861      	ldr	r0, [pc, #388]	@ (8004c2c <HAL_ADC_Init+0x288>)
 8004aa6:	f7ff ff1d 	bl	80048e4 <LL_ADC_IsEnabled>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4860      	ldr	r0, [pc, #384]	@ (8004c30 <HAL_ADC_Init+0x28c>)
 8004aae:	f7ff ff19 	bl	80048e4 <LL_ADC_IsEnabled>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4323      	orrs	r3, r4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	485c      	ldr	r0, [pc, #368]	@ (8004c34 <HAL_ADC_Init+0x290>)
 8004ac2:	f7ff fd53 	bl	800456c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7e5b      	ldrb	r3, [r3, #25]
 8004aca:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ad0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ad6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004adc:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d106      	bne.n	8004b02 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	3b01      	subs	r3, #1
 8004afa:	045b      	lsls	r3, r3, #17
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	4b44      	ldr	r3, [pc, #272]	@ (8004c38 <HAL_ADC_Init+0x294>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	69b9      	ldr	r1, [r7, #24]
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff21 	bl	800497e <LL_ADC_INJ_IsConversionOngoing>
 8004b3c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d140      	bne.n	8004bc6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13d      	bne.n	8004bc6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7e1b      	ldrb	r3, [r3, #24]
 8004b52:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b54:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b5c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b6c:	f023 0306 	bic.w	r3, r3, #6
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	430b      	orrs	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d118      	bne.n	8004bb6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b8e:	f023 0304 	bic.w	r3, r3, #4
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	611a      	str	r2, [r3, #16]
 8004bb4:	e007      	b.n	8004bc6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d10c      	bne.n	8004be8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd4:	f023 010f 	bic.w	r1, r3, #15
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	1e5a      	subs	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004be6:	e007      	b.n	8004bf8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 020f 	bic.w	r2, r2, #15
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfc:	f023 0303 	bic.w	r3, r3, #3
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c08:	e007      	b.n	8004c1a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	f043 0210 	orr.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3724      	adds	r7, #36	@ 0x24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	2000001c 	.word	0x2000001c
 8004c28:	053e2d63 	.word	0x053e2d63
 8004c2c:	42028000 	.word	0x42028000
 8004c30:	42028100 	.word	0x42028100
 8004c34:	42028300 	.word	0x42028300
 8004c38:	fff0c007 	.word	0xfff0c007

08004c3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c44:	4857      	ldr	r0, [pc, #348]	@ (8004da4 <HAL_ADC_Start+0x168>)
 8004c46:	f7ff fdbb 	bl	80047c0 <LL_ADC_GetMultimode>
 8004c4a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fe81 	bl	8004958 <LL_ADC_REG_IsConversionOngoing>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f040 809c 	bne.w	8004d96 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_Start+0x30>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e097      	b.n	8004d9c <HAL_ADC_Start+0x160>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fe99 	bl	80059ac <ADC_Enable>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8083 	bne.w	8004d8c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a42      	ldr	r2, [pc, #264]	@ (8004da8 <HAL_ADC_Start+0x16c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d002      	beq.n	8004caa <HAL_ADC_Start+0x6e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	e000      	b.n	8004cac <HAL_ADC_Start+0x70>
 8004caa:	4b40      	ldr	r3, [pc, #256]	@ (8004dac <HAL_ADC_Start+0x170>)
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d002      	beq.n	8004cba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d105      	bne.n	8004cc6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd2:	d106      	bne.n	8004ce2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd8:	f023 0206 	bic.w	r2, r3, #6
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ce0:	e002      	b.n	8004ce8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	221c      	movs	r2, #28
 8004cee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8004da8 <HAL_ADC_Start+0x16c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d002      	beq.n	8004d08 <HAL_ADC_Start+0xcc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e000      	b.n	8004d0a <HAL_ADC_Start+0xce>
 8004d08:	4b28      	ldr	r3, [pc, #160]	@ (8004dac <HAL_ADC_Start+0x170>)
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d008      	beq.n	8004d24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d002      	beq.n	8004d24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b09      	cmp	r3, #9
 8004d22:	d114      	bne.n	8004d4e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff fdf2 	bl	8004930 <LL_ADC_REG_StartConversion>
 8004d4c:	e025      	b.n	8004d9a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a12      	ldr	r2, [pc, #72]	@ (8004da8 <HAL_ADC_Start+0x16c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d002      	beq.n	8004d6a <HAL_ADC_Start+0x12e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	e000      	b.n	8004d6c <HAL_ADC_Start+0x130>
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <HAL_ADC_Start+0x170>)
 8004d6c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00f      	beq.n	8004d9a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d8a:	e006      	b.n	8004d9a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004d94:	e001      	b.n	8004d9a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
 8004d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	42028300 	.word	0x42028300
 8004da8:	42028100 	.word	0x42028100
 8004dac:	42028000 	.word	0x42028000

08004db0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dba:	4866      	ldr	r0, [pc, #408]	@ (8004f54 <HAL_ADC_PollForConversion+0x1a4>)
 8004dbc:	f7ff fd00 	bl	80047c0 <LL_ADC_GetMultimode>
 8004dc0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d102      	bne.n	8004dd0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e02a      	b.n	8004e26 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d002      	beq.n	8004de2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d111      	bne.n	8004e06 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0a4      	b.n	8004f4a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004e00:	2304      	movs	r3, #4
 8004e02:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004e04:	e00f      	b.n	8004e26 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e06:	4853      	ldr	r0, [pc, #332]	@ (8004f54 <HAL_ADC_PollForConversion+0x1a4>)
 8004e08:	f7ff fce8 	bl	80047dc <LL_ADC_GetMultiDMATransfer>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e093      	b.n	8004f4a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004e22:	2304      	movs	r3, #4
 8004e24:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004e26:	f7ff fb71 	bl	800450c <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e2c:	e021      	b.n	8004e72 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e34:	d01d      	beq.n	8004e72 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e36:	f7ff fb69 	bl	800450c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <HAL_ADC_PollForConversion+0x9c>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d112      	bne.n	8004e72 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	f043 0204 	orr.w	r2, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e06b      	b.n	8004f4a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0d6      	beq.n	8004e2e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fc07 	bl	80046a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01c      	beq.n	8004ed6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7e5b      	ldrb	r3, [r3, #25]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d118      	bne.n	8004ed6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d111      	bne.n	8004ed6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <HAL_ADC_PollForConversion+0x1a8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d002      	beq.n	8004ee6 <HAL_ADC_PollForConversion+0x136>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	e000      	b.n	8004ee8 <HAL_ADC_PollForConversion+0x138>
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <HAL_ADC_PollForConversion+0x1ac>)
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d008      	beq.n	8004f02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d002      	beq.n	8004f02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	d104      	bne.n	8004f0c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	e00c      	b.n	8004f26 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a11      	ldr	r2, [pc, #68]	@ (8004f58 <HAL_ADC_PollForConversion+0x1a8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d002      	beq.n	8004f1c <HAL_ADC_PollForConversion+0x16c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	e000      	b.n	8004f1e <HAL_ADC_PollForConversion+0x16e>
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <HAL_ADC_PollForConversion+0x1ac>)
 8004f1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d104      	bne.n	8004f36 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2208      	movs	r2, #8
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e008      	b.n	8004f48 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	220c      	movs	r2, #12
 8004f46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	42028300 	.word	0x42028300
 8004f58:	42028100 	.word	0x42028100
 8004f5c:	42028000 	.word	0x42028000

08004f60 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f68:	4891      	ldr	r0, [pc, #580]	@ (80051b0 <HAL_ADC_Start_IT+0x250>)
 8004f6a:	f7ff fc29 	bl	80047c0 <LL_ADC_GetMultimode>
 8004f6e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fcef 	bl	8004958 <LL_ADC_REG_IsConversionOngoing>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 8110 	bne.w	80051a2 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_ADC_Start_IT+0x30>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e10b      	b.n	80051a8 <HAL_ADC_Start_IT+0x248>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fd07 	bl	80059ac <ADC_Enable>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 80f7 	bne.w	8005198 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80051b4 <HAL_ADC_Start_IT+0x254>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d002      	beq.n	8004fce <HAL_ADC_Start_IT+0x6e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	e000      	b.n	8004fd0 <HAL_ADC_Start_IT+0x70>
 8004fce:	4b7a      	ldr	r3, [pc, #488]	@ (80051b8 <HAL_ADC_Start_IT+0x258>)
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d002      	beq.n	8004fde <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d006      	beq.n	8005004 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffa:	f023 0206 	bic.w	r2, r3, #6
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005002:	e002      	b.n	800500a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	221c      	movs	r2, #28
 8005010:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 021c 	bic.w	r2, r2, #28
 8005028:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d108      	bne.n	8005044 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0208 	orr.w	r2, r2, #8
 8005040:	605a      	str	r2, [r3, #4]
          break;
 8005042:	e008      	b.n	8005056 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0204 	orr.w	r2, r2, #4
 8005052:	605a      	str	r2, [r3, #4]
          break;
 8005054:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0210 	orr.w	r2, r2, #16
 800506c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a50      	ldr	r2, [pc, #320]	@ (80051b4 <HAL_ADC_Start_IT+0x254>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d002      	beq.n	800507e <HAL_ADC_Start_IT+0x11e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	e000      	b.n	8005080 <HAL_ADC_Start_IT+0x120>
 800507e:	4b4e      	ldr	r3, [pc, #312]	@ (80051b8 <HAL_ADC_Start_IT+0x258>)
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	4293      	cmp	r3, r2
 8005086:	d008      	beq.n	800509a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b05      	cmp	r3, #5
 8005092:	d002      	beq.n	800509a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b09      	cmp	r3, #9
 8005098:	d13a      	bne.n	8005110 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02d      	beq.n	8005104 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80050b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d110      	bne.n	80050e2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0220 	bic.w	r2, r2, #32
 80050ce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050de:	605a      	str	r2, [r3, #4]
              break;
 80050e0:	e010      	b.n	8005104 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050f0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0220 	orr.w	r2, r2, #32
 8005100:	605a      	str	r2, [r3, #4]
              break;
 8005102:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fc11 	bl	8004930 <LL_ADC_REG_StartConversion>
 800510e:	e04a      	b.n	80051a6 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005114:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a24      	ldr	r2, [pc, #144]	@ (80051b4 <HAL_ADC_Start_IT+0x254>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d002      	beq.n	800512c <HAL_ADC_Start_IT+0x1cc>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	e000      	b.n	800512e <HAL_ADC_Start_IT+0x1ce>
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <HAL_ADC_Start_IT+0x258>)
 800512e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d034      	beq.n	80051a6 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005140:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005144:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	659a      	str	r2, [r3, #88]	@ 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d110      	bne.n	8005176 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0220 	bic.w	r2, r2, #32
 8005162:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005172:	605a      	str	r2, [r3, #4]
              break;
 8005174:	e017      	b.n	80051a6 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005184:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0220 	orr.w	r2, r2, #32
 8005194:	605a      	str	r2, [r3, #4]
              break;
 8005196:	e006      	b.n	80051a6 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80051a0:	e001      	b.n	80051a6 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	42028300 	.word	0x42028300
 80051b4:	42028100 	.word	0x42028100
 80051b8:	42028000 	.word	0x42028000

080051bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b0b7      	sub	sp, #220	@ 0xdc
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x22>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e3c1      	b.n	800597e <HAL_ADC_ConfigChannel+0x7a6>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fba6 	bl	8004958 <LL_ADC_REG_IsConversionOngoing>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 83a6 	bne.w	8005960 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	f7ff fa52 	bl	80046ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fb94 	bl	8004958 <LL_ADC_REG_IsConversionOngoing>
 8005230:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fba0 	bl	800497e <LL_ADC_INJ_IsConversionOngoing>
 800523e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 81c1 	bne.w	80055ce <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800524c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 81bc 	bne.w	80055ce <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525e:	d10f      	bne.n	8005280 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	4619      	mov	r1, r3
 800526c:	f7ff fa59 	bl	8004722 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff fa00 	bl	800467e <LL_ADC_SetSamplingTimeCommonConfig>
 800527e:	e00e      	b.n	800529e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	461a      	mov	r2, r3
 800528e:	f7ff fa48 	bl	8004722 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2100      	movs	r1, #0
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff f9f0 	bl	800467e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d00a      	beq.n	80052d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6919      	ldr	r1, [r3, #16]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052d0:	f7ff f980 	bl	80045d4 <LL_ADC_SetOffset>
 80052d4:	e17b      	b.n	80055ce <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff f99d 	bl	800461c <LL_ADC_GetOffsetChannel>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x12a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff f992 	bl	800461c <LL_ADC_GetOffsetChannel>
 80052f8:	4603      	mov	r3, r0
 80052fa:	0e9b      	lsrs	r3, r3, #26
 80052fc:	f003 021f 	and.w	r2, r3, #31
 8005300:	e01e      	b.n	8005340 <HAL_ADC_ConfigChannel+0x168>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff f987 	bl	800461c <LL_ADC_GetOffsetChannel>
 800530e:	4603      	mov	r3, r0
 8005310:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8005330:	2320      	movs	r3, #32
 8005332:	e004      	b.n	800533e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8005334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005338:	fab3 f383 	clz	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x180>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	e018      	b.n	800538a <HAL_ADC_ConfigChannel+0x1b2>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800536c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800537c:	2320      	movs	r3, #32
 800537e:	e004      	b.n	800538a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8005380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800538a:	429a      	cmp	r2, r3
 800538c:	d106      	bne.n	800539c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff f956 	bl	8004648 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f93a 	bl	800461c <LL_ADC_GetOffsetChannel>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x1f0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2101      	movs	r1, #1
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f92f 	bl	800461c <LL_ADC_GetOffsetChannel>
 80053be:	4603      	mov	r3, r0
 80053c0:	0e9b      	lsrs	r3, r3, #26
 80053c2:	f003 021f 	and.w	r2, r3, #31
 80053c6:	e01e      	b.n	8005406 <HAL_ADC_ConfigChannel+0x22e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2101      	movs	r1, #1
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff f924 	bl	800461c <LL_ADC_GetOffsetChannel>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053de:	fa93 f3a3 	rbit	r3, r3
 80053e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80053e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80053ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80053f6:	2320      	movs	r3, #32
 80053f8:	e004      	b.n	8005404 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80053fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540e:	2b00      	cmp	r3, #0
 8005410:	d105      	bne.n	800541e <HAL_ADC_ConfigChannel+0x246>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	0e9b      	lsrs	r3, r3, #26
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	e018      	b.n	8005450 <HAL_ADC_ConfigChannel+0x278>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005432:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800543a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8005442:	2320      	movs	r3, #32
 8005444:	e004      	b.n	8005450 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8005446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800544a:	fab3 f383 	clz	r3, r3
 800544e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005450:	429a      	cmp	r2, r3
 8005452:	d106      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff f8f3 	bl	8004648 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2102      	movs	r1, #2
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f8d7 	bl	800461c <LL_ADC_GetOffsetChannel>
 800546e:	4603      	mov	r3, r0
 8005470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <HAL_ADC_ConfigChannel+0x2b6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2102      	movs	r1, #2
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff f8cc 	bl	800461c <LL_ADC_GetOffsetChannel>
 8005484:	4603      	mov	r3, r0
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	f003 021f 	and.w	r2, r3, #31
 800548c:	e01e      	b.n	80054cc <HAL_ADC_ConfigChannel+0x2f4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2102      	movs	r1, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff f8c1 	bl	800461c <LL_ADC_GetOffsetChannel>
 800549a:	4603      	mov	r3, r0
 800549c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80054ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80054b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80054bc:	2320      	movs	r3, #32
 80054be:	e004      	b.n	80054ca <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80054c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054c4:	fab3 f383 	clz	r3, r3
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x30c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0e9b      	lsrs	r3, r3, #26
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	e016      	b.n	8005512 <HAL_ADC_ConfigChannel+0x33a>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054f0:	fa93 f3a3 	rbit	r3, r3
 80054f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80054f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80054fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8005504:	2320      	movs	r3, #32
 8005506:	e004      	b.n	8005512 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8005508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005512:	429a      	cmp	r2, r3
 8005514:	d106      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	2102      	movs	r1, #2
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff f892 	bl	8004648 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2103      	movs	r1, #3
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff f876 	bl	800461c <LL_ADC_GetOffsetChannel>
 8005530:	4603      	mov	r3, r0
 8005532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x378>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2103      	movs	r1, #3
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff f86b 	bl	800461c <LL_ADC_GetOffsetChannel>
 8005546:	4603      	mov	r3, r0
 8005548:	0e9b      	lsrs	r3, r3, #26
 800554a:	f003 021f 	and.w	r2, r3, #31
 800554e:	e017      	b.n	8005580 <HAL_ADC_ConfigChannel+0x3a8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2103      	movs	r1, #3
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff f860 	bl	800461c <LL_ADC_GetOffsetChannel>
 800555c:	4603      	mov	r3, r0
 800555e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005568:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800556a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800556c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8005572:	2320      	movs	r3, #32
 8005574:	e003      	b.n	800557e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8005576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005578:	fab3 f383 	clz	r3, r3
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005588:	2b00      	cmp	r3, #0
 800558a:	d105      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x3c0>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	0e9b      	lsrs	r3, r3, #26
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	e011      	b.n	80055bc <HAL_ADC_ConfigChannel+0x3e4>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055a0:	fa93 f3a3 	rbit	r3, r3
 80055a4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80055a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80055aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80055b0:	2320      	movs	r3, #32
 80055b2:	e003      	b.n	80055bc <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80055b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055bc:	429a      	cmp	r2, r3
 80055be:	d106      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2103      	movs	r1, #3
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff f83d 	bl	8004648 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff f986 	bl	80048e4 <LL_ADC_IsEnabled>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 81c9 	bne.w	8005972 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6819      	ldr	r1, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	461a      	mov	r2, r3
 80055ee:	f7ff f8c3 	bl	8004778 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4a8f      	ldr	r2, [pc, #572]	@ (8005834 <HAL_ADC_ConfigChannel+0x65c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	f040 8131 	bne.w	8005860 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x44e>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	0e9b      	lsrs	r3, r3, #26
 8005614:	3301      	adds	r3, #1
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2b09      	cmp	r3, #9
 800561c:	bf94      	ite	ls
 800561e:	2301      	movls	r3, #1
 8005620:	2300      	movhi	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e019      	b.n	800565a <HAL_ADC_ConfigChannel+0x482>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800562e:	fa93 f3a3 	rbit	r3, r3
 8005632:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005636:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800563e:	2320      	movs	r3, #32
 8005640:	e003      	b.n	800564a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8005642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005644:	fab3 f383 	clz	r3, r3
 8005648:	b2db      	uxtb	r3, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2b09      	cmp	r3, #9
 8005652:	bf94      	ite	ls
 8005654:	2301      	movls	r3, #1
 8005656:	2300      	movhi	r3, #0
 8005658:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800565a:	2b00      	cmp	r3, #0
 800565c:	d079      	beq.n	8005752 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <HAL_ADC_ConfigChannel+0x4a2>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	0e9b      	lsrs	r3, r3, #26
 8005670:	3301      	adds	r3, #1
 8005672:	069b      	lsls	r3, r3, #26
 8005674:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005678:	e015      	b.n	80056a6 <HAL_ADC_ConfigChannel+0x4ce>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800568a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005692:	2320      	movs	r3, #32
 8005694:	e003      	b.n	800569e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	3301      	adds	r3, #1
 80056a0:	069b      	lsls	r3, r3, #26
 80056a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x4ee>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	0e9b      	lsrs	r3, r3, #26
 80056b8:	3301      	adds	r3, #1
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	e017      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x51e>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80056d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80056d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80056de:	2320      	movs	r3, #32
 80056e0:	e003      	b.n	80056ea <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80056e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e4:	fab3 f383 	clz	r3, r3
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	3301      	adds	r3, #1
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	ea42 0103 	orr.w	r1, r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_ADC_ConfigChannel+0x544>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	0e9b      	lsrs	r3, r3, #26
 800570c:	3301      	adds	r3, #1
 800570e:	f003 021f 	and.w	r2, r3, #31
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	051b      	lsls	r3, r3, #20
 800571a:	e018      	b.n	800574e <HAL_ADC_ConfigChannel+0x576>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800572e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8005734:	2320      	movs	r3, #32
 8005736:	e003      	b.n	8005740 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8005738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	3301      	adds	r3, #1
 8005742:	f003 021f 	and.w	r2, r3, #31
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800574e:	430b      	orrs	r3, r1
 8005750:	e081      	b.n	8005856 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_ADC_ConfigChannel+0x596>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	0e9b      	lsrs	r3, r3, #26
 8005764:	3301      	adds	r3, #1
 8005766:	069b      	lsls	r3, r3, #26
 8005768:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800576c:	e015      	b.n	800579a <HAL_ADC_ConfigChannel+0x5c2>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8005786:	2320      	movs	r3, #32
 8005788:	e003      	b.n	8005792 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	fab3 f383 	clz	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	3301      	adds	r3, #1
 8005794:	069b      	lsls	r3, r3, #26
 8005796:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_ADC_ConfigChannel+0x5e2>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	0e9b      	lsrs	r3, r3, #26
 80057ac:	3301      	adds	r3, #1
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2101      	movs	r1, #1
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	e017      	b.n	80057ea <HAL_ADC_ConfigChannel+0x612>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	61fb      	str	r3, [r7, #28]
  return result;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e003      	b.n	80057de <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	3301      	adds	r3, #1
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	2101      	movs	r1, #1
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	ea42 0103 	orr.w	r1, r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10d      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x63e>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	0e9b      	lsrs	r3, r3, #26
 8005800:	3301      	adds	r3, #1
 8005802:	f003 021f 	and.w	r2, r3, #31
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	3b1e      	subs	r3, #30
 800580e:	051b      	lsls	r3, r3, #20
 8005810:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005814:	e01e      	b.n	8005854 <HAL_ADC_ConfigChannel+0x67c>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	613b      	str	r3, [r7, #16]
  return result;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800582e:	2320      	movs	r3, #32
 8005830:	e006      	b.n	8005840 <HAL_ADC_ConfigChannel+0x668>
 8005832:	bf00      	nop
 8005834:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	fab3 f383 	clz	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	3301      	adds	r3, #1
 8005842:	f003 021f 	and.w	r2, r3, #31
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	3b1e      	subs	r3, #30
 800584e:	051b      	lsls	r3, r3, #20
 8005850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005854:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800585a:	4619      	mov	r1, r3
 800585c:	f7fe ff61 	bl	8004722 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b48      	ldr	r3, [pc, #288]	@ (8005988 <HAL_ADC_ConfigChannel+0x7b0>)
 8005866:	4013      	ands	r3, r2
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8082 	beq.w	8005972 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800586e:	4847      	ldr	r0, [pc, #284]	@ (800598c <HAL_ADC_ConfigChannel+0x7b4>)
 8005870:	f7fe fea2 	bl	80045b8 <LL_ADC_GetCommonPathInternalCh>
 8005874:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005878:	4845      	ldr	r0, [pc, #276]	@ (8005990 <HAL_ADC_ConfigChannel+0x7b8>)
 800587a:	f7ff f833 	bl	80048e4 <LL_ADC_IsEnabled>
 800587e:	4604      	mov	r4, r0
 8005880:	4844      	ldr	r0, [pc, #272]	@ (8005994 <HAL_ADC_ConfigChannel+0x7bc>)
 8005882:	f7ff f82f 	bl	80048e4 <LL_ADC_IsEnabled>
 8005886:	4603      	mov	r3, r0
 8005888:	4323      	orrs	r3, r4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d15e      	bne.n	800594c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a41      	ldr	r2, [pc, #260]	@ (8005998 <HAL_ADC_ConfigChannel+0x7c0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d127      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800589c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d121      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a39      	ldr	r2, [pc, #228]	@ (8005990 <HAL_ADC_ConfigChannel+0x7b8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d161      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058b6:	4619      	mov	r1, r3
 80058b8:	4834      	ldr	r0, [pc, #208]	@ (800598c <HAL_ADC_ConfigChannel+0x7b4>)
 80058ba:	f7fe fe6a 	bl	8004592 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058be:	4b37      	ldr	r3, [pc, #220]	@ (800599c <HAL_ADC_ConfigChannel+0x7c4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	4a36      	ldr	r2, [pc, #216]	@ (80059a0 <HAL_ADC_ConfigChannel+0x7c8>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80058d6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80058d8:	e002      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b01      	subs	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f9      	bne.n	80058da <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058e6:	e044      	b.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2d      	ldr	r2, [pc, #180]	@ (80059a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10d      	bne.n	800591a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a23      	ldr	r2, [pc, #140]	@ (8005990 <HAL_ADC_ConfigChannel+0x7b8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d134      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800590c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005910:	4619      	mov	r1, r3
 8005912:	481e      	ldr	r0, [pc, #120]	@ (800598c <HAL_ADC_ConfigChannel+0x7b4>)
 8005914:	f7fe fe3d 	bl	8004592 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005918:	e02b      	b.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <HAL_ADC_ConfigChannel+0x7d0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d126      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d120      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <HAL_ADC_ConfigChannel+0x7b8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d11b      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800593a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800593e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005942:	4619      	mov	r1, r3
 8005944:	4811      	ldr	r0, [pc, #68]	@ (800598c <HAL_ADC_ConfigChannel+0x7b4>)
 8005946:	f7fe fe24 	bl	8004592 <LL_ADC_SetCommonPathInternalCh>
 800594a:	e012      	b.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800595e:	e008      	b.n	8005972 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800597a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800597e:	4618      	mov	r0, r3
 8005980:	37dc      	adds	r7, #220	@ 0xdc
 8005982:	46bd      	mov	sp, r7
 8005984:	bd90      	pop	{r4, r7, pc}
 8005986:	bf00      	nop
 8005988:	80080000 	.word	0x80080000
 800598c:	42028300 	.word	0x42028300
 8005990:	42028000 	.word	0x42028000
 8005994:	42028100 	.word	0x42028100
 8005998:	c7520000 	.word	0xc7520000
 800599c:	2000001c 	.word	0x2000001c
 80059a0:	053e2d63 	.word	0x053e2d63
 80059a4:	cb840000 	.word	0xcb840000
 80059a8:	80000001 	.word	0x80000001

080059ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe ff91 	bl	80048e4 <LL_ADC_IsEnabled>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d169      	bne.n	8005a9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <ADC_Enable+0xfc>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059da:	f043 0210 	orr.w	r2, r3, #16
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e055      	b.n	8005a9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe ff4c 	bl	8004894 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059fc:	482b      	ldr	r0, [pc, #172]	@ (8005aac <ADC_Enable+0x100>)
 80059fe:	f7fe fddb 	bl	80045b8 <LL_ADC_GetCommonPathInternalCh>
 8005a02:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a0c:	4b28      	ldr	r3, [pc, #160]	@ (8005ab0 <ADC_Enable+0x104>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	099b      	lsrs	r3, r3, #6
 8005a12:	4a28      	ldr	r2, [pc, #160]	@ (8005ab4 <ADC_Enable+0x108>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a26:	e002      	b.n	8005a2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1f9      	bne.n	8005a28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a34:	f7fe fd6a 	bl	800450c <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a3a:	e028      	b.n	8005a8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe ff4f 	bl	80048e4 <LL_ADC_IsEnabled>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe ff1f 	bl	8004894 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a56:	f7fe fd59 	bl	800450c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d914      	bls.n	8005a8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d00d      	beq.n	8005a8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a76:	f043 0210 	orr.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e007      	b.n	8005a9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d1cf      	bne.n	8005a3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	8000003f 	.word	0x8000003f
 8005aac:	42028300 	.word	0x42028300
 8005ab0:	2000001c 	.word	0x2000001c
 8005ab4:	053e2d63 	.word	0x053e2d63

08005ab8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe ff20 	bl	800490a <LL_ADC_IsDisableOngoing>
 8005aca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe ff07 	bl	80048e4 <LL_ADC_IsEnabled>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d047      	beq.n	8005b6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d144      	bne.n	8005b6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 030d 	and.w	r3, r3, #13
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10c      	bne.n	8005b0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe fee1 	bl	80048bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2203      	movs	r2, #3
 8005b00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b02:	f7fe fd03 	bl	800450c <HAL_GetTick>
 8005b06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b08:	e029      	b.n	8005b5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0e:	f043 0210 	orr.w	r2, r3, #16
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1a:	f043 0201 	orr.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e023      	b.n	8005b6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b26:	f7fe fcf1 	bl	800450c <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d914      	bls.n	8005b5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00d      	beq.n	8005b5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e007      	b.n	8005b6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1dc      	bne.n	8005b26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <LL_ADC_IsEnabled>:
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <LL_ADC_IsEnabled+0x18>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <LL_ADC_IsEnabled+0x1a>
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_ADC_StartCalibration>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005bae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <LL_ADC_IsCalibrationOnGoing>:
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005be2:	d101      	bne.n	8005be8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LL_ADC_REG_IsConversionOngoing>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d101      	bne.n	8005c0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_ADCEx_Calibration_Start+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e04d      	b.n	8005cd4 <HAL_ADCEx_Calibration_Start+0xb8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff39 	bl	8005ab8 <ADC_Disable>
 8005c46:	4603      	mov	r3, r0
 8005c48:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d136      	bne.n	8005cbe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c58:	f023 0302 	bic.w	r3, r3, #2
 8005c5c:	f043 0202 	orr.w	r2, r3, #2
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff ff96 	bl	8005b9c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c70:	e014      	b.n	8005c9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a18      	ldr	r2, [pc, #96]	@ (8005cdc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d90d      	bls.n	8005c9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c84:	f023 0312 	bic.w	r3, r3, #18
 8005c88:	f043 0210 	orr.w	r2, r3, #16
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e01b      	b.n	8005cd4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff94 	bl	8005bce <LL_ADC_IsCalibrationOnGoing>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e2      	bne.n	8005c72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb0:	f023 0303 	bic.w	r3, r3, #3
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cbc:	e005      	b.n	8005cca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	f043 0210 	orr.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	0006cbff 	.word	0x0006cbff

08005ce0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b0a1      	sub	sp, #132	@ 0x84
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e089      	b.n	8005e12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005d06:	2300      	movs	r3, #0
 8005d08:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a42      	ldr	r2, [pc, #264]	@ (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d102      	bne.n	8005d1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005d18:	4b41      	ldr	r3, [pc, #260]	@ (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e001      	b.n	8005d22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e068      	b.n	8005e12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff57 	bl	8005bf6 <LL_ADC_REG_IsConversionOngoing>
 8005d48:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff ff51 	bl	8005bf6 <LL_ADC_REG_IsConversionOngoing>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d14a      	bne.n	8005df0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d147      	bne.n	8005df0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d60:	4b30      	ldr	r3, [pc, #192]	@ (8005e24 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005d62:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d027      	beq.n	8005dbc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d7e:	035b      	lsls	r3, r3, #13
 8005d80:	430b      	orrs	r3, r1
 8005d82:	431a      	orrs	r2, r3
 8005d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d88:	4824      	ldr	r0, [pc, #144]	@ (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005d8a:	f7ff fef4 	bl	8005b76 <LL_ADC_IsEnabled>
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4823      	ldr	r0, [pc, #140]	@ (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005d92:	f7ff fef0 	bl	8005b76 <LL_ADC_IsEnabled>
 8005d96:	4603      	mov	r3, r0
 8005d98:	4323      	orrs	r3, r4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d132      	bne.n	8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005da6:	f023 030f 	bic.w	r3, r3, #15
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	6811      	ldr	r1, [r2, #0]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	431a      	orrs	r2, r3
 8005db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005db8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005dba:	e023      	b.n	8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005dbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dc8:	4814      	ldr	r0, [pc, #80]	@ (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005dca:	f7ff fed4 	bl	8005b76 <LL_ADC_IsEnabled>
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4813      	ldr	r0, [pc, #76]	@ (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005dd2:	f7ff fed0 	bl	8005b76 <LL_ADC_IsEnabled>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4323      	orrs	r3, r4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d112      	bne.n	8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005dde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005de6:	f023 030f 	bic.w	r3, r3, #15
 8005dea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005dec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005dee:	e009      	b.n	8005e04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005e02:	e000      	b.n	8005e06 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005e0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3784      	adds	r7, #132	@ 0x84
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	42028000 	.word	0x42028000
 8005e20:	42028100 	.word	0x42028100
 8005e24:	42028300 	.word	0x42028300

08005e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e38:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e5a:	4a04      	ldr	r2, [pc, #16]	@ (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	60d3      	str	r3, [r2, #12]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e74:	4b04      	ldr	r3, [pc, #16]	@ (8005e88 <__NVIC_GetPriorityGrouping+0x18>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 0307 	and.w	r3, r3, #7
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	db0b      	blt.n	8005eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4907      	ldr	r1, [pc, #28]	@ (8005ec4 <__NVIC_EnableIRQ+0x38>)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2001      	movs	r0, #1
 8005eae:	fa00 f202 	lsl.w	r2, r0, r2
 8005eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	e000e100 	.word	0xe000e100

08005ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db0a      	blt.n	8005ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	490c      	ldr	r1, [pc, #48]	@ (8005f14 <__NVIC_SetPriority+0x4c>)
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	0152      	lsls	r2, r2, #5
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	440b      	add	r3, r1
 8005eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ef0:	e00a      	b.n	8005f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4908      	ldr	r1, [pc, #32]	@ (8005f18 <__NVIC_SetPriority+0x50>)
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3b04      	subs	r3, #4
 8005f00:	0152      	lsls	r2, r2, #5
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	761a      	strb	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	@ 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	bf28      	it	cs
 8005f3a:	2303      	movcs	r3, #3
 8005f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3303      	adds	r3, #3
 8005f42:	2b06      	cmp	r3, #6
 8005f44:	d902      	bls.n	8005f4c <NVIC_EncodePriority+0x30>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	e000      	b.n	8005f4e <NVIC_EncodePriority+0x32>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	401a      	ands	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	43d9      	mvns	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	4313      	orrs	r3, r2
         );
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	@ 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff4c 	bl	8005e28 <__NVIC_SetPriorityGrouping>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa6:	f7ff ff63 	bl	8005e70 <__NVIC_GetPriorityGrouping>
 8005faa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	f7ff ffb3 	bl	8005f1c <NVIC_EncodePriority>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff ff82 	bl	8005ec8 <__NVIC_SetPriority>
}
 8005fc4:	bf00      	nop
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff ff56 	bl	8005e8c <__NVIC_EnableIRQ>
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e08d      	b.n	8006116 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	4b47      	ldr	r3, [pc, #284]	@ (8006120 <HAL_DMA_Init+0x138>)
 8006002:	429a      	cmp	r2, r3
 8006004:	d80f      	bhi.n	8006026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	4b45      	ldr	r3, [pc, #276]	@ (8006124 <HAL_DMA_Init+0x13c>)
 800600e:	4413      	add	r3, r2
 8006010:	4a45      	ldr	r2, [pc, #276]	@ (8006128 <HAL_DMA_Init+0x140>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	009a      	lsls	r2, r3, #2
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a42      	ldr	r2, [pc, #264]	@ (800612c <HAL_DMA_Init+0x144>)
 8006022:	649a      	str	r2, [r3, #72]	@ 0x48
 8006024:	e00e      	b.n	8006044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	4b40      	ldr	r3, [pc, #256]	@ (8006130 <HAL_DMA_Init+0x148>)
 800602e:	4413      	add	r3, r2
 8006030:	4a3d      	ldr	r2, [pc, #244]	@ (8006128 <HAL_DMA_Init+0x140>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	009a      	lsls	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a3c      	ldr	r2, [pc, #240]	@ (8006134 <HAL_DMA_Init+0x14c>)
 8006042:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 800605a:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 800605e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f97e 	bl	8006398 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a4:	d102      	bne.n	80060ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80060c0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d010      	beq.n	80060ec <HAL_DMA_Init+0x104>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d80c      	bhi.n	80060ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f99e 	bl	8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	e008      	b.n	80060fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40020407 	.word	0x40020407
 8006124:	bffdfff8 	.word	0xbffdfff8
 8006128:	cccccccd 	.word	0xcccccccd
 800612c:	40020000 	.word	0x40020000
 8006130:	bffdfbf8 	.word	0xbffdfbf8
 8006134:	40020400 	.word	0x40020400

08006138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006154:	f003 031c 	and.w	r3, r3, #28
 8006158:	2204      	movs	r2, #4
 800615a:	409a      	lsls	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d053      	beq.n	800620c <HAL_DMA_IRQHandler+0xd4>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d04e      	beq.n	800620c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d024      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006180:	f003 021c 	and.w	r2, r3, #28
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006188:	2104      	movs	r1, #4
 800618a:	fa01 f202 	lsl.w	r2, r1, r2
 800618e:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d109      	bne.n	80061b2 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80c0 	beq.w	8006328 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80061b0:	e0ba      	b.n	8006328 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80b6 	beq.w	8006328 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80061c4:	e0b0      	b.n	8006328 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0204 	bic.w	r2, r2, #4
 80061e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e8:	f003 021c 	and.w	r2, r3, #28
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f0:	2104      	movs	r1, #4
 80061f2:	fa01 f202 	lsl.w	r2, r1, r2
 80061f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8093 	beq.w	8006328 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800620a:	e08d      	b.n	8006328 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006210:	f003 031c 	and.w	r3, r3, #28
 8006214:	2202      	movs	r2, #2
 8006216:	409a      	lsls	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d04e      	beq.n	80062be <HAL_DMA_IRQHandler+0x186>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d049      	beq.n	80062be <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d018      	beq.n	800626a <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d108      	bne.n	8006258 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624a:	2b00      	cmp	r3, #0
 800624c:	d06e      	beq.n	800632c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8006256:	e069      	b.n	800632c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d065      	beq.n	800632c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8006268:	e060      	b.n	800632c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 020a 	bic.w	r2, r2, #10
 8006286:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006294:	f003 021c 	and.w	r2, r3, #28
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629c:	2102      	movs	r1, #2
 800629e:	fa01 f202 	lsl.w	r2, r1, r2
 80062a2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d03b      	beq.n	800632c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80062bc:	e036      	b.n	800632c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c2:	f003 031c 	and.w	r3, r3, #28
 80062c6:	2208      	movs	r2, #8
 80062c8:	409a      	lsls	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d02e      	beq.n	8006330 <HAL_DMA_IRQHandler+0x1f8>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d029      	beq.n	8006330 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 020e 	bic.w	r2, r2, #14
 80062ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f0:	f003 021c 	and.w	r2, r3, #28
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f8:	2101      	movs	r1, #1
 80062fa:	fa01 f202 	lsl.w	r2, r1, r2
 80062fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006326:	e002      	b.n	800632e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8006328:	bf00      	nop
 800632a:	e000      	b.n	800632e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800632c:	bf00      	nop
  return;
 800632e:	bf00      	nop
 8006330:	bf00      	nop
}
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	72fb      	strb	r3, [r7, #11]
    return status;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	e01b      	b.n	800638c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e003      	b.n	8006382 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006380:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

  return status;
 800638a:	7afb      	ldrb	r3, [r7, #11]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	4b17      	ldr	r3, [pc, #92]	@ (8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d80a      	bhi.n	80063c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063b8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6513      	str	r3, [r2, #80]	@ 0x50
 80063c0:	e007      	b.n	80063d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	009a      	lsls	r2, r3, #2
 80063ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006408 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80063cc:	4413      	add	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	3b08      	subs	r3, #8
 80063da:	4a0c      	ldr	r2, [pc, #48]	@ (800640c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80063e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2201      	movs	r2, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40020407 	.word	0x40020407
 8006408:	40020820 	.word	0x40020820
 800640c:	cccccccd 	.word	0xcccccccd
 8006410:	40020880 	.word	0x40020880

08006414 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	2201      	movs	r2, #1
 8006442:	409a      	lsls	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	1000823f 	.word	0x1000823f
 8006458:	40020940 	.word	0x40020940

0800645c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e142      	b.n	80066f4 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fc fe5a 	bl	800313c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0210 	bic.w	r2, r2, #16
 8006496:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006498:	f7fe f838 	bl	800450c <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800649e:	e012      	b.n	80064c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80064a0:	f7fe f834 	bl	800450c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b0a      	cmp	r3, #10
 80064ac:	d90b      	bls.n	80064c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b2:	f043 0201 	orr.w	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2203      	movs	r2, #3
 80064be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e116      	b.n	80066f4 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d0e5      	beq.n	80064a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064e4:	f7fe f812 	bl	800450c <HAL_GetTick>
 80064e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80064ea:	e012      	b.n	8006512 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80064ec:	f7fe f80e 	bl	800450c <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b0a      	cmp	r3, #10
 80064f8:	d90b      	bls.n	8006512 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064fe:	f043 0201 	orr.w	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2203      	movs	r2, #3
 800650a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0f0      	b.n	80066f4 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0e5      	beq.n	80064ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0202 	orr.w	r2, r2, #2
 800652e:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006530:	4a72      	ldr	r2, [pc, #456]	@ (80066fc <HAL_FDCAN_Init+0x2a0>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7c1b      	ldrb	r3, [r3, #16]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d108      	bne.n	8006552 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800654e:	619a      	str	r2, [r3, #24]
 8006550:	e007      	b.n	8006562 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006560:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7c5b      	ldrb	r3, [r3, #17]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d108      	bne.n	800657c <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006578:	619a      	str	r2, [r3, #24]
 800657a:	e007      	b.n	800658c <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800658a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7c9b      	ldrb	r3, [r3, #18]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d108      	bne.n	80065a6 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065a2:	619a      	str	r2, [r3, #24]
 80065a4:	e007      	b.n	80065b6 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80065da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0210 	bic.w	r2, r2, #16
 80065ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d108      	bne.n	8006606 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0204 	orr.w	r2, r2, #4
 8006602:	619a      	str	r2, [r3, #24]
 8006604:	e02c      	b.n	8006660 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d028      	beq.n	8006660 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d01c      	beq.n	8006650 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006624:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0210 	orr.w	r2, r2, #16
 8006634:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b03      	cmp	r3, #3
 800663c:	d110      	bne.n	8006660 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0220 	orr.w	r2, r2, #32
 800664c:	619a      	str	r2, [r3, #24]
 800664e:	e007      	b.n	8006660 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0220 	orr.w	r2, r2, #32
 800665e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	3b01      	subs	r3, #1
 8006666:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	3b01      	subs	r3, #1
 800666e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006670:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006678:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	3b01      	subs	r3, #1
 8006682:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006688:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800668a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006694:	d115      	bne.n	80066c2 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	3b01      	subs	r3, #1
 80066a2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80066a4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066aa:	3b01      	subs	r3, #1
 80066ac:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80066ae:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	3b01      	subs	r3, #1
 80066b8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80066be:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80066c0:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f811 	bl	8006700 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	4000a500 	.word	0x4000a500

08006700 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006708:	4b27      	ldr	r3, [pc, #156]	@ (80067a8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800670a:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800671a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006722:	041a      	lsls	r2, r3, #16
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006740:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006748:	061a      	lsls	r2, r3, #24
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e005      	b.n	800678e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3304      	adds	r3, #4
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d3f3      	bcc.n	8006782 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	4000ac00 	.word	0x4000ac00

080067ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067ba:	e158      	b.n	8006a6e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	2101      	movs	r1, #1
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 814a 	beq.w	8006a68 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d005      	beq.n	80067ec <HAL_GPIO_Init+0x40>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d130      	bne.n	800684e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	2203      	movs	r2, #3
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4013      	ands	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006822:	2201      	movs	r2, #1
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	43db      	mvns	r3, r3
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4013      	ands	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	f003 0201 	and.w	r2, r3, #1
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d017      	beq.n	800688a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	2203      	movs	r2, #3
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43db      	mvns	r3, r3
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4013      	ands	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d123      	bne.n	80068de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	08da      	lsrs	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3208      	adds	r2, #8
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	220f      	movs	r2, #15
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	43db      	mvns	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	08da      	lsrs	r2, r3, #3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3208      	adds	r2, #8
 80068d8:	6939      	ldr	r1, [r7, #16]
 80068da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	2203      	movs	r2, #3
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43db      	mvns	r3, r3
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4013      	ands	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 0203 	and.w	r2, r3, #3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80a4 	beq.w	8006a68 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8006920:	4a5a      	ldr	r2, [pc, #360]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	089b      	lsrs	r3, r3, #2
 8006926:	3318      	adds	r3, #24
 8006928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	220f      	movs	r2, #15
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a52      	ldr	r2, [pc, #328]	@ (8006a90 <HAL_GPIO_Init+0x2e4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d025      	beq.n	8006998 <HAL_GPIO_Init+0x1ec>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a51      	ldr	r2, [pc, #324]	@ (8006a94 <HAL_GPIO_Init+0x2e8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d01f      	beq.n	8006994 <HAL_GPIO_Init+0x1e8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a50      	ldr	r2, [pc, #320]	@ (8006a98 <HAL_GPIO_Init+0x2ec>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d019      	beq.n	8006990 <HAL_GPIO_Init+0x1e4>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a4f      	ldr	r2, [pc, #316]	@ (8006a9c <HAL_GPIO_Init+0x2f0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d013      	beq.n	800698c <HAL_GPIO_Init+0x1e0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a4e      	ldr	r2, [pc, #312]	@ (8006aa0 <HAL_GPIO_Init+0x2f4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00d      	beq.n	8006988 <HAL_GPIO_Init+0x1dc>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a4d      	ldr	r2, [pc, #308]	@ (8006aa4 <HAL_GPIO_Init+0x2f8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <HAL_GPIO_Init+0x1d8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a4c      	ldr	r2, [pc, #304]	@ (8006aa8 <HAL_GPIO_Init+0x2fc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <HAL_GPIO_Init+0x1d4>
 800697c:	2306      	movs	r3, #6
 800697e:	e00c      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 8006980:	2307      	movs	r3, #7
 8006982:	e00a      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 8006984:	2305      	movs	r3, #5
 8006986:	e008      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 8006988:	2304      	movs	r3, #4
 800698a:	e006      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 800698c:	2303      	movs	r3, #3
 800698e:	e004      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 8006990:	2302      	movs	r3, #2
 8006992:	e002      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <HAL_GPIO_Init+0x1ee>
 8006998:	2300      	movs	r3, #0
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	f002 0203 	and.w	r2, r2, #3
 80069a0:	00d2      	lsls	r2, r2, #3
 80069a2:	4093      	lsls	r3, r2
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80069aa:	4938      	ldr	r1, [pc, #224]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	089b      	lsrs	r3, r3, #2
 80069b0:	3318      	adds	r3, #24
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069b8:	4b34      	ldr	r3, [pc, #208]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	43db      	mvns	r3, r3
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4013      	ands	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069dc:	4a2b      	ldr	r2, [pc, #172]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069e2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	43db      	mvns	r3, r3
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4013      	ands	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a06:	4a21      	ldr	r2, [pc, #132]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 8006a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	43db      	mvns	r3, r3
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a32:	4a16      	ldr	r2, [pc, #88]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8006a3a:	4b14      	ldr	r3, [pc, #80]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 8006a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	43db      	mvns	r3, r3
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a60:	4a0a      	ldr	r2, [pc, #40]	@ (8006a8c <HAL_GPIO_Init+0x2e0>)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f ae9f 	bne.w	80067bc <HAL_GPIO_Init+0x10>
  }
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	4002f400 	.word	0x4002f400
 8006a90:	42020000 	.word	0x42020000
 8006a94:	42020400 	.word	0x42020400
 8006a98:	42020800 	.word	0x42020800
 8006a9c:	42020c00 	.word	0x42020c00
 8006aa0:	42021000 	.word	0x42021000
 8006aa4:	42021400 	.word	0x42021400
 8006aa8:	42021800 	.word	0x42021800

08006aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	887b      	ldrh	r3, [r7, #2]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
 8006ac8:	e001      	b.n	8006ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006aec:	787b      	ldrb	r3, [r7, #1]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006af2:	887a      	ldrh	r2, [r7, #2]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006af8:	e002      	b.n	8006b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006afa:	887a      	ldrh	r2, [r7, #2]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b1e:	887a      	ldrh	r2, [r7, #2]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4013      	ands	r3, r2
 8006b24:	041a      	lsls	r2, r3, #16
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	43d9      	mvns	r1, r3
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	400b      	ands	r3, r1
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	619a      	str	r2, [r3, #24]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
 8006b5c:	e007      	b.n	8006b6e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8006b5e:	4b07      	ldr	r3, [pc, #28]	@ (8006b7c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0204 	bic.w	r2, r3, #4
 8006b66:	4905      	ldr	r1, [pc, #20]	@ (8006b7c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40030400 	.word	0x40030400

08006b80 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006b84:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <HAL_ICACHE_Enable+0x1c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a04      	ldr	r2, [pc, #16]	@ (8006b9c <HAL_ICACHE_Enable+0x1c>)
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40030400 	.word	0x40030400

08006ba0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0c0      	b.n	8006d34 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f009 fede 	bl	8010988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f005 fa72 	bl	800c0c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e03e      	b.n	8006c62 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006be4:	7bfa      	ldrb	r2, [r7, #15]
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3311      	adds	r3, #17
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bf8:	7bfa      	ldrb	r2, [r7, #15]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	440b      	add	r3, r1
 8006c06:	3310      	adds	r3, #16
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c0c:	7bfa      	ldrb	r2, [r7, #15]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	440b      	add	r3, r1
 8006c1a:	3313      	adds	r3, #19
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c20:	7bfa      	ldrb	r2, [r7, #15]
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3320      	adds	r3, #32
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	440b      	add	r3, r1
 8006c42:	3324      	adds	r3, #36	@ 0x24
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	440b      	add	r3, r1
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	7bfa      	ldrb	r2, [r7, #15]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d3bb      	bcc.n	8006be4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]
 8006c70:	e044      	b.n	8006cfc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c72:	7bfa      	ldrb	r2, [r7, #15]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	440b      	add	r3, r1
 8006c80:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c9a:	7bfa      	ldrb	r2, [r7, #15]
 8006c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	440b      	add	r3, r1
 8006cac:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cca:	7bfa      	ldrb	r2, [r7, #15]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ce0:	7bfa      	ldrb	r2, [r7, #15]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	440b      	add	r3, r1
 8006cee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	791b      	ldrb	r3, [r3, #4]
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3b5      	bcc.n	8006c72 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d12:	f005 f9f1 	bl	800c0f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7a9b      	ldrb	r3, [r3, #10]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d102      	bne.n	8006d32 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fbfd 	bl	800852c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_PCD_Start+0x16>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e012      	b.n	8006d78 <HAL_PCD_Start+0x3c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f005 f998 	bl	800c094 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f007 fc59 	bl	800e620 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f007 fc5e 	bl	800e64e <USB_ReadInterrupts>
 8006d92:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fb04 	bl	80073ac <PCD_EP_ISR_Handler>

    return;
 8006da4:	e110      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d013      	beq.n	8006dd8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dc2:	b292      	uxth	r2, r2
 8006dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f009 fe7e 	bl	8010aca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8fc 	bl	8006fce <HAL_PCD_SetAddress>

    return;
 8006dd6:	e0f7      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00c      	beq.n	8006dfc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006df4:	b292      	uxth	r2, r2
 8006df6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006dfa:	e0e5      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00c      	beq.n	8006e20 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e1e:	e0d3      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d034      	beq.n	8006e94 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0204 	bic.w	r2, r2, #4
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0208 	bic.w	r2, r2, #8
 8006e54:	b292      	uxth	r2, r2
 8006e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d107      	bne.n	8006e74 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f009 ffdc 	bl	8010e2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f009 fe54 	bl	8010b22 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e92:	e099      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d027      	beq.n	8006eee <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0208 	orr.w	r2, r2, #8
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ec8:	b292      	uxth	r2, r2
 8006eca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0204 	orr.w	r2, r2, #4
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f009 fe0d 	bl	8010b06 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006eec:	e06c      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d040      	beq.n	8006f7a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d12b      	bne.n	8006f72 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0204 	orr.w	r2, r2, #4
 8006f2c:	b292      	uxth	r2, r2
 8006f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0208 	orr.w	r2, r2, #8
 8006f44:	b292      	uxth	r2, r2
 8006f46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	089b      	lsrs	r3, r3, #2
 8006f5e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f009 ff5e 	bl	8010e2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006f70:	e02a      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f009 fdc7 	bl	8010b06 <HAL_PCD_SuspendCallback>
    return;
 8006f78:	e026      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006f96:	b292      	uxth	r2, r2
 8006f98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f009 fd86 	bl	8010aae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006fa2:	e011      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006fc6:	bf00      	nop
  }
}
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_PCD_SetAddress+0x1a>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e012      	b.n	800700e <HAL_PCD_SetAddress+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f007 fafa 	bl	800e5f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	461a      	mov	r2, r3
 8007024:	4603      	mov	r3, r0
 8007026:	70fb      	strb	r3, [r7, #3]
 8007028:	460b      	mov	r3, r1
 800702a:	803b      	strh	r3, [r7, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007038:	2b00      	cmp	r3, #0
 800703a:	da0e      	bge.n	800705a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	f003 0207 	and.w	r2, r3, #7
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	3310      	adds	r3, #16
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	705a      	strb	r2, [r3, #1]
 8007058:	e00e      	b.n	8007078 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	f003 0207 	and.w	r2, r3, #7
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	b2da      	uxtb	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007084:	883a      	ldrh	r2, [r7, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	78ba      	ldrb	r2, [r7, #2]
 800708e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007090:	78bb      	ldrb	r3, [r7, #2]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d102      	bne.n	800709c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_PCD_EP_Open+0x94>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e00e      	b.n	80070c8 <HAL_PCD_EP_Open+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68f9      	ldr	r1, [r7, #12]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f005 f83b 	bl	800c134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80070c6:	7afb      	ldrb	r3, [r7, #11]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da0e      	bge.n	8007102 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	f003 0207 	and.w	r2, r3, #7
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	3310      	adds	r3, #16
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	705a      	strb	r2, [r3, #1]
 8007100:	e00e      	b.n	8007120 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	f003 0207 	and.w	r2, r3, #7
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	4413      	add	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	b2da      	uxtb	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_PCD_EP_Close+0x6a>
 8007136:	2302      	movs	r3, #2
 8007138:	e00e      	b.n	8007158 <HAL_PCD_EP_Close+0x88>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	4618      	mov	r0, r3
 800714a:	f005 fbb7 	bl	800c8bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	460b      	mov	r3, r1
 800716e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	f003 0207 	and.w	r2, r3, #7
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2200      	movs	r2, #0
 8007198:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2200      	movs	r2, #0
 800719e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6979      	ldr	r1, [r7, #20]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f005 fd6f 	bl	800cc96 <USB_EPStartXfer>

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	f003 0207 	and.w	r2, r3, #7
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	440b      	add	r3, r1
 80071e0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80071e4:	681b      	ldr	r3, [r3, #0]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b086      	sub	sp, #24
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	460b      	mov	r3, r1
 8007200:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	f003 0207 	and.w	r2, r3, #7
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	3310      	adds	r3, #16
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2200      	movs	r2, #0
 8007236:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2201      	movs	r2, #1
 800723c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	b2da      	uxtb	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6979      	ldr	r1, [r7, #20]
 8007250:	4618      	mov	r0, r3
 8007252:	f005 fd20 	bl	800cc96 <USB_EPStartXfer>

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	7912      	ldrb	r2, [r2, #4]
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e03e      	b.n	80072fc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800727e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007282:	2b00      	cmp	r3, #0
 8007284:	da0e      	bge.n	80072a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	f003 0207 	and.w	r2, r3, #7
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	3310      	adds	r3, #16
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4413      	add	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	705a      	strb	r2, [r3, #1]
 80072a2:	e00c      	b.n	80072be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_PCD_EP_SetStall+0x7e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e00e      	b.n	80072fc <HAL_PCD_EP_SetStall+0x9c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f007 f884 	bl	800e3fa <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	7912      	ldrb	r2, [r2, #4]
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e040      	b.n	80073a4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007326:	2b00      	cmp	r3, #0
 8007328:	da0e      	bge.n	8007348 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	f003 0207 	and.w	r2, r3, #7
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	3310      	adds	r3, #16
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	705a      	strb	r2, [r3, #1]
 8007346:	e00e      	b.n	8007366 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	f003 0207 	and.w	r2, r3, #7
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_PCD_EP_ClrStall+0x82>
 8007382:	2302      	movs	r3, #2
 8007384:	e00e      	b.n	80073a4 <HAL_PCD_EP_ClrStall+0xa0>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4618      	mov	r0, r3
 8007396:	f007 f881 	bl	800e49c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b096      	sub	sp, #88	@ 0x58
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80073b4:	e3ad      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073be:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80073c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80073d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 816f 	bne.w	80076b8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80073da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d14c      	bne.n	8007480 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	81fb      	strh	r3, [r7, #14]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3310      	adds	r3, #16
 800740e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	4413      	add	r3, r2
 800742a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007436:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800743a:	695a      	ldr	r2, [r3, #20]
 800743c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	441a      	add	r2, r3
 8007442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007444:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007446:	2100      	movs	r1, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f009 fb16 	bl	8010a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7b1b      	ldrb	r3, [r3, #12]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 835c 	beq.w	8007b12 <PCD_EP_ISR_Handler+0x766>
 800745a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 8357 	bne.w	8007b12 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	7b1b      	ldrb	r3, [r3, #12]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800746e:	b2da      	uxtb	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	731a      	strb	r2, [r3, #12]
 800747e:	e348      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007486:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007492:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800749a:	2b00      	cmp	r3, #0
 800749c:	d032      	beq.n	8007504 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80074d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80074d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f007 f90b 	bl	800e6f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80074ea:	4013      	ands	r3, r2
 80074ec:	823b      	strh	r3, [r7, #16]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	8a3a      	ldrh	r2, [r7, #16]
 80074f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80074f8:	b292      	uxth	r2, r2
 80074fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f009 fa8f 	bl	8010a20 <HAL_PCD_SetupStageCallback>
 8007502:	e306      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007504:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007508:	2b00      	cmp	r3, #0
 800750a:	f280 8302 	bge.w	8007b12 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29a      	uxth	r2, r3
 8007516:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800751a:	4013      	ands	r3, r2
 800751c:	83fb      	strh	r3, [r7, #30]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	8bfa      	ldrh	r2, [r7, #30]
 8007524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007528:	b292      	uxth	r2, r2
 800752a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	4413      	add	r3, r2
 8007546:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007552:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d019      	beq.n	8007590 <PCD_EP_ISR_Handler+0x1e4>
 800755c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d015      	beq.n	8007590 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756a:	6959      	ldr	r1, [r3, #20]
 800756c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007572:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007574:	b29b      	uxth	r3, r3
 8007576:	f007 f8bd 	bl	800e6f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800757a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757c:	695a      	ldr	r2, [r3, #20]
 800757e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	441a      	add	r2, r3
 8007584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007586:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f009 fa5a 	bl	8010a44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800759a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800759e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 82b5 	bne.w	8007b12 <PCD_EP_ISR_Handler+0x766>
 80075a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075ac:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80075b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075b4:	f000 82ad 	beq.w	8007b12 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	4413      	add	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	801a      	strh	r2, [r3, #0]
 80075e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <PCD_EP_ISR_Handler+0x25a>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e039      	b.n	800767a <PCD_EP_ISR_Handler+0x2ce>
 8007606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b3e      	cmp	r3, #62	@ 0x3e
 800760c:	d818      	bhi.n	8007640 <PCD_EP_ISR_Handler+0x294>
 800760e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	647b      	str	r3, [r7, #68]	@ 0x44
 8007616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <PCD_EP_ISR_Handler+0x27c>
 8007622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007624:	3301      	adds	r3, #1
 8007626:	647b      	str	r3, [r7, #68]	@ 0x44
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29a      	uxth	r2, r3
 800762e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29b      	uxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e01c      	b.n	800767a <PCD_EP_ISR_Handler+0x2ce>
 8007640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	647b      	str	r3, [r7, #68]	@ 0x44
 8007648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <PCD_EP_ISR_Handler+0x2ae>
 8007654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007656:	3b01      	subs	r3, #1
 8007658:	647b      	str	r3, [r7, #68]	@ 0x44
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29a      	uxth	r2, r3
 8007660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007662:	b29b      	uxth	r3, r3
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	b29b      	uxth	r3, r3
 8007668:	4313      	orrs	r3, r2
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768a:	827b      	strh	r3, [r7, #18]
 800768c:	8a7b      	ldrh	r3, [r7, #18]
 800768e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007692:	827b      	strh	r3, [r7, #18]
 8007694:	8a7b      	ldrh	r3, [r7, #18]
 8007696:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800769a:	827b      	strh	r3, [r7, #18]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	8a7b      	ldrh	r3, [r7, #18]
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]
 80076b6:	e22c      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f280 80f6 	bge.w	80078c2 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80076ec:	4013      	ands	r3, r2
 80076ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007704:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007708:	b292      	uxth	r2, r2
 800770a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800770c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007724:	7b1b      	ldrb	r3, [r3, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d123      	bne.n	8007772 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	4413      	add	r3, r2
 8007744:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007752:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 808e 	beq.w	8007878 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007762:	6959      	ldr	r1, [r3, #20]
 8007764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007766:	88da      	ldrh	r2, [r3, #6]
 8007768:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800776c:	f006 ffc2 	bl	800e6f4 <USB_ReadPMA>
 8007770:	e082      	b.n	8007878 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007774:	78db      	ldrb	r3, [r3, #3]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d10a      	bne.n	8007790 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800777a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800777e:	461a      	mov	r2, r3
 8007780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9d3 	bl	8007b2e <HAL_PCD_EP_DB_Receive>
 8007788:	4603      	mov	r3, r0
 800778a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800778e:	e073      	b.n	8007878 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077aa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80077c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d022      	beq.n	8007834 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	4413      	add	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	4413      	add	r3, r2
 8007808:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007812:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007816:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02c      	beq.n	8007878 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007824:	6959      	ldr	r1, [r3, #20]
 8007826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007828:	891a      	ldrh	r2, [r3, #8]
 800782a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800782e:	f006 ff61 	bl	800e6f4 <USB_ReadPMA>
 8007832:	e021      	b.n	8007878 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800783c:	b29b      	uxth	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	4413      	add	r3, r2
 800784e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007858:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800785c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786a:	6959      	ldr	r1, [r3, #20]
 800786c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786e:	895a      	ldrh	r2, [r3, #10]
 8007870:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007874:	f006 ff3e 	bl	800e6f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007880:	441a      	add	r2, r3
 8007882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007884:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800788e:	441a      	add	r2, r3
 8007890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007892:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <PCD_EP_ISR_Handler+0x4fc>
 800789c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80078a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d206      	bcs.n	80078b6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80078a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f009 f8c8 	bl	8010a44 <HAL_PCD_DataOutStageCallback>
 80078b4:	e005      	b.n	80078c2 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078bc:	4618      	mov	r0, r3
 80078be:	f005 f9ea 	bl	800cc96 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8121 	beq.w	8007b12 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80078d0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	3310      	adds	r3, #16
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80078fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	441a      	add	r2, r3
 8007910:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791c:	b29b      	uxth	r3, r3
 800791e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007922:	78db      	ldrb	r3, [r3, #3]
 8007924:	2b01      	cmp	r3, #1
 8007926:	f040 80a2 	bne.w	8007a6e <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	2200      	movs	r2, #0
 800792e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007932:	7b1b      	ldrb	r3, [r3, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8093 	beq.w	8007a60 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800793a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800793e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d046      	beq.n	80079d4 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d126      	bne.n	800799c <PCD_EP_ISR_Handler+0x5f0>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	4413      	add	r3, r2
 8007964:	627b      	str	r3, [r7, #36]	@ 0x24
 8007966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	00da      	lsls	r2, r3, #3
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	4413      	add	r3, r2
 8007970:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007974:	623b      	str	r3, [r7, #32]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007980:	b29a      	uxth	r2, r3
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007994:	b29a      	uxth	r2, r3
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	e061      	b.n	8007a60 <PCD_EP_ISR_Handler+0x6b4>
 800799c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d15d      	bne.n	8007a60 <PCD_EP_ISR_Handler+0x6b4>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b8:	4413      	add	r3, r2
 80079ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00da      	lsls	r2, r3, #3
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ce:	2200      	movs	r2, #0
 80079d0:	801a      	strh	r2, [r3, #0]
 80079d2:	e045      	b.n	8007a60 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d126      	bne.n	8007a30 <PCD_EP_ISR_Handler+0x684>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f6:	4413      	add	r3, r2
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	00da      	lsls	r2, r3, #3
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	4413      	add	r3, r2
 8007a04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	e017      	b.n	8007a60 <PCD_EP_ISR_Handler+0x6b4>
 8007a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d113      	bne.n	8007a60 <PCD_EP_ISR_Handler+0x6b4>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a46:	4413      	add	r3, r2
 8007a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	00da      	lsls	r2, r3, #3
 8007a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a52:	4413      	add	r3, r2
 8007a54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f009 f807 	bl	8010a7a <HAL_PCD_DataInStageCallback>
 8007a6c:	e051      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d144      	bne.n	8007b04 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	4413      	add	r3, r2
 8007a94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a9e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d907      	bls.n	8007abe <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aba:	619a      	str	r2, [r3, #24]
 8007abc:	e002      	b.n	8007ac4 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f008 ffd1 	bl	8010a7a <HAL_PCD_DataInStageCallback>
 8007ad8:	e01b      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ae2:	441a      	add	r2, r3
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007af0:	441a      	add	r2, r3
 8007af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007afc:	4618      	mov	r0, r3
 8007afe:	f005 f8ca 	bl	800cc96 <USB_EPStartXfer>
 8007b02:	e006      	b.n	8007b12 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f917 	bl	8007d40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	b21b      	sxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f6ff ac49 	blt.w	80073b6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3758      	adds	r7, #88	@ 0x58
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b088      	sub	sp, #32
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d07c      	beq.n	8007c40 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4413      	add	r3, r2
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	8b7b      	ldrh	r3, [r7, #26]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d306      	bcc.n	8007b84 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	8b7b      	ldrh	r3, [r7, #26]
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	619a      	str	r2, [r3, #24]
 8007b82:	e002      	b.n	8007b8a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d123      	bne.n	8007bda <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bac:	833b      	strh	r3, [r7, #24]
 8007bae:	8b3b      	ldrh	r3, [r7, #24]
 8007bb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bb4:	833b      	strh	r3, [r7, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8b3b      	ldrh	r3, [r7, #24]
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01f      	beq.n	8007c24 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfe:	82fb      	strh	r3, [r7, #22]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	441a      	add	r2, r3
 8007c0e:	8afb      	ldrh	r3, [r7, #22]
 8007c10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c24:	8b7b      	ldrh	r3, [r7, #26]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8085 	beq.w	8007d36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6959      	ldr	r1, [r3, #20]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	891a      	ldrh	r2, [r3, #8]
 8007c38:	8b7b      	ldrh	r3, [r7, #26]
 8007c3a:	f006 fd5b 	bl	800e6f4 <USB_ReadPMA>
 8007c3e:	e07a      	b.n	8007d36 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	4413      	add	r3, r2
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	8b7b      	ldrh	r3, [r7, #26]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d306      	bcc.n	8007c7e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	8b7b      	ldrh	r3, [r7, #26]
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	619a      	str	r2, [r3, #24]
 8007c7c:	e002      	b.n	8007c84 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d123      	bne.n	8007cd4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	83fb      	strh	r3, [r7, #30]
 8007ca8:	8bfb      	ldrh	r3, [r7, #30]
 8007caa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cae:	83fb      	strh	r3, [r7, #30]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	441a      	add	r2, r3
 8007cbe:	8bfb      	ldrh	r3, [r7, #30]
 8007cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d11f      	bne.n	8007d1e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf8:	83bb      	strh	r3, [r7, #28]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	441a      	add	r2, r3
 8007d08:	8bbb      	ldrh	r3, [r7, #28]
 8007d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d1e:	8b7b      	ldrh	r3, [r7, #26]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	6959      	ldr	r1, [r3, #20]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	895a      	ldrh	r2, [r3, #10]
 8007d30:	8b7b      	ldrh	r3, [r7, #26]
 8007d32:	f006 fcdf 	bl	800e6f4 <USB_ReadPMA>
    }
  }

  return count;
 8007d36:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b0a4      	sub	sp, #144	@ 0x90
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 81db 	beq.w	8008110 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	4413      	add	r3, r2
 8007d74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d7e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d907      	bls.n	8007d9e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	619a      	str	r2, [r3, #24]
 8007d9c:	e002      	b.n	8007da4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2200      	movs	r2, #0
 8007da2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 80b9 	bne.w	8007f20 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	785b      	ldrb	r3, [r3, #1]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d126      	bne.n	8007e04 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dca:	4413      	add	r3, r2
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	00da      	lsls	r2, r3, #3
 8007dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e01a      	b.n	8007e3a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d116      	bne.n	8007e3a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e20:	4413      	add	r3, r2
 8007e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	00da      	lsls	r2, r3, #3
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e32:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e36:	2200      	movs	r2, #0
 8007e38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d126      	bne.n	8007e96 <HAL_PCD_EP_DB_Transmit+0x156>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	00da      	lsls	r2, r3, #3
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	801a      	strh	r2, [r3, #0]
 8007e94:	e017      	b.n	8007ec6 <HAL_PCD_EP_DB_Transmit+0x186>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d113      	bne.n	8007ec6 <HAL_PCD_EP_DB_Transmit+0x186>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	4413      	add	r3, r2
 8007eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	00da      	lsls	r2, r3, #3
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ebe:	623b      	str	r3, [r7, #32]
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f008 fdd4 	bl	8010a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 82fa 	beq.w	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef8:	82fb      	strh	r3, [r7, #22]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	441a      	add	r2, r3
 8007f08:	8afb      	ldrh	r3, [r7, #22]
 8007f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
 8007f1e:	e2d8      	b.n	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d021      	beq.n	8007f6e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	441a      	add	r2, r3
 8007f56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f040 82ac 	bne.w	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	695a      	ldr	r2, [r3, #20]
 8007f7e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007f82:	441a      	add	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007f90:	441a      	add	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6a1a      	ldr	r2, [r3, #32]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d30b      	bcc.n	8007fba <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6a1a      	ldr	r2, [r3, #32]
 8007fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	621a      	str	r2, [r3, #32]
 8007fb8:	e017      	b.n	8007fea <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d108      	bne.n	8007fd4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8007fc2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007fd2:	e00a      	b.n	8007fea <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d165      	bne.n	80080be <HAL_PCD_EP_DB_Transmit+0x37e>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008000:	b29b      	uxth	r3, r3
 8008002:	461a      	mov	r2, r3
 8008004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008006:	4413      	add	r3, r2
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	00da      	lsls	r2, r3, #3
 8008010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008012:	4413      	add	r3, r2
 8008014:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008024:	b29a      	uxth	r2, r3
 8008026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <HAL_PCD_EP_DB_Transmit+0x308>
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008040:	b29a      	uxth	r2, r3
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e057      	b.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800804c:	2b3e      	cmp	r3, #62	@ 0x3e
 800804e:	d818      	bhi.n	8008082 <HAL_PCD_EP_DB_Transmit+0x342>
 8008050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <HAL_PCD_EP_DB_Transmit+0x32a>
 8008064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008066:	3301      	adds	r3, #1
 8008068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008072:	b29b      	uxth	r3, r3
 8008074:	029b      	lsls	r3, r3, #10
 8008076:	b29b      	uxth	r3, r3
 8008078:	4313      	orrs	r3, r2
 800807a:	b29a      	uxth	r2, r3
 800807c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	e03a      	b.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008086:	095b      	lsrs	r3, r3, #5
 8008088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800808a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <HAL_PCD_EP_DB_Transmit+0x35c>
 8008096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008098:	3b01      	subs	r3, #1
 800809a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4313      	orrs	r3, r2
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	e01c      	b.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d118      	bne.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080da:	4413      	add	r3, r2
 80080dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	00da      	lsls	r2, r3, #3
 80080e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e6:	4413      	add	r3, r2
 80080e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6959      	ldr	r1, [r3, #20]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	891a      	ldrh	r2, [r3, #8]
 8008104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008108:	b29b      	uxth	r3, r3
 800810a:	f006 fab0 	bl	800e66e <USB_WritePMA>
 800810e:	e1e0      	b.n	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008118:	b29b      	uxth	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	4413      	add	r3, r2
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	6812      	ldr	r2, [r2, #0]
 8008128:	4413      	add	r3, r2
 800812a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008134:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008140:	429a      	cmp	r2, r3
 8008142:	d307      	bcc.n	8008154 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	699a      	ldr	r2, [r3, #24]
 8008148:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800814c:	1ad2      	subs	r2, r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	619a      	str	r2, [r3, #24]
 8008152:	e002      	b.n	800815a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 80c0 	bne.w	80082e4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d126      	bne.n	80081ba <HAL_PCD_EP_DB_Transmit+0x47a>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800817a:	b29b      	uxth	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008180:	4413      	add	r3, r2
 8008182:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	00da      	lsls	r2, r3, #3
 800818a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800818c:	4413      	add	r3, r2
 800818e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008192:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800819e:	b29a      	uxth	r2, r3
 80081a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	e01a      	b.n	80081f0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d116      	bne.n	80081f0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081d6:	4413      	add	r3, r2
 80081d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	00da      	lsls	r2, r3, #3
 80081e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e2:	4413      	add	r3, r2
 80081e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80081ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081ec:	2200      	movs	r2, #0
 80081ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d12b      	bne.n	8008256 <HAL_PCD_EP_DB_Transmit+0x516>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800820c:	b29b      	uxth	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008212:	4413      	add	r3, r2
 8008214:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	00da      	lsls	r2, r3, #3
 800821c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800821e:	4413      	add	r3, r2
 8008220:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	e017      	b.n	8008286 <HAL_PCD_EP_DB_Transmit+0x546>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d113      	bne.n	8008286 <HAL_PCD_EP_DB_Transmit+0x546>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008266:	b29b      	uxth	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800826c:	4413      	add	r3, r2
 800826e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	00da      	lsls	r2, r3, #3
 8008276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008278:	4413      	add	r3, r2
 800827a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800827e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008282:	2200      	movs	r2, #0
 8008284:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	4619      	mov	r1, r3
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f008 fbf4 	bl	8010a7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 811a 	bne.w	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	441a      	add	r2, r3
 80082ca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80082ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8013      	strh	r3, [r2, #0]
 80082e2:	e0f6      	b.n	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d121      	bne.n	8008332 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008308:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800831e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008326:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800832a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008338:	2b01      	cmp	r3, #1
 800833a:	f040 80ca 	bne.w	80084d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008346:	441a      	add	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008354:	441a      	add	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	d30b      	bcc.n	800837e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	621a      	str	r2, [r3, #32]
 800837c:	e017      	b.n	80083ae <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d108      	bne.n	8008398 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008386:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800838a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008396:	e00a      	b.n	80083ae <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d165      	bne.n	8008488 <HAL_PCD_EP_DB_Transmit+0x748>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	461a      	mov	r2, r3
 80083ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083d0:	4413      	add	r3, r2
 80083d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	00da      	lsls	r2, r3, #3
 80083da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083dc:	4413      	add	r3, r2
 80083de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <HAL_PCD_EP_DB_Transmit+0x6d2>
 80083fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840a:	b29a      	uxth	r2, r3
 800840c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800840e:	801a      	strh	r2, [r3, #0]
 8008410:	e054      	b.n	80084bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008416:	2b3e      	cmp	r3, #62	@ 0x3e
 8008418:	d818      	bhi.n	800844c <HAL_PCD_EP_DB_Transmit+0x70c>
 800841a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_PCD_EP_DB_Transmit+0x6f4>
 800842e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008430:	3301      	adds	r3, #1
 8008432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29a      	uxth	r2, r3
 800843a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800843c:	b29b      	uxth	r3, r3
 800843e:	029b      	lsls	r3, r3, #10
 8008440:	b29b      	uxth	r3, r3
 8008442:	4313      	orrs	r3, r2
 8008444:	b29a      	uxth	r2, r3
 8008446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	e037      	b.n	80084bc <HAL_PCD_EP_DB_Transmit+0x77c>
 800844c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HAL_PCD_EP_DB_Transmit+0x726>
 8008460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008462:	3b01      	subs	r3, #1
 8008464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29a      	uxth	r2, r3
 800846c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800846e:	b29b      	uxth	r3, r3
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	b29b      	uxth	r3, r3
 8008474:	4313      	orrs	r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008480:	b29a      	uxth	r2, r3
 8008482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e019      	b.n	80084bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d115      	bne.n	80084bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008498:	b29b      	uxth	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800849e:	4413      	add	r3, r2
 80084a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	00da      	lsls	r2, r3, #3
 80084a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80084b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6959      	ldr	r1, [r3, #20]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	895a      	ldrh	r2, [r3, #10]
 80084c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f006 f8ce 	bl	800e66e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ec:	82bb      	strh	r3, [r7, #20]
 80084ee:	8abb      	ldrh	r3, [r7, #20]
 80084f0:	f083 0310 	eor.w	r3, r3, #16
 80084f4:	82bb      	strh	r3, [r7, #20]
 80084f6:	8abb      	ldrh	r3, [r7, #20]
 80084f8:	f083 0320 	eor.w	r3, r3, #32
 80084fc:	82bb      	strh	r3, [r7, #20]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	441a      	add	r2, r3
 800850c:	8abb      	ldrh	r3, [r7, #20]
 800850e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800851a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800851e:	b29b      	uxth	r3, r3
 8008520:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3790      	adds	r7, #144	@ 0x90
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008550:	b29b      	uxth	r3, r3
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008564:	b29b      	uxth	r3, r3
 8008566:	f043 0302 	orr.w	r3, r3, #2
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008584:	4b05      	ldr	r3, [pc, #20]	@ (800859c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a04      	ldr	r2, [pc, #16]	@ (800859c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800858a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800858e:	6013      	str	r3, [r2, #0]
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40007000 	.word	0x40007000

080085a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80085a4:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40007000 	.word	0x40007000

080085bc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80085c4:	4b27      	ldr	r3, [pc, #156]	@ (8008664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80085cc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80085ce:	f000 f871 	bl	80086b4 <HAL_PWREx_SMPS_GetEffectiveMode>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d8:	d101      	bne.n	80085de <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e03e      	b.n	800865c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80085de:	4b21      	ldr	r3, [pc, #132]	@ (8008664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ea:	d101      	bne.n	80085f0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e035      	b.n	800865c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d101      	bne.n	80085fc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e02f      	b.n	800865c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80085fc:	4b19      	ldr	r3, [pc, #100]	@ (8008664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008604:	4917      	ldr	r1, [pc, #92]	@ (8008664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4313      	orrs	r3, r2
 800860a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800860c:	4b16      	ldr	r3, [pc, #88]	@ (8008668 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	4a16      	ldr	r2, [pc, #88]	@ (800866c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	09db      	lsrs	r3, r3, #7
 800861a:	2232      	movs	r2, #50	@ 0x32
 800861c:	fb02 f303 	mul.w	r3, r2, r3
 8008620:	4a13      	ldr	r2, [pc, #76]	@ (8008670 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800862c:	e002      	b.n	8008634 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3b01      	subs	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008634:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800863c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008640:	d102      	bne.n	8008648 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f2      	bne.n	800862e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008648:	4b06      	ldr	r3, [pc, #24]	@ (8008664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008654:	d101      	bne.n	800865a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e000      	b.n	800865c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40007000 	.word	0x40007000
 8008668:	2000001c 	.word	0x2000001c
 800866c:	0a7c5ac5 	.word	0x0a7c5ac5
 8008670:	cccccccd 	.word	0xcccccccd

08008674 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <HAL_PWREx_EnableVddUSB+0x1c>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	4a04      	ldr	r2, [pc, #16]	@ (8008690 <HAL_PWREx_EnableVddUSB+0x1c>)
 800867e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008682:	6053      	str	r3, [r2, #4]
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40007000 	.word	0x40007000

08008694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008698:	4b05      	ldr	r3, [pc, #20]	@ (80086b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4a04      	ldr	r2, [pc, #16]	@ (80086b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800869e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086a2:	6093      	str	r3, [r2, #8]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40007000 	.word	0x40007000

080086b4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80086ba:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80086ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086ce:	607b      	str	r3, [r7, #4]
 80086d0:	e00a      	b.n	80086e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d103      	bne.n	80086e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80086dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086e0:	607b      	str	r3, [r7, #4]
 80086e2:	e001      	b.n	80086e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80086e4:	2300      	movs	r3, #0
 80086e6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80086e8:	687b      	ldr	r3, [r7, #4]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	40007000 	.word	0x40007000

080086fc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f000 bcc2 	b.w	8009094 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008710:	4b99      	ldr	r3, [pc, #612]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 030c 	and.w	r3, r3, #12
 8008718:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800871a:	4b97      	ldr	r3, [pc, #604]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80e9 	beq.w	8008904 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d006      	beq.n	8008746 <HAL_RCC_OscConfig+0x4a>
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b0c      	cmp	r3, #12
 800873c:	f040 8083 	bne.w	8008846 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d17f      	bne.n	8008846 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008746:	4b8c      	ldr	r3, [pc, #560]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d006      	beq.n	8008760 <HAL_RCC_OscConfig+0x64>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	f000 bc9a 	b.w	8009094 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008764:	4b84      	ldr	r3, [pc, #528]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <HAL_RCC_OscConfig+0x7e>
 8008770:	4b81      	ldr	r3, [pc, #516]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008778:	e005      	b.n	8008786 <HAL_RCC_OscConfig+0x8a>
 800877a:	4b7f      	ldr	r3, [pc, #508]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800877c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008780:	091b      	lsrs	r3, r3, #4
 8008782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008786:	4293      	cmp	r3, r2
 8008788:	d224      	bcs.n	80087d4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878e:	4618      	mov	r0, r3
 8008790:	f000 feb8 	bl	8009504 <RCC_SetFlashLatencyFromMSIRange>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f000 bc7a 	b.w	8009094 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087a0:	4b75      	ldr	r3, [pc, #468]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a74      	ldr	r2, [pc, #464]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087a6:	f043 0308 	orr.w	r3, r3, #8
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	4b72      	ldr	r3, [pc, #456]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	496f      	ldr	r1, [pc, #444]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087be:	4b6e      	ldr	r3, [pc, #440]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	496a      	ldr	r1, [pc, #424]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	604b      	str	r3, [r1, #4]
 80087d2:	e026      	b.n	8008822 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087d4:	4b68      	ldr	r3, [pc, #416]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a67      	ldr	r2, [pc, #412]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087da:	f043 0308 	orr.w	r3, r3, #8
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	4b65      	ldr	r3, [pc, #404]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	4962      	ldr	r1, [pc, #392]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087f2:	4b61      	ldr	r3, [pc, #388]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	495d      	ldr	r1, [pc, #372]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008802:	4313      	orrs	r3, r2
 8008804:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fe77 	bl	8009504 <RCC_SetFlashLatencyFromMSIRange>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f000 bc39 	b.w	8009094 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008822:	f000 fe15 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8008826:	4603      	mov	r3, r0
 8008828:	4a54      	ldr	r2, [pc, #336]	@ (800897c <HAL_RCC_OscConfig+0x280>)
 800882a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800882c:	4b54      	ldr	r3, [pc, #336]	@ (8008980 <HAL_RCC_OscConfig+0x284>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f7fb f945 	bl	8003ac0 <HAL_InitTick>
 8008836:	4603      	mov	r3, r0
 8008838:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d060      	beq.n	8008902 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	f000 bc27 	b.w	8009094 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d039      	beq.n	80088c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800884e:	4b4a      	ldr	r3, [pc, #296]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a49      	ldr	r2, [pc, #292]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800885a:	f7fb fe57 	bl	800450c <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008860:	e00f      	b.n	8008882 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008862:	f7fb fe53 	bl	800450c <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d908      	bls.n	8008882 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008870:	4b41      	ldr	r3, [pc, #260]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	f000 bc09 	b.w	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008882:	4b3d      	ldr	r3, [pc, #244]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0e9      	beq.n	8008862 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800888e:	4b3a      	ldr	r3, [pc, #232]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a39      	ldr	r2, [pc, #228]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008894:	f043 0308 	orr.w	r3, r3, #8
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	4b37      	ldr	r3, [pc, #220]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a6:	4934      	ldr	r1, [pc, #208]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088ac:	4b32      	ldr	r3, [pc, #200]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	492f      	ldr	r1, [pc, #188]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	604b      	str	r3, [r1, #4]
 80088c0:	e020      	b.n	8008904 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80088c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80088ce:	f7fb fe1d 	bl	800450c <HAL_GetTick>
 80088d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80088d4:	e00e      	b.n	80088f4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80088d6:	f7fb fe19 	bl	800450c <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d907      	bls.n	80088f4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80088e4:	4b24      	ldr	r3, [pc, #144]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e3cf      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80088f4:	4b20      	ldr	r3, [pc, #128]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1ea      	bne.n	80088d6 <HAL_RCC_OscConfig+0x1da>
 8008900:	e000      	b.n	8008904 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008902:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d07e      	beq.n	8008a0e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b08      	cmp	r3, #8
 8008914:	d005      	beq.n	8008922 <HAL_RCC_OscConfig+0x226>
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b0c      	cmp	r3, #12
 800891a:	d10e      	bne.n	800893a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d10b      	bne.n	800893a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008922:	4b15      	ldr	r3, [pc, #84]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d06e      	beq.n	8008a0c <HAL_RCC_OscConfig+0x310>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d16a      	bne.n	8008a0c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e3ac      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008942:	d106      	bne.n	8008952 <HAL_RCC_OscConfig+0x256>
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a0b      	ldr	r2, [pc, #44]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800894a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	e024      	b.n	800899c <HAL_RCC_OscConfig+0x2a0>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800895a:	d113      	bne.n	8008984 <HAL_RCC_OscConfig+0x288>
 800895c:	4b06      	ldr	r3, [pc, #24]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a05      	ldr	r2, [pc, #20]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 8008962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a02      	ldr	r2, [pc, #8]	@ (8008978 <HAL_RCC_OscConfig+0x27c>)
 800896e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	e012      	b.n	800899c <HAL_RCC_OscConfig+0x2a0>
 8008976:	bf00      	nop
 8008978:	40021000 	.word	0x40021000
 800897c:	2000001c 	.word	0x2000001c
 8008980:	20000020 	.word	0x20000020
 8008984:	4b8b      	ldr	r3, [pc, #556]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a8a      	ldr	r2, [pc, #552]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 800898a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	4b88      	ldr	r3, [pc, #544]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a87      	ldr	r2, [pc, #540]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800899a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d019      	beq.n	80089d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a4:	f7fb fdb2 	bl	800450c <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089aa:	e00e      	b.n	80089ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ac:	f7fb fdae 	bl	800450c <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b64      	cmp	r3, #100	@ 0x64
 80089b8:	d907      	bls.n	80089ca <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ba:	4b7e      	ldr	r3, [pc, #504]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e364      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ca:	4b7a      	ldr	r3, [pc, #488]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0ea      	beq.n	80089ac <HAL_RCC_OscConfig+0x2b0>
 80089d6:	e01a      	b.n	8008a0e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fb fd98 	bl	800450c <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089de:	e00e      	b.n	80089fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089e0:	f7fb fd94 	bl	800450c <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b64      	cmp	r3, #100	@ 0x64
 80089ec:	d907      	bls.n	80089fe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089ee:	4b71      	ldr	r3, [pc, #452]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e34a      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089fe:	4b6d      	ldr	r3, [pc, #436]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1ea      	bne.n	80089e0 <HAL_RCC_OscConfig+0x2e4>
 8008a0a:	e000      	b.n	8008a0e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d06c      	beq.n	8008af4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d005      	beq.n	8008a2c <HAL_RCC_OscConfig+0x330>
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2b0c      	cmp	r3, #12
 8008a24:	d119      	bne.n	8008a5a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d116      	bne.n	8008a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a2c:	4b61      	ldr	r3, [pc, #388]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_RCC_OscConfig+0x348>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e327      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a44:	4b5b      	ldr	r3, [pc, #364]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	061b      	lsls	r3, r3, #24
 8008a52:	4958      	ldr	r1, [pc, #352]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a58:	e04c      	b.n	8008af4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d029      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a62:	4b54      	ldr	r3, [pc, #336]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a53      	ldr	r2, [pc, #332]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6e:	f7fb fd4d 	bl	800450c <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a74:	e00e      	b.n	8008a94 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a76:	f7fb fd49 	bl	800450c <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d907      	bls.n	8008a94 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a84:	4b4b      	ldr	r3, [pc, #300]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e2ff      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a94:	4b47      	ldr	r3, [pc, #284]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0ea      	beq.n	8008a76 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa0:	4b44      	ldr	r3, [pc, #272]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	061b      	lsls	r3, r3, #24
 8008aae:	4941      	ldr	r1, [pc, #260]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	604b      	str	r3, [r1, #4]
 8008ab4:	e01e      	b.n	8008af4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a3e      	ldr	r2, [pc, #248]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac2:	f7fb fd23 	bl	800450c <HAL_GetTick>
 8008ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ac8:	e00e      	b.n	8008ae8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aca:	f7fb fd1f 	bl	800450c <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d907      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ad8:	4b36      	ldr	r3, [pc, #216]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e2d5      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ae8:	4b32      	ldr	r3, [pc, #200]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1ea      	bne.n	8008aca <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d062      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d038      	beq.n	8008b7a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d108      	bne.n	8008b22 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8008b10:	4b28      	ldr	r3, [pc, #160]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b16:	4a27      	ldr	r2, [pc, #156]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b18:	f023 0310 	bic.w	r3, r3, #16
 8008b1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008b20:	e007      	b.n	8008b32 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8008b22:	4b24      	ldr	r3, [pc, #144]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b28:	4a22      	ldr	r2, [pc, #136]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b2a:	f043 0310 	orr.w	r3, r3, #16
 8008b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b32:	4b20      	ldr	r3, [pc, #128]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b38:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b42:	f7fb fce3 	bl	800450c <HAL_GetTick>
 8008b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b48:	e00f      	b.n	8008b6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b4a:	f7fb fcdf 	bl	800450c <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b07      	cmp	r3, #7
 8008b56:	d908      	bls.n	8008b6a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b58:	4b16      	ldr	r3, [pc, #88]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e294      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b6a:	4b12      	ldr	r3, [pc, #72]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0e8      	beq.n	8008b4a <HAL_RCC_OscConfig+0x44e>
 8008b78:	e025      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b80:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008b82:	f023 0301 	bic.w	r3, r3, #1
 8008b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8a:	f7fb fcbf 	bl	800450c <HAL_GetTick>
 8008b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b90:	e012      	b.n	8008bb8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b92:	f7fb fcbb 	bl	800450c <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b07      	cmp	r3, #7
 8008b9e:	d90b      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ba0:	4b04      	ldr	r3, [pc, #16]	@ (8008bb4 <HAL_RCC_OscConfig+0x4b8>)
 8008ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d004      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e270      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
 8008bb2:	bf00      	nop
 8008bb4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bb8:	4ba8      	ldr	r3, [pc, #672]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e5      	bne.n	8008b92 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 812d 	beq.w	8008e2e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008bd8:	4ba0      	ldr	r3, [pc, #640]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008be4:	4b9d      	ldr	r3, [pc, #628]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be8:	4a9c      	ldr	r2, [pc, #624]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bf8:	60bb      	str	r3, [r7, #8]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c00:	4b97      	ldr	r3, [pc, #604]	@ (8008e60 <HAL_RCC_OscConfig+0x764>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11e      	bne.n	8008c4a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c0c:	4b94      	ldr	r3, [pc, #592]	@ (8008e60 <HAL_RCC_OscConfig+0x764>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a93      	ldr	r2, [pc, #588]	@ (8008e60 <HAL_RCC_OscConfig+0x764>)
 8008c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c18:	f7fb fc78 	bl	800450c <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c1e:	e00e      	b.n	8008c3e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c20:	f7fb fc74 	bl	800450c <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d907      	bls.n	8008c3e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c2e:	4b8c      	ldr	r3, [pc, #560]	@ (8008e60 <HAL_RCC_OscConfig+0x764>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e22a      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c3e:	4b88      	ldr	r3, [pc, #544]	@ (8008e60 <HAL_RCC_OscConfig+0x764>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0ea      	beq.n	8008c20 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d01f      	beq.n	8008c96 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d010      	beq.n	8008c84 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008c62:	4b7e      	ldr	r3, [pc, #504]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c68:	4a7c      	ldr	r2, [pc, #496]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c6a:	f043 0304 	orr.w	r3, r3, #4
 8008c6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008c72:	4b7a      	ldr	r3, [pc, #488]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c78:	4a78      	ldr	r2, [pc, #480]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c7a:	f043 0301 	orr.w	r3, r3, #1
 8008c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c82:	e018      	b.n	8008cb6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008c84:	4b75      	ldr	r3, [pc, #468]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8a:	4a74      	ldr	r2, [pc, #464]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c94:	e00f      	b.n	8008cb6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008c96:	4b71      	ldr	r3, [pc, #452]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9c:	4a6f      	ldr	r2, [pc, #444]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cac:	4a6b      	ldr	r2, [pc, #428]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008cae:	f023 0304 	bic.w	r3, r3, #4
 8008cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d068      	beq.n	8008d90 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cbe:	f7fb fc25 	bl	800450c <HAL_GetTick>
 8008cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cc4:	e011      	b.n	8008cea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cc6:	f7fb fc21 	bl	800450c <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d908      	bls.n	8008cea <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cd8:	4b60      	ldr	r3, [pc, #384]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e1d4      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cea:	4b5c      	ldr	r3, [pc, #368]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0e6      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d022      	beq.n	8008d4a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d04:	4b55      	ldr	r3, [pc, #340]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d0a:	4a54      	ldr	r2, [pc, #336]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008d14:	e011      	b.n	8008d3a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d16:	f7fb fbf9 	bl	800450c <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d908      	bls.n	8008d3a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008d28:	4b4c      	ldr	r3, [pc, #304]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e1ac      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008d3a:	4b48      	ldr	r3, [pc, #288]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0e6      	beq.n	8008d16 <HAL_RCC_OscConfig+0x61a>
 8008d48:	e068      	b.n	8008e1c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d4a:	4b44      	ldr	r3, [pc, #272]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d50:	4a42      	ldr	r2, [pc, #264]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d5a:	e011      	b.n	8008d80 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5c:	f7fb fbd6 	bl	800450c <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d908      	bls.n	8008d80 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e189      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d80:	4b36      	ldr	r3, [pc, #216]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e6      	bne.n	8008d5c <HAL_RCC_OscConfig+0x660>
 8008d8e:	e045      	b.n	8008e1c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d90:	f7fb fbbc 	bl	800450c <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d96:	e011      	b.n	8008dbc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d98:	f7fb fbb8 	bl	800450c <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d908      	bls.n	8008dbc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008daa:	4b2c      	ldr	r3, [pc, #176]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e16b      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008dbc:	4b27      	ldr	r3, [pc, #156]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e6      	bne.n	8008d98 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008dca:	4b24      	ldr	r3, [pc, #144]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d021      	beq.n	8008e1c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008dd8:	4b20      	ldr	r3, [pc, #128]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dde:	4a1f      	ldr	r2, [pc, #124]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008de8:	e011      	b.n	8008e0e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dea:	f7fb fb8f 	bl	800450c <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d908      	bls.n	8008e0e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008dfc:	4b17      	ldr	r3, [pc, #92]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e142      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008e0e:	4b13      	ldr	r3, [pc, #76]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e6      	bne.n	8008dea <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e1c:	7ffb      	ldrb	r3, [r7, #31]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d105      	bne.n	8008e2e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e22:	4b0e      	ldr	r3, [pc, #56]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e26:	4a0d      	ldr	r2, [pc, #52]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d04f      	beq.n	8008eda <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d028      	beq.n	8008e94 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e42:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e48:	4a04      	ldr	r2, [pc, #16]	@ (8008e5c <HAL_RCC_OscConfig+0x760>)
 8008e4a:	f043 0301 	orr.w	r3, r3, #1
 8008e4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e52:	f7fb fb5b 	bl	800450c <HAL_GetTick>
 8008e56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e58:	e014      	b.n	8008e84 <HAL_RCC_OscConfig+0x788>
 8008e5a:	bf00      	nop
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e64:	f7fb fb52 	bl	800450c <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d908      	bls.n	8008e84 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e72:	4b8a      	ldr	r3, [pc, #552]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e107      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e84:	4b85      	ldr	r3, [pc, #532]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0e8      	beq.n	8008e64 <HAL_RCC_OscConfig+0x768>
 8008e92:	e022      	b.n	8008eda <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e94:	4b81      	ldr	r3, [pc, #516]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e9a:	4a80      	ldr	r2, [pc, #512]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea4:	f7fb fb32 	bl	800450c <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008eaa:	e00f      	b.n	8008ecc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eac:	f7fb fb2e 	bl	800450c <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d908      	bls.n	8008ecc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008eba:	4b78      	ldr	r3, [pc, #480]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e0e3      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ecc:	4b73      	ldr	r3, [pc, #460]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e8      	bne.n	8008eac <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80d7 	beq.w	8009092 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ee4:	4b6d      	ldr	r3, [pc, #436]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 030c 	and.w	r3, r3, #12
 8008eec:	2b0c      	cmp	r3, #12
 8008eee:	f000 8091 	beq.w	8009014 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d166      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008efa:	4b68      	ldr	r3, [pc, #416]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a67      	ldr	r2, [pc, #412]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f06:	f7fb fb01 	bl	800450c <HAL_GetTick>
 8008f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f0c:	e00e      	b.n	8008f2c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f0e:	f7fb fafd 	bl	800450c <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d907      	bls.n	8008f2c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e0b3      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f2c:	4b5b      	ldr	r3, [pc, #364]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1ea      	bne.n	8008f0e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f38:	4b58      	ldr	r3, [pc, #352]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	4b58      	ldr	r3, [pc, #352]	@ (80090a0 <HAL_RCC_OscConfig+0x9a4>)
 8008f3e:	4013      	ands	r3, r2
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f48:	3a01      	subs	r2, #1
 8008f4a:	0112      	lsls	r2, r2, #4
 8008f4c:	4311      	orrs	r1, r2
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f52:	0212      	lsls	r2, r2, #8
 8008f54:	4311      	orrs	r1, r2
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008f5a:	0852      	lsrs	r2, r2, #1
 8008f5c:	3a01      	subs	r2, #1
 8008f5e:	0552      	lsls	r2, r2, #21
 8008f60:	4311      	orrs	r1, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008f66:	0852      	lsrs	r2, r2, #1
 8008f68:	3a01      	subs	r2, #1
 8008f6a:	0652      	lsls	r2, r2, #25
 8008f6c:	4311      	orrs	r1, r2
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f72:	06d2      	lsls	r2, r2, #27
 8008f74:	430a      	orrs	r2, r1
 8008f76:	4949      	ldr	r1, [pc, #292]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f7c:	4b47      	ldr	r3, [pc, #284]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a46      	ldr	r2, [pc, #280]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f88:	4b44      	ldr	r3, [pc, #272]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	4a43      	ldr	r2, [pc, #268]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7fb faba 	bl	800450c <HAL_GetTick>
 8008f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f9a:	e00e      	b.n	8008fba <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9c:	f7fb fab6 	bl	800450c <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d907      	bls.n	8008fba <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008faa:	4b3c      	ldr	r3, [pc, #240]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e06c      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fba:	4b38      	ldr	r3, [pc, #224]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ea      	beq.n	8008f9c <HAL_RCC_OscConfig+0x8a0>
 8008fc6:	e064      	b.n	8009092 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc8:	4b34      	ldr	r3, [pc, #208]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a33      	ldr	r2, [pc, #204]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7fb fa9a 	bl	800450c <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fda:	e00e      	b.n	8008ffa <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fdc:	f7fb fa96 	bl	800450c <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d907      	bls.n	8008ffa <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fea:	4b2c      	ldr	r3, [pc, #176]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e04c      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ffa:	4b28      	ldr	r3, [pc, #160]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1ea      	bne.n	8008fdc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009006:	4b25      	ldr	r3, [pc, #148]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	4924      	ldr	r1, [pc, #144]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 800900c:	4b25      	ldr	r3, [pc, #148]	@ (80090a4 <HAL_RCC_OscConfig+0x9a8>)
 800900e:	4013      	ands	r3, r2
 8009010:	60cb      	str	r3, [r1, #12]
 8009012:	e03e      	b.n	8009092 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e039      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8009020:	4b1e      	ldr	r3, [pc, #120]	@ (800909c <HAL_RCC_OscConfig+0x9a0>)
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f003 0203 	and.w	r2, r3, #3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009030:	429a      	cmp	r2, r3
 8009032:	d12c      	bne.n	800908e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903e:	3b01      	subs	r3, #1
 8009040:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009042:	429a      	cmp	r2, r3
 8009044:	d123      	bne.n	800908e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009050:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009052:	429a      	cmp	r2, r3
 8009054:	d11b      	bne.n	800908e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009060:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009062:	429a      	cmp	r2, r3
 8009064:	d113      	bne.n	800908e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	3b01      	subs	r3, #1
 8009074:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009076:	429a      	cmp	r2, r3
 8009078:	d109      	bne.n	800908e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	3b01      	subs	r3, #1
 8009088:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d001      	beq.n	8009092 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	40021000 	.word	0x40021000
 80090a0:	019f800c 	.word	0x019f800c
 80090a4:	feeefffc 	.word	0xfeeefffc

080090a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80090b2:	2300      	movs	r3, #0
 80090b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e11c      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090c0:	4b90      	ldr	r3, [pc, #576]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d910      	bls.n	80090f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ce:	4b8d      	ldr	r3, [pc, #564]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f023 020f 	bic.w	r2, r3, #15
 80090d6:	498b      	ldr	r1, [pc, #556]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	4313      	orrs	r3, r2
 80090dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090de:	4b89      	ldr	r3, [pc, #548]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e104      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d010      	beq.n	800911e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	4b81      	ldr	r3, [pc, #516]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009108:	429a      	cmp	r2, r3
 800910a:	d908      	bls.n	800911e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800910c:	4b7e      	ldr	r3, [pc, #504]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	497b      	ldr	r1, [pc, #492]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800911a:	4313      	orrs	r3, r2
 800911c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8085 	beq.w	8009236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	2b03      	cmp	r3, #3
 8009132:	d11f      	bne.n	8009174 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009134:	4b74      	ldr	r3, [pc, #464]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e0da      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009144:	f000 fa42 	bl	80095cc <RCC_GetSysClockFreqFromPLLSource>
 8009148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4a6f      	ldr	r2, [pc, #444]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d947      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009152:	4b6d      	ldr	r3, [pc, #436]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d141      	bne.n	80091e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800915e:	4b6a      	ldr	r3, [pc, #424]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009166:	4a68      	ldr	r2, [pc, #416]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800916e:	2380      	movs	r3, #128	@ 0x80
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	e036      	b.n	80091e2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d107      	bne.n	800918c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800917c:	4b62      	ldr	r3, [pc, #392]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d115      	bne.n	80091b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0b6      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d107      	bne.n	80091a4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009194:	4b5c      	ldr	r3, [pc, #368]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0302 	and.w	r3, r3, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e0aa      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a4:	4b58      	ldr	r3, [pc, #352]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e0a2      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80091b4:	f000 f8b0 	bl	8009318 <HAL_RCC_GetSysClockFreq>
 80091b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	4a53      	ldr	r2, [pc, #332]	@ (800930c <HAL_RCC_ClockConfig+0x264>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d90f      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80091c2:	4b51      	ldr	r3, [pc, #324]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80091ce:	4b4e      	ldr	r3, [pc, #312]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091d6:	4a4c      	ldr	r2, [pc, #304]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80091d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80091de:	2380      	movs	r3, #128	@ 0x80
 80091e0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091e2:	4b49      	ldr	r3, [pc, #292]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f023 0203 	bic.w	r2, r3, #3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	4946      	ldr	r1, [pc, #280]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091f4:	f7fb f98a 	bl	800450c <HAL_GetTick>
 80091f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091fa:	e013      	b.n	8009224 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091fc:	f7fb f986 	bl	800450c <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800920a:	4293      	cmp	r3, r2
 800920c:	d90a      	bls.n	8009224 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800920e:	4b3e      	ldr	r3, [pc, #248]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 020c 	and.w	r2, r3, #12
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	429a      	cmp	r2, r3
 800921e:	d001      	beq.n	8009224 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e06a      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009224:	4b38      	ldr	r3, [pc, #224]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 020c 	and.w	r2, r3, #12
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	429a      	cmp	r2, r3
 8009234:	d1e2      	bne.n	80091fc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2b80      	cmp	r3, #128	@ 0x80
 800923a:	d105      	bne.n	8009248 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800923c:	4b32      	ldr	r3, [pc, #200]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	4a31      	ldr	r2, [pc, #196]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009242:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009246:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d010      	beq.n	8009276 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	4b2b      	ldr	r3, [pc, #172]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009260:	429a      	cmp	r2, r3
 8009262:	d208      	bcs.n	8009276 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009264:	4b28      	ldr	r3, [pc, #160]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4925      	ldr	r1, [pc, #148]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 8009272:	4313      	orrs	r3, r2
 8009274:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009276:	4b23      	ldr	r3, [pc, #140]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d210      	bcs.n	80092a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009284:	4b1f      	ldr	r3, [pc, #124]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f023 020f 	bic.w	r2, r3, #15
 800928c:	491d      	ldr	r1, [pc, #116]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	4313      	orrs	r3, r2
 8009292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009294:	4b1b      	ldr	r3, [pc, #108]	@ (8009304 <HAL_RCC_ClockConfig+0x25c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 030f 	and.w	r3, r3, #15
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d001      	beq.n	80092a6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e029      	b.n	80092fa <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d008      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092b2:	4b15      	ldr	r3, [pc, #84]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	4912      	ldr	r1, [pc, #72]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	490a      	ldr	r1, [pc, #40]	@ (8009308 <HAL_RCC_ClockConfig+0x260>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80092e4:	f000 f8b4 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 80092e8:	4603      	mov	r3, r0
 80092ea:	4a09      	ldr	r2, [pc, #36]	@ (8009310 <HAL_RCC_ClockConfig+0x268>)
 80092ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80092ee:	4b09      	ldr	r3, [pc, #36]	@ (8009314 <HAL_RCC_ClockConfig+0x26c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fa fbe4 	bl	8003ac0 <HAL_InitTick>
 80092f8:	4603      	mov	r3, r0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	40022000 	.word	0x40022000
 8009308:	40021000 	.word	0x40021000
 800930c:	04c4b400 	.word	0x04c4b400
 8009310:	2000001c 	.word	0x2000001c
 8009314:	20000020 	.word	0x20000020

08009318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009318:	b480      	push	{r7}
 800931a:	b089      	sub	sp, #36	@ 0x24
 800931c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	2300      	movs	r3, #0
 8009324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009326:	4b47      	ldr	r3, [pc, #284]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 030c 	and.w	r3, r3, #12
 800932e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009330:	4b44      	ldr	r3, [pc, #272]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <HAL_RCC_GetSysClockFreq+0x34>
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2b0c      	cmp	r3, #12
 8009344:	d121      	bne.n	800938a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d11e      	bne.n	800938a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800934c:	4b3d      	ldr	r3, [pc, #244]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d107      	bne.n	8009368 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009358:	4b3a      	ldr	r3, [pc, #232]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800935a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	e005      	b.n	8009374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009368:	4b36      	ldr	r3, [pc, #216]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	091b      	lsrs	r3, r3, #4
 800936e:	f003 030f 	and.w	r3, r3, #15
 8009372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8009374:	4a34      	ldr	r2, [pc, #208]	@ (8009448 <HAL_RCC_GetSysClockFreq+0x130>)
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800937c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10d      	bne.n	80093a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009388:	e00a      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b04      	cmp	r3, #4
 800938e:	d102      	bne.n	8009396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009390:	4b2e      	ldr	r3, [pc, #184]	@ (800944c <HAL_RCC_GetSysClockFreq+0x134>)
 8009392:	61bb      	str	r3, [r7, #24]
 8009394:	e004      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b08      	cmp	r3, #8
 800939a:	d101      	bne.n	80093a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800939c:	4b2b      	ldr	r3, [pc, #172]	@ (800944c <HAL_RCC_GetSysClockFreq+0x134>)
 800939e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	2b0c      	cmp	r3, #12
 80093a4:	d146      	bne.n	8009434 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80093a6:	4b27      	ldr	r3, [pc, #156]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093b0:	4b24      	ldr	r3, [pc, #144]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	091b      	lsrs	r3, r3, #4
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	3301      	adds	r3, #1
 80093bc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d003      	beq.n	80093cc <HAL_RCC_GetSysClockFreq+0xb4>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d00d      	beq.n	80093e6 <HAL_RCC_GetSysClockFreq+0xce>
 80093ca:	e019      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093cc:	4a1f      	ldr	r2, [pc, #124]	@ (800944c <HAL_RCC_GetSysClockFreq+0x134>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 80093d6:	68d2      	ldr	r2, [r2, #12]
 80093d8:	0a12      	lsrs	r2, r2, #8
 80093da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80093de:	fb02 f303 	mul.w	r3, r2, r3
 80093e2:	617b      	str	r3, [r7, #20]
        break;
 80093e4:	e019      	b.n	800941a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093e6:	4a19      	ldr	r2, [pc, #100]	@ (800944c <HAL_RCC_GetSysClockFreq+0x134>)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ee:	4a15      	ldr	r2, [pc, #84]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 80093f0:	68d2      	ldr	r2, [r2, #12]
 80093f2:	0a12      	lsrs	r2, r2, #8
 80093f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80093f8:	fb02 f303 	mul.w	r3, r2, r3
 80093fc:	617b      	str	r3, [r7, #20]
        break;
 80093fe:	e00c      	b.n	800941a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	fbb2 f3f3 	udiv	r3, r2, r3
 8009408:	4a0e      	ldr	r2, [pc, #56]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800940a:	68d2      	ldr	r2, [r2, #12]
 800940c:	0a12      	lsrs	r2, r2, #8
 800940e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	617b      	str	r3, [r7, #20]
        break;
 8009418:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800941a:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	0e5b      	lsrs	r3, r3, #25
 8009420:	f003 0303 	and.w	r3, r3, #3
 8009424:	3301      	adds	r3, #1
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009434:	69bb      	ldr	r3, [r7, #24]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3724      	adds	r7, #36	@ 0x24
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40021000 	.word	0x40021000
 8009448:	080117d4 	.word	0x080117d4
 800944c:	00f42400 	.word	0x00f42400

08009450 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8009454:	f7ff ff60 	bl	8009318 <HAL_RCC_GetSysClockFreq>
 8009458:	4602      	mov	r2, r0
 800945a:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <HAL_RCC_GetHCLKFreq+0x20>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	091b      	lsrs	r3, r3, #4
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	4903      	ldr	r1, [pc, #12]	@ (8009474 <HAL_RCC_GetHCLKFreq+0x24>)
 8009466:	5ccb      	ldrb	r3, [r1, r3]
 8009468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40021000 	.word	0x40021000
 8009474:	080117bc 	.word	0x080117bc

08009478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800947c:	f7ff ffe8 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8009480:	4602      	mov	r2, r0
 8009482:	4b05      	ldr	r3, [pc, #20]	@ (8009498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	0a1b      	lsrs	r3, r3, #8
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	4903      	ldr	r1, [pc, #12]	@ (800949c <HAL_RCC_GetPCLK1Freq+0x24>)
 800948e:	5ccb      	ldrb	r3, [r1, r3]
 8009490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009494:	4618      	mov	r0, r3
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40021000 	.word	0x40021000
 800949c:	080117cc 	.word	0x080117cc

080094a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	220f      	movs	r2, #15
 80094ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094b0:	4b12      	ldr	r3, [pc, #72]	@ (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0203 	and.w	r2, r3, #3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80094bc:	4b0f      	ldr	r3, [pc, #60]	@ (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80094c8:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80094d4:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <HAL_RCC_GetClockConfig+0x5c>)
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	08db      	lsrs	r3, r3, #3
 80094da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80094e2:	4b07      	ldr	r3, [pc, #28]	@ (8009500 <HAL_RCC_GetClockConfig+0x60>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 020f 	and.w	r2, r3, #15
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	601a      	str	r2, [r3, #0]
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40021000 	.word	0x40021000
 8009500:	40022000 	.word	0x40022000

08009504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009510:	4b2c      	ldr	r3, [pc, #176]	@ (80095c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8009512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800951c:	f7ff f840 	bl	80085a0 <HAL_PWREx_GetVoltageRange>
 8009520:	6138      	str	r0, [r7, #16]
 8009522:	e014      	b.n	800954e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009524:	4b27      	ldr	r3, [pc, #156]	@ (80095c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8009526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009528:	4a26      	ldr	r2, [pc, #152]	@ (80095c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800952a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800952e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009530:	4b24      	ldr	r3, [pc, #144]	@ (80095c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8009532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800953c:	f7ff f830 	bl	80085a0 <HAL_PWREx_GetVoltageRange>
 8009540:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009542:	4b20      	ldr	r3, [pc, #128]	@ (80095c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8009544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009546:	4a1f      	ldr	r2, [pc, #124]	@ (80095c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8009548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800954c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800955a:	d10b      	bne.n	8009574 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b80      	cmp	r3, #128	@ 0x80
 8009560:	d919      	bls.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2ba0      	cmp	r3, #160	@ 0xa0
 8009566:	d902      	bls.n	800956e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009568:	2302      	movs	r3, #2
 800956a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800956c:	e013      	b.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800956e:	2301      	movs	r3, #1
 8009570:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8009572:	e010      	b.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b80      	cmp	r3, #128	@ 0x80
 8009578:	d902      	bls.n	8009580 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800957a:	2303      	movs	r3, #3
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e00a      	b.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b80      	cmp	r3, #128	@ 0x80
 8009584:	d102      	bne.n	800958c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009586:	2302      	movs	r3, #2
 8009588:	617b      	str	r3, [r7, #20]
 800958a:	e004      	b.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b70      	cmp	r3, #112	@ 0x70
 8009590:	d101      	bne.n	8009596 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009592:	2301      	movs	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009596:	4b0c      	ldr	r3, [pc, #48]	@ (80095c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f023 020f 	bic.w	r2, r3, #15
 800959e:	490a      	ldr	r1, [pc, #40]	@ (80095c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80095a6:	4b08      	ldr	r3, [pc, #32]	@ (80095c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d001      	beq.n	80095b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e000      	b.n	80095ba <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	40021000 	.word	0x40021000
 80095c8:	40022000 	.word	0x40022000

080095cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095d2:	4b31      	ldr	r3, [pc, #196]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0303 	and.w	r3, r3, #3
 80095da:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	091b      	lsrs	r3, r3, #4
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	3301      	adds	r3, #1
 80095e8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d015      	beq.n	800961c <RCC_GetSysClockFreqFromPLLSource+0x50>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d839      	bhi.n	800966a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d01c      	beq.n	8009636 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d133      	bne.n	800966a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009602:	4a26      	ldr	r2, [pc, #152]	@ (800969c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	fbb2 f3f3 	udiv	r3, r2, r3
 800960a:	4a23      	ldr	r2, [pc, #140]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800960c:	68d2      	ldr	r2, [r2, #12]
 800960e:	0a12      	lsrs	r2, r2, #8
 8009610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009614:	fb02 f303 	mul.w	r3, r2, r3
 8009618:	613b      	str	r3, [r7, #16]
      break;
 800961a:	e029      	b.n	8009670 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800961c:	4a1f      	ldr	r2, [pc, #124]	@ (800969c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	fbb2 f3f3 	udiv	r3, r2, r3
 8009624:	4a1c      	ldr	r2, [pc, #112]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009626:	68d2      	ldr	r2, [r2, #12]
 8009628:	0a12      	lsrs	r2, r2, #8
 800962a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800962e:	fb02 f303 	mul.w	r3, r2, r3
 8009632:	613b      	str	r3, [r7, #16]
      break;
 8009634:	e01c      	b.n	8009670 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009636:	4b18      	ldr	r3, [pc, #96]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d107      	bne.n	8009652 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009642:	4b15      	ldr	r3, [pc, #84]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009648:	0a1b      	lsrs	r3, r3, #8
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	617b      	str	r3, [r7, #20]
 8009650:	e005      	b.n	800965e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009652:	4b11      	ldr	r3, [pc, #68]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	091b      	lsrs	r3, r3, #4
 8009658:	f003 030f 	and.w	r3, r3, #15
 800965c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800965e:	4a10      	ldr	r2, [pc, #64]	@ (80096a0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009666:	613b      	str	r3, [r7, #16]
        break;
 8009668:	e002      	b.n	8009670 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]
      break;
 800966e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8009670:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	0e5b      	lsrs	r3, r3, #25
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	3301      	adds	r3, #1
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	fbb2 f3f3 	udiv	r3, r2, r3
 8009688:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800968a:	683b      	ldr	r3, [r7, #0]
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40021000 	.word	0x40021000
 800969c:	00f42400 	.word	0x00f42400
 80096a0:	080117d4 	.word	0x080117d4

080096a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096ac:	2300      	movs	r3, #0
 80096ae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096b0:	2300      	movs	r3, #0
 80096b2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d040      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c4:	2b80      	cmp	r3, #128	@ 0x80
 80096c6:	d02a      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80096c8:	2b80      	cmp	r3, #128	@ 0x80
 80096ca:	d825      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80096cc:	2b60      	cmp	r3, #96	@ 0x60
 80096ce:	d026      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80096d0:	2b60      	cmp	r3, #96	@ 0x60
 80096d2:	d821      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80096d4:	2b40      	cmp	r3, #64	@ 0x40
 80096d6:	d006      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	d81d      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d009      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	d010      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80096e4:	e018      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80096e6:	4b8f      	ldr	r3, [pc, #572]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	4a8e      	ldr	r2, [pc, #568]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80096ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096f0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80096f2:	e015      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fb66 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009704:	e00c      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3320      	adds	r3, #32
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fc43 	bl	8009f98 <RCCEx_PLLSAI2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009716:	e003      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	77fb      	strb	r3, [r7, #31]
        break;
 800971c:	e000      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800971e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009720:	7ffb      	ldrb	r3, [r7, #31]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10b      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009726:	4b7f      	ldr	r3, [pc, #508]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800972c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009734:	497b      	ldr	r1, [pc, #492]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009736:	4313      	orrs	r3, r2
 8009738:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800973c:	e001      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973e:	7ffb      	ldrb	r3, [r7, #31]
 8009740:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d047      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009756:	d030      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800975c:	d82a      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800975e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009762:	d02a      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009768:	d824      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800976a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800976e:	d008      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009774:	d81e      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800977a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800977e:	d010      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009780:	e018      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009782:	4b68      	ldr	r3, [pc, #416]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	4a67      	ldr	r2, [pc, #412]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800978c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800978e:	e015      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	2100      	movs	r1, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fb18 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 800979c:	4603      	mov	r3, r0
 800979e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80097a0:	e00c      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3320      	adds	r3, #32
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fbf5 	bl	8009f98 <RCCEx_PLLSAI2_Config>
 80097ae:	4603      	mov	r3, r0
 80097b0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80097b2:	e003      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	77fb      	strb	r3, [r7, #31]
        break;
 80097b8:	e000      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80097ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097bc:	7ffb      	ldrb	r3, [r7, #31]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10b      	bne.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80097c2:	4b58      	ldr	r3, [pc, #352]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d0:	4954      	ldr	r1, [pc, #336]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80097d8:	e001      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097da:	7ffb      	ldrb	r3, [r7, #31]
 80097dc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80ab 	beq.w	8009942 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097f0:	4b4c      	ldr	r3, [pc, #304]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10d      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097fc:	4b49      	ldr	r3, [pc, #292]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009800:	4a48      	ldr	r2, [pc, #288]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009806:	6593      	str	r3, [r2, #88]	@ 0x58
 8009808:	4b46      	ldr	r3, [pc, #280]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800980a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800980c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009810:	60fb      	str	r3, [r7, #12]
 8009812:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009814:	2301      	movs	r3, #1
 8009816:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009818:	4b43      	ldr	r3, [pc, #268]	@ (8009928 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a42      	ldr	r2, [pc, #264]	@ (8009928 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800981e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009822:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009824:	f7fa fe72 	bl	800450c <HAL_GetTick>
 8009828:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800982a:	e00f      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800982c:	f7fa fe6e 	bl	800450c <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d908      	bls.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800983a:	4b3b      	ldr	r3, [pc, #236]	@ (8009928 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800984a:	e006      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800984c:	4b36      	ldr	r3, [pc, #216]	@ (8009928 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009854:	2b00      	cmp	r3, #0
 8009856:	d0e9      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009858:	e000      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800985a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800985c:	7ffb      	ldrb	r3, [r7, #31]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d164      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009862:	4b30      	ldr	r3, [pc, #192]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009868:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800986c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d01f      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	429a      	cmp	r2, r3
 800987e:	d019      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009880:	4b28      	ldr	r3, [pc, #160]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800988a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800988c:	4b25      	ldr	r3, [pc, #148]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800988e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009892:	4a24      	ldr	r2, [pc, #144]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800989c:	4b21      	ldr	r3, [pc, #132]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800989e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a2:	4a20      	ldr	r2, [pc, #128]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01f      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098be:	f7fa fe25 	bl	800450c <HAL_GetTick>
 80098c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098c4:	e012      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098c6:	f7fa fe21 	bl	800450c <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d909      	bls.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098d8:	4b12      	ldr	r3, [pc, #72]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80098ea:	e007      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0e5      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80098fa:	e000      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80098fc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80098fe:	7ffb      	ldrb	r3, [r7, #31]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10c      	bne.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009904:	4b07      	ldr	r3, [pc, #28]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009914:	4903      	ldr	r1, [pc, #12]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009916:	4313      	orrs	r3, r2
 8009918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800991c:	e008      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800991e:	7ffb      	ldrb	r3, [r7, #31]
 8009920:	77bb      	strb	r3, [r7, #30]
 8009922:	e005      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009924:	40021000 	.word	0x40021000
 8009928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992c:	7ffb      	ldrb	r3, [r7, #31]
 800992e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d105      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009936:	4b9c      	ldr	r3, [pc, #624]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800993a:	4a9b      	ldr	r2, [pc, #620]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800993c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009940:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00a      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800994e:	4b96      	ldr	r3, [pc, #600]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009954:	f023 0203 	bic.w	r2, r3, #3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995c:	4992      	ldr	r1, [pc, #584]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800995e:	4313      	orrs	r3, r2
 8009960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00a      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009970:	4b8d      	ldr	r3, [pc, #564]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009976:	f023 020c 	bic.w	r2, r3, #12
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997e:	498a      	ldr	r1, [pc, #552]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009980:	4313      	orrs	r3, r2
 8009982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00a      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009992:	4b85      	ldr	r3, [pc, #532]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009998:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a0:	4981      	ldr	r1, [pc, #516]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00a      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099b4:	4b7c      	ldr	r3, [pc, #496]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c2:	4979      	ldr	r1, [pc, #484]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0310 	and.w	r3, r3, #16
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099d6:	4b74      	ldr	r3, [pc, #464]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e4:	4970      	ldr	r1, [pc, #448]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00a      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099f8:	4b6b      	ldr	r3, [pc, #428]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a06:	4968      	ldr	r1, [pc, #416]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a1a:	4b63      	ldr	r3, [pc, #396]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a28:	495f      	ldr	r1, [pc, #380]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a4a:	4957      	ldr	r1, [pc, #348]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009a5e:	4b52      	ldr	r3, [pc, #328]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a6c:	494e      	ldr	r1, [pc, #312]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d031      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a88:	d00e      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a8e:	d814      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d015      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a98:	d10f      	bne.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a9a:	4b43      	ldr	r3, [pc, #268]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	4a42      	ldr	r2, [pc, #264]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009aa4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009aa6:	e00c      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	2100      	movs	r1, #0
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 f98c 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009ab8:	e003      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	77fb      	strb	r3, [r7, #31]
        break;
 8009abe:	e000      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8009ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac2:	7ffb      	ldrb	r3, [r7, #31]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10b      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ac8:	4b37      	ldr	r3, [pc, #220]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ace:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ad6:	4934      	ldr	r1, [pc, #208]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009ade:	e001      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	7ffb      	ldrb	r3, [r7, #31]
 8009ae2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009af0:	4b2d      	ldr	r3, [pc, #180]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009afe:	492a      	ldr	r1, [pc, #168]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b12:	4b25      	ldr	r3, [pc, #148]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b20:	4921      	ldr	r1, [pc, #132]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b34:	4b1c      	ldr	r3, [pc, #112]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b42:	4919      	ldr	r1, [pc, #100]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b56:	4b14      	ldr	r3, [pc, #80]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b5c:	f023 0203 	bic.w	r2, r3, #3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b64:	4910      	ldr	r1, [pc, #64]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d02b      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b78:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b86:	4908      	ldr	r1, [pc, #32]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b96:	d109      	bne.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b98:	4b03      	ldr	r3, [pc, #12]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	4a02      	ldr	r2, [pc, #8]	@ (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ba2:	60d3      	str	r3, [r2, #12]
 8009ba4:	e014      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009ba6:	bf00      	nop
 8009ba8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bb4:	d10c      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	2101      	movs	r1, #1
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f905 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8009bcc:	7ffb      	ldrb	r3, [r7, #31]
 8009bce:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d04a      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009be4:	d108      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8009be6:	4b70      	ldr	r3, [pc, #448]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bec:	4a6e      	ldr	r2, [pc, #440]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009bf2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009bf6:	e012      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8009bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c06:	4968      	ldr	r1, [pc, #416]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009c0e:	4b66      	ldr	r3, [pc, #408]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c14:	4a64      	ldr	r2, [pc, #400]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c26:	d10d      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f8cc 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009c38:	7ffb      	ldrb	r3, [r7, #31]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d019      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8009c3e:	7ffb      	ldrb	r3, [r7, #31]
 8009c40:	77bb      	strb	r3, [r7, #30]
 8009c42:	e016      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c4c:	d106      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c4e:	4b56      	ldr	r3, [pc, #344]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	4a55      	ldr	r2, [pc, #340]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c58:	60d3      	str	r3, [r2, #12]
 8009c5a:	e00a      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c64:	d105      	bne.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009c66:	4b50      	ldr	r3, [pc, #320]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	4a4f      	ldr	r2, [pc, #316]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c70:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d028      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c8c:	4946      	ldr	r1, [pc, #280]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c9c:	d106      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c9e:	4b42      	ldr	r3, [pc, #264]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	4a41      	ldr	r2, [pc, #260]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009ca4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ca8:	60d3      	str	r3, [r2, #12]
 8009caa:	e011      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cb4:	d10c      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	2101      	movs	r1, #1
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 f885 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009cc6:	7ffb      	ldrb	r3, [r7, #31]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8009ccc:	7ffb      	ldrb	r3, [r7, #31]
 8009cce:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01e      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009cdc:	4b32      	ldr	r3, [pc, #200]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ce2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cec:	492e      	ldr	r1, [pc, #184]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cfe:	d10c      	bne.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	2102      	movs	r1, #2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f860 	bl	8009dcc <RCCEx_PLLSAI1_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8009d16:	7ffb      	ldrb	r3, [r7, #31]
 8009d18:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00b      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d26:	4b20      	ldr	r3, [pc, #128]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d2c:	f023 0204 	bic.w	r2, r3, #4
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d36:	491c      	ldr	r1, [pc, #112]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009d4a:	4b17      	ldr	r3, [pc, #92]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d50:	f023 0218 	bic.w	r2, r3, #24
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d5a:	4913      	ldr	r1, [pc, #76]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d017      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d7e:	490a      	ldr	r1, [pc, #40]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d90:	d105      	bne.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d92:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	4a04      	ldr	r2, [pc, #16]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8009d98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d9c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8009d9e:	7fbb      	ldrb	r3, [r7, #30]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3720      	adds	r7, #32
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	40021000 	.word	0x40021000

08009dac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009db0:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a04      	ldr	r2, [pc, #16]	@ (8009dc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009db6:	f043 0304 	orr.w	r3, r3, #4
 8009dba:	6013      	str	r3, [r2, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	40021000 	.word	0x40021000

08009dcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d018      	beq.n	8009e14 <RCCEx_PLLSAI1_Config+0x48>
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d81f      	bhi.n	8009e26 <RCCEx_PLLSAI1_Config+0x5a>
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d002      	beq.n	8009df0 <RCCEx_PLLSAI1_Config+0x24>
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d009      	beq.n	8009e02 <RCCEx_PLLSAI1_Config+0x36>
 8009dee:	e01a      	b.n	8009e26 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009df0:	4b65      	ldr	r3, [pc, #404]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d117      	bne.n	8009e2c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e00:	e014      	b.n	8009e2c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009e02:	4b61      	ldr	r3, [pc, #388]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d110      	bne.n	8009e30 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e12:	e00d      	b.n	8009e30 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8009e14:	4b5c      	ldr	r3, [pc, #368]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d109      	bne.n	8009e34 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e24:	e006      	b.n	8009e34 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2a:	e004      	b.n	8009e36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8009e2c:	bf00      	nop
 8009e2e:	e002      	b.n	8009e36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8009e30:	bf00      	nop
 8009e32:	e000      	b.n	8009e36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8009e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f040 809f 	bne.w	8009f7c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009e3e:	4b52      	ldr	r3, [pc, #328]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a51      	ldr	r2, [pc, #324]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e44:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e4a:	f7fa fb5f 	bl	800450c <HAL_GetTick>
 8009e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e50:	e00f      	b.n	8009e72 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e52:	f7fa fb5b 	bl	800450c <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d908      	bls.n	8009e72 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e60:	4b49      	ldr	r3, [pc, #292]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e70:	e006      	b.n	8009e80 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e72:	4b45      	ldr	r3, [pc, #276]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e9      	bne.n	8009e52 <RCCEx_PLLSAI1_Config+0x86>
 8009e7e:	e000      	b.n	8009e82 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8009e80:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d179      	bne.n	8009f7c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d116      	bne.n	8009ebc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009e90:	691a      	ldr	r2, [r3, #16]
 8009e92:	4b3e      	ldr	r3, [pc, #248]	@ (8009f8c <RCCEx_PLLSAI1_Config+0x1c0>)
 8009e94:	4013      	ands	r3, r2
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6892      	ldr	r2, [r2, #8]
 8009e9a:	0211      	lsls	r1, r2, #8
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68d2      	ldr	r2, [r2, #12]
 8009ea0:	06d2      	lsls	r2, r2, #27
 8009ea2:	4311      	orrs	r1, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6852      	ldr	r2, [r2, #4]
 8009ea8:	3a01      	subs	r2, #1
 8009eaa:	0112      	lsls	r2, r2, #4
 8009eac:	4311      	orrs	r1, r2
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	6812      	ldr	r2, [r2, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	4934      	ldr	r1, [pc, #208]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	610b      	str	r3, [r1, #16]
 8009eba:	e033      	b.n	8009f24 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d118      	bne.n	8009ef4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ec2:	4b31      	ldr	r3, [pc, #196]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009ec4:	691a      	ldr	r2, [r3, #16]
 8009ec6:	4b32      	ldr	r3, [pc, #200]	@ (8009f90 <RCCEx_PLLSAI1_Config+0x1c4>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6892      	ldr	r2, [r2, #8]
 8009ece:	0211      	lsls	r1, r2, #8
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6912      	ldr	r2, [r2, #16]
 8009ed4:	0852      	lsrs	r2, r2, #1
 8009ed6:	3a01      	subs	r2, #1
 8009ed8:	0552      	lsls	r2, r2, #21
 8009eda:	4311      	orrs	r1, r2
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6852      	ldr	r2, [r2, #4]
 8009ee0:	3a01      	subs	r2, #1
 8009ee2:	0112      	lsls	r2, r2, #4
 8009ee4:	4311      	orrs	r1, r2
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	6812      	ldr	r2, [r2, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	4926      	ldr	r1, [pc, #152]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	610b      	str	r3, [r1, #16]
 8009ef2:	e017      	b.n	8009f24 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ef4:	4b24      	ldr	r3, [pc, #144]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009ef6:	691a      	ldr	r2, [r3, #16]
 8009ef8:	4b26      	ldr	r3, [pc, #152]	@ (8009f94 <RCCEx_PLLSAI1_Config+0x1c8>)
 8009efa:	4013      	ands	r3, r2
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6892      	ldr	r2, [r2, #8]
 8009f00:	0211      	lsls	r1, r2, #8
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6952      	ldr	r2, [r2, #20]
 8009f06:	0852      	lsrs	r2, r2, #1
 8009f08:	3a01      	subs	r2, #1
 8009f0a:	0652      	lsls	r2, r2, #25
 8009f0c:	4311      	orrs	r1, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6852      	ldr	r2, [r2, #4]
 8009f12:	3a01      	subs	r2, #1
 8009f14:	0112      	lsls	r2, r2, #4
 8009f16:	4311      	orrs	r1, r2
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	491a      	ldr	r1, [pc, #104]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f20:	4313      	orrs	r3, r2
 8009f22:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009f24:	4b18      	ldr	r3, [pc, #96]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a17      	ldr	r2, [pc, #92]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f30:	f7fa faec 	bl	800450c <HAL_GetTick>
 8009f34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f36:	e00f      	b.n	8009f58 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f38:	f7fa fae8 	bl	800450c <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d908      	bls.n	8009f58 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f46:	4b10      	ldr	r3, [pc, #64]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d109      	bne.n	8009f66 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8009f56:	e006      	b.n	8009f66 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f58:	4b0b      	ldr	r3, [pc, #44]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0e9      	beq.n	8009f38 <RCCEx_PLLSAI1_Config+0x16c>
 8009f64:	e000      	b.n	8009f68 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8009f66:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8009f6e:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	4904      	ldr	r1, [pc, #16]	@ (8009f88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40021000 	.word	0x40021000
 8009f8c:	07ff800c 	.word	0x07ff800c
 8009f90:	ff9f800c 	.word	0xff9f800c
 8009f94:	f9ff800c 	.word	0xf9ff800c

08009f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d018      	beq.n	8009fe0 <RCCEx_PLLSAI2_Config+0x48>
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d81f      	bhi.n	8009ff2 <RCCEx_PLLSAI2_Config+0x5a>
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d002      	beq.n	8009fbc <RCCEx_PLLSAI2_Config+0x24>
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d009      	beq.n	8009fce <RCCEx_PLLSAI2_Config+0x36>
 8009fba:	e01a      	b.n	8009ff2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009fbc:	4b4a      	ldr	r3, [pc, #296]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d117      	bne.n	8009ff8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009fcc:	e014      	b.n	8009ff8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009fce:	4b46      	ldr	r3, [pc, #280]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d110      	bne.n	8009ffc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009fde:	e00d      	b.n	8009ffc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8009fe0:	4b41      	ldr	r3, [pc, #260]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d109      	bne.n	800a000 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ff0:	e006      	b.n	800a000 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff6:	e004      	b.n	800a002 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e002      	b.n	800a002 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8009ffc:	bf00      	nop
 8009ffe:	e000      	b.n	800a002 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800a000:	bf00      	nop
  }

  if (status == HAL_OK)
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d169      	bne.n	800a0dc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a008:	4b37      	ldr	r3, [pc, #220]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a36      	ldr	r2, [pc, #216]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a00e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a014:	f7fa fa7a 	bl	800450c <HAL_GetTick>
 800a018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a01a:	e00f      	b.n	800a03c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a01c:	f7fa fa76 	bl	800450c <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	2b02      	cmp	r3, #2
 800a028:	d908      	bls.n	800a03c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a02a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a03a:	e006      	b.n	800a04a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a03c:	4b2a      	ldr	r3, [pc, #168]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e9      	bne.n	800a01c <RCCEx_PLLSAI2_Config+0x84>
 800a048:	e000      	b.n	800a04c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800a04a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d144      	bne.n	800a0dc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d115      	bne.n	800a084 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a058:	4b23      	ldr	r3, [pc, #140]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a05a:	695a      	ldr	r2, [r3, #20]
 800a05c:	4b23      	ldr	r3, [pc, #140]	@ (800a0ec <RCCEx_PLLSAI2_Config+0x154>)
 800a05e:	4013      	ands	r3, r2
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6892      	ldr	r2, [r2, #8]
 800a064:	0211      	lsls	r1, r2, #8
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	68d2      	ldr	r2, [r2, #12]
 800a06a:	06d2      	lsls	r2, r2, #27
 800a06c:	4311      	orrs	r1, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	6852      	ldr	r2, [r2, #4]
 800a072:	3a01      	subs	r2, #1
 800a074:	0112      	lsls	r2, r2, #4
 800a076:	4311      	orrs	r1, r2
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	6812      	ldr	r2, [r2, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	491a      	ldr	r1, [pc, #104]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a080:	4313      	orrs	r3, r2
 800a082:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a084:	4b18      	ldr	r3, [pc, #96]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a17      	ldr	r2, [pc, #92]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a08a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a08e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a090:	f7fa fa3c 	bl	800450c <HAL_GetTick>
 800a094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a096:	e00f      	b.n	800a0b8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a098:	f7fa fa38 	bl	800450c <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d908      	bls.n	800a0b8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a0a6:	4b10      	ldr	r3, [pc, #64]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800a0b6:	e006      	b.n	800a0c6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a0b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0e9      	beq.n	800a098 <RCCEx_PLLSAI2_Config+0x100>
 800a0c4:	e000      	b.n	800a0c8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800a0c6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800a0ce:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a0d0:	695a      	ldr	r2, [r3, #20]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	4904      	ldr	r1, [pc, #16]	@ (800a0e8 <RCCEx_PLLSAI2_Config+0x150>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	40021000 	.word	0x40021000
 800a0ec:	07ff800c 	.word	0x07ff800c

0800a0f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d066      	beq.n	800a1d0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f9 fbee 	bl	80038f8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f003 0310 	and.w	r3, r3, #16
 800a12e:	2b10      	cmp	r3, #16
 800a130:	d045      	beq.n	800a1be <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a132:	4b2a      	ldr	r3, [pc, #168]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a134:	22ca      	movs	r2, #202	@ 0xca
 800a136:	625a      	str	r2, [r3, #36]	@ 0x24
 800a138:	4b28      	ldr	r3, [pc, #160]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a13a:	2253      	movs	r2, #83	@ 0x53
 800a13c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f98e 	bl	800a460 <RTC_EnterInitMode>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d121      	bne.n	800a192 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a14e:	4b23      	ldr	r3, [pc, #140]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	4a22      	ldr	r2, [pc, #136]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a154:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a15c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a15e:	4b1f      	ldr	r3, [pc, #124]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6859      	ldr	r1, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	4319      	orrs	r1, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	430b      	orrs	r3, r1
 800a172:	491a      	ldr	r1, [pc, #104]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a174:	4313      	orrs	r3, r2
 800a176:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	041b      	lsls	r3, r3, #16
 800a182:	4916      	ldr	r1, [pc, #88]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a184:	4313      	orrs	r3, r2
 800a186:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f99d 	bl	800a4c8 <RTC_ExitInitMode>
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10e      	bne.n	800a1b6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800a198:	4b10      	ldr	r3, [pc, #64]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a19      	ldr	r1, [r3, #32]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	4319      	orrs	r1, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	490a      	ldr	r1, [pc, #40]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1b6:	4b09      	ldr	r3, [pc, #36]	@ (800a1dc <HAL_RTC_Init+0xec>)
 800a1b8:	22ff      	movs	r2, #255	@ 0xff
 800a1ba:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1bc:	e001      	b.n	800a1c2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	40002800 	.word	0x40002800

0800a1e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a1e0:	b590      	push	{r4, r7, lr}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <HAL_RTC_SetTime+0x1a>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e081      	b.n	800a2fe <HAL_RTC_SetTime+0x11e>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2202      	movs	r2, #2
 800a206:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a20a:	4b3f      	ldr	r3, [pc, #252]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a20c:	22ca      	movs	r2, #202	@ 0xca
 800a20e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a210:	4b3d      	ldr	r3, [pc, #244]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a212:	2253      	movs	r2, #83	@ 0x53
 800a214:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 f922 	bl	800a460 <RTC_EnterInitMode>
 800a21c:	4603      	mov	r3, r0
 800a21e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a220:	7cfb      	ldrb	r3, [r7, #19]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d15c      	bne.n	800a2e0 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d125      	bne.n	800a278 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a22c:	4b36      	ldr	r3, [pc, #216]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2200      	movs	r2, #0
 800a23c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f97e 	bl	800a544 <RTC_ByteToBcd2>
 800a248:	4603      	mov	r3, r0
 800a24a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f977 	bl	800a544 <RTC_ByteToBcd2>
 800a256:	4603      	mov	r3, r0
 800a258:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a25a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f96f 	bl	800a544 <RTC_ByteToBcd2>
 800a266:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a268:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	78db      	ldrb	r3, [r3, #3]
 800a270:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	e017      	b.n	800a2a8 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a278:	4b23      	ldr	r3, [pc, #140]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d102      	bne.n	800a28a <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2200      	movs	r2, #0
 800a288:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a296:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a29c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a2a8:	4a17      	ldr	r2, [pc, #92]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a2b0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a2b4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a2b6:	4b14      	ldr	r3, [pc, #80]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	4a13      	ldr	r2, [pc, #76]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a2bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2c0:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a2c2:	4b11      	ldr	r3, [pc, #68]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	68d9      	ldr	r1, [r3, #12]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	490d      	ldr	r1, [pc, #52]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 f8f6 	bl	800a4c8 <RTC_ExitInitMode>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2e0:	4b09      	ldr	r3, [pc, #36]	@ (800a308 <HAL_RTC_SetTime+0x128>)
 800a2e2:	22ff      	movs	r2, #255	@ 0xff
 800a2e4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a2e6:	7cfb      	ldrb	r3, [r7, #19]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800a2fc:	7cfb      	ldrb	r3, [r7, #19]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	bd90      	pop	{r4, r7, pc}
 800a306:	bf00      	nop
 800a308:	40002800 	.word	0x40002800

0800a30c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <HAL_RTC_SetDate+0x1a>
 800a322:	2302      	movs	r3, #2
 800a324:	e071      	b.n	800a40a <HAL_RTC_SetDate+0xfe>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2202      	movs	r2, #2
 800a332:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10e      	bne.n	800a35a <HAL_RTC_SetDate+0x4e>
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	785b      	ldrb	r3, [r3, #1]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	785b      	ldrb	r3, [r3, #1]
 800a34c:	f023 0310 	bic.w	r3, r3, #16
 800a350:	b2db      	uxtb	r3, r3
 800a352:	330a      	adds	r3, #10
 800a354:	b2da      	uxtb	r2, r3
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d11c      	bne.n	800a39a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	78db      	ldrb	r3, [r3, #3]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 f8ed 	bl	800a544 <RTC_ByteToBcd2>
 800a36a:	4603      	mov	r3, r0
 800a36c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f8e6 	bl	800a544 <RTC_ByteToBcd2>
 800a378:	4603      	mov	r3, r0
 800a37a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a37c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	789b      	ldrb	r3, [r3, #2]
 800a382:	4618      	mov	r0, r3
 800a384:	f000 f8de 	bl	800a544 <RTC_ByteToBcd2>
 800a388:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a38a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	e00e      	b.n	800a3b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	78db      	ldrb	r3, [r3, #3]
 800a39e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a3ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3b8:	4b16      	ldr	r3, [pc, #88]	@ (800a414 <HAL_RTC_SetDate+0x108>)
 800a3ba:	22ca      	movs	r2, #202	@ 0xca
 800a3bc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3be:	4b15      	ldr	r3, [pc, #84]	@ (800a414 <HAL_RTC_SetDate+0x108>)
 800a3c0:	2253      	movs	r2, #83	@ 0x53
 800a3c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f84b 	bl	800a460 <RTC_EnterInitMode>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a3ce:	7cfb      	ldrb	r3, [r7, #19]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10b      	bne.n	800a3ec <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a3d4:	4a0f      	ldr	r2, [pc, #60]	@ (800a414 <HAL_RTC_SetDate+0x108>)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a3dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a3e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f870 	bl	800a4c8 <RTC_ExitInitMode>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3ec:	4b09      	ldr	r3, [pc, #36]	@ (800a414 <HAL_RTC_SetDate+0x108>)
 800a3ee:	22ff      	movs	r2, #255	@ 0xff
 800a3f0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a3f2:	7cfb      	ldrb	r3, [r7, #19]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d103      	bne.n	800a400 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800a408:	7cfb      	ldrb	r3, [r7, #19]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd90      	pop	{r4, r7, pc}
 800a412:	bf00      	nop
 800a414:	40002800 	.word	0x40002800

0800a418 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800a420:	4b0d      	ldr	r3, [pc, #52]	@ (800a458 <HAL_RTC_WaitForSynchro+0x40>)
 800a422:	4a0e      	ldr	r2, [pc, #56]	@ (800a45c <HAL_RTC_WaitForSynchro+0x44>)
 800a424:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a426:	f7fa f871 	bl	800450c <HAL_GetTick>
 800a42a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a42c:	e009      	b.n	800a442 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a42e:	f7fa f86d 	bl	800450c <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a43c:	d901      	bls.n	800a442 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e006      	b.n	800a450 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a442:	4b05      	ldr	r3, [pc, #20]	@ (800a458 <HAL_RTC_WaitForSynchro+0x40>)
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0ef      	beq.n	800a42e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40002800 	.word	0x40002800
 800a45c:	0001005c 	.word	0x0001005c

0800a460 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a46c:	4b15      	ldr	r3, [pc, #84]	@ (800a4c4 <RTC_EnterInitMode+0x64>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d120      	bne.n	800a4ba <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a478:	4b12      	ldr	r3, [pc, #72]	@ (800a4c4 <RTC_EnterInitMode+0x64>)
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	4a11      	ldr	r2, [pc, #68]	@ (800a4c4 <RTC_EnterInitMode+0x64>)
 800a47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a482:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a484:	f7fa f842 	bl	800450c <HAL_GetTick>
 800a488:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a48a:	e00d      	b.n	800a4a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a48c:	f7fa f83e 	bl	800450c <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a49a:	d905      	bls.n	800a4a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4a8:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <RTC_EnterInitMode+0x64>)
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <RTC_EnterInitMode+0x5a>
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d1e8      	bne.n	800a48c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	40002800 	.word	0x40002800

0800a4c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	4a19      	ldr	r2, [pc, #100]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a4da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4de:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a4e0:	4b17      	ldr	r3, [pc, #92]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10c      	bne.n	800a506 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ff93 	bl	800a418 <HAL_RTC_WaitForSynchro>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01e      	beq.n	800a536 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	73fb      	strb	r3, [r7, #15]
 800a504:	e017      	b.n	800a536 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a506:	4b0e      	ldr	r3, [pc, #56]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	4a0d      	ldr	r2, [pc, #52]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a50c:	f023 0320 	bic.w	r3, r3, #32
 800a510:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff ff80 	bl	800a418 <HAL_RTC_WaitForSynchro>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2203      	movs	r2, #3
 800a522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a52a:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	4a04      	ldr	r2, [pc, #16]	@ (800a540 <RTC_ExitInitMode+0x78>)
 800a530:	f043 0320 	orr.w	r3, r3, #32
 800a534:	6193      	str	r3, [r2, #24]
  }

  return status;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	40002800 	.word	0x40002800

0800a544 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a556:	e005      	b.n	800a564 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a55e:	7afb      	ldrb	r3, [r7, #11]
 800a560:	3b0a      	subs	r3, #10
 800a562:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	2b09      	cmp	r3, #9
 800a568:	d8f6      	bhi.n	800a558 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	b2da      	uxtb	r2, r3
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	4313      	orrs	r3, r2
 800a576:	b2db      	uxtb	r3, r3
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	490f      	ldr	r1, [pc, #60]	@ (800a5d4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	490c      	ldr	r1, [pc, #48]	@ (800a5d8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	6919      	ldr	r1, [r3, #16]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	4906      	ldr	r1, [pc, #24]	@ (800a5d8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	40002800 	.word	0x40002800
 800a5d8:	40003400 	.word	0x40003400

0800a5dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e095      	b.n	800a71a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d108      	bne.n	800a608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5fe:	d009      	beq.n	800a614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	61da      	str	r2, [r3, #28]
 800a606:	e005      	b.n	800a614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7f9 f9de 	bl	80039f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a64a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a654:	d902      	bls.n	800a65c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a656:	2300      	movs	r3, #0
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	e002      	b.n	800a662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a65c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a66a:	d007      	beq.n	800a67c <HAL_SPI_Init+0xa0>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a674:	d002      	beq.n	800a67c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	431a      	orrs	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6be:	ea42 0103 	orr.w	r1, r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	0c1b      	lsrs	r3, r3, #16
 800a6d8:	f003 0204 	and.w	r2, r3, #4
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a6f8:	ea42 0103 	orr.w	r1, r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b08a      	sub	sp, #40	@ 0x28
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a730:	2301      	movs	r3, #1
 800a732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a740:	2b01      	cmp	r3, #1
 800a742:	d101      	bne.n	800a748 <HAL_SPI_TransmitReceive+0x26>
 800a744:	2302      	movs	r3, #2
 800a746:	e20a      	b.n	800ab5e <HAL_SPI_TransmitReceive+0x43c>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a750:	f7f9 fedc 	bl	800450c <HAL_GetTick>
 800a754:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a75c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a764:	887b      	ldrh	r3, [r7, #2]
 800a766:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a768:	887b      	ldrh	r3, [r7, #2]
 800a76a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a76c:	7efb      	ldrb	r3, [r7, #27]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d00e      	beq.n	800a790 <HAL_SPI_TransmitReceive+0x6e>
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a778:	d106      	bne.n	800a788 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <HAL_SPI_TransmitReceive+0x66>
 800a782:	7efb      	ldrb	r3, [r7, #27]
 800a784:	2b04      	cmp	r3, #4
 800a786:	d003      	beq.n	800a790 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a788:	2302      	movs	r3, #2
 800a78a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a78e:	e1e0      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d005      	beq.n	800a7a2 <HAL_SPI_TransmitReceive+0x80>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <HAL_SPI_TransmitReceive+0x80>
 800a79c:	887b      	ldrh	r3, [r7, #2]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a7a8:	e1d3      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d003      	beq.n	800a7be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	887a      	ldrh	r2, [r7, #2]
 800a7ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	887a      	ldrh	r2, [r7, #2]
 800a7d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	887a      	ldrh	r2, [r7, #2]
 800a7e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	887a      	ldrh	r2, [r7, #2]
 800a7ea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a800:	d802      	bhi.n	800a808 <HAL_SPI_TransmitReceive+0xe6>
 800a802:	8a3b      	ldrh	r3, [r7, #16]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d908      	bls.n	800a81a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	e007      	b.n	800a82a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a828:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a834:	2b40      	cmp	r3, #64	@ 0x40
 800a836:	d007      	beq.n	800a848 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a850:	f240 8081 	bls.w	800a956 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <HAL_SPI_TransmitReceive+0x140>
 800a85c:	8a7b      	ldrh	r3, [r7, #18]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d16d      	bne.n	800a93e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a866:	881a      	ldrh	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a872:	1c9a      	adds	r2, r3, #2
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a886:	e05a      	b.n	800a93e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 0302 	and.w	r3, r3, #2
 800a892:	2b02      	cmp	r3, #2
 800a894:	d11b      	bne.n	800a8ce <HAL_SPI_TransmitReceive+0x1ac>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d016      	beq.n	800a8ce <HAL_SPI_TransmitReceive+0x1ac>
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d113      	bne.n	800a8ce <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8aa:	881a      	ldrh	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b6:	1c9a      	adds	r2, r3, #2
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d11c      	bne.n	800a916 <HAL_SPI_TransmitReceive+0x1f4>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d016      	beq.n	800a916 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f2:	b292      	uxth	r2, r2
 800a8f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fa:	1c9a      	adds	r2, r3, #2
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a912:	2301      	movs	r3, #1
 800a914:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a916:	f7f9 fdf9 	bl	800450c <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a922:	429a      	cmp	r2, r3
 800a924:	d80b      	bhi.n	800a93e <HAL_SPI_TransmitReceive+0x21c>
 800a926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a92c:	d007      	beq.n	800a93e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a93c:	e109      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d19f      	bne.n	800a888 <HAL_SPI_TransmitReceive+0x166>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a94e:	b29b      	uxth	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d199      	bne.n	800a888 <HAL_SPI_TransmitReceive+0x166>
 800a954:	e0e3      	b.n	800ab1e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_SPI_TransmitReceive+0x244>
 800a95e:	8a7b      	ldrh	r3, [r7, #18]
 800a960:	2b01      	cmp	r3, #1
 800a962:	f040 80cf 	bne.w	800ab04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d912      	bls.n	800a996 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a974:	881a      	ldrh	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a980:	1c9a      	adds	r2, r3, #2
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	3b02      	subs	r3, #2
 800a98e:	b29a      	uxth	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a994:	e0b6      	b.n	800ab04 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	330c      	adds	r3, #12
 800a9a0:	7812      	ldrb	r2, [r2, #0]
 800a9a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9bc:	e0a2      	b.n	800ab04 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f003 0302 	and.w	r3, r3, #2
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d134      	bne.n	800aa36 <HAL_SPI_TransmitReceive+0x314>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d02f      	beq.n	800aa36 <HAL_SPI_TransmitReceive+0x314>
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d12c      	bne.n	800aa36 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d912      	bls.n	800aa0c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ea:	881a      	ldrh	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f6:	1c9a      	adds	r2, r3, #2
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3b02      	subs	r3, #2
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aa0a:	e012      	b.n	800aa32 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	7812      	ldrb	r2, [r2, #0]
 800aa18:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d148      	bne.n	800aad6 <HAL_SPI_TransmitReceive+0x3b4>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d042      	beq.n	800aad6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d923      	bls.n	800aaa4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa66:	b292      	uxth	r2, r2
 800aa68:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6e:	1c9a      	adds	r2, r3, #2
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3b02      	subs	r3, #2
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d81f      	bhi.n	800aad2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aaa0:	605a      	str	r2, [r3, #4]
 800aaa2:	e016      	b.n	800aad2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f103 020c 	add.w	r2, r3, #12
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab0:	7812      	ldrb	r2, [r2, #0]
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aad2:	2301      	movs	r3, #1
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aad6:	f7f9 fd19 	bl	800450c <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d803      	bhi.n	800aaee <HAL_SPI_TransmitReceive+0x3cc>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaec:	d102      	bne.n	800aaf4 <HAL_SPI_TransmitReceive+0x3d2>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d107      	bne.n	800ab04 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ab02:	e026      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f47f af57 	bne.w	800a9be <HAL_SPI_TransmitReceive+0x29c>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f47f af50 	bne.w	800a9be <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 f93e 	bl	800ada4 <SPI_EndRxTxTransaction>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ab48:	e003      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800ab5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3728      	adds	r7, #40	@ 0x28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ab78:	f7f9 fcc8 	bl	800450c <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	4413      	add	r3, r2
 800ab86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab88:	f7f9 fcc0 	bl	800450c <HAL_GetTick>
 800ab8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab8e:	4b39      	ldr	r3, [pc, #228]	@ (800ac74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	015b      	lsls	r3, r3, #5
 800ab94:	0d1b      	lsrs	r3, r3, #20
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	fb02 f303 	mul.w	r3, r2, r3
 800ab9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab9e:	e054      	b.n	800ac4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aba6:	d050      	beq.n	800ac4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aba8:	f7f9 fcb0 	bl	800450c <HAL_GetTick>
 800abac:	4602      	mov	r2, r0
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	69fa      	ldr	r2, [r7, #28]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d902      	bls.n	800abbe <SPI_WaitFlagStateUntilTimeout+0x56>
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d13d      	bne.n	800ac3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800abcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abd6:	d111      	bne.n	800abfc <SPI_WaitFlagStateUntilTimeout+0x94>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abe0:	d004      	beq.n	800abec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abea:	d107      	bne.n	800abfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac04:	d10f      	bne.n	800ac26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ac24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e017      	b.n	800ac6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	4013      	ands	r3, r2
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	bf0c      	ite	eq
 800ac5a:	2301      	moveq	r3, #1
 800ac5c:	2300      	movne	r3, #0
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	461a      	mov	r2, r3
 800ac62:	79fb      	ldrb	r3, [r7, #7]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d19b      	bne.n	800aba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	2000001c 	.word	0x2000001c

0800ac78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	@ 0x28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ac8a:	f7f9 fc3f 	bl	800450c <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	4413      	add	r3, r2
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ac9a:	f7f9 fc37 	bl	800450c <HAL_GetTick>
 800ac9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	330c      	adds	r3, #12
 800aca6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aca8:	4b3d      	ldr	r3, [pc, #244]	@ (800ada0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	00da      	lsls	r2, r3, #3
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	0d1b      	lsrs	r3, r3, #20
 800acb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acba:	fb02 f303 	mul.w	r3, r2, r3
 800acbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800acc0:	e060      	b.n	800ad84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800acc8:	d107      	bne.n	800acda <SPI_WaitFifoStateUntilTimeout+0x62>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d104      	bne.n	800acda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ace0:	d050      	beq.n	800ad84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ace2:	f7f9 fc13 	bl	800450c <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acee:	429a      	cmp	r2, r3
 800acf0:	d902      	bls.n	800acf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d13d      	bne.n	800ad74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ad06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad10:	d111      	bne.n	800ad36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad1a:	d004      	beq.n	800ad26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad24:	d107      	bne.n	800ad36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad3e:	d10f      	bne.n	800ad60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ad5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e010      	b.n	800ad96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d196      	bne.n	800acc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3728      	adds	r7, #40	@ 0x28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	2000001c 	.word	0x2000001c

0800ada4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff ff5b 	bl	800ac78 <SPI_WaitFifoStateUntilTimeout>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d007      	beq.n	800add8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adcc:	f043 0220 	orr.w	r2, r3, #32
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e027      	b.n	800ae28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2200      	movs	r2, #0
 800ade0:	2180      	movs	r1, #128	@ 0x80
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff fec0 	bl	800ab68 <SPI_WaitFlagStateUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d007      	beq.n	800adfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adf2:	f043 0220 	orr.w	r2, r3, #32
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e014      	b.n	800ae28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7ff ff34 	bl	800ac78 <SPI_WaitFifoStateUntilTimeout>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d007      	beq.n	800ae26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae1a:	f043 0220 	orr.w	r2, r3, #32
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e000      	b.n	800ae28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e049      	b.n	800aed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7f9 fa50 	bl	80042fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681a      	ldr	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f000 fbbc 	bl	800b5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d001      	beq.n	800aef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e04f      	b.n	800af98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68da      	ldr	r2, [r3, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f042 0201 	orr.w	r2, r2, #1
 800af0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a23      	ldr	r2, [pc, #140]	@ (800afa4 <HAL_TIM_Base_Start_IT+0xc4>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d01d      	beq.n	800af56 <HAL_TIM_Base_Start_IT+0x76>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af22:	d018      	beq.n	800af56 <HAL_TIM_Base_Start_IT+0x76>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1f      	ldr	r2, [pc, #124]	@ (800afa8 <HAL_TIM_Base_Start_IT+0xc8>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d013      	beq.n	800af56 <HAL_TIM_Base_Start_IT+0x76>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1e      	ldr	r2, [pc, #120]	@ (800afac <HAL_TIM_Base_Start_IT+0xcc>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00e      	beq.n	800af56 <HAL_TIM_Base_Start_IT+0x76>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a1c      	ldr	r2, [pc, #112]	@ (800afb0 <HAL_TIM_Base_Start_IT+0xd0>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d009      	beq.n	800af56 <HAL_TIM_Base_Start_IT+0x76>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1b      	ldr	r2, [pc, #108]	@ (800afb4 <HAL_TIM_Base_Start_IT+0xd4>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d004      	beq.n	800af56 <HAL_TIM_Base_Start_IT+0x76>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a19      	ldr	r2, [pc, #100]	@ (800afb8 <HAL_TIM_Base_Start_IT+0xd8>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d115      	bne.n	800af82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	4b17      	ldr	r3, [pc, #92]	@ (800afbc <HAL_TIM_Base_Start_IT+0xdc>)
 800af5e:	4013      	ands	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b06      	cmp	r3, #6
 800af66:	d015      	beq.n	800af94 <HAL_TIM_Base_Start_IT+0xb4>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af6e:	d011      	beq.n	800af94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f042 0201 	orr.w	r2, r2, #1
 800af7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af80:	e008      	b.n	800af94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f042 0201 	orr.w	r2, r2, #1
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	e000      	b.n	800af96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	40012c00 	.word	0x40012c00
 800afa8:	40000400 	.word	0x40000400
 800afac:	40000800 	.word	0x40000800
 800afb0:	40000c00 	.word	0x40000c00
 800afb4:	40013400 	.word	0x40013400
 800afb8:	40014000 	.word	0x40014000
 800afbc:	00010007 	.word	0x00010007

0800afc0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e049      	b.n	800b066 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f841 	bl	800b06e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3304      	adds	r3, #4
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f000 faf4 	bl	800b5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b076:	bf00      	nop
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d020      	beq.n	800b0e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01b      	beq.n	800b0e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f06f 0202 	mvn.w	r2, #2
 800b0b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	f003 0303 	and.w	r3, r3, #3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fa6e 	bl	800b5ae <HAL_TIM_IC_CaptureCallback>
 800b0d2:	e005      	b.n	800b0e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa60 	bl	800b59a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fa71 	bl	800b5c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d020      	beq.n	800b132 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01b      	beq.n	800b132 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f06f 0204 	mvn.w	r2, #4
 800b102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fa48 	bl	800b5ae <HAL_TIM_IC_CaptureCallback>
 800b11e:	e005      	b.n	800b12c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fa3a 	bl	800b59a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa4b 	bl	800b5c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d020      	beq.n	800b17e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f003 0308 	and.w	r3, r3, #8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d01b      	beq.n	800b17e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f06f 0208 	mvn.w	r2, #8
 800b14e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2204      	movs	r2, #4
 800b154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fa22 	bl	800b5ae <HAL_TIM_IC_CaptureCallback>
 800b16a:	e005      	b.n	800b178 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fa14 	bl	800b59a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fa25 	bl	800b5c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f003 0310 	and.w	r3, r3, #16
 800b184:	2b00      	cmp	r3, #0
 800b186:	d020      	beq.n	800b1ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 0310 	and.w	r3, r3, #16
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01b      	beq.n	800b1ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f06f 0210 	mvn.w	r2, #16
 800b19a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2208      	movs	r2, #8
 800b1a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f9fc 	bl	800b5ae <HAL_TIM_IC_CaptureCallback>
 800b1b6:	e005      	b.n	800b1c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f9ee 	bl	800b59a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9ff 	bl	800b5c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00c      	beq.n	800b1ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d007      	beq.n	800b1ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f06f 0201 	mvn.w	r2, #1
 800b1e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7f8 faad 	bl	8003748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d104      	bne.n	800b202 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00c      	beq.n	800b21c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d007      	beq.n	800b21c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 ff28 	bl	800c06c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00c      	beq.n	800b240 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d007      	beq.n	800b240 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 ff20 	bl	800c080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00c      	beq.n	800b264 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b250:	2b00      	cmp	r3, #0
 800b252:	d007      	beq.n	800b264 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f9b9 	bl	800b5d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b00      	cmp	r3, #0
 800b276:	d007      	beq.n	800b288 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f06f 0220 	mvn.w	r2, #32
 800b280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fee8 	bl	800c058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b288:	bf00      	nop
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d101      	bne.n	800b2ae <HAL_TIM_OC_ConfigChannel+0x1e>
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e066      	b.n	800b37c <HAL_TIM_OC_ConfigChannel+0xec>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b14      	cmp	r3, #20
 800b2ba:	d857      	bhi.n	800b36c <HAL_TIM_OC_ConfigChannel+0xdc>
 800b2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c2:	bf00      	nop
 800b2c4:	0800b319 	.word	0x0800b319
 800b2c8:	0800b36d 	.word	0x0800b36d
 800b2cc:	0800b36d 	.word	0x0800b36d
 800b2d0:	0800b36d 	.word	0x0800b36d
 800b2d4:	0800b327 	.word	0x0800b327
 800b2d8:	0800b36d 	.word	0x0800b36d
 800b2dc:	0800b36d 	.word	0x0800b36d
 800b2e0:	0800b36d 	.word	0x0800b36d
 800b2e4:	0800b335 	.word	0x0800b335
 800b2e8:	0800b36d 	.word	0x0800b36d
 800b2ec:	0800b36d 	.word	0x0800b36d
 800b2f0:	0800b36d 	.word	0x0800b36d
 800b2f4:	0800b343 	.word	0x0800b343
 800b2f8:	0800b36d 	.word	0x0800b36d
 800b2fc:	0800b36d 	.word	0x0800b36d
 800b300:	0800b36d 	.word	0x0800b36d
 800b304:	0800b351 	.word	0x0800b351
 800b308:	0800b36d 	.word	0x0800b36d
 800b30c:	0800b36d 	.word	0x0800b36d
 800b310:	0800b36d 	.word	0x0800b36d
 800b314:	0800b35f 	.word	0x0800b35f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68b9      	ldr	r1, [r7, #8]
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fa0a 	bl	800b738 <TIM_OC1_SetConfig>
      break;
 800b324:	e025      	b.n	800b372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fa93 	bl	800b858 <TIM_OC2_SetConfig>
      break;
 800b332:	e01e      	b.n	800b372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68b9      	ldr	r1, [r7, #8]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 fb16 	bl	800b96c <TIM_OC3_SetConfig>
      break;
 800b340:	e017      	b.n	800b372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fb97 	bl	800ba7c <TIM_OC4_SetConfig>
      break;
 800b34e:	e010      	b.n	800b372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fbfa 	bl	800bb50 <TIM_OC5_SetConfig>
      break;
 800b35c:	e009      	b.n	800b372 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68b9      	ldr	r1, [r7, #8]
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fc57 	bl	800bc18 <TIM_OC6_SetConfig>
      break;
 800b36a:	e002      	b.n	800b372 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	75fb      	strb	r3, [r7, #23]
      break;
 800b370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e0b6      	b.n	800b50e <HAL_TIM_ConfigClockSource+0x18a>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b3be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b3c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3dc:	d03e      	beq.n	800b45c <HAL_TIM_ConfigClockSource+0xd8>
 800b3de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3e2:	f200 8087 	bhi.w	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b3e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ea:	f000 8086 	beq.w	800b4fa <HAL_TIM_ConfigClockSource+0x176>
 800b3ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3f2:	d87f      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b3f4:	2b70      	cmp	r3, #112	@ 0x70
 800b3f6:	d01a      	beq.n	800b42e <HAL_TIM_ConfigClockSource+0xaa>
 800b3f8:	2b70      	cmp	r3, #112	@ 0x70
 800b3fa:	d87b      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b3fc:	2b60      	cmp	r3, #96	@ 0x60
 800b3fe:	d050      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0x11e>
 800b400:	2b60      	cmp	r3, #96	@ 0x60
 800b402:	d877      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b404:	2b50      	cmp	r3, #80	@ 0x50
 800b406:	d03c      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0xfe>
 800b408:	2b50      	cmp	r3, #80	@ 0x50
 800b40a:	d873      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b40c:	2b40      	cmp	r3, #64	@ 0x40
 800b40e:	d058      	beq.n	800b4c2 <HAL_TIM_ConfigClockSource+0x13e>
 800b410:	2b40      	cmp	r3, #64	@ 0x40
 800b412:	d86f      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b414:	2b30      	cmp	r3, #48	@ 0x30
 800b416:	d064      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15e>
 800b418:	2b30      	cmp	r3, #48	@ 0x30
 800b41a:	d86b      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b41c:	2b20      	cmp	r3, #32
 800b41e:	d060      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15e>
 800b420:	2b20      	cmp	r3, #32
 800b422:	d867      	bhi.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
 800b424:	2b00      	cmp	r3, #0
 800b426:	d05c      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15e>
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d05a      	beq.n	800b4e2 <HAL_TIM_ConfigClockSource+0x15e>
 800b42c:	e062      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b43e:	f000 fd62 	bl	800bf06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	609a      	str	r2, [r3, #8]
      break;
 800b45a:	e04f      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b46c:	f000 fd4b 	bl	800bf06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b47e:	609a      	str	r2, [r3, #8]
      break;
 800b480:	e03c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b48e:	461a      	mov	r2, r3
 800b490:	f000 fcbd 	bl	800be0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2150      	movs	r1, #80	@ 0x50
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fd16 	bl	800becc <TIM_ITRx_SetConfig>
      break;
 800b4a0:	e02c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f000 fcdc 	bl	800be6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2160      	movs	r1, #96	@ 0x60
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 fd06 	bl	800becc <TIM_ITRx_SetConfig>
      break;
 800b4c0:	e01c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f000 fc9d 	bl	800be0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2140      	movs	r1, #64	@ 0x40
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 fcf6 	bl	800becc <TIM_ITRx_SetConfig>
      break;
 800b4e0:	e00c      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	f000 fced 	bl	800becc <TIM_ITRx_SetConfig>
      break;
 800b4f2:	e003      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f8:	e000      	b.n	800b4fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b4fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b526:	2b01      	cmp	r3, #1
 800b528:	d101      	bne.n	800b52e <HAL_TIM_SlaveConfigSynchro+0x18>
 800b52a:	2302      	movs	r3, #2
 800b52c:	e031      	b.n	800b592 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2202      	movs	r2, #2
 800b53a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fbcf 	bl	800bce4 <TIM_SlaveTimer_SetConfig>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d009      	beq.n	800b560 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e018      	b.n	800b592 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b56e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b57e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5a2:	bf00      	nop
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5ca:	bf00      	nop
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b083      	sub	sp, #12
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5de:	bf00      	nop
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a46      	ldr	r2, [pc, #280]	@ (800b718 <TIM_Base_SetConfig+0x12c>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d013      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b60a:	d00f      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a43      	ldr	r2, [pc, #268]	@ (800b71c <TIM_Base_SetConfig+0x130>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00b      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a42      	ldr	r2, [pc, #264]	@ (800b720 <TIM_Base_SetConfig+0x134>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d007      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a41      	ldr	r2, [pc, #260]	@ (800b724 <TIM_Base_SetConfig+0x138>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d003      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a40      	ldr	r2, [pc, #256]	@ (800b728 <TIM_Base_SetConfig+0x13c>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d108      	bne.n	800b63e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a35      	ldr	r2, [pc, #212]	@ (800b718 <TIM_Base_SetConfig+0x12c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d01f      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b64c:	d01b      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a32      	ldr	r2, [pc, #200]	@ (800b71c <TIM_Base_SetConfig+0x130>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d017      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a31      	ldr	r2, [pc, #196]	@ (800b720 <TIM_Base_SetConfig+0x134>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d013      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a30      	ldr	r2, [pc, #192]	@ (800b724 <TIM_Base_SetConfig+0x138>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d00f      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a2f      	ldr	r2, [pc, #188]	@ (800b728 <TIM_Base_SetConfig+0x13c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d00b      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a2e      	ldr	r2, [pc, #184]	@ (800b72c <TIM_Base_SetConfig+0x140>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d007      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a2d      	ldr	r2, [pc, #180]	@ (800b730 <TIM_Base_SetConfig+0x144>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a2c      	ldr	r2, [pc, #176]	@ (800b734 <TIM_Base_SetConfig+0x148>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d108      	bne.n	800b698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b68c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a16      	ldr	r2, [pc, #88]	@ (800b718 <TIM_Base_SetConfig+0x12c>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00f      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a18      	ldr	r2, [pc, #96]	@ (800b728 <TIM_Base_SetConfig+0x13c>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00b      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a17      	ldr	r2, [pc, #92]	@ (800b72c <TIM_Base_SetConfig+0x140>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d007      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a16      	ldr	r2, [pc, #88]	@ (800b730 <TIM_Base_SetConfig+0x144>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d003      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a15      	ldr	r2, [pc, #84]	@ (800b734 <TIM_Base_SetConfig+0x148>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d103      	bne.n	800b6ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	691a      	ldr	r2, [r3, #16]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d105      	bne.n	800b70a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	f023 0201 	bic.w	r2, r3, #1
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	611a      	str	r2, [r3, #16]
  }
}
 800b70a:	bf00      	nop
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	40012c00 	.word	0x40012c00
 800b71c:	40000400 	.word	0x40000400
 800b720:	40000800 	.word	0x40000800
 800b724:	40000c00 	.word	0x40000c00
 800b728:	40013400 	.word	0x40013400
 800b72c:	40014000 	.word	0x40014000
 800b730:	40014400 	.word	0x40014400
 800b734:	40014800 	.word	0x40014800

0800b738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	f023 0201 	bic.w	r2, r3, #1
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f023 0303 	bic.w	r3, r3, #3
 800b772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	f023 0302 	bic.w	r3, r3, #2
 800b784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a2c      	ldr	r2, [pc, #176]	@ (800b844 <TIM_OC1_SetConfig+0x10c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00f      	beq.n	800b7b8 <TIM_OC1_SetConfig+0x80>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a2b      	ldr	r2, [pc, #172]	@ (800b848 <TIM_OC1_SetConfig+0x110>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d00b      	beq.n	800b7b8 <TIM_OC1_SetConfig+0x80>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800b84c <TIM_OC1_SetConfig+0x114>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d007      	beq.n	800b7b8 <TIM_OC1_SetConfig+0x80>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a29      	ldr	r2, [pc, #164]	@ (800b850 <TIM_OC1_SetConfig+0x118>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d003      	beq.n	800b7b8 <TIM_OC1_SetConfig+0x80>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a28      	ldr	r2, [pc, #160]	@ (800b854 <TIM_OC1_SetConfig+0x11c>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d10c      	bne.n	800b7d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f023 0308 	bic.w	r3, r3, #8
 800b7be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f023 0304 	bic.w	r3, r3, #4
 800b7d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1b      	ldr	r2, [pc, #108]	@ (800b844 <TIM_OC1_SetConfig+0x10c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00f      	beq.n	800b7fa <TIM_OC1_SetConfig+0xc2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a1a      	ldr	r2, [pc, #104]	@ (800b848 <TIM_OC1_SetConfig+0x110>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00b      	beq.n	800b7fa <TIM_OC1_SetConfig+0xc2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a19      	ldr	r2, [pc, #100]	@ (800b84c <TIM_OC1_SetConfig+0x114>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d007      	beq.n	800b7fa <TIM_OC1_SetConfig+0xc2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a18      	ldr	r2, [pc, #96]	@ (800b850 <TIM_OC1_SetConfig+0x118>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d003      	beq.n	800b7fa <TIM_OC1_SetConfig+0xc2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a17      	ldr	r2, [pc, #92]	@ (800b854 <TIM_OC1_SetConfig+0x11c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d111      	bne.n	800b81e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	621a      	str	r2, [r3, #32]
}
 800b838:	bf00      	nop
 800b83a:	371c      	adds	r7, #28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	40012c00 	.word	0x40012c00
 800b848:	40013400 	.word	0x40013400
 800b84c:	40014000 	.word	0x40014000
 800b850:	40014400 	.word	0x40014400
 800b854:	40014800 	.word	0x40014800

0800b858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	f023 0210 	bic.w	r2, r3, #16
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b88a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	021b      	lsls	r3, r3, #8
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f023 0320 	bic.w	r3, r3, #32
 800b8a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a28      	ldr	r2, [pc, #160]	@ (800b958 <TIM_OC2_SetConfig+0x100>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d003      	beq.n	800b8c4 <TIM_OC2_SetConfig+0x6c>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a27      	ldr	r2, [pc, #156]	@ (800b95c <TIM_OC2_SetConfig+0x104>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d10d      	bne.n	800b8e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a1d      	ldr	r2, [pc, #116]	@ (800b958 <TIM_OC2_SetConfig+0x100>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00f      	beq.n	800b908 <TIM_OC2_SetConfig+0xb0>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b95c <TIM_OC2_SetConfig+0x104>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00b      	beq.n	800b908 <TIM_OC2_SetConfig+0xb0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b960 <TIM_OC2_SetConfig+0x108>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d007      	beq.n	800b908 <TIM_OC2_SetConfig+0xb0>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b964 <TIM_OC2_SetConfig+0x10c>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d003      	beq.n	800b908 <TIM_OC2_SetConfig+0xb0>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a19      	ldr	r2, [pc, #100]	@ (800b968 <TIM_OC2_SetConfig+0x110>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d113      	bne.n	800b930 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b90e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	4313      	orrs	r3, r2
 800b922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	621a      	str	r2, [r3, #32]
}
 800b94a:	bf00      	nop
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	40012c00 	.word	0x40012c00
 800b95c:	40013400 	.word	0x40013400
 800b960:	40014000 	.word	0x40014000
 800b964:	40014400 	.word	0x40014400
 800b968:	40014800 	.word	0x40014800

0800b96c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	69db      	ldr	r3, [r3, #28]
 800b992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b99a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f023 0303 	bic.w	r3, r3, #3
 800b9a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a27      	ldr	r2, [pc, #156]	@ (800ba68 <TIM_OC3_SetConfig+0xfc>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d003      	beq.n	800b9d6 <TIM_OC3_SetConfig+0x6a>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a26      	ldr	r2, [pc, #152]	@ (800ba6c <TIM_OC3_SetConfig+0x100>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d10d      	bne.n	800b9f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	021b      	lsls	r3, r3, #8
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba68 <TIM_OC3_SetConfig+0xfc>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d00f      	beq.n	800ba1a <TIM_OC3_SetConfig+0xae>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a1b      	ldr	r2, [pc, #108]	@ (800ba6c <TIM_OC3_SetConfig+0x100>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d00b      	beq.n	800ba1a <TIM_OC3_SetConfig+0xae>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a1a      	ldr	r2, [pc, #104]	@ (800ba70 <TIM_OC3_SetConfig+0x104>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d007      	beq.n	800ba1a <TIM_OC3_SetConfig+0xae>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a19      	ldr	r2, [pc, #100]	@ (800ba74 <TIM_OC3_SetConfig+0x108>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d003      	beq.n	800ba1a <TIM_OC3_SetConfig+0xae>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a18      	ldr	r2, [pc, #96]	@ (800ba78 <TIM_OC3_SetConfig+0x10c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d113      	bne.n	800ba42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	621a      	str	r2, [r3, #32]
}
 800ba5c:	bf00      	nop
 800ba5e:	371c      	adds	r7, #28
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	40012c00 	.word	0x40012c00
 800ba6c:	40013400 	.word	0x40013400
 800ba70:	40014000 	.word	0x40014000
 800ba74:	40014400 	.word	0x40014400
 800ba78:	40014800 	.word	0x40014800

0800ba7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800baaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800baae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	021b      	lsls	r3, r3, #8
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	031b      	lsls	r3, r3, #12
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a18      	ldr	r2, [pc, #96]	@ (800bb3c <TIM_OC4_SetConfig+0xc0>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d00f      	beq.n	800bb00 <TIM_OC4_SetConfig+0x84>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a17      	ldr	r2, [pc, #92]	@ (800bb40 <TIM_OC4_SetConfig+0xc4>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d00b      	beq.n	800bb00 <TIM_OC4_SetConfig+0x84>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a16      	ldr	r2, [pc, #88]	@ (800bb44 <TIM_OC4_SetConfig+0xc8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d007      	beq.n	800bb00 <TIM_OC4_SetConfig+0x84>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a15      	ldr	r2, [pc, #84]	@ (800bb48 <TIM_OC4_SetConfig+0xcc>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d003      	beq.n	800bb00 <TIM_OC4_SetConfig+0x84>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a14      	ldr	r2, [pc, #80]	@ (800bb4c <TIM_OC4_SetConfig+0xd0>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d109      	bne.n	800bb14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	019b      	lsls	r3, r3, #6
 800bb0e:	697a      	ldr	r2, [r7, #20]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	621a      	str	r2, [r3, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	40012c00 	.word	0x40012c00
 800bb40:	40013400 	.word	0x40013400
 800bb44:	40014000 	.word	0x40014000
 800bb48:	40014400 	.word	0x40014400
 800bb4c:	40014800 	.word	0x40014800

0800bb50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b087      	sub	sp, #28
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bb94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	041b      	lsls	r3, r3, #16
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a17      	ldr	r2, [pc, #92]	@ (800bc04 <TIM_OC5_SetConfig+0xb4>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d00f      	beq.n	800bbca <TIM_OC5_SetConfig+0x7a>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a16      	ldr	r2, [pc, #88]	@ (800bc08 <TIM_OC5_SetConfig+0xb8>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00b      	beq.n	800bbca <TIM_OC5_SetConfig+0x7a>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a15      	ldr	r2, [pc, #84]	@ (800bc0c <TIM_OC5_SetConfig+0xbc>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d007      	beq.n	800bbca <TIM_OC5_SetConfig+0x7a>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a14      	ldr	r2, [pc, #80]	@ (800bc10 <TIM_OC5_SetConfig+0xc0>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d003      	beq.n	800bbca <TIM_OC5_SetConfig+0x7a>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a13      	ldr	r2, [pc, #76]	@ (800bc14 <TIM_OC5_SetConfig+0xc4>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d109      	bne.n	800bbde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	695b      	ldr	r3, [r3, #20]
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	621a      	str	r2, [r3, #32]
}
 800bbf8:	bf00      	nop
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	40012c00 	.word	0x40012c00
 800bc08:	40013400 	.word	0x40013400
 800bc0c:	40014000 	.word	0x40014000
 800bc10:	40014400 	.word	0x40014400
 800bc14:	40014800 	.word	0x40014800

0800bc18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	021b      	lsls	r3, r3, #8
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	051b      	lsls	r3, r3, #20
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a18      	ldr	r2, [pc, #96]	@ (800bcd0 <TIM_OC6_SetConfig+0xb8>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d00f      	beq.n	800bc94 <TIM_OC6_SetConfig+0x7c>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a17      	ldr	r2, [pc, #92]	@ (800bcd4 <TIM_OC6_SetConfig+0xbc>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d00b      	beq.n	800bc94 <TIM_OC6_SetConfig+0x7c>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a16      	ldr	r2, [pc, #88]	@ (800bcd8 <TIM_OC6_SetConfig+0xc0>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d007      	beq.n	800bc94 <TIM_OC6_SetConfig+0x7c>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a15      	ldr	r2, [pc, #84]	@ (800bcdc <TIM_OC6_SetConfig+0xc4>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d003      	beq.n	800bc94 <TIM_OC6_SetConfig+0x7c>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a14      	ldr	r2, [pc, #80]	@ (800bce0 <TIM_OC6_SetConfig+0xc8>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d109      	bne.n	800bca8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	029b      	lsls	r3, r3, #10
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	621a      	str	r2, [r3, #32]
}
 800bcc2:	bf00      	nop
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	40012c00 	.word	0x40012c00
 800bcd4:	40013400 	.word	0x40013400
 800bcd8:	40014000 	.word	0x40014000
 800bcdc:	40014400 	.word	0x40014400
 800bce0:	40014800 	.word	0x40014800

0800bce4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bd00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd04:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	693a      	ldr	r2, [r7, #16]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd16:	f023 0307 	bic.w	r3, r3, #7
 800bd1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b70      	cmp	r3, #112	@ 0x70
 800bd34:	d01a      	beq.n	800bd6c <TIM_SlaveTimer_SetConfig+0x88>
 800bd36:	2b70      	cmp	r3, #112	@ 0x70
 800bd38:	d860      	bhi.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
 800bd3a:	2b60      	cmp	r3, #96	@ 0x60
 800bd3c:	d054      	beq.n	800bde8 <TIM_SlaveTimer_SetConfig+0x104>
 800bd3e:	2b60      	cmp	r3, #96	@ 0x60
 800bd40:	d85c      	bhi.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
 800bd42:	2b50      	cmp	r3, #80	@ 0x50
 800bd44:	d046      	beq.n	800bdd4 <TIM_SlaveTimer_SetConfig+0xf0>
 800bd46:	2b50      	cmp	r3, #80	@ 0x50
 800bd48:	d858      	bhi.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
 800bd4a:	2b40      	cmp	r3, #64	@ 0x40
 800bd4c:	d019      	beq.n	800bd82 <TIM_SlaveTimer_SetConfig+0x9e>
 800bd4e:	2b40      	cmp	r3, #64	@ 0x40
 800bd50:	d854      	bhi.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
 800bd52:	2b30      	cmp	r3, #48	@ 0x30
 800bd54:	d055      	beq.n	800be02 <TIM_SlaveTimer_SetConfig+0x11e>
 800bd56:	2b30      	cmp	r3, #48	@ 0x30
 800bd58:	d850      	bhi.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d051      	beq.n	800be02 <TIM_SlaveTimer_SetConfig+0x11e>
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d84c      	bhi.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d04d      	beq.n	800be02 <TIM_SlaveTimer_SetConfig+0x11e>
 800bd66:	2b10      	cmp	r3, #16
 800bd68:	d04b      	beq.n	800be02 <TIM_SlaveTimer_SetConfig+0x11e>
 800bd6a:	e047      	b.n	800bdfc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800bd7c:	f000 f8c3 	bl	800bf06 <TIM_ETR_SetConfig>
      break;
 800bd80:	e040      	b.n	800be04 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b05      	cmp	r3, #5
 800bd88:	d101      	bne.n	800bd8e <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e03b      	b.n	800be06 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6a1a      	ldr	r2, [r3, #32]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0201 	bic.w	r2, r2, #1
 800bda4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bdb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	621a      	str	r2, [r3, #32]
      break;
 800bdd2:	e017      	b.n	800be04 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bde0:	461a      	mov	r2, r3
 800bde2:	f000 f814 	bl	800be0e <TIM_TI1_ConfigInputStage>
      break;
 800bde6:	e00d      	b.n	800be04 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f000 f839 	bl	800be6c <TIM_TI2_ConfigInputStage>
      break;
 800bdfa:	e003      	b.n	800be04 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	75fb      	strb	r3, [r7, #23]
      break;
 800be00:	e000      	b.n	800be04 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800be02:	bf00      	nop
  }

  return status;
 800be04:	7dfb      	ldrb	r3, [r7, #23]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be0e:	b480      	push	{r7}
 800be10:	b087      	sub	sp, #28
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	f023 0201 	bic.w	r2, r3, #1
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	011b      	lsls	r3, r3, #4
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	4313      	orrs	r3, r2
 800be42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f023 030a 	bic.w	r3, r3, #10
 800be4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4313      	orrs	r3, r2
 800be52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	621a      	str	r2, [r3, #32]
}
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	f023 0210 	bic.w	r2, r3, #16
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800be96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	031b      	lsls	r3, r3, #12
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bea8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	621a      	str	r2, [r3, #32]
}
 800bec0:	bf00      	nop
 800bec2:	371c      	adds	r7, #28
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	4313      	orrs	r3, r2
 800beee:	f043 0307 	orr.w	r3, r3, #7
 800bef2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	609a      	str	r2, [r3, #8]
}
 800befa:	bf00      	nop
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b087      	sub	sp, #28
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
 800bf12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	021a      	lsls	r2, r3, #8
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	431a      	orrs	r2, r3
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	609a      	str	r2, [r3, #8]
}
 800bf3a:	bf00      	nop
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
	...

0800bf48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d101      	bne.n	800bf60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	e068      	b.n	800c032 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a2e      	ldr	r2, [pc, #184]	@ (800c040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d004      	beq.n	800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a2d      	ldr	r2, [pc, #180]	@ (800c044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d108      	bne.n	800bfa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a1e      	ldr	r2, [pc, #120]	@ (800c040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d01d      	beq.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfd2:	d018      	beq.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a1b      	ldr	r2, [pc, #108]	@ (800c048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d013      	beq.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a1a      	ldr	r2, [pc, #104]	@ (800c04c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d00e      	beq.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a18      	ldr	r2, [pc, #96]	@ (800c050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d009      	beq.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a13      	ldr	r2, [pc, #76]	@ (800c044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d004      	beq.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a14      	ldr	r2, [pc, #80]	@ (800c054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d10c      	bne.n	800c020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c00c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	4313      	orrs	r3, r2
 800c016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	40012c00 	.word	0x40012c00
 800c044:	40013400 	.word	0x40013400
 800c048:	40000400 	.word	0x40000400
 800c04c:	40000800 	.word	0x40000800
 800c050:	40000c00 	.word	0x40000c00
 800c054:	40014000 	.word	0x40014000

0800c058 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c088:	bf00      	nop
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c0a4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c0a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b085      	sub	sp, #20
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c0ca:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c0ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	43db      	mvns	r3, r3
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	1d3b      	adds	r3, r7, #4
 800c102:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2201      	movs	r2, #1
 800c10a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c134:	b480      	push	{r7}
 800c136:	b09d      	sub	sp, #116	@ 0x74
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	b29b      	uxth	r3, r3
 800c152:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c15a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	78db      	ldrb	r3, [r3, #3]
 800c162:	2b03      	cmp	r3, #3
 800c164:	d81f      	bhi.n	800c1a6 <USB_ActivateEndpoint+0x72>
 800c166:	a201      	add	r2, pc, #4	@ (adr r2, 800c16c <USB_ActivateEndpoint+0x38>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c17d 	.word	0x0800c17d
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c1af 	.word	0x0800c1af
 800c178:	0800c18b 	.word	0x0800c18b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c17c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c184:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c188:	e012      	b.n	800c1b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c18a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c18e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c192:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c196:	e00b      	b.n	800c1b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c198:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c19c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c1a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c1a4:	e004      	b.n	800c1b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c1ac:	e000      	b.n	800c1b0 <USB_ActivateEndpoint+0x7c>
      break;
 800c1ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	441a      	add	r2, r3
 800c1ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c1be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	881b      	ldrh	r3, [r3, #0]
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	b21b      	sxth	r3, r3
 800c1e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1ea:	b21a      	sxth	r2, r3
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	b21b      	sxth	r3, r3
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	b21b      	sxth	r3, r3
 800c1f6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	441a      	add	r2, r3
 800c204:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c20c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c218:	b29b      	uxth	r3, r3
 800c21a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	7b1b      	ldrb	r3, [r3, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	f040 8178 	bne.w	800c516 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 8084 	beq.w	800c338 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	61bb      	str	r3, [r7, #24]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	461a      	mov	r2, r3
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	4413      	add	r3, r2
 800c242:	61bb      	str	r3, [r7, #24]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	00da      	lsls	r2, r3, #3
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	88db      	ldrh	r3, [r3, #6]
 800c258:	085b      	lsrs	r3, r3, #1
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	b29a      	uxth	r2, r3
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	827b      	strh	r3, [r7, #18]
 800c272:	8a7b      	ldrh	r3, [r7, #18]
 800c274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01b      	beq.n	800c2b4 <USB_ActivateEndpoint+0x180>
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	b29b      	uxth	r3, r3
 800c28a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c292:	823b      	strh	r3, [r7, #16]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	441a      	add	r2, r3
 800c29e:	8a3b      	ldrh	r3, [r7, #16]
 800c2a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	78db      	ldrb	r3, [r3, #3]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d020      	beq.n	800c2fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2d2:	81bb      	strh	r3, [r7, #12]
 800c2d4:	89bb      	ldrh	r3, [r7, #12]
 800c2d6:	f083 0320 	eor.w	r3, r3, #32
 800c2da:	81bb      	strh	r3, [r7, #12]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	441a      	add	r2, r3
 800c2e6:	89bb      	ldrh	r3, [r7, #12]
 800c2e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	8013      	strh	r3, [r2, #0]
 800c2fc:	e2d5      	b.n	800c8aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c314:	81fb      	strh	r3, [r7, #14]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	441a      	add	r2, r3
 800c320:	89fb      	ldrh	r3, [r7, #14]
 800c322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c32a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c332:	b29b      	uxth	r3, r3
 800c334:	8013      	strh	r3, [r2, #0]
 800c336:	e2b8      	b.n	800c8aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c342:	b29b      	uxth	r3, r3
 800c344:	461a      	mov	r2, r3
 800c346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c348:	4413      	add	r3, r2
 800c34a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	00da      	lsls	r2, r3, #3
 800c352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c354:	4413      	add	r3, r2
 800c356:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	88db      	ldrh	r3, [r3, #6]
 800c360:	085b      	lsrs	r3, r3, #1
 800c362:	b29b      	uxth	r3, r3
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	b29a      	uxth	r2, r3
 800c368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c376:	b29b      	uxth	r3, r3
 800c378:	461a      	mov	r2, r3
 800c37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37c:	4413      	add	r3, r2
 800c37e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	00da      	lsls	r2, r3, #3
 800c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c388:	4413      	add	r3, r2
 800c38a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c38e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	b29b      	uxth	r3, r3
 800c396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	801a      	strh	r2, [r3, #0]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10a      	bne.n	800c3be <USB_ActivateEndpoint+0x28a>
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	801a      	strh	r2, [r3, #0]
 800c3bc:	e039      	b.n	800c432 <USB_ActivateEndpoint+0x2fe>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3c4:	d818      	bhi.n	800c3f8 <USB_ActivateEndpoint+0x2c4>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	085b      	lsrs	r3, r3, #1
 800c3cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <USB_ActivateEndpoint+0x2ac>
 800c3da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3dc:	3301      	adds	r3, #1
 800c3de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	029b      	lsls	r3, r3, #10
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	801a      	strh	r2, [r3, #0]
 800c3f6:	e01c      	b.n	800c432 <USB_ActivateEndpoint+0x2fe>
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	095b      	lsrs	r3, r3, #5
 800c3fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	f003 031f 	and.w	r3, r3, #31
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <USB_ActivateEndpoint+0x2de>
 800c40c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c40e:	3b01      	subs	r3, #1
 800c410:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	b29a      	uxth	r2, r3
 800c418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	029b      	lsls	r3, r3, #10
 800c41e:	b29b      	uxth	r3, r3
 800c420:	4313      	orrs	r3, r2
 800c422:	b29b      	uxth	r3, r3
 800c424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c440:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d01b      	beq.n	800c482 <USB_ActivateEndpoint+0x34e>
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	b29b      	uxth	r3, r3
 800c458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c45c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c460:	843b      	strh	r3, [r7, #32]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	441a      	add	r2, r3
 800c46c:	8c3b      	ldrh	r3, [r7, #32]
 800c46e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c47e:	b29b      	uxth	r3, r3
 800c480:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d124      	bne.n	800c4d4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	b29b      	uxth	r3, r3
 800c498:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c49c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a0:	83bb      	strh	r3, [r7, #28]
 800c4a2:	8bbb      	ldrh	r3, [r7, #28]
 800c4a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4a8:	83bb      	strh	r3, [r7, #28]
 800c4aa:	8bbb      	ldrh	r3, [r7, #28]
 800c4ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4b0:	83bb      	strh	r3, [r7, #28]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	441a      	add	r2, r3
 800c4bc:	8bbb      	ldrh	r3, [r7, #28]
 800c4be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	8013      	strh	r3, [r2, #0]
 800c4d2:	e1ea      	b.n	800c8aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ea:	83fb      	strh	r3, [r7, #30]
 800c4ec:	8bfb      	ldrh	r3, [r7, #30]
 800c4ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4f2:	83fb      	strh	r3, [r7, #30]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	441a      	add	r2, r3
 800c4fe:	8bfb      	ldrh	r3, [r7, #30]
 800c500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c50c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c510:	b29b      	uxth	r3, r3
 800c512:	8013      	strh	r3, [r2, #0]
 800c514:	e1c9      	b.n	800c8aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	78db      	ldrb	r3, [r3, #3]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d11e      	bne.n	800c55c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c534:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	441a      	add	r2, r3
 800c542:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c54a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c54e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c556:	b29b      	uxth	r3, r3
 800c558:	8013      	strh	r3, [r2, #0]
 800c55a:	e01d      	b.n	800c598 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c56e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c572:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	441a      	add	r2, r3
 800c580:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c58c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c594:	b29b      	uxth	r3, r3
 800c596:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5a8:	4413      	add	r3, r2
 800c5aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	00da      	lsls	r2, r3, #3
 800c5b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	891b      	ldrh	r3, [r3, #8]
 800c5c0:	085b      	lsrs	r3, r3, #1
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5ca:	801a      	strh	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5dc:	4413      	add	r3, r2
 800c5de:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	00da      	lsls	r2, r3, #3
 800c5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c5ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	895b      	ldrh	r3, [r3, #10]
 800c5f4:	085b      	lsrs	r3, r3, #1
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	785b      	ldrb	r3, [r3, #1]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 8093 	bne.w	800c730 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c61a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c61e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c622:	2b00      	cmp	r3, #0
 800c624:	d01b      	beq.n	800c65e <USB_ActivateEndpoint+0x52a>
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	b29b      	uxth	r3, r3
 800c634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c63c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	441a      	add	r2, r3
 800c648:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c64a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c64e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c66c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c66e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	d01b      	beq.n	800c6ae <USB_ActivateEndpoint+0x57a>
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	b29b      	uxth	r3, r3
 800c684:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c68c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	441a      	add	r2, r3
 800c698:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c69a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c69e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6c4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c6c6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c6c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c6cc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c6ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c6d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c6d4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	441a      	add	r2, r3
 800c6e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c6e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	b29b      	uxth	r3, r3
 800c704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c70c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	441a      	add	r2, r3
 800c718:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c71a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c71e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	8013      	strh	r3, [r2, #0]
 800c72e:	e0bc      	b.n	800c8aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01d      	beq.n	800c788 <USB_ActivateEndpoint+0x654>
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c762:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	441a      	add	r2, r3
 800c770:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c77c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c784:	b29b      	uxth	r3, r3
 800c786:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c798:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01d      	beq.n	800c7e0 <USB_ActivateEndpoint+0x6ac>
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	441a      	add	r2, r3
 800c7c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c7cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	78db      	ldrb	r3, [r3, #3]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d024      	beq.n	800c832 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c802:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c806:	f083 0320 	eor.w	r3, r3, #32
 800c80a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	441a      	add	r2, r3
 800c818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c81c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	8013      	strh	r3, [r2, #0]
 800c830:	e01d      	b.n	800c86e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c848:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	441a      	add	r2, r3
 800c856:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c85a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c85e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c884:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	441a      	add	r2, r3
 800c892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c89a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c89e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c8aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3774      	adds	r7, #116	@ 0x74
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop

0800c8bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b08d      	sub	sp, #52	@ 0x34
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	7b1b      	ldrb	r3, [r3, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f040 808e 	bne.w	800c9ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d044      	beq.n	800c962 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4413      	add	r3, r2
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	81bb      	strh	r3, [r7, #12]
 800c8e6:	89bb      	ldrh	r3, [r7, #12]
 800c8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d01b      	beq.n	800c928 <USB_DeactivateEndpoint+0x6c>
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c906:	817b      	strh	r3, [r7, #10]
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	441a      	add	r2, r3
 800c912:	897b      	ldrh	r3, [r7, #10]
 800c914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c91c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c920:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c924:	b29b      	uxth	r3, r3
 800c926:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	881b      	ldrh	r3, [r3, #0]
 800c934:	b29b      	uxth	r3, r3
 800c936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c93a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c93e:	813b      	strh	r3, [r7, #8]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	441a      	add	r2, r3
 800c94a:	893b      	ldrh	r3, [r7, #8]
 800c94c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	8013      	strh	r3, [r2, #0]
 800c960:	e192      	b.n	800cc88 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	827b      	strh	r3, [r7, #18]
 800c970:	8a7b      	ldrh	r3, [r7, #18]
 800c972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c976:	2b00      	cmp	r3, #0
 800c978:	d01b      	beq.n	800c9b2 <USB_DeactivateEndpoint+0xf6>
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c98c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c990:	823b      	strh	r3, [r7, #16]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	441a      	add	r2, r3
 800c99c:	8a3b      	ldrh	r3, [r7, #16]
 800c99e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9c8:	81fb      	strh	r3, [r7, #14]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	441a      	add	r2, r3
 800c9d4:	89fb      	ldrh	r3, [r7, #14]
 800c9d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	8013      	strh	r3, [r2, #0]
 800c9ea:	e14d      	b.n	800cc88 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	785b      	ldrb	r3, [r3, #1]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f040 80a5 	bne.w	800cb40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4413      	add	r3, r2
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	843b      	strh	r3, [r7, #32]
 800ca04:	8c3b      	ldrh	r3, [r7, #32]
 800ca06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d01b      	beq.n	800ca46 <USB_DeactivateEndpoint+0x18a>
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca24:	83fb      	strh	r3, [r7, #30]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	441a      	add	r2, r3
 800ca30:	8bfb      	ldrh	r3, [r7, #30]
 800ca32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	83bb      	strh	r3, [r7, #28]
 800ca54:	8bbb      	ldrh	r3, [r7, #28]
 800ca56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d01b      	beq.n	800ca96 <USB_DeactivateEndpoint+0x1da>
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca74:	837b      	strh	r3, [r7, #26]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	441a      	add	r2, r3
 800ca80:	8b7b      	ldrh	r3, [r7, #26]
 800ca82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caac:	833b      	strh	r3, [r7, #24]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	441a      	add	r2, r3
 800cab8:	8b3b      	ldrh	r3, [r7, #24]
 800caba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cabe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cac6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800caca:	b29b      	uxth	r3, r3
 800cacc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cae4:	82fb      	strh	r3, [r7, #22]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	441a      	add	r2, r3
 800caf0:	8afb      	ldrh	r3, [r7, #22]
 800caf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cafa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cafe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb1c:	82bb      	strh	r3, [r7, #20]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	441a      	add	r2, r3
 800cb28:	8abb      	ldrh	r3, [r7, #20]
 800cb2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	8013      	strh	r3, [r2, #0]
 800cb3e:	e0a3      	b.n	800cc88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cb4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01b      	beq.n	800cb90 <USB_DeactivateEndpoint+0x2d4>
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	441a      	add	r2, r3
 800cb7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01b      	beq.n	800cbe0 <USB_DeactivateEndpoint+0x324>
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	881b      	ldrh	r3, [r3, #0]
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	441a      	add	r2, r3
 800cbca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	441a      	add	r2, r3
 800cc02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cc04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	881b      	ldrh	r3, [r3, #0]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	441a      	add	r2, r3
 800cc3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc66:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	441a      	add	r2, r3
 800cc72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3734      	adds	r7, #52	@ 0x34
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b0c2      	sub	sp, #264	@ 0x108
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cca4:	6018      	str	r0, [r3, #0]
 800cca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	f040 86b7 	bne.w	800da30 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ccc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	699a      	ldr	r2, [r3, #24]
 800ccce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d908      	bls.n	800ccf0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ccde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ccee:	e007      	b.n	800cd00 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ccf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cd00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	7b1b      	ldrb	r3, [r3, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d13a      	bne.n	800cd86 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cd10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6959      	ldr	r1, [r3, #20]
 800cd1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	88da      	ldrh	r2, [r3, #6]
 800cd28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cd32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cd36:	6800      	ldr	r0, [r0, #0]
 800cd38:	f001 fc99 	bl	800e66e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cd3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	613b      	str	r3, [r7, #16]
 800cd48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	613b      	str	r3, [r7, #16]
 800cd60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	00da      	lsls	r2, r3, #3
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	801a      	strh	r2, [r3, #0]
 800cd82:	f000 be1f 	b.w	800d9c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cd86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	78db      	ldrb	r3, [r3, #3]
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	f040 8462 	bne.w	800d65c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6a1a      	ldr	r2, [r3, #32]
 800cda4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	f240 83df 	bls.w	800d574 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cdb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cddc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	441a      	add	r2, r3
 800cdfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cdfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce06:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ce0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ce12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6a1a      	ldr	r2, [r3, #32]
 800ce1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce22:	1ad2      	subs	r2, r2, r3
 800ce24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ce30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 81c7 	beq.w	800d1e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	785b      	ldrb	r3, [r3, #1]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d177      	bne.n	800cf64 <USB_EPStartXfer+0x2ce>
 800ce74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	461a      	mov	r2, r3
 800ce92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce94:	4413      	add	r3, r2
 800ce96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	00da      	lsls	r2, r3, #3
 800cea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea8:	4413      	add	r3, r2
 800ceaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebe:	801a      	strh	r2, [r3, #0]
 800cec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <USB_EPStartXfer+0x248>
 800cec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	b29b      	uxth	r3, r3
 800cece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ced2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceda:	801a      	strh	r2, [r3, #0]
 800cedc:	e067      	b.n	800cfae <USB_EPStartXfer+0x318>
 800cede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee2:	2b3e      	cmp	r3, #62	@ 0x3e
 800cee4:	d81c      	bhi.n	800cf20 <USB_EPStartXfer+0x28a>
 800cee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceea:	085b      	lsrs	r3, r3, #1
 800ceec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <USB_EPStartXfer+0x270>
 800cefc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cf00:	3301      	adds	r3, #1
 800cf02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	029b      	lsls	r3, r3, #10
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4313      	orrs	r3, r2
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1c:	801a      	strh	r2, [r3, #0]
 800cf1e:	e046      	b.n	800cfae <USB_EPStartXfer+0x318>
 800cf20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf24:	095b      	lsrs	r3, r3, #5
 800cf26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf2e:	f003 031f 	and.w	r3, r3, #31
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d104      	bne.n	800cf40 <USB_EPStartXfer+0x2aa>
 800cf36:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	029b      	lsls	r3, r3, #10
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	4313      	orrs	r3, r2
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf60:	801a      	strh	r2, [r3, #0]
 800cf62:	e024      	b.n	800cfae <USB_EPStartXfer+0x318>
 800cf64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d11c      	bne.n	800cfae <USB_EPStartXfer+0x318>
 800cf74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	461a      	mov	r2, r3
 800cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf88:	4413      	add	r3, r2
 800cf8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	00da      	lsls	r2, r3, #3
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cfa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	895b      	ldrh	r3, [r3, #10]
 800cfba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6959      	ldr	r1, [r3, #20]
 800cfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cfd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cfd8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f001 fb46 	bl	800e66e <USB_WritePMA>
            ep->xfer_buff += len;
 800cfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	695a      	ldr	r2, [r3, #20]
 800cfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff2:	441a      	add	r2, r3
 800cff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	6a1a      	ldr	r2, [r3, #32]
 800d00c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d90f      	bls.n	800d03c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	6a1a      	ldr	r2, [r3, #32]
 800d028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d02c:	1ad2      	subs	r2, r2, r3
 800d02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	621a      	str	r2, [r3, #32]
 800d03a:	e00e      	b.n	800d05a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6a1b      	ldr	r3, [r3, #32]
 800d048:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2200      	movs	r2, #0
 800d058:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d177      	bne.n	800d15a <USB_EPStartXfer+0x4c4>
 800d06a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d06e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	61bb      	str	r3, [r7, #24]
 800d076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d07a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d084:	b29b      	uxth	r3, r3
 800d086:	461a      	mov	r2, r3
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	4413      	add	r3, r2
 800d08c:	61bb      	str	r3, [r7, #24]
 800d08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	00da      	lsls	r2, r3, #3
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	801a      	strh	r2, [r3, #0]
 800d0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10a      	bne.n	800d0d4 <USB_EPStartXfer+0x43e>
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	801a      	strh	r2, [r3, #0]
 800d0d2:	e06d      	b.n	800d1b0 <USB_EPStartXfer+0x51a>
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0da:	d81c      	bhi.n	800d116 <USB_EPStartXfer+0x480>
 800d0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e0:	085b      	lsrs	r3, r3, #1
 800d0e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d004      	beq.n	800d0fc <USB_EPStartXfer+0x466>
 800d0f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	881b      	ldrh	r3, [r3, #0]
 800d100:	b29a      	uxth	r2, r3
 800d102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d106:	b29b      	uxth	r3, r3
 800d108:	029b      	lsls	r3, r3, #10
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	4313      	orrs	r3, r2
 800d10e:	b29a      	uxth	r2, r3
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	801a      	strh	r2, [r3, #0]
 800d114:	e04c      	b.n	800d1b0 <USB_EPStartXfer+0x51a>
 800d116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d11a:	095b      	lsrs	r3, r3, #5
 800d11c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d124:	f003 031f 	and.w	r3, r3, #31
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d104      	bne.n	800d136 <USB_EPStartXfer+0x4a0>
 800d12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d130:	3b01      	subs	r3, #1
 800d132:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d140:	b29b      	uxth	r3, r3
 800d142:	029b      	lsls	r3, r3, #10
 800d144:	b29b      	uxth	r3, r3
 800d146:	4313      	orrs	r3, r2
 800d148:	b29b      	uxth	r3, r3
 800d14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d152:	b29a      	uxth	r2, r3
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	801a      	strh	r2, [r3, #0]
 800d158:	e02a      	b.n	800d1b0 <USB_EPStartXfer+0x51a>
 800d15a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d15e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	785b      	ldrb	r3, [r3, #1]
 800d166:	2b01      	cmp	r3, #1
 800d168:	d122      	bne.n	800d1b0 <USB_EPStartXfer+0x51a>
 800d16a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d16e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	623b      	str	r3, [r7, #32]
 800d176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d17a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d184:	b29b      	uxth	r3, r3
 800d186:	461a      	mov	r2, r3
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	4413      	add	r3, r2
 800d18c:	623b      	str	r3, [r7, #32]
 800d18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	00da      	lsls	r2, r3, #3
 800d19c:	6a3b      	ldr	r3, [r7, #32]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1a4:	61fb      	str	r3, [r7, #28]
 800d1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d1b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	891b      	ldrh	r3, [r3, #8]
 800d1bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6959      	ldr	r1, [r3, #20]
 800d1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d1d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d1da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d1de:	6800      	ldr	r0, [r0, #0]
 800d1e0:	f001 fa45 	bl	800e66e <USB_WritePMA>
 800d1e4:	e3ee      	b.n	800d9c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	785b      	ldrb	r3, [r3, #1]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d177      	bne.n	800d2e6 <USB_EPStartXfer+0x650>
 800d1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d210:	b29b      	uxth	r3, r3
 800d212:	461a      	mov	r2, r3
 800d214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d216:	4413      	add	r3, r2
 800d218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	00da      	lsls	r2, r3, #3
 800d228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d22a:	4413      	add	r3, r2
 800d22c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d230:	647b      	str	r3, [r7, #68]	@ 0x44
 800d232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	b29b      	uxth	r3, r3
 800d238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d240:	801a      	strh	r2, [r3, #0]
 800d242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10a      	bne.n	800d260 <USB_EPStartXfer+0x5ca>
 800d24a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d258:	b29a      	uxth	r2, r3
 800d25a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d25c:	801a      	strh	r2, [r3, #0]
 800d25e:	e06d      	b.n	800d33c <USB_EPStartXfer+0x6a6>
 800d260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d264:	2b3e      	cmp	r3, #62	@ 0x3e
 800d266:	d81c      	bhi.n	800d2a2 <USB_EPStartXfer+0x60c>
 800d268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d26c:	085b      	lsrs	r3, r3, #1
 800d26e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d004      	beq.n	800d288 <USB_EPStartXfer+0x5f2>
 800d27e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d282:	3301      	adds	r3, #1
 800d284:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d292:	b29b      	uxth	r3, r3
 800d294:	029b      	lsls	r3, r3, #10
 800d296:	b29b      	uxth	r3, r3
 800d298:	4313      	orrs	r3, r2
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d29e:	801a      	strh	r2, [r3, #0]
 800d2a0:	e04c      	b.n	800d33c <USB_EPStartXfer+0x6a6>
 800d2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2a6:	095b      	lsrs	r3, r3, #5
 800d2a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b0:	f003 031f 	and.w	r3, r3, #31
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d104      	bne.n	800d2c2 <USB_EPStartXfer+0x62c>
 800d2b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d2c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	029b      	lsls	r3, r3, #10
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e2:	801a      	strh	r2, [r3, #0]
 800d2e4:	e02a      	b.n	800d33c <USB_EPStartXfer+0x6a6>
 800d2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	785b      	ldrb	r3, [r3, #1]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d122      	bne.n	800d33c <USB_EPStartXfer+0x6a6>
 800d2f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	653b      	str	r3, [r7, #80]	@ 0x50
 800d302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d310:	b29b      	uxth	r3, r3
 800d312:	461a      	mov	r2, r3
 800d314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d316:	4413      	add	r3, r2
 800d318:	653b      	str	r3, [r7, #80]	@ 0x50
 800d31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	00da      	lsls	r2, r3, #3
 800d328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d32a:	4413      	add	r3, r2
 800d32c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d336:	b29a      	uxth	r2, r3
 800d338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d33a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	891b      	ldrh	r3, [r3, #8]
 800d348:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6959      	ldr	r1, [r3, #20]
 800d358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d362:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d366:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d36a:	6800      	ldr	r0, [r0, #0]
 800d36c:	f001 f97f 	bl	800e66e <USB_WritePMA>
            ep->xfer_buff += len;
 800d370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	695a      	ldr	r2, [r3, #20]
 800d37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d380:	441a      	add	r2, r3
 800d382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d38e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6a1a      	ldr	r2, [r3, #32]
 800d39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d90f      	bls.n	800d3ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d3aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6a1a      	ldr	r2, [r3, #32]
 800d3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ba:	1ad2      	subs	r2, r2, r3
 800d3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	621a      	str	r2, [r3, #32]
 800d3c8:	e00e      	b.n	800d3e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d3da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	785b      	ldrb	r3, [r3, #1]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d177      	bne.n	800d4f4 <USB_EPStartXfer+0x85e>
 800d404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d41e:	b29b      	uxth	r3, r3
 800d420:	461a      	mov	r2, r3
 800d422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d424:	4413      	add	r3, r2
 800d426:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	00da      	lsls	r2, r3, #3
 800d436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d438:	4413      	add	r3, r2
 800d43a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d442:	881b      	ldrh	r3, [r3, #0]
 800d444:	b29b      	uxth	r3, r3
 800d446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44e:	801a      	strh	r2, [r3, #0]
 800d450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10a      	bne.n	800d46e <USB_EPStartXfer+0x7d8>
 800d458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d466:	b29a      	uxth	r2, r3
 800d468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	e067      	b.n	800d53e <USB_EPStartXfer+0x8a8>
 800d46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d472:	2b3e      	cmp	r3, #62	@ 0x3e
 800d474:	d81c      	bhi.n	800d4b0 <USB_EPStartXfer+0x81a>
 800d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d47a:	085b      	lsrs	r3, r3, #1
 800d47c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <USB_EPStartXfer+0x800>
 800d48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d490:	3301      	adds	r3, #1
 800d492:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	029b      	lsls	r3, r3, #10
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ac:	801a      	strh	r2, [r3, #0]
 800d4ae:	e046      	b.n	800d53e <USB_EPStartXfer+0x8a8>
 800d4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b4:	095b      	lsrs	r3, r3, #5
 800d4b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4be:	f003 031f 	and.w	r3, r3, #31
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d104      	bne.n	800d4d0 <USB_EPStartXfer+0x83a>
 800d4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	029b      	lsls	r3, r3, #10
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4f0:	801a      	strh	r2, [r3, #0]
 800d4f2:	e024      	b.n	800d53e <USB_EPStartXfer+0x8a8>
 800d4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	785b      	ldrb	r3, [r3, #1]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d11c      	bne.n	800d53e <USB_EPStartXfer+0x8a8>
 800d504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d512:	b29b      	uxth	r3, r3
 800d514:	461a      	mov	r2, r3
 800d516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d518:	4413      	add	r3, r2
 800d51a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	00da      	lsls	r2, r3, #3
 800d52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d52c:	4413      	add	r3, r2
 800d52e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d538:	b29a      	uxth	r2, r3
 800d53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d53c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	895b      	ldrh	r3, [r3, #10]
 800d54a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6959      	ldr	r1, [r3, #20]
 800d55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55e:	b29b      	uxth	r3, r3
 800d560:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d564:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d568:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d56c:	6800      	ldr	r0, [r0, #0]
 800d56e:	f001 f87e 	bl	800e66e <USB_WritePMA>
 800d572:	e227      	b.n	800d9c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6a1b      	ldr	r3, [r3, #32]
 800d580:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d5a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5aa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d5ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	441a      	add	r2, r3
 800d5c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d5cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d600:	4413      	add	r3, r2
 800d602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	00da      	lsls	r2, r3, #3
 800d612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d614:	4413      	add	r3, r2
 800d616:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d61a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d620:	b29a      	uxth	r2, r3
 800d622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d624:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d62a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	891b      	ldrh	r3, [r3, #8]
 800d632:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6959      	ldr	r1, [r3, #20]
 800d642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d646:	b29b      	uxth	r3, r3
 800d648:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d64c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d650:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d654:	6800      	ldr	r0, [r0, #0]
 800d656:	f001 f80a 	bl	800e66e <USB_WritePMA>
 800d65a:	e1b3      	b.n	800d9c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6a1a      	ldr	r2, [r3, #32]
 800d668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d66c:	1ad2      	subs	r2, r2, r3
 800d66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d67a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d67e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	4413      	add	r3, r2
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	b29b      	uxth	r3, r3
 800d698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f000 80c6 	beq.w	800d82e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800d6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	785b      	ldrb	r3, [r3, #1]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d177      	bne.n	800d7ae <USB_EPStartXfer+0xb18>
 800d6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	461a      	mov	r2, r3
 800d6dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d6de:	4413      	add	r3, r2
 800d6e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d6e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	00da      	lsls	r2, r3, #3
 800d6f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d6fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d704:	b29a      	uxth	r2, r3
 800d706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d708:	801a      	strh	r2, [r3, #0]
 800d70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <USB_EPStartXfer+0xa92>
 800d712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	b29b      	uxth	r3, r3
 800d718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d71c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d720:	b29a      	uxth	r2, r3
 800d722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d724:	801a      	strh	r2, [r3, #0]
 800d726:	e067      	b.n	800d7f8 <USB_EPStartXfer+0xb62>
 800d728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d72e:	d81c      	bhi.n	800d76a <USB_EPStartXfer+0xad4>
 800d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d734:	085b      	lsrs	r3, r3, #1
 800d736:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d004      	beq.n	800d750 <USB_EPStartXfer+0xaba>
 800d746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d74a:	3301      	adds	r3, #1
 800d74c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	b29a      	uxth	r2, r3
 800d756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	029b      	lsls	r3, r3, #10
 800d75e:	b29b      	uxth	r3, r3
 800d760:	4313      	orrs	r3, r2
 800d762:	b29a      	uxth	r2, r3
 800d764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d766:	801a      	strh	r2, [r3, #0]
 800d768:	e046      	b.n	800d7f8 <USB_EPStartXfer+0xb62>
 800d76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d76e:	095b      	lsrs	r3, r3, #5
 800d770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d778:	f003 031f 	and.w	r3, r3, #31
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d104      	bne.n	800d78a <USB_EPStartXfer+0xaf4>
 800d780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d784:	3b01      	subs	r3, #1
 800d786:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d78a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	b29a      	uxth	r2, r3
 800d790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d794:	b29b      	uxth	r3, r3
 800d796:	029b      	lsls	r3, r3, #10
 800d798:	b29b      	uxth	r3, r3
 800d79a:	4313      	orrs	r3, r2
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7aa:	801a      	strh	r2, [r3, #0]
 800d7ac:	e024      	b.n	800d7f8 <USB_EPStartXfer+0xb62>
 800d7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	785b      	ldrb	r3, [r3, #1]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d11c      	bne.n	800d7f8 <USB_EPStartXfer+0xb62>
 800d7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d7d2:	4413      	add	r3, r2
 800d7d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d7d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	00da      	lsls	r2, r3, #3
 800d7e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d7ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	895b      	ldrh	r3, [r3, #10]
 800d804:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d80c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6959      	ldr	r1, [r3, #20]
 800d814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d818:	b29b      	uxth	r3, r3
 800d81a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d81e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d822:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d826:	6800      	ldr	r0, [r0, #0]
 800d828:	f000 ff21 	bl	800e66e <USB_WritePMA>
 800d82c:	e0ca      	b.n	800d9c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	785b      	ldrb	r3, [r3, #1]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d177      	bne.n	800d92e <USB_EPStartXfer+0xc98>
 800d83e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d84e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d858:	b29b      	uxth	r3, r3
 800d85a:	461a      	mov	r2, r3
 800d85c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d85e:	4413      	add	r3, r2
 800d860:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	00da      	lsls	r2, r3, #3
 800d870:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d872:	4413      	add	r3, r2
 800d874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d87a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d87c:	881b      	ldrh	r3, [r3, #0]
 800d87e:	b29b      	uxth	r3, r3
 800d880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d884:	b29a      	uxth	r2, r3
 800d886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d888:	801a      	strh	r2, [r3, #0]
 800d88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10a      	bne.n	800d8a8 <USB_EPStartXfer+0xc12>
 800d892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	b29b      	uxth	r3, r3
 800d898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d89c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8a4:	801a      	strh	r2, [r3, #0]
 800d8a6:	e073      	b.n	800d990 <USB_EPStartXfer+0xcfa>
 800d8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8ae:	d81c      	bhi.n	800d8ea <USB_EPStartXfer+0xc54>
 800d8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8b4:	085b      	lsrs	r3, r3, #1
 800d8b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d004      	beq.n	800d8d0 <USB_EPStartXfer+0xc3a>
 800d8c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d8d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	029b      	lsls	r3, r3, #10
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8e6:	801a      	strh	r2, [r3, #0]
 800d8e8:	e052      	b.n	800d990 <USB_EPStartXfer+0xcfa>
 800d8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ee:	095b      	lsrs	r3, r3, #5
 800d8f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8f8:	f003 031f 	and.w	r3, r3, #31
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d104      	bne.n	800d90a <USB_EPStartXfer+0xc74>
 800d900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d904:	3b01      	subs	r3, #1
 800d906:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d90a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	b29a      	uxth	r2, r3
 800d910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d914:	b29b      	uxth	r3, r3
 800d916:	029b      	lsls	r3, r3, #10
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4313      	orrs	r3, r2
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d926:	b29a      	uxth	r2, r3
 800d928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d92a:	801a      	strh	r2, [r3, #0]
 800d92c:	e030      	b.n	800d990 <USB_EPStartXfer+0xcfa>
 800d92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	785b      	ldrb	r3, [r3, #1]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d128      	bne.n	800d990 <USB_EPStartXfer+0xcfa>
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	461a      	mov	r2, r3
 800d95e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d962:	4413      	add	r3, r2
 800d964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	00da      	lsls	r2, r3, #3
 800d976:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d97a:	4413      	add	r3, r2
 800d97c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d980:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d988:	b29a      	uxth	r2, r3
 800d98a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d98e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	891b      	ldrh	r3, [r3, #8]
 800d99c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	6959      	ldr	r1, [r3, #20]
 800d9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d9b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d9ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d9be:	6800      	ldr	r0, [r0, #0]
 800d9c0:	f000 fe55 	bl	800e66e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9ea:	817b      	strh	r3, [r7, #10]
 800d9ec:	897b      	ldrh	r3, [r7, #10]
 800d9ee:	f083 0310 	eor.w	r3, r3, #16
 800d9f2:	817b      	strh	r3, [r7, #10]
 800d9f4:	897b      	ldrh	r3, [r7, #10]
 800d9f6:	f083 0320 	eor.w	r3, r3, #32
 800d9fa:	817b      	strh	r3, [r7, #10]
 800d9fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	441a      	add	r2, r3
 800da16:	897b      	ldrh	r3, [r7, #10]
 800da18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da28:	b29b      	uxth	r3, r3
 800da2a:	8013      	strh	r3, [r2, #0]
 800da2c:	f000 bcdf 	b.w	800e3ee <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800da30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	7b1b      	ldrb	r3, [r3, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f040 80bc 	bne.w	800dbba <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800da42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	699a      	ldr	r2, [r3, #24]
 800da4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d917      	bls.n	800da8e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800da5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	691b      	ldr	r3, [r3, #16]
 800da6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800da6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da7e:	1ad2      	subs	r2, r2, r3
 800da80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	619a      	str	r2, [r3, #24]
 800da8c:	e00e      	b.n	800daac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800da8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	699b      	ldr	r3, [r3, #24]
 800da9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800da9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2200      	movs	r2, #0
 800daaa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800daac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800daba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dabe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dac8:	b29b      	uxth	r3, r3
 800daca:	461a      	mov	r2, r3
 800dacc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dad0:	4413      	add	r3, r2
 800dad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	00da      	lsls	r2, r3, #3
 800dae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dae8:	4413      	add	r3, r2
 800daea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800daee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800daf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dafe:	b29a      	uxth	r2, r3
 800db00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db04:	801a      	strh	r2, [r3, #0]
 800db06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10d      	bne.n	800db2a <USB_EPStartXfer+0xe94>
 800db0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	b29b      	uxth	r3, r3
 800db16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db1e:	b29a      	uxth	r2, r3
 800db20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db24:	801a      	strh	r2, [r3, #0]
 800db26:	f000 bc28 	b.w	800e37a <USB_EPStartXfer+0x16e4>
 800db2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800db30:	d81f      	bhi.n	800db72 <USB_EPStartXfer+0xedc>
 800db32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db36:	085b      	lsrs	r3, r3, #1
 800db38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800db3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	2b00      	cmp	r3, #0
 800db46:	d004      	beq.n	800db52 <USB_EPStartXfer+0xebc>
 800db48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db4c:	3301      	adds	r3, #1
 800db4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800db52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	b29a      	uxth	r2, r3
 800db5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db5e:	b29b      	uxth	r3, r3
 800db60:	029b      	lsls	r3, r3, #10
 800db62:	b29b      	uxth	r3, r3
 800db64:	4313      	orrs	r3, r2
 800db66:	b29a      	uxth	r2, r3
 800db68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db6c:	801a      	strh	r2, [r3, #0]
 800db6e:	f000 bc04 	b.w	800e37a <USB_EPStartXfer+0x16e4>
 800db72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db76:	095b      	lsrs	r3, r3, #5
 800db78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800db7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db80:	f003 031f 	and.w	r3, r3, #31
 800db84:	2b00      	cmp	r3, #0
 800db86:	d104      	bne.n	800db92 <USB_EPStartXfer+0xefc>
 800db88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db8c:	3b01      	subs	r3, #1
 800db8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800db92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	b29a      	uxth	r2, r3
 800db9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	029b      	lsls	r3, r3, #10
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	4313      	orrs	r3, r2
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dbb6:	801a      	strh	r2, [r3, #0]
 800dbb8:	e3df      	b.n	800e37a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dbba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	78db      	ldrb	r3, [r3, #3]
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	f040 8218 	bne.w	800dffc <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dbcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	785b      	ldrb	r3, [r3, #1]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f040 809d 	bne.w	800dd18 <USB_EPStartXfer+0x1082>
 800dbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc02:	4413      	add	r3, r2
 800dc04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dc08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	00da      	lsls	r2, r3, #3
 800dc16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc36:	801a      	strh	r2, [r3, #0]
 800dc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10c      	bne.n	800dc62 <USB_EPStartXfer+0xfcc>
 800dc48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc5e:	801a      	strh	r2, [r3, #0]
 800dc60:	e08f      	b.n	800dd82 <USB_EPStartXfer+0x10ec>
 800dc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc70:	d826      	bhi.n	800dcc0 <USB_EPStartXfer+0x102a>
 800dc72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	085b      	lsrs	r3, r3, #1
 800dc80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d004      	beq.n	800dca2 <USB_EPStartXfer+0x100c>
 800dc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	029b      	lsls	r3, r3, #10
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dcbc:	801a      	strh	r2, [r3, #0]
 800dcbe:	e060      	b.n	800dd82 <USB_EPStartXfer+0x10ec>
 800dcc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	095b      	lsrs	r3, r3, #5
 800dcce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dcd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	f003 031f 	and.w	r3, r3, #31
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d104      	bne.n	800dcf0 <USB_EPStartXfer+0x105a>
 800dce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcea:	3b01      	subs	r3, #1
 800dcec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dcf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	029b      	lsls	r3, r3, #10
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	4313      	orrs	r3, r2
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd14:	801a      	strh	r2, [r3, #0]
 800dd16:	e034      	b.n	800dd82 <USB_EPStartXfer+0x10ec>
 800dd18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	785b      	ldrb	r3, [r3, #1]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d12c      	bne.n	800dd82 <USB_EPStartXfer+0x10ec>
 800dd28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	461a      	mov	r2, r3
 800dd48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dd52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	00da      	lsls	r2, r3, #3
 800dd60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd64:	4413      	add	r3, r2
 800dd66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dd6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dd80:	801a      	strh	r2, [r3, #0]
 800dd82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f040 809d 	bne.w	800dedc <USB_EPStartXfer+0x1246>
 800dda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ddb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ddcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	00da      	lsls	r2, r3, #3
 800ddda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddde:	4413      	add	r3, r2
 800dde0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dde4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dde8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ddfa:	801a      	strh	r2, [r3, #0]
 800ddfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10c      	bne.n	800de26 <USB_EPStartXfer+0x1190>
 800de0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	b29b      	uxth	r3, r3
 800de14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de22:	801a      	strh	r2, [r3, #0]
 800de24:	e088      	b.n	800df38 <USB_EPStartXfer+0x12a2>
 800de26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	2b3e      	cmp	r3, #62	@ 0x3e
 800de34:	d826      	bhi.n	800de84 <USB_EPStartXfer+0x11ee>
 800de36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	085b      	lsrs	r3, r3, #1
 800de44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <USB_EPStartXfer+0x11d0>
 800de5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de60:	3301      	adds	r3, #1
 800de62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de6a:	881b      	ldrh	r3, [r3, #0]
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de72:	b29b      	uxth	r3, r3
 800de74:	029b      	lsls	r3, r3, #10
 800de76:	b29b      	uxth	r3, r3
 800de78:	4313      	orrs	r3, r2
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de80:	801a      	strh	r2, [r3, #0]
 800de82:	e059      	b.n	800df38 <USB_EPStartXfer+0x12a2>
 800de84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	095b      	lsrs	r3, r3, #5
 800de92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	f003 031f 	and.w	r3, r3, #31
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d104      	bne.n	800deb4 <USB_EPStartXfer+0x121e>
 800deaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800deae:	3b01      	subs	r3, #1
 800deb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800deb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	b29a      	uxth	r2, r3
 800debc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	029b      	lsls	r3, r3, #10
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	4313      	orrs	r3, r2
 800dec8:	b29b      	uxth	r3, r3
 800deca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ded8:	801a      	strh	r2, [r3, #0]
 800deda:	e02d      	b.n	800df38 <USB_EPStartXfer+0x12a2>
 800dedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	785b      	ldrb	r3, [r3, #1]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d125      	bne.n	800df38 <USB_EPStartXfer+0x12a2>
 800deec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800defa:	b29b      	uxth	r3, r3
 800defc:	461a      	mov	r2, r3
 800defe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800df02:	4413      	add	r3, r2
 800df04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800df08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	00da      	lsls	r2, r3, #3
 800df16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800df1a:	4413      	add	r3, r2
 800df1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800df24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	b29a      	uxth	r2, r3
 800df32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800df38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69db      	ldr	r3, [r3, #28]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8218 	beq.w	800e37a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800df4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4413      	add	r3, r2
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800df6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800df6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df72:	2b00      	cmp	r3, #0
 800df74:	d005      	beq.n	800df82 <USB_EPStartXfer+0x12ec>
 800df76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800df7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10d      	bne.n	800df9e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800df82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800df86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f040 81f5 	bne.w	800e37a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800df90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800df94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f040 81ee 	bne.w	800e37a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800df9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dfc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfc4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dfc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	441a      	add	r2, r3
 800dfe2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dfe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	8013      	strh	r3, [r2, #0]
 800dffa:	e1be      	b.n	800e37a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	78db      	ldrb	r3, [r3, #3]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	f040 81b4 	bne.w	800e376 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e00e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	699a      	ldr	r2, [r3, #24]
 800e01a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e01e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	429a      	cmp	r2, r3
 800e028:	d917      	bls.n	800e05a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e02a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e02e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e04a:	1ad2      	subs	r2, r2, r3
 800e04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	619a      	str	r2, [r3, #24]
 800e058:	e00e      	b.n	800e078 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e06a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e06e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2200      	movs	r2, #0
 800e076:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	785b      	ldrb	r3, [r3, #1]
 800e084:	2b00      	cmp	r3, #0
 800e086:	f040 8085 	bne.w	800e194 <USB_EPStartXfer+0x14fe>
 800e08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e08e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e09c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	00da      	lsls	r2, r3, #3
 800e0c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e0d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0e2:	801a      	strh	r2, [r3, #0]
 800e0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10c      	bne.n	800e106 <USB_EPStartXfer+0x1470>
 800e0ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e102:	801a      	strh	r2, [r3, #0]
 800e104:	e077      	b.n	800e1f6 <USB_EPStartXfer+0x1560>
 800e106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e10a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e10c:	d81e      	bhi.n	800e14c <USB_EPStartXfer+0x14b6>
 800e10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e112:	085b      	lsrs	r3, r3, #1
 800e114:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	2b00      	cmp	r3, #0
 800e122:	d004      	beq.n	800e12e <USB_EPStartXfer+0x1498>
 800e124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e128:	3301      	adds	r3, #1
 800e12a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e12e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	b29a      	uxth	r2, r3
 800e136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	029b      	lsls	r3, r3, #10
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4313      	orrs	r3, r2
 800e142:	b29a      	uxth	r2, r3
 800e144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e148:	801a      	strh	r2, [r3, #0]
 800e14a:	e054      	b.n	800e1f6 <USB_EPStartXfer+0x1560>
 800e14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e150:	095b      	lsrs	r3, r3, #5
 800e152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e15a:	f003 031f 	and.w	r3, r3, #31
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d104      	bne.n	800e16c <USB_EPStartXfer+0x14d6>
 800e162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e166:	3b01      	subs	r3, #1
 800e168:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e16c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	b29a      	uxth	r2, r3
 800e174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e178:	b29b      	uxth	r3, r3
 800e17a:	029b      	lsls	r3, r3, #10
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	4313      	orrs	r3, r2
 800e180:	b29b      	uxth	r3, r3
 800e182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e190:	801a      	strh	r2, [r3, #0]
 800e192:	e030      	b.n	800e1f6 <USB_EPStartXfer+0x1560>
 800e194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	785b      	ldrb	r3, [r3, #1]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d128      	bne.n	800e1f6 <USB_EPStartXfer+0x1560>
 800e1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1c8:	4413      	add	r3, r2
 800e1ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	00da      	lsls	r2, r3, #3
 800e1dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e1f4:	801a      	strh	r2, [r3, #0]
 800e1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	785b      	ldrb	r3, [r3, #1]
 800e210:	2b00      	cmp	r3, #0
 800e212:	f040 8085 	bne.w	800e320 <USB_EPStartXfer+0x168a>
 800e216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e21a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e232:	b29b      	uxth	r3, r3
 800e234:	461a      	mov	r2, r3
 800e236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e23a:	4413      	add	r3, r2
 800e23c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	00da      	lsls	r2, r3, #3
 800e24e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e252:	4413      	add	r3, r2
 800e254:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e25c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	b29b      	uxth	r3, r3
 800e264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e268:	b29a      	uxth	r2, r3
 800e26a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e26e:	801a      	strh	r2, [r3, #0]
 800e270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10c      	bne.n	800e292 <USB_EPStartXfer+0x15fc>
 800e278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e288:	b29a      	uxth	r2, r3
 800e28a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e28e:	801a      	strh	r2, [r3, #0]
 800e290:	e073      	b.n	800e37a <USB_EPStartXfer+0x16e4>
 800e292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e296:	2b3e      	cmp	r3, #62	@ 0x3e
 800e298:	d81e      	bhi.n	800e2d8 <USB_EPStartXfer+0x1642>
 800e29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e29e:	085b      	lsrs	r3, r3, #1
 800e2a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <USB_EPStartXfer+0x1624>
 800e2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e2ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	029b      	lsls	r3, r3, #10
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e2d4:	801a      	strh	r2, [r3, #0]
 800e2d6:	e050      	b.n	800e37a <USB_EPStartXfer+0x16e4>
 800e2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2dc:	095b      	lsrs	r3, r3, #5
 800e2de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2e6:	f003 031f 	and.w	r3, r3, #31
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d104      	bne.n	800e2f8 <USB_EPStartXfer+0x1662>
 800e2ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e2f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e2fc:	881b      	ldrh	r3, [r3, #0]
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e304:	b29b      	uxth	r3, r3
 800e306:	029b      	lsls	r3, r3, #10
 800e308:	b29b      	uxth	r3, r3
 800e30a:	4313      	orrs	r3, r2
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e316:	b29a      	uxth	r2, r3
 800e318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e31c:	801a      	strh	r2, [r3, #0]
 800e31e:	e02c      	b.n	800e37a <USB_EPStartXfer+0x16e4>
 800e320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	785b      	ldrb	r3, [r3, #1]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d124      	bne.n	800e37a <USB_EPStartXfer+0x16e4>
 800e330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e33e:	b29b      	uxth	r3, r3
 800e340:	461a      	mov	r2, r3
 800e342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e346:	4413      	add	r3, r2
 800e348:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	00da      	lsls	r2, r3, #3
 800e35a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e35e:	4413      	add	r3, r2
 800e360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e372:	801a      	strh	r2, [r3, #0]
 800e374:	e001      	b.n	800e37a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	e03a      	b.n	800e3f0 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4413      	add	r3, r2
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	b29b      	uxth	r3, r3
 800e398:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e39c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e3a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e3ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e3b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e3b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	441a      	add	r2, r3
 800e3d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b085      	sub	sp, #20
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	785b      	ldrb	r3, [r3, #1]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d020      	beq.n	800e44e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e41e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e422:	81bb      	strh	r3, [r7, #12]
 800e424:	89bb      	ldrh	r3, [r7, #12]
 800e426:	f083 0310 	eor.w	r3, r3, #16
 800e42a:	81bb      	strh	r3, [r7, #12]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	441a      	add	r2, r3
 800e436:	89bb      	ldrh	r3, [r7, #12]
 800e438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e43c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e448:	b29b      	uxth	r3, r3
 800e44a:	8013      	strh	r3, [r2, #0]
 800e44c:	e01f      	b.n	800e48e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e464:	81fb      	strh	r3, [r7, #14]
 800e466:	89fb      	ldrh	r3, [r7, #14]
 800e468:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e46c:	81fb      	strh	r3, [r7, #14]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	441a      	add	r2, r3
 800e478:	89fb      	ldrh	r3, [r7, #14]
 800e47a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e47e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3714      	adds	r7, #20
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b087      	sub	sp, #28
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	7b1b      	ldrb	r3, [r3, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f040 809d 	bne.w	800e5ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	785b      	ldrb	r3, [r3, #1]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d04c      	beq.n	800e552 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	823b      	strh	r3, [r7, #16]
 800e4c6:	8a3b      	ldrh	r3, [r7, #16]
 800e4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d01b      	beq.n	800e508 <USB_EPClearStall+0x6c>
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	881b      	ldrh	r3, [r3, #0]
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4e6:	81fb      	strh	r3, [r7, #14]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	441a      	add	r2, r3
 800e4f2:	89fb      	ldrh	r3, [r7, #14]
 800e4f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e500:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e504:	b29b      	uxth	r3, r3
 800e506:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	78db      	ldrb	r3, [r3, #3]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d06c      	beq.n	800e5ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e526:	81bb      	strh	r3, [r7, #12]
 800e528:	89bb      	ldrh	r3, [r7, #12]
 800e52a:	f083 0320 	eor.w	r3, r3, #32
 800e52e:	81bb      	strh	r3, [r7, #12]
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	441a      	add	r2, r3
 800e53a:	89bb      	ldrh	r3, [r7, #12]
 800e53c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	8013      	strh	r3, [r2, #0]
 800e550:	e04b      	b.n	800e5ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	82fb      	strh	r3, [r7, #22]
 800e560:	8afb      	ldrh	r3, [r7, #22]
 800e562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e566:	2b00      	cmp	r3, #0
 800e568:	d01b      	beq.n	800e5a2 <USB_EPClearStall+0x106>
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	b29b      	uxth	r3, r3
 800e578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e57c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e580:	82bb      	strh	r3, [r7, #20]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	441a      	add	r2, r3
 800e58c:	8abb      	ldrh	r3, [r7, #20]
 800e58e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e59a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e5b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5b8:	827b      	strh	r3, [r7, #18]
 800e5ba:	8a7b      	ldrh	r3, [r7, #18]
 800e5bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e5c0:	827b      	strh	r3, [r7, #18]
 800e5c2:	8a7b      	ldrh	r3, [r7, #18]
 800e5c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e5c8:	827b      	strh	r3, [r7, #18]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	441a      	add	r2, r3
 800e5d4:	8a7b      	ldrh	r3, [r7, #18]
 800e5d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	371c      	adds	r7, #28
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e604:	78fb      	ldrb	r3, [r7, #3]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d103      	bne.n	800e612 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2280      	movs	r2, #128	@ 0x80
 800e60e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e62e:	b29b      	uxth	r3, r3
 800e630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr

0800e64e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e64e:	b480      	push	{r7}
 800e650:	b085      	sub	sp, #20
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e660:	68fb      	ldr	r3, [r7, #12]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3714      	adds	r7, #20
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e66e:	b480      	push	{r7}
 800e670:	b08b      	sub	sp, #44	@ 0x2c
 800e672:	af00      	add	r7, sp, #0
 800e674:	60f8      	str	r0, [r7, #12]
 800e676:	60b9      	str	r1, [r7, #8]
 800e678:	4611      	mov	r1, r2
 800e67a:	461a      	mov	r2, r3
 800e67c:	460b      	mov	r3, r1
 800e67e:	80fb      	strh	r3, [r7, #6]
 800e680:	4613      	mov	r3, r2
 800e682:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e684:	88bb      	ldrh	r3, [r7, #4]
 800e686:	3301      	adds	r3, #1
 800e688:	085b      	lsrs	r3, r3, #1
 800e68a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e694:	88fa      	ldrh	r2, [r7, #6]
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	4413      	add	r3, r2
 800e69a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e69e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6a4:	e01c      	b.n	800e6e0 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	b21b      	sxth	r3, r3
 800e6b4:	021b      	lsls	r3, r3, #8
 800e6b6:	b21a      	sxth	r2, r3
 800e6b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	b21b      	sxth	r3, r3
 800e6c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	8a7a      	ldrh	r2, [r7, #18]
 800e6c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	3302      	adds	r3, #2
 800e6cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1df      	bne.n	800e6a6 <USB_WritePMA+0x38>
  }
}
 800e6e6:	bf00      	nop
 800e6e8:	bf00      	nop
 800e6ea:	372c      	adds	r7, #44	@ 0x2c
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b08b      	sub	sp, #44	@ 0x2c
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	4611      	mov	r1, r2
 800e700:	461a      	mov	r2, r3
 800e702:	460b      	mov	r3, r1
 800e704:	80fb      	strh	r3, [r7, #6]
 800e706:	4613      	mov	r3, r2
 800e708:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e70a:	88bb      	ldrh	r3, [r7, #4]
 800e70c:	085b      	lsrs	r3, r3, #1
 800e70e:	b29b      	uxth	r3, r3
 800e710:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e71a:	88fa      	ldrh	r2, [r7, #6]
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	4413      	add	r3, r2
 800e720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e724:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	627b      	str	r3, [r7, #36]	@ 0x24
 800e72a:	e018      	b.n	800e75e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	b29b      	uxth	r3, r3
 800e732:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	3302      	adds	r3, #2
 800e738:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	3301      	adds	r3, #1
 800e746:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	0a1b      	lsrs	r3, r3, #8
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	3301      	adds	r3, #1
 800e756:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	3b01      	subs	r3, #1
 800e75c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1e3      	bne.n	800e72c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e764:	88bb      	ldrh	r3, [r7, #4]
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d007      	beq.n	800e780 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e770:	6a3b      	ldr	r3, [r7, #32]
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	b29b      	uxth	r3, r3
 800e776:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	701a      	strb	r2, [r3, #0]
  }
}
 800e780:	bf00      	nop
 800e782:	372c      	adds	r7, #44	@ 0x2c
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	460b      	mov	r3, r1
 800e796:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e798:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e79c:	f002 fb52 	bl	8010e44 <USBD_static_malloc>
 800e7a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d109      	bne.n	800e7bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	32b0      	adds	r2, #176	@ 0xb0
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	e0d4      	b.n	800e966 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e7bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f002 fc40 	bl	8011048 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	32b0      	adds	r2, #176	@ 0xb0
 800e7d2:	68f9      	ldr	r1, [r7, #12]
 800e7d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	32b0      	adds	r2, #176	@ 0xb0
 800e7e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	7c1b      	ldrb	r3, [r3, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d138      	bne.n	800e866 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e7f4:	4b5e      	ldr	r3, [pc, #376]	@ (800e970 <USBD_CDC_Init+0x1e4>)
 800e7f6:	7819      	ldrb	r1, [r3, #0]
 800e7f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e7fc:	2202      	movs	r2, #2
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f002 f9f1 	bl	8010be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e804:	4b5a      	ldr	r3, [pc, #360]	@ (800e970 <USBD_CDC_Init+0x1e4>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f003 020f 	and.w	r2, r3, #15
 800e80c:	6879      	ldr	r1, [r7, #4]
 800e80e:	4613      	mov	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	440b      	add	r3, r1
 800e818:	3324      	adds	r3, #36	@ 0x24
 800e81a:	2201      	movs	r2, #1
 800e81c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e81e:	4b55      	ldr	r3, [pc, #340]	@ (800e974 <USBD_CDC_Init+0x1e8>)
 800e820:	7819      	ldrb	r1, [r3, #0]
 800e822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e826:	2202      	movs	r2, #2
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f002 f9dc 	bl	8010be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e82e:	4b51      	ldr	r3, [pc, #324]	@ (800e974 <USBD_CDC_Init+0x1e8>)
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	f003 020f 	and.w	r2, r3, #15
 800e836:	6879      	ldr	r1, [r7, #4]
 800e838:	4613      	mov	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	440b      	add	r3, r1
 800e842:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e846:	2201      	movs	r2, #1
 800e848:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e84a:	4b4b      	ldr	r3, [pc, #300]	@ (800e978 <USBD_CDC_Init+0x1ec>)
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	f003 020f 	and.w	r2, r3, #15
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	440b      	add	r3, r1
 800e85e:	3326      	adds	r3, #38	@ 0x26
 800e860:	2210      	movs	r2, #16
 800e862:	801a      	strh	r2, [r3, #0]
 800e864:	e035      	b.n	800e8d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e866:	4b42      	ldr	r3, [pc, #264]	@ (800e970 <USBD_CDC_Init+0x1e4>)
 800e868:	7819      	ldrb	r1, [r3, #0]
 800e86a:	2340      	movs	r3, #64	@ 0x40
 800e86c:	2202      	movs	r2, #2
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f002 f9b9 	bl	8010be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e874:	4b3e      	ldr	r3, [pc, #248]	@ (800e970 <USBD_CDC_Init+0x1e4>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	f003 020f 	and.w	r2, r3, #15
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4613      	mov	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	440b      	add	r3, r1
 800e888:	3324      	adds	r3, #36	@ 0x24
 800e88a:	2201      	movs	r2, #1
 800e88c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e88e:	4b39      	ldr	r3, [pc, #228]	@ (800e974 <USBD_CDC_Init+0x1e8>)
 800e890:	7819      	ldrb	r1, [r3, #0]
 800e892:	2340      	movs	r3, #64	@ 0x40
 800e894:	2202      	movs	r2, #2
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f002 f9a5 	bl	8010be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e89c:	4b35      	ldr	r3, [pc, #212]	@ (800e974 <USBD_CDC_Init+0x1e8>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f003 020f 	and.w	r2, r3, #15
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	4413      	add	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	440b      	add	r3, r1
 800e8b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e8b8:	4b2f      	ldr	r3, [pc, #188]	@ (800e978 <USBD_CDC_Init+0x1ec>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	f003 020f 	and.w	r2, r3, #15
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3326      	adds	r3, #38	@ 0x26
 800e8ce:	2210      	movs	r2, #16
 800e8d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e8d2:	4b29      	ldr	r3, [pc, #164]	@ (800e978 <USBD_CDC_Init+0x1ec>)
 800e8d4:	7819      	ldrb	r1, [r3, #0]
 800e8d6:	2308      	movs	r3, #8
 800e8d8:	2203      	movs	r2, #3
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f002 f983 	bl	8010be6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e8e0:	4b25      	ldr	r3, [pc, #148]	@ (800e978 <USBD_CDC_Init+0x1ec>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	f003 020f 	and.w	r2, r3, #15
 800e8e8:	6879      	ldr	r1, [r7, #4]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4413      	add	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	440b      	add	r3, r1
 800e8f4:	3324      	adds	r3, #36	@ 0x24
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	33b0      	adds	r3, #176	@ 0xb0
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2200      	movs	r2, #0
 800e91a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2200      	movs	r2, #0
 800e922:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e930:	2302      	movs	r3, #2
 800e932:	e018      	b.n	800e966 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	7c1b      	ldrb	r3, [r3, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10a      	bne.n	800e952 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e93c:	4b0d      	ldr	r3, [pc, #52]	@ (800e974 <USBD_CDC_Init+0x1e8>)
 800e93e:	7819      	ldrb	r1, [r3, #0]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f002 fa3a 	bl	8010dc4 <USBD_LL_PrepareReceive>
 800e950:	e008      	b.n	800e964 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e952:	4b08      	ldr	r3, [pc, #32]	@ (800e974 <USBD_CDC_Init+0x1e8>)
 800e954:	7819      	ldrb	r1, [r3, #0]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e95c:	2340      	movs	r3, #64	@ 0x40
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f002 fa30 	bl	8010dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	200000af 	.word	0x200000af
 800e974:	200000b0 	.word	0x200000b0
 800e978:	200000b1 	.word	0x200000b1

0800e97c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e988:	4b3a      	ldr	r3, [pc, #232]	@ (800ea74 <USBD_CDC_DeInit+0xf8>)
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	4619      	mov	r1, r3
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f002 f94f 	bl	8010c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e994:	4b37      	ldr	r3, [pc, #220]	@ (800ea74 <USBD_CDC_DeInit+0xf8>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 020f 	and.w	r2, r3, #15
 800e99c:	6879      	ldr	r1, [r7, #4]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4413      	add	r3, r2
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	440b      	add	r3, r1
 800e9a8:	3324      	adds	r3, #36	@ 0x24
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e9ae:	4b32      	ldr	r3, [pc, #200]	@ (800ea78 <USBD_CDC_DeInit+0xfc>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f002 f93c 	bl	8010c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e9ba:	4b2f      	ldr	r3, [pc, #188]	@ (800ea78 <USBD_CDC_DeInit+0xfc>)
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	f003 020f 	and.w	r2, r3, #15
 800e9c2:	6879      	ldr	r1, [r7, #4]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	4413      	add	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	440b      	add	r3, r1
 800e9ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e9d6:	4b29      	ldr	r3, [pc, #164]	@ (800ea7c <USBD_CDC_DeInit+0x100>)
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f002 f928 	bl	8010c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e9e2:	4b26      	ldr	r3, [pc, #152]	@ (800ea7c <USBD_CDC_DeInit+0x100>)
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	f003 020f 	and.w	r2, r3, #15
 800e9ea:	6879      	ldr	r1, [r7, #4]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	440b      	add	r3, r1
 800e9f6:	3324      	adds	r3, #36	@ 0x24
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e9fc:	4b1f      	ldr	r3, [pc, #124]	@ (800ea7c <USBD_CDC_DeInit+0x100>)
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	f003 020f 	and.w	r2, r3, #15
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	4613      	mov	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4413      	add	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	440b      	add	r3, r1
 800ea10:	3326      	adds	r3, #38	@ 0x26
 800ea12:	2200      	movs	r2, #0
 800ea14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	32b0      	adds	r2, #176	@ 0xb0
 800ea20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d01f      	beq.n	800ea68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	33b0      	adds	r3, #176	@ 0xb0
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4413      	add	r3, r2
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	32b0      	adds	r2, #176	@ 0xb0
 800ea46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f002 fa08 	bl	8010e60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	32b0      	adds	r2, #176	@ 0xb0
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	200000af 	.word	0x200000af
 800ea78:	200000b0 	.word	0x200000b0
 800ea7c:	200000b1 	.word	0x200000b1

0800ea80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	32b0      	adds	r2, #176	@ 0xb0
 800ea94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800eaac:	2303      	movs	r3, #3
 800eaae:	e0bf      	b.n	800ec30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d050      	beq.n	800eb5e <USBD_CDC_Setup+0xde>
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	f040 80af 	bne.w	800ec20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	88db      	ldrh	r3, [r3, #6]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d03a      	beq.n	800eb40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	b25b      	sxtb	r3, r3
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	da1b      	bge.n	800eb0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	33b0      	adds	r3, #176	@ 0xb0
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4413      	add	r3, r2
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800eaea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	88d2      	ldrh	r2, [r2, #6]
 800eaf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	88db      	ldrh	r3, [r3, #6]
 800eaf6:	2b07      	cmp	r3, #7
 800eaf8:	bf28      	it	cs
 800eafa:	2307      	movcs	r3, #7
 800eafc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	89fa      	ldrh	r2, [r7, #14]
 800eb02:	4619      	mov	r1, r3
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f001 fcdf 	bl	80104c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800eb0a:	e090      	b.n	800ec2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	785a      	ldrb	r2, [r3, #1]
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	88db      	ldrh	r3, [r3, #6]
 800eb1a:	2b3f      	cmp	r3, #63	@ 0x3f
 800eb1c:	d803      	bhi.n	800eb26 <USBD_CDC_Setup+0xa6>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	88db      	ldrh	r3, [r3, #6]
 800eb22:	b2da      	uxtb	r2, r3
 800eb24:	e000      	b.n	800eb28 <USBD_CDC_Setup+0xa8>
 800eb26:	2240      	movs	r2, #64	@ 0x40
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800eb2e:	6939      	ldr	r1, [r7, #16]
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800eb36:	461a      	mov	r2, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f001 fcf1 	bl	8010520 <USBD_CtlPrepareRx>
      break;
 800eb3e:	e076      	b.n	800ec2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	33b0      	adds	r3, #176	@ 0xb0
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	4413      	add	r3, r2
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	683a      	ldr	r2, [r7, #0]
 800eb54:	7850      	ldrb	r0, [r2, #1]
 800eb56:	2200      	movs	r2, #0
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	4798      	blx	r3
      break;
 800eb5c:	e067      	b.n	800ec2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	785b      	ldrb	r3, [r3, #1]
 800eb62:	2b0b      	cmp	r3, #11
 800eb64:	d851      	bhi.n	800ec0a <USBD_CDC_Setup+0x18a>
 800eb66:	a201      	add	r2, pc, #4	@ (adr r2, 800eb6c <USBD_CDC_Setup+0xec>)
 800eb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb6c:	0800eb9d 	.word	0x0800eb9d
 800eb70:	0800ec19 	.word	0x0800ec19
 800eb74:	0800ec0b 	.word	0x0800ec0b
 800eb78:	0800ec0b 	.word	0x0800ec0b
 800eb7c:	0800ec0b 	.word	0x0800ec0b
 800eb80:	0800ec0b 	.word	0x0800ec0b
 800eb84:	0800ec0b 	.word	0x0800ec0b
 800eb88:	0800ec0b 	.word	0x0800ec0b
 800eb8c:	0800ec0b 	.word	0x0800ec0b
 800eb90:	0800ec0b 	.word	0x0800ec0b
 800eb94:	0800ebc7 	.word	0x0800ebc7
 800eb98:	0800ebf1 	.word	0x0800ebf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b03      	cmp	r3, #3
 800eba6:	d107      	bne.n	800ebb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eba8:	f107 030a 	add.w	r3, r7, #10
 800ebac:	2202      	movs	r2, #2
 800ebae:	4619      	mov	r1, r3
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f001 fc89 	bl	80104c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebb6:	e032      	b.n	800ec1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f001 fc13 	bl	80103e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	75fb      	strb	r3, [r7, #23]
          break;
 800ebc4:	e02b      	b.n	800ec1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d107      	bne.n	800ebe2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ebd2:	f107 030d 	add.w	r3, r7, #13
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f001 fc74 	bl	80104c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebe0:	e01d      	b.n	800ec1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f001 fbfe 	bl	80103e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ebea:	2303      	movs	r3, #3
 800ebec:	75fb      	strb	r3, [r7, #23]
          break;
 800ebee:	e016      	b.n	800ec1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	2b03      	cmp	r3, #3
 800ebfa:	d00f      	beq.n	800ec1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f001 fbf1 	bl	80103e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec04:	2303      	movs	r3, #3
 800ec06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ec08:	e008      	b.n	800ec1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f001 fbea 	bl	80103e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ec12:	2303      	movs	r3, #3
 800ec14:	75fb      	strb	r3, [r7, #23]
          break;
 800ec16:	e002      	b.n	800ec1e <USBD_CDC_Setup+0x19e>
          break;
 800ec18:	bf00      	nop
 800ec1a:	e008      	b.n	800ec2e <USBD_CDC_Setup+0x1ae>
          break;
 800ec1c:	bf00      	nop
      }
      break;
 800ec1e:	e006      	b.n	800ec2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f001 fbdf 	bl	80103e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ec2c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	460b      	mov	r3, r1
 800ec42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	32b0      	adds	r2, #176	@ 0xb0
 800ec56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	e065      	b.n	800ed2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	32b0      	adds	r2, #176	@ 0xb0
 800ec6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ec72:	78fb      	ldrb	r3, [r7, #3]
 800ec74:	f003 020f 	and.w	r2, r3, #15
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	4413      	add	r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	440b      	add	r3, r1
 800ec84:	3318      	adds	r3, #24
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d02f      	beq.n	800ecec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	f003 020f 	and.w	r2, r3, #15
 800ec92:	6879      	ldr	r1, [r7, #4]
 800ec94:	4613      	mov	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	440b      	add	r3, r1
 800ec9e:	3318      	adds	r3, #24
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	78fb      	ldrb	r3, [r7, #3]
 800eca4:	f003 010f 	and.w	r1, r3, #15
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	440b      	add	r3, r1
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	4403      	add	r3, r0
 800ecb4:	3320      	adds	r3, #32
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	fbb2 f1f3 	udiv	r1, r2, r3
 800ecbc:	fb01 f303 	mul.w	r3, r1, r3
 800ecc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d112      	bne.n	800ecec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ecc6:	78fb      	ldrb	r3, [r7, #3]
 800ecc8:	f003 020f 	and.w	r2, r3, #15
 800eccc:	6879      	ldr	r1, [r7, #4]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4413      	add	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	440b      	add	r3, r1
 800ecd8:	3318      	adds	r3, #24
 800ecda:	2200      	movs	r2, #0
 800ecdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ecde:	78f9      	ldrb	r1, [r7, #3]
 800ece0:	2300      	movs	r3, #0
 800ece2:	2200      	movs	r2, #0
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f002 f84c 	bl	8010d82 <USBD_LL_Transmit>
 800ecea:	e01f      	b.n	800ed2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	33b0      	adds	r3, #176	@ 0xb0
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4413      	add	r3, r2
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d010      	beq.n	800ed2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	33b0      	adds	r3, #176	@ 0xb0
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	691b      	ldr	r3, [r3, #16]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ed28:	78fa      	ldrb	r2, [r7, #3]
 800ed2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
 800ed3e:	460b      	mov	r3, r1
 800ed40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	32b0      	adds	r2, #176	@ 0xb0
 800ed4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	32b0      	adds	r2, #176	@ 0xb0
 800ed5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d101      	bne.n	800ed68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ed64:	2303      	movs	r3, #3
 800ed66:	e01a      	b.n	800ed9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ed68:	78fb      	ldrb	r3, [r7, #3]
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f002 f84a 	bl	8010e06 <USBD_LL_GetRxDataSize>
 800ed72:	4602      	mov	r2, r0
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	33b0      	adds	r3, #176	@ 0xb0
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b084      	sub	sp, #16
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	32b0      	adds	r2, #176	@ 0xb0
 800edb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d101      	bne.n	800edc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e024      	b.n	800ee12 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	33b0      	adds	r3, #176	@ 0xb0
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	4413      	add	r3, r2
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d019      	beq.n	800ee10 <USBD_CDC_EP0_RxReady+0x6a>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ede2:	2bff      	cmp	r3, #255	@ 0xff
 800ede4:	d014      	beq.n	800ee10 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	33b0      	adds	r3, #176	@ 0xb0
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4413      	add	r3, r2
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800edfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ee06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	22ff      	movs	r2, #255	@ 0xff
 800ee0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ee10:	2300      	movs	r3, #0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
	...

0800ee1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee24:	2182      	movs	r1, #130	@ 0x82
 800ee26:	4818      	ldr	r0, [pc, #96]	@ (800ee88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee28:	f000 fc7d 	bl	800f726 <USBD_GetEpDesc>
 800ee2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee2e:	2101      	movs	r1, #1
 800ee30:	4815      	ldr	r0, [pc, #84]	@ (800ee88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee32:	f000 fc78 	bl	800f726 <USBD_GetEpDesc>
 800ee36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ee38:	2181      	movs	r1, #129	@ 0x81
 800ee3a:	4813      	ldr	r0, [pc, #76]	@ (800ee88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee3c:	f000 fc73 	bl	800f726 <USBD_GetEpDesc>
 800ee40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d002      	beq.n	800ee4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	2210      	movs	r2, #16
 800ee4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d006      	beq.n	800ee62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee5c:	711a      	strb	r2, [r3, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d006      	beq.n	800ee76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee70:	711a      	strb	r2, [r3, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2243      	movs	r2, #67	@ 0x43
 800ee7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ee7c:	4b02      	ldr	r3, [pc, #8]	@ (800ee88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3718      	adds	r7, #24
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	2000006c 	.word	0x2000006c

0800ee8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee94:	2182      	movs	r1, #130	@ 0x82
 800ee96:	4818      	ldr	r0, [pc, #96]	@ (800eef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ee98:	f000 fc45 	bl	800f726 <USBD_GetEpDesc>
 800ee9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee9e:	2101      	movs	r1, #1
 800eea0:	4815      	ldr	r0, [pc, #84]	@ (800eef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eea2:	f000 fc40 	bl	800f726 <USBD_GetEpDesc>
 800eea6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eea8:	2181      	movs	r1, #129	@ 0x81
 800eeaa:	4813      	ldr	r0, [pc, #76]	@ (800eef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eeac:	f000 fc3b 	bl	800f726 <USBD_GetEpDesc>
 800eeb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	2210      	movs	r2, #16
 800eebc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d006      	beq.n	800eed2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	2200      	movs	r2, #0
 800eec8:	711a      	strb	r2, [r3, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f042 0202 	orr.w	r2, r2, #2
 800eed0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d006      	beq.n	800eee6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	711a      	strb	r2, [r3, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	f042 0202 	orr.w	r2, r2, #2
 800eee4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2243      	movs	r2, #67	@ 0x43
 800eeea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eeec:	4b02      	ldr	r3, [pc, #8]	@ (800eef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3718      	adds	r7, #24
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	2000006c 	.word	0x2000006c

0800eefc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ef04:	2182      	movs	r1, #130	@ 0x82
 800ef06:	4818      	ldr	r0, [pc, #96]	@ (800ef68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef08:	f000 fc0d 	bl	800f726 <USBD_GetEpDesc>
 800ef0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ef0e:	2101      	movs	r1, #1
 800ef10:	4815      	ldr	r0, [pc, #84]	@ (800ef68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef12:	f000 fc08 	bl	800f726 <USBD_GetEpDesc>
 800ef16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ef18:	2181      	movs	r1, #129	@ 0x81
 800ef1a:	4813      	ldr	r0, [pc, #76]	@ (800ef68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef1c:	f000 fc03 	bl	800f726 <USBD_GetEpDesc>
 800ef20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	2210      	movs	r2, #16
 800ef2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d006      	beq.n	800ef42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	2200      	movs	r2, #0
 800ef38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef3c:	711a      	strb	r2, [r3, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d006      	beq.n	800ef56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef50:	711a      	strb	r2, [r3, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2243      	movs	r2, #67	@ 0x43
 800ef5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ef5c:	4b02      	ldr	r3, [pc, #8]	@ (800ef68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3718      	adds	r7, #24
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	2000006c 	.word	0x2000006c

0800ef6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	220a      	movs	r2, #10
 800ef78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ef7a:	4b03      	ldr	r3, [pc, #12]	@ (800ef88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	20000028 	.word	0x20000028

0800ef8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	e009      	b.n	800efb4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	33b0      	adds	r3, #176	@ 0xb0
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b087      	sub	sp, #28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	32b0      	adds	r2, #176	@ 0xb0
 800efd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efda:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d101      	bne.n	800efe6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e008      	b.n	800eff8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	371c      	adds	r7, #28
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	32b0      	adds	r2, #176	@ 0xb0
 800f018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f024:	2303      	movs	r3, #3
 800f026:	e004      	b.n	800f032 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3714      	adds	r7, #20
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr
	...

0800f040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	32b0      	adds	r2, #176	@ 0xb0
 800f052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f056:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	32b0      	adds	r2, #176	@ 0xb0
 800f062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d101      	bne.n	800f06e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f06a:	2303      	movs	r3, #3
 800f06c:	e018      	b.n	800f0a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	7c1b      	ldrb	r3, [r3, #16]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10a      	bne.n	800f08c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f076:	4b0c      	ldr	r3, [pc, #48]	@ (800f0a8 <USBD_CDC_ReceivePacket+0x68>)
 800f078:	7819      	ldrb	r1, [r3, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f001 fe9d 	bl	8010dc4 <USBD_LL_PrepareReceive>
 800f08a:	e008      	b.n	800f09e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f08c:	4b06      	ldr	r3, [pc, #24]	@ (800f0a8 <USBD_CDC_ReceivePacket+0x68>)
 800f08e:	7819      	ldrb	r1, [r3, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f096:	2340      	movs	r3, #64	@ 0x40
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f001 fe93 	bl	8010dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f09e:	2300      	movs	r3, #0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	200000b0 	.word	0x200000b0

0800f0ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	e01f      	b.n	800f104 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d003      	beq.n	800f0ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	79fa      	ldrb	r2, [r7, #7]
 800f0f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f001 fd21 	bl	8010b40 <USBD_LL_Init>
 800f0fe:	4603      	mov	r3, r0
 800f100:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f102:	7dfb      	ldrb	r3, [r7, #23]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f116:	2300      	movs	r3, #0
 800f118:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f120:	2303      	movs	r3, #3
 800f122:	e025      	b.n	800f170 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	32ae      	adds	r2, #174	@ 0xae
 800f136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00f      	beq.n	800f160 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	32ae      	adds	r2, #174	@ 0xae
 800f14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f150:	f107 020e 	add.w	r2, r7, #14
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
 800f158:	4602      	mov	r2, r0
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f166:	1c5a      	adds	r2, r3, #1
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f001 fd15 	bl	8010bb0 <USBD_LL_Start>
 800f186:	4603      	mov	r3, r0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f198:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b084      	sub	sp, #16
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d009      	beq.n	800f1d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	78fa      	ldrb	r2, [r7, #3]
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	4798      	blx	r3
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b084      	sub	sp, #16
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	78fa      	ldrb	r2, [r7, #3]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	4798      	blx	r3
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f204:	2303      	movs	r3, #3
 800f206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f208:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f222:	6839      	ldr	r1, [r7, #0]
 800f224:	4618      	mov	r0, r3
 800f226:	f001 f8a4 	bl	8010372 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2201      	movs	r2, #1
 800f22e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f238:	461a      	mov	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f246:	f003 031f 	and.w	r3, r3, #31
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d01a      	beq.n	800f284 <USBD_LL_SetupStage+0x72>
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d822      	bhi.n	800f298 <USBD_LL_SetupStage+0x86>
 800f252:	2b00      	cmp	r3, #0
 800f254:	d002      	beq.n	800f25c <USBD_LL_SetupStage+0x4a>
 800f256:	2b01      	cmp	r3, #1
 800f258:	d00a      	beq.n	800f270 <USBD_LL_SetupStage+0x5e>
 800f25a:	e01d      	b.n	800f298 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fad1 	bl	800f80c <USBD_StdDevReq>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73fb      	strb	r3, [r7, #15]
      break;
 800f26e:	e020      	b.n	800f2b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f276:	4619      	mov	r1, r3
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fb39 	bl	800f8f0 <USBD_StdItfReq>
 800f27e:	4603      	mov	r3, r0
 800f280:	73fb      	strb	r3, [r7, #15]
      break;
 800f282:	e016      	b.n	800f2b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 fb9b 	bl	800f9c8 <USBD_StdEPReq>
 800f292:	4603      	mov	r3, r0
 800f294:	73fb      	strb	r3, [r7, #15]
      break;
 800f296:	e00c      	b.n	800f2b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f29e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f001 fce2 	bl	8010c70 <USBD_LL_StallEP>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f2b0:	bf00      	nop
  }

  return ret;
 800f2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f2ce:	7afb      	ldrb	r3, [r7, #11]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d16e      	bne.n	800f3b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f2da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	f040 8098 	bne.w	800f418 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	689a      	ldr	r2, [r3, #8]
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d913      	bls.n	800f31c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	689a      	ldr	r2, [r3, #8]
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	1ad2      	subs	r2, r2, r3
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	68da      	ldr	r2, [r3, #12]
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	4293      	cmp	r3, r2
 800f30c:	bf28      	it	cs
 800f30e:	4613      	movcs	r3, r2
 800f310:	461a      	mov	r2, r3
 800f312:	6879      	ldr	r1, [r7, #4]
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f001 f920 	bl	801055a <USBD_CtlContinueRx>
 800f31a:	e07d      	b.n	800f418 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f322:	f003 031f 	and.w	r3, r3, #31
 800f326:	2b02      	cmp	r3, #2
 800f328:	d014      	beq.n	800f354 <USBD_LL_DataOutStage+0x98>
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d81d      	bhi.n	800f36a <USBD_LL_DataOutStage+0xae>
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d002      	beq.n	800f338 <USBD_LL_DataOutStage+0x7c>
 800f332:	2b01      	cmp	r3, #1
 800f334:	d003      	beq.n	800f33e <USBD_LL_DataOutStage+0x82>
 800f336:	e018      	b.n	800f36a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f338:	2300      	movs	r3, #0
 800f33a:	75bb      	strb	r3, [r7, #22]
            break;
 800f33c:	e018      	b.n	800f370 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f344:	b2db      	uxtb	r3, r3
 800f346:	4619      	mov	r1, r3
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f000 f9d2 	bl	800f6f2 <USBD_CoreFindIF>
 800f34e:	4603      	mov	r3, r0
 800f350:	75bb      	strb	r3, [r7, #22]
            break;
 800f352:	e00d      	b.n	800f370 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	4619      	mov	r1, r3
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f000 f9d4 	bl	800f70c <USBD_CoreFindEP>
 800f364:	4603      	mov	r3, r0
 800f366:	75bb      	strb	r3, [r7, #22]
            break;
 800f368:	e002      	b.n	800f370 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f36a:	2300      	movs	r3, #0
 800f36c:	75bb      	strb	r3, [r7, #22]
            break;
 800f36e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f370:	7dbb      	ldrb	r3, [r7, #22]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d119      	bne.n	800f3aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d113      	bne.n	800f3aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f382:	7dba      	ldrb	r2, [r7, #22]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	32ae      	adds	r2, #174	@ 0xae
 800f388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d00b      	beq.n	800f3aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f392:	7dba      	ldrb	r2, [r7, #22]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f39a:	7dba      	ldrb	r2, [r7, #22]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	32ae      	adds	r2, #174	@ 0xae
 800f3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f001 f8e6 	bl	801057c <USBD_CtlSendStatus>
 800f3b0:	e032      	b.n	800f418 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f3b2:	7afb      	ldrb	r3, [r7, #11]
 800f3b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f000 f9a5 	bl	800f70c <USBD_CoreFindEP>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3c6:	7dbb      	ldrb	r3, [r7, #22]
 800f3c8:	2bff      	cmp	r3, #255	@ 0xff
 800f3ca:	d025      	beq.n	800f418 <USBD_LL_DataOutStage+0x15c>
 800f3cc:	7dbb      	ldrb	r3, [r7, #22]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d122      	bne.n	800f418 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	2b03      	cmp	r3, #3
 800f3dc:	d117      	bne.n	800f40e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f3de:	7dba      	ldrb	r2, [r7, #22]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	32ae      	adds	r2, #174	@ 0xae
 800f3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3e8:	699b      	ldr	r3, [r3, #24]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d00f      	beq.n	800f40e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f3ee:	7dba      	ldrb	r2, [r7, #22]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f3f6:	7dba      	ldrb	r2, [r7, #22]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	32ae      	adds	r2, #174	@ 0xae
 800f3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f400:	699b      	ldr	r3, [r3, #24]
 800f402:	7afa      	ldrb	r2, [r7, #11]
 800f404:	4611      	mov	r1, r2
 800f406:	68f8      	ldr	r0, [r7, #12]
 800f408:	4798      	blx	r3
 800f40a:	4603      	mov	r3, r0
 800f40c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f40e:	7dfb      	ldrb	r3, [r7, #23]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f414:	7dfb      	ldrb	r3, [r7, #23]
 800f416:	e000      	b.n	800f41a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3718      	adds	r7, #24
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b086      	sub	sp, #24
 800f426:	af00      	add	r7, sp, #0
 800f428:	60f8      	str	r0, [r7, #12]
 800f42a:	460b      	mov	r3, r1
 800f42c:	607a      	str	r2, [r7, #4]
 800f42e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f430:	7afb      	ldrb	r3, [r7, #11]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d16f      	bne.n	800f516 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3314      	adds	r3, #20
 800f43a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f442:	2b02      	cmp	r3, #2
 800f444:	d15a      	bne.n	800f4fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	689a      	ldr	r2, [r3, #8]
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d914      	bls.n	800f47c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	689a      	ldr	r2, [r3, #8]
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	1ad2      	subs	r2, r2, r3
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	689b      	ldr	r3, [r3, #8]
 800f464:	461a      	mov	r2, r3
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f001 f848 	bl	80104fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f46e:	2300      	movs	r3, #0
 800f470:	2200      	movs	r2, #0
 800f472:	2100      	movs	r1, #0
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f001 fca5 	bl	8010dc4 <USBD_LL_PrepareReceive>
 800f47a:	e03f      	b.n	800f4fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	68da      	ldr	r2, [r3, #12]
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	429a      	cmp	r2, r3
 800f486:	d11c      	bne.n	800f4c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f490:	429a      	cmp	r2, r3
 800f492:	d316      	bcc.n	800f4c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	685a      	ldr	r2, [r3, #4]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d20f      	bcs.n	800f4c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	68f8      	ldr	r0, [r7, #12]
 800f4a8:	f001 f829 	bl	80104fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f001 fc82 	bl	8010dc4 <USBD_LL_PrepareReceive>
 800f4c0:	e01c      	b.n	800f4fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d10f      	bne.n	800f4ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d009      	beq.n	800f4ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4ee:	2180      	movs	r1, #128	@ 0x80
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f001 fbbd 	bl	8010c70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f4f6:	68f8      	ldr	r0, [r7, #12]
 800f4f8:	f001 f853 	bl	80105a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d03a      	beq.n	800f57c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff fe42 	bl	800f190 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f514:	e032      	b.n	800f57c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f516:	7afb      	ldrb	r3, [r7, #11]
 800f518:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	4619      	mov	r1, r3
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f000 f8f3 	bl	800f70c <USBD_CoreFindEP>
 800f526:	4603      	mov	r3, r0
 800f528:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	2bff      	cmp	r3, #255	@ 0xff
 800f52e:	d025      	beq.n	800f57c <USBD_LL_DataInStage+0x15a>
 800f530:	7dfb      	ldrb	r3, [r7, #23]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d122      	bne.n	800f57c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b03      	cmp	r3, #3
 800f540:	d11c      	bne.n	800f57c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f542:	7dfa      	ldrb	r2, [r7, #23]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	32ae      	adds	r2, #174	@ 0xae
 800f548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f54c:	695b      	ldr	r3, [r3, #20]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d014      	beq.n	800f57c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f552:	7dfa      	ldrb	r2, [r7, #23]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f55a:	7dfa      	ldrb	r2, [r7, #23]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	32ae      	adds	r2, #174	@ 0xae
 800f560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	7afa      	ldrb	r2, [r7, #11]
 800f568:	4611      	mov	r1, r2
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	4798      	blx	r3
 800f56e:	4603      	mov	r3, r0
 800f570:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f572:	7dbb      	ldrb	r3, [r7, #22]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f578:	7dbb      	ldrb	r3, [r7, #22]
 800f57a:	e000      	b.n	800f57e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b084      	sub	sp, #16
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2201      	movs	r2, #1
 800f596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d014      	beq.n	800f5ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00e      	beq.n	800f5ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	6852      	ldr	r2, [r2, #4]
 800f5da:	b2d2      	uxtb	r2, r2
 800f5dc:	4611      	mov	r1, r2
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	4798      	blx	r3
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d001      	beq.n	800f5ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f5e8:	2303      	movs	r3, #3
 800f5ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5ec:	2340      	movs	r3, #64	@ 0x40
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f001 faf7 	bl	8010be6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2240      	movs	r2, #64	@ 0x40
 800f604:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f608:	2340      	movs	r3, #64	@ 0x40
 800f60a:	2200      	movs	r2, #0
 800f60c:	2180      	movs	r1, #128	@ 0x80
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f001 fae9 	bl	8010be6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2240      	movs	r2, #64	@ 0x40
 800f61e:	621a      	str	r2, [r3, #32]

  return ret;
 800f620:	7bfb      	ldrb	r3, [r7, #15]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f62a:	b480      	push	{r7}
 800f62c:	b083      	sub	sp, #12
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	460b      	mov	r3, r1
 800f634:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	78fa      	ldrb	r2, [r7, #3]
 800f63a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b083      	sub	sp, #12
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b04      	cmp	r3, #4
 800f65c:	d006      	beq.n	800f66c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f664:	b2da      	uxtb	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2204      	movs	r2, #4
 800f670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f682:	b480      	push	{r7}
 800f684:	b083      	sub	sp, #12
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b04      	cmp	r3, #4
 800f694:	d106      	bne.n	800f6a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr

0800f6b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b03      	cmp	r3, #3
 800f6c4:	d110      	bne.n	800f6e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00b      	beq.n	800f6e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6d6:	69db      	ldr	r3, [r3, #28]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d005      	beq.n	800f6e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6e2:	69db      	ldr	r3, [r3, #28]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b083      	sub	sp, #12
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f6fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	460b      	mov	r3, r1
 800f716:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f718:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	370c      	adds	r7, #12
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr

0800f726 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b086      	sub	sp, #24
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
 800f72e:	460b      	mov	r3, r1
 800f730:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	885b      	ldrh	r3, [r3, #2]
 800f742:	b29b      	uxth	r3, r3
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	7812      	ldrb	r2, [r2, #0]
 800f748:	4293      	cmp	r3, r2
 800f74a:	d91f      	bls.n	800f78c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f752:	e013      	b.n	800f77c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f754:	f107 030a 	add.w	r3, r7, #10
 800f758:	4619      	mov	r1, r3
 800f75a:	6978      	ldr	r0, [r7, #20]
 800f75c:	f000 f81b 	bl	800f796 <USBD_GetNextDesc>
 800f760:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	785b      	ldrb	r3, [r3, #1]
 800f766:	2b05      	cmp	r3, #5
 800f768:	d108      	bne.n	800f77c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	789b      	ldrb	r3, [r3, #2]
 800f772:	78fa      	ldrb	r2, [r7, #3]
 800f774:	429a      	cmp	r2, r3
 800f776:	d008      	beq.n	800f78a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f778:	2300      	movs	r3, #0
 800f77a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	885b      	ldrh	r3, [r3, #2]
 800f780:	b29a      	uxth	r2, r3
 800f782:	897b      	ldrh	r3, [r7, #10]
 800f784:	429a      	cmp	r2, r3
 800f786:	d8e5      	bhi.n	800f754 <USBD_GetEpDesc+0x2e>
 800f788:	e000      	b.n	800f78c <USBD_GetEpDesc+0x66>
          break;
 800f78a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f78c:	693b      	ldr	r3, [r7, #16]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3718      	adds	r7, #24
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f796:	b480      	push	{r7}
 800f798:	b085      	sub	sp, #20
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
 800f79e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	7812      	ldrb	r2, [r2, #0]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4413      	add	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b087      	sub	sp, #28
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f7ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f7f0:	021b      	lsls	r3, r3, #8
 800f7f2:	b21a      	sxth	r2, r3
 800f7f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	b21b      	sxth	r3, r3
 800f7fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f7fe:	89fb      	ldrh	r3, [r7, #14]
}
 800f800:	4618      	mov	r0, r3
 800f802:	371c      	adds	r7, #28
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f816:	2300      	movs	r3, #0
 800f818:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f822:	2b40      	cmp	r3, #64	@ 0x40
 800f824:	d005      	beq.n	800f832 <USBD_StdDevReq+0x26>
 800f826:	2b40      	cmp	r3, #64	@ 0x40
 800f828:	d857      	bhi.n	800f8da <USBD_StdDevReq+0xce>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00f      	beq.n	800f84e <USBD_StdDevReq+0x42>
 800f82e:	2b20      	cmp	r3, #32
 800f830:	d153      	bne.n	800f8da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	32ae      	adds	r2, #174	@ 0xae
 800f83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	4798      	blx	r3
 800f848:	4603      	mov	r3, r0
 800f84a:	73fb      	strb	r3, [r7, #15]
      break;
 800f84c:	e04a      	b.n	800f8e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	785b      	ldrb	r3, [r3, #1]
 800f852:	2b09      	cmp	r3, #9
 800f854:	d83b      	bhi.n	800f8ce <USBD_StdDevReq+0xc2>
 800f856:	a201      	add	r2, pc, #4	@ (adr r2, 800f85c <USBD_StdDevReq+0x50>)
 800f858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f85c:	0800f8b1 	.word	0x0800f8b1
 800f860:	0800f8c5 	.word	0x0800f8c5
 800f864:	0800f8cf 	.word	0x0800f8cf
 800f868:	0800f8bb 	.word	0x0800f8bb
 800f86c:	0800f8cf 	.word	0x0800f8cf
 800f870:	0800f88f 	.word	0x0800f88f
 800f874:	0800f885 	.word	0x0800f885
 800f878:	0800f8cf 	.word	0x0800f8cf
 800f87c:	0800f8a7 	.word	0x0800f8a7
 800f880:	0800f899 	.word	0x0800f899
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fa3c 	bl	800fd04 <USBD_GetDescriptor>
          break;
 800f88c:	e024      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fbcb 	bl	801002c <USBD_SetAddress>
          break;
 800f896:	e01f      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f898:	6839      	ldr	r1, [r7, #0]
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 fc0a 	bl	80100b4 <USBD_SetConfig>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	73fb      	strb	r3, [r7, #15]
          break;
 800f8a4:	e018      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fcad 	bl	8010208 <USBD_GetConfig>
          break;
 800f8ae:	e013      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f8b0:	6839      	ldr	r1, [r7, #0]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fcde 	bl	8010274 <USBD_GetStatus>
          break;
 800f8b8:	e00e      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 fd0d 	bl	80102dc <USBD_SetFeature>
          break;
 800f8c2:	e009      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 fd31 	bl	801032e <USBD_ClrFeature>
          break;
 800f8cc:	e004      	b.n	800f8d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f8ce:	6839      	ldr	r1, [r7, #0]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fd88 	bl	80103e6 <USBD_CtlError>
          break;
 800f8d6:	bf00      	nop
      }
      break;
 800f8d8:	e004      	b.n	800f8e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 fd82 	bl	80103e6 <USBD_CtlError>
      break;
 800f8e2:	bf00      	nop
  }

  return ret;
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop

0800f8f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f906:	2b40      	cmp	r3, #64	@ 0x40
 800f908:	d005      	beq.n	800f916 <USBD_StdItfReq+0x26>
 800f90a:	2b40      	cmp	r3, #64	@ 0x40
 800f90c:	d852      	bhi.n	800f9b4 <USBD_StdItfReq+0xc4>
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <USBD_StdItfReq+0x26>
 800f912:	2b20      	cmp	r3, #32
 800f914:	d14e      	bne.n	800f9b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	3b01      	subs	r3, #1
 800f920:	2b02      	cmp	r3, #2
 800f922:	d840      	bhi.n	800f9a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	889b      	ldrh	r3, [r3, #4]
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d836      	bhi.n	800f99c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	889b      	ldrh	r3, [r3, #4]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	4619      	mov	r1, r3
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7ff fedb 	bl	800f6f2 <USBD_CoreFindIF>
 800f93c:	4603      	mov	r3, r0
 800f93e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	2bff      	cmp	r3, #255	@ 0xff
 800f944:	d01d      	beq.n	800f982 <USBD_StdItfReq+0x92>
 800f946:	7bbb      	ldrb	r3, [r7, #14]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d11a      	bne.n	800f982 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f94c:	7bba      	ldrb	r2, [r7, #14]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	32ae      	adds	r2, #174	@ 0xae
 800f952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00f      	beq.n	800f97c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f95c:	7bba      	ldrb	r2, [r7, #14]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f964:	7bba      	ldrb	r2, [r7, #14]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	32ae      	adds	r2, #174	@ 0xae
 800f96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	4798      	blx	r3
 800f976:	4603      	mov	r3, r0
 800f978:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f97a:	e004      	b.n	800f986 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f97c:	2303      	movs	r3, #3
 800f97e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f980:	e001      	b.n	800f986 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f982:	2303      	movs	r3, #3
 800f984:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	88db      	ldrh	r3, [r3, #6]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d110      	bne.n	800f9b0 <USBD_StdItfReq+0xc0>
 800f98e:	7bfb      	ldrb	r3, [r7, #15]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10d      	bne.n	800f9b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 fdf1 	bl	801057c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f99a:	e009      	b.n	800f9b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fd21 	bl	80103e6 <USBD_CtlError>
          break;
 800f9a4:	e004      	b.n	800f9b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fd1c 	bl	80103e6 <USBD_CtlError>
          break;
 800f9ae:	e000      	b.n	800f9b2 <USBD_StdItfReq+0xc2>
          break;
 800f9b0:	bf00      	nop
      }
      break;
 800f9b2:	e004      	b.n	800f9be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fd15 	bl	80103e6 <USBD_CtlError>
      break;
 800f9bc:	bf00      	nop
  }

  return ret;
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3710      	adds	r7, #16
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	889b      	ldrh	r3, [r3, #4]
 800f9da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9e4:	2b40      	cmp	r3, #64	@ 0x40
 800f9e6:	d007      	beq.n	800f9f8 <USBD_StdEPReq+0x30>
 800f9e8:	2b40      	cmp	r3, #64	@ 0x40
 800f9ea:	f200 817f 	bhi.w	800fcec <USBD_StdEPReq+0x324>
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d02a      	beq.n	800fa48 <USBD_StdEPReq+0x80>
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	f040 817a 	bne.w	800fcec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f9f8:	7bbb      	ldrb	r3, [r7, #14]
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7ff fe85 	bl	800f70c <USBD_CoreFindEP>
 800fa02:	4603      	mov	r3, r0
 800fa04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa06:	7b7b      	ldrb	r3, [r7, #13]
 800fa08:	2bff      	cmp	r3, #255	@ 0xff
 800fa0a:	f000 8174 	beq.w	800fcf6 <USBD_StdEPReq+0x32e>
 800fa0e:	7b7b      	ldrb	r3, [r7, #13]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f040 8170 	bne.w	800fcf6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fa16:	7b7a      	ldrb	r2, [r7, #13]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fa1e:	7b7a      	ldrb	r2, [r7, #13]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	32ae      	adds	r2, #174	@ 0xae
 800fa24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 8163 	beq.w	800fcf6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fa30:	7b7a      	ldrb	r2, [r7, #13]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	32ae      	adds	r2, #174	@ 0xae
 800fa36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	4798      	blx	r3
 800fa42:	4603      	mov	r3, r0
 800fa44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fa46:	e156      	b.n	800fcf6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	785b      	ldrb	r3, [r3, #1]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d008      	beq.n	800fa62 <USBD_StdEPReq+0x9a>
 800fa50:	2b03      	cmp	r3, #3
 800fa52:	f300 8145 	bgt.w	800fce0 <USBD_StdEPReq+0x318>
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f000 809b 	beq.w	800fb92 <USBD_StdEPReq+0x1ca>
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d03c      	beq.n	800fada <USBD_StdEPReq+0x112>
 800fa60:	e13e      	b.n	800fce0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d002      	beq.n	800fa74 <USBD_StdEPReq+0xac>
 800fa6e:	2b03      	cmp	r3, #3
 800fa70:	d016      	beq.n	800faa0 <USBD_StdEPReq+0xd8>
 800fa72:	e02c      	b.n	800face <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa74:	7bbb      	ldrb	r3, [r7, #14]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00d      	beq.n	800fa96 <USBD_StdEPReq+0xce>
 800fa7a:	7bbb      	ldrb	r3, [r7, #14]
 800fa7c:	2b80      	cmp	r3, #128	@ 0x80
 800fa7e:	d00a      	beq.n	800fa96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa80:	7bbb      	ldrb	r3, [r7, #14]
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f001 f8f3 	bl	8010c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa8a:	2180      	movs	r1, #128	@ 0x80
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f001 f8ef 	bl	8010c70 <USBD_LL_StallEP>
 800fa92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa94:	e020      	b.n	800fad8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fca4 	bl	80103e6 <USBD_CtlError>
              break;
 800fa9e:	e01b      	b.n	800fad8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	885b      	ldrh	r3, [r3, #2]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d10e      	bne.n	800fac6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00b      	beq.n	800fac6 <USBD_StdEPReq+0xfe>
 800faae:	7bbb      	ldrb	r3, [r7, #14]
 800fab0:	2b80      	cmp	r3, #128	@ 0x80
 800fab2:	d008      	beq.n	800fac6 <USBD_StdEPReq+0xfe>
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	88db      	ldrh	r3, [r3, #6]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d104      	bne.n	800fac6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fabc:	7bbb      	ldrb	r3, [r7, #14]
 800fabe:	4619      	mov	r1, r3
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f001 f8d5 	bl	8010c70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 fd58 	bl	801057c <USBD_CtlSendStatus>

              break;
 800facc:	e004      	b.n	800fad8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800face:	6839      	ldr	r1, [r7, #0]
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 fc88 	bl	80103e6 <USBD_CtlError>
              break;
 800fad6:	bf00      	nop
          }
          break;
 800fad8:	e107      	b.n	800fcea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d002      	beq.n	800faec <USBD_StdEPReq+0x124>
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d016      	beq.n	800fb18 <USBD_StdEPReq+0x150>
 800faea:	e04b      	b.n	800fb84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800faec:	7bbb      	ldrb	r3, [r7, #14]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d00d      	beq.n	800fb0e <USBD_StdEPReq+0x146>
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
 800faf4:	2b80      	cmp	r3, #128	@ 0x80
 800faf6:	d00a      	beq.n	800fb0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800faf8:	7bbb      	ldrb	r3, [r7, #14]
 800fafa:	4619      	mov	r1, r3
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f001 f8b7 	bl	8010c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb02:	2180      	movs	r1, #128	@ 0x80
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f001 f8b3 	bl	8010c70 <USBD_LL_StallEP>
 800fb0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fb0c:	e040      	b.n	800fb90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fb0e:	6839      	ldr	r1, [r7, #0]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 fc68 	bl	80103e6 <USBD_CtlError>
              break;
 800fb16:	e03b      	b.n	800fb90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	885b      	ldrh	r3, [r3, #2]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d136      	bne.n	800fb8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fb20:	7bbb      	ldrb	r3, [r7, #14]
 800fb22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d004      	beq.n	800fb34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fb2a:	7bbb      	ldrb	r3, [r7, #14]
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f001 f8bd 	bl	8010cae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fd21 	bl	801057c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fb3a:	7bbb      	ldrb	r3, [r7, #14]
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff fde4 	bl	800f70c <USBD_CoreFindEP>
 800fb44:	4603      	mov	r3, r0
 800fb46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb48:	7b7b      	ldrb	r3, [r7, #13]
 800fb4a:	2bff      	cmp	r3, #255	@ 0xff
 800fb4c:	d01f      	beq.n	800fb8e <USBD_StdEPReq+0x1c6>
 800fb4e:	7b7b      	ldrb	r3, [r7, #13]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d11c      	bne.n	800fb8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fb54:	7b7a      	ldrb	r2, [r7, #13]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fb5c:	7b7a      	ldrb	r2, [r7, #13]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	32ae      	adds	r2, #174	@ 0xae
 800fb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d010      	beq.n	800fb8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb6c:	7b7a      	ldrb	r2, [r7, #13]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	32ae      	adds	r2, #174	@ 0xae
 800fb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	6839      	ldr	r1, [r7, #0]
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	4798      	blx	r3
 800fb7e:	4603      	mov	r3, r0
 800fb80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fb82:	e004      	b.n	800fb8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fc2d 	bl	80103e6 <USBD_CtlError>
              break;
 800fb8c:	e000      	b.n	800fb90 <USBD_StdEPReq+0x1c8>
              break;
 800fb8e:	bf00      	nop
          }
          break;
 800fb90:	e0ab      	b.n	800fcea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d002      	beq.n	800fba4 <USBD_StdEPReq+0x1dc>
 800fb9e:	2b03      	cmp	r3, #3
 800fba0:	d032      	beq.n	800fc08 <USBD_StdEPReq+0x240>
 800fba2:	e097      	b.n	800fcd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d007      	beq.n	800fbba <USBD_StdEPReq+0x1f2>
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	2b80      	cmp	r3, #128	@ 0x80
 800fbae:	d004      	beq.n	800fbba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fc17 	bl	80103e6 <USBD_CtlError>
                break;
 800fbb8:	e091      	b.n	800fcde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	da0b      	bge.n	800fbda <USBD_StdEPReq+0x212>
 800fbc2:	7bbb      	ldrb	r3, [r7, #14]
 800fbc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fbc8:	4613      	mov	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	3310      	adds	r3, #16
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	e00b      	b.n	800fbf2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fbda:	7bbb      	ldrb	r3, [r7, #14]
 800fbdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4413      	add	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	4413      	add	r3, r2
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2202      	movs	r2, #2
 800fbfe:	4619      	mov	r1, r3
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 fc61 	bl	80104c8 <USBD_CtlSendData>
              break;
 800fc06:	e06a      	b.n	800fcde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fc08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	da11      	bge.n	800fc34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc10:	7bbb      	ldrb	r3, [r7, #14]
 800fc12:	f003 020f 	and.w	r2, r3, #15
 800fc16:	6879      	ldr	r1, [r7, #4]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	440b      	add	r3, r1
 800fc22:	3324      	adds	r3, #36	@ 0x24
 800fc24:	881b      	ldrh	r3, [r3, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d117      	bne.n	800fc5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc2a:	6839      	ldr	r1, [r7, #0]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 fbda 	bl	80103e6 <USBD_CtlError>
                  break;
 800fc32:	e054      	b.n	800fcde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
 800fc36:	f003 020f 	and.w	r2, r3, #15
 800fc3a:	6879      	ldr	r1, [r7, #4]
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	4413      	add	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	440b      	add	r3, r1
 800fc46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d104      	bne.n	800fc5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc50:	6839      	ldr	r1, [r7, #0]
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 fbc7 	bl	80103e6 <USBD_CtlError>
                  break;
 800fc58:	e041      	b.n	800fcde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	da0b      	bge.n	800fc7a <USBD_StdEPReq+0x2b2>
 800fc62:	7bbb      	ldrb	r3, [r7, #14]
 800fc64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc68:	4613      	mov	r3, r2
 800fc6a:	009b      	lsls	r3, r3, #2
 800fc6c:	4413      	add	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	3310      	adds	r3, #16
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	4413      	add	r3, r2
 800fc76:	3304      	adds	r3, #4
 800fc78:	e00b      	b.n	800fc92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc7a:	7bbb      	ldrb	r3, [r7, #14]
 800fc7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc80:	4613      	mov	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	4413      	add	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	4413      	add	r3, r2
 800fc90:	3304      	adds	r3, #4
 800fc92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <USBD_StdEPReq+0x2d8>
 800fc9a:	7bbb      	ldrb	r3, [r7, #14]
 800fc9c:	2b80      	cmp	r3, #128	@ 0x80
 800fc9e:	d103      	bne.n	800fca8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	e00e      	b.n	800fcc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fca8:	7bbb      	ldrb	r3, [r7, #14]
 800fcaa:	4619      	mov	r1, r3
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f001 f81d 	bl	8010cec <USBD_LL_IsStallEP>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d003      	beq.n	800fcc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	e002      	b.n	800fcc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2202      	movs	r2, #2
 800fcca:	4619      	mov	r1, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fbfb 	bl	80104c8 <USBD_CtlSendData>
              break;
 800fcd2:	e004      	b.n	800fcde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fb85 	bl	80103e6 <USBD_CtlError>
              break;
 800fcdc:	bf00      	nop
          }
          break;
 800fcde:	e004      	b.n	800fcea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fb7f 	bl	80103e6 <USBD_CtlError>
          break;
 800fce8:	bf00      	nop
      }
      break;
 800fcea:	e005      	b.n	800fcf8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fb79 	bl	80103e6 <USBD_CtlError>
      break;
 800fcf4:	e000      	b.n	800fcf8 <USBD_StdEPReq+0x330>
      break;
 800fcf6:	bf00      	nop
  }

  return ret;
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
	...

0800fd04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fd16:	2300      	movs	r3, #0
 800fd18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	885b      	ldrh	r3, [r3, #2]
 800fd1e:	0a1b      	lsrs	r3, r3, #8
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	3b01      	subs	r3, #1
 800fd24:	2b0e      	cmp	r3, #14
 800fd26:	f200 8152 	bhi.w	800ffce <USBD_GetDescriptor+0x2ca>
 800fd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd30 <USBD_GetDescriptor+0x2c>)
 800fd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd30:	0800fda1 	.word	0x0800fda1
 800fd34:	0800fdb9 	.word	0x0800fdb9
 800fd38:	0800fdf9 	.word	0x0800fdf9
 800fd3c:	0800ffcf 	.word	0x0800ffcf
 800fd40:	0800ffcf 	.word	0x0800ffcf
 800fd44:	0800ff6f 	.word	0x0800ff6f
 800fd48:	0800ff9b 	.word	0x0800ff9b
 800fd4c:	0800ffcf 	.word	0x0800ffcf
 800fd50:	0800ffcf 	.word	0x0800ffcf
 800fd54:	0800ffcf 	.word	0x0800ffcf
 800fd58:	0800ffcf 	.word	0x0800ffcf
 800fd5c:	0800ffcf 	.word	0x0800ffcf
 800fd60:	0800ffcf 	.word	0x0800ffcf
 800fd64:	0800ffcf 	.word	0x0800ffcf
 800fd68:	0800fd6d 	.word	0x0800fd6d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd72:	69db      	ldr	r3, [r3, #28]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00b      	beq.n	800fd90 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd7e:	69db      	ldr	r3, [r3, #28]
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	7c12      	ldrb	r2, [r2, #16]
 800fd84:	f107 0108 	add.w	r1, r7, #8
 800fd88:	4610      	mov	r0, r2
 800fd8a:	4798      	blx	r3
 800fd8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd8e:	e126      	b.n	800ffde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd90:	6839      	ldr	r1, [r7, #0]
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 fb27 	bl	80103e6 <USBD_CtlError>
        err++;
 800fd98:	7afb      	ldrb	r3, [r7, #11]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	72fb      	strb	r3, [r7, #11]
      break;
 800fd9e:	e11e      	b.n	800ffde <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	7c12      	ldrb	r2, [r2, #16]
 800fdac:	f107 0108 	add.w	r1, r7, #8
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	4798      	blx	r3
 800fdb4:	60f8      	str	r0, [r7, #12]
      break;
 800fdb6:	e112      	b.n	800ffde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	7c1b      	ldrb	r3, [r3, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d10d      	bne.n	800fddc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdc8:	f107 0208 	add.w	r2, r7, #8
 800fdcc:	4610      	mov	r0, r2
 800fdce:	4798      	blx	r3
 800fdd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	2202      	movs	r2, #2
 800fdd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fdda:	e100      	b.n	800ffde <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde4:	f107 0208 	add.w	r2, r7, #8
 800fde8:	4610      	mov	r0, r2
 800fdea:	4798      	blx	r3
 800fdec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	2202      	movs	r2, #2
 800fdf4:	701a      	strb	r2, [r3, #0]
      break;
 800fdf6:	e0f2      	b.n	800ffde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	885b      	ldrh	r3, [r3, #2]
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2b05      	cmp	r3, #5
 800fe00:	f200 80ac 	bhi.w	800ff5c <USBD_GetDescriptor+0x258>
 800fe04:	a201      	add	r2, pc, #4	@ (adr r2, 800fe0c <USBD_GetDescriptor+0x108>)
 800fe06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0a:	bf00      	nop
 800fe0c:	0800fe25 	.word	0x0800fe25
 800fe10:	0800fe59 	.word	0x0800fe59
 800fe14:	0800fe8d 	.word	0x0800fe8d
 800fe18:	0800fec1 	.word	0x0800fec1
 800fe1c:	0800fef5 	.word	0x0800fef5
 800fe20:	0800ff29 	.word	0x0800ff29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00b      	beq.n	800fe48 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	7c12      	ldrb	r2, [r2, #16]
 800fe3c:	f107 0108 	add.w	r1, r7, #8
 800fe40:	4610      	mov	r0, r2
 800fe42:	4798      	blx	r3
 800fe44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe46:	e091      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 facb 	bl	80103e6 <USBD_CtlError>
            err++;
 800fe50:	7afb      	ldrb	r3, [r7, #11]
 800fe52:	3301      	adds	r3, #1
 800fe54:	72fb      	strb	r3, [r7, #11]
          break;
 800fe56:	e089      	b.n	800ff6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00b      	beq.n	800fe7c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	7c12      	ldrb	r2, [r2, #16]
 800fe70:	f107 0108 	add.w	r1, r7, #8
 800fe74:	4610      	mov	r0, r2
 800fe76:	4798      	blx	r3
 800fe78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe7a:	e077      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe7c:	6839      	ldr	r1, [r7, #0]
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fab1 	bl	80103e6 <USBD_CtlError>
            err++;
 800fe84:	7afb      	ldrb	r3, [r7, #11]
 800fe86:	3301      	adds	r3, #1
 800fe88:	72fb      	strb	r3, [r7, #11]
          break;
 800fe8a:	e06f      	b.n	800ff6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00b      	beq.n	800feb0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	7c12      	ldrb	r2, [r2, #16]
 800fea4:	f107 0108 	add.w	r1, r7, #8
 800fea8:	4610      	mov	r0, r2
 800feaa:	4798      	blx	r3
 800feac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800feae:	e05d      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800feb0:	6839      	ldr	r1, [r7, #0]
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f000 fa97 	bl	80103e6 <USBD_CtlError>
            err++;
 800feb8:	7afb      	ldrb	r3, [r7, #11]
 800feba:	3301      	adds	r3, #1
 800febc:	72fb      	strb	r3, [r7, #11]
          break;
 800febe:	e055      	b.n	800ff6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00b      	beq.n	800fee4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	7c12      	ldrb	r2, [r2, #16]
 800fed8:	f107 0108 	add.w	r1, r7, #8
 800fedc:	4610      	mov	r0, r2
 800fede:	4798      	blx	r3
 800fee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fee2:	e043      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fee4:	6839      	ldr	r1, [r7, #0]
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 fa7d 	bl	80103e6 <USBD_CtlError>
            err++;
 800feec:	7afb      	ldrb	r3, [r7, #11]
 800feee:	3301      	adds	r3, #1
 800fef0:	72fb      	strb	r3, [r7, #11]
          break;
 800fef2:	e03b      	b.n	800ff6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fefa:	695b      	ldr	r3, [r3, #20]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00b      	beq.n	800ff18 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff06:	695b      	ldr	r3, [r3, #20]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	7c12      	ldrb	r2, [r2, #16]
 800ff0c:	f107 0108 	add.w	r1, r7, #8
 800ff10:	4610      	mov	r0, r2
 800ff12:	4798      	blx	r3
 800ff14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff16:	e029      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 fa63 	bl	80103e6 <USBD_CtlError>
            err++;
 800ff20:	7afb      	ldrb	r3, [r7, #11]
 800ff22:	3301      	adds	r3, #1
 800ff24:	72fb      	strb	r3, [r7, #11]
          break;
 800ff26:	e021      	b.n	800ff6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff2e:	699b      	ldr	r3, [r3, #24]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00b      	beq.n	800ff4c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	7c12      	ldrb	r2, [r2, #16]
 800ff40:	f107 0108 	add.w	r1, r7, #8
 800ff44:	4610      	mov	r0, r2
 800ff46:	4798      	blx	r3
 800ff48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff4a:	e00f      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fa49 	bl	80103e6 <USBD_CtlError>
            err++;
 800ff54:	7afb      	ldrb	r3, [r7, #11]
 800ff56:	3301      	adds	r3, #1
 800ff58:	72fb      	strb	r3, [r7, #11]
          break;
 800ff5a:	e007      	b.n	800ff6c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ff5c:	6839      	ldr	r1, [r7, #0]
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 fa41 	bl	80103e6 <USBD_CtlError>
          err++;
 800ff64:	7afb      	ldrb	r3, [r7, #11]
 800ff66:	3301      	adds	r3, #1
 800ff68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ff6a:	bf00      	nop
      }
      break;
 800ff6c:	e037      	b.n	800ffde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	7c1b      	ldrb	r3, [r3, #16]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d109      	bne.n	800ff8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff7e:	f107 0208 	add.w	r2, r7, #8
 800ff82:	4610      	mov	r0, r2
 800ff84:	4798      	blx	r3
 800ff86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff88:	e029      	b.n	800ffde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fa2a 	bl	80103e6 <USBD_CtlError>
        err++;
 800ff92:	7afb      	ldrb	r3, [r7, #11]
 800ff94:	3301      	adds	r3, #1
 800ff96:	72fb      	strb	r3, [r7, #11]
      break;
 800ff98:	e021      	b.n	800ffde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	7c1b      	ldrb	r3, [r3, #16]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10d      	bne.n	800ffbe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffaa:	f107 0208 	add.w	r2, r7, #8
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4798      	blx	r3
 800ffb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	2207      	movs	r2, #7
 800ffba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffbc:	e00f      	b.n	800ffde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 fa10 	bl	80103e6 <USBD_CtlError>
        err++;
 800ffc6:	7afb      	ldrb	r3, [r7, #11]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	72fb      	strb	r3, [r7, #11]
      break;
 800ffcc:	e007      	b.n	800ffde <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ffce:	6839      	ldr	r1, [r7, #0]
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fa08 	bl	80103e6 <USBD_CtlError>
      err++;
 800ffd6:	7afb      	ldrb	r3, [r7, #11]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	72fb      	strb	r3, [r7, #11]
      break;
 800ffdc:	bf00      	nop
  }

  if (err != 0U)
 800ffde:	7afb      	ldrb	r3, [r7, #11]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d11e      	bne.n	8010022 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	88db      	ldrh	r3, [r3, #6]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d016      	beq.n	801001a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ffec:	893b      	ldrh	r3, [r7, #8]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00e      	beq.n	8010010 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	88da      	ldrh	r2, [r3, #6]
 800fff6:	893b      	ldrh	r3, [r7, #8]
 800fff8:	4293      	cmp	r3, r2
 800fffa:	bf28      	it	cs
 800fffc:	4613      	movcs	r3, r2
 800fffe:	b29b      	uxth	r3, r3
 8010000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010002:	893b      	ldrh	r3, [r7, #8]
 8010004:	461a      	mov	r2, r3
 8010006:	68f9      	ldr	r1, [r7, #12]
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 fa5d 	bl	80104c8 <USBD_CtlSendData>
 801000e:	e009      	b.n	8010024 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f9e7 	bl	80103e6 <USBD_CtlError>
 8010018:	e004      	b.n	8010024 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 faae 	bl	801057c <USBD_CtlSendStatus>
 8010020:	e000      	b.n	8010024 <USBD_GetDescriptor+0x320>
    return;
 8010022:	bf00      	nop
  }
}
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop

0801002c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	889b      	ldrh	r3, [r3, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d131      	bne.n	80100a2 <USBD_SetAddress+0x76>
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	88db      	ldrh	r3, [r3, #6]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d12d      	bne.n	80100a2 <USBD_SetAddress+0x76>
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	885b      	ldrh	r3, [r3, #2]
 801004a:	2b7f      	cmp	r3, #127	@ 0x7f
 801004c:	d829      	bhi.n	80100a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	885b      	ldrh	r3, [r3, #2]
 8010052:	b2db      	uxtb	r3, r3
 8010054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010060:	b2db      	uxtb	r3, r3
 8010062:	2b03      	cmp	r3, #3
 8010064:	d104      	bne.n	8010070 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f9bc 	bl	80103e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801006e:	e01d      	b.n	80100ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	7bfa      	ldrb	r2, [r7, #15]
 8010074:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010078:	7bfb      	ldrb	r3, [r7, #15]
 801007a:	4619      	mov	r1, r3
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fe61 	bl	8010d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 fa7a 	bl	801057c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010088:	7bfb      	ldrb	r3, [r7, #15]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d004      	beq.n	8010098 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2202      	movs	r2, #2
 8010092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010096:	e009      	b.n	80100ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100a0:	e004      	b.n	80100ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f99e 	bl	80103e6 <USBD_CtlError>
  }
}
 80100aa:	bf00      	nop
 80100ac:	bf00      	nop
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100be:	2300      	movs	r3, #0
 80100c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	885b      	ldrh	r3, [r3, #2]
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	4b4e      	ldr	r3, [pc, #312]	@ (8010204 <USBD_SetConfig+0x150>)
 80100ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80100cc:	4b4d      	ldr	r3, [pc, #308]	@ (8010204 <USBD_SetConfig+0x150>)
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d905      	bls.n	80100e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f985 	bl	80103e6 <USBD_CtlError>
    return USBD_FAIL;
 80100dc:	2303      	movs	r3, #3
 80100de:	e08c      	b.n	80101fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b02      	cmp	r3, #2
 80100ea:	d002      	beq.n	80100f2 <USBD_SetConfig+0x3e>
 80100ec:	2b03      	cmp	r3, #3
 80100ee:	d029      	beq.n	8010144 <USBD_SetConfig+0x90>
 80100f0:	e075      	b.n	80101de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80100f2:	4b44      	ldr	r3, [pc, #272]	@ (8010204 <USBD_SetConfig+0x150>)
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d020      	beq.n	801013c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80100fa:	4b42      	ldr	r3, [pc, #264]	@ (8010204 <USBD_SetConfig+0x150>)
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010104:	4b3f      	ldr	r3, [pc, #252]	@ (8010204 <USBD_SetConfig+0x150>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	4619      	mov	r1, r3
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7ff f84b 	bl	800f1a6 <USBD_SetClassConfig>
 8010110:	4603      	mov	r3, r0
 8010112:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010114:	7bfb      	ldrb	r3, [r7, #15]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d008      	beq.n	801012c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801011a:	6839      	ldr	r1, [r7, #0]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 f962 	bl	80103e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2202      	movs	r2, #2
 8010126:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801012a:	e065      	b.n	80101f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 fa25 	bl	801057c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2203      	movs	r2, #3
 8010136:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801013a:	e05d      	b.n	80101f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 fa1d 	bl	801057c <USBD_CtlSendStatus>
      break;
 8010142:	e059      	b.n	80101f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010144:	4b2f      	ldr	r3, [pc, #188]	@ (8010204 <USBD_SetConfig+0x150>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d112      	bne.n	8010172 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2202      	movs	r2, #2
 8010150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010154:	4b2b      	ldr	r3, [pc, #172]	@ (8010204 <USBD_SetConfig+0x150>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	461a      	mov	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801015e:	4b29      	ldr	r3, [pc, #164]	@ (8010204 <USBD_SetConfig+0x150>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	4619      	mov	r1, r3
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff f83a 	bl	800f1de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fa06 	bl	801057c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010170:	e042      	b.n	80101f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010172:	4b24      	ldr	r3, [pc, #144]	@ (8010204 <USBD_SetConfig+0x150>)
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	429a      	cmp	r2, r3
 801017e:	d02a      	beq.n	80101d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	b2db      	uxtb	r3, r3
 8010186:	4619      	mov	r1, r3
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7ff f828 	bl	800f1de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801018e:	4b1d      	ldr	r3, [pc, #116]	@ (8010204 <USBD_SetConfig+0x150>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010198:	4b1a      	ldr	r3, [pc, #104]	@ (8010204 <USBD_SetConfig+0x150>)
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	4619      	mov	r1, r3
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7ff f801 	bl	800f1a6 <USBD_SetClassConfig>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d00f      	beq.n	80101ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80101ae:	6839      	ldr	r1, [r7, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f918 	bl	80103e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	4619      	mov	r1, r3
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff f80d 	bl	800f1de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2202      	movs	r2, #2
 80101c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80101cc:	e014      	b.n	80101f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 f9d4 	bl	801057c <USBD_CtlSendStatus>
      break;
 80101d4:	e010      	b.n	80101f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f9d0 	bl	801057c <USBD_CtlSendStatus>
      break;
 80101dc:	e00c      	b.n	80101f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80101de:	6839      	ldr	r1, [r7, #0]
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 f900 	bl	80103e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101e6:	4b07      	ldr	r3, [pc, #28]	@ (8010204 <USBD_SetConfig+0x150>)
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	4619      	mov	r1, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7fe fff6 	bl	800f1de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80101f2:	2303      	movs	r3, #3
 80101f4:	73fb      	strb	r3, [r7, #15]
      break;
 80101f6:	bf00      	nop
  }

  return ret;
 80101f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	20000804 	.word	0x20000804

08010208 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	88db      	ldrh	r3, [r3, #6]
 8010216:	2b01      	cmp	r3, #1
 8010218:	d004      	beq.n	8010224 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801021a:	6839      	ldr	r1, [r7, #0]
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 f8e2 	bl	80103e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010222:	e023      	b.n	801026c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801022a:	b2db      	uxtb	r3, r3
 801022c:	2b02      	cmp	r3, #2
 801022e:	dc02      	bgt.n	8010236 <USBD_GetConfig+0x2e>
 8010230:	2b00      	cmp	r3, #0
 8010232:	dc03      	bgt.n	801023c <USBD_GetConfig+0x34>
 8010234:	e015      	b.n	8010262 <USBD_GetConfig+0x5a>
 8010236:	2b03      	cmp	r3, #3
 8010238:	d00b      	beq.n	8010252 <USBD_GetConfig+0x4a>
 801023a:	e012      	b.n	8010262 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	3308      	adds	r3, #8
 8010246:	2201      	movs	r2, #1
 8010248:	4619      	mov	r1, r3
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f93c 	bl	80104c8 <USBD_CtlSendData>
        break;
 8010250:	e00c      	b.n	801026c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	3304      	adds	r3, #4
 8010256:	2201      	movs	r2, #1
 8010258:	4619      	mov	r1, r3
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 f934 	bl	80104c8 <USBD_CtlSendData>
        break;
 8010260:	e004      	b.n	801026c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010262:	6839      	ldr	r1, [r7, #0]
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f8be 	bl	80103e6 <USBD_CtlError>
        break;
 801026a:	bf00      	nop
}
 801026c:	bf00      	nop
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010284:	b2db      	uxtb	r3, r3
 8010286:	3b01      	subs	r3, #1
 8010288:	2b02      	cmp	r3, #2
 801028a:	d81e      	bhi.n	80102ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	88db      	ldrh	r3, [r3, #6]
 8010290:	2b02      	cmp	r3, #2
 8010292:	d004      	beq.n	801029e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010294:	6839      	ldr	r1, [r7, #0]
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 f8a5 	bl	80103e6 <USBD_CtlError>
        break;
 801029c:	e01a      	b.n	80102d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d005      	beq.n	80102ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	f043 0202 	orr.w	r2, r3, #2
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	330c      	adds	r3, #12
 80102be:	2202      	movs	r2, #2
 80102c0:	4619      	mov	r1, r3
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f900 	bl	80104c8 <USBD_CtlSendData>
      break;
 80102c8:	e004      	b.n	80102d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80102ca:	6839      	ldr	r1, [r7, #0]
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 f88a 	bl	80103e6 <USBD_CtlError>
      break;
 80102d2:	bf00      	nop
  }
}
 80102d4:	bf00      	nop
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	885b      	ldrh	r3, [r3, #2]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d107      	bne.n	80102fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2201      	movs	r2, #1
 80102f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 f940 	bl	801057c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80102fc:	e013      	b.n	8010326 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	885b      	ldrh	r3, [r3, #2]
 8010302:	2b02      	cmp	r3, #2
 8010304:	d10b      	bne.n	801031e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	889b      	ldrh	r3, [r3, #4]
 801030a:	0a1b      	lsrs	r3, r3, #8
 801030c:	b29b      	uxth	r3, r3
 801030e:	b2da      	uxtb	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f930 	bl	801057c <USBD_CtlSendStatus>
}
 801031c:	e003      	b.n	8010326 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801031e:	6839      	ldr	r1, [r7, #0]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f860 	bl	80103e6 <USBD_CtlError>
}
 8010326:	bf00      	nop
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801033e:	b2db      	uxtb	r3, r3
 8010340:	3b01      	subs	r3, #1
 8010342:	2b02      	cmp	r3, #2
 8010344:	d80b      	bhi.n	801035e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	885b      	ldrh	r3, [r3, #2]
 801034a:	2b01      	cmp	r3, #1
 801034c:	d10c      	bne.n	8010368 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f910 	bl	801057c <USBD_CtlSendStatus>
      }
      break;
 801035c:	e004      	b.n	8010368 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 f840 	bl	80103e6 <USBD_CtlError>
      break;
 8010366:	e000      	b.n	801036a <USBD_ClrFeature+0x3c>
      break;
 8010368:	bf00      	nop
  }
}
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b084      	sub	sp, #16
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	781a      	ldrb	r2, [r3, #0]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	3301      	adds	r3, #1
 801038c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	781a      	ldrb	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	3301      	adds	r3, #1
 801039a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f7ff fa16 	bl	800f7ce <SWAPBYTE>
 80103a2:	4603      	mov	r3, r0
 80103a4:	461a      	mov	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	3301      	adds	r3, #1
 80103ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	3301      	adds	r3, #1
 80103b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f7ff fa09 	bl	800f7ce <SWAPBYTE>
 80103bc:	4603      	mov	r3, r0
 80103be:	461a      	mov	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	3301      	adds	r3, #1
 80103c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	3301      	adds	r3, #1
 80103ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7ff f9fc 	bl	800f7ce <SWAPBYTE>
 80103d6:	4603      	mov	r3, r0
 80103d8:	461a      	mov	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	80da      	strh	r2, [r3, #6]
}
 80103de:	bf00      	nop
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b082      	sub	sp, #8
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
 80103ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103f0:	2180      	movs	r1, #128	@ 0x80
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 fc3c 	bl	8010c70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103f8:	2100      	movs	r1, #0
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 fc38 	bl	8010c70 <USBD_LL_StallEP>
}
 8010400:	bf00      	nop
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010414:	2300      	movs	r3, #0
 8010416:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d036      	beq.n	801048c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010422:	6938      	ldr	r0, [r7, #16]
 8010424:	f000 f836 	bl	8010494 <USBD_GetLen>
 8010428:	4603      	mov	r3, r0
 801042a:	3301      	adds	r3, #1
 801042c:	b29b      	uxth	r3, r3
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	b29a      	uxth	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010436:	7dfb      	ldrb	r3, [r7, #23]
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	4413      	add	r3, r2
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	7812      	ldrb	r2, [r2, #0]
 8010440:	701a      	strb	r2, [r3, #0]
  idx++;
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	3301      	adds	r3, #1
 8010446:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010448:	7dfb      	ldrb	r3, [r7, #23]
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	4413      	add	r3, r2
 801044e:	2203      	movs	r2, #3
 8010450:	701a      	strb	r2, [r3, #0]
  idx++;
 8010452:	7dfb      	ldrb	r3, [r7, #23]
 8010454:	3301      	adds	r3, #1
 8010456:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010458:	e013      	b.n	8010482 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801045a:	7dfb      	ldrb	r3, [r7, #23]
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	4413      	add	r3, r2
 8010460:	693a      	ldr	r2, [r7, #16]
 8010462:	7812      	ldrb	r2, [r2, #0]
 8010464:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	3301      	adds	r3, #1
 801046a:	613b      	str	r3, [r7, #16]
    idx++;
 801046c:	7dfb      	ldrb	r3, [r7, #23]
 801046e:	3301      	adds	r3, #1
 8010470:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	4413      	add	r3, r2
 8010478:	2200      	movs	r2, #0
 801047a:	701a      	strb	r2, [r3, #0]
    idx++;
 801047c:	7dfb      	ldrb	r3, [r7, #23]
 801047e:	3301      	adds	r3, #1
 8010480:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1e7      	bne.n	801045a <USBD_GetString+0x52>
 801048a:	e000      	b.n	801048e <USBD_GetString+0x86>
    return;
 801048c:	bf00      	nop
  }
}
 801048e:	3718      	adds	r7, #24
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801049c:	2300      	movs	r3, #0
 801049e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80104a4:	e005      	b.n	80104b2 <USBD_GetLen+0x1e>
  {
    len++;
 80104a6:	7bfb      	ldrb	r3, [r7, #15]
 80104a8:	3301      	adds	r3, #1
 80104aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	3301      	adds	r3, #1
 80104b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1f5      	bne.n	80104a6 <USBD_GetLen+0x12>
  }

  return len;
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3714      	adds	r7, #20
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2202      	movs	r2, #2
 80104d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	68ba      	ldr	r2, [r7, #8]
 80104ec:	2100      	movs	r1, #0
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f000 fc47 	bl	8010d82 <USBD_LL_Transmit>

  return USBD_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b084      	sub	sp, #16
 8010502:	af00      	add	r7, sp, #0
 8010504:	60f8      	str	r0, [r7, #12]
 8010506:	60b9      	str	r1, [r7, #8]
 8010508:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	2100      	movs	r1, #0
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f000 fc36 	bl	8010d82 <USBD_LL_Transmit>

  return USBD_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3710      	adds	r7, #16
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2203      	movs	r2, #3
 8010530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	2100      	movs	r1, #0
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f000 fc3a 	bl	8010dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b084      	sub	sp, #16
 801055e:	af00      	add	r7, sp, #0
 8010560:	60f8      	str	r0, [r7, #12]
 8010562:	60b9      	str	r1, [r7, #8]
 8010564:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68ba      	ldr	r2, [r7, #8]
 801056a:	2100      	movs	r1, #0
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f000 fc29 	bl	8010dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010572:	2300      	movs	r3, #0
}
 8010574:	4618      	mov	r0, r3
 8010576:	3710      	adds	r7, #16
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2204      	movs	r2, #4
 8010588:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801058c:	2300      	movs	r3, #0
 801058e:	2200      	movs	r2, #0
 8010590:	2100      	movs	r1, #0
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 fbf5 	bl	8010d82 <USBD_LL_Transmit>

  return USBD_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b082      	sub	sp, #8
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2205      	movs	r2, #5
 80105ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80105b2:	2300      	movs	r3, #0
 80105b4:	2200      	movs	r2, #0
 80105b6:	2100      	movs	r1, #0
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 fc03 	bl	8010dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80105cc:	2200      	movs	r2, #0
 80105ce:	4912      	ldr	r1, [pc, #72]	@ (8010618 <MX_USB_Device_Init+0x50>)
 80105d0:	4812      	ldr	r0, [pc, #72]	@ (801061c <MX_USB_Device_Init+0x54>)
 80105d2:	f7fe fd6b 	bl	800f0ac <USBD_Init>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80105dc:	f7f3 f90a 	bl	80037f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80105e0:	490f      	ldr	r1, [pc, #60]	@ (8010620 <MX_USB_Device_Init+0x58>)
 80105e2:	480e      	ldr	r0, [pc, #56]	@ (801061c <MX_USB_Device_Init+0x54>)
 80105e4:	f7fe fd92 	bl	800f10c <USBD_RegisterClass>
 80105e8:	4603      	mov	r3, r0
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80105ee:	f7f3 f901 	bl	80037f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80105f2:	490c      	ldr	r1, [pc, #48]	@ (8010624 <MX_USB_Device_Init+0x5c>)
 80105f4:	4809      	ldr	r0, [pc, #36]	@ (801061c <MX_USB_Device_Init+0x54>)
 80105f6:	f7fe fcc9 	bl	800ef8c <USBD_CDC_RegisterInterface>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d001      	beq.n	8010604 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010600:	f7f3 f8f8 	bl	80037f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010604:	4805      	ldr	r0, [pc, #20]	@ (801061c <MX_USB_Device_Init+0x54>)
 8010606:	f7fe fdb7 	bl	800f178 <USBD_Start>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010610:	f7f3 f8f0 	bl	80037f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010614:	bf00      	nop
 8010616:	bd80      	pop	{r7, pc}
 8010618:	200000c8 	.word	0x200000c8
 801061c:	20000808 	.word	0x20000808
 8010620:	20000034 	.word	0x20000034
 8010624:	200000b4 	.word	0x200000b4

08010628 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801062c:	2200      	movs	r2, #0
 801062e:	4905      	ldr	r1, [pc, #20]	@ (8010644 <CDC_Init_FS+0x1c>)
 8010630:	4805      	ldr	r0, [pc, #20]	@ (8010648 <CDC_Init_FS+0x20>)
 8010632:	f7fe fcc5 	bl	800efc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010636:	4905      	ldr	r1, [pc, #20]	@ (801064c <CDC_Init_FS+0x24>)
 8010638:	4803      	ldr	r0, [pc, #12]	@ (8010648 <CDC_Init_FS+0x20>)
 801063a:	f7fe fce3 	bl	800f004 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801063e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010640:	4618      	mov	r0, r3
 8010642:	bd80      	pop	{r7, pc}
 8010644:	200012e4 	.word	0x200012e4
 8010648:	20000808 	.word	0x20000808
 801064c:	20000ae4 	.word	0x20000ae4

08010650 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010650:	b480      	push	{r7}
 8010652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010654:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010656:	4618      	mov	r0, r3
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	4603      	mov	r3, r0
 8010668:	6039      	str	r1, [r7, #0]
 801066a:	71fb      	strb	r3, [r7, #7]
 801066c:	4613      	mov	r3, r2
 801066e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	2b23      	cmp	r3, #35	@ 0x23
 8010674:	d84a      	bhi.n	801070c <CDC_Control_FS+0xac>
 8010676:	a201      	add	r2, pc, #4	@ (adr r2, 801067c <CDC_Control_FS+0x1c>)
 8010678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801067c:	0801070d 	.word	0x0801070d
 8010680:	0801070d 	.word	0x0801070d
 8010684:	0801070d 	.word	0x0801070d
 8010688:	0801070d 	.word	0x0801070d
 801068c:	0801070d 	.word	0x0801070d
 8010690:	0801070d 	.word	0x0801070d
 8010694:	0801070d 	.word	0x0801070d
 8010698:	0801070d 	.word	0x0801070d
 801069c:	0801070d 	.word	0x0801070d
 80106a0:	0801070d 	.word	0x0801070d
 80106a4:	0801070d 	.word	0x0801070d
 80106a8:	0801070d 	.word	0x0801070d
 80106ac:	0801070d 	.word	0x0801070d
 80106b0:	0801070d 	.word	0x0801070d
 80106b4:	0801070d 	.word	0x0801070d
 80106b8:	0801070d 	.word	0x0801070d
 80106bc:	0801070d 	.word	0x0801070d
 80106c0:	0801070d 	.word	0x0801070d
 80106c4:	0801070d 	.word	0x0801070d
 80106c8:	0801070d 	.word	0x0801070d
 80106cc:	0801070d 	.word	0x0801070d
 80106d0:	0801070d 	.word	0x0801070d
 80106d4:	0801070d 	.word	0x0801070d
 80106d8:	0801070d 	.word	0x0801070d
 80106dc:	0801070d 	.word	0x0801070d
 80106e0:	0801070d 	.word	0x0801070d
 80106e4:	0801070d 	.word	0x0801070d
 80106e8:	0801070d 	.word	0x0801070d
 80106ec:	0801070d 	.word	0x0801070d
 80106f0:	0801070d 	.word	0x0801070d
 80106f4:	0801070d 	.word	0x0801070d
 80106f8:	0801070d 	.word	0x0801070d
 80106fc:	0801070d 	.word	0x0801070d
 8010700:	0801070d 	.word	0x0801070d
 8010704:	0801070d 	.word	0x0801070d
 8010708:	0801070d 	.word	0x0801070d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801070c:	bf00      	nop
  }

  return (USBD_OK);
 801070e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010710:	4618      	mov	r0, r3
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010726:	6879      	ldr	r1, [r7, #4]
 8010728:	4805      	ldr	r0, [pc, #20]	@ (8010740 <CDC_Receive_FS+0x24>)
 801072a:	f7fe fc6b 	bl	800f004 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801072e:	4804      	ldr	r0, [pc, #16]	@ (8010740 <CDC_Receive_FS+0x24>)
 8010730:	f7fe fc86 	bl	800f040 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010734:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010736:	4618      	mov	r0, r3
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	20000808 	.word	0x20000808

08010744 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010744:	b480      	push	{r7}
 8010746:	b087      	sub	sp, #28
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	4613      	mov	r3, r2
 8010750:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010752:	2300      	movs	r3, #0
 8010754:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010756:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801075a:	4618      	mov	r0, r3
 801075c:	371c      	adds	r7, #28
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	4603      	mov	r3, r0
 8010770:	6039      	str	r1, [r7, #0]
 8010772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	2212      	movs	r2, #18
 8010778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801077a:	4b03      	ldr	r3, [pc, #12]	@ (8010788 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801077c:	4618      	mov	r0, r3
 801077e:	370c      	adds	r7, #12
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr
 8010788:	200000e8 	.word	0x200000e8

0801078c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	6039      	str	r1, [r7, #0]
 8010796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	2204      	movs	r2, #4
 801079c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801079e:	4b03      	ldr	r3, [pc, #12]	@ (80107ac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	200000fc 	.word	0x200000fc

080107b0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	6039      	str	r1, [r7, #0]
 80107ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80107bc:	79fb      	ldrb	r3, [r7, #7]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d105      	bne.n	80107ce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80107c2:	683a      	ldr	r2, [r7, #0]
 80107c4:	4907      	ldr	r1, [pc, #28]	@ (80107e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80107c6:	4808      	ldr	r0, [pc, #32]	@ (80107e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80107c8:	f7ff fe1e 	bl	8010408 <USBD_GetString>
 80107cc:	e004      	b.n	80107d8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	4904      	ldr	r1, [pc, #16]	@ (80107e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80107d2:	4805      	ldr	r0, [pc, #20]	@ (80107e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80107d4:	f7ff fe18 	bl	8010408 <USBD_GetString>
  }
  return USBD_StrDesc;
 80107d8:	4b02      	ldr	r3, [pc, #8]	@ (80107e4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20001ae4 	.word	0x20001ae4
 80107e8:	08011574 	.word	0x08011574

080107ec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	4603      	mov	r3, r0
 80107f4:	6039      	str	r1, [r7, #0]
 80107f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80107f8:	683a      	ldr	r2, [r7, #0]
 80107fa:	4904      	ldr	r1, [pc, #16]	@ (801080c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80107fc:	4804      	ldr	r0, [pc, #16]	@ (8010810 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80107fe:	f7ff fe03 	bl	8010408 <USBD_GetString>
  return USBD_StrDesc;
 8010802:	4b02      	ldr	r3, [pc, #8]	@ (801080c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010804:	4618      	mov	r0, r3
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	20001ae4 	.word	0x20001ae4
 8010810:	0801158c 	.word	0x0801158c

08010814 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	6039      	str	r1, [r7, #0]
 801081e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	221a      	movs	r2, #26
 8010824:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010826:	f000 f843 	bl	80108b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801082a:	4b02      	ldr	r3, [pc, #8]	@ (8010834 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	20000100 	.word	0x20000100

08010838 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	6039      	str	r1, [r7, #0]
 8010842:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d105      	bne.n	8010856 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801084a:	683a      	ldr	r2, [r7, #0]
 801084c:	4907      	ldr	r1, [pc, #28]	@ (801086c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801084e:	4808      	ldr	r0, [pc, #32]	@ (8010870 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010850:	f7ff fdda 	bl	8010408 <USBD_GetString>
 8010854:	e004      	b.n	8010860 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010856:	683a      	ldr	r2, [r7, #0]
 8010858:	4904      	ldr	r1, [pc, #16]	@ (801086c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801085a:	4805      	ldr	r0, [pc, #20]	@ (8010870 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801085c:	f7ff fdd4 	bl	8010408 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010860:	4b02      	ldr	r3, [pc, #8]	@ (801086c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010862:	4618      	mov	r0, r3
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	20001ae4 	.word	0x20001ae4
 8010870:	080115a0 	.word	0x080115a0

08010874 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	6039      	str	r1, [r7, #0]
 801087e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010880:	79fb      	ldrb	r3, [r7, #7]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d105      	bne.n	8010892 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	4907      	ldr	r1, [pc, #28]	@ (80108a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801088a:	4808      	ldr	r0, [pc, #32]	@ (80108ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801088c:	f7ff fdbc 	bl	8010408 <USBD_GetString>
 8010890:	e004      	b.n	801089c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	4904      	ldr	r1, [pc, #16]	@ (80108a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010896:	4805      	ldr	r0, [pc, #20]	@ (80108ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010898:	f7ff fdb6 	bl	8010408 <USBD_GetString>
  }
  return USBD_StrDesc;
 801089c:	4b02      	ldr	r3, [pc, #8]	@ (80108a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	20001ae4 	.word	0x20001ae4
 80108ac:	080115ac 	.word	0x080115ac

080108b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80108b6:	4b0f      	ldr	r3, [pc, #60]	@ (80108f4 <Get_SerialNum+0x44>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80108bc:	4b0e      	ldr	r3, [pc, #56]	@ (80108f8 <Get_SerialNum+0x48>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80108c2:	4b0e      	ldr	r3, [pc, #56]	@ (80108fc <Get_SerialNum+0x4c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4413      	add	r3, r2
 80108ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d009      	beq.n	80108ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80108d6:	2208      	movs	r2, #8
 80108d8:	4909      	ldr	r1, [pc, #36]	@ (8010900 <Get_SerialNum+0x50>)
 80108da:	68f8      	ldr	r0, [r7, #12]
 80108dc:	f000 f814 	bl	8010908 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80108e0:	2204      	movs	r2, #4
 80108e2:	4908      	ldr	r1, [pc, #32]	@ (8010904 <Get_SerialNum+0x54>)
 80108e4:	68b8      	ldr	r0, [r7, #8]
 80108e6:	f000 f80f 	bl	8010908 <IntToUnicode>
  }
}
 80108ea:	bf00      	nop
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	0bfa0590 	.word	0x0bfa0590
 80108f8:	0bfa0594 	.word	0x0bfa0594
 80108fc:	0bfa0598 	.word	0x0bfa0598
 8010900:	20000102 	.word	0x20000102
 8010904:	20000112 	.word	0x20000112

08010908 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010908:	b480      	push	{r7}
 801090a:	b087      	sub	sp, #28
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	4613      	mov	r3, r2
 8010914:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010916:	2300      	movs	r3, #0
 8010918:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801091a:	2300      	movs	r3, #0
 801091c:	75fb      	strb	r3, [r7, #23]
 801091e:	e027      	b.n	8010970 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	0f1b      	lsrs	r3, r3, #28
 8010924:	2b09      	cmp	r3, #9
 8010926:	d80b      	bhi.n	8010940 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	0f1b      	lsrs	r3, r3, #28
 801092c:	b2da      	uxtb	r2, r3
 801092e:	7dfb      	ldrb	r3, [r7, #23]
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	4619      	mov	r1, r3
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	440b      	add	r3, r1
 8010938:	3230      	adds	r2, #48	@ 0x30
 801093a:	b2d2      	uxtb	r2, r2
 801093c:	701a      	strb	r2, [r3, #0]
 801093e:	e00a      	b.n	8010956 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	0f1b      	lsrs	r3, r3, #28
 8010944:	b2da      	uxtb	r2, r3
 8010946:	7dfb      	ldrb	r3, [r7, #23]
 8010948:	005b      	lsls	r3, r3, #1
 801094a:	4619      	mov	r1, r3
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	440b      	add	r3, r1
 8010950:	3237      	adds	r2, #55	@ 0x37
 8010952:	b2d2      	uxtb	r2, r2
 8010954:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	011b      	lsls	r3, r3, #4
 801095a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801095c:	7dfb      	ldrb	r3, [r7, #23]
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	3301      	adds	r3, #1
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	4413      	add	r3, r2
 8010966:	2200      	movs	r2, #0
 8010968:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801096a:	7dfb      	ldrb	r3, [r7, #23]
 801096c:	3301      	adds	r3, #1
 801096e:	75fb      	strb	r3, [r7, #23]
 8010970:	7dfa      	ldrb	r2, [r7, #23]
 8010972:	79fb      	ldrb	r3, [r7, #7]
 8010974:	429a      	cmp	r2, r3
 8010976:	d3d3      	bcc.n	8010920 <IntToUnicode+0x18>
  }
}
 8010978:	bf00      	nop
 801097a:	bf00      	nop
 801097c:	371c      	adds	r7, #28
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
	...

08010988 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b08a      	sub	sp, #40	@ 0x28
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010990:	f107 0314 	add.w	r3, r7, #20
 8010994:	2200      	movs	r2, #0
 8010996:	601a      	str	r2, [r3, #0]
 8010998:	605a      	str	r2, [r3, #4]
 801099a:	609a      	str	r2, [r3, #8]
 801099c:	60da      	str	r2, [r3, #12]
 801099e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a1b      	ldr	r2, [pc, #108]	@ (8010a14 <HAL_PCD_MspInit+0x8c>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d130      	bne.n	8010a0c <HAL_PCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_MspInit 0 */
  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109aa:	4b1b      	ldr	r3, [pc, #108]	@ (8010a18 <HAL_PCD_MspInit+0x90>)
 80109ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109ae:	4a1a      	ldr	r2, [pc, #104]	@ (8010a18 <HAL_PCD_MspInit+0x90>)
 80109b0:	f043 0301 	orr.w	r3, r3, #1
 80109b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80109b6:	4b18      	ldr	r3, [pc, #96]	@ (8010a18 <HAL_PCD_MspInit+0x90>)
 80109b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109ba:	f003 0301 	and.w	r3, r3, #1
 80109be:	613b      	str	r3, [r7, #16]
 80109c0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80109c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80109c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109c8:	2302      	movs	r3, #2
 80109ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109cc:	2300      	movs	r3, #0
 80109ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109d0:	2300      	movs	r3, #0
 80109d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80109d4:	230a      	movs	r3, #10
 80109d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109d8:	f107 0314 	add.w	r3, r7, #20
 80109dc:	4619      	mov	r1, r3
 80109de:	480f      	ldr	r0, [pc, #60]	@ (8010a1c <HAL_PCD_MspInit+0x94>)
 80109e0:	f7f5 fee4 	bl	80067ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80109e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010a18 <HAL_PCD_MspInit+0x90>)
 80109e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109e8:	4a0b      	ldr	r2, [pc, #44]	@ (8010a18 <HAL_PCD_MspInit+0x90>)
 80109ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80109ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80109f0:	4b09      	ldr	r3, [pc, #36]	@ (8010a18 <HAL_PCD_MspInit+0x90>)
 80109f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80109f8:	60fb      	str	r3, [r7, #12]
 80109fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 0, 0);
 80109fc:	2200      	movs	r2, #0
 80109fe:	2100      	movs	r1, #0
 8010a00:	2049      	movs	r0, #73	@ 0x49
 8010a02:	f7f5 fac9 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 8010a06:	2049      	movs	r0, #73	@ 0x49
 8010a08:	f7f5 fae0 	bl	8005fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */
  /* USER CODE END USB_MspInit 1 */
  }
}
 8010a0c:	bf00      	nop
 8010a0e:	3728      	adds	r7, #40	@ 0x28
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	4000d400 	.word	0x4000d400
 8010a18:	40021000 	.word	0x40021000
 8010a1c:	42020000 	.word	0x42020000

08010a20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010a34:	4619      	mov	r1, r3
 8010a36:	4610      	mov	r0, r2
 8010a38:	f7fe fbeb 	bl	800f212 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010a3c:	bf00      	nop
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010a56:	78fa      	ldrb	r2, [r7, #3]
 8010a58:	6879      	ldr	r1, [r7, #4]
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	4413      	add	r3, r2
 8010a60:	00db      	lsls	r3, r3, #3
 8010a62:	440b      	add	r3, r1
 8010a64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	78fb      	ldrb	r3, [r7, #3]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	f7fe fc25 	bl	800f2bc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010a72:	bf00      	nop
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b082      	sub	sp, #8
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	460b      	mov	r3, r1
 8010a84:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010a8c:	78fa      	ldrb	r2, [r7, #3]
 8010a8e:	6879      	ldr	r1, [r7, #4]
 8010a90:	4613      	mov	r3, r2
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	440b      	add	r3, r1
 8010a9a:	3324      	adds	r3, #36	@ 0x24
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	78fb      	ldrb	r3, [r7, #3]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	f7fe fcbe 	bl	800f422 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010aa6:	bf00      	nop
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fe fdf8 	bl	800f6b2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010ac2:	bf00      	nop
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b084      	sub	sp, #16
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	795b      	ldrb	r3, [r3, #5]
 8010ada:	2b02      	cmp	r3, #2
 8010adc:	d001      	beq.n	8010ae2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010ade:	f7f2 fe89 	bl	80037f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010ae8:	7bfa      	ldrb	r2, [r7, #15]
 8010aea:	4611      	mov	r1, r2
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fd9c 	bl	800f62a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fe fd44 	bl	800f586 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010afe:	bf00      	nop
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b082      	sub	sp, #8
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fe fd98 	bl	800f64a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010b1a:	bf00      	nop
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b082      	sub	sp, #8
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fe fda6 	bl	800f682 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010b36:	bf00      	nop
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
	...

08010b40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010b48:	4a17      	ldr	r2, [pc, #92]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4a15      	ldr	r2, [pc, #84]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010b58:	f7f7 fd8c 	bl	8008674 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8010b5c:	4b12      	ldr	r3, [pc, #72]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b5e:	4a13      	ldr	r2, [pc, #76]	@ (8010bac <USBD_LL_Init+0x6c>)
 8010b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010b62:	4b11      	ldr	r3, [pc, #68]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b64:	2208      	movs	r2, #8
 8010b66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010b68:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b6a:	2202      	movs	r2, #2
 8010b6c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b70:	2202      	movs	r2, #2
 8010b72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010b74:	4b0c      	ldr	r3, [pc, #48]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b76:	2200      	movs	r2, #0
 8010b78:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010b80:	4b09      	ldr	r3, [pc, #36]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b82:	2200      	movs	r2, #0
 8010b84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010b86:	4b08      	ldr	r3, [pc, #32]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b88:	2200      	movs	r2, #0
 8010b8a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010b8c:	4806      	ldr	r0, [pc, #24]	@ (8010ba8 <USBD_LL_Init+0x68>)
 8010b8e:	f7f6 f807 	bl	8006ba0 <HAL_PCD_Init>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010b98:	f7f2 fe2c 	bl	80037f4 <Error_Handler>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20001ce4 	.word	0x20001ce4
 8010bac:	4000d400 	.word	0x4000d400

08010bb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7f6 f8b8 	bl	8006d3c <HAL_PCD_Start>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bd0:	7bfb      	ldrb	r3, [r7, #15]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f000 f94e 	bl	8010e74 <USBD_Get_USB_Status>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b084      	sub	sp, #16
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	4608      	mov	r0, r1
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	70fb      	strb	r3, [r7, #3]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70bb      	strb	r3, [r7, #2]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010c0e:	78bb      	ldrb	r3, [r7, #2]
 8010c10:	883a      	ldrh	r2, [r7, #0]
 8010c12:	78f9      	ldrb	r1, [r7, #3]
 8010c14:	f7f6 f9ff 	bl	8007016 <HAL_PCD_EP_Open>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f000 f928 	bl	8010e74 <USBD_Get_USB_Status>
 8010c24:	4603      	mov	r3, r0
 8010c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b084      	sub	sp, #16
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c42:	2300      	movs	r3, #0
 8010c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c4c:	78fa      	ldrb	r2, [r7, #3]
 8010c4e:	4611      	mov	r1, r2
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7f6 fa3d 	bl	80070d0 <HAL_PCD_EP_Close>
 8010c56:	4603      	mov	r3, r0
 8010c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c5a:	7bfb      	ldrb	r3, [r7, #15]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f000 f909 	bl	8010e74 <USBD_Get_USB_Status>
 8010c62:	4603      	mov	r3, r0
 8010c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c80:	2300      	movs	r3, #0
 8010c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c8a:	78fa      	ldrb	r2, [r7, #3]
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7f6 fae6 	bl	8007260 <HAL_PCD_EP_SetStall>
 8010c94:	4603      	mov	r3, r0
 8010c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c98:	7bfb      	ldrb	r3, [r7, #15]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 f8ea 	bl	8010e74 <USBD_Get_USB_Status>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3710      	adds	r7, #16
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}

08010cae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b084      	sub	sp, #16
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
 8010cb6:	460b      	mov	r3, r1
 8010cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cc8:	78fa      	ldrb	r2, [r7, #3]
 8010cca:	4611      	mov	r1, r2
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7f6 fb19 	bl	8007304 <HAL_PCD_EP_ClrStall>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cd6:	7bfb      	ldrb	r3, [r7, #15]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 f8cb 	bl	8010e74 <USBD_Get_USB_Status>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3710      	adds	r7, #16
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	da0b      	bge.n	8010d20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010d08:	78fb      	ldrb	r3, [r7, #3]
 8010d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d0e:	68f9      	ldr	r1, [r7, #12]
 8010d10:	4613      	mov	r3, r2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	440b      	add	r3, r1
 8010d1a:	3312      	adds	r3, #18
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	e00b      	b.n	8010d38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d20:	78fb      	ldrb	r3, [r7, #3]
 8010d22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d26:	68f9      	ldr	r1, [r7, #12]
 8010d28:	4613      	mov	r3, r2
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	4413      	add	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	440b      	add	r3, r1
 8010d32:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010d36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3714      	adds	r7, #20
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d50:	2300      	movs	r3, #0
 8010d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d54:	2300      	movs	r3, #0
 8010d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d5e:	78fa      	ldrb	r2, [r7, #3]
 8010d60:	4611      	mov	r1, r2
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f6 f933 	bl	8006fce <HAL_PCD_SetAddress>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d6c:	7bfb      	ldrb	r3, [r7, #15]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 f880 	bl	8010e74 <USBD_Get_USB_Status>
 8010d74:	4603      	mov	r3, r0
 8010d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b086      	sub	sp, #24
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	60f8      	str	r0, [r7, #12]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]
 8010d8e:	460b      	mov	r3, r1
 8010d90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d92:	2300      	movs	r3, #0
 8010d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010da0:	7af9      	ldrb	r1, [r7, #11]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	f7f6 fa24 	bl	80071f2 <HAL_PCD_EP_Transmit>
 8010daa:	4603      	mov	r3, r0
 8010dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f000 f85f 	bl	8010e74 <USBD_Get_USB_Status>
 8010db6:	4603      	mov	r3, r0
 8010db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3718      	adds	r7, #24
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b086      	sub	sp, #24
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	607a      	str	r2, [r7, #4]
 8010dce:	603b      	str	r3, [r7, #0]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010de2:	7af9      	ldrb	r1, [r7, #11]
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	f7f6 f9ba 	bl	8007160 <HAL_PCD_EP_Receive>
 8010dec:	4603      	mov	r3, r0
 8010dee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010df0:	7dfb      	ldrb	r3, [r7, #23]
 8010df2:	4618      	mov	r0, r3
 8010df4:	f000 f83e 	bl	8010e74 <USBD_Get_USB_Status>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3718      	adds	r7, #24
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}

08010e06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b082      	sub	sp, #8
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
 8010e0e:	460b      	mov	r3, r1
 8010e10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010e18:	78fa      	ldrb	r2, [r7, #3]
 8010e1a:	4611      	mov	r1, r2
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f6 f9d0 	bl	80071c2 <HAL_PCD_EP_GetRxCount>
 8010e22:	4603      	mov	r3, r0
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	460b      	mov	r3, r1
 8010e36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  /* USER CODE END LPM_Callback */
}
 8010e38:	bf00      	nop
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010e4c:	4b03      	ldr	r3, [pc, #12]	@ (8010e5c <USBD_static_malloc+0x18>)
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	20001fc0 	.word	0x20001fc0

08010e60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010e68:	bf00      	nop
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	2b03      	cmp	r3, #3
 8010e86:	d817      	bhi.n	8010eb8 <USBD_Get_USB_Status+0x44>
 8010e88:	a201      	add	r2, pc, #4	@ (adr r2, 8010e90 <USBD_Get_USB_Status+0x1c>)
 8010e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e8e:	bf00      	nop
 8010e90:	08010ea1 	.word	0x08010ea1
 8010e94:	08010ea7 	.word	0x08010ea7
 8010e98:	08010ead 	.word	0x08010ead
 8010e9c:	08010eb3 	.word	0x08010eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ea4:	e00b      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8010eaa:	e008      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010eac:	2301      	movs	r3, #1
 8010eae:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb0:	e005      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb6:	e002      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010eb8:	2303      	movs	r3, #3
 8010eba:	73fb      	strb	r3, [r7, #15]
    break;
 8010ebc:	bf00      	nop
  }
  return usb_status;
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <malloc>:
 8010ecc:	4b02      	ldr	r3, [pc, #8]	@ (8010ed8 <malloc+0xc>)
 8010ece:	4601      	mov	r1, r0
 8010ed0:	6818      	ldr	r0, [r3, #0]
 8010ed2:	f000 b82d 	b.w	8010f30 <_malloc_r>
 8010ed6:	bf00      	nop
 8010ed8:	2000011c 	.word	0x2000011c

08010edc <free>:
 8010edc:	4b02      	ldr	r3, [pc, #8]	@ (8010ee8 <free+0xc>)
 8010ede:	4601      	mov	r1, r0
 8010ee0:	6818      	ldr	r0, [r3, #0]
 8010ee2:	f000 b8f5 	b.w	80110d0 <_free_r>
 8010ee6:	bf00      	nop
 8010ee8:	2000011c 	.word	0x2000011c

08010eec <sbrk_aligned>:
 8010eec:	b570      	push	{r4, r5, r6, lr}
 8010eee:	4e0f      	ldr	r6, [pc, #60]	@ (8010f2c <sbrk_aligned+0x40>)
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	6831      	ldr	r1, [r6, #0]
 8010ef6:	b911      	cbnz	r1, 8010efe <sbrk_aligned+0x12>
 8010ef8:	f000 f8ae 	bl	8011058 <_sbrk_r>
 8010efc:	6030      	str	r0, [r6, #0]
 8010efe:	4621      	mov	r1, r4
 8010f00:	4628      	mov	r0, r5
 8010f02:	f000 f8a9 	bl	8011058 <_sbrk_r>
 8010f06:	1c43      	adds	r3, r0, #1
 8010f08:	d103      	bne.n	8010f12 <sbrk_aligned+0x26>
 8010f0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010f0e:	4620      	mov	r0, r4
 8010f10:	bd70      	pop	{r4, r5, r6, pc}
 8010f12:	1cc4      	adds	r4, r0, #3
 8010f14:	f024 0403 	bic.w	r4, r4, #3
 8010f18:	42a0      	cmp	r0, r4
 8010f1a:	d0f8      	beq.n	8010f0e <sbrk_aligned+0x22>
 8010f1c:	1a21      	subs	r1, r4, r0
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f000 f89a 	bl	8011058 <_sbrk_r>
 8010f24:	3001      	adds	r0, #1
 8010f26:	d1f2      	bne.n	8010f0e <sbrk_aligned+0x22>
 8010f28:	e7ef      	b.n	8010f0a <sbrk_aligned+0x1e>
 8010f2a:	bf00      	nop
 8010f2c:	200021e0 	.word	0x200021e0

08010f30 <_malloc_r>:
 8010f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f34:	1ccd      	adds	r5, r1, #3
 8010f36:	4606      	mov	r6, r0
 8010f38:	f025 0503 	bic.w	r5, r5, #3
 8010f3c:	3508      	adds	r5, #8
 8010f3e:	2d0c      	cmp	r5, #12
 8010f40:	bf38      	it	cc
 8010f42:	250c      	movcc	r5, #12
 8010f44:	2d00      	cmp	r5, #0
 8010f46:	db01      	blt.n	8010f4c <_malloc_r+0x1c>
 8010f48:	42a9      	cmp	r1, r5
 8010f4a:	d904      	bls.n	8010f56 <_malloc_r+0x26>
 8010f4c:	230c      	movs	r3, #12
 8010f4e:	6033      	str	r3, [r6, #0]
 8010f50:	2000      	movs	r0, #0
 8010f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801102c <_malloc_r+0xfc>
 8010f5a:	f000 f869 	bl	8011030 <__malloc_lock>
 8010f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010f62:	461c      	mov	r4, r3
 8010f64:	bb44      	cbnz	r4, 8010fb8 <_malloc_r+0x88>
 8010f66:	4629      	mov	r1, r5
 8010f68:	4630      	mov	r0, r6
 8010f6a:	f7ff ffbf 	bl	8010eec <sbrk_aligned>
 8010f6e:	1c43      	adds	r3, r0, #1
 8010f70:	4604      	mov	r4, r0
 8010f72:	d158      	bne.n	8011026 <_malloc_r+0xf6>
 8010f74:	f8d8 4000 	ldr.w	r4, [r8]
 8010f78:	4627      	mov	r7, r4
 8010f7a:	2f00      	cmp	r7, #0
 8010f7c:	d143      	bne.n	8011006 <_malloc_r+0xd6>
 8010f7e:	2c00      	cmp	r4, #0
 8010f80:	d04b      	beq.n	801101a <_malloc_r+0xea>
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	4639      	mov	r1, r7
 8010f86:	4630      	mov	r0, r6
 8010f88:	eb04 0903 	add.w	r9, r4, r3
 8010f8c:	f000 f864 	bl	8011058 <_sbrk_r>
 8010f90:	4581      	cmp	r9, r0
 8010f92:	d142      	bne.n	801101a <_malloc_r+0xea>
 8010f94:	6821      	ldr	r1, [r4, #0]
 8010f96:	4630      	mov	r0, r6
 8010f98:	1a6d      	subs	r5, r5, r1
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	f7ff ffa6 	bl	8010eec <sbrk_aligned>
 8010fa0:	3001      	adds	r0, #1
 8010fa2:	d03a      	beq.n	801101a <_malloc_r+0xea>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	442b      	add	r3, r5
 8010fa8:	6023      	str	r3, [r4, #0]
 8010faa:	f8d8 3000 	ldr.w	r3, [r8]
 8010fae:	685a      	ldr	r2, [r3, #4]
 8010fb0:	bb62      	cbnz	r2, 801100c <_malloc_r+0xdc>
 8010fb2:	f8c8 7000 	str.w	r7, [r8]
 8010fb6:	e00f      	b.n	8010fd8 <_malloc_r+0xa8>
 8010fb8:	6822      	ldr	r2, [r4, #0]
 8010fba:	1b52      	subs	r2, r2, r5
 8010fbc:	d420      	bmi.n	8011000 <_malloc_r+0xd0>
 8010fbe:	2a0b      	cmp	r2, #11
 8010fc0:	d917      	bls.n	8010ff2 <_malloc_r+0xc2>
 8010fc2:	1961      	adds	r1, r4, r5
 8010fc4:	42a3      	cmp	r3, r4
 8010fc6:	6025      	str	r5, [r4, #0]
 8010fc8:	bf18      	it	ne
 8010fca:	6059      	strne	r1, [r3, #4]
 8010fcc:	6863      	ldr	r3, [r4, #4]
 8010fce:	bf08      	it	eq
 8010fd0:	f8c8 1000 	streq.w	r1, [r8]
 8010fd4:	5162      	str	r2, [r4, r5]
 8010fd6:	604b      	str	r3, [r1, #4]
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f000 f82f 	bl	801103c <__malloc_unlock>
 8010fde:	f104 000b 	add.w	r0, r4, #11
 8010fe2:	1d23      	adds	r3, r4, #4
 8010fe4:	f020 0007 	bic.w	r0, r0, #7
 8010fe8:	1ac2      	subs	r2, r0, r3
 8010fea:	bf1c      	itt	ne
 8010fec:	1a1b      	subne	r3, r3, r0
 8010fee:	50a3      	strne	r3, [r4, r2]
 8010ff0:	e7af      	b.n	8010f52 <_malloc_r+0x22>
 8010ff2:	6862      	ldr	r2, [r4, #4]
 8010ff4:	42a3      	cmp	r3, r4
 8010ff6:	bf0c      	ite	eq
 8010ff8:	f8c8 2000 	streq.w	r2, [r8]
 8010ffc:	605a      	strne	r2, [r3, #4]
 8010ffe:	e7eb      	b.n	8010fd8 <_malloc_r+0xa8>
 8011000:	4623      	mov	r3, r4
 8011002:	6864      	ldr	r4, [r4, #4]
 8011004:	e7ae      	b.n	8010f64 <_malloc_r+0x34>
 8011006:	463c      	mov	r4, r7
 8011008:	687f      	ldr	r7, [r7, #4]
 801100a:	e7b6      	b.n	8010f7a <_malloc_r+0x4a>
 801100c:	461a      	mov	r2, r3
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	42a3      	cmp	r3, r4
 8011012:	d1fb      	bne.n	801100c <_malloc_r+0xdc>
 8011014:	2300      	movs	r3, #0
 8011016:	6053      	str	r3, [r2, #4]
 8011018:	e7de      	b.n	8010fd8 <_malloc_r+0xa8>
 801101a:	230c      	movs	r3, #12
 801101c:	4630      	mov	r0, r6
 801101e:	6033      	str	r3, [r6, #0]
 8011020:	f000 f80c 	bl	801103c <__malloc_unlock>
 8011024:	e794      	b.n	8010f50 <_malloc_r+0x20>
 8011026:	6005      	str	r5, [r0, #0]
 8011028:	e7d6      	b.n	8010fd8 <_malloc_r+0xa8>
 801102a:	bf00      	nop
 801102c:	200021e4 	.word	0x200021e4

08011030 <__malloc_lock>:
 8011030:	4801      	ldr	r0, [pc, #4]	@ (8011038 <__malloc_lock+0x8>)
 8011032:	f000 b84b 	b.w	80110cc <__retarget_lock_acquire_recursive>
 8011036:	bf00      	nop
 8011038:	20002324 	.word	0x20002324

0801103c <__malloc_unlock>:
 801103c:	4801      	ldr	r0, [pc, #4]	@ (8011044 <__malloc_unlock+0x8>)
 801103e:	f000 b846 	b.w	80110ce <__retarget_lock_release_recursive>
 8011042:	bf00      	nop
 8011044:	20002324 	.word	0x20002324

08011048 <memset>:
 8011048:	4402      	add	r2, r0
 801104a:	4603      	mov	r3, r0
 801104c:	4293      	cmp	r3, r2
 801104e:	d100      	bne.n	8011052 <memset+0xa>
 8011050:	4770      	bx	lr
 8011052:	f803 1b01 	strb.w	r1, [r3], #1
 8011056:	e7f9      	b.n	801104c <memset+0x4>

08011058 <_sbrk_r>:
 8011058:	b538      	push	{r3, r4, r5, lr}
 801105a:	2300      	movs	r3, #0
 801105c:	4d05      	ldr	r5, [pc, #20]	@ (8011074 <_sbrk_r+0x1c>)
 801105e:	4604      	mov	r4, r0
 8011060:	4608      	mov	r0, r1
 8011062:	602b      	str	r3, [r5, #0]
 8011064:	f7f2 fe16 	bl	8003c94 <_sbrk>
 8011068:	1c43      	adds	r3, r0, #1
 801106a:	d102      	bne.n	8011072 <_sbrk_r+0x1a>
 801106c:	682b      	ldr	r3, [r5, #0]
 801106e:	b103      	cbz	r3, 8011072 <_sbrk_r+0x1a>
 8011070:	6023      	str	r3, [r4, #0]
 8011072:	bd38      	pop	{r3, r4, r5, pc}
 8011074:	20002320 	.word	0x20002320

08011078 <__errno>:
 8011078:	4b01      	ldr	r3, [pc, #4]	@ (8011080 <__errno+0x8>)
 801107a:	6818      	ldr	r0, [r3, #0]
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	2000011c 	.word	0x2000011c

08011084 <__libc_init_array>:
 8011084:	b570      	push	{r4, r5, r6, lr}
 8011086:	4d0d      	ldr	r5, [pc, #52]	@ (80110bc <__libc_init_array+0x38>)
 8011088:	2600      	movs	r6, #0
 801108a:	4c0d      	ldr	r4, [pc, #52]	@ (80110c0 <__libc_init_array+0x3c>)
 801108c:	1b64      	subs	r4, r4, r5
 801108e:	10a4      	asrs	r4, r4, #2
 8011090:	42a6      	cmp	r6, r4
 8011092:	d109      	bne.n	80110a8 <__libc_init_array+0x24>
 8011094:	4d0b      	ldr	r5, [pc, #44]	@ (80110c4 <__libc_init_array+0x40>)
 8011096:	2600      	movs	r6, #0
 8011098:	4c0b      	ldr	r4, [pc, #44]	@ (80110c8 <__libc_init_array+0x44>)
 801109a:	f000 fa5f 	bl	801155c <_init>
 801109e:	1b64      	subs	r4, r4, r5
 80110a0:	10a4      	asrs	r4, r4, #2
 80110a2:	42a6      	cmp	r6, r4
 80110a4:	d105      	bne.n	80110b2 <__libc_init_array+0x2e>
 80110a6:	bd70      	pop	{r4, r5, r6, pc}
 80110a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110ac:	3601      	adds	r6, #1
 80110ae:	4798      	blx	r3
 80110b0:	e7ee      	b.n	8011090 <__libc_init_array+0xc>
 80110b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80110b6:	3601      	adds	r6, #1
 80110b8:	4798      	blx	r3
 80110ba:	e7f2      	b.n	80110a2 <__libc_init_array+0x1e>
 80110bc:	08011818 	.word	0x08011818
 80110c0:	08011818 	.word	0x08011818
 80110c4:	08011818 	.word	0x08011818
 80110c8:	0801181c 	.word	0x0801181c

080110cc <__retarget_lock_acquire_recursive>:
 80110cc:	4770      	bx	lr

080110ce <__retarget_lock_release_recursive>:
 80110ce:	4770      	bx	lr

080110d0 <_free_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4605      	mov	r5, r0
 80110d4:	2900      	cmp	r1, #0
 80110d6:	d041      	beq.n	801115c <_free_r+0x8c>
 80110d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110dc:	1f0c      	subs	r4, r1, #4
 80110de:	2b00      	cmp	r3, #0
 80110e0:	bfb8      	it	lt
 80110e2:	18e4      	addlt	r4, r4, r3
 80110e4:	f7ff ffa4 	bl	8011030 <__malloc_lock>
 80110e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011160 <_free_r+0x90>)
 80110ea:	6813      	ldr	r3, [r2, #0]
 80110ec:	b933      	cbnz	r3, 80110fc <_free_r+0x2c>
 80110ee:	6063      	str	r3, [r4, #4]
 80110f0:	6014      	str	r4, [r2, #0]
 80110f2:	4628      	mov	r0, r5
 80110f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110f8:	f7ff bfa0 	b.w	801103c <__malloc_unlock>
 80110fc:	42a3      	cmp	r3, r4
 80110fe:	d908      	bls.n	8011112 <_free_r+0x42>
 8011100:	6820      	ldr	r0, [r4, #0]
 8011102:	1821      	adds	r1, r4, r0
 8011104:	428b      	cmp	r3, r1
 8011106:	bf01      	itttt	eq
 8011108:	6819      	ldreq	r1, [r3, #0]
 801110a:	685b      	ldreq	r3, [r3, #4]
 801110c:	1809      	addeq	r1, r1, r0
 801110e:	6021      	streq	r1, [r4, #0]
 8011110:	e7ed      	b.n	80110ee <_free_r+0x1e>
 8011112:	461a      	mov	r2, r3
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	b10b      	cbz	r3, 801111c <_free_r+0x4c>
 8011118:	42a3      	cmp	r3, r4
 801111a:	d9fa      	bls.n	8011112 <_free_r+0x42>
 801111c:	6811      	ldr	r1, [r2, #0]
 801111e:	1850      	adds	r0, r2, r1
 8011120:	42a0      	cmp	r0, r4
 8011122:	d10b      	bne.n	801113c <_free_r+0x6c>
 8011124:	6820      	ldr	r0, [r4, #0]
 8011126:	4401      	add	r1, r0
 8011128:	1850      	adds	r0, r2, r1
 801112a:	6011      	str	r1, [r2, #0]
 801112c:	4283      	cmp	r3, r0
 801112e:	d1e0      	bne.n	80110f2 <_free_r+0x22>
 8011130:	6818      	ldr	r0, [r3, #0]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	4408      	add	r0, r1
 8011136:	6053      	str	r3, [r2, #4]
 8011138:	6010      	str	r0, [r2, #0]
 801113a:	e7da      	b.n	80110f2 <_free_r+0x22>
 801113c:	d902      	bls.n	8011144 <_free_r+0x74>
 801113e:	230c      	movs	r3, #12
 8011140:	602b      	str	r3, [r5, #0]
 8011142:	e7d6      	b.n	80110f2 <_free_r+0x22>
 8011144:	6820      	ldr	r0, [r4, #0]
 8011146:	1821      	adds	r1, r4, r0
 8011148:	428b      	cmp	r3, r1
 801114a:	bf02      	ittt	eq
 801114c:	6819      	ldreq	r1, [r3, #0]
 801114e:	685b      	ldreq	r3, [r3, #4]
 8011150:	1809      	addeq	r1, r1, r0
 8011152:	6063      	str	r3, [r4, #4]
 8011154:	bf08      	it	eq
 8011156:	6021      	streq	r1, [r4, #0]
 8011158:	6054      	str	r4, [r2, #4]
 801115a:	e7ca      	b.n	80110f2 <_free_r+0x22>
 801115c:	bd38      	pop	{r3, r4, r5, pc}
 801115e:	bf00      	nop
 8011160:	200021e4 	.word	0x200021e4
 8011164:	00000000 	.word	0x00000000

08011168 <log>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	ec55 4b10 	vmov	r4, r5, d0
 801116e:	ed2d 8b02 	vpush	{d8}
 8011172:	f000 f841 	bl	80111f8 <__ieee754_log>
 8011176:	4622      	mov	r2, r4
 8011178:	462b      	mov	r3, r5
 801117a:	4620      	mov	r0, r4
 801117c:	4629      	mov	r1, r5
 801117e:	eeb0 8a40 	vmov.f32	s16, s0
 8011182:	eef0 8a60 	vmov.f32	s17, s1
 8011186:	f7ef fcad 	bl	8000ae4 <__aeabi_dcmpun>
 801118a:	b998      	cbnz	r0, 80111b4 <log+0x4c>
 801118c:	2200      	movs	r2, #0
 801118e:	2300      	movs	r3, #0
 8011190:	4620      	mov	r0, r4
 8011192:	4629      	mov	r1, r5
 8011194:	f7ef fc9c 	bl	8000ad0 <__aeabi_dcmpgt>
 8011198:	b960      	cbnz	r0, 80111b4 <log+0x4c>
 801119a:	2200      	movs	r2, #0
 801119c:	2300      	movs	r3, #0
 801119e:	4620      	mov	r0, r4
 80111a0:	4629      	mov	r1, r5
 80111a2:	f7ef fc6d 	bl	8000a80 <__aeabi_dcmpeq>
 80111a6:	b160      	cbz	r0, 80111c2 <log+0x5a>
 80111a8:	f7ff ff66 	bl	8011078 <__errno>
 80111ac:	2322      	movs	r3, #34	@ 0x22
 80111ae:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80111d8 <log+0x70>
 80111b2:	6003      	str	r3, [r0, #0]
 80111b4:	eeb0 0a48 	vmov.f32	s0, s16
 80111b8:	eef0 0a68 	vmov.f32	s1, s17
 80111bc:	ecbd 8b02 	vpop	{d8}
 80111c0:	bd38      	pop	{r3, r4, r5, pc}
 80111c2:	f7ff ff59 	bl	8011078 <__errno>
 80111c6:	2321      	movs	r3, #33	@ 0x21
 80111c8:	ecbd 8b02 	vpop	{d8}
 80111cc:	6003      	str	r3, [r0, #0]
 80111ce:	4804      	ldr	r0, [pc, #16]	@ (80111e0 <log+0x78>)
 80111d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111d4:	f000 b808 	b.w	80111e8 <nan>
 80111d8:	00000000 	.word	0x00000000
 80111dc:	fff00000 	.word	0xfff00000
 80111e0:	08011814 	.word	0x08011814
 80111e4:	00000000 	.word	0x00000000

080111e8 <nan>:
 80111e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80111f0 <nan+0x8>
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	00000000 	.word	0x00000000
 80111f4:	7ff80000 	.word	0x7ff80000

080111f8 <__ieee754_log>:
 80111f8:	ec51 0b10 	vmov	r0, r1, d0
 80111fc:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	460d      	mov	r5, r1
 8011206:	b087      	sub	sp, #28
 8011208:	da26      	bge.n	8011258 <__ieee754_log+0x60>
 801120a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801120e:	4602      	mov	r2, r0
 8011210:	4303      	orrs	r3, r0
 8011212:	d10a      	bne.n	801122a <__ieee754_log+0x32>
 8011214:	2200      	movs	r2, #0
 8011216:	2300      	movs	r3, #0
 8011218:	2000      	movs	r0, #0
 801121a:	49cb      	ldr	r1, [pc, #812]	@ (8011548 <__ieee754_log+0x350>)
 801121c:	f7ef faf2 	bl	8000804 <__aeabi_ddiv>
 8011220:	ec41 0b10 	vmov	d0, r0, r1
 8011224:	b007      	add	sp, #28
 8011226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122a:	2900      	cmp	r1, #0
 801122c:	da05      	bge.n	801123a <__ieee754_log+0x42>
 801122e:	460b      	mov	r3, r1
 8011230:	f7ef f806 	bl	8000240 <__aeabi_dsub>
 8011234:	2200      	movs	r2, #0
 8011236:	2300      	movs	r3, #0
 8011238:	e7f0      	b.n	801121c <__ieee754_log+0x24>
 801123a:	4bc4      	ldr	r3, [pc, #784]	@ (801154c <__ieee754_log+0x354>)
 801123c:	2200      	movs	r2, #0
 801123e:	f7ef f9b7 	bl	80005b0 <__aeabi_dmul>
 8011242:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8011246:	460d      	mov	r5, r1
 8011248:	4ac1      	ldr	r2, [pc, #772]	@ (8011550 <__ieee754_log+0x358>)
 801124a:	4295      	cmp	r5, r2
 801124c:	dd06      	ble.n	801125c <__ieee754_log+0x64>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	f7ee fff7 	bl	8000244 <__adddf3>
 8011256:	e7e3      	b.n	8011220 <__ieee754_log+0x28>
 8011258:	2300      	movs	r3, #0
 801125a:	e7f5      	b.n	8011248 <__ieee754_log+0x50>
 801125c:	152c      	asrs	r4, r5, #20
 801125e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011262:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8011266:	441c      	add	r4, r3
 8011268:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801126c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8011270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011274:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8011278:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801127c:	4bb5      	ldr	r3, [pc, #724]	@ (8011554 <__ieee754_log+0x35c>)
 801127e:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8011282:	ea42 0105 	orr.w	r1, r2, r5
 8011286:	2200      	movs	r2, #0
 8011288:	f7ee ffda 	bl	8000240 <__aeabi_dsub>
 801128c:	1cab      	adds	r3, r5, #2
 801128e:	4682      	mov	sl, r0
 8011290:	468b      	mov	fp, r1
 8011292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011296:	2200      	movs	r2, #0
 8011298:	2b02      	cmp	r3, #2
 801129a:	dc53      	bgt.n	8011344 <__ieee754_log+0x14c>
 801129c:	2300      	movs	r3, #0
 801129e:	f7ef fbef 	bl	8000a80 <__aeabi_dcmpeq>
 80112a2:	b1d0      	cbz	r0, 80112da <__ieee754_log+0xe2>
 80112a4:	2c00      	cmp	r4, #0
 80112a6:	f000 8120 	beq.w	80114ea <__ieee754_log+0x2f2>
 80112aa:	4620      	mov	r0, r4
 80112ac:	f7ef f916 	bl	80004dc <__aeabi_i2d>
 80112b0:	4606      	mov	r6, r0
 80112b2:	460f      	mov	r7, r1
 80112b4:	a38e      	add	r3, pc, #568	@ (adr r3, 80114f0 <__ieee754_log+0x2f8>)
 80112b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ba:	f7ef f979 	bl	80005b0 <__aeabi_dmul>
 80112be:	4604      	mov	r4, r0
 80112c0:	460d      	mov	r5, r1
 80112c2:	4630      	mov	r0, r6
 80112c4:	4639      	mov	r1, r7
 80112c6:	a38c      	add	r3, pc, #560	@ (adr r3, 80114f8 <__ieee754_log+0x300>)
 80112c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112cc:	f7ef f970 	bl	80005b0 <__aeabi_dmul>
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	4620      	mov	r0, r4
 80112d6:	4629      	mov	r1, r5
 80112d8:	e7bb      	b.n	8011252 <__ieee754_log+0x5a>
 80112da:	a389      	add	r3, pc, #548	@ (adr r3, 8011500 <__ieee754_log+0x308>)
 80112dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e0:	4650      	mov	r0, sl
 80112e2:	4659      	mov	r1, fp
 80112e4:	f7ef f964 	bl	80005b0 <__aeabi_dmul>
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	2000      	movs	r0, #0
 80112ee:	499a      	ldr	r1, [pc, #616]	@ (8011558 <__ieee754_log+0x360>)
 80112f0:	f7ee ffa6 	bl	8000240 <__aeabi_dsub>
 80112f4:	4606      	mov	r6, r0
 80112f6:	460f      	mov	r7, r1
 80112f8:	4652      	mov	r2, sl
 80112fa:	465b      	mov	r3, fp
 80112fc:	4650      	mov	r0, sl
 80112fe:	4659      	mov	r1, fp
 8011300:	f7ef f956 	bl	80005b0 <__aeabi_dmul>
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	4630      	mov	r0, r6
 801130a:	4639      	mov	r1, r7
 801130c:	f7ef f950 	bl	80005b0 <__aeabi_dmul>
 8011310:	4606      	mov	r6, r0
 8011312:	460f      	mov	r7, r1
 8011314:	b914      	cbnz	r4, 801131c <__ieee754_log+0x124>
 8011316:	4632      	mov	r2, r6
 8011318:	463b      	mov	r3, r7
 801131a:	e0a0      	b.n	801145e <__ieee754_log+0x266>
 801131c:	4620      	mov	r0, r4
 801131e:	f7ef f8dd 	bl	80004dc <__aeabi_i2d>
 8011322:	4680      	mov	r8, r0
 8011324:	4689      	mov	r9, r1
 8011326:	a372      	add	r3, pc, #456	@ (adr r3, 80114f0 <__ieee754_log+0x2f8>)
 8011328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132c:	f7ef f940 	bl	80005b0 <__aeabi_dmul>
 8011330:	4604      	mov	r4, r0
 8011332:	460d      	mov	r5, r1
 8011334:	4640      	mov	r0, r8
 8011336:	4649      	mov	r1, r9
 8011338:	a36f      	add	r3, pc, #444	@ (adr r3, 80114f8 <__ieee754_log+0x300>)
 801133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133e:	f7ef f937 	bl	80005b0 <__aeabi_dmul>
 8011342:	e0a5      	b.n	8011490 <__ieee754_log+0x298>
 8011344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011348:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801134c:	f7ee ff7a 	bl	8000244 <__adddf3>
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	4650      	mov	r0, sl
 8011356:	4659      	mov	r1, fp
 8011358:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801135c:	f7ef fa52 	bl	8000804 <__aeabi_ddiv>
 8011360:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8011364:	3551      	adds	r5, #81	@ 0x51
 8011366:	e9cd 0100 	strd	r0, r1, [sp]
 801136a:	4620      	mov	r0, r4
 801136c:	4335      	orrs	r5, r6
 801136e:	f7ef f8b5 	bl	80004dc <__aeabi_i2d>
 8011372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801137a:	4610      	mov	r0, r2
 801137c:	4619      	mov	r1, r3
 801137e:	f7ef f917 	bl	80005b0 <__aeabi_dmul>
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801138a:	f7ef f911 	bl	80005b0 <__aeabi_dmul>
 801138e:	4680      	mov	r8, r0
 8011390:	4689      	mov	r9, r1
 8011392:	a35d      	add	r3, pc, #372	@ (adr r3, 8011508 <__ieee754_log+0x310>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ef f90a 	bl	80005b0 <__aeabi_dmul>
 801139c:	a35c      	add	r3, pc, #368	@ (adr r3, 8011510 <__ieee754_log+0x318>)
 801139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a2:	f7ee ff4f 	bl	8000244 <__adddf3>
 80113a6:	4642      	mov	r2, r8
 80113a8:	464b      	mov	r3, r9
 80113aa:	f7ef f901 	bl	80005b0 <__aeabi_dmul>
 80113ae:	a35a      	add	r3, pc, #360	@ (adr r3, 8011518 <__ieee754_log+0x320>)
 80113b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b4:	f7ee ff46 	bl	8000244 <__adddf3>
 80113b8:	4642      	mov	r2, r8
 80113ba:	464b      	mov	r3, r9
 80113bc:	f7ef f8f8 	bl	80005b0 <__aeabi_dmul>
 80113c0:	a357      	add	r3, pc, #348	@ (adr r3, 8011520 <__ieee754_log+0x328>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	f7ee ff3d 	bl	8000244 <__adddf3>
 80113ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113ce:	f7ef f8ef 	bl	80005b0 <__aeabi_dmul>
 80113d2:	a355      	add	r3, pc, #340	@ (adr r3, 8011528 <__ieee754_log+0x330>)
 80113d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113dc:	4640      	mov	r0, r8
 80113de:	4649      	mov	r1, r9
 80113e0:	f7ef f8e6 	bl	80005b0 <__aeabi_dmul>
 80113e4:	a352      	add	r3, pc, #328	@ (adr r3, 8011530 <__ieee754_log+0x338>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	f7ee ff2b 	bl	8000244 <__adddf3>
 80113ee:	4642      	mov	r2, r8
 80113f0:	464b      	mov	r3, r9
 80113f2:	f7ef f8dd 	bl	80005b0 <__aeabi_dmul>
 80113f6:	a350      	add	r3, pc, #320	@ (adr r3, 8011538 <__ieee754_log+0x340>)
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	f7ee ff22 	bl	8000244 <__adddf3>
 8011400:	4642      	mov	r2, r8
 8011402:	464b      	mov	r3, r9
 8011404:	f7ef f8d4 	bl	80005b0 <__aeabi_dmul>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011410:	f7ee ff18 	bl	8000244 <__adddf3>
 8011414:	2d00      	cmp	r5, #0
 8011416:	4680      	mov	r8, r0
 8011418:	4689      	mov	r9, r1
 801141a:	dd48      	ble.n	80114ae <__ieee754_log+0x2b6>
 801141c:	2200      	movs	r2, #0
 801141e:	4b4e      	ldr	r3, [pc, #312]	@ (8011558 <__ieee754_log+0x360>)
 8011420:	4650      	mov	r0, sl
 8011422:	4659      	mov	r1, fp
 8011424:	f7ef f8c4 	bl	80005b0 <__aeabi_dmul>
 8011428:	4652      	mov	r2, sl
 801142a:	465b      	mov	r3, fp
 801142c:	f7ef f8c0 	bl	80005b0 <__aeabi_dmul>
 8011430:	4602      	mov	r2, r0
 8011432:	460b      	mov	r3, r1
 8011434:	4606      	mov	r6, r0
 8011436:	460f      	mov	r7, r1
 8011438:	4640      	mov	r0, r8
 801143a:	4649      	mov	r1, r9
 801143c:	f7ee ff02 	bl	8000244 <__adddf3>
 8011440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011444:	f7ef f8b4 	bl	80005b0 <__aeabi_dmul>
 8011448:	4680      	mov	r8, r0
 801144a:	4689      	mov	r9, r1
 801144c:	b964      	cbnz	r4, 8011468 <__ieee754_log+0x270>
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	4630      	mov	r0, r6
 8011454:	4639      	mov	r1, r7
 8011456:	f7ee fef3 	bl	8000240 <__aeabi_dsub>
 801145a:	4602      	mov	r2, r0
 801145c:	460b      	mov	r3, r1
 801145e:	4650      	mov	r0, sl
 8011460:	4659      	mov	r1, fp
 8011462:	f7ee feed 	bl	8000240 <__aeabi_dsub>
 8011466:	e6db      	b.n	8011220 <__ieee754_log+0x28>
 8011468:	a321      	add	r3, pc, #132	@ (adr r3, 80114f0 <__ieee754_log+0x2f8>)
 801146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011472:	f7ef f89d 	bl	80005b0 <__aeabi_dmul>
 8011476:	4604      	mov	r4, r0
 8011478:	460d      	mov	r5, r1
 801147a:	a31f      	add	r3, pc, #124	@ (adr r3, 80114f8 <__ieee754_log+0x300>)
 801147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011484:	f7ef f894 	bl	80005b0 <__aeabi_dmul>
 8011488:	4642      	mov	r2, r8
 801148a:	464b      	mov	r3, r9
 801148c:	f7ee feda 	bl	8000244 <__adddf3>
 8011490:	4602      	mov	r2, r0
 8011492:	460b      	mov	r3, r1
 8011494:	4630      	mov	r0, r6
 8011496:	4639      	mov	r1, r7
 8011498:	f7ee fed2 	bl	8000240 <__aeabi_dsub>
 801149c:	4652      	mov	r2, sl
 801149e:	465b      	mov	r3, fp
 80114a0:	f7ee fece 	bl	8000240 <__aeabi_dsub>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	4620      	mov	r0, r4
 80114aa:	4629      	mov	r1, r5
 80114ac:	e7d9      	b.n	8011462 <__ieee754_log+0x26a>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	4650      	mov	r0, sl
 80114b4:	4659      	mov	r1, fp
 80114b6:	f7ee fec3 	bl	8000240 <__aeabi_dsub>
 80114ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114be:	f7ef f877 	bl	80005b0 <__aeabi_dmul>
 80114c2:	4606      	mov	r6, r0
 80114c4:	460f      	mov	r7, r1
 80114c6:	2c00      	cmp	r4, #0
 80114c8:	f43f af25 	beq.w	8011316 <__ieee754_log+0x11e>
 80114cc:	a308      	add	r3, pc, #32	@ (adr r3, 80114f0 <__ieee754_log+0x2f8>)
 80114ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114d6:	f7ef f86b 	bl	80005b0 <__aeabi_dmul>
 80114da:	4604      	mov	r4, r0
 80114dc:	460d      	mov	r5, r1
 80114de:	a306      	add	r3, pc, #24	@ (adr r3, 80114f8 <__ieee754_log+0x300>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114e8:	e729      	b.n	801133e <__ieee754_log+0x146>
 80114ea:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8011540 <__ieee754_log+0x348>
 80114ee:	e699      	b.n	8011224 <__ieee754_log+0x2c>
 80114f0:	fee00000 	.word	0xfee00000
 80114f4:	3fe62e42 	.word	0x3fe62e42
 80114f8:	35793c76 	.word	0x35793c76
 80114fc:	3dea39ef 	.word	0x3dea39ef
 8011500:	55555555 	.word	0x55555555
 8011504:	3fd55555 	.word	0x3fd55555
 8011508:	df3e5244 	.word	0xdf3e5244
 801150c:	3fc2f112 	.word	0x3fc2f112
 8011510:	96cb03de 	.word	0x96cb03de
 8011514:	3fc74664 	.word	0x3fc74664
 8011518:	94229359 	.word	0x94229359
 801151c:	3fd24924 	.word	0x3fd24924
 8011520:	55555593 	.word	0x55555593
 8011524:	3fe55555 	.word	0x3fe55555
 8011528:	d078c69f 	.word	0xd078c69f
 801152c:	3fc39a09 	.word	0x3fc39a09
 8011530:	1d8e78af 	.word	0x1d8e78af
 8011534:	3fcc71c5 	.word	0x3fcc71c5
 8011538:	9997fa04 	.word	0x9997fa04
 801153c:	3fd99999 	.word	0x3fd99999
	...
 8011548:	c3500000 	.word	0xc3500000
 801154c:	43500000 	.word	0x43500000
 8011550:	7fefffff 	.word	0x7fefffff
 8011554:	3ff00000 	.word	0x3ff00000
 8011558:	3fe00000 	.word	0x3fe00000

0801155c <_init>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	bf00      	nop
 8011560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011562:	bc08      	pop	{r3}
 8011564:	469e      	mov	lr, r3
 8011566:	4770      	bx	lr

08011568 <_fini>:
 8011568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156a:	bf00      	nop
 801156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801156e:	bc08      	pop	{r3}
 8011570:	469e      	mov	lr, r3
 8011572:	4770      	bx	lr
