
ERC_BMS_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800f5c4  0800f5c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f820  0800f820  00011070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800f820  0800f820  00011070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800f820  0800f820  00011070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f820  0800f820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f824  0800f824  00010824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800f828  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e74  20000070  0800f898  00011070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  0800f898  00011ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030e76  00000000  00000000  000110a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006707  00000000  00000000  00041f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00048628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002092  00000000  00000000  0004b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000322a2  00000000  00000000  0004d15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f4cf  00000000  00000000  0007f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001355e4  00000000  00000000  000ae8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3eaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b990  00000000  00000000  001e3ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001ef884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f5ac 	.word	0x0800f5ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800f5ac 	.word	0x0800f5ac

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LTC6811_init>:
bool dischargeEnable = false;	//holds if conditions are met to enable discharge
bool System_OK = true;			//holds if the MCU and BMS_ICs are OK, turned off by watchdog, Comm errors or failed BMS Selftests(Green LED)


//Initializes the LTC's registers and the SPI communication
void LTC6811_init(){
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af06      	add	r7, sp, #24
	//LTC6811_Initialize();	//Initializes the SPI communication at 1MHz
	LTC6811_init_cfg(TOTAL_IC, bms_ic);	//Initializes the confiugration registers to all 0s
 8000bbe:	491b      	ldr	r1, [pc, #108]	@ (8000c2c <LTC6811_init+0x74>)
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fa7c 	bl	80010be <LTC6811_init_cfg>
	//This for loop initializes the configuration register variables
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e018      	b.n	8000bfe <LTC6811_init+0x46>
		LTC6811_set_cfgr(current_ic,bms_ic,REFON,ADCOPT,gpioBits_a,dccBits_a,dctoBits_a,uv_a,ov_a); // write LTC config like defined above
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <LTC6811_init+0x78>)
 8000bce:	7819      	ldrb	r1, [r3, #0]
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <LTC6811_init+0x7c>)
 8000bd2:	781c      	ldrb	r4, [r3, #0]
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <LTC6811_init+0x80>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	@ (8000c3c <LTC6811_init+0x84>)
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	79f8      	ldrb	r0, [r7, #7]
 8000bde:	9204      	str	r2, [sp, #16]
 8000be0:	9303      	str	r3, [sp, #12]
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <LTC6811_init+0x88>)
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <LTC6811_init+0x8c>)
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <LTC6811_init+0x90>)
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4623      	mov	r3, r4
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	490e      	ldr	r1, [pc, #56]	@ (8000c2c <LTC6811_init+0x74>)
 8000bf4:	f000 fa72 	bl	80010dc <LTC6811_set_cfgr>
	for (uint8_t current_ic = 0; current_ic<TOTAL_IC;current_ic++){
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0e3      	beq.n	8000bcc <LTC6811_init+0x14>
    }
	LTC6811_reset_crc_count(TOTAL_IC,bms_ic);	//sets the CRC count to 0
 8000c04:	4909      	ldr	r1, [pc, #36]	@ (8000c2c <LTC6811_init+0x74>)
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fa4a 	bl	80010a0 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, bms_ic);	//Initializes the LTC's register limits for LTC6811 (because the generic LTC681x libraries can also be used for LTC6813 and others)
 8000c0c:	4907      	ldr	r1, [pc, #28]	@ (8000c2c <LTC6811_init+0x74>)
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 f996 	bl	8000f40 <LTC6811_init_reg_limits>
	wakeup_sleep(TOTAL_IC);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 faa0 	bl	800115a <wakeup_sleep>
	LTC6811_wrcfg(TOTAL_IC,bms_ic);	//writes the configuration variables in the configuration registers via SPI
 8000c1a:	4904      	ldr	r1, [pc, #16]	@ (8000c2c <LTC6811_init+0x74>)
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fa30 	bl	8001082 <LTC6811_wrcfg>
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000008c 	.word	0x2000008c
 8000c30:	2000000c 	.word	0x2000000c
 8000c34:	2000000d 	.word	0x2000000d
 8000c38:	2000000e 	.word	0x2000000e
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	200001c0 	.word	0x200001c0
 8000c44:	200001b4 	.word	0x200001b4
 8000c48:	200001ac 	.word	0x200001ac
 8000c4c:	00000000 	.word	0x00000000

08000c50 <tempConvert>:
//convert ADC values into temperature
void tempConvert(){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	float innerlog;
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e0b3      	b.n	8000dc4 <tempConvert+0x174>
		for(int sensor = 0; sensor < NbTherm; sensor++){
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	e0a9      	b.n	8000db6 <tempConvert+0x166>
			if(bms_ic[current_ic].aux.a_codes[AUX_CH_VREF2-1] == 0x00){
 8000c62:	4a61      	ldr	r2, [pc, #388]	@ (8000de8 <tempConvert+0x198>)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	21e8      	movs	r1, #232	@ 0xe8
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3352      	adds	r3, #82	@ 0x52
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10b      	bne.n	8000c8e <tempConvert+0x3e>
				temperatures[current_ic][sensor] = 7;
 8000c76:	495d      	ldr	r1, [pc, #372]	@ (8000dec <tempConvert+0x19c>)
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	4a59      	ldr	r2, [pc, #356]	@ (8000df0 <tempConvert+0x1a0>)
 8000c8a:	601a      	str	r2, [r3, #0]
				continue;
 8000c8c:	e090      	b.n	8000db0 <tempConvert+0x160>
			}
			innerlog = (((float)bms_ic[current_ic].aux.a_codes[sensor]/(float)bms_ic[current_ic].aux.a_codes[AUX_CH_VREF2-1])-1.0)*ThermRs/ThermR25;
 8000c8e:	4956      	ldr	r1, [pc, #344]	@ (8000de8 <tempConvert+0x198>)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2274      	movs	r2, #116	@ 0x74
 8000c94:	fb03 f202 	mul.w	r2, r3, r2
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3324      	adds	r3, #36	@ 0x24
 8000c9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000caa:	4a4f      	ldr	r2, [pc, #316]	@ (8000de8 <tempConvert+0x198>)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	21e8      	movs	r1, #232	@ 0xe8
 8000cb0:	fb01 f303 	mul.w	r3, r1, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3352      	adds	r3, #82	@ 0x52
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000cc6:	ee16 0a90 	vmov	r0, s13
 8000cca:	f7ff fc1d 	bl	8000508 <__aeabi_f2d>
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4b48      	ldr	r3, [pc, #288]	@ (8000df4 <tempConvert+0x1a4>)
 8000cd4:	f7ff fab8 	bl	8000248 <__aeabi_dsub>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4614      	mov	r4, r2
 8000cde:	461d      	mov	r5, r3
 8000ce0:	4b45      	ldr	r3, [pc, #276]	@ (8000df8 <tempConvert+0x1a8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fc0f 	bl	8000508 <__aeabi_f2d>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4620      	mov	r0, r4
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	f7ff fc61 	bl	80005b8 <__aeabi_dmul>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4614      	mov	r4, r2
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <tempConvert+0x1ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc00 	bl	8000508 <__aeabi_f2d>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fd7c 	bl	800080c <__aeabi_ddiv>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fefc 	bl	8000b18 <__aeabi_d2f>
 8000d20:	4603      	mov	r3, r0
 8000d22:	607b      	str	r3, [r7, #4]
			temperatures[current_ic][sensor] = 1/((1/ThermB)*log(innerlog)+1/(298.15))-273.15;
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <tempConvert+0x1b0>)
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d32:	ee16 0a90 	vmov	r0, s13
 8000d36:	f7ff fbe7 	bl	8000508 <__aeabi_f2d>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	460d      	mov	r5, r1
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fbe2 	bl	8000508 <__aeabi_f2d>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	ec43 2b10 	vmov	d0, r2, r3
 8000d4c:	f00e fa34 	bl	800f1b8 <log>
 8000d50:	ec53 2b10 	vmov	r2, r3, d0
 8000d54:	4620      	mov	r0, r4
 8000d56:	4629      	mov	r1, r5
 8000d58:	f7ff fc2e 	bl	80005b8 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	a31c      	add	r3, pc, #112	@ (adr r3, 8000dd8 <tempConvert+0x188>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	f7ff fa6f 	bl	800024c <__adddf3>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	491f      	ldr	r1, [pc, #124]	@ (8000df4 <tempConvert+0x1a4>)
 8000d78:	f7ff fd48 	bl	800080c <__aeabi_ddiv>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	a316      	add	r3, pc, #88	@ (adr r3, 8000de0 <tempConvert+0x190>)
 8000d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8a:	f7ff fa5d 	bl	8000248 <__aeabi_dsub>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff febf 	bl	8000b18 <__aeabi_d2f>
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	4813      	ldr	r0, [pc, #76]	@ (8000dec <tempConvert+0x19c>)
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4403      	add	r3, r0
 8000dae:	6019      	str	r1, [r3, #0]
		for(int sensor = 0; sensor < NbTherm; sensor++){
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	3301      	adds	r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	f77f af52 	ble.w	8000c62 <tempConvert+0x12>
	for (int current_ic = 0; current_ic < TOTAL_IC; current_ic++){
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f77f af48 	ble.w	8000c5c <tempConvert+0xc>
		}
	}
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	dcb5db83 	.word	0xdcb5db83
 8000ddc:	3f6b79e1 	.word	0x3f6b79e1
 8000de0:	66666666 	.word	0x66666666
 8000de4:	40711266 	.word	0x40711266
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	20000190 	.word	0x20000190
 8000df0:	40e00000 	.word	0x40e00000
 8000df4:	3ff00000 	.word	0x3ff00000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	20000000 	.word	0x20000000
 8000e04:	00000000 	.word	0x00000000

08000e08 <readVoltages>:

void readVoltages(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	cvError = LTC6811_rdcv(CELL_CH_ALL, TOTAL_IC, bms_ic); // Reads and parses the LTC6811 cell voltage registers.
 8000e0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <readVoltages+0xa0>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f906 	bl	8001024 <LTC6811_rdcv>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b25a      	sxtb	r2, r3
 8000e1c:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <readVoltages+0xa4>)
 8000e1e:	701a      	strb	r2, [r3, #0]
//		uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
//		                     uint8_t total_ic, // the number of ICs in the system
//		                     cell_asic ic[] // Array of the parsed cell codes
//		                    )
	for(int i=0; i<TOTAL_IC; i++){
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	e034      	b.n	8000e90 <readVoltages+0x88>
		for(int j=0; j<CellsNbS; j++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	e02b      	b.n	8000e84 <readVoltages+0x7c>
			voltages[i][j] = (float)bms_ic[i].cells.c_codes[j] * 0.0001; //convert the cell voltage codes to voltages
 8000e2c:	491e      	ldr	r1, [pc, #120]	@ (8000ea8 <readVoltages+0xa0>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2274      	movs	r2, #116	@ 0x74
 8000e32:	fb03 f202 	mul.w	r2, r3, r2
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	330c      	adds	r3, #12
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	440b      	add	r3, r1
 8000e40:	88db      	ldrh	r3, [r3, #6]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4a:	ee17 0a90 	vmov	r0, s15
 8000e4e:	f7ff fb5b 	bl	8000508 <__aeabi_f2d>
 8000e52:	a313      	add	r3, pc, #76	@ (adr r3, 8000ea0 <readVoltages+0x98>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fbae 	bl	80005b8 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fe58 	bl	8000b18 <__aeabi_d2f>
 8000e68:	4601      	mov	r1, r0
 8000e6a:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <readVoltages+0xa8>)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4403      	add	r3, r0
 8000e7c:	6019      	str	r1, [r3, #0]
		for(int j=0; j<CellsNbS; j++){
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	ddd0      	ble.n	8000e2c <readVoltages+0x24>
	for(int i=0; i<TOTAL_IC; i++){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	ddc7      	ble.n	8000e26 <readVoltages+0x1e>
		}
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	eb1c432d 	.word	0xeb1c432d
 8000ea4:	3f1a36e2 	.word	0x3f1a36e2
 8000ea8:	2000008c 	.word	0x2000008c
 8000eac:	200001c4 	.word	0x200001c4
 8000eb0:	20000174 	.word	0x20000174

08000eb4 <readTemperatures>:
void readTemperatures(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	auxError = LTC6811_rdaux(AUX_CH_ALL, TOTAL_IC, bms_ic);
 8000eb8:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <readTemperatures+0x1c>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f8c8 	bl	8001052 <LTC6811_rdaux>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <readTemperatures+0x20>)
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000008c 	.word	0x2000008c
 8000ed4:	200001c5 	.word	0x200001c5

08000ed8 <currentConvert>:
//convert ADC values into current sensor skaling 19.8mV/A
void currentConvert(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	for(int i=0;i<2;i++){
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	e01a      	b.n	8000f1a <currentConvert+0x42>
		currents[i] = adcVal[i]*0.0406901041667;	//19.8mV/A
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <currentConvert+0x60>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fae9 	bl	80004c4 <__aeabi_ui2d>
 8000ef2:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f30 <currentConvert+0x58>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff fb5e 	bl	80005b8 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fe08 	bl	8000b18 <__aeabi_d2f>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <currentConvert+0x64>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	601a      	str	r2, [r3, #0]
	for(int i=0;i<2;i++){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3301      	adds	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	dde1      	ble.n	8000ee4 <currentConvert+0xc>
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	f3af 8000 	nop.w
 8000f30:	55556819 	.word	0x55556819
 8000f34:	3fa4d555 	.word	0x3fa4d555
 8000f38:	200001a4 	.word	0x200001a4
 8000f3c:	2000019c 	.word	0x2000019c

08000f40 <LTC6811_init_reg_limits>:
#include "stdint.h"
#include "LTC6811.h"
#include "LTC681x.h"

void LTC6811_init_reg_limits(uint8_t total_ic, cell_asic ic[])
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic=0; cic<total_ic; cic++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e038      	b.n	8000fc4 <LTC6811_init_reg_limits+0x84>
  {
    ic[cic].ic_reg.cell_channels=12;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	22e8      	movs	r2, #232	@ 0xe8
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	220c      	movs	r2, #12
 8000f60:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    ic[cic].ic_reg.stat_channels=4;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	22e8      	movs	r2, #232	@ 0xe8
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	2204      	movs	r2, #4
 8000f72:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    ic[cic].ic_reg.aux_channels=6;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	22e8      	movs	r2, #232	@ 0xe8
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	2206      	movs	r2, #6
 8000f84:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[cic].ic_reg.num_cv_reg=4;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	22e8      	movs	r2, #232	@ 0xe8
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	2204      	movs	r2, #4
 8000f96:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    ic[cic].ic_reg.num_gpio_reg=2;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	22e8      	movs	r2, #232	@ 0xe8
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[cic].ic_reg.num_stat_reg=3;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	22e8      	movs	r2, #232	@ 0xe8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2203      	movs	r2, #3
 8000fba:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
  for (uint8_t cic=0; cic<total_ic; cic++)
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d3c2      	bcc.n	8000f52 <LTC6811_init_reg_limits+0x12>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LTC6811_adcv>:
void LTC6811_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	71bb      	strb	r3, [r7, #6]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	717b      	strb	r3, [r7, #5]
  LTC681x_adcv(MD,DCP,CH);
 8000fec:	797a      	ldrb	r2, [r7, #5]
 8000fee:	79b9      	ldrb	r1, [r7, #6]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9b2 	bl	800135c <LTC681x_adcv>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LTC6811_adax>:
//Start a GPIO and Vref2 Conversion
void LTC6811_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
  LTC681x_adax(MD,CHG);
 8001010:	79ba      	ldrb	r2, [r7, #6]
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f9cb 	bl	80013b2 <LTC681x_adax>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <LTC6811_rdcv>:
// Reads and parses the LTC6811 cell voltage registers.
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	603a      	str	r2, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	460b      	mov	r3, r1
 8001032:	71bb      	strb	r3, [r7, #6]

  int8_t pec_error = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdcv(reg,total_ic,ic);
 8001038:	79b9      	ldrb	r1, [r7, #6]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fafa 	bl	8001638 <LTC681x_rdcv>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
  return(pec_error);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LTC6811_rdaux>:
*/
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	603a      	str	r2, [r7, #0]
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	460b      	mov	r3, r1
 8001060:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  pec_error = LTC681x_rdaux(reg,total_ic,ic);
 8001066:	79b9      	ldrb	r1, [r7, #6]
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fb97 	bl	80017a0 <LTC681x_rdaux>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
  return (pec_error);
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
*/
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[] //A two dimensional array of the configuration data that will be written
                  )
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	6039      	str	r1, [r7, #0]
 800108c:	71fb      	strb	r3, [r7, #7]
  LTC681x_wrcfg(total_ic,ic);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fc2c 	bl	80018f0 <LTC681x_wrcfg>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LTC6811_reset_crc_count>:
  LTC681x_check_pec(total_ic,reg,ic);
}

//Helper Function to reset PEC counters
void LTC6811_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  LTC681x_reset_crc_count(total_ic,ic);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fe3d 	bl	8001d30 <LTC681x_reset_crc_count>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <LTC6811_init_cfg>:

//Helper function to intialize CFG variables.
void LTC6811_init_cfg(uint8_t total_ic, cell_asic ic[])
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	6039      	str	r1, [r7, #0]
 80010c8:	71fb      	strb	r3, [r7, #7]
  LTC681x_init_cfg(total_ic,ic);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fe94 	bl	8001dfc <LTC681x_init_cfg>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <LTC6811_set_cfgr>:
					  bool dcc[12], // The DCC bit
					  bool dcto[4], // The Dcto bit
					  uint16_t uv, // The UV bit
					  uint16_t  ov // The OV bit
					  )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af06      	add	r7, sp, #24
 80010e2:	6039      	str	r1, [r7, #0]
 80010e4:	4611      	mov	r1, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	460b      	mov	r3, r1
 80010ee:	71bb      	strb	r3, [r7, #6]
 80010f0:	4613      	mov	r3, r2
 80010f2:	717b      	strb	r3, [r7, #5]
  LTC681x_set_cfgr(nIC ,ic,refon,adcopt,gpio,dcc,dcto, uv, ov);
 80010f4:	7979      	ldrb	r1, [r7, #5]
 80010f6:	79ba      	ldrb	r2, [r7, #6]
 80010f8:	79f8      	ldrb	r0, [r7, #7]
 80010fa:	8c3b      	ldrh	r3, [r7, #32]
 80010fc:	9304      	str	r3, [sp, #16]
 80010fe:	8bbb      	ldrh	r3, [r7, #28]
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	460b      	mov	r3, r1
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	f000 fe9d 	bl	8001e50 <LTC681x_set_cfgr>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <wakeup_idle>:
                                0x2d02, 0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3,
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };

void wakeup_idle(uint8_t total_ic)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e00c      	b.n	8001148 <wakeup_idle+0x2a>
  {
    cs_low();
 800112e:	f001 f8e9 	bl	8002304 <cs_low>
    HAL_Delay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f002 fd24 	bl	8003b80 <HAL_Delay>
    //delayMicroseconds(2); //Guarantees the isoSPI will be in ready mode
    spi_read_byte(0xff);
 8001138:	20ff      	movs	r0, #255	@ 0xff
 800113a:	f001 f95f 	bl	80023fc <spi_read_byte>
    cs_high();
 800113e:	f001 f8ed 	bl	800231c <cs_high>
  for (int i =0; i<total_ic; i++)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbee      	blt.n	800112e <wakeup_idle+0x10>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <wakeup_sleep>:

//Generic wakeup commannd to wake the LTC6813 from sleep
void wakeup_sleep(uint8_t total_ic)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  for (int i =0; i<total_ic; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e009      	b.n	800117e <wakeup_sleep+0x24>
  {
    cs_low();
 800116a:	f001 f8cb 	bl	8002304 <cs_low>
    HAL_Delay(1); // Guarantees the LTC6811 will be in standby
 800116e:	2001      	movs	r0, #1
 8001170:	f002 fd06 	bl	8003b80 <HAL_Delay>
		cs_high();
 8001174:	f001 f8d2 	bl	800231c <cs_high>
  for (int i =0; i<total_ic; i++)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	429a      	cmp	r2, r3
 8001184:	dbf1      	blt.n	800116a <wakeup_sleep+0x10>
  }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <cmd_68>:

//Generic function to write 68xx commands. Function calculated PEC for tx_cmd data
void cmd_68(uint8_t tx_cmd[2])
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;
  uint8_t md_bits;

  cmd[0] = tx_cmd[0];
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	723b      	strb	r3, [r7, #8]
  cmd[1] =  tx_cmd[1];
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	727b      	strb	r3, [r7, #9]
  cmd_pec = pec15_calc(2, cmd);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	2002      	movs	r0, #2
 80011ac:	f000 f8a2 	bl	80012f4 <pec15_calc>
 80011b0:	4603      	mov	r3, r0
 80011b2:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	72fb      	strb	r3, [r7, #11]
	cs_low();
 80011c4:	f001 f89e 	bl	8002304 <cs_low>
  spi_write_array(4,cmd);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	2004      	movs	r0, #4
 80011d0:	f001 f8b0 	bl	8002334 <spi_write_array>
	cs_high();
 80011d4:	f001 f8a2 	bl	800231c <cs_high>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <write_68>:

//Generic function to write 68xx commands and write payload data. Function calculated PEC for tx_cmd data
void write_68(uint8_t total_ic , uint8_t tx_cmd[2], uint8_t data[])
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	73fb      	strb	r3, [r7, #15]
  const uint8_t BYTES_IN_REG = 6;
 80011ee:	2306      	movs	r3, #6
 80011f0:	773b      	strb	r3, [r7, #28]
  const uint8_t CMD_LEN = 4+(8*total_ic);
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3304      	adds	r3, #4
 80011fa:	76fb      	strb	r3, [r7, #27]
  uint8_t *cmd;
  uint16_t data_pec;
  uint16_t cmd_pec;
  uint8_t cmd_index;

  cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80011fc:	7efb      	ldrb	r3, [r7, #27]
 80011fe:	4618      	mov	r0, r3
 8001200:	f00d fe8e 	bl	800ef20 <malloc>
 8001204:	4603      	mov	r3, r0
 8001206:	617b      	str	r3, [r7, #20]
  cmd[0] = tx_cmd[0];
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	701a      	strb	r2, [r3, #0]
  cmd[1] = tx_cmd[1];
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	7852      	ldrb	r2, [r2, #1]
 8001218:	701a      	strb	r2, [r3, #0]
  cmd_pec = pec15_calc(2, cmd);
 800121a:	6979      	ldr	r1, [r7, #20]
 800121c:	2002      	movs	r0, #2
 800121e:	f000 f869 	bl	80012f4 <pec15_calc>
 8001222:	4603      	mov	r3, r0
 8001224:	827b      	strh	r3, [r7, #18]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001226:	8a7b      	ldrh	r3, [r7, #18]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	b29a      	uxth	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3302      	adds	r3, #2
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
  cmd[3] = (uint8_t)(cmd_pec);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3303      	adds	r3, #3
 8001238:	8a7a      	ldrh	r2, [r7, #18]
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
  cmd_index = 4;
 800123e:	2304      	movs	r3, #4
 8001240:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	77bb      	strb	r3, [r7, #30]
 8001246:	e042      	b.n	80012ce <write_68+0xee>
  {
    // the last IC on the stack. The first configuration written is
    // received by the last IC in the daisy chain

    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001248:	2300      	movs	r3, #0
 800124a:	777b      	strb	r3, [r7, #29]
 800124c:	e016      	b.n	800127c <write_68+0x9c>
    {
      cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 800124e:	7fbb      	ldrb	r3, [r7, #30]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	461a      	mov	r2, r3
 800125c:	7f7b      	ldrb	r3, [r7, #29]
 800125e:	4413      	add	r3, r2
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	441a      	add	r2, r3
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	6979      	ldr	r1, [r7, #20]
 800126a:	440b      	add	r3, r1
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	3301      	adds	r3, #1
 8001274:	77fb      	strb	r3, [r7, #31]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001276:	7f7b      	ldrb	r3, [r7, #29]
 8001278:	3301      	adds	r3, #1
 800127a:	777b      	strb	r3, [r7, #29]
 800127c:	7f7a      	ldrb	r2, [r7, #29]
 800127e:	7f3b      	ldrb	r3, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	d3e4      	bcc.n	800124e <write_68+0x6e>
    }

    data_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // calculating the PEC for each Iss configuration register data
 8001284:	7fbb      	ldrb	r3, [r7, #30]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	441a      	add	r2, r3
 8001296:	7f3b      	ldrb	r3, [r7, #28]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f82a 	bl	80012f4 <pec15_calc>
 80012a0:	4603      	mov	r3, r0
 80012a2:	823b      	strh	r3, [r7, #16]
    cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80012a4:	8a3b      	ldrh	r3, [r7, #16]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b299      	uxth	r1, r3
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2ca      	uxtb	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
    cmd[cmd_index + 1] = (uint8_t)data_pec;
 80012b4:	7ffb      	ldrb	r3, [r7, #31]
 80012b6:	3301      	adds	r3, #1
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4413      	add	r3, r2
 80012bc:	8a3a      	ldrh	r2, [r7, #16]
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]
    cmd_index = cmd_index + 2;
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	3302      	adds	r3, #2
 80012c6:	77fb      	strb	r3, [r7, #31]
  for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)       // executes for each LTC681x in daisy chain, this loops starts with
 80012c8:	7fbb      	ldrb	r3, [r7, #30]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	77bb      	strb	r3, [r7, #30]
 80012ce:	7fbb      	ldrb	r3, [r7, #30]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1b9      	bne.n	8001248 <write_68+0x68>
  }


  cs_low();
 80012d4:	f001 f816 	bl	8002304 <cs_low>
  spi_write_array(CMD_LEN, cmd);
 80012d8:	7efb      	ldrb	r3, [r7, #27]
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 f829 	bl	8002334 <spi_write_array>
  cs_high();
 80012e2:	f001 f81b 	bl	800231c <cs_high>
  free(cmd);
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f00d fe22 	bl	800ef30 <free>
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <pec15_calc>:
  Calculates  and returns the CRC15
  */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;

  remainder = 16;//initialize the PEC
 8001300:	2310      	movs	r3, #16
 8001302:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001304:	2300      	movs	r3, #0
 8001306:	737b      	strb	r3, [r7, #13]
 8001308:	e019      	b.n	800133e <pec15_calc+0x4a>
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	09db      	lsrs	r3, r3, #7
 800130e:	b29b      	uxth	r3, r3
 8001310:	7b7a      	ldrb	r2, [r7, #13]
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	440a      	add	r2, r1
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	4053      	eors	r3, r2
 800131a:	b29b      	uxth	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	817b      	strh	r3, [r7, #10]

    remainder = (remainder<<8)^crc15Table[addr];
 8001320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	897b      	ldrh	r3, [r7, #10]
 800132a:	490b      	ldr	r1, [pc, #44]	@ (8001358 <pec15_calc+0x64>)
 800132c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4053      	eors	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8001338:	7b7b      	ldrb	r3, [r7, #13]
 800133a:	3301      	adds	r3, #1
 800133c:	737b      	strb	r3, [r7, #13]
 800133e:	7b7a      	ldrb	r2, [r7, #13]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3e1      	bcc.n	800130a <pec15_calc+0x16>
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b29b      	uxth	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	0800f5c4 	.word	0x0800f5c4

0800135c <LTC681x_adcv>:
void LTC681x_adcv(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	460b      	mov	r3, r1
 8001368:	71bb      	strb	r3, [r7, #6]
 800136a:	4613      	mov	r3, r2
 800136c:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	105b      	asrs	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x02;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3302      	adds	r3, #2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	73fb      	strb	r3, [r7, #15]
  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2da      	uxtb	r2, r3
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4413      	add	r3, r2
 8001392:	b2da      	uxtb	r2, r3
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	4413      	add	r3, r2
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3360      	adds	r3, #96	@ 0x60
 800139c:	b2db      	uxtb	r3, r3
 800139e:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fef3 	bl	8001190 <cmd_68>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <LTC681x_adax>:
//Start a GPIO and Vref2 Conversion
void LTC681x_adax(
  uint8_t MD, //ADC Mode
  uint8_t CHG //GPIO Channels to be measured)
)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	460a      	mov	r2, r1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	4613      	mov	r3, r2
 80013c0:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	105b      	asrs	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x04;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3304      	adds	r3, #4
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	01db      	lsls	r3, r3, #7
 80013da:	73fb      	strb	r3, [r7, #15]
  cmd[1] = md_bits + 0x60 + CHG ;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	4413      	add	r3, r2
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	3360      	adds	r3, #96	@ 0x60
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fece 	bl	8001190 <cmd_68>

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <LTC681x_rdcv_reg>:
// Reads the raw cell voltage register data
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 800140c:	2308      	movs	r3, #8
 800140e:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1)     //1: RDCVA
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d104      	bne.n	8001420 <LTC681x_rdcv_reg+0x24>
  {
    cmd[1] = 0x04;
 8001416:	2304      	movs	r3, #4
 8001418:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	723b      	strb	r3, [r7, #8]
 800141e:	e026      	b.n	800146e <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 2) //2: RDCVB
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d104      	bne.n	8001430 <LTC681x_rdcv_reg+0x34>
  {
    cmd[1] = 0x06;
 8001426:	2306      	movs	r3, #6
 8001428:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800142a:	2300      	movs	r3, #0
 800142c:	723b      	strb	r3, [r7, #8]
 800142e:	e01e      	b.n	800146e <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 3) //3: RDCVC
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d104      	bne.n	8001440 <LTC681x_rdcv_reg+0x44>
  {
    cmd[1] = 0x08;
 8001436:	2308      	movs	r3, #8
 8001438:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	723b      	strb	r3, [r7, #8]
 800143e:	e016      	b.n	800146e <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 4) //4: RDCVD
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d104      	bne.n	8001450 <LTC681x_rdcv_reg+0x54>
  {
    cmd[1] = 0x0A;
 8001446:	230a      	movs	r3, #10
 8001448:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800144a:	2300      	movs	r3, #0
 800144c:	723b      	strb	r3, [r7, #8]
 800144e:	e00e      	b.n	800146e <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 5) //4: RDCVE
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d104      	bne.n	8001460 <LTC681x_rdcv_reg+0x64>
  {
    cmd[1] = 0x09;
 8001456:	2309      	movs	r3, #9
 8001458:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800145a:	2300      	movs	r3, #0
 800145c:	723b      	strb	r3, [r7, #8]
 800145e:	e006      	b.n	800146e <LTC681x_rdcv_reg+0x72>
  }
  else if (reg == 6) //4: RDCVF
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b06      	cmp	r3, #6
 8001464:	d103      	bne.n	800146e <LTC681x_rdcv_reg+0x72>
  {
    cmd[1] = 0x0B;
 8001466:	230b      	movs	r3, #11
 8001468:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	723b      	strb	r3, [r7, #8]
  }


  cmd_pec = pec15_calc(2, cmd);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4619      	mov	r1, r3
 8001474:	2002      	movs	r0, #2
 8001476:	f7ff ff3d 	bl	80012f4 <pec15_calc>
 800147a:	4603      	mov	r3, r0
 800147c:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800147e:	89bb      	ldrh	r3, [r7, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	72fb      	strb	r3, [r7, #11]

  cs_low();
 800148e:	f000 ff39 	bl	8002304 <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	fb12 f303 	smulbb	r3, r2, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f107 0008 	add.w	r0, r7, #8
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	2104      	movs	r1, #4
 80014a4:	f000 ff6a 	bl	800237c <spi_write_read>
  cs_high();
 80014a8:	f000 ff38 	bl	800231c <cs_high>

}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <parse_cells>:

//helper function that parses voltage measurement registers
int8_t parse_cells(uint8_t current_ic, uint8_t cell_reg, uint8_t cell_data[], uint16_t *cell_codes, uint8_t *ic_pec)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	460b      	mov	r3, r1
 80014c4:	73bb      	strb	r3, [r7, #14]

  const uint8_t BYT_IN_REG = 6;
 80014c6:	2306      	movs	r3, #6
 80014c8:	773b      	strb	r3, [r7, #28]
  const uint8_t CELL_IN_REG = 3;
 80014ca:	2303      	movs	r3, #3
 80014cc:	76fb      	strb	r3, [r7, #27]
  int8_t pec_error = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	77fb      	strb	r3, [r7, #31]
  uint16_t parsed_cell;
  uint16_t received_pec;
  uint16_t data_pec;
  uint8_t data_counter = current_ic*NUM_RX_BYT; //data counter
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	77bb      	strb	r3, [r7, #30]


  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 80014d8:	2300      	movs	r3, #0
 80014da:	777b      	strb	r3, [r7, #29]
 80014dc:	e01f      	b.n	800151e <parse_cells+0x6a>
  {
    // loops once for each of the 3 cell voltage codes in the register

    parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each cell code is received as two bytes and is combined to
 80014de:	7fbb      	ldrb	r3, [r7, #30]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	7fbb      	ldrb	r3, [r7, #30]
 80014ea:	3301      	adds	r3, #1
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	440b      	add	r3, r1
 80014f8:	82bb      	strh	r3, [r7, #20]
    // create the parsed cell voltage code
    cell_codes[current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80014fa:	7f7a      	ldrb	r2, [r7, #29]
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	3b01      	subs	r3, #1
 8001500:	7ef9      	ldrb	r1, [r7, #27]
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	8aba      	ldrh	r2, [r7, #20]
 8001510:	801a      	strh	r2, [r3, #0]
    data_counter = data_counter + 2;                       //Because cell voltage codes are two bytes the data counter
 8001512:	7fbb      	ldrb	r3, [r7, #30]
 8001514:	3302      	adds	r3, #2
 8001516:	77bb      	strb	r3, [r7, #30]
  for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)  // This loop parses the read back data into cell voltages, it
 8001518:	7f7b      	ldrb	r3, [r7, #29]
 800151a:	3301      	adds	r3, #1
 800151c:	777b      	strb	r3, [r7, #29]
 800151e:	7f7a      	ldrb	r2, [r7, #29]
 8001520:	7efb      	ldrb	r3, [r7, #27]
 8001522:	429a      	cmp	r2, r3
 8001524:	d3db      	bcc.n	80014de <parse_cells+0x2a>
    //must increment by two for each parsed cell code
  }

  received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter+1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001526:	7fbb      	ldrb	r3, [r7, #30]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b21b      	sxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7fbb      	ldrb	r3, [r7, #30]
 8001536:	3301      	adds	r3, #1
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	440b      	add	r3, r1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21b      	sxth	r3, r3
 8001544:	833b      	strh	r3, [r7, #24]
  //after the 6 cell voltage data bytes
  data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	461a      	mov	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	441a      	add	r2, r3
 8001550:	7f3b      	ldrb	r3, [r7, #28]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fecd 	bl	80012f4 <pec15_calc>
 800155a:	4603      	mov	r3, r0
 800155c:	82fb      	strh	r3, [r7, #22]

  if (received_pec != data_pec)
 800155e:	8b3a      	ldrh	r2, [r7, #24]
 8001560:	8afb      	ldrh	r3, [r7, #22]
 8001562:	429a      	cmp	r2, r3
 8001564:	d008      	beq.n	8001578 <parse_cells+0xc4>
  {
    pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8001566:	2301      	movs	r3, #1
 8001568:	77fb      	strb	r3, [r7, #31]
    ic_pec[cell_reg-1]=1;
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	3b01      	subs	r3, #1
 800156e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001570:	4413      	add	r3, r2
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e005      	b.n	8001584 <parse_cells+0xd0>
  }
  else
  {
    ic_pec[cell_reg-1]=0;
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	3b01      	subs	r3, #1
 800157c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800157e:	4413      	add	r3, r2
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
  }
  data_counter=data_counter+2;
 8001584:	7fbb      	ldrb	r3, [r7, #30]
 8001586:	3302      	adds	r3, #2
 8001588:	77bb      	strb	r3, [r7, #30]
  return(pec_error);
 800158a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <LTC681x_rdaux_reg>:
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
                       uint8_t total_ic, //The number of ICs in the system
                       uint8_t *data //Array of the unparsed auxiliary codes
                      )
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	603a      	str	r2, [r7, #0]
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 80015a6:	2308      	movs	r3, #8
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back auxiliary group A
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d104      	bne.n	80015ba <LTC681x_rdaux_reg+0x24>
  {
    cmd[1] = 0x0C;
 80015b0:	230c      	movs	r3, #12
 80015b2:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	723b      	strb	r3, [r7, #8]
 80015b8:	e01b      	b.n	80015f2 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 2)  //Read back auxiliary group B
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d104      	bne.n	80015ca <LTC681x_rdaux_reg+0x34>
  {
    cmd[1] = 0x0e;
 80015c0:	230e      	movs	r3, #14
 80015c2:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	723b      	strb	r3, [r7, #8]
 80015c8:	e013      	b.n	80015f2 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 3)  //Read back auxiliary group C
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d104      	bne.n	80015da <LTC681x_rdaux_reg+0x44>
  {
    cmd[1] = 0x0D;
 80015d0:	230d      	movs	r3, #13
 80015d2:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	723b      	strb	r3, [r7, #8]
 80015d8:	e00b      	b.n	80015f2 <LTC681x_rdaux_reg+0x5c>
  }
  else if (reg == 4)  //Read back auxiliary group D
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d104      	bne.n	80015ea <LTC681x_rdaux_reg+0x54>
  {
    cmd[1] = 0x0F;
 80015e0:	230f      	movs	r3, #15
 80015e2:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015e4:	2300      	movs	r3, #0
 80015e6:	723b      	strb	r3, [r7, #8]
 80015e8:	e003      	b.n	80015f2 <LTC681x_rdaux_reg+0x5c>
  }
  else          //Read back auxiliary group A
  {
    cmd[1] = 0x0C;
 80015ea:	230c      	movs	r3, #12
 80015ec:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	723b      	strb	r3, [r7, #8]
  }

  cmd_pec = pec15_calc(2, cmd);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff fe7b 	bl	80012f4 <pec15_calc>
 80015fe:	4603      	mov	r3, r0
 8001600:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001602:	89bb      	ldrh	r3, [r7, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	b29b      	uxth	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	72fb      	strb	r3, [r7, #11]

  cs_low();
 8001612:	f000 fe77 	bl	8002304 <cs_low>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	fb12 f303 	smulbb	r3, r2, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f107 0008 	add.w	r0, r7, #8
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	2104      	movs	r1, #4
 8001628:	f000 fea8 	bl	800237c <spi_write_read>
  cs_high();
 800162c:	f000 fe76 	bl	800231c <cs_high>

}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <LTC681x_rdcv>:
//Reads and parses the LTC681x cell voltage registers.
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
                     uint8_t total_ic, // the number of ICs in the system
                     cell_asic ic[] // Array of the parsed cell codes
                    )
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af02      	add	r7, sp, #8
 800163e:	4603      	mov	r3, r0
 8001640:	603a      	str	r2, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	460b      	mov	r3, r1
 8001646:	71bb      	strb	r3, [r7, #6]
  int8_t pec_error = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]
  uint8_t *cell_data;
  uint8_t c_ic = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	75bb      	strb	r3, [r7, #22]
  cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4618      	mov	r0, r3
 8001656:	f00d fc63 	bl	800ef20 <malloc>
 800165a:	4603      	mov	r3, r0
 800165c:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d14b      	bne.n	80016fc <LTC681x_rdcv+0xc4>
  {
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 8001664:	2301      	movs	r3, #1
 8001666:	757b      	strb	r3, [r7, #21]
 8001668:	e041      	b.n	80016ee <LTC681x_rdcv+0xb6>
    {
      LTC681x_rdcv_reg(cell_reg, total_ic,cell_data );
 800166a:	79b9      	ldrb	r1, [r7, #6]
 800166c:	7d7b      	ldrb	r3, [r7, #21]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fec3 	bl	80013fc <LTC681x_rdcv_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e031      	b.n	80016e0 <LTC681x_rdcv+0xa8>
      {
        if (ic->isospi_reverse == false)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <LTC681x_rdcv+0x5a>
        {
          c_ic = current_ic;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	75bb      	strb	r3, [r7, #22]
 8001690:	e006      	b.n	80016a0 <LTC681x_rdcv+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	b2d8      	uxtb	r0, r3
                                            &ic[c_ic].cells.c_codes[0],
 80016a4:	7dbb      	ldrb	r3, [r7, #22]
 80016a6:	22e8      	movs	r2, #232	@ 0xe8
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80016b0:	f103 041e 	add.w	r4, r3, #30
                                            &ic[c_ic].cells.pec_match[0]);
 80016b4:	7dbb      	ldrb	r3, [r7, #22]
 80016b6:	22e8      	movs	r2, #232	@ 0xe8
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
        pec_error = pec_error + parse_cells(current_ic,cell_reg, cell_data,
 80016c0:	3342      	adds	r3, #66	@ 0x42
 80016c2:	7d79      	ldrb	r1, [r7, #21]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4623      	mov	r3, r4
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	f7ff fef3 	bl	80014b4 <parse_cells>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	4413      	add	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3301      	adds	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbc9      	blt.n	800167c <LTC681x_rdcv+0x44>
    for (uint8_t cell_reg = 1; cell_reg<ic[0].ic_reg.num_cv_reg+1; cell_reg++)                   //executes once for each of the LTC6811 cell voltage registers
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
 80016ea:	3301      	adds	r3, #1
 80016ec:	757b      	strb	r3, [r7, #21]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 80016f4:	7d7a      	ldrb	r2, [r7, #21]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d9b7      	bls.n	800166a <LTC681x_rdcv+0x32>
 80016fa:	e043      	b.n	8001784 <LTC681x_rdcv+0x14c>
    }
  }

  else
  {
    LTC681x_rdcv_reg(reg, total_ic,cell_data);
 80016fc:	79b9      	ldrb	r1, [r7, #6]
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fe7a 	bl	80013fc <LTC681x_rdcv_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e036      	b.n	800177c <LTC681x_rdcv+0x144>
    {
      if (ic->isospi_reverse == false)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <LTC681x_rdcv+0xec>
      {
        c_ic = current_ic;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	75bb      	strb	r3, [r7, #22]
 8001722:	e006      	b.n	8001732 <LTC681x_rdcv+0xfa>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	79ba      	ldrb	r2, [r7, #6]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	b2d8      	uxtb	r0, r3
 8001736:	7dbb      	ldrb	r3, [r7, #22]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	461a      	mov	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	189c      	adds	r4, r3, r2
                                          &ic[c_ic].cells.c_codes[0],
 8001740:	7dbb      	ldrb	r3, [r7, #22]
 8001742:	22e8      	movs	r2, #232	@ 0xe8
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800174c:	f103 051e 	add.w	r5, r3, #30
                                          &ic[c_ic].cells.pec_match[0]);
 8001750:	7dbb      	ldrb	r3, [r7, #22]
 8001752:	22e8      	movs	r2, #232	@ 0xe8
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	4413      	add	r3, r2
      pec_error = pec_error + parse_cells(current_ic,reg, &cell_data[8*c_ic],
 800175c:	3342      	adds	r3, #66	@ 0x42
 800175e:	79f9      	ldrb	r1, [r7, #7]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	462b      	mov	r3, r5
 8001764:	4622      	mov	r2, r4
 8001766:	f7ff fea5 	bl	80014b4 <parse_cells>
 800176a:	4603      	mov	r3, r0
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	4413      	add	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbc4      	blt.n	800170e <LTC681x_rdcv+0xd6>
    }
  }
  LTC681x_check_pec(total_ic,CELL,ic);
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f92c 	bl	80019e8 <LTC681x_check_pec>
  free(cell_data);
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	f00d fbcd 	bl	800ef30 <free>
  return(pec_error);
 8001796:	7dfb      	ldrb	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bdb0      	pop	{r4, r5, r7, pc}

080017a0 <LTC681x_rdaux>:
*/
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
                     uint8_t total_ic,//the number of ICs in the system
                     cell_asic ic[]//A two dimensional array of the gpio voltage codes.
                    )
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	4603      	mov	r3, r0
 80017a8:	603a      	str	r2, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	460b      	mov	r3, r1
 80017ae:	71bb      	strb	r3, [r7, #6]
  uint8_t *data;
  int8_t pec_error = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	75fb      	strb	r3, [r7, #23]
  uint8_t c_ic =0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	75bb      	strb	r3, [r7, #22]
  data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4618      	mov	r0, r3
 80017be:	f00d fbaf 	bl	800ef20 <malloc>
 80017c2:	4603      	mov	r3, r0
 80017c4:	60bb      	str	r3, [r7, #8]

  if (reg == 0)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d147      	bne.n	800185c <LTC681x_rdaux+0xbc>
  {
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 80017cc:	2301      	movs	r3, #1
 80017ce:	757b      	strb	r3, [r7, #21]
 80017d0:	e03d      	b.n	800184e <LTC681x_rdaux+0xae>
    {
      LTC681x_rdaux_reg(gpio_reg, total_ic,data);                 //Reads the raw auxiliary register data into the data[] array
 80017d2:	79b9      	ldrb	r1, [r7, #6]
 80017d4:	7d7b      	ldrb	r3, [r7, #21]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fedc 	bl	8001596 <LTC681x_rdaux_reg>
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	e02d      	b.n	8001840 <LTC681x_rdaux+0xa0>
      {
        if (ic->isospi_reverse == false)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <LTC681x_rdaux+0x5a>
        {
          c_ic = current_ic;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	75bb      	strb	r3, [r7, #22]
 80017f8:	e006      	b.n	8001808 <LTC681x_rdaux+0x68>
        }
        else
        {
          c_ic = total_ic - current_ic - 1;
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	79ba      	ldrb	r2, [r7, #6]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	75bb      	strb	r3, [r7, #22]
        }
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	b2d8      	uxtb	r0, r3
                                &ic[c_ic].aux.a_codes[0],
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	22e8      	movs	r2, #232	@ 0xe8
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8001818:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                                &ic[c_ic].aux.pec_match[0]);
 800181c:	7dbb      	ldrb	r3, [r7, #22]
 800181e:	22e8      	movs	r2, #232	@ 0xe8
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4413      	add	r3, r2
        pec_error = parse_cells(current_ic,gpio_reg, data,
 8001828:	335a      	adds	r3, #90	@ 0x5a
 800182a:	7d79      	ldrb	r1, [r7, #21]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	f7ff fe3f 	bl	80014b4 <parse_cells>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]
      for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbcd      	blt.n	80017e4 <LTC681x_rdaux+0x44>
    for (uint8_t gpio_reg = 1; gpio_reg<ic[0].ic_reg.num_gpio_reg+1; gpio_reg++)                 //executes once for each of the LTC6811 aux voltage registers
 8001848:	7d7b      	ldrb	r3, [r7, #21]
 800184a:	3301      	adds	r3, #1
 800184c:	757b      	strb	r3, [r7, #21]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8001854:	7d7a      	ldrb	r2, [r7, #21]
 8001856:	429a      	cmp	r2, r3
 8001858:	d9bb      	bls.n	80017d2 <LTC681x_rdaux+0x32>
 800185a:	e03a      	b.n	80018d2 <LTC681x_rdaux+0x132>
      }
    }
  }
  else
  {
    LTC681x_rdaux_reg(reg, total_ic, data);
 800185c:	79b9      	ldrb	r1, [r7, #6]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe97 	bl	8001596 <LTC681x_rdaux_reg>

    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e02d      	b.n	80018ca <LTC681x_rdaux+0x12a>
    {
      if (ic->isospi_reverse == false)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <LTC681x_rdaux+0xe4>
      {
        c_ic = current_ic;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	75bb      	strb	r3, [r7, #22]
 8001882:	e006      	b.n	8001892 <LTC681x_rdaux+0xf2>
      }
      else
      {
        c_ic = total_ic - current_ic - 1;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	79ba      	ldrb	r2, [r7, #6]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	75bb      	strb	r3, [r7, #22]
      }
      pec_error = parse_cells(current_ic,reg, data,
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	b2d8      	uxtb	r0, r3
                              &ic[c_ic].aux.a_codes[0],
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 8001898:	22e8      	movs	r2, #232	@ 0xe8
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 80018a2:	f103 0448 	add.w	r4, r3, #72	@ 0x48
                              &ic[c_ic].aux.pec_match[0]);
 80018a6:	7dbb      	ldrb	r3, [r7, #22]
 80018a8:	22e8      	movs	r2, #232	@ 0xe8
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
      pec_error = parse_cells(current_ic,reg, data,
 80018b2:	335a      	adds	r3, #90	@ 0x5a
 80018b4:	79f9      	ldrb	r1, [r7, #7]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4623      	mov	r3, r4
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f7ff fdfa 	bl	80014b4 <parse_cells>
 80018c0:	4603      	mov	r3, r0
 80018c2:	75fb      	strb	r3, [r7, #23]
    for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbcd      	blt.n	800186e <LTC681x_rdaux+0xce>
    }

  }
  LTC681x_check_pec(total_ic,AUX,ic);
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	2102      	movs	r1, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f885 	bl	80019e8 <LTC681x_check_pec>
  free(data);
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f00d fb26 	bl	800ef30 <free>
  return (pec_error);
 80018e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <LTC681x_wrcfg>:

//Write the LTC681x CFGRA
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]
                  )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0c4      	sub	sp, #272	@ 0x110
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4602      	mov	r2, r0
 80018f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001900:	6019      	str	r1, [r3, #0]
 8001902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001906:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800190a:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[2] = {0x00 , 0x01} ;
 800190c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001910:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
  uint8_t write_buffer[256];
  uint8_t write_count = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  uint8_t c_ic = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001920:	2300      	movs	r3, #0
 8001922:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001926:	e045      	b.n	80019b4 <LTC681x_wrcfg+0xc4>
  {
    if (ic->isospi_reverse == true)
 8001928:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800192c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <LTC681x_wrcfg+0x54>
    {
      c_ic = current_ic;
 800193a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800193e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001942:	e00b      	b.n	800195c <LTC681x_wrcfg+0x6c>
    }
    else
    {
      c_ic = total_ic - current_ic - 1;
 8001944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001948:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    }

    for (uint8_t data = 0; data<6; data++)
 800195c:	2300      	movs	r3, #0
 800195e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8001962:	e01e      	b.n	80019a2 <LTC681x_wrcfg+0xb2>
    {
      write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8001964:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001968:	22e8      	movs	r2, #232	@ 0xe8
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001972:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	18d1      	adds	r1, r2, r3
 800197a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800197e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001982:	5c89      	ldrb	r1, [r1, r2]
 8001984:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001988:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800198c:	54d1      	strb	r1, [r2, r3]
      write_count++;
 800198e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001992:	3301      	adds	r3, #1
 8001994:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    for (uint8_t data = 0; data<6; data++)
 8001998:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800199c:	3301      	adds	r3, #1
 800199e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80019a2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d9dc      	bls.n	8001964 <LTC681x_wrcfg+0x74>
  for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80019aa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80019ae:	3301      	adds	r3, #1
 80019b0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80019b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019b8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80019bc:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3b0      	bcc.n	8001928 <LTC681x_wrcfg+0x38>
    }
  }
  write_68(total_ic, cmd, write_buffer);
 80019c6:	f107 0208 	add.w	r2, r7, #8
 80019ca:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80019ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019d2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fc01 	bl	80011e0 <write_68>
}
 80019de:	bf00      	nop
 80019e0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <LTC681x_check_pec>:
  return(error);
}

//Helper function that increments PEC counters
void LTC681x_check_pec(uint8_t total_ic,uint8_t reg, cell_asic ic[])
{
 80019e8:	b480      	push	{r7}
 80019ea:	b08b      	sub	sp, #44	@ 0x2c
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	603a      	str	r2, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	460b      	mov	r3, r1
 80019f6:	71bb      	strb	r3, [r7, #6]
  switch (reg)
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	f200 8191 	bhi.w	8001d22 <LTC681x_check_pec+0x33a>
 8001a00:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <LTC681x_check_pec+0x20>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a1d 	.word	0x08001a1d
 8001a0c:	08001b19 	.word	0x08001b19
 8001a10:	08001bcb 	.word	0x08001bcb
 8001a14:	08001c77 	.word	0x08001c77
 8001a18:	08001a9b 	.word	0x08001a9b
  {
    case CFGRA:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a20:	e036      	b.n	8001a90 <LTC681x_check_pec+0xa8>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].config.rx_pec_match;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	22e8      	movs	r2, #232	@ 0xe8
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	21e8      	movs	r1, #232	@ 0xe8
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	7b9b      	ldrb	r3, [r3, #14]
 8001a40:	4618      	mov	r0, r3
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	21e8      	movs	r1, #232	@ 0xe8
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	6839      	ldr	r1, [r7, #0]
 8001a4c:	440b      	add	r3, r1
 8001a4e:	4402      	add	r2, r0
 8001a50:	b292      	uxth	r2, r2
 8001a52:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].config.rx_pec_match;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	22e8      	movs	r2, #232	@ 0xe8
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	21e8      	movs	r1, #232	@ 0xe8
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	440b      	add	r3, r1
 8001a72:	7b9b      	ldrb	r3, [r3, #14]
 8001a74:	4618      	mov	r0, r3
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	21e8      	movs	r1, #232	@ 0xe8
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	440b      	add	r3, r1
 8001a82:	4402      	add	r2, r0
 8001a84:	b292      	uxth	r2, r2
 8001a86:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbc4      	blt.n	8001a22 <LTC681x_check_pec+0x3a>
      }
      break;
 8001a98:	e144      	b.n	8001d24 <LTC681x_check_pec+0x33c>

    case CFGRB:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	e036      	b.n	8001b0e <LTC681x_check_pec+0x126>
      {
        ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	22e8      	movs	r2, #232	@ 0xe8
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	21e8      	movs	r1, #232	@ 0xe8
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	440b      	add	r3, r1
 8001abc:	7f5b      	ldrb	r3, [r3, #29]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	21e8      	movs	r1, #232	@ 0xe8
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	440b      	add	r3, r1
 8001acc:	4402      	add	r2, r0
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	22e8      	movs	r2, #232	@ 0xe8
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	21e8      	movs	r1, #232	@ 0xe8
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	440b      	add	r3, r1
 8001af0:	7f5b      	ldrb	r3, [r3, #29]
 8001af2:	4618      	mov	r0, r3
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	21e8      	movs	r1, #232	@ 0xe8
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	440b      	add	r3, r1
 8001b00:	4402      	add	r2, r0
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbc4      	blt.n	8001aa0 <LTC681x_check_pec+0xb8>
      }
      break;
 8001b16:	e105      	b.n	8001d24 <LTC681x_check_pec+0x33c>
    case CELL:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	e050      	b.n	8001bc0 <LTC681x_check_pec+0x1d8>
      {
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	e043      	b.n	8001bac <LTC681x_check_pec+0x1c4>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	22e8      	movs	r2, #232	@ 0xe8
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	21e8      	movs	r1, #232	@ 0xe8
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	4419      	add	r1, r3
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	440b      	add	r3, r1
 8001b44:	3342      	adds	r3, #66	@ 0x42
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	21e8      	movs	r1, #232	@ 0xe8
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	6839      	ldr	r1, [r7, #0]
 8001b54:	440b      	add	r3, r1
 8001b56:	4402      	add	r2, r0
 8001b58:	b292      	uxth	r2, r2
 8001b5a:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	22e8      	movs	r2, #232	@ 0xe8
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	441a      	add	r2, r3
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	3360      	adds	r3, #96	@ 0x60
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	889b      	ldrh	r3, [r3, #4]
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	21e8      	movs	r1, #232	@ 0xe8
 8001b78:	fb01 f202 	mul.w	r2, r1, r2
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	4411      	add	r1, r2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	440a      	add	r2, r1
 8001b84:	3242      	adds	r2, #66	@ 0x42
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	4610      	mov	r0, r2
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	21e8      	movs	r1, #232	@ 0xe8
 8001b8e:	fb01 f202 	mul.w	r2, r1, r2
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	440a      	add	r2, r1
 8001b96:	4403      	add	r3, r0
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	3360      	adds	r3, #96	@ 0x60
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	809a      	strh	r2, [r3, #4]
        for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f893 30df 	ldrb.w	r3, [r3, #223]	@ 0xdf
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	dbb4      	blt.n	8001b24 <LTC681x_check_pec+0x13c>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbaa      	blt.n	8001b1e <LTC681x_check_pec+0x136>
        }
      }
      break;
 8001bc8:	e0ac      	b.n	8001d24 <LTC681x_check_pec+0x33c>
    case AUX:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e04d      	b.n	8001c6c <LTC681x_check_pec+0x284>
      {
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e040      	b.n	8001c58 <LTC681x_check_pec+0x270>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	22e8      	movs	r2, #232	@ 0xe8
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	21e8      	movs	r1, #232	@ 0xe8
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	4419      	add	r1, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	335a      	adds	r3, #90	@ 0x5a
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	21e8      	movs	r1, #232	@ 0xe8
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	440b      	add	r3, r1
 8001c08:	4402      	add	r2, r0
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	22e8      	movs	r2, #232	@ 0xe8
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	3268      	adds	r2, #104	@ 0x68
 8001c20:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	21e8      	movs	r1, #232	@ 0xe8
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	4419      	add	r1, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	440b      	add	r3, r1
 8001c34:	335a      	adds	r3, #90	@ 0x5a
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	21e8      	movs	r1, #232	@ 0xe8
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	6839      	ldr	r1, [r7, #0]
 8001c44:	440b      	add	r3, r1
 8001c46:	4402      	add	r2, r0
 8001c48:	b291      	uxth	r1, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	3268      	adds	r2, #104	@ 0x68
 8001c4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3301      	adds	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	dbb7      	blt.n	8001bd6 <LTC681x_check_pec+0x1ee>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbad      	blt.n	8001bd0 <LTC681x_check_pec+0x1e8>
        }
      }

      break;
 8001c74:	e056      	b.n	8001d24 <LTC681x_check_pec+0x33c>
    case STAT:
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e04d      	b.n	8001d18 <LTC681x_check_pec+0x330>
      {

        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	e040      	b.n	8001d04 <LTC681x_check_pec+0x31c>
        {
          ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	22e8      	movs	r2, #232	@ 0xe8
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	@ 0xc0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	21e8      	movs	r1, #232	@ 0xe8
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	4419      	add	r1, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	336b      	adds	r3, #107	@ 0x6b
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	21e8      	movs	r1, #232	@ 0xe8
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	4402      	add	r2, r0
 8001cb6:	b292      	uxth	r2, r2
 8001cb8:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
          ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	22e8      	movs	r2, #232	@ 0xe8
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	326c      	adds	r2, #108	@ 0x6c
 8001ccc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	21e8      	movs	r1, #232	@ 0xe8
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	4419      	add	r1, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	440b      	add	r3, r1
 8001ce0:	336b      	adds	r3, #107	@ 0x6b
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	21e8      	movs	r1, #232	@ 0xe8
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	440b      	add	r3, r1
 8001cf2:	4402      	add	r2, r0
 8001cf4:	b291      	uxth	r1, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	326c      	adds	r2, #108	@ 0x6c
 8001cfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbb7      	blt.n	8001c82 <LTC681x_check_pec+0x29a>
      for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbad      	blt.n	8001c7c <LTC681x_check_pec+0x294>
        }
      }
      break;
 8001d20:	e000      	b.n	8001d24 <LTC681x_check_pec+0x33c>
    default:
      break;
 8001d22:	bf00      	nop
  }
}
 8001d24:	bf00      	nop
 8001d26:	372c      	adds	r7, #44	@ 0x2c
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LTC681x_reset_crc_count>:

//Helper Function to reset PEC counters
void LTC681x_reset_crc_count(uint8_t total_ic, cell_asic ic[])
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e051      	b.n	8001de6 <LTC681x_reset_crc_count+0xb6>
  {
    ic[current_ic].crc_count.pec_count = 0;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	22e8      	movs	r2, #232	@ 0xe8
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    ic[current_ic].crc_count.cfgr_pec = 0;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	22e8      	movs	r2, #232	@ 0xe8
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
    for (int i=0; i<6; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e00e      	b.n	8001d8a <LTC681x_reset_crc_count+0x5a>
    {
      ic[current_ic].crc_count.cell_pec[i]=0;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	22e8      	movs	r2, #232	@ 0xe8
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	441a      	add	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	3360      	adds	r3, #96	@ 0x60
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	2200      	movs	r2, #0
 8001d82:	809a      	strh	r2, [r3, #4]
    for (int i=0; i<6; i++)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	3301      	adds	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	dded      	ble.n	8001d6c <LTC681x_reset_crc_count+0x3c>

    }
    for (int i=0; i<4; i++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e00d      	b.n	8001db2 <LTC681x_reset_crc_count+0x82>
    {
      ic[current_ic].crc_count.aux_pec[i]=0;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	22e8      	movs	r2, #232	@ 0xe8
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	3268      	adds	r2, #104	@ 0x68
 8001da6:	2100      	movs	r1, #0
 8001da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<4; i++)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	ddee      	ble.n	8001d96 <LTC681x_reset_crc_count+0x66>
    }
    for (int i=0; i<2; i++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	e00d      	b.n	8001dda <LTC681x_reset_crc_count+0xaa>
    {
      ic[current_ic].crc_count.stat_pec[i]=0;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	22e8      	movs	r2, #232	@ 0xe8
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	326c      	adds	r2, #108	@ 0x6c
 8001dce:	2100      	movs	r1, #0
 8001dd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i=0; i<2; i++)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	ddee      	ble.n	8001dbe <LTC681x_reset_crc_count+0x8e>
  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dba9      	blt.n	8001d42 <LTC681x_reset_crc_count+0x12>
    }
  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LTC681x_init_cfg>:
*/
/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e015      	b.n	8001e3a <LTC681x_init_cfg+0x3e>
	{
		for (int j =0; j<6; j++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	e00c      	b.n	8001e2e <LTC681x_init_cfg+0x32>
		{
		  ic[current_ic].config.tx_data[j] = 0;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	22e8      	movs	r2, #232	@ 0xe8
 8001e18:	fb02 f303 	mul.w	r3, r2, r3
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	441a      	add	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4413      	add	r3, r2
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	ddef      	ble.n	8001e14 <LTC681x_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3e5      	bcc.n	8001e0e <LTC681x_init_cfg+0x12>
		}
	}
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LTC681x_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6039      	str	r1, [r7, #0]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	460b      	mov	r3, r1
 8001e62:	71bb      	strb	r3, [r7, #6]
 8001e64:	4613      	mov	r3, r2
 8001e66:	717b      	strb	r3, [r7, #5]
	LTC681x_set_cfgr_refon(nIC,ic,refon);
 8001e68:	79ba      	ldrb	r2, [r7, #6]
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f828 	bl	8001ec4 <LTC681x_set_cfgr_refon>
	LTC681x_set_cfgr_adcopt(nIC,ic,adcopt);
 8001e74:	797a      	ldrb	r2, [r7, #5]
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	6839      	ldr	r1, [r7, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f856 	bl	8001f2c <LTC681x_set_cfgr_adcopt>
	LTC681x_set_cfgr_gpio(nIC,ic,gpio);
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f884 	bl	8001f94 <LTC681x_set_cfgr_gpio>
	LTC681x_set_cfgr_dis(nIC,ic,dcc);
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f8ce 	bl	8002034 <LTC681x_set_cfgr_dis>
	LTC681x_set_cfgr_dcto(nIC,ic,dcto);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f957 	bl	8002152 <LTC681x_set_cfgr_dcto>
	LTC681x_set_cfgr_uv(nIC, ic, uv);
 8001ea4:	8bba      	ldrh	r2, [r7, #28]
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f9a1 	bl	80021f2 <LTC681x_set_cfgr_uv>
	LTC681x_set_cfgr_ov(nIC, ic, ov);
 8001eb0:	8c3a      	ldrh	r2, [r7, #32]
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f9e1 	bl	800227e <LTC681x_set_cfgr_ov>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <LTC681x_set_cfgr_refon>:

//Helper function to set the REFON bit
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic ic[], bool refon)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71bb      	strb	r3, [r7, #6]
  if (refon) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x04;
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d011      	beq.n	8001efe <LTC681x_set_cfgr_refon+0x3a>
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	22e8      	movs	r2, #232	@ 0xe8
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	21e8      	movs	r1, #232	@ 0xe8
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f042 0204 	orr.w	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
}
 8001efc:	e010      	b.n	8001f20 <LTC681x_set_cfgr_refon+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFB;
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	22e8      	movs	r2, #232	@ 0xe8
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	21e8      	movs	r1, #232	@ 0xe8
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	440b      	add	r3, r1
 8001f18:	f022 0204 	bic.w	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LTC681x_set_cfgr_adcopt>:

//Helper function to set the adcopt bit
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic ic[], bool adcopt)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71bb      	strb	r3, [r7, #6]
  if (adcopt) ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|0x01;
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d011      	beq.n	8001f66 <LTC681x_set_cfgr_adcopt+0x3a>
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	22e8      	movs	r2, #232	@ 0xe8
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	21e8      	movs	r1, #232	@ 0xe8
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
}
 8001f64:	e010      	b.n	8001f88 <LTC681x_set_cfgr_adcopt+0x5c>
  else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&0xFE;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	22e8      	movs	r2, #232	@ 0xe8
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	21e8      	movs	r1, #232	@ 0xe8
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	440b      	add	r3, r1
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LTC681x_set_cfgr_gpio>:

//Helper function to set GPIO bits
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic ic[],bool gpio[5])
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<5; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e03b      	b.n	8002020 <LTC681x_set_cfgr_gpio+0x8c>
  {
    if (gpio[i])ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]|(0x01<<(i+3));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d018      	beq.n	8001fe6 <LTC681x_set_cfgr_gpio+0x52>
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	22e8      	movs	r2, #232	@ 0xe8
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b25a      	sxtb	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3303      	adds	r3, #3
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b259      	sxtb	r1, r3
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	22e8      	movs	r2, #232	@ 0xe8
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e019      	b.n	800201a <LTC681x_set_cfgr_gpio+0x86>
    else ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]&(~(0x01<<(i+3)));
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	22e8      	movs	r2, #232	@ 0xe8
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b25a      	sxtb	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	b25b      	sxtb	r3, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	b25b      	sxtb	r3, r3
 8002006:	4013      	ands	r3, r2
 8002008:	b259      	sxtb	r1, r3
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	22e8      	movs	r2, #232	@ 0xe8
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4413      	add	r3, r2
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
  for (int i =0; i<5; i++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b04      	cmp	r3, #4
 8002024:	ddc0      	ble.n	8001fa8 <LTC681x_set_cfgr_gpio+0x14>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LTC681x_set_cfgr_dis>:

//Helper function to control discharge
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic ic[],bool dcc[12])
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	73fb      	strb	r3, [r7, #15]
  for (int i =0; i<8; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e039      	b.n	80020bc <LTC681x_set_cfgr_dis+0x88>
  {
    if (dcc[i])ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]|(0x01<<i);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <LTC681x_set_cfgr_dis+0x50>
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	22e8      	movs	r2, #232	@ 0xe8
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4413      	add	r3, r2
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	b25a      	sxtb	r2, r3
 8002064:	2101      	movs	r1, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b259      	sxtb	r1, r3
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	22e8      	movs	r2, #232	@ 0xe8
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	4413      	add	r3, r2
 800207e:	b2ca      	uxtb	r2, r1
 8002080:	711a      	strb	r2, [r3, #4]
 8002082:	e018      	b.n	80020b6 <LTC681x_set_cfgr_dis+0x82>
    else ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]& (~(0x01<<i));
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	22e8      	movs	r2, #232	@ 0xe8
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	4413      	add	r3, r2
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	b25a      	sxtb	r2, r3
 8002094:	2101      	movs	r1, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	4013      	ands	r3, r2
 80020a4:	b259      	sxtb	r1, r3
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	22e8      	movs	r2, #232	@ 0xe8
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4413      	add	r3, r2
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	711a      	strb	r2, [r3, #4]
  for (int i =0; i<8; i++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b07      	cmp	r3, #7
 80020c0:	ddc2      	ble.n	8002048 <LTC681x_set_cfgr_dis+0x14>
  }
  for (int i =0; i<4; i++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e03a      	b.n	800213e <LTC681x_set_cfgr_dis+0x10a>
  {
    if (dcc[i+8])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<i);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3308      	adds	r3, #8
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d017      	beq.n	8002106 <LTC681x_set_cfgr_dis+0xd2>
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	22e8      	movs	r2, #232	@ 0xe8
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	795b      	ldrb	r3, [r3, #5]
 80020e4:	b25a      	sxtb	r2, r3
 80020e6:	2101      	movs	r1, #1
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	4313      	orrs	r3, r2
 80020f2:	b259      	sxtb	r1, r3
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	22e8      	movs	r2, #232	@ 0xe8
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	b2ca      	uxtb	r2, r1
 8002102:	715a      	strb	r2, [r3, #5]
 8002104:	e018      	b.n	8002138 <LTC681x_set_cfgr_dis+0x104>
    else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<i));
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	22e8      	movs	r2, #232	@ 0xe8
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	795b      	ldrb	r3, [r3, #5]
 8002114:	b25a      	sxtb	r2, r3
 8002116:	2101      	movs	r1, #1
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	b25b      	sxtb	r3, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	b25b      	sxtb	r3, r3
 8002124:	4013      	ands	r3, r2
 8002126:	b259      	sxtb	r1, r3
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	22e8      	movs	r2, #232	@ 0xe8
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	4413      	add	r3, r2
 8002134:	b2ca      	uxtb	r2, r1
 8002136:	715a      	strb	r2, [r3, #5]
  for (int i =0; i<4; i++)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b03      	cmp	r3, #3
 8002142:	ddc1      	ble.n	80020c8 <LTC681x_set_cfgr_dis+0x94>
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic,bool dcto[4])
{
 8002152:	b480      	push	{r7}
 8002154:	b087      	sub	sp, #28
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
	for(int i =0;i<4;i++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e03b      	b.n	80021de <LTC681x_set_cfgr_dcto+0x8c>
	{
		if(dcto[i])ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]|(0x01<<(i+4));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d018      	beq.n	80021a4 <LTC681x_set_cfgr_dcto+0x52>
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	22e8      	movs	r2, #232	@ 0xe8
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4413      	add	r3, r2
 800217e:	795b      	ldrb	r3, [r3, #5]
 8002180:	b25a      	sxtb	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3304      	adds	r3, #4
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	b25b      	sxtb	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b259      	sxtb	r1, r3
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	22e8      	movs	r2, #232	@ 0xe8
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	715a      	strb	r2, [r3, #5]
 80021a2:	e019      	b.n	80021d8 <LTC681x_set_cfgr_dcto+0x86>
		else ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]&(~(0x01<<(i+4)));
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	22e8      	movs	r2, #232	@ 0xe8
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	4413      	add	r3, r2
 80021b0:	795b      	ldrb	r3, [r3, #5]
 80021b2:	b25a      	sxtb	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3304      	adds	r3, #4
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	4013      	ands	r3, r2
 80021c6:	b259      	sxtb	r1, r3
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	22e8      	movs	r2, #232	@ 0xe8
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	4413      	add	r3, r2
 80021d4:	b2ca      	uxtb	r2, r1
 80021d6:	715a      	strb	r2, [r3, #5]
	for(int i =0;i<4;i++)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	ddc0      	ble.n	8002166 <LTC681x_set_cfgr_dcto+0x14>
	}
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LTC681x_set_cfgr_uv>:

//Helper Function to set uv value in CFG register
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic ic[],uint16_t uv)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	6039      	str	r1, [r7, #0]
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	4613      	mov	r3, r2
 8002200:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (uv/16)-1;
 8002202:	88bb      	ldrh	r3, [r7, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	22e8      	movs	r2, #232	@ 0xe8
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4413      	add	r3, r2
 8002218:	89fa      	ldrh	r2, [r7, #14]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	705a      	strb	r2, [r3, #1]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0xF0;
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	22e8      	movs	r2, #232	@ 0xe8
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	789a      	ldrb	r2, [r3, #2]
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	21e8      	movs	r1, #232	@ 0xe8
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	440b      	add	r3, r1
 8002238:	f022 020f 	bic.w	r2, r2, #15
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x0F00 & tmp)>>8);
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	22e8      	movs	r2, #232	@ 0xe8
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	b25a      	sxtb	r2, r3
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29b      	uxth	r3, r3
 8002256:	b25b      	sxtb	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	b25b      	sxtb	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b259      	sxtb	r1, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	22e8      	movs	r2, #232	@ 0xe8
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4413      	add	r3, r2
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	709a      	strb	r2, [r3, #2]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LTC681x_set_cfgr_ov>:

//helper function to set OV value in CFG register
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic ic[],uint16_t ov)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	6039      	str	r1, [r7, #0]
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	4613      	mov	r3, r2
 800228c:	80bb      	strh	r3, [r7, #4]
  uint16_t tmp = (ov/16);
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	81fb      	strh	r3, [r7, #14]
  ic[nIC].config.tx_data[3] = 0x00FF & (tmp>>4);
 8002294:	89fb      	ldrh	r3, [r7, #14]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	b299      	uxth	r1, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	22e8      	movs	r2, #232	@ 0xe8
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	70da      	strb	r2, [r3, #3]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]&0x0F;
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	22e8      	movs	r2, #232	@ 0xe8
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	789a      	ldrb	r2, [r3, #2]
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	21e8      	movs	r1, #232	@ 0xe8
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	440b      	add	r3, r1
 80022c4:	f002 020f 	and.w	r2, r2, #15
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	709a      	strb	r2, [r3, #2]
  ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]|((0x000F & tmp)<<4);
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	22e8      	movs	r2, #232	@ 0xe8
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	b25a      	sxtb	r2, r3
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b259      	sxtb	r1, r3
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	22e8      	movs	r2, #232	@ 0xe8
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	b2ca      	uxtb	r2, r1
 80022f6:	709a      	strb	r2, [r3, #2]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <cs_low>:
//    //_Error_Handler(__FILE__, __LINE__);
//  }
//}

void cs_low(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
    // Set chip select pin low.
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	2110      	movs	r1, #16
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <cs_low+0x14>)
 800230e:	f003 fd21 	bl	8005d54 <HAL_GPIO_WritePin>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	42020000 	.word	0x42020000

0800231c <cs_high>:

void cs_high(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LTC6811_CHIP_SELECT_GPIO_PORT, LTC6811_CHIP_SELECT_GPIO_PIN, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2110      	movs	r1, #16
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <cs_high+0x14>)
 8002326:	f003 fd15 	bl	8005d54 <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	42020000 	.word	0x42020000

08002334 <spi_write_array>:
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data, &ret_val, 1, HAL_MAX_DELAY);
}

void spi_write_array(uint8_t len,
                     uint8_t data[])
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af02      	add	r7, sp, #8
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
    uint8_t ret_val;
    uint8_t i;

    for ( i = 0; i < len; i++ )
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e00e      	b.n	8002364 <spi_write_array+0x30>
    {
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&data[i], &ret_val, 1, HAL_MAX_DELAY);
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	18d1      	adds	r1, r2, r3
 800234c:	f107 020e 	add.w	r2, r7, #14
 8002350:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	4807      	ldr	r0, [pc, #28]	@ (8002378 <spi_write_array+0x44>)
 800235a:	f007 f9d0 	bl	80096fe <HAL_SPI_TransmitReceive>
    for ( i = 0; i < len; i++ )
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	3301      	adds	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	429a      	cmp	r2, r3
 800236a:	d3ec      	bcc.n	8002346 <spi_write_array+0x12>
    }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200003fc 	.word	0x200003fc

0800237c <spi_write_read>:

void spi_write_read(uint8_t  tx_Data[],
                    uint8_t  tx_len,
                    uint8_t* rx_data,
                    uint8_t  rx_len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	72fb      	strb	r3, [r7, #11]
 800238c:	4613      	mov	r3, r2
 800238e:	72bb      	strb	r3, [r7, #10]
    uint8_t i;
    uint8_t data;

    // Transfer data to LTC6803
    for ( i = 0; i < tx_len; i++ )
 8002390:	2300      	movs	r3, #0
 8002392:	75fb      	strb	r3, [r7, #23]
 8002394:	e00e      	b.n	80023b4 <spi_write_read+0x38>
    {
        // Transmit byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_Data[i], &data, 1, HAL_MAX_DELAY);
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	18d1      	adds	r1, r2, r3
 800239c:	f107 0216 	add.w	r2, r7, #22
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2301      	movs	r3, #1
 80023a8:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <spi_write_read+0x7c>)
 80023aa:	f007 f9a8 	bl	80096fe <HAL_SPI_TransmitReceive>
    for ( i = 0; i < tx_len; i++ )
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	3301      	adds	r3, #1
 80023b2:	75fb      	strb	r3, [r7, #23]
 80023b4:	7dfa      	ldrb	r2, [r7, #23]
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3ec      	bcc.n	8002396 <spi_write_read+0x1a>
    }

    // Receive data from DC2259A board.
    uint8_t adress = 0xFF;
 80023bc:	23ff      	movs	r3, #255	@ 0xff
 80023be:	757b      	strb	r3, [r7, #21]
    for ( i = 0; i < rx_len; i++ )
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]
 80023c4:	e00e      	b.n	80023e4 <spi_write_read+0x68>
    {
        // Receive byte.
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&adress, (uint8_t*)&rx_data[i], 1, HAL_MAX_DELAY);
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	441a      	add	r2, r3
 80023cc:	f107 0115 	add.w	r1, r7, #21
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2301      	movs	r3, #1
 80023d8:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <spi_write_read+0x7c>)
 80023da:	f007 f990 	bl	80096fe <HAL_SPI_TransmitReceive>
    for ( i = 0; i < rx_len; i++ )
 80023de:	7dfb      	ldrb	r3, [r7, #23]
 80023e0:	3301      	adds	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
 80023e4:	7dfa      	ldrb	r2, [r7, #23]
 80023e6:	7abb      	ldrb	r3, [r7, #10]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3ec      	bcc.n	80023c6 <spi_write_read+0x4a>
    }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003fc 	.word	0x200003fc

080023fc <spi_read_byte>:

// spi_read_byte

uint8_t spi_read_byte(uint8_t tx_dat)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
    uint8_t data;

    if ( HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx_dat, (uint8_t*)&data, 1, HAL_MAX_DELAY) == HAL_OK )
 8002406:	f107 020f 	add.w	r2, r7, #15
 800240a:	1df9      	adds	r1, r7, #7
 800240c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2301      	movs	r3, #1
 8002414:	4806      	ldr	r0, [pc, #24]	@ (8002430 <spi_read_byte+0x34>)
 8002416:	f007 f972 	bl	80096fe <HAL_SPI_TransmitReceive>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <spi_read_byte+0x28>
    {
        return(data);
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	e000      	b.n	8002426 <spi_read_byte+0x2a>
    }
		return(-1);
 8002424:	23ff      	movs	r3, #255	@ 0xff
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200003fc 	.word	0x200003fc

08002434 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
 8002454:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002456:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002458:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <MX_ADC1_Init+0xf0>)
 800245a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <MX_ADC1_Init+0xec>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002462:	4b2f      	ldr	r3, [pc, #188]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002468:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <MX_ADC1_Init+0xec>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800246e:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002474:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002476:	2204      	movs	r2, #4
 8002478:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800247a:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <MX_ADC1_Init+0xec>)
 800247c:	2200      	movs	r2, #0
 800247e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002480:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002482:	2200      	movs	r2, #0
 8002484:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002488:	2201      	movs	r2, #1
 800248a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800248c:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <MX_ADC1_Init+0xec>)
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <MX_ADC1_Init+0xec>)
 8002496:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <MX_ADC1_Init+0xec>)
 800249e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <MX_ADC1_Init+0xec>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <MX_ADC1_Init+0xec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <MX_ADC1_Init+0xec>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024ba:	4819      	ldr	r0, [pc, #100]	@ (8002520 <MX_ADC1_Init+0xec>)
 80024bc:	f001 fd6c 	bl	8003f98 <HAL_ADC_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80024c6:	f000 fd0d 	bl	8002ee4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80024ca:	2306      	movs	r3, #6
 80024cc:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80024d6:	f107 031c 	add.w	r3, r7, #28
 80024da:	4619      	mov	r1, r3
 80024dc:	4810      	ldr	r0, [pc, #64]	@ (8002520 <MX_ADC1_Init+0xec>)
 80024de:	f002 fc99 	bl	8004e14 <HAL_ADCEx_MultiModeConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80024e8:	f000 fcfc 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <MX_ADC1_Init+0xf4>)
 80024ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024f0:	2306      	movs	r3, #6
 80024f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <MX_ADC1_Init+0xf8>)
 80024fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024fc:	2304      	movs	r3, #4
 80024fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	@ (8002520 <MX_ADC1_Init+0xec>)
 800250a:	f001 ff59 	bl	80043c0 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002514:	f000 fce6 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	@ 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200001c8 	.word	0x200001c8
 8002524:	42028000 	.word	0x42028000
 8002528:	0c900008 	.word	0x0c900008
 800252c:	407f0000 	.word	0x407f0000

08002530 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002536:	463b      	mov	r3, r7
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
 8002544:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002546:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002548:	4a26      	ldr	r2, [pc, #152]	@ (80025e4 <MX_ADC2_Init+0xb4>)
 800254a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800254c:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800255e:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002564:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002566:	2204      	movs	r2, #4
 8002568:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800256a:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 800256c:	2200      	movs	r2, #0
 800256e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002572:	2200      	movs	r2, #0
 8002574:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002576:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002578:	2201      	movs	r2, #1
 800257a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800257c:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002584:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 800258e:	2200      	movs	r2, #0
 8002590:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800259a:	4811      	ldr	r0, [pc, #68]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 800259c:	f001 fcfc 	bl	8003f98 <HAL_ADC_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 80025a6:	f000 fc9d 	bl	8002ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80025aa:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <MX_ADC2_Init+0xb8>)
 80025ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ae:	2306      	movs	r3, #6
 80025b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80025b6:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <MX_ADC2_Init+0xbc>)
 80025b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025ba:	2304      	movs	r3, #4
 80025bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80025c2:	463b      	mov	r3, r7
 80025c4:	4619      	mov	r1, r3
 80025c6:	4806      	ldr	r0, [pc, #24]	@ (80025e0 <MX_ADC2_Init+0xb0>)
 80025c8:	f001 fefa 	bl	80043c0 <HAL_ADC_ConfigChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80025d2:	f000 fc87 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000230 	.word	0x20000230
 80025e4:	42028100 	.word	0x42028100
 80025e8:	1d500080 	.word	0x1d500080
 80025ec:	407f0000 	.word	0x407f0000

080025f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0b0      	sub	sp, #192	@ 0xc0
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	2294      	movs	r2, #148	@ 0x94
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f00c fd43 	bl	800f09c <memset>
  if(adcHandle->Instance==ADC1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a8b      	ldr	r2, [pc, #556]	@ (8002848 <HAL_ADC_MspInit+0x258>)
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 8085 	bne.w	800272c <HAL_ADC_MspInit+0x13c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002622:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002626:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002628:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800262c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8002630:	2301      	movs	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002634:	2301      	movs	r3, #1
 8002636:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8002638:	230c      	movs	r3, #12
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800263c:	2307      	movs	r3, #7
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002640:	2302      	movs	r3, #2
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002644:	2302      	movs	r3, #2
 8002646:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002648:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800264c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	4618      	mov	r0, r3
 8002654:	f005 ffd8 	bl	8008608 <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800265e:	f000 fc41 	bl	8002ee4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002662:	4b7a      	ldr	r3, [pc, #488]	@ (800284c <HAL_ADC_MspInit+0x25c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a78      	ldr	r2, [pc, #480]	@ (800284c <HAL_ADC_MspInit+0x25c>)
 800266a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800266c:	4b77      	ldr	r3, [pc, #476]	@ (800284c <HAL_ADC_MspInit+0x25c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10b      	bne.n	800268c <HAL_ADC_MspInit+0x9c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002674:	4b76      	ldr	r3, [pc, #472]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002678:	4a75      	ldr	r2, [pc, #468]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 800267a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800267e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002680:	4b73      	ldr	r3, [pc, #460]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268c:	4b70      	ldr	r3, [pc, #448]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4a6f      	ldr	r2, [pc, #444]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002698:	4b6d      	ldr	r3, [pc, #436]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ChargeCurrent_Pin|ChargeCurrRef_Pin;
 80026a4:	230c      	movs	r3, #12
 80026a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026ba:	4619      	mov	r1, r3
 80026bc:	4865      	ldr	r0, [pc, #404]	@ (8002854 <HAL_ADC_MspInit+0x264>)
 80026be:	f003 f9c9 	bl	8005a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80026c2:	4b65      	ldr	r3, [pc, #404]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026c4:	4a65      	ldr	r2, [pc, #404]	@ (800285c <HAL_ADC_MspInit+0x26c>)
 80026c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026c8:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026ca:	2205      	movs	r2, #5
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ce:	4b62      	ldr	r3, [pc, #392]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80026da:	4b5f      	ldr	r3, [pc, #380]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026f0:	4b59      	ldr	r3, [pc, #356]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026f2:	2220      	movs	r2, #32
 80026f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026f6:	4b58      	ldr	r3, [pc, #352]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026fc:	4856      	ldr	r0, [pc, #344]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 80026fe:	f002 fd0d 	bl	800511c <HAL_DMA_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_ADC_MspInit+0x11c>
    {
      Error_Handler();
 8002708:	f000 fbec 	bl	8002ee4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800270c:	2110      	movs	r1, #16
 800270e:	4852      	ldr	r0, [pc, #328]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 8002710:	f002 ff27 	bl	8005562 <HAL_DMA_ConfigChannelAttributes>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 800271a:	f000 fbe3 	bl	8002ee4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4d      	ldr	r2, [pc, #308]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 8002722:	651a      	str	r2, [r3, #80]	@ 0x50
 8002724:	4a4c      	ldr	r2, [pc, #304]	@ (8002858 <HAL_ADC_MspInit+0x268>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800272a:	e089      	b.n	8002840 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a4b      	ldr	r2, [pc, #300]	@ (8002860 <HAL_ADC_MspInit+0x270>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f040 8084 	bne.w	8002840 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002738:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800273c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800273e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002742:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800274e:	230c      	movs	r3, #12
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002752:	2307      	movs	r3, #7
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002756:	2302      	movs	r3, #2
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800275a:	2302      	movs	r3, #2
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800275e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	4618      	mov	r0, r3
 800276a:	f005 ff4d 	bl	8008608 <HAL_RCCEx_PeriphCLKConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8002774:	f000 fbb6 	bl	8002ee4 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002778:	4b34      	ldr	r3, [pc, #208]	@ (800284c <HAL_ADC_MspInit+0x25c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	4a33      	ldr	r2, [pc, #204]	@ (800284c <HAL_ADC_MspInit+0x25c>)
 8002780:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002782:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_ADC_MspInit+0x25c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10b      	bne.n	80027a2 <HAL_ADC_MspInit+0x1b2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800278a:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 8002790:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002796:	4b2e      	ldr	r3, [pc, #184]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ae:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <HAL_ADC_MspInit+0x260>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DischgCurr_Pin|DischgCurrRef_Pin;
 80027ba:	230c      	movs	r3, #12
 80027bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c0:	2303      	movs	r3, #3
 80027c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027d0:	4619      	mov	r1, r3
 80027d2:	4824      	ldr	r0, [pc, #144]	@ (8002864 <HAL_ADC_MspInit+0x274>)
 80027d4:	f003 f93e 	bl	8005a54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 80027da:	4a24      	ldr	r2, [pc, #144]	@ (800286c <HAL_ADC_MspInit+0x27c>)
 80027dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80027de:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 80027e0:	2206      	movs	r2, #6
 80027e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e4:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 80027f2:	2280      	movs	r2, #128	@ 0x80
 80027f4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 80027f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 8002800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002804:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002806:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 8002808:	2220      	movs	r2, #32
 800280a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800280c:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002812:	4815      	ldr	r0, [pc, #84]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 8002814:	f002 fc82 	bl	800511c <HAL_DMA_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_ADC_MspInit+0x232>
      Error_Handler();
 800281e:	f000 fb61 	bl	8002ee4 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002822:	2110      	movs	r1, #16
 8002824:	4810      	ldr	r0, [pc, #64]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 8002826:	f002 fe9c 	bl	8005562 <HAL_DMA_ConfigChannelAttributes>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8002830:	f000 fb58 	bl	8002ee4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0c      	ldr	r2, [pc, #48]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 8002838:	651a      	str	r2, [r3, #80]	@ 0x50
 800283a:	4a0b      	ldr	r2, [pc, #44]	@ (8002868 <HAL_ADC_MspInit+0x278>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002840:	bf00      	nop
 8002842:	37c0      	adds	r7, #192	@ 0xc0
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	42028000 	.word	0x42028000
 800284c:	20000368 	.word	0x20000368
 8002850:	40021000 	.word	0x40021000
 8002854:	42020800 	.word	0x42020800
 8002858:	20000298 	.word	0x20000298
 800285c:	4002001c 	.word	0x4002001c
 8002860:	42028100 	.word	0x42028100
 8002864:	42020000 	.word	0x42020000
 8002868:	20000300 	.word	0x20000300
 800286c:	40020008 	.word	0x40020008

08002870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <MX_DMA_Init+0x60>)
 8002878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287a:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <MX_DMA_Init+0x60>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6493      	str	r3, [r2, #72]	@ 0x48
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <MX_DMA_Init+0x60>)
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <MX_DMA_Init+0x60>)
 8002890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002892:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <MX_DMA_Init+0x60>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6493      	str	r3, [r2, #72]	@ 0x48
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <MX_DMA_Init+0x60>)
 800289c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2105      	movs	r1, #5
 80028aa:	201d      	movs	r0, #29
 80028ac:	f002 fc0e 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028b0:	201d      	movs	r0, #29
 80028b2:	f002 fc25 	bl	8005100 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2105      	movs	r1, #5
 80028ba:	201e      	movs	r0, #30
 80028bc:	f002 fc06 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028c0:	201e      	movs	r0, #30
 80028c2:	f002 fc1d 	bl	8005100 <HAL_NVIC_EnableIRQ>

}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028da:	4a20      	ldr	r2, [pc, #128]	@ (800295c <MX_FDCAN1_Init+0x88>)
 80028dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80028de:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80028f6:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80028fc:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 80028fe:	2200      	movs	r2, #0
 8002900:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002904:	2210      	movs	r2, #16
 8002906:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002908:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 800290a:	2201      	movs	r2, #1
 800290c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002910:	2201      	movs	r2, #1
 8002912:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8002914:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002916:	2201      	movs	r2, #1
 8002918:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800291a:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 800291c:	2201      	movs	r2, #1
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002920:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002922:	2201      	movs	r2, #1
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002926:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002928:	2201      	movs	r2, #1
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 800292e:	2201      	movs	r2, #1
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002934:	2200      	movs	r2, #0
 8002936:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002938:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 800293a:	2200      	movs	r2, #0
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002940:	2200      	movs	r2, #0
 8002942:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	@ (8002958 <MX_FDCAN1_Init+0x84>)
 8002946:	f002 fedd 	bl	8005704 <HAL_FDCAN_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002950:	f000 fac8 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000036c 	.word	0x2000036c
 800295c:	4000a400 	.word	0x4000a400

08002960 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0ae      	sub	sp, #184	@ 0xb8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2294      	movs	r2, #148	@ 0x94
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f00c fb8b 	bl	800f09c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_FDCAN_MspInit+0xb4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d13d      	bne.n	8002a0c <HAL_FDCAN_MspInit+0xac>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002990:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002994:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002996:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800299a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	4618      	mov	r0, r3
 80029a2:	f005 fe31 	bl	8008608 <HAL_RCCEx_PeriphCLKConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80029ac:	f000 fa9a 	bl	8002ee4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_FDCAN_MspInit+0xb8>)
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_FDCAN_MspInit+0xb8>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80029bc:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_FDCAN_MspInit+0xb8>)
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <HAL_FDCAN_MspInit+0xb8>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_FDCAN_MspInit+0xb8>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d4:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_FDCAN_MspInit+0xb8>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80029fa:	2309      	movs	r3, #9
 80029fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4805      	ldr	r0, [pc, #20]	@ (8002a1c <HAL_FDCAN_MspInit+0xbc>)
 8002a08:	f003 f824 	bl	8005a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	37b8      	adds	r7, #184	@ 0xb8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	4000a400 	.word	0x4000a400
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	42020400 	.word	0x42020400

08002a20 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	@ 0x28
 8002a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a36:	4b71      	ldr	r3, [pc, #452]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	4a70      	ldr	r2, [pc, #448]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a42:	4b6e      	ldr	r3, [pc, #440]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5a:	4b68      	ldr	r3, [pc, #416]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	4b65      	ldr	r3, [pc, #404]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	4a64      	ldr	r2, [pc, #400]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a72:	4b62      	ldr	r3, [pc, #392]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	4a5e      	ldr	r2, [pc, #376]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a96:	4b59      	ldr	r3, [pc, #356]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	4a58      	ldr	r2, [pc, #352]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aa2:	4b56      	ldr	r3, [pc, #344]	@ (8002bfc <MX_GPIO_Init+0x1dc>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f643 7111 	movw	r1, #16145	@ 0x3f11
 8002ab4:	4852      	ldr	r0, [pc, #328]	@ (8002c00 <MX_GPIO_Init+0x1e0>)
 8002ab6:	f003 f94d 	bl	8005d54 <HAL_GPIO_WritePin>
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A1_8_GPIO_Port, A1_8_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2101      	movs	r1, #1
 8002abe:	4851      	ldr	r0, [pc, #324]	@ (8002c04 <MX_GPIO_Init+0x1e4>)
 8002ac0:	f003 f948 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|A1_2_Pin|A1_3_Pin|A1_4_Pin, GPIO_PIN_RESET);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8002aca:	484f      	ldr	r0, [pc, #316]	@ (8002c08 <MX_GPIO_Init+0x1e8>)
 8002acc:	f003 f942 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f643 41f3 	movw	r1, #15603	@ 0x3cf3
 8002ad6:	484d      	ldr	r0, [pc, #308]	@ (8002c0c <MX_GPIO_Init+0x1ec>)
 8002ad8:	f003 f93c 	bl	8005d54 <HAL_GPIO_WritePin>
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A0_4_GPIO_Port, A0_4_Pin, GPIO_PIN_RESET);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2104      	movs	r1, #4
 8002ae0:	484b      	ldr	r0, [pc, #300]	@ (8002c10 <MX_GPIO_Init+0x1f0>)
 8002ae2:	f003 f937 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_7_Pin WDT_Stm_Pin Enable1_Pin A1_1_Pin
                           A0_1_Pin A1_5_Pin A0_2_Pin A0_3_Pin */
  GPIO_InitStruct.Pin = A1_7_Pin|WDT_Stm_Pin|Enable1_Pin|A1_1_Pin
 8002ae6:	f643 7311 	movw	r3, #16145	@ 0x3f11
 8002aea:	617b      	str	r3, [r7, #20]
                          |A0_1_Pin|A1_5_Pin|A0_2_Pin|A0_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4840      	ldr	r0, [pc, #256]	@ (8002c00 <MX_GPIO_Init+0x1e0>)
 8002b00:	f002 ffa8 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : A1_8_Pin */
  GPIO_InitStruct.Pin = A1_8_Pin;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A1_8_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	483a      	ldr	r0, [pc, #232]	@ (8002c04 <MX_GPIO_Init+0x1e4>)
 8002b1c:	f002 ff9a 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_8_Pin */
  GPIO_InitStruct.Pin = A0_8_Pin;
 8002b20:	2302      	movs	r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_8_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4619      	mov	r1, r3
 8002b32:	4834      	ldr	r0, [pc, #208]	@ (8002c04 <MX_GPIO_Init+0x1e4>)
 8002b34:	f002 ff8e 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : HardwareFault_Pin OutputEnable_Pin */
  GPIO_InitStruct.Pin = HardwareFault_Pin|OutputEnable_Pin;
 8002b38:	2322      	movs	r3, #34	@ 0x22
 8002b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	482d      	ldr	r0, [pc, #180]	@ (8002c00 <MX_GPIO_Init+0x1e0>)
 8002b4c:	f002 ff82 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTCSelfTestOK_Pin LTCSelfTest_Pin */
  GPIO_InitStruct.Pin = LTCSelfTestOK_Pin|LTCSelfTest_Pin;
 8002b50:	2303      	movs	r3, #3
 8002b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4829      	ldr	r0, [pc, #164]	@ (8002c08 <MX_GPIO_Init+0x1e8>)
 8002b64:	f002 ff76 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin A1_2_Pin A1_3_Pin A1_4_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|A1_2_Pin|A1_3_Pin|A1_4_Pin;
 8002b68:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8002b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4821      	ldr	r0, [pc, #132]	@ (8002c08 <MX_GPIO_Init+0x1e8>)
 8002b82:	f002 ff67 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable2_Pin ErrorReset_Pin LED_A_Pin LED_R_Pin
                           LED_Y_Pin LED_G_Pin A0_5_Pin A1_6_Pin
                           A0_6_Pin A0_7_Pin */
  GPIO_InitStruct.Pin = Enable2_Pin|ErrorReset_Pin|LED_A_Pin|LED_R_Pin
 8002b86:	f643 43f3 	movw	r3, #15603	@ 0x3cf3
 8002b8a:	617b      	str	r3, [r7, #20]
                          |LED_Y_Pin|LED_G_Pin|A0_5_Pin|A1_6_Pin
                          |A0_6_Pin|A0_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	481b      	ldr	r0, [pc, #108]	@ (8002c0c <MX_GPIO_Init+0x1ec>)
 8002ba0:	f002 ff58 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Config1_Pin Config2_Pin */
  GPIO_InitStruct.Pin = Config1_Pin|Config2_Pin;
 8002ba4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4814      	ldr	r0, [pc, #80]	@ (8002c0c <MX_GPIO_Init+0x1ec>)
 8002bba:	f002 ff4b 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Config3_Pin Config4_Pin */
  GPIO_InitStruct.Pin = Config3_Pin|Config4_Pin;
 8002bbe:	23c0      	movs	r3, #192	@ 0xc0
 8002bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480b      	ldr	r0, [pc, #44]	@ (8002c00 <MX_GPIO_Init+0x1e0>)
 8002bd2:	f002 ff3f 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_4_Pin */
  GPIO_InitStruct.Pin = A0_4_Pin;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A0_4_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4808      	ldr	r0, [pc, #32]	@ (8002c10 <MX_GPIO_Init+0x1f0>)
 8002bee:	f002 ff31 	bl	8005a54 <HAL_GPIO_Init>

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	@ 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	42020800 	.word	0x42020800
 8002c04:	42021c00 	.word	0x42021c00
 8002c08:	42020000 	.word	0x42020000
 8002c0c:	42020400 	.word	0x42020400
 8002c10:	42020c00 	.word	0x42020c00

08002c14 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f003 f8cd 	bl	8005db8 <HAL_ICACHE_ConfigAssociativityMode>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8002c24:	f000 f95e 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002c28:	f003 f8e6 	bl	8005df8 <HAL_ICACHE_Enable>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8002c32:	f000 f957 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c40:	f000 ff63 	bl	8003b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c44:	f000 f88a 	bl	8002d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c48:	f7ff feea 	bl	8002a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c4c:	f7ff fe10 	bl	8002870 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002c50:	f7ff fe40 	bl	80028d4 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8002c54:	f000 f94c 	bl	8002ef0 <MX_RTC_Init>
  MX_ADC1_Init();
 8002c58:	f7ff fbec 	bl	8002434 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002c5c:	f000 fa34 	bl	80030c8 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8002c60:	f7ff ffd8 	bl	8002c14 <MX_ICACHE_Init>
  MX_ADC2_Init();
 8002c64:	f7ff fc64 	bl	8002530 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002c68:	f000 fc90 	bl	800358c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c6c:	f000 fd02 	bl	8003674 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c70:	f000 fd78 	bl	8003764 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c74:	f000 fdee 	bl	8003854 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c78:	f000 fe3e 	bl	80038f8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  LTC6811_init();	//initializes the LTC (and SPI communication)
 8002c7c:	f7fd ff9c 	bl	8000bb8 <LTC6811_init>

  //START ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcVal[0], 1);
 8002c80:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <main+0xf0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4619      	mov	r1, r3
 8002c88:	4829      	ldr	r0, [pc, #164]	@ (8002d30 <main+0xf4>)
 8002c8a:	f001 fad1 	bl	8004230 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adcVal[1], 1);
 8002c8e:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <main+0xf0>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	4619      	mov	r1, r3
 8002c96:	4827      	ldr	r0, [pc, #156]	@ (8002d34 <main+0xf8>)
 8002c98:	f001 faca 	bl	8004230 <HAL_ADC_Start_DMA>

  //START TIMERS
  HAL_TIM_Base_Start(&htim8);	//Triggers ADCs
 8002c9c:	4826      	ldr	r0, [pc, #152]	@ (8002d38 <main+0xfc>)
 8002c9e:	f007 f90d 	bl	8009ebc <HAL_TIM_Base_Start>

  //Essayer de lire les valeurs par timer pas possible non plus fault handler direct aussi

  HAL_TIM_Base_Start_IT(&htim5); // Triggers Reading of aux conversion
 8002ca2:	4826      	ldr	r0, [pc, #152]	@ (8002d3c <main+0x100>)
 8002ca4:	f007 f972 	bl	8009f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Triggers aux conversion
 8002ca8:	4825      	ldr	r0, [pc, #148]	@ (8002d40 <main+0x104>)
 8002caa:	f007 f96f 	bl	8009f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // Triggers Reading of voltage conversion
 8002cae:	4825      	ldr	r0, [pc, #148]	@ (8002d44 <main+0x108>)
 8002cb0:	f007 f96c 	bl	8009f8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // Triggers voltage conversion
 8002cb4:	4824      	ldr	r0, [pc, #144]	@ (8002d48 <main+0x10c>)
 8002cb6:	f007 f969 	bl	8009f8c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flagTIM2){
 8002cba:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <main+0x110>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <main+0x9c>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7fe fa2b 	bl	800111e <wakeup_idle>
		  LTC6811_adcv(MD_27KHZ_14KHZ, DCP_DISABLED, CELL_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7fe f984 	bl	8000fda <LTC6811_adcv>
		  flagTIM2 = false;	//sets the flag to false
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <main+0x110>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
	  }
	  if(FLAG_TIM3){
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <main+0x114>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <main+0xb4>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7fe fa1c 	bl	800111e <wakeup_idle>
		  readVoltages();	//reads the cell voltages
 8002ce6:	f7fe f88f 	bl	8000e08 <readVoltages>
		  FLAG_TIM3 = false;	//sets the flag to false
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <main+0x114>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
	  }
	  if(FLAG_TIM4){
 8002cf0:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <main+0x118>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <main+0xd0>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fe fa10 	bl	800111e <wakeup_idle>
		  LTC6811_adax(MD_27KHZ_14KHZ, AUX_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fe f97d 	bl	8001000 <LTC6811_adax>
		  FLAG_TIM4 = false;	//sets the flag to false
 8002d06:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <main+0x118>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
	  }
	  if(FLAG_TIM5){
 8002d0c:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <main+0x11c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0d2      	beq.n	8002cba <main+0x7e>
		  wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7fe fa02 	bl	800111e <wakeup_idle>
		  readTemperatures();	//reads the cell voltages
 8002d1a:	f7fe f8cb 	bl	8000eb4 <readTemperatures>
		  tempConvert();	//converts the ADC values into temperature
 8002d1e:	f7fd ff97 	bl	8000c50 <tempConvert>
		  FLAG_TIM5 = false;	//sets the flag to false
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <main+0x11c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
	  if(flagTIM2){
 8002d28:	e7c7      	b.n	8002cba <main+0x7e>
 8002d2a:	bf00      	nop
 8002d2c:	200001a4 	.word	0x200001a4
 8002d30:	200001c8 	.word	0x200001c8
 8002d34:	20000230 	.word	0x20000230
 8002d38:	200005e0 	.word	0x200005e0
 8002d3c:	20000594 	.word	0x20000594
 8002d40:	20000548 	.word	0x20000548
 8002d44:	200004fc 	.word	0x200004fc
 8002d48:	200004b0 	.word	0x200004b0
 8002d4c:	200003d0 	.word	0x200003d0
 8002d50:	200003d1 	.word	0x200003d1
 8002d54:	200003d2 	.word	0x200003d2
 8002d58:	200003d3 	.word	0x200003d3

08002d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b098      	sub	sp, #96	@ 0x60
 8002d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d62:	f107 0318 	add.w	r3, r7, #24
 8002d66:	2248      	movs	r2, #72	@ 0x48
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f00c f996 	bl	800f09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f004 fbde 	bl	8007540 <HAL_PWREx_ControlVoltageScaling>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8002d8a:	f000 f8ab 	bl	8002ee4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d8e:	f004 fbb9 	bl	8007504 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002d92:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <SystemClock_Config+0xc0>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d98:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <SystemClock_Config+0xc0>)
 8002d9a:	f023 0318 	bic.w	r3, r3, #24
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002da2:	2314      	movs	r3, #20
 8002da4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002da6:	2381      	movs	r3, #129	@ 0x81
 8002da8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002daa:	2301      	movs	r3, #1
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002dae:	2300      	movs	r3, #0
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002db2:	2370      	movs	r3, #112	@ 0x70
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db6:	2302      	movs	r3, #2
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 48;
 8002dc2:	2330      	movs	r3, #48	@ 0x30
 8002dc4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd2:	f107 0318 	add.w	r3, r7, #24
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 fc42 	bl	8007660 <HAL_RCC_OscConfig>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002de2:	f000 f87f 	bl	8002ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de6:	230f      	movs	r3, #15
 8002de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dea:	2303      	movs	r3, #3
 8002dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f005 f904 	bl	800800c <HAL_RCC_ClockConfig>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002e0a:	f000 f86b 	bl	8002ee4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002e0e:	f005 ff7f 	bl	8008d10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002e12:	bf00      	nop
 8002e14:	3760      	adds	r7, #96	@ 0x60
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//handle the DMA interrupt
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	currentConvert();	//convert ADC values into current sensor skaling 19.8mV/A
 8002e28:	f7fe f856 	bl	8000ed8 <currentConvert>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	//timers to control the LTC6811 value reading
	//TIM2 starts first and then triggers TIM3, which triggers TIM4, which triggers TIM5.
	//These 4 timers run in a loop at 5Hz each, and 20Hz overall
	//TIM2 starts cell voltage conversion

	if(htim->Instance == TIM2){
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e44:	d108      	bne.n	8002e58 <HAL_TIM_PeriodElapsedCallback+0x24>
//		__HAL_TIM_CLEAR_IT(&htim2 ,TIM_IT_UPDATE);	//clears the IT flag
//		__HAL_TIM_SET_COUNTER(&htim2, 0);	//resets the timer's counter to 0
		flagTIM2 = true;	//sets the flag to true
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
//		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
//		LTC6811_adcv(MD_27KHZ_14KHZ, DCP_DISABLED, CELL_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);	//toggles the red LED to show that the timer is running
 8002e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e50:	481c      	ldr	r0, [pc, #112]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e52:	f002 ff97 	bl	8005d84 <HAL_GPIO_TogglePin>
 8002e56:	e028      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x76>

		//TIM3 reads cell voltages
	}else if(htim->Instance == TIM3){
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <HAL_TIM_PeriodElapsedCallback+0x40>
//		__HAL_TIM_CLEAR_IT(&htim3 ,TIM_IT_UPDATE);	//clears the IT flag
//		__HAL_TIM_SET_COUNTER(&htim3, 0);	//resets the timer's counter to 0
		FLAG_TIM3 = true;	//sets the flag to true
 8002e62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
//		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
//		readVoltages();	//reads the cell voltages
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);	//toggles the amber LED to show that the timer is running
 8002e68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e6c:	4815      	ldr	r0, [pc, #84]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e6e:	f002 ff89 	bl	8005d84 <HAL_GPIO_TogglePin>
 8002e72:	e01a      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x76>

	//TIM4 starts aux voltage conversion
	}else if(htim->Instance == TIM4){
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <HAL_TIM_PeriodElapsedCallback+0x5c>
//		__HAL_TIM_CLEAR_IT(&htim4 ,TIM_IT_UPDATE);	//clears the IT flag
//		__HAL_TIM_SET_COUNTER(&htim4, 0);	//resets the timer's counter to 0
		FLAG_TIM4 = true;	//sets the flag to true
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
//		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
//		LTC6811_adax(MD_27KHZ_14KHZ, AUX_CH_ALL); //should take 1.1 ms for 27KHz mode and 1.3 ms for 14KHz mode
		HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);	//toggles the yellow LED to show that the timer is running
 8002e84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e88:	480e      	ldr	r0, [pc, #56]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e8a:	f002 ff7b 	bl	8005d84 <HAL_GPIO_TogglePin>
 8002e8e:	e00c      	b.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x76>

		//TIM5 reads aux voltage conversion
	}else if(htim->Instance == TIM5){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a10      	ldr	r2, [pc, #64]	@ (8002ed8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d107      	bne.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x76>
//		__HAL_TIM_CLEAR_IT(&htim5 ,TIM_IT_UPDATE);	//clears the IT flag
//		__HAL_TIM_SET_COUNTER(&htim5, 0);	//resets the timer's counter to 0
//		flagErrorCheck = true;	//enables the error check and state change code block
		FLAG_TIM5 = true;	//sets the flag to true
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
//		wakeup_idle(TOTAL_IC);	//wake up daisy-chain from sleep mode
//		readTemperatures();
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);	//toggles the green LED to show that the timer is running
 8002ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ea4:	4807      	ldr	r0, [pc, #28]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ea6:	f002 ff6d 	bl	8005d84 <HAL_GPIO_TogglePin>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_PeriodElapsedCallback+0x84>
  {
    HAL_IncTick();
 8002eb4:	f000 fe44 	bl	8003b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200003d0 	.word	0x200003d0
 8002ec4:	42020400 	.word	0x42020400
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	200003d1 	.word	0x200003d1
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	200003d2 	.word	0x200003d2
 8002ed8:	40000c00 	.word	0x40000c00
 8002edc:	200003d3 	.word	0x200003d3
 8002ee0:	40001000 	.word	0x40001000

08002ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <Error_Handler+0x8>

08002ef0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002ef6:	f107 0318 	add.w	r3, r7, #24
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002f16:	2300      	movs	r3, #0
 8002f18:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f1a:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f1c:	4a36      	ldr	r2, [pc, #216]	@ (8002ff8 <MX_RTC_Init+0x108>)
 8002f1e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f20:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f26:	4b33      	ldr	r3, [pc, #204]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f28:	227f      	movs	r2, #127	@ 0x7f
 8002f2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f2c:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f2e:	22ff      	movs	r2, #255	@ 0xff
 8002f30:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f32:	4b30      	ldr	r3, [pc, #192]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f4a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002f4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f52:	4828      	ldr	r0, [pc, #160]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f54:	f006 f87e 	bl	8009054 <HAL_RTC_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 8002f5e:	f7ff ffc1 	bl	8002ee4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002f72:	f107 0318 	add.w	r3, r7, #24
 8002f76:	4619      	mov	r1, r3
 8002f78:	481e      	ldr	r0, [pc, #120]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002f7a:	f006 faf1 	bl	8009560 <HAL_RTCEx_PrivilegeModeSet>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002f84:	f7ff ffae 	bl	8002ee4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4814      	ldr	r0, [pc, #80]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002fa4:	f006 f8ce 	bl	8009144 <HAL_RTC_SetTime>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002fae:	f7ff ff99 	bl	8002ee4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002fc2:	463b      	mov	r3, r7
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480a      	ldr	r0, [pc, #40]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002fca:	f006 f951 	bl	8009270 <HAL_RTC_SetDate>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8002fd4:	f7ff ff86 	bl	8002ee4 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4806      	ldr	r0, [pc, #24]	@ (8002ff4 <MX_RTC_Init+0x104>)
 8002fdc:	f006 fa84 	bl	80094e8 <HAL_RTCEx_SetCalibrationOutPut>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_RTC_Init+0xfa>
  {
    Error_Handler();
 8002fe6:	f7ff ff7d 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fea:	bf00      	nop
 8002fec:	3730      	adds	r7, #48	@ 0x30
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200003d4 	.word	0x200003d4
 8002ff8:	40002800 	.word	0x40002800

08002ffc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0ae      	sub	sp, #184	@ 0xb8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003014:	f107 0310 	add.w	r3, r7, #16
 8003018:	2294      	movs	r2, #148	@ 0x94
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f00c f83d 	bl	800f09c <memset>
  if(rtcHandle->Instance==RTC)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <HAL_RTC_MspInit+0xc0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d142      	bne.n	80030b2 <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800302c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003030:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4618      	mov	r0, r3
 8003040:	f005 fae2 	bl	8008608 <HAL_RCCEx_PeriphCLKConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 800304a:	f7ff ff4b 	bl	8002ee4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800304e:	4b1c      	ldr	r3, [pc, #112]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003054:	4a1a      	ldr	r2, [pc, #104]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 8003056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 8003064:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003068:	6593      	str	r3, [r2, #88]	@ 0x58
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003082:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_RTC_MspInit+0xc4>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800308e:	2304      	movs	r3, #4
 8003090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <HAL_RTC_MspInit+0xc8>)
 80030ae:	f002 fcd1 	bl	8005a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80030b2:	bf00      	nop
 80030b4:	37b8      	adds	r7, #184	@ 0xb8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40002800 	.word	0x40002800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	42020400 	.word	0x42020400

080030c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <MX_SPI1_Init+0x74>)
 80030ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003140 <MX_SPI1_Init+0x78>)
 80030d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <MX_SPI1_Init+0x74>)
 80030d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <MX_SPI1_Init+0x74>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030e0:	4b16      	ldr	r3, [pc, #88]	@ (800313c <MX_SPI1_Init+0x74>)
 80030e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80030e8:	4b14      	ldr	r3, [pc, #80]	@ (800313c <MX_SPI1_Init+0x74>)
 80030ea:	2202      	movs	r2, #2
 80030ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80030ee:	4b13      	ldr	r3, [pc, #76]	@ (800313c <MX_SPI1_Init+0x74>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <MX_SPI1_Init+0x74>)
 80030f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <MX_SPI1_Init+0x74>)
 80030fe:	2230      	movs	r2, #48	@ 0x30
 8003100:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003102:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <MX_SPI1_Init+0x74>)
 8003104:	2200      	movs	r2, #0
 8003106:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <MX_SPI1_Init+0x74>)
 800310a:	2200      	movs	r2, #0
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <MX_SPI1_Init+0x74>)
 8003110:	2200      	movs	r2, #0
 8003112:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <MX_SPI1_Init+0x74>)
 8003116:	2207      	movs	r2, #7
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <MX_SPI1_Init+0x74>)
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <MX_SPI1_Init+0x74>)
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003126:	4805      	ldr	r0, [pc, #20]	@ (800313c <MX_SPI1_Init+0x74>)
 8003128:	f006 fa46 	bl	80095b8 <HAL_SPI_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003132:	f7ff fed7 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200003fc 	.word	0x200003fc
 8003140:	40013000 	.word	0x40013000

08003144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	@ 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <HAL_SPI_MspInit+0x7c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d127      	bne.n	80031b6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003166:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <HAL_SPI_MspInit+0x80>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316a:	4a16      	ldr	r2, [pc, #88]	@ (80031c4 <HAL_SPI_MspInit+0x80>)
 800316c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003170:	6613      	str	r3, [r2, #96]	@ 0x60
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_SPI_MspInit+0x80>)
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_SPI_MspInit+0x80>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	4a10      	ldr	r2, [pc, #64]	@ (80031c4 <HAL_SPI_MspInit+0x80>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800318a:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <HAL_SPI_MspInit+0x80>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003196:	23e0      	movs	r3, #224	@ 0xe0
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a6:	2305      	movs	r3, #5
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <HAL_SPI_MspInit+0x84>)
 80031b2:	f002 fc4f 	bl	8005a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031b6:	bf00      	nop
 80031b8:	3728      	adds	r7, #40	@ 0x28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40013000 	.word	0x40013000
 80031c4:	40021000 	.word	0x40021000
 80031c8:	42020000 	.word	0x42020000

080031cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	4b12      	ldr	r3, [pc, #72]	@ (800321c <HAL_MspInit+0x50>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	4a11      	ldr	r2, [pc, #68]	@ (800321c <HAL_MspInit+0x50>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031de:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <HAL_MspInit+0x50>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_MspInit+0x50>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	4a0b      	ldr	r2, [pc, #44]	@ (800321c <HAL_MspInit+0x50>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_MspInit+0x50>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2107      	movs	r1, #7
 8003206:	f06f 0001 	mvn.w	r0, #1
 800320a:	f001 ff5f 	bl	80050cc <HAL_NVIC_SetPriority>

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800320e:	f004 f9f3 	bl	80075f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08c      	sub	sp, #48	@ 0x30
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8003230:	2200      	movs	r2, #0
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	2031      	movs	r0, #49	@ 0x31
 8003236:	f001 ff49 	bl	80050cc <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800323a:	2031      	movs	r0, #49	@ 0x31
 800323c:	f001 ff60 	bl	8005100 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003240:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <HAL_InitTick+0x9c>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	4a1d      	ldr	r2, [pc, #116]	@ (80032bc <HAL_InitTick+0x9c>)
 8003246:	f043 0310 	orr.w	r3, r3, #16
 800324a:	6593      	str	r3, [r2, #88]	@ 0x58
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_InitTick+0x9c>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003258:	f107 0210 	add.w	r2, r7, #16
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f005 f8ce 	bl	8008404 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003268:	f005 f8b8 	bl	80083dc <HAL_RCC_GetPCLK1Freq>
 800326c:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	4a13      	ldr	r2, [pc, #76]	@ (80032c0 <HAL_InitTick+0xa0>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0c9b      	lsrs	r3, r3, #18
 8003278:	3b01      	subs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <HAL_InitTick+0xa4>)
 800327e:	4a12      	ldr	r2, [pc, #72]	@ (80032c8 <HAL_InitTick+0xa8>)
 8003280:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <HAL_InitTick+0xa4>)
 8003284:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003288:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800328a:	4a0e      	ldr	r2, [pc, #56]	@ (80032c4 <HAL_InitTick+0xa4>)
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_InitTick+0xa4>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_InitTick+0xa4>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800329c:	4809      	ldr	r0, [pc, #36]	@ (80032c4 <HAL_InitTick+0xa4>)
 800329e:	f006 fdb5 	bl	8009e0c <HAL_TIM_Base_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032a8:	4806      	ldr	r0, [pc, #24]	@ (80032c4 <HAL_InitTick+0xa4>)
 80032aa:	f006 fe6f 	bl	8009f8c <HAL_TIM_Base_Start_IT>
 80032ae:	4603      	mov	r3, r0
 80032b0:	e000      	b.n	80032b4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3730      	adds	r7, #48	@ 0x30
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	20000460 	.word	0x20000460
 80032c8:	40001000 	.word	0x40001000

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <NMI_Handler+0x4>

080032d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <HardFault_Handler+0x4>

080032dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <MemManage_Handler+0x4>

080032e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <BusFault_Handler+0x4>

080032ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <UsageFault_Handler+0x4>

080032f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003308:	4802      	ldr	r0, [pc, #8]	@ (8003314 <DMA1_Channel1_IRQHandler+0x10>)
 800330a:	f002 f82a 	bl	8005362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000300 	.word	0x20000300

08003318 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800331c:	4802      	ldr	r0, [pc, #8]	@ (8003328 <DMA1_Channel2_IRQHandler+0x10>)
 800331e:	f002 f820 	bl	8005362 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000298 	.word	0x20000298

0800332c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003330:	4802      	ldr	r0, [pc, #8]	@ (800333c <TIM2_IRQHandler+0x10>)
 8003332:	f006 fefc 	bl	800a12e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200004b0 	.word	0x200004b0

08003340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003344:	4802      	ldr	r0, [pc, #8]	@ (8003350 <TIM3_IRQHandler+0x10>)
 8003346:	f006 fef2 	bl	800a12e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200004fc 	.word	0x200004fc

08003354 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003358:	4802      	ldr	r0, [pc, #8]	@ (8003364 <TIM4_IRQHandler+0x10>)
 800335a:	f006 fee8 	bl	800a12e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000548 	.word	0x20000548

08003368 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800336c:	4802      	ldr	r0, [pc, #8]	@ (8003378 <TIM5_IRQHandler+0x10>)
 800336e:	f006 fede 	bl	800a12e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000594 	.word	0x20000594

0800337c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003380:	4802      	ldr	r0, [pc, #8]	@ (800338c <TIM6_IRQHandler+0x10>)
 8003382:	f006 fed4 	bl	800a12e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000460 	.word	0x20000460

08003390 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003394:	4802      	ldr	r0, [pc, #8]	@ (80033a0 <USB_FS_IRQHandler+0x10>)
 8003396:	f002 fd3f 	bl	8005e18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000ac0 	.word	0x20000ac0

080033a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033ac:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <_sbrk+0x5c>)
 80033ae:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <_sbrk+0x60>)
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b8:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <_sbrk+0x64>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <_sbrk+0x64>)
 80033c2:	4a12      	ldr	r2, [pc, #72]	@ (800340c <_sbrk+0x68>)
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c6:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <_sbrk+0x64>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d207      	bcs.n	80033e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d4:	f00b fe7a 	bl	800f0cc <__errno>
 80033d8:	4603      	mov	r3, r0
 80033da:	220c      	movs	r2, #12
 80033dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033e2:	e009      	b.n	80033f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e4:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <_sbrk+0x64>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ea:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <_sbrk+0x64>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	4a05      	ldr	r2, [pc, #20]	@ (8003408 <_sbrk+0x64>)
 80033f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20030000 	.word	0x20030000
 8003404:	00000400 	.word	0x00000400
 8003408:	200004ac 	.word	0x200004ac
 800340c:	20000ee8 	.word	0x20000ee8

08003410 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <SystemInit+0x20>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	4a05      	ldr	r2, [pc, #20]	@ (8003430 <SystemInit+0x20>)
 800341c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800343a:	4b4f      	ldr	r3, [pc, #316]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003446:	4b4c      	ldr	r3, [pc, #304]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	e005      	b.n	8003462 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003456:	4b48      	ldr	r3, [pc, #288]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003462:	4a46      	ldr	r2, [pc, #280]	@ (800357c <SystemCoreClockUpdate+0x148>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346c:	4b42      	ldr	r3, [pc, #264]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d866      	bhi.n	8003546 <SystemCoreClockUpdate+0x112>
 8003478:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <SystemCoreClockUpdate+0x4c>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	080034b5 	.word	0x080034b5
 8003484:	08003547 	.word	0x08003547
 8003488:	08003547 	.word	0x08003547
 800348c:	08003547 	.word	0x08003547
 8003490:	080034bd 	.word	0x080034bd
 8003494:	08003547 	.word	0x08003547
 8003498:	08003547 	.word	0x08003547
 800349c:	08003547 	.word	0x08003547
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	08003547 	.word	0x08003547
 80034a8:	08003547 	.word	0x08003547
 80034ac:	08003547 	.word	0x08003547
 80034b0:	080034cd 	.word	0x080034cd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80034b4:	4a32      	ldr	r2, [pc, #200]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6013      	str	r3, [r2, #0]
      break;
 80034ba:	e048      	b.n	800354e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80034bc:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 80034be:	4a31      	ldr	r2, [pc, #196]	@ (8003584 <SystemCoreClockUpdate+0x150>)
 80034c0:	601a      	str	r2, [r3, #0]
      break;
 80034c2:	e044      	b.n	800354e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80034c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 80034c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003584 <SystemCoreClockUpdate+0x150>)
 80034c8:	601a      	str	r2, [r3, #0]
      break;
 80034ca:	e040      	b.n	800354e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80034cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80034d6:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	3301      	adds	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d003      	beq.n	80034f2 <SystemCoreClockUpdate+0xbe>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d006      	beq.n	80034fe <SystemCoreClockUpdate+0xca>
 80034f0:	e00b      	b.n	800350a <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80034f2:	4a24      	ldr	r2, [pc, #144]	@ (8003584 <SystemCoreClockUpdate+0x150>)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	613b      	str	r3, [r7, #16]
          break;
 80034fc:	e00b      	b.n	8003516 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80034fe:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <SystemCoreClockUpdate+0x150>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	613b      	str	r3, [r7, #16]
          break;
 8003508:	e005      	b.n	8003516 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	613b      	str	r3, [r7, #16]
          break;
 8003514:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003516:	4b18      	ldr	r3, [pc, #96]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003528:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0e5b      	lsrs	r3, r3, #25
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	4a0f      	ldr	r2, [pc, #60]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 8003542:	6013      	str	r3, [r2, #0]
      break;
 8003544:	e003      	b.n	800354e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003546:	4a0e      	ldr	r2, [pc, #56]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6013      	str	r3, [r2, #0]
      break;
 800354c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <SystemCoreClockUpdate+0x144>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <SystemCoreClockUpdate+0x154>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800355e:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <SystemCoreClockUpdate+0x14c>)
 800356a:	6013      	str	r3, [r2, #0]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	0800f7dc 	.word	0x0800f7dc
 8003580:	20000014 	.word	0x20000014
 8003584:	00f42400 	.word	0x00f42400
 8003588:	0800f7c4 	.word	0x0800f7c4

0800358c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	@ 0x38
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ac:	463b      	mov	r3, r7
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	611a      	str	r2, [r3, #16]
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035be:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80035c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035c8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80035cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80035d4:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035d6:	f240 128f 	movw	r2, #399	@ 0x18f
 80035da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e2:	4b23      	ldr	r3, [pc, #140]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035e8:	4821      	ldr	r0, [pc, #132]	@ (8003670 <MX_TIM2_Init+0xe4>)
 80035ea:	f006 fc0f 	bl	8009e0c <HAL_TIM_Base_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80035f4:	f7ff fc76 	bl	8002ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003602:	4619      	mov	r1, r3
 8003604:	481a      	ldr	r0, [pc, #104]	@ (8003670 <MX_TIM2_Init+0xe4>)
 8003606:	f006 ff13 	bl	800a430 <HAL_TIM_ConfigClockSource>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003610:	f7ff fc68 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003614:	4816      	ldr	r0, [pc, #88]	@ (8003670 <MX_TIM2_Init+0xe4>)
 8003616:	f006 fd29 	bl	800a06c <HAL_TIM_OC_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003620:	f7ff fc60 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003624:	2340      	movs	r3, #64	@ 0x40
 8003626:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	4619      	mov	r1, r3
 8003632:	480f      	ldr	r0, [pc, #60]	@ (8003670 <MX_TIM2_Init+0xe4>)
 8003634:	f007 fcde 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800363e:	f7ff fc51 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003642:	2310      	movs	r3, #16
 8003644:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8003646:	2363      	movs	r3, #99	@ 0x63
 8003648:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003652:	463b      	mov	r3, r7
 8003654:	2200      	movs	r2, #0
 8003656:	4619      	mov	r1, r3
 8003658:	4805      	ldr	r0, [pc, #20]	@ (8003670 <MX_TIM2_Init+0xe4>)
 800365a:	f006 fe6f 	bl	800a33c <HAL_TIM_OC_ConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003664:	f7ff fc3e 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003668:	bf00      	nop
 800366a:	3738      	adds	r7, #56	@ 0x38
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200004b0 	.word	0x200004b0

08003674 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b090      	sub	sp, #64	@ 0x40
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800367a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368a:	f107 0320 	add.w	r3, r7, #32
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
 80036a4:	615a      	str	r2, [r3, #20]
 80036a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036a8:	4b2c      	ldr	r3, [pc, #176]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003760 <MX_TIM3_Init+0xec>)
 80036ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 80036ae:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036b0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80036b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036be:	f240 128f 	movw	r2, #399	@ 0x18f
 80036c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c4:	4b25      	ldr	r3, [pc, #148]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ca:	4b24      	ldr	r3, [pc, #144]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036d0:	4822      	ldr	r0, [pc, #136]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036d2:	f006 fb9b 	bl	8009e0c <HAL_TIM_Base_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80036dc:	f7ff fc02 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80036e0:	481e      	ldr	r0, [pc, #120]	@ (800375c <MX_TIM3_Init+0xe8>)
 80036e2:	f006 fcc3 	bl	800a06c <HAL_TIM_OC_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80036ec:	f7ff fbfa 	bl	8002ee4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80036f0:	2306      	movs	r3, #6
 80036f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80036f4:	2310      	movs	r3, #16
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80036f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036fc:	4619      	mov	r1, r3
 80036fe:	4817      	ldr	r0, [pc, #92]	@ (800375c <MX_TIM3_Init+0xe8>)
 8003700:	f006 ff5f 	bl	800a5c2 <HAL_TIM_SlaveConfigSynchro>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800370a:	f7ff fbeb 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800370e:	2340      	movs	r3, #64	@ 0x40
 8003710:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003716:	f107 0320 	add.w	r3, r7, #32
 800371a:	4619      	mov	r1, r3
 800371c:	480f      	ldr	r0, [pc, #60]	@ (800375c <MX_TIM3_Init+0xe8>)
 800371e:	f007 fc69 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003728:	f7ff fbdc 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800372c:	2310      	movs	r3, #16
 800372e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 8003730:	2363      	movs	r3, #99	@ 0x63
 8003732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2200      	movs	r2, #0
 8003740:	4619      	mov	r1, r3
 8003742:	4806      	ldr	r0, [pc, #24]	@ (800375c <MX_TIM3_Init+0xe8>)
 8003744:	f006 fdfa 	bl	800a33c <HAL_TIM_OC_ConfigChannel>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800374e:	f7ff fbc9 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	3740      	adds	r7, #64	@ 0x40
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200004fc 	.word	0x200004fc
 8003760:	40000400 	.word	0x40000400

08003764 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b090      	sub	sp, #64	@ 0x40
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800376a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377a:	f107 0320 	add.w	r3, r7, #32
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
 8003794:	615a      	str	r2, [r3, #20]
 8003796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003798:	4b2c      	ldr	r3, [pc, #176]	@ (800384c <MX_TIM4_Init+0xe8>)
 800379a:	4a2d      	ldr	r2, [pc, #180]	@ (8003850 <MX_TIM4_Init+0xec>)
 800379c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 800379e:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037a0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80037a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a6:	4b29      	ldr	r3, [pc, #164]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 80037ac:	4b27      	ldr	r3, [pc, #156]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037ae:	f240 128f 	movw	r2, #399	@ 0x18f
 80037b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037c0:	4822      	ldr	r0, [pc, #136]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037c2:	f006 fb23 	bl	8009e0c <HAL_TIM_Base_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80037cc:	f7ff fb8a 	bl	8002ee4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80037d0:	481e      	ldr	r0, [pc, #120]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037d2:	f006 fc4b 	bl	800a06c <HAL_TIM_OC_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80037dc:	f7ff fb82 	bl	8002ee4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80037e0:	2306      	movs	r3, #6
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80037e4:	2320      	movs	r3, #32
 80037e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80037e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037ec:	4619      	mov	r1, r3
 80037ee:	4817      	ldr	r0, [pc, #92]	@ (800384c <MX_TIM4_Init+0xe8>)
 80037f0:	f006 fee7 	bl	800a5c2 <HAL_TIM_SlaveConfigSynchro>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80037fa:	f7ff fb73 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80037fe:	2340      	movs	r3, #64	@ 0x40
 8003800:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003802:	2300      	movs	r3, #0
 8003804:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003806:	f107 0320 	add.w	r3, r7, #32
 800380a:	4619      	mov	r1, r3
 800380c:	480f      	ldr	r0, [pc, #60]	@ (800384c <MX_TIM4_Init+0xe8>)
 800380e:	f007 fbf1 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8003818:	f7ff fb64 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800381c:	2310      	movs	r3, #16
 800381e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 8003820:	2363      	movs	r3, #99	@ 0x63
 8003822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2200      	movs	r2, #0
 8003830:	4619      	mov	r1, r3
 8003832:	4806      	ldr	r0, [pc, #24]	@ (800384c <MX_TIM4_Init+0xe8>)
 8003834:	f006 fd82 	bl	800a33c <HAL_TIM_OC_ConfigChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800383e:	f7ff fb51 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003842:	bf00      	nop
 8003844:	3740      	adds	r7, #64	@ 0x40
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000548 	.word	0x20000548
 8003850:	40000800 	.word	0x40000800

08003854 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800386a:	463b      	mov	r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003874:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 8003876:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <MX_TIM5_Init+0xa0>)
 8003878:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47999;
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 800387c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8003880:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003882:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 399;
 8003888:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 800388a:	f240 128f 	movw	r2, #399	@ 0x18f
 800388e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003890:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003896:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800389c:	4814      	ldr	r0, [pc, #80]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 800389e:	f006 fab5 	bl	8009e0c <HAL_TIM_Base_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80038a8:	f7ff fb1c 	bl	8002ee4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80038ac:	2306      	movs	r3, #6
 80038ae:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80038b0:	2320      	movs	r3, #32
 80038b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	4619      	mov	r1, r3
 80038ba:	480d      	ldr	r0, [pc, #52]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 80038bc:	f006 fe81 	bl	800a5c2 <HAL_TIM_SlaveConfigSynchro>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80038c6:	f7ff fb0d 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038d2:	463b      	mov	r3, r7
 80038d4:	4619      	mov	r1, r3
 80038d6:	4806      	ldr	r0, [pc, #24]	@ (80038f0 <MX_TIM5_Init+0x9c>)
 80038d8:	f007 fb8c 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80038e2:	f7ff faff 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000594 	.word	0x20000594
 80038f4:	40000c00 	.word	0x40000c00

080038f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038fe:	f107 0310 	add.w	r3, r7, #16
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003918:	4a20      	ldr	r2, [pc, #128]	@ (800399c <MX_TIM8_Init+0xa4>)
 800391a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 399;
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <MX_TIM8_Init+0xa0>)
 800391e:	f240 128f 	movw	r2, #399	@ 0x18f
 8003922:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003924:	4b1c      	ldr	r3, [pc, #112]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 47999;
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <MX_TIM8_Init+0xa0>)
 800392c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8003930:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <MX_TIM8_Init+0xa0>)
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393e:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003944:	4814      	ldr	r0, [pc, #80]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003946:	f006 fa61 	bl	8009e0c <HAL_TIM_Base_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8003950:	f7ff fac8 	bl	8002ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003958:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	4619      	mov	r1, r3
 8003960:	480d      	ldr	r0, [pc, #52]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003962:	f006 fd65 	bl	800a430 <HAL_TIM_ConfigClockSource>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800396c:	f7ff faba 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	4619      	mov	r1, r3
 8003980:	4805      	ldr	r0, [pc, #20]	@ (8003998 <MX_TIM8_Init+0xa0>)
 8003982:	f007 fb37 	bl	800aff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800398c:	f7ff faaa 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003990:	bf00      	nop
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200005e0 	.word	0x200005e0
 800399c:	40013400 	.word	0x40013400

080039a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b0:	d114      	bne.n	80039dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039b2:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039be:	4b39      	ldr	r3, [pc, #228]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2105      	movs	r1, #5
 80039ce:	202d      	movs	r0, #45	@ 0x2d
 80039d0:	f001 fb7c 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039d4:	202d      	movs	r0, #45	@ 0x2d
 80039d6:	f001 fb93 	bl	8005100 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80039da:	e05e      	b.n	8003a9a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x108>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d114      	bne.n	8003a10 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039e6:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f2:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2105      	movs	r1, #5
 8003a02:	202e      	movs	r0, #46	@ 0x2e
 8003a04:	f001 fb62 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a08:	202e      	movs	r0, #46	@ 0x2e
 8003a0a:	f001 fb79 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 8003a0e:	e044      	b.n	8003a9a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a25      	ldr	r2, [pc, #148]	@ (8003aac <HAL_TIM_Base_MspInit+0x10c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d114      	bne.n	8003a44 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a1a:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1e:	4a21      	ldr	r2, [pc, #132]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a26:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2105      	movs	r1, #5
 8003a36:	202f      	movs	r0, #47	@ 0x2f
 8003a38:	f001 fb48 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a3c:	202f      	movs	r0, #47	@ 0x2f
 8003a3e:	f001 fb5f 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 8003a42:	e02a      	b.n	8003a9a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM5)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	@ (8003ab0 <HAL_TIM_Base_MspInit+0x110>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d114      	bne.n	8003a78 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a5a:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2105      	movs	r1, #5
 8003a6a:	2030      	movs	r0, #48	@ 0x30
 8003a6c:	f001 fb2e 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a70:	2030      	movs	r0, #48	@ 0x30
 8003a72:	f001 fb45 	bl	8005100 <HAL_NVIC_EnableIRQ>
}
 8003a76:	e010      	b.n	8003a9a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab4 <HAL_TIM_Base_MspInit+0x114>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10b      	bne.n	8003a9a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a82:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a86:	4a07      	ldr	r2, [pc, #28]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a8e:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_TIM_Base_MspInit+0x104>)
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	bf00      	nop
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40013400 	.word	0x40013400

08003ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003abc:	f7ff fca8 	bl	8003410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ac0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ac2:	e003      	b.n	8003acc <LoopCopyDataInit>

08003ac4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ac6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ac8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003aca:	3104      	adds	r1, #4

08003acc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003acc:	480a      	ldr	r0, [pc, #40]	@ (8003af8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ace:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ad0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ad2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ad4:	d3f6      	bcc.n	8003ac4 <CopyDataInit>
	ldr	r2, =_sbss
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ad8:	e002      	b.n	8003ae0 <LoopFillZerobss>

08003ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ada:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003adc:	f842 3b04 	str.w	r3, [r2], #4

08003ae0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <LoopForever+0x16>)
	cmp	r2, r3
 8003ae2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ae4:	d3f9      	bcc.n	8003ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ae6:	f00b faf7 	bl	800f0d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aea:	f7ff f8a7 	bl	8002c3c <main>

08003aee <LoopForever>:

LoopForever:
    b LoopForever
 8003aee:	e7fe      	b.n	8003aee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003af0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8003af4:	0800f828 	.word	0x0800f828
	ldr	r0, =_sdata
 8003af8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003afc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003b00:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003b04:	20000ee4 	.word	0x20000ee4

08003b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b08:	e7fe      	b.n	8003b08 <ADC1_2_IRQHandler>

08003b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003b14:	2004      	movs	r0, #4
 8003b16:	f001 face 	bl	80050b6 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8003b1a:	f7ff fc8b 	bl	8003434 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b1e:	2007      	movs	r0, #7
 8003b20:	f7ff fb7e 	bl	8003220 <HAL_InitTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	71fb      	strb	r3, [r7, #7]
 8003b2e:	e001      	b.n	8003b34 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b30:	f7ff fb4c 	bl	80031cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b34:	79fb      	ldrb	r3, [r7, #7]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_IncTick+0x20>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_IncTick+0x24>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <HAL_IncTick+0x24>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	2000001c 	.word	0x2000001c
 8003b64:	2000062c 	.word	0x2000062c

08003b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_GetTick+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	2000062c 	.word	0x2000062c

08003b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff ffee 	bl	8003b68 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b98:	d005      	beq.n	8003ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_Delay+0x44>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ba6:	bf00      	nop
 8003ba8:	f7ff ffde 	bl	8003b68 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d8f7      	bhi.n	8003ba8 <HAL_Delay+0x28>
  {
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000001c 	.word	0x2000001c

08003bc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	609a      	str	r2, [r3, #8]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3360      	adds	r3, #96	@ 0x60
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <LL_ADC_SetOffset+0x44>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	03fff000 	.word	0x03fff000

08003c78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3360      	adds	r3, #96	@ 0x60
 8003c86:	461a      	mov	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3360      	adds	r3, #96	@ 0x60
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	615a      	str	r2, [r3, #20]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3330      	adds	r3, #48	@ 0x30
 8003d36:	461a      	mov	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	4413      	add	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	211f      	movs	r1, #31
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	401a      	ands	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	f003 011f 	and.w	r1, r3, #31
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b087      	sub	sp, #28
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0e5b      	lsrs	r3, r3, #25
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	2107      	movs	r1, #7
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	0d1b      	lsrs	r3, r3, #20
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0318 	and.w	r3, r3, #24
 8003df6:	4908      	ldr	r1, [pc, #32]	@ (8003e18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003df8:	40d9      	lsrs	r1, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	0007ffff 	.word	0x0007ffff

08003e1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 031f 	and.w	r3, r3, #31
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6093      	str	r3, [r2, #8]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e70:	d101      	bne.n	8003e76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ec0:	d101      	bne.n	8003ec6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <LL_ADC_IsEnabled+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_ADC_IsEnabled+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f36:	f043 0204 	orr.w	r2, r3, #4
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d101      	bne.n	8003f62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d101      	bne.n	8003f88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b089      	sub	sp, #36	@ 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e12e      	b.n	8004210 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fe fb15 	bl	80025f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff3f 	bl	8003e5c <LL_ADC_IsDeepPowerDownEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff25 	bl	8003e38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff5a 	bl	8003eac <LL_ADC_IsInternalRegulatorEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ff3e 	bl	8003e84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004008:	4b83      	ldr	r3, [pc, #524]	@ (8004218 <HAL_ADC_Init+0x280>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	4a83      	ldr	r2, [pc, #524]	@ (800421c <HAL_ADC_Init+0x284>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	3301      	adds	r3, #1
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800401c:	e002      	b.n	8004024 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b01      	subs	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f9      	bne.n	800401e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff3c 	bl	8003eac <LL_ADC_IsInternalRegulatorEnabled>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10d      	bne.n	8004056 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff75 	bl	8003f4a <LL_ADC_REG_IsConversionOngoing>
 8004060:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 80c7 	bne.w	80041fe <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 80c3 	bne.w	80041fe <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004080:	f043 0202 	orr.w	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff35 	bl	8003efc <LL_ADC_IsEnabled>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d110      	bne.n	80040ba <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004098:	4861      	ldr	r0, [pc, #388]	@ (8004220 <HAL_ADC_Init+0x288>)
 800409a:	f7ff ff2f 	bl	8003efc <LL_ADC_IsEnabled>
 800409e:	4604      	mov	r4, r0
 80040a0:	4860      	ldr	r0, [pc, #384]	@ (8004224 <HAL_ADC_Init+0x28c>)
 80040a2:	f7ff ff2b 	bl	8003efc <LL_ADC_IsEnabled>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4323      	orrs	r3, r4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4619      	mov	r1, r3
 80040b4:	485c      	ldr	r0, [pc, #368]	@ (8004228 <HAL_ADC_Init+0x290>)
 80040b6:	f7ff fd87 	bl	8003bc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7e5b      	ldrb	r3, [r3, #25]
 80040be:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80040ca:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80040d0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d106      	bne.n	80040f6 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	3b01      	subs	r3, #1
 80040ee:	045b      	lsls	r3, r3, #17
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	4b44      	ldr	r3, [pc, #272]	@ (800422c <HAL_ADC_Init+0x294>)
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	430b      	orrs	r3, r1
 8004124:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff20 	bl	8003f70 <LL_ADC_INJ_IsConversionOngoing>
 8004130:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d140      	bne.n	80041ba <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d13d      	bne.n	80041ba <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7e1b      	ldrb	r3, [r3, #24]
 8004146:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004148:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004150:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004160:	f023 0306 	bic.w	r3, r3, #6
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	430b      	orrs	r3, r1
 800416c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004174:	2b01      	cmp	r3, #1
 8004176:	d118      	bne.n	80041aa <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004182:	f023 0304 	bic.w	r3, r3, #4
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800419a:	430a      	orrs	r2, r1
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	611a      	str	r2, [r3, #16]
 80041a8:	e007      	b.n	80041ba <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10c      	bne.n	80041dc <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	f023 010f 	bic.w	r1, r3, #15
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80041da:	e007      	b.n	80041ec <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020f 	bic.w	r2, r2, #15
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	f023 0303 	bic.w	r3, r3, #3
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80041fc:	e007      	b.n	800420e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f043 0210 	orr.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800420e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3724      	adds	r7, #36	@ 0x24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd90      	pop	{r4, r7, pc}
 8004218:	20000014 	.word	0x20000014
 800421c:	053e2d63 	.word	0x053e2d63
 8004220:	42028000 	.word	0x42028000
 8004224:	42028100 	.word	0x42028100
 8004228:	42028300 	.word	0x42028300
 800422c:	fff0c007 	.word	0xfff0c007

08004230 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800423c:	4850      	ldr	r0, [pc, #320]	@ (8004380 <HAL_ADC_Start_DMA+0x150>)
 800423e:	f7ff fded 	bl	8003e1c <LL_ADC_GetMultimode>
 8004242:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fe7e 	bl	8003f4a <LL_ADC_REG_IsConversionOngoing>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 808e 	bne.w	8004372 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_ADC_Start_DMA+0x34>
 8004260:	2302      	movs	r3, #2
 8004262:	e089      	b.n	8004378 <HAL_ADC_Start_DMA+0x148>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d002      	beq.n	800427e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b09      	cmp	r3, #9
 800427c:	d172      	bne.n	8004364 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fc88 	bl	8004b94 <ADC_Enable>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d165      	bne.n	800435a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004292:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a37      	ldr	r2, [pc, #220]	@ (8004384 <HAL_ADC_Start_DMA+0x154>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d002      	beq.n	80042b2 <HAL_ADC_Start_DMA+0x82>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	e000      	b.n	80042b4 <HAL_ADC_Start_DMA+0x84>
 80042b2:	4b35      	ldr	r3, [pc, #212]	@ (8004388 <HAL_ADC_Start_DMA+0x158>)
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d002      	beq.n	80042c2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f023 0206 	bic.w	r2, r3, #6
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042e6:	e002      	b.n	80042ee <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f2:	4a26      	ldr	r2, [pc, #152]	@ (800438c <HAL_ADC_Start_DMA+0x15c>)
 80042f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fa:	4a25      	ldr	r2, [pc, #148]	@ (8004390 <HAL_ADC_Start_DMA+0x160>)
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004302:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <HAL_ADC_Start_DMA+0x164>)
 8004304:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	221c      	movs	r2, #28
 800430c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0210 	orr.w	r2, r2, #16
 8004324:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3340      	adds	r3, #64	@ 0x40
 8004340:	4619      	mov	r1, r3
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f000 ff91 	bl	800526c <HAL_DMA_Start_IT>
 800434a:	4603      	mov	r3, r0
 800434c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fde5 	bl	8003f22 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004358:	e00d      	b.n	8004376 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004362:	e008      	b.n	8004376 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004370:	e001      	b.n	8004376 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004376:	7dfb      	ldrb	r3, [r7, #23]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	42028300 	.word	0x42028300
 8004384:	42028100 	.word	0x42028100
 8004388:	42028000 	.word	0x42028000
 800438c:	08004ca1 	.word	0x08004ca1
 8004390:	08004d79 	.word	0x08004d79
 8004394:	08004d95 	.word	0x08004d95

08004398 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b0b7      	sub	sp, #220	@ 0xdc
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x22>
 80043de:	2302      	movs	r3, #2
 80043e0:	e3c1      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x7a6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fdab 	bl	8003f4a <LL_ADC_REG_IsConversionOngoing>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 83a6 	bne.w	8004b48 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	f7ff fc8c 	bl	8003d26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fd99 	bl	8003f4a <LL_ADC_REG_IsConversionOngoing>
 8004418:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fda5 	bl	8003f70 <LL_ADC_INJ_IsConversionOngoing>
 8004426:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800442a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 81c1 	bne.w	80047b6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004438:	2b00      	cmp	r3, #0
 800443a:	f040 81bc 	bne.w	80047b6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004446:	d10f      	bne.n	8004468 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	4619      	mov	r1, r3
 8004454:	f7ff fc93 	bl	8003d7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fc3a 	bl	8003cda <LL_ADC_SetSamplingTimeCommonConfig>
 8004466:	e00e      	b.n	8004486 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	461a      	mov	r2, r3
 8004476:	f7ff fc82 	bl	8003d7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fc2a 	bl	8003cda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d00a      	beq.n	80044be <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6919      	ldr	r1, [r3, #16]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044b8:	f7ff fbba 	bl	8003c30 <LL_ADC_SetOffset>
 80044bc:	e17b      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fbd7 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x12a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fbcc 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 80044e0:	4603      	mov	r3, r0
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 021f 	and.w	r2, r3, #31
 80044e8:	e01e      	b.n	8004528 <HAL_ADC_ConfigChannel+0x168>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fbc1 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8004518:	2320      	movs	r3, #32
 800451a:	e004      	b.n	8004526 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800451c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x180>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	e018      	b.n	8004572 <HAL_ADC_ConfigChannel+0x1b2>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800455c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8004564:	2320      	movs	r3, #32
 8004566:	e004      	b.n	8004572 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8004568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004572:	429a      	cmp	r2, r3
 8004574:	d106      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fb90 	bl	8003ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fb74 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 8004590:	4603      	mov	r3, r0
 8004592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x1f0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fb69 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 80045a6:	4603      	mov	r3, r0
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	e01e      	b.n	80045ee <HAL_ADC_ConfigChannel+0x22e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fb5e 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 80045bc:	4603      	mov	r3, r0
 80045be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80045ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80045d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80045de:	2320      	movs	r3, #32
 80045e0:	e004      	b.n	80045ec <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80045e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x246>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0e9b      	lsrs	r3, r3, #26
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	e018      	b.n	8004638 <HAL_ADC_ConfigChannel+0x278>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800461a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800461e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004622:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800462a:	2320      	movs	r3, #32
 800462c:	e004      	b.n	8004638 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800462e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004638:	429a      	cmp	r2, r3
 800463a:	d106      	bne.n	800464a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fb2d 	bl	8003ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2102      	movs	r1, #2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fb11 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 8004656:	4603      	mov	r3, r0
 8004658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x2b6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fb06 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 800466c:	4603      	mov	r3, r0
 800466e:	0e9b      	lsrs	r3, r3, #26
 8004670:	f003 021f 	and.w	r2, r3, #31
 8004674:	e01e      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x2f4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2102      	movs	r1, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fafb 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 8004682:	4603      	mov	r3, r0
 8004684:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004698:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800469c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80046a4:	2320      	movs	r3, #32
 80046a6:	e004      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80046a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x30c>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	0e9b      	lsrs	r3, r3, #26
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	e016      	b.n	80046fa <HAL_ADC_ConfigChannel+0x33a>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80046de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80046e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e004      	b.n	80046fa <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80046f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d106      	bne.n	800470c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff facc 	bl	8003ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2103      	movs	r1, #3
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fab0 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 8004718:	4603      	mov	r3, r0
 800471a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x378>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2103      	movs	r1, #3
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff faa5 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 800472e:	4603      	mov	r3, r0
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	f003 021f 	and.w	r2, r3, #31
 8004736:	e017      	b.n	8004768 <HAL_ADC_ConfigChannel+0x3a8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2103      	movs	r1, #3
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fa9a 	bl	8003c78 <LL_ADC_GetOffsetChannel>
 8004744:	4603      	mov	r3, r0
 8004746:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004752:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800475a:	2320      	movs	r3, #32
 800475c:	e003      	b.n	8004766 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800475e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x3c0>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	0e9b      	lsrs	r3, r3, #26
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	e011      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x3e4>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800478e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004790:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e003      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800479c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d106      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2103      	movs	r1, #3
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fa77 	bl	8003ca4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fb9e 	bl	8003efc <LL_ADC_IsEnabled>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 81c9 	bne.w	8004b5a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fafd 	bl	8003dd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4a8f      	ldr	r2, [pc, #572]	@ (8004a1c <HAL_ADC_ConfigChannel+0x65c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	f040 8131 	bne.w	8004a48 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <HAL_ADC_ConfigChannel+0x44e>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	0e9b      	lsrs	r3, r3, #26
 80047fc:	3301      	adds	r3, #1
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2b09      	cmp	r3, #9
 8004804:	bf94      	ite	ls
 8004806:	2301      	movls	r3, #1
 8004808:	2300      	movhi	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e019      	b.n	8004842 <HAL_ADC_ConfigChannel+0x482>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004816:	fa93 f3a3 	rbit	r3, r3
 800481a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800481c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800481e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004820:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8004826:	2320      	movs	r3, #32
 8004828:	e003      	b.n	8004832 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800482a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	b2db      	uxtb	r3, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2b09      	cmp	r3, #9
 800483a:	bf94      	ite	ls
 800483c:	2301      	movls	r3, #1
 800483e:	2300      	movhi	r3, #0
 8004840:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004842:	2b00      	cmp	r3, #0
 8004844:	d079      	beq.n	800493a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484e:	2b00      	cmp	r3, #0
 8004850:	d107      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x4a2>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	0e9b      	lsrs	r3, r3, #26
 8004858:	3301      	adds	r3, #1
 800485a:	069b      	lsls	r3, r3, #26
 800485c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004860:	e015      	b.n	800488e <HAL_ADC_ConfigChannel+0x4ce>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004872:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e003      	b.n	8004886 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800487e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	3301      	adds	r3, #1
 8004888:	069b      	lsls	r3, r3, #26
 800488a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x4ee>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	3301      	adds	r3, #1
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2101      	movs	r1, #1
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	e017      	b.n	80048de <HAL_ADC_ConfigChannel+0x51e>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80048bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80048c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80048c6:	2320      	movs	r3, #32
 80048c8:	e003      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80048ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048cc:	fab3 f383 	clz	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	ea42 0103 	orr.w	r1, r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x544>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	0e9b      	lsrs	r3, r3, #26
 80048f4:	3301      	adds	r3, #1
 80048f6:	f003 021f 	and.w	r2, r3, #31
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	051b      	lsls	r3, r3, #20
 8004902:	e018      	b.n	8004936 <HAL_ADC_ConfigChannel+0x576>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e003      	b.n	8004928 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004936:	430b      	orrs	r3, r1
 8004938:	e081      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x596>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	0e9b      	lsrs	r3, r3, #26
 800494c:	3301      	adds	r3, #1
 800494e:	069b      	lsls	r3, r3, #26
 8004950:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004954:	e015      	b.n	8004982 <HAL_ADC_ConfigChannel+0x5c2>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e003      	b.n	800497a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	3301      	adds	r3, #1
 800497c:	069b      	lsls	r3, r3, #26
 800497e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x5e2>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0e9b      	lsrs	r3, r3, #26
 8004994:	3301      	adds	r3, #1
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2101      	movs	r1, #1
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	e017      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x612>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	61fb      	str	r3, [r7, #28]
  return result;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e003      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	ea42 0103 	orr.w	r1, r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x63e>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0e9b      	lsrs	r3, r3, #26
 80049e8:	3301      	adds	r3, #1
 80049ea:	f003 021f 	and.w	r2, r3, #31
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	3b1e      	subs	r3, #30
 80049f6:	051b      	lsls	r3, r3, #20
 80049f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049fc:	e01e      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x67c>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	613b      	str	r3, [r7, #16]
  return result;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8004a16:	2320      	movs	r3, #32
 8004a18:	e006      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x668>
 8004a1a:	bf00      	nop
 8004a1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	fab3 f383 	clz	r3, r3
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f003 021f 	and.w	r2, r3, #31
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	3b1e      	subs	r3, #30
 8004a36:	051b      	lsls	r3, r3, #20
 8004a38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a42:	4619      	mov	r1, r3
 8004a44:	f7ff f99b 	bl	8003d7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b48      	ldr	r3, [pc, #288]	@ (8004b70 <HAL_ADC_ConfigChannel+0x7b0>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8082 	beq.w	8004b5a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a56:	4847      	ldr	r0, [pc, #284]	@ (8004b74 <HAL_ADC_ConfigChannel+0x7b4>)
 8004a58:	f7ff f8dc 	bl	8003c14 <LL_ADC_GetCommonPathInternalCh>
 8004a5c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a60:	4845      	ldr	r0, [pc, #276]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7b8>)
 8004a62:	f7ff fa4b 	bl	8003efc <LL_ADC_IsEnabled>
 8004a66:	4604      	mov	r4, r0
 8004a68:	4844      	ldr	r0, [pc, #272]	@ (8004b7c <HAL_ADC_ConfigChannel+0x7bc>)
 8004a6a:	f7ff fa47 	bl	8003efc <LL_ADC_IsEnabled>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4323      	orrs	r3, r4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d15e      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a41      	ldr	r2, [pc, #260]	@ (8004b80 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d127      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d121      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7b8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d161      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4834      	ldr	r0, [pc, #208]	@ (8004b74 <HAL_ADC_ConfigChannel+0x7b4>)
 8004aa2:	f7ff f8a4 	bl	8003bee <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_ADC_ConfigChannel+0x7c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	4a36      	ldr	r2, [pc, #216]	@ (8004b88 <HAL_ADC_ConfigChannel+0x7c8>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004abe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004ac0:	e002      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f9      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ace:	e044      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b8c <HAL_ADC_ConfigChannel+0x7cc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d113      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a23      	ldr	r2, [pc, #140]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7b8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d134      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004af0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004af4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af8:	4619      	mov	r1, r3
 8004afa:	481e      	ldr	r0, [pc, #120]	@ (8004b74 <HAL_ADC_ConfigChannel+0x7b4>)
 8004afc:	f7ff f877 	bl	8003bee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b00:	e02b      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a22      	ldr	r2, [pc, #136]	@ (8004b90 <HAL_ADC_ConfigChannel+0x7d0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d126      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d120      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7b8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d11b      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4811      	ldr	r0, [pc, #68]	@ (8004b74 <HAL_ADC_ConfigChannel+0x7b4>)
 8004b2e:	f7ff f85e 	bl	8003bee <LL_ADC_SetCommonPathInternalCh>
 8004b32:	e012      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b46:	e008      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004b62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	37dc      	adds	r7, #220	@ 0xdc
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd90      	pop	{r4, r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	80080000 	.word	0x80080000
 8004b74:	42028300 	.word	0x42028300
 8004b78:	42028000 	.word	0x42028000
 8004b7c:	42028100 	.word	0x42028100
 8004b80:	c7520000 	.word	0xc7520000
 8004b84:	20000014 	.word	0x20000014
 8004b88:	053e2d63 	.word	0x053e2d63
 8004b8c:	cb840000 	.word	0xcb840000
 8004b90:	80000001 	.word	0x80000001

08004b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff f9a9 	bl	8003efc <LL_ADC_IsEnabled>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d169      	bne.n	8004c84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <ADC_Enable+0xfc>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	f043 0210 	orr.w	r2, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bce:	f043 0201 	orr.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e055      	b.n	8004c86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff f978 	bl	8003ed4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004be4:	482b      	ldr	r0, [pc, #172]	@ (8004c94 <ADC_Enable+0x100>)
 8004be6:	f7ff f815 	bl	8003c14 <LL_ADC_GetCommonPathInternalCh>
 8004bea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004bec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bf4:	4b28      	ldr	r3, [pc, #160]	@ (8004c98 <ADC_Enable+0x104>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	099b      	lsrs	r3, r3, #6
 8004bfa:	4a28      	ldr	r2, [pc, #160]	@ (8004c9c <ADC_Enable+0x108>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c0e:	e002      	b.n	8004c16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f9      	bne.n	8004c10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c1c:	f7fe ffa4 	bl	8003b68 <HAL_GetTick>
 8004c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c22:	e028      	b.n	8004c76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff f967 	bl	8003efc <LL_ADC_IsEnabled>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f94b 	bl	8003ed4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c3e:	f7fe ff93 	bl	8003b68 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d914      	bls.n	8004c76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00d      	beq.n	8004c76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	f043 0210 	orr.w	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6a:	f043 0201 	orr.w	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e007      	b.n	8004c86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d1cf      	bne.n	8004c24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	8000003f 	.word	0x8000003f
 8004c94:	42028300 	.word	0x42028300
 8004c98:	20000014 	.word	0x20000014
 8004c9c:	053e2d63 	.word	0x053e2d63

08004ca0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14b      	bne.n	8004d52 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d021      	beq.n	8004d18 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff f811 	bl	8003d00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d032      	beq.n	8004d4a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d12b      	bne.n	8004d4a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11f      	bne.n	8004d4a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d16:	e018      	b.n	8004d4a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d111      	bne.n	8004d4a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	f043 0201 	orr.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fb24 	bl	8004398 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d50:	e00e      	b.n	8004d70 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fb24 	bl	80043ac <HAL_ADC_ErrorCallback>
}
 8004d64:	e004      	b.n	8004d70 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7fe f84a 	bl	8002e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff faf6 	bl	80043ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <LL_ADC_IsEnabled>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <LL_ADC_IsEnabled+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <LL_ADC_IsEnabled+0x1a>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <LL_ADC_REG_IsConversionOngoing>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d101      	bne.n	8004e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b0a1      	sub	sp, #132	@ 0x84
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e089      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a42      	ldr	r2, [pc, #264]	@ (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d102      	bne.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e4c:	4b41      	ldr	r3, [pc, #260]	@ (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e001      	b.n	8004e56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e068      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ffb9 	bl	8004dee <LL_ADC_REG_IsConversionOngoing>
 8004e7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff ffb3 	bl	8004dee <LL_ADC_REG_IsConversionOngoing>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d14a      	bne.n	8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d147      	bne.n	8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e94:	4b30      	ldr	r3, [pc, #192]	@ (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004e96:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d027      	beq.n	8004ef0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004eb2:	035b      	lsls	r3, r3, #13
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ebc:	4824      	ldr	r0, [pc, #144]	@ (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004ebe:	f7ff ff83 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4823      	ldr	r0, [pc, #140]	@ (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ec6:	f7ff ff7f 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4323      	orrs	r3, r4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d132      	bne.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004eda:	f023 030f 	bic.w	r3, r3, #15
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	6811      	ldr	r1, [r2, #0]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	6892      	ldr	r2, [r2, #8]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004eee:	e023      	b.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004efa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004efc:	4814      	ldr	r0, [pc, #80]	@ (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004efe:	f7ff ff63 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004f02:	4604      	mov	r4, r0
 8004f04:	4813      	ldr	r0, [pc, #76]	@ (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f06:	f7ff ff5f 	bl	8004dc8 <LL_ADC_IsEnabled>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4323      	orrs	r3, r4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d112      	bne.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f1a:	f023 030f 	bic.w	r3, r3, #15
 8004f1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f22:	e009      	b.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f36:	e000      	b.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004f42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3784      	adds	r7, #132	@ 0x84
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	42028000 	.word	0x42028000
 8004f54:	42028100 	.word	0x42028100
 8004f58:	42028300 	.word	0x42028300

08004f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <__NVIC_GetPriorityGrouping+0x18>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	f003 0307 	and.w	r3, r3, #7
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db0b      	blt.n	8004fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4907      	ldr	r1, [pc, #28]	@ (8004ff8 <__NVIC_EnableIRQ+0x38>)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500c:	2b00      	cmp	r3, #0
 800500e:	db0a      	blt.n	8005026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	490c      	ldr	r1, [pc, #48]	@ (8005048 <__NVIC_SetPriority+0x4c>)
 8005016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501a:	0152      	lsls	r2, r2, #5
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	440b      	add	r3, r1
 8005020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005024:	e00a      	b.n	800503c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4908      	ldr	r1, [pc, #32]	@ (800504c <__NVIC_SetPriority+0x50>)
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	3b04      	subs	r3, #4
 8005034:	0152      	lsls	r2, r2, #5
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	440b      	add	r3, r1
 800503a:	761a      	strb	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000e100 	.word	0xe000e100
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	@ 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f1c3 0307 	rsb	r3, r3, #7
 800506a:	2b03      	cmp	r3, #3
 800506c:	bf28      	it	cs
 800506e:	2303      	movcs	r3, #3
 8005070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3303      	adds	r3, #3
 8005076:	2b06      	cmp	r3, #6
 8005078:	d902      	bls.n	8005080 <NVIC_EncodePriority+0x30>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3b04      	subs	r3, #4
 800507e:	e000      	b.n	8005082 <NVIC_EncodePriority+0x32>
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	401a      	ands	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	43d9      	mvns	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a8:	4313      	orrs	r3, r2
         );
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff4c 	bl	8004f5c <__NVIC_SetPriorityGrouping>
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050da:	f7ff ff63 	bl	8004fa4 <__NVIC_GetPriorityGrouping>
 80050de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6978      	ldr	r0, [r7, #20]
 80050e6:	f7ff ffb3 	bl	8005050 <NVIC_EncodePriority>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff82 	bl	8004ffc <__NVIC_SetPriority>
}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ff56 	bl	8004fc0 <__NVIC_EnableIRQ>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e08d      	b.n	800524a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <HAL_DMA_Init+0x138>)
 8005136:	429a      	cmp	r2, r3
 8005138:	d80f      	bhi.n	800515a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	4b45      	ldr	r3, [pc, #276]	@ (8005258 <HAL_DMA_Init+0x13c>)
 8005142:	4413      	add	r3, r2
 8005144:	4a45      	ldr	r2, [pc, #276]	@ (800525c <HAL_DMA_Init+0x140>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	009a      	lsls	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a42      	ldr	r2, [pc, #264]	@ (8005260 <HAL_DMA_Init+0x144>)
 8005156:	649a      	str	r2, [r3, #72]	@ 0x48
 8005158:	e00e      	b.n	8005178 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_DMA_Init+0x148>)
 8005162:	4413      	add	r3, r2
 8005164:	4a3d      	ldr	r2, [pc, #244]	@ (800525c <HAL_DMA_Init+0x140>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	009a      	lsls	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a3c      	ldr	r2, [pc, #240]	@ (8005268 <HAL_DMA_Init+0x14c>)
 8005176:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 800518e:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8005192:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800519c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa38 	bl	8005640 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051d8:	d102      	bne.n	80051e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80051f4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <HAL_DMA_Init+0x104>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b04      	cmp	r3, #4
 8005204:	d80c      	bhi.n	8005220 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa58 	bl	80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	e008      	b.n	8005232 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40020407 	.word	0x40020407
 8005258:	bffdfff8 	.word	0xbffdfff8
 800525c:	cccccccd 	.word	0xcccccccd
 8005260:	40020000 	.word	0x40020000
 8005264:	bffdfbf8 	.word	0xbffdfbf8
 8005268:	40020400 	.word	0x40020400

0800526c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_DMA_Start_IT+0x20>
 8005288:	2302      	movs	r3, #2
 800528a:	e066      	b.n	800535a <HAL_DMA_Start_IT+0xee>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	d155      	bne.n	800534c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f97c 	bl	80055c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 020e 	orr.w	r2, r2, #14
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e00f      	b.n	8005304 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0204 	bic.w	r2, r2, #4
 80052f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 020a 	orr.w	r2, r2, #10
 8005302:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005320:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005338:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e005      	b.n	8005358 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005354:	2302      	movs	r3, #2
 8005356:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537e:	f003 031c 	and.w	r3, r3, #28
 8005382:	2204      	movs	r2, #4
 8005384:	409a      	lsls	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d053      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd4>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d04e      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d024      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	f003 021c 	and.w	r2, r3, #28
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b2:	2104      	movs	r1, #4
 80053b4:	fa01 f202 	lsl.w	r2, r1, r2
 80053b8:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80c0 	beq.w	8005552 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80053da:	e0ba      	b.n	8005552 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80b6 	beq.w	8005552 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80053ee:	e0b0      	b.n	8005552 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0204 	bic.w	r2, r2, #4
 800540c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005412:	f003 021c 	and.w	r2, r3, #28
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541a:	2104      	movs	r1, #4
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8093 	beq.w	8005552 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005434:	e08d      	b.n	8005552 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	f003 031c 	and.w	r3, r3, #28
 800543e:	2202      	movs	r2, #2
 8005440:	409a      	lsls	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d04e      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x186>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d049      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005474:	2b00      	cmp	r3, #0
 8005476:	d06e      	beq.n	8005556 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005480:	e069      	b.n	8005556 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d065      	beq.n	8005556 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005492:	e060      	b.n	8005556 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 020a 	bic.w	r2, r2, #10
 80054b0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054be:	f003 021c 	and.w	r2, r3, #28
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c6:	2102      	movs	r1, #2
 80054c8:	fa01 f202 	lsl.w	r2, r1, r2
 80054cc:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03b      	beq.n	8005556 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80054e6:	e036      	b.n	8005556 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ec:	f003 031c 	and.w	r3, r3, #28
 80054f0:	2208      	movs	r2, #8
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02e      	beq.n	800555a <HAL_DMA_IRQHandler+0x1f8>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d029      	beq.n	800555a <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 020e 	bic.w	r2, r2, #14
 8005514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551a:	f003 021c 	and.w	r2, r3, #28
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005522:	2101      	movs	r1, #1
 8005524:	fa01 f202 	lsl.w	r2, r1, r2
 8005528:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005550:	e002      	b.n	8005558 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8005556:	bf00      	nop
  return;
 8005558:	bf00      	nop
 800555a:	bf00      	nop
}
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	72fb      	strb	r3, [r7, #11]
    return status;
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	e01b      	b.n	80055b6 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e003      	b.n	80055ac <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80055aa:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]

  return status;
 80055b4:	7afb      	ldrb	r3, [r7, #11]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80055d8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f0:	f003 021c 	and.w	r2, r3, #28
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b10      	cmp	r3, #16
 800560e:	d108      	bne.n	8005622 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8005620:	e007      	b.n	8005632 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	4b17      	ldr	r3, [pc, #92]	@ (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d80a      	bhi.n	800566a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005660:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6513      	str	r3, [r2, #80]	@ 0x50
 8005668:	e007      	b.n	800567a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	009a      	lsls	r2, r3, #2
 8005672:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005674:	4413      	add	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	3b08      	subs	r3, #8
 8005682:	4a0c      	ldr	r2, [pc, #48]	@ (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a0a      	ldr	r2, [pc, #40]	@ (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005690:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40020407 	.word	0x40020407
 80056b0:	40020820 	.word	0x40020820
 80056b4:	cccccccd 	.word	0xcccccccd
 80056b8:	40020880 	.word	0x40020880

080056bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a08      	ldr	r2, [pc, #32]	@ (8005700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	2201      	movs	r2, #1
 80056ea:	409a      	lsls	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	1000823f 	.word	0x1000823f
 8005700:	40020940 	.word	0x40020940

08005704 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e142      	b.n	800599c <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fd f918 	bl	8002960 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0210 	bic.w	r2, r2, #16
 800573e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005740:	f7fe fa12 	bl	8003b68 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005746:	e012      	b.n	800576e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005748:	f7fe fa0e 	bl	8003b68 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b0a      	cmp	r3, #10
 8005754:	d90b      	bls.n	800576e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575a:	f043 0201 	orr.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2203      	movs	r2, #3
 8005766:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e116      	b.n	800599c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d0e5      	beq.n	8005748 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800578c:	f7fe f9ec 	bl	8003b68 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005792:	e012      	b.n	80057ba <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005794:	f7fe f9e8 	bl	8003b68 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b0a      	cmp	r3, #10
 80057a0:	d90b      	bls.n	80057ba <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a6:	f043 0201 	orr.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2203      	movs	r2, #3
 80057b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0f0      	b.n	800599c <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0e5      	beq.n	8005794 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0202 	orr.w	r2, r2, #2
 80057d6:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80057d8:	4a72      	ldr	r2, [pc, #456]	@ (80059a4 <HAL_FDCAN_Init+0x2a0>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7c1b      	ldrb	r3, [r3, #16]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d108      	bne.n	80057fa <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057f6:	619a      	str	r2, [r3, #24]
 80057f8:	e007      	b.n	800580a <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005808:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	7c5b      	ldrb	r3, [r3, #17]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d108      	bne.n	8005824 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005820:	619a      	str	r2, [r3, #24]
 8005822:	e007      	b.n	8005834 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005832:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	7c9b      	ldrb	r3, [r3, #18]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d108      	bne.n	800584e <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800584a:	619a      	str	r2, [r3, #24]
 800584c:	e007      	b.n	800585e <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800585c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005882:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0210 	bic.w	r2, r2, #16
 8005892:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d108      	bne.n	80058ae <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0204 	orr.w	r2, r2, #4
 80058aa:	619a      	str	r2, [r3, #24]
 80058ac:	e02c      	b.n	8005908 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d028      	beq.n	8005908 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d01c      	beq.n	80058f8 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0210 	orr.w	r2, r2, #16
 80058dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d110      	bne.n	8005908 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0220 	orr.w	r2, r2, #32
 80058f4:	619a      	str	r2, [r3, #24]
 80058f6:	e007      	b.n	8005908 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0220 	orr.w	r2, r2, #32
 8005906:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	3b01      	subs	r3, #1
 800590e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	3b01      	subs	r3, #1
 8005916:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005918:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005920:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	3b01      	subs	r3, #1
 800592a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005930:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005932:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800593c:	d115      	bne.n	800596a <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005942:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	3b01      	subs	r3, #1
 800594a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800594c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	3b01      	subs	r3, #1
 8005954:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005956:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	3b01      	subs	r3, #1
 8005960:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005966:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005968:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f811 	bl	80059a8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	4000a500 	.word	0x4000a500

080059a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80059b0:	4b27      	ldr	r3, [pc, #156]	@ (8005a50 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80059b2:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	061a      	lsls	r2, r3, #24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e005      	b.n	8005a36 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3304      	adds	r3, #4
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3f3      	bcc.n	8005a2a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	4000ac00 	.word	0x4000ac00

08005a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a62:	e158      	b.n	8005d16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	2101      	movs	r1, #1
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	4013      	ands	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 814a 	beq.w	8005d10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d005      	beq.n	8005a94 <HAL_GPIO_Init+0x40>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d130      	bne.n	8005af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aca:	2201      	movs	r2, #1
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 0201 	and.w	r2, r3, #1
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d017      	beq.n	8005b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4013      	ands	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d123      	bne.n	8005b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	08da      	lsrs	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3208      	adds	r2, #8
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	220f      	movs	r2, #15
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	08da      	lsrs	r2, r3, #3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3208      	adds	r2, #8
 8005b80:	6939      	ldr	r1, [r7, #16]
 8005b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	2203      	movs	r2, #3
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43db      	mvns	r3, r3
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 0203 	and.w	r2, r3, #3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80a4 	beq.w	8005d10 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8005bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3318      	adds	r3, #24
 8005bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	220f      	movs	r2, #15
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4013      	ands	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a52      	ldr	r2, [pc, #328]	@ (8005d38 <HAL_GPIO_Init+0x2e4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d025      	beq.n	8005c40 <HAL_GPIO_Init+0x1ec>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a51      	ldr	r2, [pc, #324]	@ (8005d3c <HAL_GPIO_Init+0x2e8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d01f      	beq.n	8005c3c <HAL_GPIO_Init+0x1e8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a50      	ldr	r2, [pc, #320]	@ (8005d40 <HAL_GPIO_Init+0x2ec>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d019      	beq.n	8005c38 <HAL_GPIO_Init+0x1e4>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a4f      	ldr	r2, [pc, #316]	@ (8005d44 <HAL_GPIO_Init+0x2f0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_GPIO_Init+0x1e0>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d48 <HAL_GPIO_Init+0x2f4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00d      	beq.n	8005c30 <HAL_GPIO_Init+0x1dc>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a4d      	ldr	r2, [pc, #308]	@ (8005d4c <HAL_GPIO_Init+0x2f8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <HAL_GPIO_Init+0x1d8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8005d50 <HAL_GPIO_Init+0x2fc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d101      	bne.n	8005c28 <HAL_GPIO_Init+0x1d4>
 8005c24:	2306      	movs	r3, #6
 8005c26:	e00c      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c28:	2307      	movs	r3, #7
 8005c2a:	e00a      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c2c:	2305      	movs	r3, #5
 8005c2e:	e008      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c30:	2304      	movs	r3, #4
 8005c32:	e006      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c34:	2303      	movs	r3, #3
 8005c36:	e004      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e002      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_GPIO_Init+0x1ee>
 8005c40:	2300      	movs	r3, #0
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	f002 0203 	and.w	r2, r2, #3
 8005c48:	00d2      	lsls	r2, r2, #3
 8005c4a:	4093      	lsls	r3, r2
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8005c52:	4938      	ldr	r1, [pc, #224]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	3318      	adds	r3, #24
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c60:	4b34      	ldr	r3, [pc, #208]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c84:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	43db      	mvns	r3, r3
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4013      	ands	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cae:	4a21      	ldr	r2, [pc, #132]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cda:	4a16      	ldr	r2, [pc, #88]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8005ce2:	4b14      	ldr	r3, [pc, #80]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	43db      	mvns	r3, r3
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d08:	4a0a      	ldr	r2, [pc, #40]	@ (8005d34 <HAL_GPIO_Init+0x2e0>)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3301      	adds	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f47f ae9f 	bne.w	8005a64 <HAL_GPIO_Init+0x10>
  }
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	4002f400 	.word	0x4002f400
 8005d38:	42020000 	.word	0x42020000
 8005d3c:	42020400 	.word	0x42020400
 8005d40:	42020800 	.word	0x42020800
 8005d44:	42020c00 	.word	0x42020c00
 8005d48:	42021000 	.word	0x42021000
 8005d4c:	42021400 	.word	0x42021400
 8005d50:	42021800 	.word	0x42021800

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d70:	e002      	b.n	8005d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	041a      	lsls	r2, r3, #16
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	43d9      	mvns	r1, r3
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	400b      	ands	r3, r1
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
 8005dd4:	e007      	b.n	8005de6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005dd6:	4b07      	ldr	r3, [pc, #28]	@ (8005df4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 0204 	bic.w	r2, r3, #4
 8005dde:	4905      	ldr	r1, [pc, #20]	@ (8005df4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40030400 	.word	0x40030400

08005df8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005dfc:	4b05      	ldr	r3, [pc, #20]	@ (8005e14 <HAL_ICACHE_Enable+0x1c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a04      	ldr	r2, [pc, #16]	@ (8005e14 <HAL_ICACHE_Enable+0x1c>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	40030400 	.word	0x40030400

08005e18 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f007 fa14 	bl	800d252 <USB_ReadInterrupts>
 8005e2a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 faa4 	bl	8006384 <PCD_EP_ISR_Handler>

    return;
 8005e3c:	e110      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f008 feae 	bl	800ebc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005e66:	2100      	movs	r1, #0
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f8fc 	bl	8006066 <HAL_PCD_SetAddress>

    return;
 8005e6e:	e0f7      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e8c:	b292      	uxth	r2, r2
 8005e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005e92:	e0e5      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005eb6:	e0d3      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d034      	beq.n	8005f2c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0204 	bic.w	r2, r2, #4
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0208 	bic.w	r2, r2, #8
 8005eec:	b292      	uxth	r2, r2
 8005eee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f04:	2100      	movs	r1, #0
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f008 ffa2 	bl	800ee50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f008 fe91 	bl	800ec34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f24:	b292      	uxth	r2, r2
 8005f26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005f2a:	e099      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d027      	beq.n	8005f86 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0208 	orr.w	r2, r2, #8
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f60:	b292      	uxth	r2, r2
 8005f62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0204 	orr.w	r2, r2, #4
 8005f78:	b292      	uxth	r2, r2
 8005f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f008 fe3e 	bl	800ec00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005f84:	e06c      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d040      	beq.n	8006012 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d12b      	bne.n	800600a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0204 	orr.w	r2, r2, #4
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0208 	orr.w	r2, r2, #8
 8005fdc:	b292      	uxth	r2, r2
 8005fde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	089b      	lsrs	r3, r3, #2
 8005ff6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006000:	2101      	movs	r1, #1
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f008 ff24 	bl	800ee50 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006008:	e02a      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f008 fdf8 	bl	800ec00 <HAL_PCD_SuspendCallback>
    return;
 8006010:	e026      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00f      	beq.n	800603c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006024:	b29a      	uxth	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800602e:	b292      	uxth	r2, r2
 8006030:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f008 fdb6 	bl	800eba6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800603a:	e011      	b.n	8006060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006058:	b292      	uxth	r2, r2
 800605a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800605e:	bf00      	nop
  }
}
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_PCD_SetAddress+0x1a>
 800607c:	2302      	movs	r3, #2
 800607e:	e012      	b.n	80060a6 <HAL_PCD_SetAddress+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	4611      	mov	r1, r2
 8006096:	4618      	mov	r0, r3
 8006098:	f007 f8c7 	bl	800d22a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	461a      	mov	r2, r3
 80060bc:	4603      	mov	r3, r0
 80060be:	70fb      	strb	r3, [r7, #3]
 80060c0:	460b      	mov	r3, r1
 80060c2:	803b      	strh	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da0e      	bge.n	80060f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 0207 	and.w	r2, r3, #7
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	3310      	adds	r3, #16
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	705a      	strb	r2, [r3, #1]
 80060f0:	e00e      	b.n	8006110 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	f003 0207 	and.w	r2, r3, #7
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800611c:	883a      	ldrh	r2, [r7, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	78ba      	ldrb	r2, [r7, #2]
 8006126:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006128:	78bb      	ldrb	r3, [r7, #2]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d102      	bne.n	8006134 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_PCD_EP_Open+0x94>
 800613e:	2302      	movs	r3, #2
 8006140:	e00e      	b.n	8006160 <HAL_PCD_EP_Open+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	4618      	mov	r0, r3
 8006152:	f004 fff5 	bl	800b140 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800615e:	7afb      	ldrb	r3, [r7, #11]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	460b      	mov	r3, r1
 8006176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	f003 0207 	and.w	r2, r3, #7
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6979      	ldr	r1, [r7, #20]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f005 fb84 	bl	800b8c8 <USB_EPStartXfer>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	460b      	mov	r3, r1
 80061d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061da:	7afb      	ldrb	r3, [r7, #11]
 80061dc:	f003 0207 	and.w	r2, r3, #7
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	3310      	adds	r3, #16
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2201      	movs	r2, #1
 8006214:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006216:	7afb      	ldrb	r3, [r7, #11]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	b2da      	uxtb	r2, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	4618      	mov	r0, r3
 800622a:	f005 fb4d 	bl	800b8c8 <USB_EPStartXfer>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	7912      	ldrb	r2, [r2, #4]
 800624e:	4293      	cmp	r3, r2
 8006250:	d901      	bls.n	8006256 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e03e      	b.n	80062d4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800625a:	2b00      	cmp	r3, #0
 800625c:	da0e      	bge.n	800627c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	f003 0207 	and.w	r2, r3, #7
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	3310      	adds	r3, #16
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	705a      	strb	r2, [r3, #1]
 800627a:	e00c      	b.n	8006296 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_PCD_EP_SetStall+0x7e>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e00e      	b.n	80062d4 <HAL_PCD_EP_SetStall+0x9c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f006 feb1 	bl	800d02c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	7912      	ldrb	r2, [r2, #4]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e040      	b.n	800637c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da0e      	bge.n	8006320 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	f003 0207 	and.w	r2, r3, #7
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3310      	adds	r3, #16
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	705a      	strb	r2, [r3, #1]
 800631e:	e00e      	b.n	800633e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_PCD_EP_ClrStall+0x82>
 800635a:	2302      	movs	r3, #2
 800635c:	e00e      	b.n	800637c <HAL_PCD_EP_ClrStall+0xa0>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	4618      	mov	r0, r3
 800636e:	f006 feae 	bl	800d0ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b096      	sub	sp, #88	@ 0x58
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800638c:	e3ad      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006396:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800639a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80063a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 816f 	bne.w	8006690 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80063b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d14c      	bne.n	8006458 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80063ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ce:	81fb      	strh	r3, [r7, #14]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	89fb      	ldrh	r3, [r7, #14]
 80063d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3310      	adds	r3, #16
 80063e6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4413      	add	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	4413      	add	r3, r2
 8006402:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800640c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	441a      	add	r2, r3
 800641a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800641e:	2100      	movs	r1, #0
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f008 fba6 	bl	800eb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7b1b      	ldrb	r3, [r3, #12]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 835c 	beq.w	8006aea <PCD_EP_ISR_Handler+0x766>
 8006432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 8357 	bne.w	8006aea <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7b1b      	ldrb	r3, [r3, #12]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006446:	b2da      	uxtb	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	731a      	strb	r2, [r3, #12]
 8006456:	e348      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800645e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800646a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800646e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006472:	2b00      	cmp	r3, #0
 8006474:	d032      	beq.n	80064dc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	4413      	add	r3, r2
 8006490:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800649a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80064a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80064ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f006 ff21 	bl	800d2f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80064c2:	4013      	ands	r3, r2
 80064c4:	823b      	strh	r3, [r7, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	8a3a      	ldrh	r2, [r7, #16]
 80064cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064d0:	b292      	uxth	r2, r2
 80064d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f008 fb1f 	bl	800eb18 <HAL_PCD_SetupStageCallback>
 80064da:	e306      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f280 8302 	bge.w	8006aea <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80064f2:	4013      	ands	r3, r2
 80064f4:	83fb      	strh	r3, [r7, #30]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	8bfa      	ldrh	r2, [r7, #30]
 80064fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006500:	b292      	uxth	r2, r2
 8006502:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650c:	b29b      	uxth	r3, r3
 800650e:	461a      	mov	r2, r3
 8006510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	4413      	add	r3, r2
 800651e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800652c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d019      	beq.n	8006568 <PCD_EP_ISR_Handler+0x1e4>
 8006534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d015      	beq.n	8006568 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006542:	6959      	ldr	r1, [r3, #20]
 8006544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006546:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800654c:	b29b      	uxth	r3, r3
 800654e:	f006 fed3 	bl	800d2f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006554:	695a      	ldr	r2, [r3, #20]
 8006556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	441a      	add	r2, r3
 800655c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006560:	2100      	movs	r1, #0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f008 faea 	bl	800eb3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006572:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 82b5 	bne.w	8006aea <PCD_EP_ISR_Handler+0x766>
 8006580:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006584:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006588:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800658c:	f000 82ad 	beq.w	8006aea <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	4413      	add	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <PCD_EP_ISR_Handler+0x25a>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e039      	b.n	8006652 <PCD_EP_ISR_Handler+0x2ce>
 80065de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e4:	d818      	bhi.n	8006618 <PCD_EP_ISR_Handler+0x294>
 80065e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <PCD_EP_ISR_Handler+0x27c>
 80065fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065fc:	3301      	adds	r3, #1
 80065fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29a      	uxth	r2, r3
 8006606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29b      	uxth	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	e01c      	b.n	8006652 <PCD_EP_ISR_Handler+0x2ce>
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <PCD_EP_ISR_Handler+0x2ae>
 800662c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662e:	3b01      	subs	r3, #1
 8006630:	647b      	str	r3, [r7, #68]	@ 0x44
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800663a:	b29b      	uxth	r3, r3
 800663c:	029b      	lsls	r3, r3, #10
 800663e:	b29b      	uxth	r3, r3
 8006640:	4313      	orrs	r3, r2
 8006642:	b29b      	uxth	r3, r3
 8006644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664c:	b29a      	uxth	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800665e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006662:	827b      	strh	r3, [r7, #18]
 8006664:	8a7b      	ldrh	r3, [r7, #18]
 8006666:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800666a:	827b      	strh	r3, [r7, #18]
 800666c:	8a7b      	ldrh	r3, [r7, #18]
 800666e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006672:	827b      	strh	r3, [r7, #18]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	8a7b      	ldrh	r3, [r7, #18]
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
 800668e:	e22c      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80066a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f280 80f6 	bge.w	800689a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80066c4:	4013      	ands	r3, r2
 80066c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80066dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80066e0:	b292      	uxth	r2, r2
 80066e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80066e4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	4413      	add	r3, r2
 80066f8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80066fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d123      	bne.n	800674a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	4413      	add	r3, r2
 800671c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006726:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800672a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 808e 	beq.w	8006850 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673a:	6959      	ldr	r1, [r3, #20]
 800673c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673e:	88da      	ldrh	r2, [r3, #6]
 8006740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006744:	f006 fdd8 	bl	800d2f8 <USB_ReadPMA>
 8006748:	e082      	b.n	8006850 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800674a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800674c:	78db      	ldrb	r3, [r3, #3]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d10a      	bne.n	8006768 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006752:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006756:	461a      	mov	r2, r3
 8006758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9d3 	bl	8006b06 <HAL_PCD_EP_DB_Receive>
 8006760:	4603      	mov	r3, r0
 8006762:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006766:	e073      	b.n	8006850 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006782:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d022      	beq.n	800680c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	4413      	add	r3, r2
 80067e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80067ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02c      	beq.n	8006850 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fc:	6959      	ldr	r1, [r3, #20]
 80067fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006800:	891a      	ldrh	r2, [r3, #8]
 8006802:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006806:	f006 fd77 	bl	800d2f8 <USB_ReadPMA>
 800680a:	e021      	b.n	8006850 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006814:	b29b      	uxth	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	4413      	add	r3, r2
 8006826:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006830:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006842:	6959      	ldr	r1, [r3, #20]
 8006844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006846:	895a      	ldrh	r2, [r3, #10]
 8006848:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800684c:	f006 fd54 	bl	800d2f8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006858:	441a      	add	r2, r3
 800685a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800685c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800685e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006866:	441a      	add	r2, r3
 8006868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800686a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800686c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <PCD_EP_ISR_Handler+0x4fc>
 8006874:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d206      	bcs.n	800688e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f008 f958 	bl	800eb3c <HAL_PCD_DataOutStageCallback>
 800688c:	e005      	b.n	800689a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006894:	4618      	mov	r0, r3
 8006896:	f005 f817 	bl	800b8c8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800689a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800689e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8121 	beq.w	8006aea <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80068a8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	3310      	adds	r3, #16
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80068d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80068ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80068f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068fa:	78db      	ldrb	r3, [r3, #3]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f040 80a2 	bne.w	8006a46 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006904:	2200      	movs	r2, #0
 8006906:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800690a:	7b1b      	ldrb	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8093 	beq.w	8006a38 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006912:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d046      	beq.n	80069ac <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800691e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d126      	bne.n	8006974 <PCD_EP_ISR_Handler+0x5f0>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	4413      	add	r3, r2
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
 800693e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	00da      	lsls	r2, r3, #3
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	4413      	add	r3, r2
 8006948:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006958:	b29a      	uxth	r2, r3
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696c:	b29a      	uxth	r2, r3
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	e061      	b.n	8006a38 <PCD_EP_ISR_Handler+0x6b4>
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d15d      	bne.n	8006a38 <PCD_EP_ISR_Handler+0x6b4>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	4413      	add	r3, r2
 8006992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	00da      	lsls	r2, r3, #3
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	4413      	add	r3, r2
 800699e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a6:	2200      	movs	r2, #0
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e045      	b.n	8006a38 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d126      	bne.n	8006a08 <PCD_EP_ISR_Handler+0x684>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	4413      	add	r3, r2
 80069d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	00da      	lsls	r2, r3, #3
 80069d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069da:	4413      	add	r3, r2
 80069dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	e017      	b.n	8006a38 <PCD_EP_ISR_Handler+0x6b4>
 8006a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d113      	bne.n	8006a38 <PCD_EP_ISR_Handler+0x6b4>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1e:	4413      	add	r3, r2
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	00da      	lsls	r2, r3, #3
 8006a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a34:	2200      	movs	r2, #0
 8006a36:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f008 f897 	bl	800eb72 <HAL_PCD_DataInStageCallback>
 8006a44:	e051      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006a46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d144      	bne.n	8006adc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	4413      	add	r3, r2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d907      	bls.n	8006a96 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8006a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a92:	619a      	str	r2, [r3, #24]
 8006a94:	e002      	b.n	8006a9c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8006a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f008 f861 	bl	800eb72 <HAL_PCD_DataInStageCallback>
 8006ab0:	e01b      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006aba:	441a      	add	r2, r3
 8006abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006abe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ac8:	441a      	add	r2, r3
 8006aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006acc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f004 fef7 	bl	800b8c8 <USB_EPStartXfer>
 8006ada:	e006      	b.n	8006aea <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006adc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f917 	bl	8006d18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	b21b      	sxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f6ff ac49 	blt.w	800638e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3758      	adds	r7, #88	@ 0x58
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b088      	sub	sp, #32
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d07c      	beq.n	8006c18 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4413      	add	r3, r2
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	8b7b      	ldrh	r3, [r7, #26]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d306      	bcc.n	8006b5c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	8b7b      	ldrh	r3, [r7, #26]
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	619a      	str	r2, [r3, #24]
 8006b5a:	e002      	b.n	8006b62 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d123      	bne.n	8006bb2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b84:	833b      	strh	r3, [r7, #24]
 8006b86:	8b3b      	ldrh	r3, [r7, #24]
 8006b88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b8c:	833b      	strh	r3, [r7, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	8b3b      	ldrh	r3, [r7, #24]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01f      	beq.n	8006bfc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd6:	82fb      	strh	r3, [r7, #22]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	8afb      	ldrh	r3, [r7, #22]
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bf4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006bfc:	8b7b      	ldrh	r3, [r7, #26]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8085 	beq.w	8006d0e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6959      	ldr	r1, [r3, #20]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	891a      	ldrh	r2, [r3, #8]
 8006c10:	8b7b      	ldrh	r3, [r7, #26]
 8006c12:	f006 fb71 	bl	800d2f8 <USB_ReadPMA>
 8006c16:	e07a      	b.n	8006d0e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	8b7b      	ldrh	r3, [r7, #26]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d306      	bcc.n	8006c56 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	8b7b      	ldrh	r3, [r7, #26]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	619a      	str	r2, [r3, #24]
 8006c54:	e002      	b.n	8006c5c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d123      	bne.n	8006cac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	83fb      	strh	r3, [r7, #30]
 8006c80:	8bfb      	ldrh	r3, [r7, #30]
 8006c82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c86:	83fb      	strh	r3, [r7, #30]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	8bfb      	ldrh	r3, [r7, #30]
 8006c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11f      	bne.n	8006cf6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd0:	83bb      	strh	r3, [r7, #28]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	8bbb      	ldrh	r3, [r7, #28]
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006cf6:	8b7b      	ldrh	r3, [r7, #26]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6959      	ldr	r1, [r3, #20]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	895a      	ldrh	r2, [r3, #10]
 8006d08:	8b7b      	ldrh	r3, [r7, #26]
 8006d0a:	f006 faf5 	bl	800d2f8 <USB_ReadPMA>
    }
  }

  return count;
 8006d0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b0a4      	sub	sp, #144	@ 0x90
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	4613      	mov	r3, r2
 8006d24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 81db 	beq.w	80070e8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	4413      	add	r3, r2
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d56:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d907      	bls.n	8006d76 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	619a      	str	r2, [r3, #24]
 8006d74:	e002      	b.n	8006d7c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 80b9 	bne.w	8006ef8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d126      	bne.n	8006ddc <HAL_PCD_EP_DB_Transmit+0xc4>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	4413      	add	r3, r2
 8006da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	00da      	lsls	r2, r3, #3
 8006dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dae:	4413      	add	r3, r2
 8006db0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e01a      	b.n	8006e12 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d116      	bne.n	8006e12 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	4413      	add	r3, r2
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e04:	4413      	add	r3, r2
 8006e06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	2200      	movs	r2, #0
 8006e10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d126      	bne.n	8006e6e <HAL_PCD_EP_DB_Transmit+0x156>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	00da      	lsls	r2, r3, #3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	e017      	b.n	8006e9e <HAL_PCD_EP_DB_Transmit+0x186>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d113      	bne.n	8006e9e <HAL_PCD_EP_DB_Transmit+0x186>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	461a      	mov	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	4413      	add	r3, r2
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	00da      	lsls	r2, r3, #3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f007 fe64 	bl	800eb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 82fa 	beq.w	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed0:	82fb      	strh	r3, [r7, #22]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	8afb      	ldrh	r3, [r7, #22]
 8006ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8013      	strh	r3, [r2, #0]
 8006ef6:	e2d8      	b.n	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d021      	beq.n	8006f46 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	f040 82ac 	bne.w	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006f68:	441a      	add	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a1a      	ldr	r2, [r3, #32]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d30b      	bcc.n	8006f92 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	621a      	str	r2, [r3, #32]
 8006f90:	e017      	b.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d108      	bne.n	8006fac <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006f9a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006faa:	e00a      	b.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d165      	bne.n	8007096 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fde:	4413      	add	r3, r2
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	00da      	lsls	r2, r3, #3
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <HAL_PCD_EP_DB_Transmit+0x308>
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007018:	b29a      	uxth	r2, r3
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	e057      	b.n	80070d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007024:	2b3e      	cmp	r3, #62	@ 0x3e
 8007026:	d818      	bhi.n	800705a <HAL_PCD_EP_DB_Transmit+0x342>
 8007028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_PCD_EP_DB_Transmit+0x32a>
 800703c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800703e:	3301      	adds	r3, #1
 8007040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29a      	uxth	r2, r3
 8007048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800704a:	b29b      	uxth	r3, r3
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	b29b      	uxth	r3, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	b29a      	uxth	r2, r3
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e03a      	b.n	80070d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800705a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <HAL_PCD_EP_DB_Transmit+0x35c>
 800706e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007070:	3b01      	subs	r3, #1
 8007072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29a      	uxth	r2, r3
 800707a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800707c:	b29b      	uxth	r3, r3
 800707e:	029b      	lsls	r3, r3, #10
 8007080:	b29b      	uxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b29b      	uxth	r3, r3
 8007086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708e:	b29a      	uxth	r2, r3
 8007090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e01c      	b.n	80070d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d118      	bne.n	80070d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070b2:	4413      	add	r3, r2
 80070b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	00da      	lsls	r2, r3, #3
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	4413      	add	r3, r2
 80070c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6959      	ldr	r1, [r3, #20]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	891a      	ldrh	r2, [r3, #8]
 80070dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f006 f8c6 	bl	800d272 <USB_WritePMA>
 80070e6:	e1e0      	b.n	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	4413      	add	r3, r2
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	4413      	add	r3, r2
 8007102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800710c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007118:	429a      	cmp	r2, r3
 800711a:	d307      	bcc.n	800712c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	619a      	str	r2, [r3, #24]
 800712a:	e002      	b.n	8007132 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 80c0 	bne.w	80072bc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d126      	bne.n	8007192 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007158:	4413      	add	r3, r2
 800715a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007164:	4413      	add	r3, r2
 8007166:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800716a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800716c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007176:	b29a      	uxth	r2, r3
 8007178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	e01a      	b.n	80071c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d116      	bne.n	80071c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ae:	4413      	add	r3, r2
 80071b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	00da      	lsls	r2, r3, #3
 80071b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c4:	2200      	movs	r2, #0
 80071c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d12b      	bne.n	800722e <HAL_PCD_EP_DB_Transmit+0x516>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	461a      	mov	r2, r3
 80071e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ea:	4413      	add	r3, r2
 80071ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	00da      	lsls	r2, r3, #3
 80071f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f6:	4413      	add	r3, r2
 80071f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800720c:	b29a      	uxth	r2, r3
 800720e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007224:	b29a      	uxth	r2, r3
 8007226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e017      	b.n	800725e <HAL_PCD_EP_DB_Transmit+0x546>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d113      	bne.n	800725e <HAL_PCD_EP_DB_Transmit+0x546>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007244:	4413      	add	r3, r2
 8007246:	677b      	str	r3, [r7, #116]	@ 0x74
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	00da      	lsls	r2, r3, #3
 800724e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007250:	4413      	add	r3, r2
 8007252:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007256:	673b      	str	r3, [r7, #112]	@ 0x70
 8007258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800725a:	2200      	movs	r2, #0
 800725c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f007 fc84 	bl	800eb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 811a 	bne.w	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800728c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007290:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
 80072ba:	e0f6      	b.n	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d121      	bne.n	800730a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	441a      	add	r2, r3
 80072f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007310:	2b01      	cmp	r3, #1
 8007312:	f040 80ca 	bne.w	80074aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800731e:	441a      	add	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800732c:	441a      	add	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6a1a      	ldr	r2, [r3, #32]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	429a      	cmp	r2, r3
 800733c:	d30b      	bcc.n	8007356 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6a1a      	ldr	r2, [r3, #32]
 800734a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	621a      	str	r2, [r3, #32]
 8007354:	e017      	b.n	8007386 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d108      	bne.n	8007370 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800735e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800736e:	e00a      	b.n	8007386 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	657b      	str	r3, [r7, #84]	@ 0x54
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d165      	bne.n	8007460 <HAL_PCD_EP_DB_Transmit+0x748>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073a8:	4413      	add	r3, r2
 80073aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	00da      	lsls	r2, r3, #3
 80073b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <HAL_PCD_EP_DB_Transmit+0x6d2>
 80073d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e054      	b.n	8007494 <HAL_PCD_EP_DB_Transmit+0x77c>
 80073ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80073f0:	d818      	bhi.n	8007424 <HAL_PCD_EP_DB_Transmit+0x70c>
 80073f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8007406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007408:	3301      	adds	r3, #1
 800740a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800740c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29a      	uxth	r2, r3
 8007412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007414:	b29b      	uxth	r3, r3
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	b29b      	uxth	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b29a      	uxth	r2, r3
 800741e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	e037      	b.n	8007494 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800742c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <HAL_PCD_EP_DB_Transmit+0x726>
 8007438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800743a:	3b01      	subs	r3, #1
 800743c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800743e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29a      	uxth	r2, r3
 8007444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007446:	b29b      	uxth	r3, r3
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	b29b      	uxth	r3, r3
 800744c:	4313      	orrs	r3, r2
 800744e:	b29b      	uxth	r3, r3
 8007450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007458:	b29a      	uxth	r2, r3
 800745a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	e019      	b.n	8007494 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d115      	bne.n	8007494 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007470:	b29b      	uxth	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007476:	4413      	add	r3, r2
 8007478:	657b      	str	r3, [r7, #84]	@ 0x54
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	00da      	lsls	r2, r3, #3
 8007480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007482:	4413      	add	r3, r2
 8007484:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007488:	653b      	str	r3, [r7, #80]	@ 0x50
 800748a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800748e:	b29a      	uxth	r2, r3
 8007490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007492:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6959      	ldr	r1, [r3, #20]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	895a      	ldrh	r2, [r3, #10]
 80074a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f005 fee4 	bl	800d272 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074c4:	82bb      	strh	r3, [r7, #20]
 80074c6:	8abb      	ldrh	r3, [r7, #20]
 80074c8:	f083 0310 	eor.w	r3, r3, #16
 80074cc:	82bb      	strh	r3, [r7, #20]
 80074ce:	8abb      	ldrh	r3, [r7, #20]
 80074d0:	f083 0320 	eor.w	r3, r3, #32
 80074d4:	82bb      	strh	r3, [r7, #20]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	441a      	add	r2, r3
 80074e4:	8abb      	ldrh	r3, [r7, #20]
 80074e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3790      	adds	r7, #144	@ 0x90
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007508:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a04      	ldr	r2, [pc, #16]	@ (8007520 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40007000 	.word	0x40007000

08007524 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <HAL_PWREx_GetVoltageRange+0x18>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007530:	4618      	mov	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40007000 	.word	0x40007000

08007540 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8007548:	4b27      	ldr	r3, [pc, #156]	@ (80075e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007550:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8007552:	f000 f861 	bl	8007618 <HAL_PWREx_SMPS_GetEffectiveMode>
 8007556:	4603      	mov	r3, r0
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800755c:	d101      	bne.n	8007562 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e03e      	b.n	80075e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8007562:	4b21      	ldr	r3, [pc, #132]	@ (80075e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800756a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756e:	d101      	bne.n	8007574 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e035      	b.n	80075e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d101      	bne.n	8007580 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	e02f      	b.n	80075e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007580:	4b19      	ldr	r3, [pc, #100]	@ (80075e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007588:	4917      	ldr	r1, [pc, #92]	@ (80075e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8007590:	4b16      	ldr	r3, [pc, #88]	@ (80075ec <HAL_PWREx_ControlVoltageScaling+0xac>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	4a16      	ldr	r2, [pc, #88]	@ (80075f0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007598:	fba2 2303 	umull	r2, r3, r2, r3
 800759c:	09db      	lsrs	r3, r3, #7
 800759e:	2232      	movs	r2, #50	@ 0x32
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
 80075a4:	4a13      	ldr	r2, [pc, #76]	@ (80075f4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80075a6:	fba2 2303 	umull	r2, r3, r2, r3
 80075aa:	08db      	lsrs	r3, r3, #3
 80075ac:	3301      	adds	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075b0:	e002      	b.n	80075b8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075b8:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c4:	d102      	bne.n	80075cc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1f2      	bne.n	80075b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d8:	d101      	bne.n	80075de <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e000      	b.n	80075e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40007000 	.word	0x40007000
 80075ec:	20000014 	.word	0x20000014
 80075f0:	0a7c5ac5 	.word	0x0a7c5ac5
 80075f4:	cccccccd 	.word	0xcccccccd

080075f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80075fc:	4b05      	ldr	r3, [pc, #20]	@ (8007614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	4a04      	ldr	r2, [pc, #16]	@ (8007614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007606:	6093      	str	r3, [r2, #8]
}
 8007608:	bf00      	nop
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40007000 	.word	0x40007000

08007618 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800761e:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800762e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	e00a      	b.n	800764c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8007640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	e001      	b.n	800764c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8007648:	2300      	movs	r3, #0
 800764a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800764c:	687b      	ldr	r3, [r7, #4]
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40007000 	.word	0x40007000

08007660 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f000 bcc2 	b.w	8007ff8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007674:	4b99      	ldr	r3, [pc, #612]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 030c 	and.w	r3, r3, #12
 800767c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800767e:	4b97      	ldr	r3, [pc, #604]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80e9 	beq.w	8007868 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <HAL_RCC_OscConfig+0x4a>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2b0c      	cmp	r3, #12
 80076a0:	f040 8083 	bne.w	80077aa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d17f      	bne.n	80077aa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076aa:	4b8c      	ldr	r3, [pc, #560]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <HAL_RCC_OscConfig+0x64>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f000 bc9a 	b.w	8007ff8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076c8:	4b84      	ldr	r3, [pc, #528]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <HAL_RCC_OscConfig+0x7e>
 80076d4:	4b81      	ldr	r3, [pc, #516]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076dc:	e005      	b.n	80076ea <HAL_RCC_OscConfig+0x8a>
 80076de:	4b7f      	ldr	r3, [pc, #508]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80076e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d224      	bcs.n	8007738 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 feb8 	bl	8008468 <RCC_SetFlashLatencyFromMSIRange>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f000 bc7a 	b.w	8007ff8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007704:	4b75      	ldr	r3, [pc, #468]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a74      	ldr	r2, [pc, #464]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800770a:	f043 0308 	orr.w	r3, r3, #8
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	4b72      	ldr	r3, [pc, #456]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771c:	496f      	ldr	r1, [pc, #444]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007722:	4b6e      	ldr	r3, [pc, #440]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	496a      	ldr	r1, [pc, #424]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	604b      	str	r3, [r1, #4]
 8007736:	e026      	b.n	8007786 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007738:	4b68      	ldr	r3, [pc, #416]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a67      	ldr	r2, [pc, #412]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800773e:	f043 0308 	orr.w	r3, r3, #8
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	4b65      	ldr	r3, [pc, #404]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	4962      	ldr	r1, [pc, #392]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007752:	4313      	orrs	r3, r2
 8007754:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007756:	4b61      	ldr	r3, [pc, #388]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	495d      	ldr	r1, [pc, #372]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fe77 	bl	8008468 <RCC_SetFlashLatencyFromMSIRange>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	f000 bc39 	b.w	8007ff8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007786:	f000 fe15 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 800778a:	4603      	mov	r3, r0
 800778c:	4a54      	ldr	r2, [pc, #336]	@ (80078e0 <HAL_RCC_OscConfig+0x280>)
 800778e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007790:	4b54      	ldr	r3, [pc, #336]	@ (80078e4 <HAL_RCC_OscConfig+0x284>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f7fb fd43 	bl	8003220 <HAL_InitTick>
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d060      	beq.n	8007866 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	f000 bc27 	b.w	8007ff8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d039      	beq.n	8007826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077b2:	4b4a      	ldr	r3, [pc, #296]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a49      	ldr	r2, [pc, #292]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077be:	f7fc f9d3 	bl	8003b68 <HAL_GetTick>
 80077c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077c4:	e00f      	b.n	80077e6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077c6:	f7fc f9cf 	bl	8003b68 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d908      	bls.n	80077e6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077d4:	4b41      	ldr	r3, [pc, #260]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	f000 bc09 	b.w	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077e6:	4b3d      	ldr	r3, [pc, #244]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0e9      	beq.n	80077c6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077f2:	4b3a      	ldr	r3, [pc, #232]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a39      	ldr	r2, [pc, #228]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80077f8:	f043 0308 	orr.w	r3, r3, #8
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	4b37      	ldr	r3, [pc, #220]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	4934      	ldr	r1, [pc, #208]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800780c:	4313      	orrs	r3, r2
 800780e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007810:	4b32      	ldr	r3, [pc, #200]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	492f      	ldr	r1, [pc, #188]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007820:	4313      	orrs	r3, r2
 8007822:	604b      	str	r3, [r1, #4]
 8007824:	e020      	b.n	8007868 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007826:	4b2d      	ldr	r3, [pc, #180]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a2c      	ldr	r2, [pc, #176]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007832:	f7fc f999 	bl	8003b68 <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007838:	e00e      	b.n	8007858 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800783a:	f7fc f995 	bl	8003b68 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d907      	bls.n	8007858 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007848:	4b24      	ldr	r3, [pc, #144]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e3cf      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007858:	4b20      	ldr	r3, [pc, #128]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1ea      	bne.n	800783a <HAL_RCC_OscConfig+0x1da>
 8007864:	e000      	b.n	8007868 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007866:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d07e      	beq.n	8007972 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d005      	beq.n	8007886 <HAL_RCC_OscConfig+0x226>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b0c      	cmp	r3, #12
 800787e:	d10e      	bne.n	800789e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b03      	cmp	r3, #3
 8007884:	d10b      	bne.n	800789e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007886:	4b15      	ldr	r3, [pc, #84]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d06e      	beq.n	8007970 <HAL_RCC_OscConfig+0x310>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d16a      	bne.n	8007970 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e3ac      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a6:	d106      	bne.n	80078b6 <HAL_RCC_OscConfig+0x256>
 80078a8:	4b0c      	ldr	r3, [pc, #48]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a0b      	ldr	r2, [pc, #44]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80078ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	e024      	b.n	8007900 <HAL_RCC_OscConfig+0x2a0>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078be:	d113      	bne.n	80078e8 <HAL_RCC_OscConfig+0x288>
 80078c0:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a05      	ldr	r2, [pc, #20]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80078c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4b03      	ldr	r3, [pc, #12]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a02      	ldr	r2, [pc, #8]	@ (80078dc <HAL_RCC_OscConfig+0x27c>)
 80078d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e012      	b.n	8007900 <HAL_RCC_OscConfig+0x2a0>
 80078da:	bf00      	nop
 80078dc:	40021000 	.word	0x40021000
 80078e0:	20000014 	.word	0x20000014
 80078e4:	20000018 	.word	0x20000018
 80078e8:	4b8b      	ldr	r3, [pc, #556]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a8a      	ldr	r2, [pc, #552]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	4b88      	ldr	r3, [pc, #544]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a87      	ldr	r2, [pc, #540]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80078fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d019      	beq.n	800793c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fc f92e 	bl	8003b68 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800790e:	e00e      	b.n	800792e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007910:	f7fc f92a 	bl	8003b68 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	@ 0x64
 800791c:	d907      	bls.n	800792e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800791e:	4b7e      	ldr	r3, [pc, #504]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e364      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792e:	4b7a      	ldr	r3, [pc, #488]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ea      	beq.n	8007910 <HAL_RCC_OscConfig+0x2b0>
 800793a:	e01a      	b.n	8007972 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fc f914 	bl	8003b68 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007942:	e00e      	b.n	8007962 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007944:	f7fc f910 	bl	8003b68 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	@ 0x64
 8007950:	d907      	bls.n	8007962 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007952:	4b71      	ldr	r3, [pc, #452]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e34a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007962:	4b6d      	ldr	r3, [pc, #436]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1ea      	bne.n	8007944 <HAL_RCC_OscConfig+0x2e4>
 800796e:	e000      	b.n	8007972 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d06c      	beq.n	8007a58 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2b04      	cmp	r3, #4
 8007982:	d005      	beq.n	8007990 <HAL_RCC_OscConfig+0x330>
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b0c      	cmp	r3, #12
 8007988:	d119      	bne.n	80079be <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d116      	bne.n	80079be <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007990:	4b61      	ldr	r3, [pc, #388]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_RCC_OscConfig+0x348>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e327      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	061b      	lsls	r3, r3, #24
 80079b6:	4958      	ldr	r1, [pc, #352]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079bc:	e04c      	b.n	8007a58 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d029      	beq.n	8007a1a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079c6:	4b54      	ldr	r3, [pc, #336]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a53      	ldr	r2, [pc, #332]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80079cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d2:	f7fc f8c9 	bl	8003b68 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079d8:	e00e      	b.n	80079f8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079da:	f7fc f8c5 	bl	8003b68 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d907      	bls.n	80079f8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e8:	4b4b      	ldr	r3, [pc, #300]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e2ff      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079f8:	4b47      	ldr	r3, [pc, #284]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ea      	beq.n	80079da <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a04:	4b44      	ldr	r3, [pc, #272]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	4941      	ldr	r1, [pc, #260]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	604b      	str	r3, [r1, #4]
 8007a18:	e01e      	b.n	8007a58 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a26:	f7fc f89f 	bl	8003b68 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a2c:	e00e      	b.n	8007a4c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a2e:	f7fc f89b 	bl	8003b68 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d907      	bls.n	8007a4c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a3c:	4b36      	ldr	r3, [pc, #216]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e2d5      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a4c:	4b32      	ldr	r3, [pc, #200]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1ea      	bne.n	8007a2e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d062      	beq.n	8007b2a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d038      	beq.n	8007ade <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d108      	bne.n	8007a86 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8007a74:	4b28      	ldr	r3, [pc, #160]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a7a:	4a27      	ldr	r2, [pc, #156]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a7c:	f023 0310 	bic.w	r3, r3, #16
 8007a80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007a84:	e007      	b.n	8007a96 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8007a86:	4b24      	ldr	r3, [pc, #144]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a8c:	4a22      	ldr	r2, [pc, #136]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a8e:	f043 0310 	orr.w	r3, r3, #16
 8007a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a96:	4b20      	ldr	r3, [pc, #128]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa6:	f7fc f85f 	bl	8003b68 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007aac:	e00f      	b.n	8007ace <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aae:	f7fc f85b 	bl	8003b68 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b07      	cmp	r3, #7
 8007aba:	d908      	bls.n	8007ace <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007abc:	4b16      	ldr	r3, [pc, #88]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e294      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ace:	4b12      	ldr	r3, [pc, #72]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0e8      	beq.n	8007aae <HAL_RCC_OscConfig+0x44e>
 8007adc:	e025      	b.n	8007b2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ade:	4b0e      	ldr	r3, [pc, #56]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aee:	f7fc f83b 	bl	8003b68 <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007af4:	e012      	b.n	8007b1c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007af6:	f7fc f837 	bl	8003b68 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	d90b      	bls.n	8007b1c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <HAL_RCC_OscConfig+0x4b8>)
 8007b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e270      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
 8007b16:	bf00      	nop
 8007b18:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b1c:	4ba8      	ldr	r3, [pc, #672]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e5      	bne.n	8007af6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 812d 	beq.w	8007d92 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007b3c:	4ba0      	ldr	r3, [pc, #640]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10d      	bne.n	8007b64 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b48:	4b9d      	ldr	r3, [pc, #628]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4c:	4a9c      	ldr	r2, [pc, #624]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b54:	4b9a      	ldr	r3, [pc, #616]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b60:	2301      	movs	r3, #1
 8007b62:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b64:	4b97      	ldr	r3, [pc, #604]	@ (8007dc4 <HAL_RCC_OscConfig+0x764>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d11e      	bne.n	8007bae <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b70:	4b94      	ldr	r3, [pc, #592]	@ (8007dc4 <HAL_RCC_OscConfig+0x764>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a93      	ldr	r2, [pc, #588]	@ (8007dc4 <HAL_RCC_OscConfig+0x764>)
 8007b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b7c:	f7fb fff4 	bl	8003b68 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b82:	e00e      	b.n	8007ba2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b84:	f7fb fff0 	bl	8003b68 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d907      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b92:	4b8c      	ldr	r3, [pc, #560]	@ (8007dc4 <HAL_RCC_OscConfig+0x764>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e22a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ba2:	4b88      	ldr	r3, [pc, #544]	@ (8007dc4 <HAL_RCC_OscConfig+0x764>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0ea      	beq.n	8007b84 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01f      	beq.n	8007bfa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d010      	beq.n	8007be8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007bc6:	4b7e      	ldr	r3, [pc, #504]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bcc:	4a7c      	ldr	r2, [pc, #496]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bce:	f043 0304 	orr.w	r3, r3, #4
 8007bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bdc:	4a78      	ldr	r2, [pc, #480]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007be6:	e018      	b.n	8007c1a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007be8:	4b75      	ldr	r3, [pc, #468]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bee:	4a74      	ldr	r2, [pc, #464]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bf8:	e00f      	b.n	8007c1a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bfa:	4b71      	ldr	r3, [pc, #452]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c00:	4a6f      	ldr	r2, [pc, #444]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c02:	f023 0301 	bic.w	r3, r3, #1
 8007c06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c10:	4a6b      	ldr	r2, [pc, #428]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c12:	f023 0304 	bic.w	r3, r3, #4
 8007c16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d068      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c22:	f7fb ffa1 	bl	8003b68 <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c28:	e011      	b.n	8007c4e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c2a:	f7fb ff9d 	bl	8003b68 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d908      	bls.n	8007c4e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c3c:	4b60      	ldr	r3, [pc, #384]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e1d4      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0e6      	beq.n	8007c2a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d022      	beq.n	8007cae <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c68:	4b55      	ldr	r3, [pc, #340]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6e:	4a54      	ldr	r2, [pc, #336]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c78:	e011      	b.n	8007c9e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c7a:	f7fb ff75 	bl	8003b68 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d908      	bls.n	8007c9e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e1ac      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c9e:	4b48      	ldr	r3, [pc, #288]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0e6      	beq.n	8007c7a <HAL_RCC_OscConfig+0x61a>
 8007cac:	e068      	b.n	8007d80 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007cae:	4b44      	ldr	r3, [pc, #272]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb4:	4a42      	ldr	r2, [pc, #264]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cbe:	e011      	b.n	8007ce4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc0:	f7fb ff52 	bl	8003b68 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d908      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e189      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ce4:	4b36      	ldr	r3, [pc, #216]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e6      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x660>
 8007cf2:	e045      	b.n	8007d80 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf4:	f7fb ff38 	bl	8003b68 <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cfa:	e011      	b.n	8007d20 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cfc:	f7fb ff34 	bl	8003b68 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d908      	bls.n	8007d20 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e16b      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d20:	4b27      	ldr	r3, [pc, #156]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e6      	bne.n	8007cfc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007d2e:	4b24      	ldr	r3, [pc, #144]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d021      	beq.n	8007d80 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d3c:	4b20      	ldr	r3, [pc, #128]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d42:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d4c:	e011      	b.n	8007d72 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4e:	f7fb ff0b 	bl	8003b68 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d908      	bls.n	8007d72 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d60:	4b17      	ldr	r3, [pc, #92]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e142      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d72:	4b13      	ldr	r3, [pc, #76]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e6      	bne.n	8007d4e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d80:	7ffb      	ldrb	r3, [r7, #31]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d105      	bne.n	8007d92 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d86:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d04f      	beq.n	8007e3e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d028      	beq.n	8007df8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007da6:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dac:	4a04      	ldr	r2, [pc, #16]	@ (8007dc0 <HAL_RCC_OscConfig+0x760>)
 8007dae:	f043 0301 	orr.w	r3, r3, #1
 8007db2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db6:	f7fb fed7 	bl	8003b68 <HAL_GetTick>
 8007dba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dbc:	e014      	b.n	8007de8 <HAL_RCC_OscConfig+0x788>
 8007dbe:	bf00      	nop
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dc8:	f7fb fece 	bl	8003b68 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d908      	bls.n	8007de8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dd6:	4b8a      	ldr	r3, [pc, #552]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e107      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007de8:	4b85      	ldr	r3, [pc, #532]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0e8      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x768>
 8007df6:	e022      	b.n	8007e3e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007df8:	4b81      	ldr	r3, [pc, #516]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dfe:	4a80      	ldr	r2, [pc, #512]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e08:	f7fb feae 	bl	8003b68 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e0e:	e00f      	b.n	8007e30 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e10:	f7fb feaa 	bl	8003b68 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d908      	bls.n	8007e30 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e1e:	4b78      	ldr	r3, [pc, #480]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e0e3      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e30:	4b73      	ldr	r3, [pc, #460]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e8      	bne.n	8007e10 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80d7 	beq.w	8007ff6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e48:	4b6d      	ldr	r3, [pc, #436]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f003 030c 	and.w	r3, r3, #12
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	f000 8091 	beq.w	8007f78 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d166      	bne.n	8007f2c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5e:	4b68      	ldr	r3, [pc, #416]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a67      	ldr	r2, [pc, #412]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6a:	f7fb fe7d 	bl	8003b68 <HAL_GetTick>
 8007e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e70:	e00e      	b.n	8007e90 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e72:	f7fb fe79 	bl	8003b68 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d907      	bls.n	8007e90 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e80:	4b5f      	ldr	r3, [pc, #380]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e0b3      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e90:	4b5b      	ldr	r3, [pc, #364]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ea      	bne.n	8007e72 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e9c:	4b58      	ldr	r3, [pc, #352]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	4b58      	ldr	r3, [pc, #352]	@ (8008004 <HAL_RCC_OscConfig+0x9a4>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007eac:	3a01      	subs	r2, #1
 8007eae:	0112      	lsls	r2, r2, #4
 8007eb0:	4311      	orrs	r1, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007eb6:	0212      	lsls	r2, r2, #8
 8007eb8:	4311      	orrs	r1, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007ebe:	0852      	lsrs	r2, r2, #1
 8007ec0:	3a01      	subs	r2, #1
 8007ec2:	0552      	lsls	r2, r2, #21
 8007ec4:	4311      	orrs	r1, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007eca:	0852      	lsrs	r2, r2, #1
 8007ecc:	3a01      	subs	r2, #1
 8007ece:	0652      	lsls	r2, r2, #25
 8007ed0:	4311      	orrs	r1, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ed6:	06d2      	lsls	r2, r2, #27
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	4949      	ldr	r1, [pc, #292]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ee0:	4b47      	ldr	r3, [pc, #284]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a46      	ldr	r2, [pc, #280]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007eec:	4b44      	ldr	r3, [pc, #272]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	4a43      	ldr	r2, [pc, #268]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ef6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef8:	f7fb fe36 	bl	8003b68 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007efe:	e00e      	b.n	8007f1e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f00:	f7fb fe32 	bl	8003b68 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d907      	bls.n	8007f1e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e06c      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f1e:	4b38      	ldr	r3, [pc, #224]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ea      	beq.n	8007f00 <HAL_RCC_OscConfig+0x8a0>
 8007f2a:	e064      	b.n	8007ff6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b34      	ldr	r3, [pc, #208]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a33      	ldr	r2, [pc, #204]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fb fe16 	bl	8003b68 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f3e:	e00e      	b.n	8007f5e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f40:	f7fb fe12 	bl	8003b68 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d907      	bls.n	8007f5e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e04c      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f5e:	4b28      	ldr	r3, [pc, #160]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1ea      	bne.n	8007f40 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f6a:	4b25      	ldr	r3, [pc, #148]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	4924      	ldr	r1, [pc, #144]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f70:	4b25      	ldr	r3, [pc, #148]	@ (8008008 <HAL_RCC_OscConfig+0x9a8>)
 8007f72:	4013      	ands	r3, r2
 8007f74:	60cb      	str	r3, [r1, #12]
 8007f76:	e03e      	b.n	8007ff6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e039      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8007f84:	4b1e      	ldr	r3, [pc, #120]	@ (8008000 <HAL_RCC_OscConfig+0x9a0>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f003 0203 	and.w	r2, r3, #3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d12c      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d123      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d11b      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d113      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d109      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	3b01      	subs	r3, #1
 8007fec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d001      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40021000 	.word	0x40021000
 8008004:	019f800c 	.word	0x019f800c
 8008008:	feeefffc 	.word	0xfeeefffc

0800800c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e11c      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008024:	4b90      	ldr	r3, [pc, #576]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d910      	bls.n	8008054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b8d      	ldr	r3, [pc, #564]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f023 020f 	bic.w	r2, r3, #15
 800803a:	498b      	ldr	r1, [pc, #556]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	4313      	orrs	r3, r2
 8008040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008042:	4b89      	ldr	r3, [pc, #548]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d001      	beq.n	8008054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e104      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d010      	beq.n	8008082 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	4b81      	ldr	r3, [pc, #516]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800806c:	429a      	cmp	r2, r3
 800806e:	d908      	bls.n	8008082 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008070:	4b7e      	ldr	r3, [pc, #504]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	497b      	ldr	r1, [pc, #492]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8085 	beq.w	800819a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d11f      	bne.n	80080d8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008098:	4b74      	ldr	r3, [pc, #464]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e0da      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80080a8:	f000 fa42 	bl	8008530 <RCC_GetSysClockFreqFromPLLSource>
 80080ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4a6f      	ldr	r2, [pc, #444]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d947      	bls.n	8008146 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80080b6:	4b6d      	ldr	r3, [pc, #436]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d141      	bne.n	8008146 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080c2:	4b6a      	ldr	r3, [pc, #424]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ca:	4a68      	ldr	r2, [pc, #416]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80080cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80080d2:	2380      	movs	r3, #128	@ 0x80
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	e036      	b.n	8008146 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d107      	bne.n	80080f0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080e0:	4b62      	ldr	r3, [pc, #392]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d115      	bne.n	8008118 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0b6      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080f8:	4b5c      	ldr	r3, [pc, #368]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e0aa      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008108:	4b58      	ldr	r3, [pc, #352]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e0a2      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008118:	f000 f8b0 	bl	800827c <HAL_RCC_GetSysClockFreq>
 800811c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4a53      	ldr	r2, [pc, #332]	@ (8008270 <HAL_RCC_ClockConfig+0x264>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d90f      	bls.n	8008146 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008126:	4b51      	ldr	r3, [pc, #324]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008132:	4b4e      	ldr	r3, [pc, #312]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800813a:	4a4c      	ldr	r2, [pc, #304]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 800813c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008140:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008142:	2380      	movs	r3, #128	@ 0x80
 8008144:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008146:	4b49      	ldr	r3, [pc, #292]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f023 0203 	bic.w	r2, r3, #3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4946      	ldr	r1, [pc, #280]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008154:	4313      	orrs	r3, r2
 8008156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008158:	f7fb fd06 	bl	8003b68 <HAL_GetTick>
 800815c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800815e:	e013      	b.n	8008188 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008160:	f7fb fd02 	bl	8003b68 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800816e:	4293      	cmp	r3, r2
 8008170:	d90a      	bls.n	8008188 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008172:	4b3e      	ldr	r3, [pc, #248]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 020c 	and.w	r2, r3, #12
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	429a      	cmp	r2, r3
 8008182:	d001      	beq.n	8008188 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e06a      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008188:	4b38      	ldr	r3, [pc, #224]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 020c 	and.w	r2, r3, #12
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	429a      	cmp	r2, r3
 8008198:	d1e2      	bne.n	8008160 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b80      	cmp	r3, #128	@ 0x80
 800819e:	d105      	bne.n	80081ac <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80081a0:	4b32      	ldr	r3, [pc, #200]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4a31      	ldr	r2, [pc, #196]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081aa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d010      	beq.n	80081da <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	4b2b      	ldr	r3, [pc, #172]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d208      	bcs.n	80081da <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081c8:	4b28      	ldr	r3, [pc, #160]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	4925      	ldr	r1, [pc, #148]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081da:	4b23      	ldr	r3, [pc, #140]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d210      	bcs.n	800820a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081e8:	4b1f      	ldr	r3, [pc, #124]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f023 020f 	bic.w	r2, r3, #15
 80081f0:	491d      	ldr	r1, [pc, #116]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <HAL_RCC_ClockConfig+0x25c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d001      	beq.n	800820a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e029      	b.n	800825e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008216:	4b15      	ldr	r3, [pc, #84]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	4912      	ldr	r1, [pc, #72]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008224:	4313      	orrs	r3, r2
 8008226:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008234:	4b0d      	ldr	r3, [pc, #52]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	490a      	ldr	r1, [pc, #40]	@ (800826c <HAL_RCC_ClockConfig+0x260>)
 8008244:	4313      	orrs	r3, r2
 8008246:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008248:	f000 f8b4 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 800824c:	4603      	mov	r3, r0
 800824e:	4a09      	ldr	r2, [pc, #36]	@ (8008274 <HAL_RCC_ClockConfig+0x268>)
 8008250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008252:	4b09      	ldr	r3, [pc, #36]	@ (8008278 <HAL_RCC_ClockConfig+0x26c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4618      	mov	r0, r3
 8008258:	f7fa ffe2 	bl	8003220 <HAL_InitTick>
 800825c:	4603      	mov	r3, r0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40022000 	.word	0x40022000
 800826c:	40021000 	.word	0x40021000
 8008270:	04c4b400 	.word	0x04c4b400
 8008274:	20000014 	.word	0x20000014
 8008278:	20000018 	.word	0x20000018

0800827c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	@ 0x24
 8008280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	61fb      	str	r3, [r7, #28]
 8008286:	2300      	movs	r3, #0
 8008288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800828a:	4b47      	ldr	r3, [pc, #284]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 030c 	and.w	r3, r3, #12
 8008292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008294:	4b44      	ldr	r3, [pc, #272]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <HAL_RCC_GetSysClockFreq+0x34>
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2b0c      	cmp	r3, #12
 80082a8:	d121      	bne.n	80082ee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d11e      	bne.n	80082ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80082b0:	4b3d      	ldr	r3, [pc, #244]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d107      	bne.n	80082cc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80082bc:	4b3a      	ldr	r3, [pc, #232]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80082be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	e005      	b.n	80082d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80082cc:	4b36      	ldr	r3, [pc, #216]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	091b      	lsrs	r3, r3, #4
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80082d8:	4a34      	ldr	r2, [pc, #208]	@ (80083ac <HAL_RCC_GetSysClockFreq+0x130>)
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10d      	bne.n	8008304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082ec:	e00a      	b.n	8008304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d102      	bne.n	80082fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082f4:	4b2e      	ldr	r3, [pc, #184]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80082f6:	61bb      	str	r3, [r7, #24]
 80082f8:	e004      	b.n	8008304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d101      	bne.n	8008304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008300:	4b2b      	ldr	r3, [pc, #172]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8008302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	2b0c      	cmp	r3, #12
 8008308:	d146      	bne.n	8008398 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800830a:	4b27      	ldr	r3, [pc, #156]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008314:	4b24      	ldr	r3, [pc, #144]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	091b      	lsrs	r3, r3, #4
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	3301      	adds	r3, #1
 8008320:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d003      	beq.n	8008330 <HAL_RCC_GetSysClockFreq+0xb4>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d00d      	beq.n	800834a <HAL_RCC_GetSysClockFreq+0xce>
 800832e:	e019      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008330:	4a1f      	ldr	r2, [pc, #124]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	fbb2 f3f3 	udiv	r3, r2, r3
 8008338:	4a1b      	ldr	r2, [pc, #108]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800833a:	68d2      	ldr	r2, [r2, #12]
 800833c:	0a12      	lsrs	r2, r2, #8
 800833e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	617b      	str	r3, [r7, #20]
        break;
 8008348:	e019      	b.n	800837e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800834a:	4a19      	ldr	r2, [pc, #100]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0x134>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008352:	4a15      	ldr	r2, [pc, #84]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008354:	68d2      	ldr	r2, [r2, #12]
 8008356:	0a12      	lsrs	r2, r2, #8
 8008358:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800835c:	fb02 f303 	mul.w	r3, r2, r3
 8008360:	617b      	str	r3, [r7, #20]
        break;
 8008362:	e00c      	b.n	800837e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	fbb2 f3f3 	udiv	r3, r2, r3
 800836c:	4a0e      	ldr	r2, [pc, #56]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800836e:	68d2      	ldr	r2, [r2, #12]
 8008370:	0a12      	lsrs	r2, r2, #8
 8008372:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	617b      	str	r3, [r7, #20]
        break;
 800837c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800837e:	4b0a      	ldr	r3, [pc, #40]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	0e5b      	lsrs	r3, r3, #25
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	3301      	adds	r3, #1
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	fbb2 f3f3 	udiv	r3, r2, r3
 8008396:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008398:	69bb      	ldr	r3, [r7, #24]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3724      	adds	r7, #36	@ 0x24
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40021000 	.word	0x40021000
 80083ac:	0800f7dc 	.word	0x0800f7dc
 80083b0:	00f42400 	.word	0x00f42400

080083b4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80083b8:	f7ff ff60 	bl	800827c <HAL_RCC_GetSysClockFreq>
 80083bc:	4602      	mov	r2, r0
 80083be:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <HAL_RCC_GetHCLKFreq+0x20>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	091b      	lsrs	r3, r3, #4
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	4903      	ldr	r1, [pc, #12]	@ (80083d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80083ca:	5ccb      	ldrb	r3, [r1, r3]
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40021000 	.word	0x40021000
 80083d8:	0800f7c4 	.word	0x0800f7c4

080083dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083e0:	f7ff ffe8 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 80083e4:	4602      	mov	r2, r0
 80083e6:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	4903      	ldr	r1, [pc, #12]	@ (8008400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083f2:	5ccb      	ldrb	r3, [r1, r3]
 80083f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	40021000 	.word	0x40021000
 8008400:	0800f7d4 	.word	0x0800f7d4

08008404 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	220f      	movs	r2, #15
 8008412:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008414:	4b12      	ldr	r3, [pc, #72]	@ (8008460 <HAL_RCC_GetClockConfig+0x5c>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0203 	and.w	r2, r3, #3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008420:	4b0f      	ldr	r3, [pc, #60]	@ (8008460 <HAL_RCC_GetClockConfig+0x5c>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800842c:	4b0c      	ldr	r3, [pc, #48]	@ (8008460 <HAL_RCC_GetClockConfig+0x5c>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008438:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <HAL_RCC_GetClockConfig+0x5c>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	08db      	lsrs	r3, r3, #3
 800843e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008446:	4b07      	ldr	r3, [pc, #28]	@ (8008464 <HAL_RCC_GetClockConfig+0x60>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 020f 	and.w	r2, r3, #15
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	601a      	str	r2, [r3, #0]
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40021000 	.word	0x40021000
 8008464:	40022000 	.word	0x40022000

08008468 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008474:	4b2c      	ldr	r3, [pc, #176]	@ (8008528 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008480:	f7ff f850 	bl	8007524 <HAL_PWREx_GetVoltageRange>
 8008484:	6138      	str	r0, [r7, #16]
 8008486:	e014      	b.n	80084b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008488:	4b27      	ldr	r3, [pc, #156]	@ (8008528 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800848a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848c:	4a26      	ldr	r2, [pc, #152]	@ (8008528 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800848e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008492:	6593      	str	r3, [r2, #88]	@ 0x58
 8008494:	4b24      	ldr	r3, [pc, #144]	@ (8008528 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80084a0:	f7ff f840 	bl	8007524 <HAL_PWREx_GetVoltageRange>
 80084a4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80084a6:	4b20      	ldr	r3, [pc, #128]	@ (8008528 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80084a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008528 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80084ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084be:	d10b      	bne.n	80084d8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b80      	cmp	r3, #128	@ 0x80
 80084c4:	d919      	bls.n	80084fa <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80084ca:	d902      	bls.n	80084d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80084cc:	2302      	movs	r3, #2
 80084ce:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80084d0:	e013      	b.n	80084fa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084d2:	2301      	movs	r3, #1
 80084d4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80084d6:	e010      	b.n	80084fa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b80      	cmp	r3, #128	@ 0x80
 80084dc:	d902      	bls.n	80084e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80084de:	2303      	movs	r3, #3
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e00a      	b.n	80084fa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b80      	cmp	r3, #128	@ 0x80
 80084e8:	d102      	bne.n	80084f0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80084ea:	2302      	movs	r3, #2
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	e004      	b.n	80084fa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b70      	cmp	r3, #112	@ 0x70
 80084f4:	d101      	bne.n	80084fa <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084f6:	2301      	movs	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80084fa:	4b0c      	ldr	r3, [pc, #48]	@ (800852c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 020f 	bic.w	r2, r3, #15
 8008502:	490a      	ldr	r1, [pc, #40]	@ (800852c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800850a:	4b08      	ldr	r3, [pc, #32]	@ (800852c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	40021000 	.word	0x40021000
 800852c:	40022000 	.word	0x40022000

08008530 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008536:	4b31      	ldr	r3, [pc, #196]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008540:	4b2e      	ldr	r3, [pc, #184]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	091b      	lsrs	r3, r3, #4
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	3301      	adds	r3, #1
 800854c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d015      	beq.n	8008580 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b03      	cmp	r3, #3
 8008558:	d839      	bhi.n	80085ce <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d01c      	beq.n	800859a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d133      	bne.n	80085ce <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008566:	4a26      	ldr	r2, [pc, #152]	@ (8008600 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	fbb2 f3f3 	udiv	r3, r2, r3
 800856e:	4a23      	ldr	r2, [pc, #140]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008570:	68d2      	ldr	r2, [r2, #12]
 8008572:	0a12      	lsrs	r2, r2, #8
 8008574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	613b      	str	r3, [r7, #16]
      break;
 800857e:	e029      	b.n	80085d4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008580:	4a1f      	ldr	r2, [pc, #124]	@ (8008600 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	4a1c      	ldr	r2, [pc, #112]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800858a:	68d2      	ldr	r2, [r2, #12]
 800858c:	0a12      	lsrs	r2, r2, #8
 800858e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	613b      	str	r3, [r7, #16]
      break;
 8008598:	e01c      	b.n	80085d4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800859a:	4b18      	ldr	r3, [pc, #96]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d107      	bne.n	80085b6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80085a6:	4b15      	ldr	r3, [pc, #84]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80085a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e005      	b.n	80085c2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80085b6:	4b11      	ldr	r3, [pc, #68]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80085c2:	4a10      	ldr	r2, [pc, #64]	@ (8008604 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ca:	613b      	str	r3, [r7, #16]
        break;
 80085cc:	e002      	b.n	80085d4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]
      break;
 80085d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80085d4:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	0e5b      	lsrs	r3, r3, #25
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	3301      	adds	r3, #1
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80085ee:	683b      	ldr	r3, [r7, #0]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	40021000 	.word	0x40021000
 8008600:	00f42400 	.word	0x00f42400
 8008604:	0800f7dc 	.word	0x0800f7dc

08008608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008610:	2300      	movs	r3, #0
 8008612:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008614:	2300      	movs	r3, #0
 8008616:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008620:	2b00      	cmp	r3, #0
 8008622:	d040      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008628:	2b80      	cmp	r3, #128	@ 0x80
 800862a:	d02a      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800862c:	2b80      	cmp	r3, #128	@ 0x80
 800862e:	d825      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008630:	2b60      	cmp	r3, #96	@ 0x60
 8008632:	d026      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008634:	2b60      	cmp	r3, #96	@ 0x60
 8008636:	d821      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008638:	2b40      	cmp	r3, #64	@ 0x40
 800863a:	d006      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800863c:	2b40      	cmp	r3, #64	@ 0x40
 800863e:	d81d      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008644:	2b20      	cmp	r3, #32
 8008646:	d010      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008648:	e018      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800864a:	4b8f      	ldr	r3, [pc, #572]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	4a8e      	ldr	r2, [pc, #568]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008654:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008656:	e015      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fb66 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008668:	e00c      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3320      	adds	r3, #32
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fc43 	bl	8008efc <RCCEx_PLLSAI2_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800867a:	e003      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	77fb      	strb	r3, [r7, #31]
        break;
 8008680:	e000      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8008682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008684:	7ffb      	ldrb	r3, [r7, #31]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800868a:	4b7f      	ldr	r3, [pc, #508]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800868c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008690:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008698:	497b      	ldr	r1, [pc, #492]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800869a:	4313      	orrs	r3, r2
 800869c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80086a0:	e001      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	7ffb      	ldrb	r3, [r7, #31]
 80086a4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d047      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ba:	d030      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80086bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086c0:	d82a      	bhi.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80086c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086c6:	d02a      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80086c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086cc:	d824      	bhi.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80086ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d2:	d008      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80086d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d8:	d81e      	bhi.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80086de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e2:	d010      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80086e4:	e018      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80086e6:	4b68      	ldr	r3, [pc, #416]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	4a67      	ldr	r2, [pc, #412]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086f2:	e015      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3304      	adds	r3, #4
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fb18 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008704:	e00c      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3320      	adds	r3, #32
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fbf5 	bl	8008efc <RCCEx_PLLSAI2_Config>
 8008712:	4603      	mov	r3, r0
 8008714:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008716:	e003      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	77fb      	strb	r3, [r7, #31]
        break;
 800871c:	e000      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800871e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008720:	7ffb      	ldrb	r3, [r7, #31]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10b      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008726:	4b58      	ldr	r3, [pc, #352]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008728:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800872c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008734:	4954      	ldr	r1, [pc, #336]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800873c:	e001      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873e:	7ffb      	ldrb	r3, [r7, #31]
 8008740:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 80ab 	beq.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008750:	2300      	movs	r3, #0
 8008752:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008754:	4b4c      	ldr	r3, [pc, #304]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10d      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008760:	4b49      	ldr	r3, [pc, #292]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008764:	4a48      	ldr	r2, [pc, #288]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800876a:	6593      	str	r3, [r2, #88]	@ 0x58
 800876c:	4b46      	ldr	r3, [pc, #280]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800876e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008778:	2301      	movs	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800877c:	4b43      	ldr	r3, [pc, #268]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a42      	ldr	r2, [pc, #264]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008788:	f7fb f9ee 	bl	8003b68 <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800878e:	e00f      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008790:	f7fb f9ea 	bl	8003b68 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d908      	bls.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800879e:	4b3b      	ldr	r3, [pc, #236]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d109      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80087ae:	e006      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087b0:	4b36      	ldr	r3, [pc, #216]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0e9      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80087bc:	e000      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80087be:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80087c0:	7ffb      	ldrb	r3, [r7, #31]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d164      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80087c6:	4b30      	ldr	r3, [pc, #192]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087d0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01f      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d019      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087e4:	4b28      	ldr	r3, [pc, #160]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ee:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087f0:	4b25      	ldr	r3, [pc, #148]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	4a24      	ldr	r2, [pc, #144]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008800:	4b21      	ldr	r3, [pc, #132]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008806:	4a20      	ldr	r2, [pc, #128]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800880c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008810:	4a1d      	ldr	r2, [pc, #116]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01f      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008822:	f7fb f9a1 	bl	8003b68 <HAL_GetTick>
 8008826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008828:	e012      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800882a:	f7fb f99d 	bl	8003b68 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008838:	4293      	cmp	r3, r2
 800883a:	d909      	bls.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800883c:	4b12      	ldr	r3, [pc, #72]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800884e:	e007      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008850:	4b0d      	ldr	r3, [pc, #52]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0e5      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8008860:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8008862:	7ffb      	ldrb	r3, [r7, #31]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10c      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008868:	4b07      	ldr	r3, [pc, #28]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800886e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008878:	4903      	ldr	r1, [pc, #12]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008880:	e008      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008882:	7ffb      	ldrb	r3, [r7, #31]
 8008884:	77bb      	strb	r3, [r7, #30]
 8008886:	e005      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008888:	40021000 	.word	0x40021000
 800888c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008890:	7ffb      	ldrb	r3, [r7, #31]
 8008892:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d105      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800889a:	4b9c      	ldr	r3, [pc, #624]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800889c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889e:	4a9b      	ldr	r2, [pc, #620]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088b2:	4b96      	ldr	r3, [pc, #600]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b8:	f023 0203 	bic.w	r2, r3, #3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c0:	4992      	ldr	r1, [pc, #584]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088d4:	4b8d      	ldr	r3, [pc, #564]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088da:	f023 020c 	bic.w	r2, r3, #12
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e2:	498a      	ldr	r1, [pc, #552]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088f6:	4b85      	ldr	r3, [pc, #532]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008904:	4981      	ldr	r1, [pc, #516]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008918:	4b7c      	ldr	r3, [pc, #496]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800891a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008926:	4979      	ldr	r1, [pc, #484]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008928:	4313      	orrs	r3, r2
 800892a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800893a:	4b74      	ldr	r3, [pc, #464]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008948:	4970      	ldr	r1, [pc, #448]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0320 	and.w	r3, r3, #32
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800895c:	4b6b      	ldr	r3, [pc, #428]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008962:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800896a:	4968      	ldr	r1, [pc, #416]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800897e:	4b63      	ldr	r3, [pc, #396]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008984:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898c:	495f      	ldr	r1, [pc, #380]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800898e:	4313      	orrs	r3, r2
 8008990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089a0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ae:	4957      	ldr	r1, [pc, #348]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80089c2:	4b52      	ldr	r3, [pc, #328]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d0:	494e      	ldr	r1, [pc, #312]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d031      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ec:	d00e      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80089ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089f2:	d814      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d015      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80089f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089fc:	d10f      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089fe:	4b43      	ldr	r3, [pc, #268]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	4a42      	ldr	r2, [pc, #264]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a08:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008a0a:	e00c      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f98c 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008a1c:	e003      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	77fb      	strb	r3, [r7, #31]
        break;
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8008a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a26:	7ffb      	ldrb	r3, [r7, #31]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a2c:	4b37      	ldr	r3, [pc, #220]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a3a:	4934      	ldr	r1, [pc, #208]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008a42:	e001      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a44:	7ffb      	ldrb	r3, [r7, #31]
 8008a46:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00a      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a54:	4b2d      	ldr	r3, [pc, #180]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a62:	492a      	ldr	r1, [pc, #168]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a76:	4b25      	ldr	r3, [pc, #148]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a84:	4921      	ldr	r1, [pc, #132]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a98:	4b1c      	ldr	r3, [pc, #112]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	4919      	ldr	r1, [pc, #100]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008aba:	4b14      	ldr	r3, [pc, #80]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ac0:	f023 0203 	bic.w	r2, r3, #3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac8:	4910      	ldr	r1, [pc, #64]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02b      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aea:	4908      	ldr	r1, [pc, #32]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008afa:	d109      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008afc:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	4a02      	ldr	r2, [pc, #8]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b06:	60d3      	str	r3, [r2, #12]
 8008b08:	e014      	b.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008b0a:	bf00      	nop
 8008b0c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b18:	d10c      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f905 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8008b2a:	7ffb      	ldrb	r3, [r7, #31]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8008b30:	7ffb      	ldrb	r3, [r7, #31]
 8008b32:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d04a      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b48:	d108      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8008b4a:	4b70      	ldr	r3, [pc, #448]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b50:	4a6e      	ldr	r2, [pc, #440]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b56:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008b5a:	e012      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b6a:	4968      	ldr	r1, [pc, #416]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008b72:	4b66      	ldr	r3, [pc, #408]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b78:	4a64      	ldr	r2, [pc, #400]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b7e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b8a:	d10d      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	2101      	movs	r1, #1
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f8cc 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008b9c:	7ffb      	ldrb	r3, [r7, #31]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d019      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8008ba2:	7ffb      	ldrb	r3, [r7, #31]
 8008ba4:	77bb      	strb	r3, [r7, #30]
 8008ba6:	e016      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb2:	4b56      	ldr	r3, [pc, #344]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	4a55      	ldr	r2, [pc, #340]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bbc:	60d3      	str	r3, [r2, #12]
 8008bbe:	e00a      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bc8:	d105      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008bca:	4b50      	ldr	r3, [pc, #320]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	4a4f      	ldr	r2, [pc, #316]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bd4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d028      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008be2:	4b4a      	ldr	r3, [pc, #296]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008be8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf0:	4946      	ldr	r1, [pc, #280]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c00:	d106      	bne.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c02:	4b42      	ldr	r3, [pc, #264]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	4a41      	ldr	r2, [pc, #260]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c0c:	60d3      	str	r3, [r2, #12]
 8008c0e:	e011      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	2101      	movs	r1, #1
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f885 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008c26:	4603      	mov	r3, r0
 8008c28:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8008c30:	7ffb      	ldrb	r3, [r7, #31]
 8008c32:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01e      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c40:	4b32      	ldr	r3, [pc, #200]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c50:	492e      	ldr	r1, [pc, #184]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c62:	d10c      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	2102      	movs	r1, #2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f860 	bl	8008d30 <RCCEx_PLLSAI1_Config>
 8008c70:	4603      	mov	r3, r0
 8008c72:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c74:	7ffb      	ldrb	r3, [r7, #31]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8008c7a:	7ffb      	ldrb	r3, [r7, #31]
 8008c7c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00b      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c8a:	4b20      	ldr	r3, [pc, #128]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c90:	f023 0204 	bic.w	r2, r3, #4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c9a:	491c      	ldr	r1, [pc, #112]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008cae:	4b17      	ldr	r3, [pc, #92]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cb4:	f023 0218 	bic.w	r2, r3, #24
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cbe:	4913      	ldr	r1, [pc, #76]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d017      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ce2:	490a      	ldr	r1, [pc, #40]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf4:	d105      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cf6:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	4a04      	ldr	r2, [pc, #16]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d00:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008d02:	7fbb      	ldrb	r3, [r7, #30]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40021000 	.word	0x40021000

08008d10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a04      	ldr	r2, [pc, #16]	@ (8008d2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008d1a:	f043 0304 	orr.w	r3, r3, #4
 8008d1e:	6013      	str	r3, [r2, #0]
}
 8008d20:	bf00      	nop
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40021000 	.word	0x40021000

08008d30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d018      	beq.n	8008d78 <RCCEx_PLLSAI1_Config+0x48>
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d81f      	bhi.n	8008d8a <RCCEx_PLLSAI1_Config+0x5a>
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d002      	beq.n	8008d54 <RCCEx_PLLSAI1_Config+0x24>
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d009      	beq.n	8008d66 <RCCEx_PLLSAI1_Config+0x36>
 8008d52:	e01a      	b.n	8008d8a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008d54:	4b65      	ldr	r3, [pc, #404]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d117      	bne.n	8008d90 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d64:	e014      	b.n	8008d90 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008d66:	4b61      	ldr	r3, [pc, #388]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d110      	bne.n	8008d94 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d76:	e00d      	b.n	8008d94 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008d78:	4b5c      	ldr	r3, [pc, #368]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d88:	e006      	b.n	8008d98 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	e004      	b.n	8008d9a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d90:	bf00      	nop
 8008d92:	e002      	b.n	8008d9a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d94:	bf00      	nop
 8008d96:	e000      	b.n	8008d9a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d98:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 809f 	bne.w	8008ee0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008da2:	4b52      	ldr	r3, [pc, #328]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a51      	ldr	r2, [pc, #324]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008da8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dae:	f7fa fedb 	bl	8003b68 <HAL_GetTick>
 8008db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008db4:	e00f      	b.n	8008dd6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008db6:	f7fa fed7 	bl	8003b68 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d908      	bls.n	8008dd6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008dc4:	4b49      	ldr	r3, [pc, #292]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008dd4:	e006      	b.n	8008de4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008dd6:	4b45      	ldr	r3, [pc, #276]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e9      	bne.n	8008db6 <RCCEx_PLLSAI1_Config+0x86>
 8008de2:	e000      	b.n	8008de6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8008de4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d179      	bne.n	8008ee0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d116      	bne.n	8008e20 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008df2:	4b3e      	ldr	r3, [pc, #248]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008df4:	691a      	ldr	r2, [r3, #16]
 8008df6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef0 <RCCEx_PLLSAI1_Config+0x1c0>)
 8008df8:	4013      	ands	r3, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6892      	ldr	r2, [r2, #8]
 8008dfe:	0211      	lsls	r1, r2, #8
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	68d2      	ldr	r2, [r2, #12]
 8008e04:	06d2      	lsls	r2, r2, #27
 8008e06:	4311      	orrs	r1, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6852      	ldr	r2, [r2, #4]
 8008e0c:	3a01      	subs	r2, #1
 8008e0e:	0112      	lsls	r2, r2, #4
 8008e10:	4311      	orrs	r1, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	4934      	ldr	r1, [pc, #208]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	610b      	str	r3, [r1, #16]
 8008e1e:	e033      	b.n	8008e88 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d118      	bne.n	8008e58 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e26:	4b31      	ldr	r3, [pc, #196]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e28:	691a      	ldr	r2, [r3, #16]
 8008e2a:	4b32      	ldr	r3, [pc, #200]	@ (8008ef4 <RCCEx_PLLSAI1_Config+0x1c4>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6892      	ldr	r2, [r2, #8]
 8008e32:	0211      	lsls	r1, r2, #8
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6912      	ldr	r2, [r2, #16]
 8008e38:	0852      	lsrs	r2, r2, #1
 8008e3a:	3a01      	subs	r2, #1
 8008e3c:	0552      	lsls	r2, r2, #21
 8008e3e:	4311      	orrs	r1, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6852      	ldr	r2, [r2, #4]
 8008e44:	3a01      	subs	r2, #1
 8008e46:	0112      	lsls	r2, r2, #4
 8008e48:	4311      	orrs	r1, r2
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6812      	ldr	r2, [r2, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	4926      	ldr	r1, [pc, #152]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	610b      	str	r3, [r1, #16]
 8008e56:	e017      	b.n	8008e88 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e58:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	4b26      	ldr	r3, [pc, #152]	@ (8008ef8 <RCCEx_PLLSAI1_Config+0x1c8>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6892      	ldr	r2, [r2, #8]
 8008e64:	0211      	lsls	r1, r2, #8
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6952      	ldr	r2, [r2, #20]
 8008e6a:	0852      	lsrs	r2, r2, #1
 8008e6c:	3a01      	subs	r2, #1
 8008e6e:	0652      	lsls	r2, r2, #25
 8008e70:	4311      	orrs	r1, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6852      	ldr	r2, [r2, #4]
 8008e76:	3a01      	subs	r2, #1
 8008e78:	0112      	lsls	r2, r2, #4
 8008e7a:	4311      	orrs	r1, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6812      	ldr	r2, [r2, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	491a      	ldr	r1, [pc, #104]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008e88:	4b18      	ldr	r3, [pc, #96]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a17      	ldr	r2, [pc, #92]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e94:	f7fa fe68 	bl	8003b68 <HAL_GetTick>
 8008e98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e9a:	e00f      	b.n	8008ebc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e9c:	f7fa fe64 	bl	8003b68 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d908      	bls.n	8008ebc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008eaa:	4b10      	ldr	r3, [pc, #64]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008eba:	e006      	b.n	8008eca <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0e9      	beq.n	8008e9c <RCCEx_PLLSAI1_Config+0x16c>
 8008ec8:	e000      	b.n	8008ecc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8008eca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8008ed2:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008ed4:	691a      	ldr	r2, [r3, #16]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	4904      	ldr	r1, [pc, #16]	@ (8008eec <RCCEx_PLLSAI1_Config+0x1bc>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	07ff800c 	.word	0x07ff800c
 8008ef4:	ff9f800c 	.word	0xff9f800c
 8008ef8:	f9ff800c 	.word	0xf9ff800c

08008efc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d018      	beq.n	8008f44 <RCCEx_PLLSAI2_Config+0x48>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d81f      	bhi.n	8008f56 <RCCEx_PLLSAI2_Config+0x5a>
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d002      	beq.n	8008f20 <RCCEx_PLLSAI2_Config+0x24>
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d009      	beq.n	8008f32 <RCCEx_PLLSAI2_Config+0x36>
 8008f1e:	e01a      	b.n	8008f56 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008f20:	4b4a      	ldr	r3, [pc, #296]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d117      	bne.n	8008f5c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f30:	e014      	b.n	8008f5c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008f32:	4b46      	ldr	r3, [pc, #280]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d110      	bne.n	8008f60 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f42:	e00d      	b.n	8008f60 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008f44:	4b41      	ldr	r3, [pc, #260]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d109      	bne.n	8008f64 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f54:	e006      	b.n	8008f64 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5a:	e004      	b.n	8008f66 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e002      	b.n	8008f66 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008f60:	bf00      	nop
 8008f62:	e000      	b.n	8008f66 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008f64:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d169      	bne.n	8009040 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008f6c:	4b37      	ldr	r3, [pc, #220]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a36      	ldr	r2, [pc, #216]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f78:	f7fa fdf6 	bl	8003b68 <HAL_GetTick>
 8008f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f7e:	e00f      	b.n	8008fa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f80:	f7fa fdf2 	bl	8003b68 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d908      	bls.n	8008fa0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f9e:	e006      	b.n	8008fae <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e9      	bne.n	8008f80 <RCCEx_PLLSAI2_Config+0x84>
 8008fac:	e000      	b.n	8008fb0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8008fae:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d144      	bne.n	8009040 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d115      	bne.n	8008fe8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008fbc:	4b23      	ldr	r3, [pc, #140]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008fbe:	695a      	ldr	r2, [r3, #20]
 8008fc0:	4b23      	ldr	r3, [pc, #140]	@ (8009050 <RCCEx_PLLSAI2_Config+0x154>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6892      	ldr	r2, [r2, #8]
 8008fc8:	0211      	lsls	r1, r2, #8
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68d2      	ldr	r2, [r2, #12]
 8008fce:	06d2      	lsls	r2, r2, #27
 8008fd0:	4311      	orrs	r1, r2
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6852      	ldr	r2, [r2, #4]
 8008fd6:	3a01      	subs	r2, #1
 8008fd8:	0112      	lsls	r2, r2, #4
 8008fda:	4311      	orrs	r1, r2
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	491a      	ldr	r1, [pc, #104]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008fe8:	4b18      	ldr	r3, [pc, #96]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a17      	ldr	r2, [pc, #92]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8008fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff4:	f7fa fdb8 	bl	8003b68 <HAL_GetTick>
 8008ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ffa:	e00f      	b.n	800901c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ffc:	f7fa fdb4 	bl	8003b68 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d908      	bls.n	800901c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800900a:	4b10      	ldr	r3, [pc, #64]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800901a:	e006      	b.n	800902a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800901c:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0e9      	beq.n	8008ffc <RCCEx_PLLSAI2_Config+0x100>
 8009028:	e000      	b.n	800902c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800902a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8009032:	4b06      	ldr	r3, [pc, #24]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 8009034:	695a      	ldr	r2, [r3, #20]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	4904      	ldr	r1, [pc, #16]	@ (800904c <RCCEx_PLLSAI2_Config+0x150>)
 800903c:	4313      	orrs	r3, r2
 800903e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40021000 	.word	0x40021000
 8009050:	07ff800c 	.word	0x07ff800c

08009054 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d066      	beq.n	8009134 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7f9 ffbe 	bl	8002ffc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f003 0310 	and.w	r3, r3, #16
 8009092:	2b10      	cmp	r3, #16
 8009094:	d045      	beq.n	8009122 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009096:	4b2a      	ldr	r3, [pc, #168]	@ (8009140 <HAL_RTC_Init+0xec>)
 8009098:	22ca      	movs	r2, #202	@ 0xca
 800909a:	625a      	str	r2, [r3, #36]	@ 0x24
 800909c:	4b28      	ldr	r3, [pc, #160]	@ (8009140 <HAL_RTC_Init+0xec>)
 800909e:	2253      	movs	r2, #83	@ 0x53
 80090a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f98e 	bl	80093c4 <RTC_EnterInitMode>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d121      	bne.n	80090f6 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80090b2:	4b23      	ldr	r3, [pc, #140]	@ (8009140 <HAL_RTC_Init+0xec>)
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	4a22      	ldr	r2, [pc, #136]	@ (8009140 <HAL_RTC_Init+0xec>)
 80090b8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80090bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80090c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009140 <HAL_RTC_Init+0xec>)
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6859      	ldr	r1, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	4319      	orrs	r1, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	430b      	orrs	r3, r1
 80090d6:	491a      	ldr	r1, [pc, #104]	@ (8009140 <HAL_RTC_Init+0xec>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	041b      	lsls	r3, r3, #16
 80090e6:	4916      	ldr	r1, [pc, #88]	@ (8009140 <HAL_RTC_Init+0xec>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f99d 	bl	800942c <RTC_ExitInitMode>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10e      	bne.n	800911a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80090fc:	4b10      	ldr	r3, [pc, #64]	@ (8009140 <HAL_RTC_Init+0xec>)
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a19      	ldr	r1, [r3, #32]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	4319      	orrs	r1, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	430b      	orrs	r3, r1
 8009114:	490a      	ldr	r1, [pc, #40]	@ (8009140 <HAL_RTC_Init+0xec>)
 8009116:	4313      	orrs	r3, r2
 8009118:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800911a:	4b09      	ldr	r3, [pc, #36]	@ (8009140 <HAL_RTC_Init+0xec>)
 800911c:	22ff      	movs	r2, #255	@ 0xff
 800911e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009120:	e001      	b.n	8009126 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d103      	bne.n	8009134 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	40002800 	.word	0x40002800

08009144 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_RTC_SetTime+0x1a>
 800915a:	2302      	movs	r3, #2
 800915c:	e081      	b.n	8009262 <HAL_RTC_SetTime+0x11e>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2202      	movs	r2, #2
 800916a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800916e:	4b3f      	ldr	r3, [pc, #252]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009170:	22ca      	movs	r2, #202	@ 0xca
 8009172:	625a      	str	r2, [r3, #36]	@ 0x24
 8009174:	4b3d      	ldr	r3, [pc, #244]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009176:	2253      	movs	r2, #83	@ 0x53
 8009178:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 f922 	bl	80093c4 <RTC_EnterInitMode>
 8009180:	4603      	mov	r3, r0
 8009182:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009184:	7cfb      	ldrb	r3, [r7, #19]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d15c      	bne.n	8009244 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d125      	bne.n	80091dc <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009190:	4b36      	ldr	r3, [pc, #216]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2200      	movs	r2, #0
 80091a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f97e 	bl	80094a8 <RTC_ByteToBcd2>
 80091ac:	4603      	mov	r3, r0
 80091ae:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 f977 	bl	80094a8 <RTC_ByteToBcd2>
 80091ba:	4603      	mov	r3, r0
 80091bc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091be:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	789b      	ldrb	r3, [r3, #2]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f96f 	bl	80094a8 <RTC_ByteToBcd2>
 80091ca:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091cc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	78db      	ldrb	r3, [r3, #3]
 80091d4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091d6:	4313      	orrs	r3, r2
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	e017      	b.n	800920c <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80091dc:	4b23      	ldr	r3, [pc, #140]	@ (800926c <HAL_RTC_SetTime+0x128>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2200      	movs	r2, #0
 80091ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80091fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009200:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	78db      	ldrb	r3, [r3, #3]
 8009206:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800920c:	4a17      	ldr	r2, [pc, #92]	@ (800926c <HAL_RTC_SetTime+0x128>)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009214:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009218:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800921a:	4b14      	ldr	r3, [pc, #80]	@ (800926c <HAL_RTC_SetTime+0x128>)
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	4a13      	ldr	r2, [pc, #76]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009224:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009226:	4b11      	ldr	r3, [pc, #68]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	68d9      	ldr	r1, [r3, #12]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	430b      	orrs	r3, r1
 8009234:	490d      	ldr	r1, [pc, #52]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009236:	4313      	orrs	r3, r2
 8009238:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f8f6 	bl	800942c <RTC_ExitInitMode>
 8009240:	4603      	mov	r3, r0
 8009242:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009244:	4b09      	ldr	r3, [pc, #36]	@ (800926c <HAL_RTC_SetTime+0x128>)
 8009246:	22ff      	movs	r2, #255	@ 0xff
 8009248:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800924a:	7cfb      	ldrb	r3, [r7, #19]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8009260:	7cfb      	ldrb	r3, [r7, #19]
}
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	bd90      	pop	{r4, r7, pc}
 800926a:	bf00      	nop
 800926c:	40002800 	.word	0x40002800

08009270 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009270:	b590      	push	{r4, r7, lr}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_RTC_SetDate+0x1a>
 8009286:	2302      	movs	r3, #2
 8009288:	e071      	b.n	800936e <HAL_RTC_SetDate+0xfe>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2202      	movs	r2, #2
 8009296:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10e      	bne.n	80092be <HAL_RTC_SetDate+0x4e>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d008      	beq.n	80092be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	785b      	ldrb	r3, [r3, #1]
 80092b0:	f023 0310 	bic.w	r3, r3, #16
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	330a      	adds	r3, #10
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11c      	bne.n	80092fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	78db      	ldrb	r3, [r3, #3]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 f8ed 	bl	80094a8 <RTC_ByteToBcd2>
 80092ce:	4603      	mov	r3, r0
 80092d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 f8e6 	bl	80094a8 <RTC_ByteToBcd2>
 80092dc:	4603      	mov	r3, r0
 80092de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	789b      	ldrb	r3, [r3, #2]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f8de 	bl	80094a8 <RTC_ByteToBcd2>
 80092ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e00e      	b.n	800931c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	78db      	ldrb	r3, [r3, #3]
 8009302:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800930a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009310:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800931c:	4b16      	ldr	r3, [pc, #88]	@ (8009378 <HAL_RTC_SetDate+0x108>)
 800931e:	22ca      	movs	r2, #202	@ 0xca
 8009320:	625a      	str	r2, [r3, #36]	@ 0x24
 8009322:	4b15      	ldr	r3, [pc, #84]	@ (8009378 <HAL_RTC_SetDate+0x108>)
 8009324:	2253      	movs	r2, #83	@ 0x53
 8009326:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f84b 	bl	80093c4 <RTC_EnterInitMode>
 800932e:	4603      	mov	r3, r0
 8009330:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009332:	7cfb      	ldrb	r3, [r7, #19]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10b      	bne.n	8009350 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009338:	4a0f      	ldr	r2, [pc, #60]	@ (8009378 <HAL_RTC_SetDate+0x108>)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009340:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009344:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f870 	bl	800942c <RTC_ExitInitMode>
 800934c:	4603      	mov	r3, r0
 800934e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009350:	4b09      	ldr	r3, [pc, #36]	@ (8009378 <HAL_RTC_SetDate+0x108>)
 8009352:	22ff      	movs	r2, #255	@ 0xff
 8009354:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009356:	7cfb      	ldrb	r3, [r7, #19]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d103      	bne.n	8009364 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800936c:	7cfb      	ldrb	r3, [r7, #19]
}
 800936e:	4618      	mov	r0, r3
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	bd90      	pop	{r4, r7, pc}
 8009376:	bf00      	nop
 8009378:	40002800 	.word	0x40002800

0800937c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8009384:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <HAL_RTC_WaitForSynchro+0x40>)
 8009386:	4a0e      	ldr	r2, [pc, #56]	@ (80093c0 <HAL_RTC_WaitForSynchro+0x44>)
 8009388:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800938a:	f7fa fbed 	bl	8003b68 <HAL_GetTick>
 800938e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009390:	e009      	b.n	80093a6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009392:	f7fa fbe9 	bl	8003b68 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093a0:	d901      	bls.n	80093a6 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e006      	b.n	80093b4 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093a6:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <HAL_RTC_WaitForSynchro+0x40>)
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0ef      	beq.n	8009392 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40002800 	.word	0x40002800
 80093c0:	0001005c 	.word	0x0001005c

080093c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80093d0:	4b15      	ldr	r3, [pc, #84]	@ (8009428 <RTC_EnterInitMode+0x64>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d120      	bne.n	800941e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80093dc:	4b12      	ldr	r3, [pc, #72]	@ (8009428 <RTC_EnterInitMode+0x64>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a11      	ldr	r2, [pc, #68]	@ (8009428 <RTC_EnterInitMode+0x64>)
 80093e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80093e8:	f7fa fbbe 	bl	8003b68 <HAL_GetTick>
 80093ec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093ee:	e00d      	b.n	800940c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093f0:	f7fa fbba 	bl	8003b68 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093fe:	d905      	bls.n	800940c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2203      	movs	r2, #3
 8009408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800940c:	4b06      	ldr	r3, [pc, #24]	@ (8009428 <RTC_EnterInitMode+0x64>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <RTC_EnterInitMode+0x5a>
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	2b03      	cmp	r3, #3
 800941c:	d1e8      	bne.n	80093f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800941e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40002800 	.word	0x40002800

0800942c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009438:	4b1a      	ldr	r3, [pc, #104]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a19      	ldr	r2, [pc, #100]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 800943e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009442:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009444:	4b17      	ldr	r3, [pc, #92]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10c      	bne.n	800946a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ff93 	bl	800937c <HAL_RTC_WaitForSynchro>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01e      	beq.n	800949a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2203      	movs	r2, #3
 8009460:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	e017      	b.n	800949a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800946a:	4b0e      	ldr	r3, [pc, #56]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	4a0d      	ldr	r2, [pc, #52]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 8009470:	f023 0320 	bic.w	r3, r3, #32
 8009474:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff ff80 	bl	800937c <HAL_RTC_WaitForSynchro>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2203      	movs	r2, #3
 8009486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800948e:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	4a04      	ldr	r2, [pc, #16]	@ (80094a4 <RTC_ExitInitMode+0x78>)
 8009494:	f043 0320 	orr.w	r3, r3, #32
 8009498:	6193      	str	r3, [r2, #24]
  }

  return status;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	40002800 	.word	0x40002800

080094a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80094ba:	e005      	b.n	80094c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3301      	adds	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80094c2:	7afb      	ldrb	r3, [r7, #11]
 80094c4:	3b0a      	subs	r3, #10
 80094c6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80094c8:	7afb      	ldrb	r3, [r7, #11]
 80094ca:	2b09      	cmp	r3, #9
 80094cc:	d8f6      	bhi.n	80094bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	7afb      	ldrb	r3, [r7, #11]
 80094d8:	4313      	orrs	r3, r2
 80094da:	b2db      	uxtb	r3, r3
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e027      	b.n	8009550 <HAL_RTCEx_SetCalibrationOutPut+0x68>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009510:	4b12      	ldr	r3, [pc, #72]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8009512:	22ca      	movs	r2, #202	@ 0xca
 8009514:	625a      	str	r2, [r3, #36]	@ 0x24
 8009516:	4b11      	ldr	r3, [pc, #68]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8009518:	2253      	movs	r2, #83	@ 0x53
 800951a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 800951c:	4b0f      	ldr	r3, [pc, #60]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009524:	490d      	ldr	r1, [pc, #52]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	4313      	orrs	r3, r2
 800952a:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 800952c:	4b0b      	ldr	r3, [pc, #44]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	4a0a      	ldr	r2, [pc, #40]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8009532:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009536:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009538:	4b08      	ldr	r3, [pc, #32]	@ (800955c <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 800953a:	22ff      	movs	r2, #255	@ 0xff
 800953c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	40002800 	.word	0x40002800

08009560 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	490f      	ldr	r1, [pc, #60]	@ (80095b0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8009574:	4313      	orrs	r3, r2
 8009576:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	490c      	ldr	r1, [pc, #48]	@ (80095b4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009582:	4313      	orrs	r3, r2
 8009584:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8009586:	4b0b      	ldr	r3, [pc, #44]	@ (80095b4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	6919      	ldr	r1, [r3, #16]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	430b      	orrs	r3, r1
 800959a:	4906      	ldr	r1, [pc, #24]	@ (80095b4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800959c:	4313      	orrs	r3, r2
 800959e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	40002800 	.word	0x40002800
 80095b4:	40003400 	.word	0x40003400

080095b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e095      	b.n	80096f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d108      	bne.n	80095e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095da:	d009      	beq.n	80095f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	61da      	str	r2, [r3, #28]
 80095e2:	e005      	b.n	80095f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7f9 fd9a 	bl	8003144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009630:	d902      	bls.n	8009638 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e002      	b.n	800963e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800963c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009646:	d007      	beq.n	8009658 <HAL_SPI_Init+0xa0>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009650:	d002      	beq.n	8009658 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	431a      	orrs	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	431a      	orrs	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009690:	431a      	orrs	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969a:	ea42 0103 	orr.w	r1, r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	f003 0204 	and.w	r2, r3, #4
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096bc:	f003 0310 	and.w	r3, r3, #16
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096c6:	f003 0308 	and.w	r3, r3, #8
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80096d4:	ea42 0103 	orr.w	r1, r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b08a      	sub	sp, #40	@ 0x28
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	607a      	str	r2, [r7, #4]
 800970a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800970c:	2301      	movs	r3, #1
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_SPI_TransmitReceive+0x26>
 8009720:	2302      	movs	r3, #2
 8009722:	e20a      	b.n	8009b3a <HAL_SPI_TransmitReceive+0x43c>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800972c:	f7fa fa1c 	bl	8003b68 <HAL_GetTick>
 8009730:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009738:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009740:	887b      	ldrh	r3, [r7, #2]
 8009742:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009744:	887b      	ldrh	r3, [r7, #2]
 8009746:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009748:	7efb      	ldrb	r3, [r7, #27]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d00e      	beq.n	800976c <HAL_SPI_TransmitReceive+0x6e>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009754:	d106      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x66>
 800975e:	7efb      	ldrb	r3, [r7, #27]
 8009760:	2b04      	cmp	r3, #4
 8009762:	d003      	beq.n	800976c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009764:	2302      	movs	r3, #2
 8009766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800976a:	e1e0      	b.n	8009b2e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_SPI_TransmitReceive+0x80>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <HAL_SPI_TransmitReceive+0x80>
 8009778:	887b      	ldrh	r3, [r7, #2]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d103      	bne.n	8009786 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009784:	e1d3      	b.n	8009b2e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b04      	cmp	r3, #4
 8009790:	d003      	beq.n	800979a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2205      	movs	r2, #5
 8009796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	887a      	ldrh	r2, [r7, #2]
 80097aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	887a      	ldrh	r2, [r7, #2]
 80097b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	887a      	ldrh	r2, [r7, #2]
 80097c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	887a      	ldrh	r2, [r7, #2]
 80097c6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097dc:	d802      	bhi.n	80097e4 <HAL_SPI_TransmitReceive+0xe6>
 80097de:	8a3b      	ldrh	r3, [r7, #16]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d908      	bls.n	80097f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80097f2:	605a      	str	r2, [r3, #4]
 80097f4:	e007      	b.n	8009806 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009804:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009810:	2b40      	cmp	r3, #64	@ 0x40
 8009812:	d007      	beq.n	8009824 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800982c:	f240 8081 	bls.w	8009932 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <HAL_SPI_TransmitReceive+0x140>
 8009838:	8a7b      	ldrh	r3, [r7, #18]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d16d      	bne.n	800991a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	881a      	ldrh	r2, [r3, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984e:	1c9a      	adds	r2, r3, #2
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009862:	e05a      	b.n	800991a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b02      	cmp	r3, #2
 8009870:	d11b      	bne.n	80098aa <HAL_SPI_TransmitReceive+0x1ac>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009876:	b29b      	uxth	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d016      	beq.n	80098aa <HAL_SPI_TransmitReceive+0x1ac>
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	2b01      	cmp	r3, #1
 8009880:	d113      	bne.n	80098aa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009886:	881a      	ldrh	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009892:	1c9a      	adds	r2, r3, #2
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800989c:	b29b      	uxth	r3, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d11c      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x1f4>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d016      	beq.n	80098f2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ce:	b292      	uxth	r2, r2
 80098d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d6:	1c9a      	adds	r2, r3, #2
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098ee:	2301      	movs	r3, #1
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098f2:	f7fa f939 	bl	8003b68 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098fe:	429a      	cmp	r2, r3
 8009900:	d80b      	bhi.n	800991a <HAL_SPI_TransmitReceive+0x21c>
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009908:	d007      	beq.n	800991a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009918:	e109      	b.n	8009b2e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800991e:	b29b      	uxth	r3, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d19f      	bne.n	8009864 <HAL_SPI_TransmitReceive+0x166>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800992a:	b29b      	uxth	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d199      	bne.n	8009864 <HAL_SPI_TransmitReceive+0x166>
 8009930:	e0e3      	b.n	8009afa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_SPI_TransmitReceive+0x244>
 800993a:	8a7b      	ldrh	r3, [r7, #18]
 800993c:	2b01      	cmp	r3, #1
 800993e:	f040 80cf 	bne.w	8009ae0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009946:	b29b      	uxth	r3, r3
 8009948:	2b01      	cmp	r3, #1
 800994a:	d912      	bls.n	8009972 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009950:	881a      	ldrh	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995c:	1c9a      	adds	r2, r3, #2
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b02      	subs	r3, #2
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009970:	e0b6      	b.n	8009ae0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	330c      	adds	r3, #12
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009998:	e0a2      	b.n	8009ae0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d134      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x314>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d02f      	beq.n	8009a12 <HAL_SPI_TransmitReceive+0x314>
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d12c      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d912      	bls.n	80099e8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c6:	881a      	ldrh	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d2:	1c9a      	adds	r2, r3, #2
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b02      	subs	r3, #2
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099e6:	e012      	b.n	8009a0e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	7812      	ldrb	r2, [r2, #0]
 80099f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d148      	bne.n	8009ab2 <HAL_SPI_TransmitReceive+0x3b4>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d042      	beq.n	8009ab2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d923      	bls.n	8009a80 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a42:	b292      	uxth	r2, r2
 8009a44:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4a:	1c9a      	adds	r2, r3, #2
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b02      	subs	r3, #2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d81f      	bhi.n	8009aae <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a7c:	605a      	str	r2, [r3, #4]
 8009a7e:	e016      	b.n	8009aae <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f103 020c 	add.w	r2, r3, #12
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8c:	7812      	ldrb	r2, [r2, #0]
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ab2:	f7fa f859 	bl	8003b68 <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d803      	bhi.n	8009aca <HAL_SPI_TransmitReceive+0x3cc>
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ac8:	d102      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x3d2>
 8009aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d107      	bne.n	8009ae0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009ade:	e026      	b.n	8009b2e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f47f af57 	bne.w	800999a <HAL_SPI_TransmitReceive+0x29c>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f47f af50 	bne.w	800999a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 f93e 	bl	8009d80 <SPI_EndRxTxTransaction>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2220      	movs	r2, #32
 8009b14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b24:	e003      	b.n	8009b2e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009b36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3728      	adds	r7, #40	@ 0x28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b54:	f7fa f808 	bl	8003b68 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b64:	f7fa f800 	bl	8003b68 <HAL_GetTick>
 8009b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6a:	4b39      	ldr	r3, [pc, #228]	@ (8009c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	015b      	lsls	r3, r3, #5
 8009b70:	0d1b      	lsrs	r3, r3, #20
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	e054      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b82:	d050      	beq.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b84:	f7f9 fff0 	bl	8003b68 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d902      	bls.n	8009b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d13d      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bb2:	d111      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bbc:	d004      	beq.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc6:	d107      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009be0:	d10f      	bne.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e017      	b.n	8009c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bf0c      	ite	eq
 8009c36:	2301      	moveq	r3, #1
 8009c38:	2300      	movne	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d19b      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000014 	.word	0x20000014

08009c54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08a      	sub	sp, #40	@ 0x28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c66:	f7f9 ff7f 	bl	8003b68 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	4413      	add	r3, r2
 8009c74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009c76:	f7f9 ff77 	bl	8003b68 <HAL_GetTick>
 8009c7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	330c      	adds	r3, #12
 8009c82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c84:	4b3d      	ldr	r3, [pc, #244]	@ (8009d7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	00da      	lsls	r2, r3, #3
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	0d1b      	lsrs	r3, r3, #20
 8009c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c96:	fb02 f303 	mul.w	r3, r2, r3
 8009c9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c9c:	e060      	b.n	8009d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009ca4:	d107      	bne.n	8009cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cbc:	d050      	beq.n	8009d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cbe:	f7f9 ff53 	bl	8003b68 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d902      	bls.n	8009cd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d13d      	bne.n	8009d50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ce2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cec:	d111      	bne.n	8009d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cf6:	d004      	beq.n	8009d02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d00:	d107      	bne.n	8009d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d1a:	d10f      	bne.n	8009d3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e010      	b.n	8009d72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689a      	ldr	r2, [r3, #8]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d196      	bne.n	8009c9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3728      	adds	r7, #40	@ 0x28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000014 	.word	0x20000014

08009d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff ff5b 	bl	8009c54 <SPI_WaitFifoStateUntilTimeout>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009da8:	f043 0220 	orr.w	r2, r3, #32
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e027      	b.n	8009e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2180      	movs	r1, #128	@ 0x80
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff fec0 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d007      	beq.n	8009dda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dce:	f043 0220 	orr.w	r2, r3, #32
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e014      	b.n	8009e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f7ff ff34 	bl	8009c54 <SPI_WaitFifoStateUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d007      	beq.n	8009e02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009df6:	f043 0220 	orr.w	r2, r3, #32
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e000      	b.n	8009e04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e049      	b.n	8009eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7f9 fdb4 	bl	80039a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f000 fc24 	bl	800a698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d001      	beq.n	8009ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e047      	b.n	8009f64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a23      	ldr	r2, [pc, #140]	@ (8009f70 <HAL_TIM_Base_Start+0xb4>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d01d      	beq.n	8009f22 <HAL_TIM_Base_Start+0x66>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eee:	d018      	beq.n	8009f22 <HAL_TIM_Base_Start+0x66>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8009f74 <HAL_TIM_Base_Start+0xb8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d013      	beq.n	8009f22 <HAL_TIM_Base_Start+0x66>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a1e      	ldr	r2, [pc, #120]	@ (8009f78 <HAL_TIM_Base_Start+0xbc>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00e      	beq.n	8009f22 <HAL_TIM_Base_Start+0x66>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1c      	ldr	r2, [pc, #112]	@ (8009f7c <HAL_TIM_Base_Start+0xc0>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d009      	beq.n	8009f22 <HAL_TIM_Base_Start+0x66>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1b      	ldr	r2, [pc, #108]	@ (8009f80 <HAL_TIM_Base_Start+0xc4>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d004      	beq.n	8009f22 <HAL_TIM_Base_Start+0x66>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a19      	ldr	r2, [pc, #100]	@ (8009f84 <HAL_TIM_Base_Start+0xc8>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d115      	bne.n	8009f4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	4b17      	ldr	r3, [pc, #92]	@ (8009f88 <HAL_TIM_Base_Start+0xcc>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b06      	cmp	r3, #6
 8009f32:	d015      	beq.n	8009f60 <HAL_TIM_Base_Start+0xa4>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f3a:	d011      	beq.n	8009f60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0201 	orr.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4c:	e008      	b.n	8009f60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0201 	orr.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	e000      	b.n	8009f62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	40012c00 	.word	0x40012c00
 8009f74:	40000400 	.word	0x40000400
 8009f78:	40000800 	.word	0x40000800
 8009f7c:	40000c00 	.word	0x40000c00
 8009f80:	40013400 	.word	0x40013400
 8009f84:	40014000 	.word	0x40014000
 8009f88:	00010007 	.word	0x00010007

08009f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d001      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e04f      	b.n	800a044 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f042 0201 	orr.w	r2, r2, #1
 8009fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a23      	ldr	r2, [pc, #140]	@ (800a050 <HAL_TIM_Base_Start_IT+0xc4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d01d      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0x76>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fce:	d018      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0x76>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a1f      	ldr	r2, [pc, #124]	@ (800a054 <HAL_TIM_Base_Start_IT+0xc8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d013      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0x76>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a1e      	ldr	r2, [pc, #120]	@ (800a058 <HAL_TIM_Base_Start_IT+0xcc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00e      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0x76>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800a05c <HAL_TIM_Base_Start_IT+0xd0>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d009      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0x76>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1b      	ldr	r2, [pc, #108]	@ (800a060 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d004      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0x76>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a19      	ldr	r2, [pc, #100]	@ (800a064 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d115      	bne.n	800a02e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	4b17      	ldr	r3, [pc, #92]	@ (800a068 <HAL_TIM_Base_Start_IT+0xdc>)
 800a00a:	4013      	ands	r3, r2
 800a00c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b06      	cmp	r3, #6
 800a012:	d015      	beq.n	800a040 <HAL_TIM_Base_Start_IT+0xb4>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a01a:	d011      	beq.n	800a040 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02c:	e008      	b.n	800a040 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0201 	orr.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e000      	b.n	800a042 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a040:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	40012c00 	.word	0x40012c00
 800a054:	40000400 	.word	0x40000400
 800a058:	40000800 	.word	0x40000800
 800a05c:	40000c00 	.word	0x40000c00
 800a060:	40013400 	.word	0x40013400
 800a064:	40014000 	.word	0x40014000
 800a068:	00010007 	.word	0x00010007

0800a06c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e049      	b.n	800a112 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f841 	bl	800a11a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f000 faf4 	bl	800a698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d020      	beq.n	800a192 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d01b      	beq.n	800a192 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f06f 0202 	mvn.w	r2, #2
 800a162:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d003      	beq.n	800a180 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa6e 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a17e:	e005      	b.n	800a18c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fa60 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fa71 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d020      	beq.n	800a1de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01b      	beq.n	800a1de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f06f 0204 	mvn.w	r2, #4
 800a1ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fa48 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a1ca:	e005      	b.n	800a1d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fa3a 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fa4b 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d020      	beq.n	800a22a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d01b      	beq.n	800a22a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f06f 0208 	mvn.w	r2, #8
 800a1fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2204      	movs	r2, #4
 800a200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fa22 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a216:	e005      	b.n	800a224 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fa14 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa25 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b00      	cmp	r3, #0
 800a232:	d020      	beq.n	800a276 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f003 0310 	and.w	r3, r3, #16
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d01b      	beq.n	800a276 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f06f 0210 	mvn.w	r2, #16
 800a246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2208      	movs	r2, #8
 800a24c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9fc 	bl	800a65a <HAL_TIM_IC_CaptureCallback>
 800a262:	e005      	b.n	800a270 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f9ee 	bl	800a646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f9ff 	bl	800a66e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00c      	beq.n	800a29a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f06f 0201 	mvn.w	r2, #1
 800a292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7f8 fdcd 	bl	8002e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d007      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 ff28 	bl	800b118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 ff20 	bl	800b12c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00c      	beq.n	800a310 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f9b9 	bl	800a682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00c      	beq.n	800a334 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0220 	mvn.w	r2, #32
 800a32c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fee8 	bl	800b104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a356:	2302      	movs	r3, #2
 800a358:	e066      	b.n	800a428 <HAL_TIM_OC_ConfigChannel+0xec>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b14      	cmp	r3, #20
 800a366:	d857      	bhi.n	800a418 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a368:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36e:	bf00      	nop
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a419 	.word	0x0800a419
 800a378:	0800a419 	.word	0x0800a419
 800a37c:	0800a419 	.word	0x0800a419
 800a380:	0800a3d3 	.word	0x0800a3d3
 800a384:	0800a419 	.word	0x0800a419
 800a388:	0800a419 	.word	0x0800a419
 800a38c:	0800a419 	.word	0x0800a419
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a419 	.word	0x0800a419
 800a398:	0800a419 	.word	0x0800a419
 800a39c:	0800a419 	.word	0x0800a419
 800a3a0:	0800a3ef 	.word	0x0800a3ef
 800a3a4:	0800a419 	.word	0x0800a419
 800a3a8:	0800a419 	.word	0x0800a419
 800a3ac:	0800a419 	.word	0x0800a419
 800a3b0:	0800a3fd 	.word	0x0800a3fd
 800a3b4:	0800a419 	.word	0x0800a419
 800a3b8:	0800a419 	.word	0x0800a419
 800a3bc:	0800a419 	.word	0x0800a419
 800a3c0:	0800a40b 	.word	0x0800a40b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fa0a 	bl	800a7e4 <TIM_OC1_SetConfig>
      break;
 800a3d0:	e025      	b.n	800a41e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fa93 	bl	800a904 <TIM_OC2_SetConfig>
      break;
 800a3de:	e01e      	b.n	800a41e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fb16 	bl	800aa18 <TIM_OC3_SetConfig>
      break;
 800a3ec:	e017      	b.n	800a41e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fb97 	bl	800ab28 <TIM_OC4_SetConfig>
      break;
 800a3fa:	e010      	b.n	800a41e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fbfa 	bl	800abfc <TIM_OC5_SetConfig>
      break;
 800a408:	e009      	b.n	800a41e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68b9      	ldr	r1, [r7, #8]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fc57 	bl	800acc4 <TIM_OC6_SetConfig>
      break;
 800a416:	e002      	b.n	800a41e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
      break;
 800a41c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_TIM_ConfigClockSource+0x1c>
 800a448:	2302      	movs	r3, #2
 800a44a:	e0b6      	b.n	800a5ba <HAL_TIM_ConfigClockSource+0x18a>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a46a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a488:	d03e      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0xd8>
 800a48a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a48e:	f200 8087 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a496:	f000 8086 	beq.w	800a5a6 <HAL_TIM_ConfigClockSource+0x176>
 800a49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49e:	d87f      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4a0:	2b70      	cmp	r3, #112	@ 0x70
 800a4a2:	d01a      	beq.n	800a4da <HAL_TIM_ConfigClockSource+0xaa>
 800a4a4:	2b70      	cmp	r3, #112	@ 0x70
 800a4a6:	d87b      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4a8:	2b60      	cmp	r3, #96	@ 0x60
 800a4aa:	d050      	beq.n	800a54e <HAL_TIM_ConfigClockSource+0x11e>
 800a4ac:	2b60      	cmp	r3, #96	@ 0x60
 800a4ae:	d877      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4b0:	2b50      	cmp	r3, #80	@ 0x50
 800a4b2:	d03c      	beq.n	800a52e <HAL_TIM_ConfigClockSource+0xfe>
 800a4b4:	2b50      	cmp	r3, #80	@ 0x50
 800a4b6:	d873      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4b8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ba:	d058      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x13e>
 800a4bc:	2b40      	cmp	r3, #64	@ 0x40
 800a4be:	d86f      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4c0:	2b30      	cmp	r3, #48	@ 0x30
 800a4c2:	d064      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x15e>
 800a4c4:	2b30      	cmp	r3, #48	@ 0x30
 800a4c6:	d86b      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4c8:	2b20      	cmp	r3, #32
 800a4ca:	d060      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x15e>
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	d867      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05c      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x15e>
 800a4d4:	2b10      	cmp	r3, #16
 800a4d6:	d05a      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x15e>
 800a4d8:	e062      	b.n	800a5a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4ea:	f000 fd62 	bl	800afb2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	609a      	str	r2, [r3, #8]
      break;
 800a506:	e04f      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a518:	f000 fd4b 	bl	800afb2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a52a:	609a      	str	r2, [r3, #8]
      break;
 800a52c:	e03c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a53a:	461a      	mov	r2, r3
 800a53c:	f000 fcbd 	bl	800aeba <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2150      	movs	r1, #80	@ 0x50
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fd16 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800a54c:	e02c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a55a:	461a      	mov	r2, r3
 800a55c:	f000 fcdc 	bl	800af18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2160      	movs	r1, #96	@ 0x60
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fd06 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800a56c:	e01c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57a:	461a      	mov	r2, r3
 800a57c:	f000 fc9d 	bl	800aeba <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2140      	movs	r1, #64	@ 0x40
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fcf6 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800a58c:	e00c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	4610      	mov	r0, r2
 800a59a:	f000 fced 	bl	800af78 <TIM_ITRx_SetConfig>
      break;
 800a59e:	e003      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a4:	e000      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a5a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d101      	bne.n	800a5da <HAL_TIM_SlaveConfigSynchro+0x18>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e031      	b.n	800a63e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fbcf 	bl	800ad90 <TIM_SlaveTimer_SetConfig>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d009      	beq.n	800a60c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e018      	b.n	800a63e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a61a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a62a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a676:	bf00      	nop
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a68a:	bf00      	nop
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a46      	ldr	r2, [pc, #280]	@ (800a7c4 <TIM_Base_SetConfig+0x12c>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d013      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b6:	d00f      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a43      	ldr	r2, [pc, #268]	@ (800a7c8 <TIM_Base_SetConfig+0x130>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00b      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a42      	ldr	r2, [pc, #264]	@ (800a7cc <TIM_Base_SetConfig+0x134>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d007      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a41      	ldr	r2, [pc, #260]	@ (800a7d0 <TIM_Base_SetConfig+0x138>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d003      	beq.n	800a6d8 <TIM_Base_SetConfig+0x40>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a40      	ldr	r2, [pc, #256]	@ (800a7d4 <TIM_Base_SetConfig+0x13c>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d108      	bne.n	800a6ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a35      	ldr	r2, [pc, #212]	@ (800a7c4 <TIM_Base_SetConfig+0x12c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d01f      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6f8:	d01b      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a32      	ldr	r2, [pc, #200]	@ (800a7c8 <TIM_Base_SetConfig+0x130>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d017      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a31      	ldr	r2, [pc, #196]	@ (800a7cc <TIM_Base_SetConfig+0x134>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d013      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a30      	ldr	r2, [pc, #192]	@ (800a7d0 <TIM_Base_SetConfig+0x138>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00f      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a2f      	ldr	r2, [pc, #188]	@ (800a7d4 <TIM_Base_SetConfig+0x13c>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00b      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a2e      	ldr	r2, [pc, #184]	@ (800a7d8 <TIM_Base_SetConfig+0x140>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d007      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a2d      	ldr	r2, [pc, #180]	@ (800a7dc <TIM_Base_SetConfig+0x144>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d003      	beq.n	800a732 <TIM_Base_SetConfig+0x9a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e0 <TIM_Base_SetConfig+0x148>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d108      	bne.n	800a744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4313      	orrs	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a16      	ldr	r2, [pc, #88]	@ (800a7c4 <TIM_Base_SetConfig+0x12c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00f      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a18      	ldr	r2, [pc, #96]	@ (800a7d4 <TIM_Base_SetConfig+0x13c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00b      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a17      	ldr	r2, [pc, #92]	@ (800a7d8 <TIM_Base_SetConfig+0x140>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a16      	ldr	r2, [pc, #88]	@ (800a7dc <TIM_Base_SetConfig+0x144>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d003      	beq.n	800a790 <TIM_Base_SetConfig+0xf8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a15      	ldr	r2, [pc, #84]	@ (800a7e0 <TIM_Base_SetConfig+0x148>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d103      	bne.n	800a798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d105      	bne.n	800a7b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f023 0201 	bic.w	r2, r3, #1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	611a      	str	r2, [r3, #16]
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	40012c00 	.word	0x40012c00
 800a7c8:	40000400 	.word	0x40000400
 800a7cc:	40000800 	.word	0x40000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	40013400 	.word	0x40013400
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a1b      	ldr	r3, [r3, #32]
 800a7f8:	f023 0201 	bic.w	r2, r3, #1
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0303 	bic.w	r3, r3, #3
 800a81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f023 0302 	bic.w	r3, r3, #2
 800a830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a2c      	ldr	r2, [pc, #176]	@ (800a8f0 <TIM_OC1_SetConfig+0x10c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00f      	beq.n	800a864 <TIM_OC1_SetConfig+0x80>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a2b      	ldr	r2, [pc, #172]	@ (800a8f4 <TIM_OC1_SetConfig+0x110>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d00b      	beq.n	800a864 <TIM_OC1_SetConfig+0x80>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8f8 <TIM_OC1_SetConfig+0x114>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d007      	beq.n	800a864 <TIM_OC1_SetConfig+0x80>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a29      	ldr	r2, [pc, #164]	@ (800a8fc <TIM_OC1_SetConfig+0x118>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC1_SetConfig+0x80>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a28      	ldr	r2, [pc, #160]	@ (800a900 <TIM_OC1_SetConfig+0x11c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d10c      	bne.n	800a87e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0308 	bic.w	r3, r3, #8
 800a86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	4313      	orrs	r3, r2
 800a874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f023 0304 	bic.w	r3, r3, #4
 800a87c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a1b      	ldr	r2, [pc, #108]	@ (800a8f0 <TIM_OC1_SetConfig+0x10c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00f      	beq.n	800a8a6 <TIM_OC1_SetConfig+0xc2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a1a      	ldr	r2, [pc, #104]	@ (800a8f4 <TIM_OC1_SetConfig+0x110>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d00b      	beq.n	800a8a6 <TIM_OC1_SetConfig+0xc2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a19      	ldr	r2, [pc, #100]	@ (800a8f8 <TIM_OC1_SetConfig+0x114>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d007      	beq.n	800a8a6 <TIM_OC1_SetConfig+0xc2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a18      	ldr	r2, [pc, #96]	@ (800a8fc <TIM_OC1_SetConfig+0x118>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d003      	beq.n	800a8a6 <TIM_OC1_SetConfig+0xc2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a17      	ldr	r2, [pc, #92]	@ (800a900 <TIM_OC1_SetConfig+0x11c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d111      	bne.n	800a8ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	621a      	str	r2, [r3, #32]
}
 800a8e4:	bf00      	nop
 800a8e6:	371c      	adds	r7, #28
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	40012c00 	.word	0x40012c00
 800a8f4:	40013400 	.word	0x40013400
 800a8f8:	40014000 	.word	0x40014000
 800a8fc:	40014400 	.word	0x40014400
 800a900:	40014800 	.word	0x40014800

0800a904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	f023 0210 	bic.w	r2, r3, #16
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	021b      	lsls	r3, r3, #8
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f023 0320 	bic.w	r3, r3, #32
 800a952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	011b      	lsls	r3, r3, #4
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a28      	ldr	r2, [pc, #160]	@ (800aa04 <TIM_OC2_SetConfig+0x100>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d003      	beq.n	800a970 <TIM_OC2_SetConfig+0x6c>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a27      	ldr	r2, [pc, #156]	@ (800aa08 <TIM_OC2_SetConfig+0x104>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d10d      	bne.n	800a98c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a98a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a1d      	ldr	r2, [pc, #116]	@ (800aa04 <TIM_OC2_SetConfig+0x100>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00f      	beq.n	800a9b4 <TIM_OC2_SetConfig+0xb0>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a1c      	ldr	r2, [pc, #112]	@ (800aa08 <TIM_OC2_SetConfig+0x104>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d00b      	beq.n	800a9b4 <TIM_OC2_SetConfig+0xb0>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a1b      	ldr	r2, [pc, #108]	@ (800aa0c <TIM_OC2_SetConfig+0x108>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d007      	beq.n	800a9b4 <TIM_OC2_SetConfig+0xb0>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a1a      	ldr	r2, [pc, #104]	@ (800aa10 <TIM_OC2_SetConfig+0x10c>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d003      	beq.n	800a9b4 <TIM_OC2_SetConfig+0xb0>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a19      	ldr	r2, [pc, #100]	@ (800aa14 <TIM_OC2_SetConfig+0x110>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d113      	bne.n	800a9dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	621a      	str	r2, [r3, #32]
}
 800a9f6:	bf00      	nop
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	40012c00 	.word	0x40012c00
 800aa08:	40013400 	.word	0x40013400
 800aa0c:	40014000 	.word	0x40014000
 800aa10:	40014400 	.word	0x40014400
 800aa14:	40014800 	.word	0x40014800

0800aa18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0303 	bic.w	r3, r3, #3
 800aa52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	021b      	lsls	r3, r3, #8
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a27      	ldr	r2, [pc, #156]	@ (800ab14 <TIM_OC3_SetConfig+0xfc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_OC3_SetConfig+0x6a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a26      	ldr	r2, [pc, #152]	@ (800ab18 <TIM_OC3_SetConfig+0x100>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d10d      	bne.n	800aa9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a1c      	ldr	r2, [pc, #112]	@ (800ab14 <TIM_OC3_SetConfig+0xfc>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00f      	beq.n	800aac6 <TIM_OC3_SetConfig+0xae>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a1b      	ldr	r2, [pc, #108]	@ (800ab18 <TIM_OC3_SetConfig+0x100>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00b      	beq.n	800aac6 <TIM_OC3_SetConfig+0xae>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a1a      	ldr	r2, [pc, #104]	@ (800ab1c <TIM_OC3_SetConfig+0x104>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d007      	beq.n	800aac6 <TIM_OC3_SetConfig+0xae>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a19      	ldr	r2, [pc, #100]	@ (800ab20 <TIM_OC3_SetConfig+0x108>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d003      	beq.n	800aac6 <TIM_OC3_SetConfig+0xae>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a18      	ldr	r2, [pc, #96]	@ (800ab24 <TIM_OC3_SetConfig+0x10c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d113      	bne.n	800aaee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aacc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	011b      	lsls	r3, r3, #4
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	4313      	orrs	r3, r2
 800aae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	621a      	str	r2, [r3, #32]
}
 800ab08:	bf00      	nop
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	40012c00 	.word	0x40012c00
 800ab18:	40013400 	.word	0x40013400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	40014400 	.word	0x40014400
 800ab24:	40014800 	.word	0x40014800

0800ab28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	031b      	lsls	r3, r3, #12
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a18      	ldr	r2, [pc, #96]	@ (800abe8 <TIM_OC4_SetConfig+0xc0>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00f      	beq.n	800abac <TIM_OC4_SetConfig+0x84>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a17      	ldr	r2, [pc, #92]	@ (800abec <TIM_OC4_SetConfig+0xc4>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d00b      	beq.n	800abac <TIM_OC4_SetConfig+0x84>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a16      	ldr	r2, [pc, #88]	@ (800abf0 <TIM_OC4_SetConfig+0xc8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d007      	beq.n	800abac <TIM_OC4_SetConfig+0x84>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a15      	ldr	r2, [pc, #84]	@ (800abf4 <TIM_OC4_SetConfig+0xcc>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d003      	beq.n	800abac <TIM_OC4_SetConfig+0x84>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a14      	ldr	r2, [pc, #80]	@ (800abf8 <TIM_OC4_SetConfig+0xd0>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d109      	bne.n	800abc0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	019b      	lsls	r3, r3, #6
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685a      	ldr	r2, [r3, #4]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	621a      	str	r2, [r3, #32]
}
 800abda:	bf00      	nop
 800abdc:	371c      	adds	r7, #28
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	40012c00 	.word	0x40012c00
 800abec:	40013400 	.word	0x40013400
 800abf0:	40014000 	.word	0x40014000
 800abf4:	40014400 	.word	0x40014400
 800abf8:	40014800 	.word	0x40014800

0800abfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ac40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	041b      	lsls	r3, r3, #16
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a17      	ldr	r2, [pc, #92]	@ (800acb0 <TIM_OC5_SetConfig+0xb4>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00f      	beq.n	800ac76 <TIM_OC5_SetConfig+0x7a>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a16      	ldr	r2, [pc, #88]	@ (800acb4 <TIM_OC5_SetConfig+0xb8>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d00b      	beq.n	800ac76 <TIM_OC5_SetConfig+0x7a>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a15      	ldr	r2, [pc, #84]	@ (800acb8 <TIM_OC5_SetConfig+0xbc>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d007      	beq.n	800ac76 <TIM_OC5_SetConfig+0x7a>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a14      	ldr	r2, [pc, #80]	@ (800acbc <TIM_OC5_SetConfig+0xc0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d003      	beq.n	800ac76 <TIM_OC5_SetConfig+0x7a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a13      	ldr	r2, [pc, #76]	@ (800acc0 <TIM_OC5_SetConfig+0xc4>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d109      	bne.n	800ac8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	021b      	lsls	r3, r3, #8
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	621a      	str	r2, [r3, #32]
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	40012c00 	.word	0x40012c00
 800acb4:	40013400 	.word	0x40013400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	051b      	lsls	r3, r3, #20
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a18      	ldr	r2, [pc, #96]	@ (800ad7c <TIM_OC6_SetConfig+0xb8>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00f      	beq.n	800ad40 <TIM_OC6_SetConfig+0x7c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a17      	ldr	r2, [pc, #92]	@ (800ad80 <TIM_OC6_SetConfig+0xbc>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00b      	beq.n	800ad40 <TIM_OC6_SetConfig+0x7c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a16      	ldr	r2, [pc, #88]	@ (800ad84 <TIM_OC6_SetConfig+0xc0>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d007      	beq.n	800ad40 <TIM_OC6_SetConfig+0x7c>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a15      	ldr	r2, [pc, #84]	@ (800ad88 <TIM_OC6_SetConfig+0xc4>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d003      	beq.n	800ad40 <TIM_OC6_SetConfig+0x7c>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a14      	ldr	r2, [pc, #80]	@ (800ad8c <TIM_OC6_SetConfig+0xc8>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d109      	bne.n	800ad54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	029b      	lsls	r3, r3, #10
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	621a      	str	r2, [r3, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	40012c00 	.word	0x40012c00
 800ad80:	40013400 	.word	0x40013400
 800ad84:	40014000 	.word	0x40014000
 800ad88:	40014400 	.word	0x40014400
 800ad8c:	40014800 	.word	0x40014800

0800ad90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800adac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adb0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	4313      	orrs	r3, r2
 800adba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adc2:	f023 0307 	bic.w	r3, r3, #7
 800adc6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b70      	cmp	r3, #112	@ 0x70
 800ade0:	d01a      	beq.n	800ae18 <TIM_SlaveTimer_SetConfig+0x88>
 800ade2:	2b70      	cmp	r3, #112	@ 0x70
 800ade4:	d860      	bhi.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
 800ade6:	2b60      	cmp	r3, #96	@ 0x60
 800ade8:	d054      	beq.n	800ae94 <TIM_SlaveTimer_SetConfig+0x104>
 800adea:	2b60      	cmp	r3, #96	@ 0x60
 800adec:	d85c      	bhi.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
 800adee:	2b50      	cmp	r3, #80	@ 0x50
 800adf0:	d046      	beq.n	800ae80 <TIM_SlaveTimer_SetConfig+0xf0>
 800adf2:	2b50      	cmp	r3, #80	@ 0x50
 800adf4:	d858      	bhi.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
 800adf6:	2b40      	cmp	r3, #64	@ 0x40
 800adf8:	d019      	beq.n	800ae2e <TIM_SlaveTimer_SetConfig+0x9e>
 800adfa:	2b40      	cmp	r3, #64	@ 0x40
 800adfc:	d854      	bhi.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
 800adfe:	2b30      	cmp	r3, #48	@ 0x30
 800ae00:	d055      	beq.n	800aeae <TIM_SlaveTimer_SetConfig+0x11e>
 800ae02:	2b30      	cmp	r3, #48	@ 0x30
 800ae04:	d850      	bhi.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d051      	beq.n	800aeae <TIM_SlaveTimer_SetConfig+0x11e>
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d84c      	bhi.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d04d      	beq.n	800aeae <TIM_SlaveTimer_SetConfig+0x11e>
 800ae12:	2b10      	cmp	r3, #16
 800ae14:	d04b      	beq.n	800aeae <TIM_SlaveTimer_SetConfig+0x11e>
 800ae16:	e047      	b.n	800aea8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800ae28:	f000 f8c3 	bl	800afb2 <TIM_ETR_SetConfig>
      break;
 800ae2c:	e040      	b.n	800aeb0 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	d101      	bne.n	800ae3a <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e03b      	b.n	800aeb2 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6a1a      	ldr	r2, [r3, #32]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0201 	bic.w	r2, r2, #1
 800ae50:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae60:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	621a      	str	r2, [r3, #32]
      break;
 800ae7e:	e017      	b.n	800aeb0 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f000 f814 	bl	800aeba <TIM_TI1_ConfigInputStage>
      break;
 800ae92:	e00d      	b.n	800aeb0 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aea0:	461a      	mov	r2, r3
 800aea2:	f000 f839 	bl	800af18 <TIM_TI2_ConfigInputStage>
      break;
 800aea6:	e003      	b.n	800aeb0 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	75fb      	strb	r3, [r7, #23]
      break;
 800aeac:	e000      	b.n	800aeb0 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 800aeae:	bf00      	nop
  }

  return status;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b087      	sub	sp, #28
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	f023 0201 	bic.w	r2, r3, #1
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	011b      	lsls	r3, r3, #4
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f023 030a 	bic.w	r3, r3, #10
 800aef6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	621a      	str	r2, [r3, #32]
}
 800af0c:	bf00      	nop
 800af0e:	371c      	adds	r7, #28
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f023 0210 	bic.w	r2, r3, #16
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	031b      	lsls	r3, r3, #12
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	011b      	lsls	r3, r3, #4
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	621a      	str	r2, [r3, #32]
}
 800af6c:	bf00      	nop
 800af6e:	371c      	adds	r7, #28
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800af8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	4313      	orrs	r3, r2
 800af9a:	f043 0307 	orr.w	r3, r3, #7
 800af9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	609a      	str	r2, [r3, #8]
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b087      	sub	sp, #28
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	021a      	lsls	r2, r3, #8
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	431a      	orrs	r2, r3
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	4313      	orrs	r3, r2
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	4313      	orrs	r3, r2
 800afde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	609a      	str	r2, [r3, #8]
}
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
	...

0800aff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b004:	2b01      	cmp	r3, #1
 800b006:	d101      	bne.n	800b00c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b008:	2302      	movs	r3, #2
 800b00a:	e068      	b.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a2e      	ldr	r2, [pc, #184]	@ (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d004      	beq.n	800b040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a2d      	ldr	r2, [pc, #180]	@ (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d108      	bne.n	800b052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a1e      	ldr	r2, [pc, #120]	@ (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d01d      	beq.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b07e:	d018      	beq.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a1b      	ldr	r2, [pc, #108]	@ (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d013      	beq.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a1a      	ldr	r2, [pc, #104]	@ (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00e      	beq.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a18      	ldr	r2, [pc, #96]	@ (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d009      	beq.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a13      	ldr	r2, [pc, #76]	@ (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d004      	beq.n	800b0b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a14      	ldr	r2, [pc, #80]	@ (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d10c      	bne.n	800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	40012c00 	.word	0x40012c00
 800b0f0:	40013400 	.word	0x40013400
 800b0f4:	40000400 	.word	0x40000400
 800b0f8:	40000800 	.word	0x40000800
 800b0fc:	40000c00 	.word	0x40000c00
 800b100:	40014000 	.word	0x40014000

0800b104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b140:	b480      	push	{r7}
 800b142:	b09d      	sub	sp, #116	@ 0x74
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b166:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	78db      	ldrb	r3, [r3, #3]
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d81f      	bhi.n	800b1b2 <USB_ActivateEndpoint+0x72>
 800b172:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <USB_ActivateEndpoint+0x38>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b189 	.word	0x0800b189
 800b17c:	0800b1a5 	.word	0x0800b1a5
 800b180:	0800b1bb 	.word	0x0800b1bb
 800b184:	0800b197 	.word	0x0800b197
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b188:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b18c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b190:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b194:	e012      	b.n	800b1bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b196:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b19a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b19e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b1a2:	e00b      	b.n	800b1bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b1a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b1a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b1ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b1b0:	e004      	b.n	800b1bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800b1b8:	e000      	b.n	800b1bc <USB_ActivateEndpoint+0x7c>
      break;
 800b1ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	441a      	add	r2, r3
 800b1c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b1ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	b21b      	sxth	r3, r3
 800b1ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f6:	b21a      	sxth	r2, r3
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	b21b      	sxth	r3, r3
 800b1fe:	4313      	orrs	r3, r2
 800b200:	b21b      	sxth	r3, r3
 800b202:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	441a      	add	r2, r3
 800b210:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b21c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b224:	b29b      	uxth	r3, r3
 800b226:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	7b1b      	ldrb	r3, [r3, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f040 8178 	bne.w	800b522 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 8084 	beq.w	800b344 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	61bb      	str	r3, [r7, #24]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b246:	b29b      	uxth	r3, r3
 800b248:	461a      	mov	r2, r3
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	4413      	add	r3, r2
 800b24e:	61bb      	str	r3, [r7, #24]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	00da      	lsls	r2, r3, #3
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	88db      	ldrh	r3, [r3, #6]
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	b29b      	uxth	r3, r3
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	827b      	strh	r3, [r7, #18]
 800b27e:	8a7b      	ldrh	r3, [r7, #18]
 800b280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01b      	beq.n	800b2c0 <USB_ActivateEndpoint+0x180>
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	b29b      	uxth	r3, r3
 800b296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b29a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b29e:	823b      	strh	r3, [r7, #16]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	441a      	add	r2, r3
 800b2aa:	8a3b      	ldrh	r3, [r7, #16]
 800b2ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	78db      	ldrb	r3, [r3, #3]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d020      	beq.n	800b30a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2de:	81bb      	strh	r3, [r7, #12]
 800b2e0:	89bb      	ldrh	r3, [r7, #12]
 800b2e2:	f083 0320 	eor.w	r3, r3, #32
 800b2e6:	81bb      	strh	r3, [r7, #12]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	441a      	add	r2, r3
 800b2f2:	89bb      	ldrh	r3, [r7, #12]
 800b2f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b304:	b29b      	uxth	r3, r3
 800b306:	8013      	strh	r3, [r2, #0]
 800b308:	e2d5      	b.n	800b8b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	b29b      	uxth	r3, r3
 800b318:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b31c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b320:	81fb      	strh	r3, [r7, #14]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	441a      	add	r2, r3
 800b32c:	89fb      	ldrh	r3, [r7, #14]
 800b32e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b33e:	b29b      	uxth	r3, r3
 800b340:	8013      	strh	r3, [r2, #0]
 800b342:	e2b8      	b.n	800b8b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	633b      	str	r3, [r7, #48]	@ 0x30
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b34e:	b29b      	uxth	r3, r3
 800b350:	461a      	mov	r2, r3
 800b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b354:	4413      	add	r3, r2
 800b356:	633b      	str	r3, [r7, #48]	@ 0x30
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	00da      	lsls	r2, r3, #3
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	4413      	add	r3, r2
 800b362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	88db      	ldrh	r3, [r3, #6]
 800b36c:	085b      	lsrs	r3, r3, #1
 800b36e:	b29b      	uxth	r3, r3
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b376:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b382:	b29b      	uxth	r3, r3
 800b384:	461a      	mov	r2, r3
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	4413      	add	r3, r2
 800b38a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	00da      	lsls	r2, r3, #3
 800b392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b394:	4413      	add	r3, r2
 800b396:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b39a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3aa:	801a      	strh	r2, [r3, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10a      	bne.n	800b3ca <USB_ActivateEndpoint+0x28a>
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	801a      	strh	r2, [r3, #0]
 800b3c8:	e039      	b.n	800b43e <USB_ActivateEndpoint+0x2fe>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3d0:	d818      	bhi.n	800b404 <USB_ActivateEndpoint+0x2c4>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	085b      	lsrs	r3, r3, #1
 800b3d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <USB_ActivateEndpoint+0x2ac>
 800b3e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	029b      	lsls	r3, r3, #10
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	801a      	strh	r2, [r3, #0]
 800b402:	e01c      	b.n	800b43e <USB_ActivateEndpoint+0x2fe>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	095b      	lsrs	r3, r3, #5
 800b40a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	f003 031f 	and.w	r3, r3, #31
 800b414:	2b00      	cmp	r3, #0
 800b416:	d102      	bne.n	800b41e <USB_ActivateEndpoint+0x2de>
 800b418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b41a:	3b01      	subs	r3, #1
 800b41c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	b29a      	uxth	r2, r3
 800b424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b426:	b29b      	uxth	r3, r3
 800b428:	029b      	lsls	r3, r3, #10
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4313      	orrs	r3, r2
 800b42e:	b29b      	uxth	r3, r3
 800b430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b438:	b29a      	uxth	r2, r3
 800b43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b44c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b44e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01b      	beq.n	800b48e <USB_ActivateEndpoint+0x34e>
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	b29b      	uxth	r3, r3
 800b464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b46c:	843b      	strh	r3, [r7, #32]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	441a      	add	r2, r3
 800b478:	8c3b      	ldrh	r3, [r7, #32]
 800b47a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b47e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b482:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d124      	bne.n	800b4e0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4413      	add	r3, r2
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ac:	83bb      	strh	r3, [r7, #28]
 800b4ae:	8bbb      	ldrh	r3, [r7, #28]
 800b4b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b4b4:	83bb      	strh	r3, [r7, #28]
 800b4b6:	8bbb      	ldrh	r3, [r7, #28]
 800b4b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b4bc:	83bb      	strh	r3, [r7, #28]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	441a      	add	r2, r3
 800b4c8:	8bbb      	ldrh	r3, [r7, #28]
 800b4ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	8013      	strh	r3, [r2, #0]
 800b4de:	e1ea      	b.n	800b8b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b4f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4f6:	83fb      	strh	r3, [r7, #30]
 800b4f8:	8bfb      	ldrh	r3, [r7, #30]
 800b4fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b4fe:	83fb      	strh	r3, [r7, #30]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	441a      	add	r2, r3
 800b50a:	8bfb      	ldrh	r3, [r7, #30]
 800b50c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	8013      	strh	r3, [r2, #0]
 800b520:	e1c9      	b.n	800b8b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	78db      	ldrb	r3, [r3, #3]
 800b526:	2b02      	cmp	r3, #2
 800b528:	d11e      	bne.n	800b568 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	b29b      	uxth	r3, r3
 800b538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b53c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b540:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	441a      	add	r2, r3
 800b54e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b55a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b562:	b29b      	uxth	r3, r3
 800b564:	8013      	strh	r3, [r2, #0]
 800b566:	e01d      	b.n	800b5a4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	b29b      	uxth	r3, r3
 800b576:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b57a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b57e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	441a      	add	r2, r3
 800b58c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b59c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5b4:	4413      	add	r3, r2
 800b5b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	00da      	lsls	r2, r3, #3
 800b5be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	891b      	ldrh	r3, [r3, #8]
 800b5cc:	085b      	lsrs	r3, r3, #1
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5d6:	801a      	strh	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e8:	4413      	add	r3, r2
 800b5ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	00da      	lsls	r2, r3, #3
 800b5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5f4:	4413      	add	r3, r2
 800b5f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	895b      	ldrh	r3, [r3, #10]
 800b600:	085b      	lsrs	r3, r3, #1
 800b602:	b29b      	uxth	r3, r3
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	b29a      	uxth	r2, r3
 800b608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b60a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 8093 	bne.w	800b73c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b62a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d01b      	beq.n	800b66a <USB_ActivateEndpoint+0x52a>
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b648:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	441a      	add	r2, r3
 800b654:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b65a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b65e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b666:	b29b      	uxth	r3, r3
 800b668:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b678:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01b      	beq.n	800b6ba <USB_ActivateEndpoint+0x57a>
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b698:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	441a      	add	r2, r3
 800b6a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b6a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b6d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b6d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b6d8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b6da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b6dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b6e0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	441a      	add	r2, r3
 800b6ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b6ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b718:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	441a      	add	r2, r3
 800b724:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b72a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b72e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b736:	b29b      	uxth	r3, r3
 800b738:	8013      	strh	r3, [r2, #0]
 800b73a:	e0bc      	b.n	800b8b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b74c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01d      	beq.n	800b794 <USB_ActivateEndpoint+0x654>
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b76e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	441a      	add	r2, r3
 800b77c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b78c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b790:	b29b      	uxth	r3, r3
 800b792:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b7a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01d      	beq.n	800b7ec <USB_ActivateEndpoint+0x6ac>
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	441a      	add	r2, r3
 800b7d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b7d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	78db      	ldrb	r3, [r3, #3]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d024      	beq.n	800b83e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	b29b      	uxth	r3, r3
 800b802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b80a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b80e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b812:	f083 0320 	eor.w	r3, r3, #32
 800b816:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	441a      	add	r2, r3
 800b824:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b82c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b838:	b29b      	uxth	r3, r3
 800b83a:	8013      	strh	r3, [r2, #0]
 800b83c:	e01d      	b.n	800b87a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b854:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	441a      	add	r2, r3
 800b862:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b86a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b86e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b876:	b29b      	uxth	r3, r3
 800b878:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	b29b      	uxth	r3, r3
 800b888:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b88c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b890:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	441a      	add	r2, r3
 800b89e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b8a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b8b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3774      	adds	r7, #116	@ 0x74
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop

0800b8c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b0c2      	sub	sp, #264	@ 0x108
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8d6:	6018      	str	r0, [r3, #0]
 800b8d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	785b      	ldrb	r3, [r3, #1]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	f040 86b7 	bne.w	800c662 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b8f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	699a      	ldr	r2, [r3, #24]
 800b900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d908      	bls.n	800b922 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b920:	e007      	b.n	800b932 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	7b1b      	ldrb	r3, [r3, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d13a      	bne.n	800b9b8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6959      	ldr	r1, [r3, #20]
 800b94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	88da      	ldrh	r2, [r3, #6]
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95e:	b29b      	uxth	r3, r3
 800b960:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b964:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b968:	6800      	ldr	r0, [r0, #0]
 800b96a:	f001 fc82 	bl	800d272 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b96e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b972:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	613b      	str	r3, [r7, #16]
 800b97a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b97e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b988:	b29b      	uxth	r3, r3
 800b98a:	461a      	mov	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	4413      	add	r3, r2
 800b990:	613b      	str	r3, [r7, #16]
 800b992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	00da      	lsls	r2, r3, #3
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	801a      	strh	r2, [r3, #0]
 800b9b4:	f000 be1f 	b.w	800c5f6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	78db      	ldrb	r3, [r3, #3]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	f040 8462 	bne.w	800c28e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6a1a      	ldr	r2, [r3, #32]
 800b9d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	f240 83df 	bls.w	800c1a6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4413      	add	r3, r2
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba0e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ba12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	441a      	add	r2, r3
 800ba2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ba30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba38:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ba3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ba44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6a1a      	ldr	r2, [r3, #32]
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba54:	1ad2      	subs	r2, r2, r3
 800ba56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 81c7 	beq.w	800be18 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d177      	bne.n	800bb96 <USB_EPStartXfer+0x2ce>
 800baa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	461a      	mov	r2, r3
 800bac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac6:	4413      	add	r3, r2
 800bac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800baca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	00da      	lsls	r2, r3, #3
 800bad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bada:	4413      	add	r3, r2
 800badc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bae0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baec:	b29a      	uxth	r2, r3
 800baee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf0:	801a      	strh	r2, [r3, #0]
 800baf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <USB_EPStartXfer+0x248>
 800bafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	801a      	strh	r2, [r3, #0]
 800bb0e:	e067      	b.n	800bbe0 <USB_EPStartXfer+0x318>
 800bb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb14:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb16:	d81c      	bhi.n	800bb52 <USB_EPStartXfer+0x28a>
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1c:	085b      	lsrs	r3, r3, #1
 800bb1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d004      	beq.n	800bb38 <USB_EPStartXfer+0x270>
 800bb2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb32:	3301      	adds	r3, #1
 800bb34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	881b      	ldrh	r3, [r3, #0]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	029b      	lsls	r3, r3, #10
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	801a      	strh	r2, [r3, #0]
 800bb50:	e046      	b.n	800bbe0 <USB_EPStartXfer+0x318>
 800bb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb56:	095b      	lsrs	r3, r3, #5
 800bb58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb60:	f003 031f 	and.w	r3, r3, #31
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <USB_EPStartXfer+0x2aa>
 800bb68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	029b      	lsls	r3, r3, #10
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	4313      	orrs	r3, r2
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	801a      	strh	r2, [r3, #0]
 800bb94:	e024      	b.n	800bbe0 <USB_EPStartXfer+0x318>
 800bb96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d11c      	bne.n	800bbe0 <USB_EPStartXfer+0x318>
 800bba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbba:	4413      	add	r3, r2
 800bbbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	00da      	lsls	r2, r3, #3
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbce:	4413      	add	r3, r2
 800bbd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bbd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bbe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	895b      	ldrh	r3, [r3, #10]
 800bbec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	6959      	ldr	r1, [r3, #20]
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc0e:	6800      	ldr	r0, [r0, #0]
 800bc10:	f001 fb2f 	bl	800d272 <USB_WritePMA>
            ep->xfer_buff += len;
 800bc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	695a      	ldr	r2, [r3, #20]
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc24:	441a      	add	r2, r3
 800bc26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6a1a      	ldr	r2, [r3, #32]
 800bc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d90f      	bls.n	800bc6e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800bc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6a1a      	ldr	r2, [r3, #32]
 800bc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	621a      	str	r2, [r3, #32]
 800bc6c:	e00e      	b.n	800bc8c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800bc6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800bc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	785b      	ldrb	r3, [r3, #1]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d177      	bne.n	800bd8c <USB_EPStartXfer+0x4c4>
 800bc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	61bb      	str	r3, [r7, #24]
 800bca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	461a      	mov	r2, r3
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	61bb      	str	r3, [r7, #24]
 800bcc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	00da      	lsls	r2, r3, #3
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	801a      	strh	r2, [r3, #0]
 800bce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <USB_EPStartXfer+0x43e>
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	801a      	strh	r2, [r3, #0]
 800bd04:	e06d      	b.n	800bde2 <USB_EPStartXfer+0x51a>
 800bd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd0c:	d81c      	bhi.n	800bd48 <USB_EPStartXfer+0x480>
 800bd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd12:	085b      	lsrs	r3, r3, #1
 800bd14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <USB_EPStartXfer+0x466>
 800bd24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd28:	3301      	adds	r3, #1
 800bd2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	029b      	lsls	r3, r3, #10
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	801a      	strh	r2, [r3, #0]
 800bd46:	e04c      	b.n	800bde2 <USB_EPStartXfer+0x51a>
 800bd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd4c:	095b      	lsrs	r3, r3, #5
 800bd4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd56:	f003 031f 	and.w	r3, r3, #31
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d104      	bne.n	800bd68 <USB_EPStartXfer+0x4a0>
 800bd5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd62:	3b01      	subs	r3, #1
 800bd64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	029b      	lsls	r3, r3, #10
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	801a      	strh	r2, [r3, #0]
 800bd8a:	e02a      	b.n	800bde2 <USB_EPStartXfer+0x51a>
 800bd8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	785b      	ldrb	r3, [r3, #1]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d122      	bne.n	800bde2 <USB_EPStartXfer+0x51a>
 800bd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	623b      	str	r3, [r7, #32]
 800bda8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	623b      	str	r3, [r7, #32]
 800bdc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	00da      	lsls	r2, r3, #3
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdd6:	61fb      	str	r3, [r7, #28]
 800bdd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bde2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	891b      	ldrh	r3, [r3, #8]
 800bdee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6959      	ldr	r1, [r3, #20]
 800bdfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be02:	b29b      	uxth	r3, r3
 800be04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be08:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800be0c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800be10:	6800      	ldr	r0, [r0, #0]
 800be12:	f001 fa2e 	bl	800d272 <USB_WritePMA>
 800be16:	e3ee      	b.n	800c5f6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	785b      	ldrb	r3, [r3, #1]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d177      	bne.n	800bf18 <USB_EPStartXfer+0x650>
 800be28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be42:	b29b      	uxth	r3, r3
 800be44:	461a      	mov	r2, r3
 800be46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be48:	4413      	add	r3, r2
 800be4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	00da      	lsls	r2, r3, #3
 800be5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be5c:	4413      	add	r3, r2
 800be5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be62:	647b      	str	r3, [r7, #68]	@ 0x44
 800be64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be6e:	b29a      	uxth	r2, r3
 800be70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be72:	801a      	strh	r2, [r3, #0]
 800be74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <USB_EPStartXfer+0x5ca>
 800be7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	b29b      	uxth	r3, r3
 800be82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be8e:	801a      	strh	r2, [r3, #0]
 800be90:	e06d      	b.n	800bf6e <USB_EPStartXfer+0x6a6>
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be96:	2b3e      	cmp	r3, #62	@ 0x3e
 800be98:	d81c      	bhi.n	800bed4 <USB_EPStartXfer+0x60c>
 800be9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be9e:	085b      	lsrs	r3, r3, #1
 800bea0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <USB_EPStartXfer+0x5f2>
 800beb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800beb4:	3301      	adds	r3, #1
 800beb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800beba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	029b      	lsls	r3, r3, #10
 800bec8:	b29b      	uxth	r3, r3
 800beca:	4313      	orrs	r3, r2
 800becc:	b29a      	uxth	r2, r3
 800bece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bed0:	801a      	strh	r2, [r3, #0]
 800bed2:	e04c      	b.n	800bf6e <USB_EPStartXfer+0x6a6>
 800bed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bed8:	095b      	lsrs	r3, r3, #5
 800beda:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee2:	f003 031f 	and.w	r3, r3, #31
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <USB_EPStartXfer+0x62c>
 800beea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800beee:	3b01      	subs	r3, #1
 800bef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	b29a      	uxth	r2, r3
 800befa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800befe:	b29b      	uxth	r3, r3
 800bf00:	029b      	lsls	r3, r3, #10
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	4313      	orrs	r3, r2
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf14:	801a      	strh	r2, [r3, #0]
 800bf16:	e02a      	b.n	800bf6e <USB_EPStartXfer+0x6a6>
 800bf18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d122      	bne.n	800bf6e <USB_EPStartXfer+0x6a6>
 800bf28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	461a      	mov	r2, r3
 800bf46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf48:	4413      	add	r3, r2
 800bf4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	00da      	lsls	r2, r3, #3
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bf6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	891b      	ldrh	r3, [r3, #8]
 800bf7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6959      	ldr	r1, [r3, #20]
 800bf8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf94:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf98:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bf9c:	6800      	ldr	r0, [r0, #0]
 800bf9e:	f001 f968 	bl	800d272 <USB_WritePMA>
            ep->xfer_buff += len;
 800bfa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	695a      	ldr	r2, [r3, #20]
 800bfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb2:	441a      	add	r2, r3
 800bfb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bfc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6a1a      	ldr	r2, [r3, #32]
 800bfcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d90f      	bls.n	800bffc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bfdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6a1a      	ldr	r2, [r3, #32]
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfec:	1ad2      	subs	r2, r2, r3
 800bfee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	621a      	str	r2, [r3, #32]
 800bffa:	e00e      	b.n	800c01a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6a1b      	ldr	r3, [r3, #32]
 800c008:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c00c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2200      	movs	r2, #0
 800c018:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c01a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	643b      	str	r3, [r7, #64]	@ 0x40
 800c026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	785b      	ldrb	r3, [r3, #1]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d177      	bne.n	800c126 <USB_EPStartXfer+0x85e>
 800c036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c03a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c050:	b29b      	uxth	r3, r3
 800c052:	461a      	mov	r2, r3
 800c054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c056:	4413      	add	r3, r2
 800c058:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	00da      	lsls	r2, r3, #3
 800c068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06a:	4413      	add	r3, r2
 800c06c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c070:	637b      	str	r3, [r7, #52]	@ 0x34
 800c072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	b29b      	uxth	r3, r3
 800c078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c080:	801a      	strh	r2, [r3, #0]
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10a      	bne.n	800c0a0 <USB_EPStartXfer+0x7d8>
 800c08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	b29b      	uxth	r3, r3
 800c090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c098:	b29a      	uxth	r2, r3
 800c09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c09c:	801a      	strh	r2, [r3, #0]
 800c09e:	e067      	b.n	800c170 <USB_EPStartXfer+0x8a8>
 800c0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c0a6:	d81c      	bhi.n	800c0e2 <USB_EPStartXfer+0x81a>
 800c0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ac:	085b      	lsrs	r3, r3, #1
 800c0ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d004      	beq.n	800c0c8 <USB_EPStartXfer+0x800>
 800c0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	029b      	lsls	r3, r3, #10
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0de:	801a      	strh	r2, [r3, #0]
 800c0e0:	e046      	b.n	800c170 <USB_EPStartXfer+0x8a8>
 800c0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e6:	095b      	lsrs	r3, r3, #5
 800c0e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f0:	f003 031f 	and.w	r3, r3, #31
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d104      	bne.n	800c102 <USB_EPStartXfer+0x83a>
 800c0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	b29a      	uxth	r2, r3
 800c108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	029b      	lsls	r3, r3, #10
 800c110:	b29b      	uxth	r3, r3
 800c112:	4313      	orrs	r3, r2
 800c114:	b29b      	uxth	r3, r3
 800c116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c11e:	b29a      	uxth	r2, r3
 800c120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c122:	801a      	strh	r2, [r3, #0]
 800c124:	e024      	b.n	800c170 <USB_EPStartXfer+0x8a8>
 800c126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c12a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	785b      	ldrb	r3, [r3, #1]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d11c      	bne.n	800c170 <USB_EPStartXfer+0x8a8>
 800c136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c13a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c144:	b29b      	uxth	r3, r3
 800c146:	461a      	mov	r2, r3
 800c148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c14a:	4413      	add	r3, r2
 800c14c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c14e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	00da      	lsls	r2, r3, #3
 800c15c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c15e:	4413      	add	r3, r2
 800c160:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c16e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	895b      	ldrh	r3, [r3, #10]
 800c17c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6959      	ldr	r1, [r3, #20]
 800c18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c190:	b29b      	uxth	r3, r3
 800c192:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c196:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c19a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c19e:	6800      	ldr	r0, [r0, #0]
 800c1a0:	f001 f867 	bl	800d272 <USB_WritePMA>
 800c1a4:	e227      	b.n	800c5f6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c1b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c1d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	441a      	add	r2, r3
 800c1fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c1fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c20e:	b29b      	uxth	r3, r3
 800c210:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	461a      	mov	r2, r3
 800c230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c232:	4413      	add	r3, r2
 800c234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	00da      	lsls	r2, r3, #3
 800c244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c246:	4413      	add	r3, r2
 800c248:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c24c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c252:	b29a      	uxth	r2, r3
 800c254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c256:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c25c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	891b      	ldrh	r3, [r3, #8]
 800c264:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6959      	ldr	r1, [r3, #20]
 800c274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c278:	b29b      	uxth	r3, r3
 800c27a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c27e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c282:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c286:	6800      	ldr	r0, [r0, #0]
 800c288:	f000 fff3 	bl	800d272 <USB_WritePMA>
 800c28c:	e1b3      	b.n	800c5f6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6a1a      	ldr	r2, [r3, #32]
 800c29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80c6 	beq.w	800c460 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	673b      	str	r3, [r7, #112]	@ 0x70
 800c2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d177      	bne.n	800c3e0 <USB_EPStartXfer+0xb18>
 800c2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	461a      	mov	r2, r3
 800c30e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c310:	4413      	add	r3, r2
 800c312:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	00da      	lsls	r2, r3, #3
 800c322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c324:	4413      	add	r3, r2
 800c326:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c32a:	667b      	str	r3, [r7, #100]	@ 0x64
 800c32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	b29b      	uxth	r3, r3
 800c332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c336:	b29a      	uxth	r2, r3
 800c338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c33a:	801a      	strh	r2, [r3, #0]
 800c33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10a      	bne.n	800c35a <USB_EPStartXfer+0xa92>
 800c344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c34e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c352:	b29a      	uxth	r2, r3
 800c354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c356:	801a      	strh	r2, [r3, #0]
 800c358:	e067      	b.n	800c42a <USB_EPStartXfer+0xb62>
 800c35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c360:	d81c      	bhi.n	800c39c <USB_EPStartXfer+0xad4>
 800c362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c366:	085b      	lsrs	r3, r3, #1
 800c368:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	2b00      	cmp	r3, #0
 800c376:	d004      	beq.n	800c382 <USB_EPStartXfer+0xaba>
 800c378:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c37c:	3301      	adds	r3, #1
 800c37e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	b29a      	uxth	r2, r3
 800c388:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	029b      	lsls	r3, r3, #10
 800c390:	b29b      	uxth	r3, r3
 800c392:	4313      	orrs	r3, r2
 800c394:	b29a      	uxth	r2, r3
 800c396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c398:	801a      	strh	r2, [r3, #0]
 800c39a:	e046      	b.n	800c42a <USB_EPStartXfer+0xb62>
 800c39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a0:	095b      	lsrs	r3, r3, #5
 800c3a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3aa:	f003 031f 	and.w	r3, r3, #31
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d104      	bne.n	800c3bc <USB_EPStartXfer+0xaf4>
 800c3b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c3bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	029b      	lsls	r3, r3, #10
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3dc:	801a      	strh	r2, [r3, #0]
 800c3de:	e024      	b.n	800c42a <USB_EPStartXfer+0xb62>
 800c3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d11c      	bne.n	800c42a <USB_EPStartXfer+0xb62>
 800c3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	461a      	mov	r2, r3
 800c402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c404:	4413      	add	r3, r2
 800c406:	673b      	str	r3, [r7, #112]	@ 0x70
 800c408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c40c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	00da      	lsls	r2, r3, #3
 800c416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c418:	4413      	add	r3, r2
 800c41a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c41e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c424:	b29a      	uxth	r2, r3
 800c426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c428:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c42e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	895b      	ldrh	r3, [r3, #10]
 800c436:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6959      	ldr	r1, [r3, #20]
 800c446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c450:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c454:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c458:	6800      	ldr	r0, [r0, #0]
 800c45a:	f000 ff0a 	bl	800d272 <USB_WritePMA>
 800c45e:	e0ca      	b.n	800c5f6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	785b      	ldrb	r3, [r3, #1]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d177      	bne.n	800c560 <USB_EPStartXfer+0xc98>
 800c470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	461a      	mov	r2, r3
 800c48e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c490:	4413      	add	r3, r2
 800c492:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	00da      	lsls	r2, r3, #3
 800c4a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c4a4:	4413      	add	r3, r2
 800c4a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4ba:	801a      	strh	r2, [r3, #0]
 800c4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10a      	bne.n	800c4da <USB_EPStartXfer+0xc12>
 800c4c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4d6:	801a      	strh	r2, [r3, #0]
 800c4d8:	e073      	b.n	800c5c2 <USB_EPStartXfer+0xcfa>
 800c4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4de:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4e0:	d81c      	bhi.n	800c51c <USB_EPStartXfer+0xc54>
 800c4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e6:	085b      	lsrs	r3, r3, #1
 800c4e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <USB_EPStartXfer+0xc3a>
 800c4f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	b29a      	uxth	r2, r3
 800c508:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	029b      	lsls	r3, r3, #10
 800c510:	b29b      	uxth	r3, r3
 800c512:	4313      	orrs	r3, r2
 800c514:	b29a      	uxth	r2, r3
 800c516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	e052      	b.n	800c5c2 <USB_EPStartXfer+0xcfa>
 800c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c520:	095b      	lsrs	r3, r3, #5
 800c522:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52a:	f003 031f 	and.w	r3, r3, #31
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d104      	bne.n	800c53c <USB_EPStartXfer+0xc74>
 800c532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c536:	3b01      	subs	r3, #1
 800c538:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c53c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	b29a      	uxth	r2, r3
 800c542:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c546:	b29b      	uxth	r3, r3
 800c548:	029b      	lsls	r3, r3, #10
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b29b      	uxth	r3, r3
 800c550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c558:	b29a      	uxth	r2, r3
 800c55a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c55c:	801a      	strh	r2, [r3, #0]
 800c55e:	e030      	b.n	800c5c2 <USB_EPStartXfer+0xcfa>
 800c560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	785b      	ldrb	r3, [r3, #1]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d128      	bne.n	800c5c2 <USB_EPStartXfer+0xcfa>
 800c570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c57e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	461a      	mov	r2, r3
 800c590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c594:	4413      	add	r3, r2
 800c596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	00da      	lsls	r2, r3, #3
 800c5a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5ac:	4413      	add	r3, r2
 800c5ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c5c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	891b      	ldrh	r3, [r3, #8]
 800c5ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6959      	ldr	r1, [r3, #20]
 800c5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c5ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c5f0:	6800      	ldr	r0, [r0, #0]
 800c5f2:	f000 fe3e 	bl	800d272 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c61c:	817b      	strh	r3, [r7, #10]
 800c61e:	897b      	ldrh	r3, [r7, #10]
 800c620:	f083 0310 	eor.w	r3, r3, #16
 800c624:	817b      	strh	r3, [r7, #10]
 800c626:	897b      	ldrh	r3, [r7, #10]
 800c628:	f083 0320 	eor.w	r3, r3, #32
 800c62c:	817b      	strh	r3, [r7, #10]
 800c62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	441a      	add	r2, r3
 800c648:	897b      	ldrh	r3, [r7, #10]
 800c64a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c64e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	8013      	strh	r3, [r2, #0]
 800c65e:	f000 bcdf 	b.w	800d020 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	7b1b      	ldrb	r3, [r3, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f040 80bc 	bne.w	800c7ec <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	699a      	ldr	r2, [r3, #24]
 800c680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d917      	bls.n	800c6c0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	699a      	ldr	r2, [r3, #24]
 800c6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b0:	1ad2      	subs	r2, r2, r3
 800c6b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	619a      	str	r2, [r3, #24]
 800c6be:	e00e      	b.n	800c6de <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c6d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c6ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c702:	4413      	add	r3, r2
 800c704:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	00da      	lsls	r2, r3, #3
 800c716:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c71a:	4413      	add	r3, r2
 800c71c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c730:	b29a      	uxth	r2, r3
 800c732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c736:	801a      	strh	r2, [r3, #0]
 800c738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10d      	bne.n	800c75c <USB_EPStartXfer+0xe94>
 800c740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	b29b      	uxth	r3, r3
 800c748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c750:	b29a      	uxth	r2, r3
 800c752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c756:	801a      	strh	r2, [r3, #0]
 800c758:	f000 bc28 	b.w	800cfac <USB_EPStartXfer+0x16e4>
 800c75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c760:	2b3e      	cmp	r3, #62	@ 0x3e
 800c762:	d81f      	bhi.n	800c7a4 <USB_EPStartXfer+0xedc>
 800c764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c768:	085b      	lsrs	r3, r3, #1
 800c76a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d004      	beq.n	800c784 <USB_EPStartXfer+0xebc>
 800c77a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c77e:	3301      	adds	r3, #1
 800c780:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c790:	b29b      	uxth	r3, r3
 800c792:	029b      	lsls	r3, r3, #10
 800c794:	b29b      	uxth	r3, r3
 800c796:	4313      	orrs	r3, r2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c79e:	801a      	strh	r2, [r3, #0]
 800c7a0:	f000 bc04 	b.w	800cfac <USB_EPStartXfer+0x16e4>
 800c7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a8:	095b      	lsrs	r3, r3, #5
 800c7aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b2:	f003 031f 	and.w	r3, r3, #31
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d104      	bne.n	800c7c4 <USB_EPStartXfer+0xefc>
 800c7ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	029b      	lsls	r3, r3, #10
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7e8:	801a      	strh	r2, [r3, #0]
 800c7ea:	e3df      	b.n	800cfac <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c7ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	78db      	ldrb	r3, [r3, #3]
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	f040 8218 	bne.w	800cc2e <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c7fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	785b      	ldrb	r3, [r3, #1]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f040 809d 	bne.w	800c94a <USB_EPStartXfer+0x1082>
 800c810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c81e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	461a      	mov	r2, r3
 800c830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c834:	4413      	add	r3, r2
 800c836:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	00da      	lsls	r2, r3, #3
 800c848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c84c:	4413      	add	r3, r2
 800c84e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c862:	b29a      	uxth	r2, r3
 800c864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c868:	801a      	strh	r2, [r3, #0]
 800c86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c86e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10c      	bne.n	800c894 <USB_EPStartXfer+0xfcc>
 800c87a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29b      	uxth	r3, r3
 800c882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c890:	801a      	strh	r2, [r3, #0]
 800c892:	e08f      	b.n	800c9b4 <USB_EPStartXfer+0x10ec>
 800c894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8a2:	d826      	bhi.n	800c8f2 <USB_EPStartXfer+0x102a>
 800c8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d004      	beq.n	800c8d4 <USB_EPStartXfer+0x100c>
 800c8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c8d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	029b      	lsls	r3, r3, #10
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8ee:	801a      	strh	r2, [r3, #0]
 800c8f0:	e060      	b.n	800c9b4 <USB_EPStartXfer+0x10ec>
 800c8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	095b      	lsrs	r3, r3, #5
 800c900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	f003 031f 	and.w	r3, r3, #31
 800c914:	2b00      	cmp	r3, #0
 800c916:	d104      	bne.n	800c922 <USB_EPStartXfer+0x105a>
 800c918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c91c:	3b01      	subs	r3, #1
 800c91e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	b29a      	uxth	r2, r3
 800c92a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c92e:	b29b      	uxth	r3, r3
 800c930:	029b      	lsls	r3, r3, #10
 800c932:	b29b      	uxth	r3, r3
 800c934:	4313      	orrs	r3, r2
 800c936:	b29b      	uxth	r3, r3
 800c938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c93c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c940:	b29a      	uxth	r2, r3
 800c942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c946:	801a      	strh	r2, [r3, #0]
 800c948:	e034      	b.n	800c9b4 <USB_EPStartXfer+0x10ec>
 800c94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d12c      	bne.n	800c9b4 <USB_EPStartXfer+0x10ec>
 800c95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c95e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c976:	b29b      	uxth	r3, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c97e:	4413      	add	r3, r2
 800c980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	00da      	lsls	r2, r3, #3
 800c992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c996:	4413      	add	r3, r2
 800c998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c99c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c9a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c9b2:	801a      	strh	r2, [r3, #0]
 800c9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c9c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	785b      	ldrb	r3, [r3, #1]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f040 809d 	bne.w	800cb0e <USB_EPStartXfer+0x1246>
 800c9d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	00da      	lsls	r2, r3, #3
 800ca0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca10:	4413      	add	r3, r2
 800ca12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ca1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca2c:	801a      	strh	r2, [r3, #0]
 800ca2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10c      	bne.n	800ca58 <USB_EPStartXfer+0x1190>
 800ca3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca54:	801a      	strh	r2, [r3, #0]
 800ca56:	e088      	b.n	800cb6a <USB_EPStartXfer+0x12a2>
 800ca58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca66:	d826      	bhi.n	800cab6 <USB_EPStartXfer+0x11ee>
 800ca68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	085b      	lsrs	r3, r3, #1
 800ca76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d004      	beq.n	800ca98 <USB_EPStartXfer+0x11d0>
 800ca8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca92:	3301      	adds	r3, #1
 800ca94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	029b      	lsls	r3, r3, #10
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	4313      	orrs	r3, r2
 800caac:	b29a      	uxth	r2, r3
 800caae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cab2:	801a      	strh	r2, [r3, #0]
 800cab4:	e059      	b.n	800cb6a <USB_EPStartXfer+0x12a2>
 800cab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	095b      	lsrs	r3, r3, #5
 800cac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cacc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	f003 031f 	and.w	r3, r3, #31
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d104      	bne.n	800cae6 <USB_EPStartXfer+0x121e>
 800cadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cae0:	3b01      	subs	r3, #1
 800cae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800caea:	881b      	ldrh	r3, [r3, #0]
 800caec:	b29a      	uxth	r2, r3
 800caee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	029b      	lsls	r3, r3, #10
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	4313      	orrs	r3, r2
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb0a:	801a      	strh	r2, [r3, #0]
 800cb0c:	e02d      	b.n	800cb6a <USB_EPStartXfer+0x12a2>
 800cb0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d125      	bne.n	800cb6a <USB_EPStartXfer+0x12a2>
 800cb1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	461a      	mov	r2, r3
 800cb30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb34:	4413      	add	r3, r2
 800cb36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	00da      	lsls	r2, r3, #3
 800cb48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cb56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cb6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	69db      	ldr	r3, [r3, #28]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f000 8218 	beq.w	800cfac <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cb7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cb9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <USB_EPStartXfer+0x12ec>
 800cba8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10d      	bne.n	800cbd0 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cbb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f040 81f5 	bne.w	800cfac <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cbc2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f040 81ee 	bne.w	800cfac <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cbd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800cbfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	441a      	add	r2, r3
 800cc14:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	8013      	strh	r3, [r2, #0]
 800cc2c:	e1be      	b.n	800cfac <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	78db      	ldrb	r3, [r3, #3]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	f040 81b4 	bne.w	800cfa8 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	699a      	ldr	r2, [r3, #24]
 800cc4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d917      	bls.n	800cc8c <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800cc5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800cc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	699a      	ldr	r2, [r3, #24]
 800cc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7c:	1ad2      	subs	r2, r2, r3
 800cc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	619a      	str	r2, [r3, #24]
 800cc8a:	e00e      	b.n	800ccaa <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800cc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800cc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2200      	movs	r2, #0
 800cca8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ccaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	785b      	ldrb	r3, [r3, #1]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f040 8085 	bne.w	800cdc6 <USB_EPStartXfer+0x14fe>
 800ccbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ccca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cce0:	4413      	add	r3, r2
 800cce2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	00da      	lsls	r2, r3, #3
 800ccf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ccf8:	4413      	add	r3, r2
 800ccfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd14:	801a      	strh	r2, [r3, #0]
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10c      	bne.n	800cd38 <USB_EPStartXfer+0x1470>
 800cd1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd34:	801a      	strh	r2, [r3, #0]
 800cd36:	e077      	b.n	800ce28 <USB_EPStartXfer+0x1560>
 800cd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd3e:	d81e      	bhi.n	800cd7e <USB_EPStartXfer+0x14b6>
 800cd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd44:	085b      	lsrs	r3, r3, #1
 800cd46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d004      	beq.n	800cd60 <USB_EPStartXfer+0x1498>
 800cd56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	029b      	lsls	r3, r3, #10
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	4313      	orrs	r3, r2
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd7a:	801a      	strh	r2, [r3, #0]
 800cd7c:	e054      	b.n	800ce28 <USB_EPStartXfer+0x1560>
 800cd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd82:	095b      	lsrs	r3, r3, #5
 800cd84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8c:	f003 031f 	and.w	r3, r3, #31
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d104      	bne.n	800cd9e <USB_EPStartXfer+0x14d6>
 800cd94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	029b      	lsls	r3, r3, #10
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdc2:	801a      	strh	r2, [r3, #0]
 800cdc4:	e030      	b.n	800ce28 <USB_EPStartXfer+0x1560>
 800cdc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d128      	bne.n	800ce28 <USB_EPStartXfer+0x1560>
 800cdd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cde4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	00da      	lsls	r2, r3, #3
 800ce0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce12:	4413      	add	r3, r2
 800ce14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ce26:	801a      	strh	r2, [r3, #0]
 800ce28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f040 8085 	bne.w	800cf52 <USB_EPStartXfer+0x168a>
 800ce48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	461a      	mov	r2, r3
 800ce68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ce6c:	4413      	add	r3, r2
 800ce6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ce72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	00da      	lsls	r2, r3, #3
 800ce80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ce84:	4413      	add	r3, r2
 800ce86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cea0:	801a      	strh	r2, [r3, #0]
 800cea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10c      	bne.n	800cec4 <USB_EPStartXfer+0x15fc>
 800ceaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	e073      	b.n	800cfac <USB_EPStartXfer+0x16e4>
 800cec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ceca:	d81e      	bhi.n	800cf0a <USB_EPStartXfer+0x1642>
 800cecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced0:	085b      	lsrs	r3, r3, #1
 800ced2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ced6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d004      	beq.n	800ceec <USB_EPStartXfer+0x1624>
 800cee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cee6:	3301      	adds	r3, #1
 800cee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ceec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	029b      	lsls	r3, r3, #10
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	4313      	orrs	r3, r2
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf06:	801a      	strh	r2, [r3, #0]
 800cf08:	e050      	b.n	800cfac <USB_EPStartXfer+0x16e4>
 800cf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf0e:	095b      	lsrs	r3, r3, #5
 800cf10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf18:	f003 031f 	and.w	r3, r3, #31
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d104      	bne.n	800cf2a <USB_EPStartXfer+0x1662>
 800cf20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf24:	3b01      	subs	r3, #1
 800cf26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	029b      	lsls	r3, r3, #10
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf48:	b29a      	uxth	r2, r3
 800cf4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf4e:	801a      	strh	r2, [r3, #0]
 800cf50:	e02c      	b.n	800cfac <USB_EPStartXfer+0x16e4>
 800cf52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	785b      	ldrb	r3, [r3, #1]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d124      	bne.n	800cfac <USB_EPStartXfer+0x16e4>
 800cf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	461a      	mov	r2, r3
 800cf74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf78:	4413      	add	r3, r2
 800cf7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	00da      	lsls	r2, r3, #3
 800cf8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf90:	4413      	add	r3, r2
 800cf92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cfa4:	801a      	strh	r2, [r3, #0]
 800cfa6:	e001      	b.n	800cfac <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e03a      	b.n	800d022 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cfac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cfce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cfd6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cfda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cfde:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cfe2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cfe6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cfea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cfee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	441a      	add	r2, r3
 800d008:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	785b      	ldrb	r3, [r3, #1]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d020      	beq.n	800d080 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	4413      	add	r3, r2
 800d048:	881b      	ldrh	r3, [r3, #0]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d054:	81bb      	strh	r3, [r7, #12]
 800d056:	89bb      	ldrh	r3, [r7, #12]
 800d058:	f083 0310 	eor.w	r3, r3, #16
 800d05c:	81bb      	strh	r3, [r7, #12]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	441a      	add	r2, r3
 800d068:	89bb      	ldrh	r3, [r7, #12]
 800d06a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d06e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8013      	strh	r3, [r2, #0]
 800d07e:	e01f      	b.n	800d0c0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d096:	81fb      	strh	r3, [r7, #14]
 800d098:	89fb      	ldrh	r3, [r7, #14]
 800d09a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d09e:	81fb      	strh	r3, [r7, #14]
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	441a      	add	r2, r3
 800d0aa:	89fb      	ldrh	r3, [r7, #14]
 800d0ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b087      	sub	sp, #28
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	7b1b      	ldrb	r3, [r3, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 809d 	bne.w	800d21c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	785b      	ldrb	r3, [r3, #1]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d04c      	beq.n	800d184 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	823b      	strh	r3, [r7, #16]
 800d0f8:	8a3b      	ldrh	r3, [r7, #16]
 800d0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d01b      	beq.n	800d13a <USB_EPClearStall+0x6c>
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d118:	81fb      	strh	r3, [r7, #14]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	441a      	add	r2, r3
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d12a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d12e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d132:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d136:	b29b      	uxth	r3, r3
 800d138:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	78db      	ldrb	r3, [r3, #3]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d06c      	beq.n	800d21c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4413      	add	r3, r2
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	b29b      	uxth	r3, r3
 800d150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d158:	81bb      	strh	r3, [r7, #12]
 800d15a:	89bb      	ldrh	r3, [r7, #12]
 800d15c:	f083 0320 	eor.w	r3, r3, #32
 800d160:	81bb      	strh	r3, [r7, #12]
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	441a      	add	r2, r3
 800d16c:	89bb      	ldrh	r3, [r7, #12]
 800d16e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d17e:	b29b      	uxth	r3, r3
 800d180:	8013      	strh	r3, [r2, #0]
 800d182:	e04b      	b.n	800d21c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	4413      	add	r3, r2
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	82fb      	strh	r3, [r7, #22]
 800d192:	8afb      	ldrh	r3, [r7, #22]
 800d194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d01b      	beq.n	800d1d4 <USB_EPClearStall+0x106>
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1b2:	82bb      	strh	r3, [r7, #20]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	441a      	add	r2, r3
 800d1be:	8abb      	ldrh	r3, [r7, #20]
 800d1c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1ea:	827b      	strh	r3, [r7, #18]
 800d1ec:	8a7b      	ldrh	r3, [r7, #18]
 800d1ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d1f2:	827b      	strh	r3, [r7, #18]
 800d1f4:	8a7b      	ldrh	r3, [r7, #18]
 800d1f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d1fa:	827b      	strh	r3, [r7, #18]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	441a      	add	r2, r3
 800d206:	8a7b      	ldrh	r3, [r7, #18]
 800d208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d20c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d218:	b29b      	uxth	r3, r3
 800d21a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	371c      	adds	r7, #28
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	460b      	mov	r3, r1
 800d234:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d236:	78fb      	ldrb	r3, [r7, #3]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d103      	bne.n	800d244 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2280      	movs	r2, #128	@ 0x80
 800d240:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d252:	b480      	push	{r7}
 800d254:	b085      	sub	sp, #20
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d260:	b29b      	uxth	r3, r3
 800d262:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d264:	68fb      	ldr	r3, [r7, #12]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d272:	b480      	push	{r7}
 800d274:	b08b      	sub	sp, #44	@ 0x2c
 800d276:	af00      	add	r7, sp, #0
 800d278:	60f8      	str	r0, [r7, #12]
 800d27a:	60b9      	str	r1, [r7, #8]
 800d27c:	4611      	mov	r1, r2
 800d27e:	461a      	mov	r2, r3
 800d280:	460b      	mov	r3, r1
 800d282:	80fb      	strh	r3, [r7, #6]
 800d284:	4613      	mov	r3, r2
 800d286:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d288:	88bb      	ldrh	r3, [r7, #4]
 800d28a:	3301      	adds	r3, #1
 800d28c:	085b      	lsrs	r3, r3, #1
 800d28e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d298:	88fa      	ldrh	r2, [r7, #6]
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	4413      	add	r3, r2
 800d29e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d2a2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2a8:	e01c      	b.n	800d2e4 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	b21b      	sxth	r3, r3
 800d2b8:	021b      	lsls	r3, r3, #8
 800d2ba:	b21a      	sxth	r2, r3
 800d2bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	b21b      	sxth	r3, r3
 800d2c4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	8a7a      	ldrh	r2, [r7, #18]
 800d2ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d2cc:	6a3b      	ldr	r3, [r7, #32]
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1df      	bne.n	800d2aa <USB_WritePMA+0x38>
  }
}
 800d2ea:	bf00      	nop
 800d2ec:	bf00      	nop
 800d2ee:	372c      	adds	r7, #44	@ 0x2c
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b08b      	sub	sp, #44	@ 0x2c
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	4611      	mov	r1, r2
 800d304:	461a      	mov	r2, r3
 800d306:	460b      	mov	r3, r1
 800d308:	80fb      	strh	r3, [r7, #6]
 800d30a:	4613      	mov	r3, r2
 800d30c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d30e:	88bb      	ldrh	r3, [r7, #4]
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	b29b      	uxth	r3, r3
 800d314:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d31e:	88fa      	ldrh	r2, [r7, #6]
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	4413      	add	r3, r2
 800d324:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d328:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d32e:	e018      	b.n	800d362 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	881b      	ldrh	r3, [r3, #0]
 800d334:	b29b      	uxth	r3, r3
 800d336:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d338:	6a3b      	ldr	r3, [r7, #32]
 800d33a:	3302      	adds	r3, #2
 800d33c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	b2da      	uxtb	r2, r3
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	3301      	adds	r3, #1
 800d34a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	0a1b      	lsrs	r3, r3, #8
 800d350:	b2da      	uxtb	r2, r3
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	3301      	adds	r3, #1
 800d35a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35e:	3b01      	subs	r3, #1
 800d360:	627b      	str	r3, [r7, #36]	@ 0x24
 800d362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e3      	bne.n	800d330 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d368:	88bb      	ldrh	r3, [r7, #4]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d007      	beq.n	800d384 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	b29b      	uxth	r3, r3
 800d37a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	701a      	strb	r2, [r3, #0]
  }
}
 800d384:	bf00      	nop
 800d386:	372c      	adds	r7, #44	@ 0x2c
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d398:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	4798      	blx	r3
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	78fa      	ldrb	r2, [r7, #3]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	4798      	blx	r3
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f001 f850 	bl	800e4ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d438:	461a      	mov	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d446:	f003 031f 	and.w	r3, r3, #31
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d01a      	beq.n	800d484 <USBD_LL_SetupStage+0x72>
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d822      	bhi.n	800d498 <USBD_LL_SetupStage+0x86>
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <USBD_LL_SetupStage+0x4a>
 800d456:	2b01      	cmp	r3, #1
 800d458:	d00a      	beq.n	800d470 <USBD_LL_SetupStage+0x5e>
 800d45a:	e01d      	b.n	800d498 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fa7d 	bl	800d964 <USBD_StdDevReq>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73fb      	strb	r3, [r7, #15]
      break;
 800d46e:	e020      	b.n	800d4b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fae5 	bl	800da48 <USBD_StdItfReq>
 800d47e:	4603      	mov	r3, r0
 800d480:	73fb      	strb	r3, [r7, #15]
      break;
 800d482:	e016      	b.n	800d4b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fb47 	bl	800db20 <USBD_StdEPReq>
 800d492:	4603      	mov	r3, r0
 800d494:	73fb      	strb	r3, [r7, #15]
      break;
 800d496:	e00c      	b.n	800d4b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d49e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 fc06 	bl	800ecb8 <USBD_LL_StallEP>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d4b0:	bf00      	nop
  }

  return ret;
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	607a      	str	r2, [r7, #4]
 800d4c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d4ce:	7afb      	ldrb	r3, [r7, #11]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d16e      	bne.n	800d5b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d4da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d4e2:	2b03      	cmp	r3, #3
 800d4e4:	f040 8098 	bne.w	800d618 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d913      	bls.n	800d51c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	689a      	ldr	r2, [r3, #8]
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	1ad2      	subs	r2, r2, r3
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	68da      	ldr	r2, [r3, #12]
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	4293      	cmp	r3, r2
 800d50c:	bf28      	it	cs
 800d50e:	4613      	movcs	r3, r2
 800d510:	461a      	mov	r2, r3
 800d512:	6879      	ldr	r1, [r7, #4]
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f001 f84f 	bl	800e5b8 <USBD_CtlContinueRx>
 800d51a:	e07d      	b.n	800d618 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d522:	f003 031f 	and.w	r3, r3, #31
 800d526:	2b02      	cmp	r3, #2
 800d528:	d014      	beq.n	800d554 <USBD_LL_DataOutStage+0x98>
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d81d      	bhi.n	800d56a <USBD_LL_DataOutStage+0xae>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <USBD_LL_DataOutStage+0x7c>
 800d532:	2b01      	cmp	r3, #1
 800d534:	d003      	beq.n	800d53e <USBD_LL_DataOutStage+0x82>
 800d536:	e018      	b.n	800d56a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d538:	2300      	movs	r3, #0
 800d53a:	75bb      	strb	r3, [r7, #22]
            break;
 800d53c:	e018      	b.n	800d570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d544:	b2db      	uxtb	r3, r3
 800d546:	4619      	mov	r1, r3
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 f9d2 	bl	800d8f2 <USBD_CoreFindIF>
 800d54e:	4603      	mov	r3, r0
 800d550:	75bb      	strb	r3, [r7, #22]
            break;
 800d552:	e00d      	b.n	800d570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	4619      	mov	r1, r3
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f000 f9d4 	bl	800d90c <USBD_CoreFindEP>
 800d564:	4603      	mov	r3, r0
 800d566:	75bb      	strb	r3, [r7, #22]
            break;
 800d568:	e002      	b.n	800d570 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	75bb      	strb	r3, [r7, #22]
            break;
 800d56e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d570:	7dbb      	ldrb	r3, [r7, #22]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d119      	bne.n	800d5aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d113      	bne.n	800d5aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d582:	7dba      	ldrb	r2, [r7, #22]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	32ae      	adds	r2, #174	@ 0xae
 800d588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00b      	beq.n	800d5aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d592:	7dba      	ldrb	r2, [r7, #22]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d59a:	7dba      	ldrb	r2, [r7, #22]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	32ae      	adds	r2, #174	@ 0xae
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f001 f815 	bl	800e5da <USBD_CtlSendStatus>
 800d5b0:	e032      	b.n	800d618 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d5b2:	7afb      	ldrb	r3, [r7, #11]
 800d5b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f000 f9a5 	bl	800d90c <USBD_CoreFindEP>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5c6:	7dbb      	ldrb	r3, [r7, #22]
 800d5c8:	2bff      	cmp	r3, #255	@ 0xff
 800d5ca:	d025      	beq.n	800d618 <USBD_LL_DataOutStage+0x15c>
 800d5cc:	7dbb      	ldrb	r3, [r7, #22]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d122      	bne.n	800d618 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d117      	bne.n	800d60e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d5de:	7dba      	ldrb	r2, [r7, #22]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	32ae      	adds	r2, #174	@ 0xae
 800d5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00f      	beq.n	800d60e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d5ee:	7dba      	ldrb	r2, [r7, #22]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d5f6:	7dba      	ldrb	r2, [r7, #22]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	32ae      	adds	r2, #174	@ 0xae
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	7afa      	ldrb	r2, [r7, #11]
 800d604:	4611      	mov	r1, r2
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	4798      	blx	r3
 800d60a:	4603      	mov	r3, r0
 800d60c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	e000      	b.n	800d61a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	460b      	mov	r3, r1
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d630:	7afb      	ldrb	r3, [r7, #11]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d16f      	bne.n	800d716 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3314      	adds	r3, #20
 800d63a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d642:	2b02      	cmp	r3, #2
 800d644:	d15a      	bne.n	800d6fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	689a      	ldr	r2, [r3, #8]
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d914      	bls.n	800d67c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	689a      	ldr	r2, [r3, #8]
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	1ad2      	subs	r2, r2, r3
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	461a      	mov	r2, r3
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 ff94 	bl	800e596 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d66e:	2300      	movs	r3, #0
 800d670:	2200      	movs	r2, #0
 800d672:	2100      	movs	r1, #0
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f001 fbc9 	bl	800ee0c <USBD_LL_PrepareReceive>
 800d67a:	e03f      	b.n	800d6fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	68da      	ldr	r2, [r3, #12]
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	429a      	cmp	r2, r3
 800d686:	d11c      	bne.n	800d6c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d690:	429a      	cmp	r2, r3
 800d692:	d316      	bcc.n	800d6c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d20f      	bcs.n	800d6c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f000 ff75 	bl	800e596 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f001 fba6 	bl	800ee0c <USBD_LL_PrepareReceive>
 800d6c0:	e01c      	b.n	800d6fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d10f      	bne.n	800d6ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6ee:	2180      	movs	r1, #128	@ 0x80
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f001 fae1 	bl	800ecb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f000 ff82 	bl	800e600 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d03a      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7ff fe42 	bl	800d390 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d714:	e032      	b.n	800d77c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d716:	7afb      	ldrb	r3, [r7, #11]
 800d718:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	4619      	mov	r1, r3
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 f8f3 	bl	800d90c <USBD_CoreFindEP>
 800d726:	4603      	mov	r3, r0
 800d728:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	2bff      	cmp	r3, #255	@ 0xff
 800d72e:	d025      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d122      	bne.n	800d77c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d11c      	bne.n	800d77c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d742:	7dfa      	ldrb	r2, [r7, #23]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	32ae      	adds	r2, #174	@ 0xae
 800d748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74c:	695b      	ldr	r3, [r3, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d014      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d752:	7dfa      	ldrb	r2, [r7, #23]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d75a:	7dfa      	ldrb	r2, [r7, #23]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	32ae      	adds	r2, #174	@ 0xae
 800d760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	7afa      	ldrb	r2, [r7, #11]
 800d768:	4611      	mov	r1, r2
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	4798      	blx	r3
 800d76e:	4603      	mov	r3, r0
 800d770:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d772:	7dbb      	ldrb	r3, [r7, #22]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d778:	7dbb      	ldrb	r3, [r7, #22]
 800d77a:	e000      	b.n	800d77e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d014      	beq.n	800d7ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00e      	beq.n	800d7ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	6852      	ldr	r2, [r2, #4]
 800d7da:	b2d2      	uxtb	r2, r2
 800d7dc:	4611      	mov	r1, r2
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	4798      	blx	r3
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7ec:	2340      	movs	r3, #64	@ 0x40
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f001 fa3a 	bl	800ec6c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2240      	movs	r2, #64	@ 0x40
 800d804:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d808:	2340      	movs	r3, #64	@ 0x40
 800d80a:	2200      	movs	r2, #0
 800d80c:	2180      	movs	r1, #128	@ 0x80
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f001 fa2c 	bl	800ec6c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2240      	movs	r2, #64	@ 0x40
 800d81e:	621a      	str	r2, [r3, #32]

  return ret;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b083      	sub	sp, #12
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	460b      	mov	r3, r1
 800d834:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	78fa      	ldrb	r2, [r7, #3]
 800d83a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d006      	beq.n	800d86c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d864:	b2da      	uxtb	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2204      	movs	r2, #4
 800d870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b04      	cmp	r3, #4
 800d894:	d106      	bne.n	800d8a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b082      	sub	sp, #8
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d110      	bne.n	800d8e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8d6:	69db      	ldr	r3, [r3, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d005      	beq.n	800d8e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d8fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d900:	4618      	mov	r0, r3
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d918:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr

0800d926 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d926:	b480      	push	{r7}
 800d928:	b087      	sub	sp, #28
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	3301      	adds	r3, #1
 800d93c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d944:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d948:	021b      	lsls	r3, r3, #8
 800d94a:	b21a      	sxth	r2, r3
 800d94c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d950:	4313      	orrs	r3, r2
 800d952:	b21b      	sxth	r3, r3
 800d954:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d956:	89fb      	ldrh	r3, [r7, #14]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	371c      	adds	r7, #28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d97a:	2b40      	cmp	r3, #64	@ 0x40
 800d97c:	d005      	beq.n	800d98a <USBD_StdDevReq+0x26>
 800d97e:	2b40      	cmp	r3, #64	@ 0x40
 800d980:	d857      	bhi.n	800da32 <USBD_StdDevReq+0xce>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00f      	beq.n	800d9a6 <USBD_StdDevReq+0x42>
 800d986:	2b20      	cmp	r3, #32
 800d988:	d153      	bne.n	800da32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	32ae      	adds	r2, #174	@ 0xae
 800d994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	4798      	blx	r3
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d9a4:	e04a      	b.n	800da3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	785b      	ldrb	r3, [r3, #1]
 800d9aa:	2b09      	cmp	r3, #9
 800d9ac:	d83b      	bhi.n	800da26 <USBD_StdDevReq+0xc2>
 800d9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b4 <USBD_StdDevReq+0x50>)
 800d9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b4:	0800da09 	.word	0x0800da09
 800d9b8:	0800da1d 	.word	0x0800da1d
 800d9bc:	0800da27 	.word	0x0800da27
 800d9c0:	0800da13 	.word	0x0800da13
 800d9c4:	0800da27 	.word	0x0800da27
 800d9c8:	0800d9e7 	.word	0x0800d9e7
 800d9cc:	0800d9dd 	.word	0x0800d9dd
 800d9d0:	0800da27 	.word	0x0800da27
 800d9d4:	0800d9ff 	.word	0x0800d9ff
 800d9d8:	0800d9f1 	.word	0x0800d9f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa3c 	bl	800de5c <USBD_GetDescriptor>
          break;
 800d9e4:	e024      	b.n	800da30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fbcb 	bl	800e184 <USBD_SetAddress>
          break;
 800d9ee:	e01f      	b.n	800da30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fc0a 	bl	800e20c <USBD_SetConfig>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73fb      	strb	r3, [r7, #15]
          break;
 800d9fc:	e018      	b.n	800da30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fcad 	bl	800e360 <USBD_GetConfig>
          break;
 800da06:	e013      	b.n	800da30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fcde 	bl	800e3cc <USBD_GetStatus>
          break;
 800da10:	e00e      	b.n	800da30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fd0d 	bl	800e434 <USBD_SetFeature>
          break;
 800da1a:	e009      	b.n	800da30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 fd31 	bl	800e486 <USBD_ClrFeature>
          break;
 800da24:	e004      	b.n	800da30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 fd88 	bl	800e53e <USBD_CtlError>
          break;
 800da2e:	bf00      	nop
      }
      break;
 800da30:	e004      	b.n	800da3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 fd82 	bl	800e53e <USBD_CtlError>
      break;
 800da3a:	bf00      	nop
  }

  return ret;
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop

0800da48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da5e:	2b40      	cmp	r3, #64	@ 0x40
 800da60:	d005      	beq.n	800da6e <USBD_StdItfReq+0x26>
 800da62:	2b40      	cmp	r3, #64	@ 0x40
 800da64:	d852      	bhi.n	800db0c <USBD_StdItfReq+0xc4>
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <USBD_StdItfReq+0x26>
 800da6a:	2b20      	cmp	r3, #32
 800da6c:	d14e      	bne.n	800db0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da74:	b2db      	uxtb	r3, r3
 800da76:	3b01      	subs	r3, #1
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d840      	bhi.n	800dafe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	889b      	ldrh	r3, [r3, #4]
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b01      	cmp	r3, #1
 800da84:	d836      	bhi.n	800daf4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	889b      	ldrh	r3, [r3, #4]
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	4619      	mov	r1, r3
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff ff2f 	bl	800d8f2 <USBD_CoreFindIF>
 800da94:	4603      	mov	r3, r0
 800da96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da98:	7bbb      	ldrb	r3, [r7, #14]
 800da9a:	2bff      	cmp	r3, #255	@ 0xff
 800da9c:	d01d      	beq.n	800dada <USBD_StdItfReq+0x92>
 800da9e:	7bbb      	ldrb	r3, [r7, #14]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d11a      	bne.n	800dada <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800daa4:	7bba      	ldrb	r2, [r7, #14]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	32ae      	adds	r2, #174	@ 0xae
 800daaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00f      	beq.n	800dad4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dab4:	7bba      	ldrb	r2, [r7, #14]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dabc:	7bba      	ldrb	r2, [r7, #14]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	32ae      	adds	r2, #174	@ 0xae
 800dac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	4798      	blx	r3
 800dace:	4603      	mov	r3, r0
 800dad0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dad2:	e004      	b.n	800dade <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dad4:	2303      	movs	r3, #3
 800dad6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dad8:	e001      	b.n	800dade <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dada:	2303      	movs	r3, #3
 800dadc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	88db      	ldrh	r3, [r3, #6]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d110      	bne.n	800db08 <USBD_StdItfReq+0xc0>
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10d      	bne.n	800db08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fd74 	bl	800e5da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800daf2:	e009      	b.n	800db08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800daf4:	6839      	ldr	r1, [r7, #0]
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fd21 	bl	800e53e <USBD_CtlError>
          break;
 800dafc:	e004      	b.n	800db08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fd1c 	bl	800e53e <USBD_CtlError>
          break;
 800db06:	e000      	b.n	800db0a <USBD_StdItfReq+0xc2>
          break;
 800db08:	bf00      	nop
      }
      break;
 800db0a:	e004      	b.n	800db16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fd15 	bl	800e53e <USBD_CtlError>
      break;
 800db14:	bf00      	nop
  }

  return ret;
 800db16:	7bfb      	ldrb	r3, [r7, #15]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	889b      	ldrh	r3, [r3, #4]
 800db32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db3c:	2b40      	cmp	r3, #64	@ 0x40
 800db3e:	d007      	beq.n	800db50 <USBD_StdEPReq+0x30>
 800db40:	2b40      	cmp	r3, #64	@ 0x40
 800db42:	f200 817f 	bhi.w	800de44 <USBD_StdEPReq+0x324>
 800db46:	2b00      	cmp	r3, #0
 800db48:	d02a      	beq.n	800dba0 <USBD_StdEPReq+0x80>
 800db4a:	2b20      	cmp	r3, #32
 800db4c:	f040 817a 	bne.w	800de44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff fed9 	bl	800d90c <USBD_CoreFindEP>
 800db5a:	4603      	mov	r3, r0
 800db5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db5e:	7b7b      	ldrb	r3, [r7, #13]
 800db60:	2bff      	cmp	r3, #255	@ 0xff
 800db62:	f000 8174 	beq.w	800de4e <USBD_StdEPReq+0x32e>
 800db66:	7b7b      	ldrb	r3, [r7, #13]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f040 8170 	bne.w	800de4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800db6e:	7b7a      	ldrb	r2, [r7, #13]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800db76:	7b7a      	ldrb	r2, [r7, #13]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	32ae      	adds	r2, #174	@ 0xae
 800db7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 8163 	beq.w	800de4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800db88:	7b7a      	ldrb	r2, [r7, #13]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	32ae      	adds	r2, #174	@ 0xae
 800db8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	6839      	ldr	r1, [r7, #0]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	4798      	blx	r3
 800db9a:	4603      	mov	r3, r0
 800db9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800db9e:	e156      	b.n	800de4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	785b      	ldrb	r3, [r3, #1]
 800dba4:	2b03      	cmp	r3, #3
 800dba6:	d008      	beq.n	800dbba <USBD_StdEPReq+0x9a>
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	f300 8145 	bgt.w	800de38 <USBD_StdEPReq+0x318>
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 809b 	beq.w	800dcea <USBD_StdEPReq+0x1ca>
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d03c      	beq.n	800dc32 <USBD_StdEPReq+0x112>
 800dbb8:	e13e      	b.n	800de38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d002      	beq.n	800dbcc <USBD_StdEPReq+0xac>
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	d016      	beq.n	800dbf8 <USBD_StdEPReq+0xd8>
 800dbca:	e02c      	b.n	800dc26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbcc:	7bbb      	ldrb	r3, [r7, #14]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00d      	beq.n	800dbee <USBD_StdEPReq+0xce>
 800dbd2:	7bbb      	ldrb	r3, [r7, #14]
 800dbd4:	2b80      	cmp	r3, #128	@ 0x80
 800dbd6:	d00a      	beq.n	800dbee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbd8:	7bbb      	ldrb	r3, [r7, #14]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f001 f86b 	bl	800ecb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbe2:	2180      	movs	r1, #128	@ 0x80
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 f867 	bl	800ecb8 <USBD_LL_StallEP>
 800dbea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbec:	e020      	b.n	800dc30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fca4 	bl	800e53e <USBD_CtlError>
              break;
 800dbf6:	e01b      	b.n	800dc30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	885b      	ldrh	r3, [r3, #2]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10e      	bne.n	800dc1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc00:	7bbb      	ldrb	r3, [r7, #14]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00b      	beq.n	800dc1e <USBD_StdEPReq+0xfe>
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	2b80      	cmp	r3, #128	@ 0x80
 800dc0a:	d008      	beq.n	800dc1e <USBD_StdEPReq+0xfe>
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	88db      	ldrh	r3, [r3, #6]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d104      	bne.n	800dc1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f001 f84d 	bl	800ecb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fcdb 	bl	800e5da <USBD_CtlSendStatus>

              break;
 800dc24:	e004      	b.n	800dc30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fc88 	bl	800e53e <USBD_CtlError>
              break;
 800dc2e:	bf00      	nop
          }
          break;
 800dc30:	e107      	b.n	800de42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d002      	beq.n	800dc44 <USBD_StdEPReq+0x124>
 800dc3e:	2b03      	cmp	r3, #3
 800dc40:	d016      	beq.n	800dc70 <USBD_StdEPReq+0x150>
 800dc42:	e04b      	b.n	800dcdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc44:	7bbb      	ldrb	r3, [r7, #14]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00d      	beq.n	800dc66 <USBD_StdEPReq+0x146>
 800dc4a:	7bbb      	ldrb	r3, [r7, #14]
 800dc4c:	2b80      	cmp	r3, #128	@ 0x80
 800dc4e:	d00a      	beq.n	800dc66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc50:	7bbb      	ldrb	r3, [r7, #14]
 800dc52:	4619      	mov	r1, r3
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f001 f82f 	bl	800ecb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc5a:	2180      	movs	r1, #128	@ 0x80
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f001 f82b 	bl	800ecb8 <USBD_LL_StallEP>
 800dc62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc64:	e040      	b.n	800dce8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fc68 	bl	800e53e <USBD_CtlError>
              break;
 800dc6e:	e03b      	b.n	800dce8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	885b      	ldrh	r3, [r3, #2]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d136      	bne.n	800dce6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc78:	7bbb      	ldrb	r3, [r7, #14]
 800dc7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d004      	beq.n	800dc8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f001 f835 	bl	800ecf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fca4 	bl	800e5da <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff fe38 	bl	800d90c <USBD_CoreFindEP>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dca0:	7b7b      	ldrb	r3, [r7, #13]
 800dca2:	2bff      	cmp	r3, #255	@ 0xff
 800dca4:	d01f      	beq.n	800dce6 <USBD_StdEPReq+0x1c6>
 800dca6:	7b7b      	ldrb	r3, [r7, #13]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d11c      	bne.n	800dce6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dcac:	7b7a      	ldrb	r2, [r7, #13]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dcb4:	7b7a      	ldrb	r2, [r7, #13]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	32ae      	adds	r2, #174	@ 0xae
 800dcba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d010      	beq.n	800dce6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dcc4:	7b7a      	ldrb	r2, [r7, #13]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	32ae      	adds	r2, #174	@ 0xae
 800dcca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	4798      	blx	r3
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dcda:	e004      	b.n	800dce6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fc2d 	bl	800e53e <USBD_CtlError>
              break;
 800dce4:	e000      	b.n	800dce8 <USBD_StdEPReq+0x1c8>
              break;
 800dce6:	bf00      	nop
          }
          break;
 800dce8:	e0ab      	b.n	800de42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d002      	beq.n	800dcfc <USBD_StdEPReq+0x1dc>
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d032      	beq.n	800dd60 <USBD_StdEPReq+0x240>
 800dcfa:	e097      	b.n	800de2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcfc:	7bbb      	ldrb	r3, [r7, #14]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d007      	beq.n	800dd12 <USBD_StdEPReq+0x1f2>
 800dd02:	7bbb      	ldrb	r3, [r7, #14]
 800dd04:	2b80      	cmp	r3, #128	@ 0x80
 800dd06:	d004      	beq.n	800dd12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fc17 	bl	800e53e <USBD_CtlError>
                break;
 800dd10:	e091      	b.n	800de36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	da0b      	bge.n	800dd32 <USBD_StdEPReq+0x212>
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
 800dd1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	3310      	adds	r3, #16
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	3304      	adds	r3, #4
 800dd30:	e00b      	b.n	800dd4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd32:	7bbb      	ldrb	r3, [r7, #14]
 800dd34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd38:	4613      	mov	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	4413      	add	r3, r2
 800dd48:	3304      	adds	r3, #4
 800dd4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2202      	movs	r2, #2
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 fc01 	bl	800e560 <USBD_CtlSendData>
              break;
 800dd5e:	e06a      	b.n	800de36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	da11      	bge.n	800dd8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd68:	7bbb      	ldrb	r3, [r7, #14]
 800dd6a:	f003 020f 	and.w	r2, r3, #15
 800dd6e:	6879      	ldr	r1, [r7, #4]
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	440b      	add	r3, r1
 800dd7a:	3324      	adds	r3, #36	@ 0x24
 800dd7c:	881b      	ldrh	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d117      	bne.n	800ddb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd82:	6839      	ldr	r1, [r7, #0]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fbda 	bl	800e53e <USBD_CtlError>
                  break;
 800dd8a:	e054      	b.n	800de36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	f003 020f 	and.w	r2, r3, #15
 800dd92:	6879      	ldr	r1, [r7, #4]
 800dd94:	4613      	mov	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	440b      	add	r3, r1
 800dd9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d104      	bne.n	800ddb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dda8:	6839      	ldr	r1, [r7, #0]
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 fbc7 	bl	800e53e <USBD_CtlError>
                  break;
 800ddb0:	e041      	b.n	800de36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	da0b      	bge.n	800ddd2 <USBD_StdEPReq+0x2b2>
 800ddba:	7bbb      	ldrb	r3, [r7, #14]
 800ddbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	3310      	adds	r3, #16
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	4413      	add	r3, r2
 800ddce:	3304      	adds	r3, #4
 800ddd0:	e00b      	b.n	800ddea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddd2:	7bbb      	ldrb	r3, [r7, #14]
 800ddd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddd8:	4613      	mov	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	4413      	add	r3, r2
 800dde8:	3304      	adds	r3, #4
 800ddea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <USBD_StdEPReq+0x2d8>
 800ddf2:	7bbb      	ldrb	r3, [r7, #14]
 800ddf4:	2b80      	cmp	r3, #128	@ 0x80
 800ddf6:	d103      	bne.n	800de00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	e00e      	b.n	800de1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de00:	7bbb      	ldrb	r3, [r7, #14]
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 ff95 	bl	800ed34 <USBD_LL_IsStallEP>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d003      	beq.n	800de18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2201      	movs	r2, #1
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	e002      	b.n	800de1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2200      	movs	r2, #0
 800de1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2202      	movs	r2, #2
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fb9b 	bl	800e560 <USBD_CtlSendData>
              break;
 800de2a:	e004      	b.n	800de36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800de2c:	6839      	ldr	r1, [r7, #0]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fb85 	bl	800e53e <USBD_CtlError>
              break;
 800de34:	bf00      	nop
          }
          break;
 800de36:	e004      	b.n	800de42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800de38:	6839      	ldr	r1, [r7, #0]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 fb7f 	bl	800e53e <USBD_CtlError>
          break;
 800de40:	bf00      	nop
      }
      break;
 800de42:	e005      	b.n	800de50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 fb79 	bl	800e53e <USBD_CtlError>
      break;
 800de4c:	e000      	b.n	800de50 <USBD_StdEPReq+0x330>
      break;
 800de4e:	bf00      	nop
  }

  return ret;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
	...

0800de5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de66:	2300      	movs	r3, #0
 800de68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de6e:	2300      	movs	r3, #0
 800de70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	885b      	ldrh	r3, [r3, #2]
 800de76:	0a1b      	lsrs	r3, r3, #8
 800de78:	b29b      	uxth	r3, r3
 800de7a:	3b01      	subs	r3, #1
 800de7c:	2b0e      	cmp	r3, #14
 800de7e:	f200 8152 	bhi.w	800e126 <USBD_GetDescriptor+0x2ca>
 800de82:	a201      	add	r2, pc, #4	@ (adr r2, 800de88 <USBD_GetDescriptor+0x2c>)
 800de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de88:	0800def9 	.word	0x0800def9
 800de8c:	0800df11 	.word	0x0800df11
 800de90:	0800df51 	.word	0x0800df51
 800de94:	0800e127 	.word	0x0800e127
 800de98:	0800e127 	.word	0x0800e127
 800de9c:	0800e0c7 	.word	0x0800e0c7
 800dea0:	0800e0f3 	.word	0x0800e0f3
 800dea4:	0800e127 	.word	0x0800e127
 800dea8:	0800e127 	.word	0x0800e127
 800deac:	0800e127 	.word	0x0800e127
 800deb0:	0800e127 	.word	0x0800e127
 800deb4:	0800e127 	.word	0x0800e127
 800deb8:	0800e127 	.word	0x0800e127
 800debc:	0800e127 	.word	0x0800e127
 800dec0:	0800dec5 	.word	0x0800dec5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deca:	69db      	ldr	r3, [r3, #28]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00b      	beq.n	800dee8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ded6:	69db      	ldr	r3, [r3, #28]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	7c12      	ldrb	r2, [r2, #16]
 800dedc:	f107 0108 	add.w	r1, r7, #8
 800dee0:	4610      	mov	r0, r2
 800dee2:	4798      	blx	r3
 800dee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dee6:	e126      	b.n	800e136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fb27 	bl	800e53e <USBD_CtlError>
        err++;
 800def0:	7afb      	ldrb	r3, [r7, #11]
 800def2:	3301      	adds	r3, #1
 800def4:	72fb      	strb	r3, [r7, #11]
      break;
 800def6:	e11e      	b.n	800e136 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	7c12      	ldrb	r2, [r2, #16]
 800df04:	f107 0108 	add.w	r1, r7, #8
 800df08:	4610      	mov	r0, r2
 800df0a:	4798      	blx	r3
 800df0c:	60f8      	str	r0, [r7, #12]
      break;
 800df0e:	e112      	b.n	800e136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	7c1b      	ldrb	r3, [r3, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d10d      	bne.n	800df34 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df20:	f107 0208 	add.w	r2, r7, #8
 800df24:	4610      	mov	r0, r2
 800df26:	4798      	blx	r3
 800df28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3301      	adds	r3, #1
 800df2e:	2202      	movs	r2, #2
 800df30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df32:	e100      	b.n	800e136 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3c:	f107 0208 	add.w	r2, r7, #8
 800df40:	4610      	mov	r0, r2
 800df42:	4798      	blx	r3
 800df44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3301      	adds	r3, #1
 800df4a:	2202      	movs	r2, #2
 800df4c:	701a      	strb	r2, [r3, #0]
      break;
 800df4e:	e0f2      	b.n	800e136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	885b      	ldrh	r3, [r3, #2]
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b05      	cmp	r3, #5
 800df58:	f200 80ac 	bhi.w	800e0b4 <USBD_GetDescriptor+0x258>
 800df5c:	a201      	add	r2, pc, #4	@ (adr r2, 800df64 <USBD_GetDescriptor+0x108>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800df7d 	.word	0x0800df7d
 800df68:	0800dfb1 	.word	0x0800dfb1
 800df6c:	0800dfe5 	.word	0x0800dfe5
 800df70:	0800e019 	.word	0x0800e019
 800df74:	0800e04d 	.word	0x0800e04d
 800df78:	0800e081 	.word	0x0800e081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00b      	beq.n	800dfa0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	7c12      	ldrb	r2, [r2, #16]
 800df94:	f107 0108 	add.w	r1, r7, #8
 800df98:	4610      	mov	r0, r2
 800df9a:	4798      	blx	r3
 800df9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df9e:	e091      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 facb 	bl	800e53e <USBD_CtlError>
            err++;
 800dfa8:	7afb      	ldrb	r3, [r7, #11]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	72fb      	strb	r3, [r7, #11]
          break;
 800dfae:	e089      	b.n	800e0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00b      	beq.n	800dfd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	7c12      	ldrb	r2, [r2, #16]
 800dfc8:	f107 0108 	add.w	r1, r7, #8
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4798      	blx	r3
 800dfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfd2:	e077      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 fab1 	bl	800e53e <USBD_CtlError>
            err++;
 800dfdc:	7afb      	ldrb	r3, [r7, #11]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfe2:	e06f      	b.n	800e0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00b      	beq.n	800e008 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	7c12      	ldrb	r2, [r2, #16]
 800dffc:	f107 0108 	add.w	r1, r7, #8
 800e000:	4610      	mov	r0, r2
 800e002:	4798      	blx	r3
 800e004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e006:	e05d      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 fa97 	bl	800e53e <USBD_CtlError>
            err++;
 800e010:	7afb      	ldrb	r3, [r7, #11]
 800e012:	3301      	adds	r3, #1
 800e014:	72fb      	strb	r3, [r7, #11]
          break;
 800e016:	e055      	b.n	800e0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00b      	beq.n	800e03c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	7c12      	ldrb	r2, [r2, #16]
 800e030:	f107 0108 	add.w	r1, r7, #8
 800e034:	4610      	mov	r0, r2
 800e036:	4798      	blx	r3
 800e038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e03a:	e043      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fa7d 	bl	800e53e <USBD_CtlError>
            err++;
 800e044:	7afb      	ldrb	r3, [r7, #11]
 800e046:	3301      	adds	r3, #1
 800e048:	72fb      	strb	r3, [r7, #11]
          break;
 800e04a:	e03b      	b.n	800e0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00b      	beq.n	800e070 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	7c12      	ldrb	r2, [r2, #16]
 800e064:	f107 0108 	add.w	r1, r7, #8
 800e068:	4610      	mov	r0, r2
 800e06a:	4798      	blx	r3
 800e06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e06e:	e029      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fa63 	bl	800e53e <USBD_CtlError>
            err++;
 800e078:	7afb      	ldrb	r3, [r7, #11]
 800e07a:	3301      	adds	r3, #1
 800e07c:	72fb      	strb	r3, [r7, #11]
          break;
 800e07e:	e021      	b.n	800e0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00b      	beq.n	800e0a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e092:	699b      	ldr	r3, [r3, #24]
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	7c12      	ldrb	r2, [r2, #16]
 800e098:	f107 0108 	add.w	r1, r7, #8
 800e09c:	4610      	mov	r0, r2
 800e09e:	4798      	blx	r3
 800e0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0a2:	e00f      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 fa49 	bl	800e53e <USBD_CtlError>
            err++;
 800e0ac:	7afb      	ldrb	r3, [r7, #11]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e0b2:	e007      	b.n	800e0c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 fa41 	bl	800e53e <USBD_CtlError>
          err++;
 800e0bc:	7afb      	ldrb	r3, [r7, #11]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e0c2:	bf00      	nop
      }
      break;
 800e0c4:	e037      	b.n	800e136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	7c1b      	ldrb	r3, [r3, #16]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d109      	bne.n	800e0e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0d6:	f107 0208 	add.w	r2, r7, #8
 800e0da:	4610      	mov	r0, r2
 800e0dc:	4798      	blx	r3
 800e0de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0e0:	e029      	b.n	800e136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0e2:	6839      	ldr	r1, [r7, #0]
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fa2a 	bl	800e53e <USBD_CtlError>
        err++;
 800e0ea:	7afb      	ldrb	r3, [r7, #11]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e0f0:	e021      	b.n	800e136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	7c1b      	ldrb	r3, [r3, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10d      	bne.n	800e116 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e102:	f107 0208 	add.w	r2, r7, #8
 800e106:	4610      	mov	r0, r2
 800e108:	4798      	blx	r3
 800e10a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3301      	adds	r3, #1
 800e110:	2207      	movs	r2, #7
 800e112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e114:	e00f      	b.n	800e136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e116:	6839      	ldr	r1, [r7, #0]
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 fa10 	bl	800e53e <USBD_CtlError>
        err++;
 800e11e:	7afb      	ldrb	r3, [r7, #11]
 800e120:	3301      	adds	r3, #1
 800e122:	72fb      	strb	r3, [r7, #11]
      break;
 800e124:	e007      	b.n	800e136 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fa08 	bl	800e53e <USBD_CtlError>
      err++;
 800e12e:	7afb      	ldrb	r3, [r7, #11]
 800e130:	3301      	adds	r3, #1
 800e132:	72fb      	strb	r3, [r7, #11]
      break;
 800e134:	bf00      	nop
  }

  if (err != 0U)
 800e136:	7afb      	ldrb	r3, [r7, #11]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d11e      	bne.n	800e17a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	88db      	ldrh	r3, [r3, #6]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d016      	beq.n	800e172 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e144:	893b      	ldrh	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00e      	beq.n	800e168 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	88da      	ldrh	r2, [r3, #6]
 800e14e:	893b      	ldrh	r3, [r7, #8]
 800e150:	4293      	cmp	r3, r2
 800e152:	bf28      	it	cs
 800e154:	4613      	movcs	r3, r2
 800e156:	b29b      	uxth	r3, r3
 800e158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e15a:	893b      	ldrh	r3, [r7, #8]
 800e15c:	461a      	mov	r2, r3
 800e15e:	68f9      	ldr	r1, [r7, #12]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 f9fd 	bl	800e560 <USBD_CtlSendData>
 800e166:	e009      	b.n	800e17c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f9e7 	bl	800e53e <USBD_CtlError>
 800e170:	e004      	b.n	800e17c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa31 	bl	800e5da <USBD_CtlSendStatus>
 800e178:	e000      	b.n	800e17c <USBD_GetDescriptor+0x320>
    return;
 800e17a:	bf00      	nop
  }
}
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop

0800e184 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	889b      	ldrh	r3, [r3, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d131      	bne.n	800e1fa <USBD_SetAddress+0x76>
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	88db      	ldrh	r3, [r3, #6]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d12d      	bne.n	800e1fa <USBD_SetAddress+0x76>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	885b      	ldrh	r3, [r3, #2]
 800e1a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1a4:	d829      	bhi.n	800e1fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	885b      	ldrh	r3, [r3, #2]
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d104      	bne.n	800e1c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f9bc 	bl	800e53e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1c6:	e01d      	b.n	800e204 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	7bfa      	ldrb	r2, [r7, #15]
 800e1cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 fdd9 	bl	800ed8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f9fd 	bl	800e5da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d004      	beq.n	800e1f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ee:	e009      	b.n	800e204 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1f8:	e004      	b.n	800e204 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 f99e 	bl	800e53e <USBD_CtlError>
  }
}
 800e202:	bf00      	nop
 800e204:	bf00      	nop
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	885b      	ldrh	r3, [r3, #2]
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	4b4e      	ldr	r3, [pc, #312]	@ (800e35c <USBD_SetConfig+0x150>)
 800e222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e224:	4b4d      	ldr	r3, [pc, #308]	@ (800e35c <USBD_SetConfig+0x150>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d905      	bls.n	800e238 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f985 	bl	800e53e <USBD_CtlError>
    return USBD_FAIL;
 800e234:	2303      	movs	r3, #3
 800e236:	e08c      	b.n	800e352 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b02      	cmp	r3, #2
 800e242:	d002      	beq.n	800e24a <USBD_SetConfig+0x3e>
 800e244:	2b03      	cmp	r3, #3
 800e246:	d029      	beq.n	800e29c <USBD_SetConfig+0x90>
 800e248:	e075      	b.n	800e336 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e24a:	4b44      	ldr	r3, [pc, #272]	@ (800e35c <USBD_SetConfig+0x150>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d020      	beq.n	800e294 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e252:	4b42      	ldr	r3, [pc, #264]	@ (800e35c <USBD_SetConfig+0x150>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e25c:	4b3f      	ldr	r3, [pc, #252]	@ (800e35c <USBD_SetConfig+0x150>)
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	4619      	mov	r1, r3
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7ff f89f 	bl	800d3a6 <USBD_SetClassConfig>
 800e268:	4603      	mov	r3, r0
 800e26a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d008      	beq.n	800e284 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f962 	bl	800e53e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2202      	movs	r2, #2
 800e27e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e282:	e065      	b.n	800e350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f9a8 	bl	800e5da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2203      	movs	r2, #3
 800e28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e292:	e05d      	b.n	800e350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 f9a0 	bl	800e5da <USBD_CtlSendStatus>
      break;
 800e29a:	e059      	b.n	800e350 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e29c:	4b2f      	ldr	r3, [pc, #188]	@ (800e35c <USBD_SetConfig+0x150>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d112      	bne.n	800e2ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2202      	movs	r2, #2
 800e2a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e35c <USBD_SetConfig+0x150>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2b6:	4b29      	ldr	r3, [pc, #164]	@ (800e35c <USBD_SetConfig+0x150>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff f88e 	bl	800d3de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f989 	bl	800e5da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e2c8:	e042      	b.n	800e350 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e2ca:	4b24      	ldr	r3, [pc, #144]	@ (800e35c <USBD_SetConfig+0x150>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d02a      	beq.n	800e32e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff f87c 	bl	800d3de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e2e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e35c <USBD_SetConfig+0x150>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e35c <USBD_SetConfig+0x150>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff f855 	bl	800d3a6 <USBD_SetClassConfig>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00f      	beq.n	800e326 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f918 	bl	800e53e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	b2db      	uxtb	r3, r3
 800e314:	4619      	mov	r1, r3
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f7ff f861 	bl	800d3de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2202      	movs	r2, #2
 800e320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e324:	e014      	b.n	800e350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f957 	bl	800e5da <USBD_CtlSendStatus>
      break;
 800e32c:	e010      	b.n	800e350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 f953 	bl	800e5da <USBD_CtlSendStatus>
      break;
 800e334:	e00c      	b.n	800e350 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e336:	6839      	ldr	r1, [r7, #0]
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f900 	bl	800e53e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e33e:	4b07      	ldr	r3, [pc, #28]	@ (800e35c <USBD_SetConfig+0x150>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	4619      	mov	r1, r3
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff f84a 	bl	800d3de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e34a:	2303      	movs	r3, #3
 800e34c:	73fb      	strb	r3, [r7, #15]
      break;
 800e34e:	bf00      	nop
  }

  return ret;
 800e350:	7bfb      	ldrb	r3, [r7, #15]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20000630 	.word	0x20000630

0800e360 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	88db      	ldrh	r3, [r3, #6]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d004      	beq.n	800e37c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 f8e2 	bl	800e53e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e37a:	e023      	b.n	800e3c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b02      	cmp	r3, #2
 800e386:	dc02      	bgt.n	800e38e <USBD_GetConfig+0x2e>
 800e388:	2b00      	cmp	r3, #0
 800e38a:	dc03      	bgt.n	800e394 <USBD_GetConfig+0x34>
 800e38c:	e015      	b.n	800e3ba <USBD_GetConfig+0x5a>
 800e38e:	2b03      	cmp	r3, #3
 800e390:	d00b      	beq.n	800e3aa <USBD_GetConfig+0x4a>
 800e392:	e012      	b.n	800e3ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	3308      	adds	r3, #8
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f8dc 	bl	800e560 <USBD_CtlSendData>
        break;
 800e3a8:	e00c      	b.n	800e3c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f8d4 	bl	800e560 <USBD_CtlSendData>
        break;
 800e3b8:	e004      	b.n	800e3c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f8be 	bl	800e53e <USBD_CtlError>
        break;
 800e3c2:	bf00      	nop
}
 800e3c4:	bf00      	nop
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	2b02      	cmp	r3, #2
 800e3e2:	d81e      	bhi.n	800e422 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	88db      	ldrh	r3, [r3, #6]
 800e3e8:	2b02      	cmp	r3, #2
 800e3ea:	d004      	beq.n	800e3f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3ec:	6839      	ldr	r1, [r7, #0]
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f8a5 	bl	800e53e <USBD_CtlError>
        break;
 800e3f4:	e01a      	b.n	800e42c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e402:	2b00      	cmp	r3, #0
 800e404:	d005      	beq.n	800e412 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	f043 0202 	orr.w	r2, r3, #2
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	330c      	adds	r3, #12
 800e416:	2202      	movs	r2, #2
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 f8a0 	bl	800e560 <USBD_CtlSendData>
      break;
 800e420:	e004      	b.n	800e42c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 f88a 	bl	800e53e <USBD_CtlError>
      break;
 800e42a:	bf00      	nop
  }
}
 800e42c:	bf00      	nop
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	885b      	ldrh	r3, [r3, #2]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d107      	bne.n	800e456 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2201      	movs	r2, #1
 800e44a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f8c3 	bl	800e5da <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e454:	e013      	b.n	800e47e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	885b      	ldrh	r3, [r3, #2]
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d10b      	bne.n	800e476 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	889b      	ldrh	r3, [r3, #4]
 800e462:	0a1b      	lsrs	r3, r3, #8
 800e464:	b29b      	uxth	r3, r3
 800e466:	b2da      	uxtb	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f8b3 	bl	800e5da <USBD_CtlSendStatus>
}
 800e474:	e003      	b.n	800e47e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e476:	6839      	ldr	r1, [r7, #0]
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 f860 	bl	800e53e <USBD_CtlError>
}
 800e47e:	bf00      	nop
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
 800e48e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e496:	b2db      	uxtb	r3, r3
 800e498:	3b01      	subs	r3, #1
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d80b      	bhi.n	800e4b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	885b      	ldrh	r3, [r3, #2]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d10c      	bne.n	800e4c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f893 	bl	800e5da <USBD_CtlSendStatus>
      }
      break;
 800e4b4:	e004      	b.n	800e4c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f840 	bl	800e53e <USBD_CtlError>
      break;
 800e4be:	e000      	b.n	800e4c2 <USBD_ClrFeature+0x3c>
      break;
 800e4c0:	bf00      	nop
  }
}
 800e4c2:	bf00      	nop
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	781a      	ldrb	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff fa16 	bl	800d926 <SWAPBYTE>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3301      	adds	r3, #1
 800e506:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3301      	adds	r3, #1
 800e50c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff fa09 	bl	800d926 <SWAPBYTE>
 800e514:	4603      	mov	r3, r0
 800e516:	461a      	mov	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3301      	adds	r3, #1
 800e520:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3301      	adds	r3, #1
 800e526:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f7ff f9fc 	bl	800d926 <SWAPBYTE>
 800e52e:	4603      	mov	r3, r0
 800e530:	461a      	mov	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	80da      	strh	r2, [r3, #6]
}
 800e536:	bf00      	nop
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b082      	sub	sp, #8
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
 800e546:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e548:	2180      	movs	r1, #128	@ 0x80
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fbb4 	bl	800ecb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e550:	2100      	movs	r1, #0
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fbb0 	bl	800ecb8 <USBD_LL_StallEP>
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2202      	movs	r2, #2
 800e570:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68ba      	ldr	r2, [r7, #8]
 800e584:	2100      	movs	r1, #0
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f000 fc1f 	bl	800edca <USBD_LL_Transmit>

  return USBD_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b084      	sub	sp, #16
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	60f8      	str	r0, [r7, #12]
 800e59e:	60b9      	str	r1, [r7, #8]
 800e5a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	68ba      	ldr	r2, [r7, #8]
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f000 fc0e 	bl	800edca <USBD_LL_Transmit>

  return USBD_OK;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f000 fc1e 	bl	800ee0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b082      	sub	sp, #8
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2204      	movs	r2, #4
 800e5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 fbea 	bl	800edca <USBD_LL_Transmit>

  return USBD_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2205      	movs	r2, #5
 800e60c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e610:	2300      	movs	r3, #0
 800e612:	2200      	movs	r2, #0
 800e614:	2100      	movs	r1, #0
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fbf8 	bl	800ee0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
	...

0800e628 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e628:	b580      	push	{r7, lr}
 800e62a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e62c:	4b05      	ldr	r3, [pc, #20]	@ (800e644 <SysTick_Handler+0x1c>)
 800e62e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e630:	f000 f986 	bl	800e940 <xTaskGetSchedulerState>
 800e634:	4603      	mov	r3, r0
 800e636:	2b01      	cmp	r3, #1
 800e638:	d001      	beq.n	800e63e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e63a:	f000 f9b7 	bl	800e9ac <xPortSysTickHandler>
  }
}
 800e63e:	bf00      	nop
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	e000e010 	.word	0xe000e010

0800e648 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	689a      	ldr	r2, [r3, #8]
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	689b      	ldr	r3, [r3, #8]
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	601a      	str	r2, [r3, #0]
}
 800e684:	bf00      	nop
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	6892      	ldr	r2, [r2, #8]
 800e6a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	6852      	ldr	r2, [r2, #4]
 800e6b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d103      	bne.n	800e6c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	689a      	ldr	r2, [r3, #8]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	1e5a      	subs	r2, r3, #1
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ee:	4b4b      	ldr	r3, [pc, #300]	@ (800e81c <xTaskIncrementTick+0x138>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f040 8088 	bne.w	800e808 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6f8:	4b49      	ldr	r3, [pc, #292]	@ (800e820 <xTaskIncrementTick+0x13c>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e700:	4a47      	ldr	r2, [pc, #284]	@ (800e820 <xTaskIncrementTick+0x13c>)
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d119      	bne.n	800e740 <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e70c:	4b45      	ldr	r3, [pc, #276]	@ (800e824 <xTaskIncrementTick+0x140>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d003      	beq.n	800e71e <xTaskIncrementTick+0x3a>
 800e716:	f000 f997 	bl	800ea48 <ulSetInterruptMask>
 800e71a:	bf00      	nop
 800e71c:	e7fd      	b.n	800e71a <xTaskIncrementTick+0x36>
 800e71e:	4b41      	ldr	r3, [pc, #260]	@ (800e824 <xTaskIncrementTick+0x140>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	4b40      	ldr	r3, [pc, #256]	@ (800e828 <xTaskIncrementTick+0x144>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a3e      	ldr	r2, [pc, #248]	@ (800e824 <xTaskIncrementTick+0x140>)
 800e72a:	6013      	str	r3, [r2, #0]
 800e72c:	4a3e      	ldr	r2, [pc, #248]	@ (800e828 <xTaskIncrementTick+0x144>)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	4b3e      	ldr	r3, [pc, #248]	@ (800e82c <xTaskIncrementTick+0x148>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3301      	adds	r3, #1
 800e738:	4a3c      	ldr	r2, [pc, #240]	@ (800e82c <xTaskIncrementTick+0x148>)
 800e73a:	6013      	str	r3, [r2, #0]
 800e73c:	f000 f8e0 	bl	800e900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e740:	4b3b      	ldr	r3, [pc, #236]	@ (800e830 <xTaskIncrementTick+0x14c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	693a      	ldr	r2, [r7, #16]
 800e746:	429a      	cmp	r2, r3
 800e748:	d349      	bcc.n	800e7de <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e74a:	4b36      	ldr	r3, [pc, #216]	@ (800e824 <xTaskIncrementTick+0x140>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d104      	bne.n	800e75e <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e754:	4b36      	ldr	r3, [pc, #216]	@ (800e830 <xTaskIncrementTick+0x14c>)
 800e756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e75a:	601a      	str	r2, [r3, #0]
					break;
 800e75c:	e03f      	b.n	800e7de <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e75e:	4b31      	ldr	r3, [pc, #196]	@ (800e824 <xTaskIncrementTick+0x140>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	429a      	cmp	r2, r3
 800e774:	d203      	bcs.n	800e77e <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e776:	4a2e      	ldr	r2, [pc, #184]	@ (800e830 <xTaskIncrementTick+0x14c>)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e77c:	e02f      	b.n	800e7de <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	3304      	adds	r3, #4
 800e782:	4618      	mov	r0, r3
 800e784:	f7ff ff84 	bl	800e690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d004      	beq.n	800e79a <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	3318      	adds	r3, #24
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff ff7b 	bl	800e690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79e:	4b25      	ldr	r3, [pc, #148]	@ (800e834 <xTaskIncrementTick+0x150>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d903      	bls.n	800e7ae <xTaskIncrementTick+0xca>
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7aa:	4a22      	ldr	r2, [pc, #136]	@ (800e834 <xTaskIncrementTick+0x150>)
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	009b      	lsls	r3, r3, #2
 800e7ba:	4a1f      	ldr	r2, [pc, #124]	@ (800e838 <xTaskIncrementTick+0x154>)
 800e7bc:	441a      	add	r2, r3
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7ff ff3f 	bl	800e648 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e83c <xTaskIncrementTick+0x158>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d3b8      	bcc.n	800e74a <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7dc:	e7b5      	b.n	800e74a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7de:	4b17      	ldr	r3, [pc, #92]	@ (800e83c <xTaskIncrementTick+0x158>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e4:	4914      	ldr	r1, [pc, #80]	@ (800e838 <xTaskIncrementTick+0x154>)
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	440b      	add	r3, r1
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d901      	bls.n	800e7fa <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7fa:	4b11      	ldr	r3, [pc, #68]	@ (800e840 <xTaskIncrementTick+0x15c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d007      	beq.n	800e812 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e802:	2301      	movs	r3, #1
 800e804:	617b      	str	r3, [r7, #20]
 800e806:	e004      	b.n	800e812 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e808:	4b0e      	ldr	r3, [pc, #56]	@ (800e844 <xTaskIncrementTick+0x160>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3301      	adds	r3, #1
 800e80e:	4a0d      	ldr	r2, [pc, #52]	@ (800e844 <xTaskIncrementTick+0x160>)
 800e810:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e812:	697b      	ldr	r3, [r7, #20]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3718      	adds	r7, #24
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	20000abc 	.word	0x20000abc
 800e820:	20000aa0 	.word	0x20000aa0
 800e824:	20000a98 	.word	0x20000a98
 800e828:	20000a9c 	.word	0x20000a9c
 800e82c:	20000ab4 	.word	0x20000ab4
 800e830:	20000ab8 	.word	0x20000ab8
 800e834:	20000aa4 	.word	0x20000aa4
 800e838:	20000638 	.word	0x20000638
 800e83c:	20000634 	.word	0x20000634
 800e840:	20000ab0 	.word	0x20000ab0
 800e844:	20000aac 	.word	0x20000aac

0800e848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e84e:	4b26      	ldr	r3, [pc, #152]	@ (800e8e8 <vTaskSwitchContext+0xa0>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e856:	4b25      	ldr	r3, [pc, #148]	@ (800e8ec <vTaskSwitchContext+0xa4>)
 800e858:	2201      	movs	r2, #1
 800e85a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e85c:	e03f      	b.n	800e8de <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e85e:	4b23      	ldr	r3, [pc, #140]	@ (800e8ec <vTaskSwitchContext+0xa4>)
 800e860:	2200      	movs	r2, #0
 800e862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e864:	4b22      	ldr	r3, [pc, #136]	@ (800e8f0 <vTaskSwitchContext+0xa8>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	607b      	str	r3, [r7, #4]
 800e86a:	e009      	b.n	800e880 <vTaskSwitchContext+0x38>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d103      	bne.n	800e87a <vTaskSwitchContext+0x32>
 800e872:	f000 f8e9 	bl	800ea48 <ulSetInterruptMask>
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <vTaskSwitchContext+0x2e>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	607b      	str	r3, [r7, #4]
 800e880:	491c      	ldr	r1, [pc, #112]	@ (800e8f4 <vTaskSwitchContext+0xac>)
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	440b      	add	r3, r1
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d0eb      	beq.n	800e86c <vTaskSwitchContext+0x24>
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4613      	mov	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4413      	add	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4a15      	ldr	r2, [pc, #84]	@ (800e8f4 <vTaskSwitchContext+0xac>)
 800e8a0:	4413      	add	r3, r2
 800e8a2:	603b      	str	r3, [r7, #0]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	605a      	str	r2, [r3, #4]
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	685a      	ldr	r2, [r3, #4]
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d104      	bne.n	800e8c4 <vTaskSwitchContext+0x7c>
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	605a      	str	r2, [r3, #4]
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	4a0b      	ldr	r2, [pc, #44]	@ (800e8f8 <vTaskSwitchContext+0xb0>)
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	4a08      	ldr	r2, [pc, #32]	@ (800e8f0 <vTaskSwitchContext+0xa8>)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e8d4:	4b08      	ldr	r3, [pc, #32]	@ (800e8f8 <vTaskSwitchContext+0xb0>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	3354      	adds	r3, #84	@ 0x54
 800e8da:	4a08      	ldr	r2, [pc, #32]	@ (800e8fc <vTaskSwitchContext+0xb4>)
 800e8dc:	6013      	str	r3, [r2, #0]
}
 800e8de:	bf00      	nop
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20000abc 	.word	0x20000abc
 800e8ec:	20000ab0 	.word	0x20000ab0
 800e8f0:	20000aa4 	.word	0x20000aa4
 800e8f4:	20000638 	.word	0x20000638
 800e8f8:	20000634 	.word	0x20000634
 800e8fc:	20000020 	.word	0x20000020

0800e900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e906:	4b0c      	ldr	r3, [pc, #48]	@ (800e938 <prvResetNextTaskUnblockTime+0x38>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d104      	bne.n	800e91a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e910:	4b0a      	ldr	r3, [pc, #40]	@ (800e93c <prvResetNextTaskUnblockTime+0x3c>)
 800e912:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e918:	e008      	b.n	800e92c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e91a:	4b07      	ldr	r3, [pc, #28]	@ (800e938 <prvResetNextTaskUnblockTime+0x38>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	4a04      	ldr	r2, [pc, #16]	@ (800e93c <prvResetNextTaskUnblockTime+0x3c>)
 800e92a:	6013      	str	r3, [r2, #0]
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	20000a98 	.word	0x20000a98
 800e93c:	20000ab8 	.word	0x20000ab8

0800e940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e946:	4b0b      	ldr	r3, [pc, #44]	@ (800e974 <xTaskGetSchedulerState+0x34>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d102      	bne.n	800e954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e94e:	2301      	movs	r3, #1
 800e950:	607b      	str	r3, [r7, #4]
 800e952:	e008      	b.n	800e966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e954:	4b08      	ldr	r3, [pc, #32]	@ (800e978 <xTaskGetSchedulerState+0x38>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d102      	bne.n	800e962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e95c:	2302      	movs	r3, #2
 800e95e:	607b      	str	r3, [r7, #4]
 800e960:	e001      	b.n	800e966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e962:	2300      	movs	r3, #0
 800e964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e966:	687b      	ldr	r3, [r7, #4]
	}
 800e968:	4618      	mov	r0, r3
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	20000aa8 	.word	0x20000aa8
 800e978:	20000abc 	.word	0x20000abc

0800e97c <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 800e97c:	b480      	push	{r7}
 800e97e:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800e980:	4b08      	ldr	r3, [pc, #32]	@ (800e9a4 <prvSetupFPU+0x28>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a07      	ldr	r2, [pc, #28]	@ (800e9a4 <prvSetupFPU+0x28>)
 800e986:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e98a:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800e98c:	4b06      	ldr	r3, [pc, #24]	@ (800e9a8 <prvSetupFPU+0x2c>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a05      	ldr	r2, [pc, #20]	@ (800e9a8 <prvSetupFPU+0x2c>)
 800e992:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e996:	6013      	str	r3, [r2, #0]
	}
 800e998:	bf00      	nop
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	e000ed88 	.word	0xe000ed88
 800e9a8:	e000ef34 	.word	0xe000ef34

0800e9ac <xPortSysTickHandler>:
	}
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9b2:	f000 f849 	bl	800ea48 <ulSetInterruptMask>
 800e9b6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9b8:	f7ff fe94 	bl	800e6e4 <xTaskIncrementTick>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d003      	beq.n	800e9ca <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9c2:	4b05      	ldr	r3, [pc, #20]	@ (800e9d8 <xPortSysTickHandler+0x2c>)
 800e9c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9c8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f849 	bl	800ea62 <vClearInterruptMask>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	699b      	ldr	r3, [r3, #24]
 800e9e8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3b02      	subs	r3, #2
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800e9f2:	7afb      	ldrb	r3, [r7, #11]
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d104      	bne.n	800ea02 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 800e9f8:	f7ff ffc0 	bl	800e97c <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800e9fc:	f000 f810 	bl	800ea20 <vRestoreContextOfFirstTask>
		}
		break;
 800ea00:	e003      	b.n	800ea0a <vPortSVCHandler_C+0x2e>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800ea02:	f000 f821 	bl	800ea48 <ulSetInterruptMask>
 800ea06:	bf00      	nop
 800ea08:	e7fd      	b.n	800ea06 <vPortSVCHandler_C+0x2a>
		}
	}
}
 800ea0a:	bf00      	nop
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
	...

0800ea20 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ea20:	4a07      	ldr	r2, [pc, #28]	@ (800ea40 <pxCurrentTCBConst2>)
 800ea22:	6811      	ldr	r1, [r2, #0]
 800ea24:	6808      	ldr	r0, [r1, #0]
 800ea26:	c806      	ldmia	r0!, {r1, r2}
 800ea28:	f381 880b 	msr	PSPLIM, r1
 800ea2c:	2102      	movs	r1, #2
 800ea2e:	f381 8814 	msr	CONTROL, r1
 800ea32:	3020      	adds	r0, #32
 800ea34:	f380 8809 	msr	PSP, r0
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	4710      	bx	r2
 800ea3e:	bf00      	nop

0800ea40 <pxCurrentTCBConst2>:
 800ea40:	20000634 	.word	0x20000634
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop

0800ea48 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ea48:	f3ef 8011 	mrs	r0, BASEPRI
 800ea4c:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 800ea50:	f381 8811 	msr	BASEPRI, r1
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ea5e:	bf00      	nop
 800ea60:	4618      	mov	r0, r3

0800ea62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ea62:	f380 8811 	msr	BASEPRI, r0
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800ea70:	bf00      	nop
	...

0800ea80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ea80:	f3ef 8009 	mrs	r0, PSP
 800ea84:	f01e 0f10 	tst.w	lr, #16
 800ea88:	bf08      	it	eq
 800ea8a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea8e:	f3ef 820b 	mrs	r2, PSPLIM
 800ea92:	4673      	mov	r3, lr
 800ea94:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ea98:	4a11      	ldr	r2, [pc, #68]	@ (800eae0 <pxCurrentTCBConst>)
 800ea9a:	6811      	ldr	r1, [r2, #0]
 800ea9c:	6008      	str	r0, [r1, #0]
 800ea9e:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 800eaa2:	f380 8811 	msr	BASEPRI, r0
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f7ff fecb 	bl	800e848 <vTaskSwitchContext>
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8811 	msr	BASEPRI, r0
 800eaba:	4a09      	ldr	r2, [pc, #36]	@ (800eae0 <pxCurrentTCBConst>)
 800eabc:	6811      	ldr	r1, [r2, #0]
 800eabe:	6808      	ldr	r0, [r1, #0]
 800eac0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800eac4:	f013 0f10 	tst.w	r3, #16
 800eac8:	bf08      	it	eq
 800eaca:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eace:	f382 880b 	msr	PSPLIM, r2
 800ead2:	f380 8809 	msr	PSP, r0
 800ead6:	4718      	bx	r3
 800ead8:	f3af 8000 	nop.w
 800eadc:	f3af 8000 	nop.w

0800eae0 <pxCurrentTCBConst>:
 800eae0:	20000634 	.word	0x20000634
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
	...

0800eaf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800eaf0:	f01e 0f04 	tst.w	lr, #4
 800eaf4:	bf0c      	ite	eq
 800eaf6:	f3ef 8008 	mrseq	r0, MSP
 800eafa:	f3ef 8009 	mrsne	r0, PSP
 800eafe:	4904      	ldr	r1, [pc, #16]	@ (800eb10 <svchandler_address_const>)
 800eb00:	4708      	bx	r1
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	f3af 8000 	nop.w
 800eb0c:	f3af 8000 	nop.w

0800eb10 <svchandler_address_const>:
 800eb10:	0800e9dd 	.word	0x0800e9dd
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800eb14:	bf00      	nop
 800eb16:	bf00      	nop

0800eb18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4610      	mov	r0, r2
 800eb30:	f7fe fc6f 	bl	800d412 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800eb4e:	78fa      	ldrb	r2, [r7, #3]
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	4613      	mov	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4413      	add	r3, r2
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	440b      	add	r3, r1
 800eb5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	78fb      	ldrb	r3, [r7, #3]
 800eb64:	4619      	mov	r1, r3
 800eb66:	f7fe fca9 	bl	800d4bc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800eb6a:	bf00      	nop
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800eb84:	78fa      	ldrb	r2, [r7, #3]
 800eb86:	6879      	ldr	r1, [r7, #4]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	4413      	add	r3, r2
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	440b      	add	r3, r1
 800eb92:	3324      	adds	r3, #36	@ 0x24
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	78fb      	ldrb	r3, [r7, #3]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f7fe fd42 	bl	800d622 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800eb9e:	bf00      	nop
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b082      	sub	sp, #8
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe fe7c 	bl	800d8b2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	795b      	ldrb	r3, [r3, #5]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d001      	beq.n	800ebda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ebd6:	f7f4 f985 	bl	8002ee4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ebe0:	7bfa      	ldrb	r2, [r7, #15]
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fe fe20 	bl	800d82a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe fdc8 	bl	800d786 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ebf6:	bf00      	nop
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
	...

0800ec00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fe1b 	bl	800d84a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	7a5b      	ldrb	r3, [r3, #9]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d005      	beq.n	800ec28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec1c:	4b04      	ldr	r3, [pc, #16]	@ (800ec30 <HAL_PCD_SuspendCallback+0x30>)
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	4a03      	ldr	r2, [pc, #12]	@ (800ec30 <HAL_PCD_SuspendCallback+0x30>)
 800ec22:	f043 0306 	orr.w	r3, r3, #6
 800ec26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ec28:	bf00      	nop
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	e000ed00 	.word	0xe000ed00

0800ec34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	7a5b      	ldrb	r3, [r3, #9]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d007      	beq.n	800ec54 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec44:	4b08      	ldr	r3, [pc, #32]	@ (800ec68 <HAL_PCD_ResumeCallback+0x34>)
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	4a07      	ldr	r2, [pc, #28]	@ (800ec68 <HAL_PCD_ResumeCallback+0x34>)
 800ec4a:	f023 0306 	bic.w	r3, r3, #6
 800ec4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ec50:	f000 f934 	bl	800eebc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fe fe11 	bl	800d882 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	e000ed00 	.word	0xe000ed00

0800ec6c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	4608      	mov	r0, r1
 800ec76:	4611      	mov	r1, r2
 800ec78:	461a      	mov	r2, r3
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	70fb      	strb	r3, [r7, #3]
 800ec7e:	460b      	mov	r3, r1
 800ec80:	70bb      	strb	r3, [r7, #2]
 800ec82:	4613      	mov	r3, r2
 800ec84:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec94:	78bb      	ldrb	r3, [r7, #2]
 800ec96:	883a      	ldrh	r2, [r7, #0]
 800ec98:	78f9      	ldrb	r1, [r7, #3]
 800ec9a:	f7f7 fa08 	bl	80060ae <HAL_PCD_EP_Open>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f000 f90f 	bl	800eec8 <USBD_Get_USB_Status>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecae:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3710      	adds	r7, #16
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecd2:	78fa      	ldrb	r2, [r7, #3]
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f7 faae 	bl	8006238 <HAL_PCD_EP_SetStall>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 f8f0 	bl	800eec8 <USBD_Get_USB_Status>
 800ece8:	4603      	mov	r3, r0
 800ecea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b084      	sub	sp, #16
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	460b      	mov	r3, r1
 800ed00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed10:	78fa      	ldrb	r2, [r7, #3]
 800ed12:	4611      	mov	r1, r2
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7f7 fae1 	bl	80062dc <HAL_PCD_EP_ClrStall>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed1e:	7bfb      	ldrb	r3, [r7, #15]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f000 f8d1 	bl	800eec8 <USBD_Get_USB_Status>
 800ed26:	4603      	mov	r3, r0
 800ed28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	da0b      	bge.n	800ed68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed50:	78fb      	ldrb	r3, [r7, #3]
 800ed52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed56:	68f9      	ldr	r1, [r7, #12]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4413      	add	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	440b      	add	r3, r1
 800ed62:	3312      	adds	r3, #18
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	e00b      	b.n	800ed80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed68:	78fb      	ldrb	r3, [r7, #3]
 800ed6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed6e:	68f9      	ldr	r1, [r7, #12]
 800ed70:	4613      	mov	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	00db      	lsls	r3, r3, #3
 800ed78:	440b      	add	r3, r1
 800ed7a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ed7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eda6:	78fa      	ldrb	r2, [r7, #3]
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7f7 f95b 	bl	8006066 <HAL_PCD_SetAddress>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f000 f886 	bl	800eec8 <USBD_Get_USB_Status>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b086      	sub	sp, #24
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	603b      	str	r3, [r7, #0]
 800edd6:	460b      	mov	r3, r1
 800edd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ede8:	7af9      	ldrb	r1, [r7, #11]
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	f7f7 f9ec 	bl	80061ca <HAL_PCD_EP_Transmit>
 800edf2:	4603      	mov	r3, r0
 800edf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 f865 	bl	800eec8 <USBD_Get_USB_Status>
 800edfe:	4603      	mov	r3, r0
 800ee00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee02:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3718      	adds	r7, #24
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	607a      	str	r2, [r7, #4]
 800ee16:	603b      	str	r3, [r7, #0]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee2a:	7af9      	ldrb	r1, [r7, #11]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	f7f7 f99a 	bl	8006168 <HAL_PCD_EP_Receive>
 800ee34:	4603      	mov	r3, r0
 800ee36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 f844 	bl	800eec8 <USBD_Get_USB_Status>
 800ee40:	4603      	mov	r3, r0
 800ee42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee44:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3718      	adds	r7, #24
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
	...

0800ee50 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <HAL_PCDEx_LPM_Callback+0x18>
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d013      	beq.n	800ee8e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ee66:	e023      	b.n	800eeb0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	7a5b      	ldrb	r3, [r3, #9]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d007      	beq.n	800ee80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ee70:	f000 f824 	bl	800eebc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee74:	4b10      	ldr	r3, [pc, #64]	@ (800eeb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee76:	691b      	ldr	r3, [r3, #16]
 800ee78:	4a0f      	ldr	r2, [pc, #60]	@ (800eeb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ee7a:	f023 0306 	bic.w	r3, r3, #6
 800ee7e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fe fcfb 	bl	800d882 <USBD_LL_Resume>
    break;
 800ee8c:	e010      	b.n	800eeb0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe fcd8 	bl	800d84a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7a5b      	ldrb	r3, [r3, #9]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d005      	beq.n	800eeae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eea2:	4b05      	ldr	r3, [pc, #20]	@ (800eeb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	4a04      	ldr	r2, [pc, #16]	@ (800eeb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800eea8:	f043 0306 	orr.w	r3, r3, #6
 800eeac:	6113      	str	r3, [r2, #16]
    break;
 800eeae:	bf00      	nop
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	e000ed00 	.word	0xe000ed00

0800eebc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800eec0:	f7f3 ff4c 	bl	8002d5c <SystemClock_Config>
}
 800eec4:	bf00      	nop
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	2b03      	cmp	r3, #3
 800eeda:	d817      	bhi.n	800ef0c <USBD_Get_USB_Status+0x44>
 800eedc:	a201      	add	r2, pc, #4	@ (adr r2, 800eee4 <USBD_Get_USB_Status+0x1c>)
 800eede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee2:	bf00      	nop
 800eee4:	0800eef5 	.word	0x0800eef5
 800eee8:	0800eefb 	.word	0x0800eefb
 800eeec:	0800ef01 	.word	0x0800ef01
 800eef0:	0800ef07 	.word	0x0800ef07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eef4:	2300      	movs	r3, #0
 800eef6:	73fb      	strb	r3, [r7, #15]
    break;
 800eef8:	e00b      	b.n	800ef12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eefa:	2303      	movs	r3, #3
 800eefc:	73fb      	strb	r3, [r7, #15]
    break;
 800eefe:	e008      	b.n	800ef12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef00:	2301      	movs	r3, #1
 800ef02:	73fb      	strb	r3, [r7, #15]
    break;
 800ef04:	e005      	b.n	800ef12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef06:	2303      	movs	r3, #3
 800ef08:	73fb      	strb	r3, [r7, #15]
    break;
 800ef0a:	e002      	b.n	800ef12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef0c:	2303      	movs	r3, #3
 800ef0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef10:	bf00      	nop
  }
  return usb_status;
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <malloc>:
 800ef20:	4b02      	ldr	r3, [pc, #8]	@ (800ef2c <malloc+0xc>)
 800ef22:	4601      	mov	r1, r0
 800ef24:	6818      	ldr	r0, [r3, #0]
 800ef26:	f000 b82d 	b.w	800ef84 <_malloc_r>
 800ef2a:	bf00      	nop
 800ef2c:	20000020 	.word	0x20000020

0800ef30 <free>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	@ (800ef3c <free+0xc>)
 800ef32:	4601      	mov	r1, r0
 800ef34:	6818      	ldr	r0, [r3, #0]
 800ef36:	f000 b8f5 	b.w	800f124 <_free_r>
 800ef3a:	bf00      	nop
 800ef3c:	20000020 	.word	0x20000020

0800ef40 <sbrk_aligned>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	4e0f      	ldr	r6, [pc, #60]	@ (800ef80 <sbrk_aligned+0x40>)
 800ef44:	460c      	mov	r4, r1
 800ef46:	4605      	mov	r5, r0
 800ef48:	6831      	ldr	r1, [r6, #0]
 800ef4a:	b911      	cbnz	r1, 800ef52 <sbrk_aligned+0x12>
 800ef4c:	f000 f8ae 	bl	800f0ac <_sbrk_r>
 800ef50:	6030      	str	r0, [r6, #0]
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 f8a9 	bl	800f0ac <_sbrk_r>
 800ef5a:	1c43      	adds	r3, r0, #1
 800ef5c:	d103      	bne.n	800ef66 <sbrk_aligned+0x26>
 800ef5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ef62:	4620      	mov	r0, r4
 800ef64:	bd70      	pop	{r4, r5, r6, pc}
 800ef66:	1cc4      	adds	r4, r0, #3
 800ef68:	f024 0403 	bic.w	r4, r4, #3
 800ef6c:	42a0      	cmp	r0, r4
 800ef6e:	d0f8      	beq.n	800ef62 <sbrk_aligned+0x22>
 800ef70:	1a21      	subs	r1, r4, r0
 800ef72:	4628      	mov	r0, r5
 800ef74:	f000 f89a 	bl	800f0ac <_sbrk_r>
 800ef78:	3001      	adds	r0, #1
 800ef7a:	d1f2      	bne.n	800ef62 <sbrk_aligned+0x22>
 800ef7c:	e7ef      	b.n	800ef5e <sbrk_aligned+0x1e>
 800ef7e:	bf00      	nop
 800ef80:	20000d9c 	.word	0x20000d9c

0800ef84 <_malloc_r>:
 800ef84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef88:	1ccd      	adds	r5, r1, #3
 800ef8a:	4606      	mov	r6, r0
 800ef8c:	f025 0503 	bic.w	r5, r5, #3
 800ef90:	3508      	adds	r5, #8
 800ef92:	2d0c      	cmp	r5, #12
 800ef94:	bf38      	it	cc
 800ef96:	250c      	movcc	r5, #12
 800ef98:	2d00      	cmp	r5, #0
 800ef9a:	db01      	blt.n	800efa0 <_malloc_r+0x1c>
 800ef9c:	42a9      	cmp	r1, r5
 800ef9e:	d904      	bls.n	800efaa <_malloc_r+0x26>
 800efa0:	230c      	movs	r3, #12
 800efa2:	6033      	str	r3, [r6, #0]
 800efa4:	2000      	movs	r0, #0
 800efa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f080 <_malloc_r+0xfc>
 800efae:	f000 f869 	bl	800f084 <__malloc_lock>
 800efb2:	f8d8 3000 	ldr.w	r3, [r8]
 800efb6:	461c      	mov	r4, r3
 800efb8:	bb44      	cbnz	r4, 800f00c <_malloc_r+0x88>
 800efba:	4629      	mov	r1, r5
 800efbc:	4630      	mov	r0, r6
 800efbe:	f7ff ffbf 	bl	800ef40 <sbrk_aligned>
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	4604      	mov	r4, r0
 800efc6:	d158      	bne.n	800f07a <_malloc_r+0xf6>
 800efc8:	f8d8 4000 	ldr.w	r4, [r8]
 800efcc:	4627      	mov	r7, r4
 800efce:	2f00      	cmp	r7, #0
 800efd0:	d143      	bne.n	800f05a <_malloc_r+0xd6>
 800efd2:	2c00      	cmp	r4, #0
 800efd4:	d04b      	beq.n	800f06e <_malloc_r+0xea>
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	4639      	mov	r1, r7
 800efda:	4630      	mov	r0, r6
 800efdc:	eb04 0903 	add.w	r9, r4, r3
 800efe0:	f000 f864 	bl	800f0ac <_sbrk_r>
 800efe4:	4581      	cmp	r9, r0
 800efe6:	d142      	bne.n	800f06e <_malloc_r+0xea>
 800efe8:	6821      	ldr	r1, [r4, #0]
 800efea:	4630      	mov	r0, r6
 800efec:	1a6d      	subs	r5, r5, r1
 800efee:	4629      	mov	r1, r5
 800eff0:	f7ff ffa6 	bl	800ef40 <sbrk_aligned>
 800eff4:	3001      	adds	r0, #1
 800eff6:	d03a      	beq.n	800f06e <_malloc_r+0xea>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	442b      	add	r3, r5
 800effc:	6023      	str	r3, [r4, #0]
 800effe:	f8d8 3000 	ldr.w	r3, [r8]
 800f002:	685a      	ldr	r2, [r3, #4]
 800f004:	bb62      	cbnz	r2, 800f060 <_malloc_r+0xdc>
 800f006:	f8c8 7000 	str.w	r7, [r8]
 800f00a:	e00f      	b.n	800f02c <_malloc_r+0xa8>
 800f00c:	6822      	ldr	r2, [r4, #0]
 800f00e:	1b52      	subs	r2, r2, r5
 800f010:	d420      	bmi.n	800f054 <_malloc_r+0xd0>
 800f012:	2a0b      	cmp	r2, #11
 800f014:	d917      	bls.n	800f046 <_malloc_r+0xc2>
 800f016:	1961      	adds	r1, r4, r5
 800f018:	42a3      	cmp	r3, r4
 800f01a:	6025      	str	r5, [r4, #0]
 800f01c:	bf18      	it	ne
 800f01e:	6059      	strne	r1, [r3, #4]
 800f020:	6863      	ldr	r3, [r4, #4]
 800f022:	bf08      	it	eq
 800f024:	f8c8 1000 	streq.w	r1, [r8]
 800f028:	5162      	str	r2, [r4, r5]
 800f02a:	604b      	str	r3, [r1, #4]
 800f02c:	4630      	mov	r0, r6
 800f02e:	f000 f82f 	bl	800f090 <__malloc_unlock>
 800f032:	f104 000b 	add.w	r0, r4, #11
 800f036:	1d23      	adds	r3, r4, #4
 800f038:	f020 0007 	bic.w	r0, r0, #7
 800f03c:	1ac2      	subs	r2, r0, r3
 800f03e:	bf1c      	itt	ne
 800f040:	1a1b      	subne	r3, r3, r0
 800f042:	50a3      	strne	r3, [r4, r2]
 800f044:	e7af      	b.n	800efa6 <_malloc_r+0x22>
 800f046:	6862      	ldr	r2, [r4, #4]
 800f048:	42a3      	cmp	r3, r4
 800f04a:	bf0c      	ite	eq
 800f04c:	f8c8 2000 	streq.w	r2, [r8]
 800f050:	605a      	strne	r2, [r3, #4]
 800f052:	e7eb      	b.n	800f02c <_malloc_r+0xa8>
 800f054:	4623      	mov	r3, r4
 800f056:	6864      	ldr	r4, [r4, #4]
 800f058:	e7ae      	b.n	800efb8 <_malloc_r+0x34>
 800f05a:	463c      	mov	r4, r7
 800f05c:	687f      	ldr	r7, [r7, #4]
 800f05e:	e7b6      	b.n	800efce <_malloc_r+0x4a>
 800f060:	461a      	mov	r2, r3
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	42a3      	cmp	r3, r4
 800f066:	d1fb      	bne.n	800f060 <_malloc_r+0xdc>
 800f068:	2300      	movs	r3, #0
 800f06a:	6053      	str	r3, [r2, #4]
 800f06c:	e7de      	b.n	800f02c <_malloc_r+0xa8>
 800f06e:	230c      	movs	r3, #12
 800f070:	4630      	mov	r0, r6
 800f072:	6033      	str	r3, [r6, #0]
 800f074:	f000 f80c 	bl	800f090 <__malloc_unlock>
 800f078:	e794      	b.n	800efa4 <_malloc_r+0x20>
 800f07a:	6005      	str	r5, [r0, #0]
 800f07c:	e7d6      	b.n	800f02c <_malloc_r+0xa8>
 800f07e:	bf00      	nop
 800f080:	20000da0 	.word	0x20000da0

0800f084 <__malloc_lock>:
 800f084:	4801      	ldr	r0, [pc, #4]	@ (800f08c <__malloc_lock+0x8>)
 800f086:	f000 b84b 	b.w	800f120 <__retarget_lock_acquire_recursive>
 800f08a:	bf00      	nop
 800f08c:	20000ee0 	.word	0x20000ee0

0800f090 <__malloc_unlock>:
 800f090:	4801      	ldr	r0, [pc, #4]	@ (800f098 <__malloc_unlock+0x8>)
 800f092:	f000 b846 	b.w	800f122 <__retarget_lock_release_recursive>
 800f096:	bf00      	nop
 800f098:	20000ee0 	.word	0x20000ee0

0800f09c <memset>:
 800f09c:	4402      	add	r2, r0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d100      	bne.n	800f0a6 <memset+0xa>
 800f0a4:	4770      	bx	lr
 800f0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800f0aa:	e7f9      	b.n	800f0a0 <memset+0x4>

0800f0ac <_sbrk_r>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	4d05      	ldr	r5, [pc, #20]	@ (800f0c8 <_sbrk_r+0x1c>)
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	4608      	mov	r0, r1
 800f0b6:	602b      	str	r3, [r5, #0]
 800f0b8:	f7f4 f974 	bl	80033a4 <_sbrk>
 800f0bc:	1c43      	adds	r3, r0, #1
 800f0be:	d102      	bne.n	800f0c6 <_sbrk_r+0x1a>
 800f0c0:	682b      	ldr	r3, [r5, #0]
 800f0c2:	b103      	cbz	r3, 800f0c6 <_sbrk_r+0x1a>
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	bd38      	pop	{r3, r4, r5, pc}
 800f0c8:	20000edc 	.word	0x20000edc

0800f0cc <__errno>:
 800f0cc:	4b01      	ldr	r3, [pc, #4]	@ (800f0d4 <__errno+0x8>)
 800f0ce:	6818      	ldr	r0, [r3, #0]
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	20000020 	.word	0x20000020

0800f0d8 <__libc_init_array>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	4d0d      	ldr	r5, [pc, #52]	@ (800f110 <__libc_init_array+0x38>)
 800f0dc:	2600      	movs	r6, #0
 800f0de:	4c0d      	ldr	r4, [pc, #52]	@ (800f114 <__libc_init_array+0x3c>)
 800f0e0:	1b64      	subs	r4, r4, r5
 800f0e2:	10a4      	asrs	r4, r4, #2
 800f0e4:	42a6      	cmp	r6, r4
 800f0e6:	d109      	bne.n	800f0fc <__libc_init_array+0x24>
 800f0e8:	4d0b      	ldr	r5, [pc, #44]	@ (800f118 <__libc_init_array+0x40>)
 800f0ea:	2600      	movs	r6, #0
 800f0ec:	4c0b      	ldr	r4, [pc, #44]	@ (800f11c <__libc_init_array+0x44>)
 800f0ee:	f000 fa5d 	bl	800f5ac <_init>
 800f0f2:	1b64      	subs	r4, r4, r5
 800f0f4:	10a4      	asrs	r4, r4, #2
 800f0f6:	42a6      	cmp	r6, r4
 800f0f8:	d105      	bne.n	800f106 <__libc_init_array+0x2e>
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f100:	3601      	adds	r6, #1
 800f102:	4798      	blx	r3
 800f104:	e7ee      	b.n	800f0e4 <__libc_init_array+0xc>
 800f106:	f855 3b04 	ldr.w	r3, [r5], #4
 800f10a:	3601      	adds	r6, #1
 800f10c:	4798      	blx	r3
 800f10e:	e7f2      	b.n	800f0f6 <__libc_init_array+0x1e>
 800f110:	0800f820 	.word	0x0800f820
 800f114:	0800f820 	.word	0x0800f820
 800f118:	0800f820 	.word	0x0800f820
 800f11c:	0800f824 	.word	0x0800f824

0800f120 <__retarget_lock_acquire_recursive>:
 800f120:	4770      	bx	lr

0800f122 <__retarget_lock_release_recursive>:
 800f122:	4770      	bx	lr

0800f124 <_free_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4605      	mov	r5, r0
 800f128:	2900      	cmp	r1, #0
 800f12a:	d041      	beq.n	800f1b0 <_free_r+0x8c>
 800f12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f130:	1f0c      	subs	r4, r1, #4
 800f132:	2b00      	cmp	r3, #0
 800f134:	bfb8      	it	lt
 800f136:	18e4      	addlt	r4, r4, r3
 800f138:	f7ff ffa4 	bl	800f084 <__malloc_lock>
 800f13c:	4a1d      	ldr	r2, [pc, #116]	@ (800f1b4 <_free_r+0x90>)
 800f13e:	6813      	ldr	r3, [r2, #0]
 800f140:	b933      	cbnz	r3, 800f150 <_free_r+0x2c>
 800f142:	6063      	str	r3, [r4, #4]
 800f144:	6014      	str	r4, [r2, #0]
 800f146:	4628      	mov	r0, r5
 800f148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f14c:	f7ff bfa0 	b.w	800f090 <__malloc_unlock>
 800f150:	42a3      	cmp	r3, r4
 800f152:	d908      	bls.n	800f166 <_free_r+0x42>
 800f154:	6820      	ldr	r0, [r4, #0]
 800f156:	1821      	adds	r1, r4, r0
 800f158:	428b      	cmp	r3, r1
 800f15a:	bf01      	itttt	eq
 800f15c:	6819      	ldreq	r1, [r3, #0]
 800f15e:	685b      	ldreq	r3, [r3, #4]
 800f160:	1809      	addeq	r1, r1, r0
 800f162:	6021      	streq	r1, [r4, #0]
 800f164:	e7ed      	b.n	800f142 <_free_r+0x1e>
 800f166:	461a      	mov	r2, r3
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	b10b      	cbz	r3, 800f170 <_free_r+0x4c>
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	d9fa      	bls.n	800f166 <_free_r+0x42>
 800f170:	6811      	ldr	r1, [r2, #0]
 800f172:	1850      	adds	r0, r2, r1
 800f174:	42a0      	cmp	r0, r4
 800f176:	d10b      	bne.n	800f190 <_free_r+0x6c>
 800f178:	6820      	ldr	r0, [r4, #0]
 800f17a:	4401      	add	r1, r0
 800f17c:	1850      	adds	r0, r2, r1
 800f17e:	6011      	str	r1, [r2, #0]
 800f180:	4283      	cmp	r3, r0
 800f182:	d1e0      	bne.n	800f146 <_free_r+0x22>
 800f184:	6818      	ldr	r0, [r3, #0]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	4408      	add	r0, r1
 800f18a:	6053      	str	r3, [r2, #4]
 800f18c:	6010      	str	r0, [r2, #0]
 800f18e:	e7da      	b.n	800f146 <_free_r+0x22>
 800f190:	d902      	bls.n	800f198 <_free_r+0x74>
 800f192:	230c      	movs	r3, #12
 800f194:	602b      	str	r3, [r5, #0]
 800f196:	e7d6      	b.n	800f146 <_free_r+0x22>
 800f198:	6820      	ldr	r0, [r4, #0]
 800f19a:	1821      	adds	r1, r4, r0
 800f19c:	428b      	cmp	r3, r1
 800f19e:	bf02      	ittt	eq
 800f1a0:	6819      	ldreq	r1, [r3, #0]
 800f1a2:	685b      	ldreq	r3, [r3, #4]
 800f1a4:	1809      	addeq	r1, r1, r0
 800f1a6:	6063      	str	r3, [r4, #4]
 800f1a8:	bf08      	it	eq
 800f1aa:	6021      	streq	r1, [r4, #0]
 800f1ac:	6054      	str	r4, [r2, #4]
 800f1ae:	e7ca      	b.n	800f146 <_free_r+0x22>
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20000da0 	.word	0x20000da0

0800f1b8 <log>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	ec55 4b10 	vmov	r4, r5, d0
 800f1be:	ed2d 8b02 	vpush	{d8}
 800f1c2:	f000 f841 	bl	800f248 <__ieee754_log>
 800f1c6:	4622      	mov	r2, r4
 800f1c8:	462b      	mov	r3, r5
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f1d2:	eef0 8a60 	vmov.f32	s17, s1
 800f1d6:	f7f1 fc89 	bl	8000aec <__aeabi_dcmpun>
 800f1da:	b998      	cbnz	r0, 800f204 <log+0x4c>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	2300      	movs	r3, #0
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	f7f1 fc78 	bl	8000ad8 <__aeabi_dcmpgt>
 800f1e8:	b960      	cbnz	r0, 800f204 <log+0x4c>
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	f7f1 fc49 	bl	8000a88 <__aeabi_dcmpeq>
 800f1f6:	b160      	cbz	r0, 800f212 <log+0x5a>
 800f1f8:	f7ff ff68 	bl	800f0cc <__errno>
 800f1fc:	2322      	movs	r3, #34	@ 0x22
 800f1fe:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800f228 <log+0x70>
 800f202:	6003      	str	r3, [r0, #0]
 800f204:	eeb0 0a48 	vmov.f32	s0, s16
 800f208:	eef0 0a68 	vmov.f32	s1, s17
 800f20c:	ecbd 8b02 	vpop	{d8}
 800f210:	bd38      	pop	{r3, r4, r5, pc}
 800f212:	f7ff ff5b 	bl	800f0cc <__errno>
 800f216:	2321      	movs	r3, #33	@ 0x21
 800f218:	ecbd 8b02 	vpop	{d8}
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	4804      	ldr	r0, [pc, #16]	@ (800f230 <log+0x78>)
 800f220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f224:	f000 b808 	b.w	800f238 <nan>
 800f228:	00000000 	.word	0x00000000
 800f22c:	fff00000 	.word	0xfff00000
 800f230:	0800f81c 	.word	0x0800f81c
 800f234:	00000000 	.word	0x00000000

0800f238 <nan>:
 800f238:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f240 <nan+0x8>
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	00000000 	.word	0x00000000
 800f244:	7ff80000 	.word	0x7ff80000

0800f248 <__ieee754_log>:
 800f248:	ec51 0b10 	vmov	r0, r1, d0
 800f24c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	460d      	mov	r5, r1
 800f256:	b087      	sub	sp, #28
 800f258:	da26      	bge.n	800f2a8 <__ieee754_log+0x60>
 800f25a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f25e:	4602      	mov	r2, r0
 800f260:	4303      	orrs	r3, r0
 800f262:	d10a      	bne.n	800f27a <__ieee754_log+0x32>
 800f264:	2200      	movs	r2, #0
 800f266:	2300      	movs	r3, #0
 800f268:	2000      	movs	r0, #0
 800f26a:	49cb      	ldr	r1, [pc, #812]	@ (800f598 <__ieee754_log+0x350>)
 800f26c:	f7f1 face 	bl	800080c <__aeabi_ddiv>
 800f270:	ec41 0b10 	vmov	d0, r0, r1
 800f274:	b007      	add	sp, #28
 800f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27a:	2900      	cmp	r1, #0
 800f27c:	da05      	bge.n	800f28a <__ieee754_log+0x42>
 800f27e:	460b      	mov	r3, r1
 800f280:	f7f0 ffe2 	bl	8000248 <__aeabi_dsub>
 800f284:	2200      	movs	r2, #0
 800f286:	2300      	movs	r3, #0
 800f288:	e7f0      	b.n	800f26c <__ieee754_log+0x24>
 800f28a:	4bc4      	ldr	r3, [pc, #784]	@ (800f59c <__ieee754_log+0x354>)
 800f28c:	2200      	movs	r2, #0
 800f28e:	f7f1 f993 	bl	80005b8 <__aeabi_dmul>
 800f292:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800f296:	460d      	mov	r5, r1
 800f298:	4ac1      	ldr	r2, [pc, #772]	@ (800f5a0 <__ieee754_log+0x358>)
 800f29a:	4295      	cmp	r5, r2
 800f29c:	dd06      	ble.n	800f2ac <__ieee754_log+0x64>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	f7f0 ffd3 	bl	800024c <__adddf3>
 800f2a6:	e7e3      	b.n	800f270 <__ieee754_log+0x28>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e7f5      	b.n	800f298 <__ieee754_log+0x50>
 800f2ac:	152c      	asrs	r4, r5, #20
 800f2ae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f2b2:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800f2b6:	441c      	add	r4, r3
 800f2b8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800f2bc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800f2c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f2c4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800f2c8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f2cc:	4bb5      	ldr	r3, [pc, #724]	@ (800f5a4 <__ieee754_log+0x35c>)
 800f2ce:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800f2d2:	ea42 0105 	orr.w	r1, r2, r5
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f7f0 ffb6 	bl	8000248 <__aeabi_dsub>
 800f2dc:	1cab      	adds	r3, r5, #2
 800f2de:	4682      	mov	sl, r0
 800f2e0:	468b      	mov	fp, r1
 800f2e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	dc53      	bgt.n	800f394 <__ieee754_log+0x14c>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f7f1 fbcb 	bl	8000a88 <__aeabi_dcmpeq>
 800f2f2:	b1d0      	cbz	r0, 800f32a <__ieee754_log+0xe2>
 800f2f4:	2c00      	cmp	r4, #0
 800f2f6:	f000 8120 	beq.w	800f53a <__ieee754_log+0x2f2>
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f7f1 f8f2 	bl	80004e4 <__aeabi_i2d>
 800f300:	4606      	mov	r6, r0
 800f302:	460f      	mov	r7, r1
 800f304:	a38e      	add	r3, pc, #568	@ (adr r3, 800f540 <__ieee754_log+0x2f8>)
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	f7f1 f955 	bl	80005b8 <__aeabi_dmul>
 800f30e:	4604      	mov	r4, r0
 800f310:	460d      	mov	r5, r1
 800f312:	4630      	mov	r0, r6
 800f314:	4639      	mov	r1, r7
 800f316:	a38c      	add	r3, pc, #560	@ (adr r3, 800f548 <__ieee754_log+0x300>)
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	f7f1 f94c 	bl	80005b8 <__aeabi_dmul>
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	e7bb      	b.n	800f2a2 <__ieee754_log+0x5a>
 800f32a:	a389      	add	r3, pc, #548	@ (adr r3, 800f550 <__ieee754_log+0x308>)
 800f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f330:	4650      	mov	r0, sl
 800f332:	4659      	mov	r1, fp
 800f334:	f7f1 f940 	bl	80005b8 <__aeabi_dmul>
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	2000      	movs	r0, #0
 800f33e:	499a      	ldr	r1, [pc, #616]	@ (800f5a8 <__ieee754_log+0x360>)
 800f340:	f7f0 ff82 	bl	8000248 <__aeabi_dsub>
 800f344:	4606      	mov	r6, r0
 800f346:	460f      	mov	r7, r1
 800f348:	4652      	mov	r2, sl
 800f34a:	465b      	mov	r3, fp
 800f34c:	4650      	mov	r0, sl
 800f34e:	4659      	mov	r1, fp
 800f350:	f7f1 f932 	bl	80005b8 <__aeabi_dmul>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4630      	mov	r0, r6
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f1 f92c 	bl	80005b8 <__aeabi_dmul>
 800f360:	4606      	mov	r6, r0
 800f362:	460f      	mov	r7, r1
 800f364:	b914      	cbnz	r4, 800f36c <__ieee754_log+0x124>
 800f366:	4632      	mov	r2, r6
 800f368:	463b      	mov	r3, r7
 800f36a:	e0a0      	b.n	800f4ae <__ieee754_log+0x266>
 800f36c:	4620      	mov	r0, r4
 800f36e:	f7f1 f8b9 	bl	80004e4 <__aeabi_i2d>
 800f372:	4680      	mov	r8, r0
 800f374:	4689      	mov	r9, r1
 800f376:	a372      	add	r3, pc, #456	@ (adr r3, 800f540 <__ieee754_log+0x2f8>)
 800f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37c:	f7f1 f91c 	bl	80005b8 <__aeabi_dmul>
 800f380:	4604      	mov	r4, r0
 800f382:	460d      	mov	r5, r1
 800f384:	4640      	mov	r0, r8
 800f386:	4649      	mov	r1, r9
 800f388:	a36f      	add	r3, pc, #444	@ (adr r3, 800f548 <__ieee754_log+0x300>)
 800f38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38e:	f7f1 f913 	bl	80005b8 <__aeabi_dmul>
 800f392:	e0a5      	b.n	800f4e0 <__ieee754_log+0x298>
 800f394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f398:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800f39c:	f7f0 ff56 	bl	800024c <__adddf3>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	4659      	mov	r1, fp
 800f3a8:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800f3ac:	f7f1 fa2e 	bl	800080c <__aeabi_ddiv>
 800f3b0:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800f3b4:	3551      	adds	r5, #81	@ 0x51
 800f3b6:	e9cd 0100 	strd	r0, r1, [sp]
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	4335      	orrs	r5, r6
 800f3be:	f7f1 f891 	bl	80004e4 <__aeabi_i2d>
 800f3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	f7f1 f8f3 	bl	80005b8 <__aeabi_dmul>
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f3da:	f7f1 f8ed 	bl	80005b8 <__aeabi_dmul>
 800f3de:	4680      	mov	r8, r0
 800f3e0:	4689      	mov	r9, r1
 800f3e2:	a35d      	add	r3, pc, #372	@ (adr r3, 800f558 <__ieee754_log+0x310>)
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f7f1 f8e6 	bl	80005b8 <__aeabi_dmul>
 800f3ec:	a35c      	add	r3, pc, #368	@ (adr r3, 800f560 <__ieee754_log+0x318>)
 800f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f2:	f7f0 ff2b 	bl	800024c <__adddf3>
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	464b      	mov	r3, r9
 800f3fa:	f7f1 f8dd 	bl	80005b8 <__aeabi_dmul>
 800f3fe:	a35a      	add	r3, pc, #360	@ (adr r3, 800f568 <__ieee754_log+0x320>)
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	f7f0 ff22 	bl	800024c <__adddf3>
 800f408:	4642      	mov	r2, r8
 800f40a:	464b      	mov	r3, r9
 800f40c:	f7f1 f8d4 	bl	80005b8 <__aeabi_dmul>
 800f410:	a357      	add	r3, pc, #348	@ (adr r3, 800f570 <__ieee754_log+0x328>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f7f0 ff19 	bl	800024c <__adddf3>
 800f41a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f41e:	f7f1 f8cb 	bl	80005b8 <__aeabi_dmul>
 800f422:	a355      	add	r3, pc, #340	@ (adr r3, 800f578 <__ieee754_log+0x330>)
 800f424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f42c:	4640      	mov	r0, r8
 800f42e:	4649      	mov	r1, r9
 800f430:	f7f1 f8c2 	bl	80005b8 <__aeabi_dmul>
 800f434:	a352      	add	r3, pc, #328	@ (adr r3, 800f580 <__ieee754_log+0x338>)
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	f7f0 ff07 	bl	800024c <__adddf3>
 800f43e:	4642      	mov	r2, r8
 800f440:	464b      	mov	r3, r9
 800f442:	f7f1 f8b9 	bl	80005b8 <__aeabi_dmul>
 800f446:	a350      	add	r3, pc, #320	@ (adr r3, 800f588 <__ieee754_log+0x340>)
 800f448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44c:	f7f0 fefe 	bl	800024c <__adddf3>
 800f450:	4642      	mov	r2, r8
 800f452:	464b      	mov	r3, r9
 800f454:	f7f1 f8b0 	bl	80005b8 <__aeabi_dmul>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f460:	f7f0 fef4 	bl	800024c <__adddf3>
 800f464:	2d00      	cmp	r5, #0
 800f466:	4680      	mov	r8, r0
 800f468:	4689      	mov	r9, r1
 800f46a:	dd48      	ble.n	800f4fe <__ieee754_log+0x2b6>
 800f46c:	2200      	movs	r2, #0
 800f46e:	4b4e      	ldr	r3, [pc, #312]	@ (800f5a8 <__ieee754_log+0x360>)
 800f470:	4650      	mov	r0, sl
 800f472:	4659      	mov	r1, fp
 800f474:	f7f1 f8a0 	bl	80005b8 <__aeabi_dmul>
 800f478:	4652      	mov	r2, sl
 800f47a:	465b      	mov	r3, fp
 800f47c:	f7f1 f89c 	bl	80005b8 <__aeabi_dmul>
 800f480:	4602      	mov	r2, r0
 800f482:	460b      	mov	r3, r1
 800f484:	4606      	mov	r6, r0
 800f486:	460f      	mov	r7, r1
 800f488:	4640      	mov	r0, r8
 800f48a:	4649      	mov	r1, r9
 800f48c:	f7f0 fede 	bl	800024c <__adddf3>
 800f490:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f494:	f7f1 f890 	bl	80005b8 <__aeabi_dmul>
 800f498:	4680      	mov	r8, r0
 800f49a:	4689      	mov	r9, r1
 800f49c:	b964      	cbnz	r4, 800f4b8 <__ieee754_log+0x270>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f0 fecf 	bl	8000248 <__aeabi_dsub>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	4650      	mov	r0, sl
 800f4b0:	4659      	mov	r1, fp
 800f4b2:	f7f0 fec9 	bl	8000248 <__aeabi_dsub>
 800f4b6:	e6db      	b.n	800f270 <__ieee754_log+0x28>
 800f4b8:	a321      	add	r3, pc, #132	@ (adr r3, 800f540 <__ieee754_log+0x2f8>)
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4c2:	f7f1 f879 	bl	80005b8 <__aeabi_dmul>
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	460d      	mov	r5, r1
 800f4ca:	a31f      	add	r3, pc, #124	@ (adr r3, 800f548 <__ieee754_log+0x300>)
 800f4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4d4:	f7f1 f870 	bl	80005b8 <__aeabi_dmul>
 800f4d8:	4642      	mov	r2, r8
 800f4da:	464b      	mov	r3, r9
 800f4dc:	f7f0 feb6 	bl	800024c <__adddf3>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	4639      	mov	r1, r7
 800f4e8:	f7f0 feae 	bl	8000248 <__aeabi_dsub>
 800f4ec:	4652      	mov	r2, sl
 800f4ee:	465b      	mov	r3, fp
 800f4f0:	f7f0 feaa 	bl	8000248 <__aeabi_dsub>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	e7d9      	b.n	800f4b2 <__ieee754_log+0x26a>
 800f4fe:	4602      	mov	r2, r0
 800f500:	460b      	mov	r3, r1
 800f502:	4650      	mov	r0, sl
 800f504:	4659      	mov	r1, fp
 800f506:	f7f0 fe9f 	bl	8000248 <__aeabi_dsub>
 800f50a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f50e:	f7f1 f853 	bl	80005b8 <__aeabi_dmul>
 800f512:	4606      	mov	r6, r0
 800f514:	460f      	mov	r7, r1
 800f516:	2c00      	cmp	r4, #0
 800f518:	f43f af25 	beq.w	800f366 <__ieee754_log+0x11e>
 800f51c:	a308      	add	r3, pc, #32	@ (adr r3, 800f540 <__ieee754_log+0x2f8>)
 800f51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f526:	f7f1 f847 	bl	80005b8 <__aeabi_dmul>
 800f52a:	4604      	mov	r4, r0
 800f52c:	460d      	mov	r5, r1
 800f52e:	a306      	add	r3, pc, #24	@ (adr r3, 800f548 <__ieee754_log+0x300>)
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f538:	e729      	b.n	800f38e <__ieee754_log+0x146>
 800f53a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 800f590 <__ieee754_log+0x348>
 800f53e:	e699      	b.n	800f274 <__ieee754_log+0x2c>
 800f540:	fee00000 	.word	0xfee00000
 800f544:	3fe62e42 	.word	0x3fe62e42
 800f548:	35793c76 	.word	0x35793c76
 800f54c:	3dea39ef 	.word	0x3dea39ef
 800f550:	55555555 	.word	0x55555555
 800f554:	3fd55555 	.word	0x3fd55555
 800f558:	df3e5244 	.word	0xdf3e5244
 800f55c:	3fc2f112 	.word	0x3fc2f112
 800f560:	96cb03de 	.word	0x96cb03de
 800f564:	3fc74664 	.word	0x3fc74664
 800f568:	94229359 	.word	0x94229359
 800f56c:	3fd24924 	.word	0x3fd24924
 800f570:	55555593 	.word	0x55555593
 800f574:	3fe55555 	.word	0x3fe55555
 800f578:	d078c69f 	.word	0xd078c69f
 800f57c:	3fc39a09 	.word	0x3fc39a09
 800f580:	1d8e78af 	.word	0x1d8e78af
 800f584:	3fcc71c5 	.word	0x3fcc71c5
 800f588:	9997fa04 	.word	0x9997fa04
 800f58c:	3fd99999 	.word	0x3fd99999
	...
 800f598:	c3500000 	.word	0xc3500000
 800f59c:	43500000 	.word	0x43500000
 800f5a0:	7fefffff 	.word	0x7fefffff
 800f5a4:	3ff00000 	.word	0x3ff00000
 800f5a8:	3fe00000 	.word	0x3fe00000

0800f5ac <_init>:
 800f5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ae:	bf00      	nop
 800f5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5b2:	bc08      	pop	{r3}
 800f5b4:	469e      	mov	lr, r3
 800f5b6:	4770      	bx	lr

0800f5b8 <_fini>:
 800f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ba:	bf00      	nop
 800f5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5be:	bc08      	pop	{r3}
 800f5c0:	469e      	mov	lr, r3
 800f5c2:	4770      	bx	lr
